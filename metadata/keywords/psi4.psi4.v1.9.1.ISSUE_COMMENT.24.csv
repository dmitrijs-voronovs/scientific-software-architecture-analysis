id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:1101,Availability,Error,Error,1101,"managed to get a pair of builds (current master and this PR's branch) that do not entirely swallow the exception messages for write errors in the PK integral calculation. For me, it took building Psi4 entirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:1160,Availability,Error,Error,1160,"e PK integral calculation. For me, it took building Psi4 entirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:1224,Availability,error,error,1224,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:1248,Availability,Error,Error,1248,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:1313,Availability,error,error,1313,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:1761,Availability,error,error,1761,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:1817,Availability,failure,failure,1817,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:2000,Availability,error,error,2000,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:2185,Availability,down,down,2185,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:132,Integrability,message,messages,132,"OK, I have finally managed to get a pair of builds (current master and this PR's branch) that do not entirely swallow the exception messages for write errors in the PK integral calculation. For me, it took building Psi4 entirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:1767,Integrability,message,message,1767,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:2006,Integrability,message,message,2006,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:2136,Integrability,message,message,2136,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:919,Safety,Abort,Aborted,919,"managed to get a pair of builds (current master and this PR's branch) that do not entirely swallow the exception messages for write errors in the PK integral calculation. For me, it took building Psi4 entirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:1691,Safety,Abort,Aborted,1691,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857:2094,Safety,abort,aborted,2094,"ntirely from source, with nothing from conda at all. stdout/stderr before this PR:. ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; stdout/stderr after this PR:; ```; PSIO_ERROR: unit = 34, errval = 12; terminate called after throwing an instance of 'psi::PsiException'; what():; Fatal Error: WRITE failed. Only some of the bytes were written!; Error writing the first partial page, unit 34.; PSIO_ERROR: 12 (error writing to file). Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/error.cc on line: 131; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*). Aborted (core dumped); ```; The reason why there is no ""disk is full"" error message, is because `SYSTEM_WRITE` only reports a failure and sets errno if the disk is already full when it is called. As long as it can write at least one out of _however many_ bytes it does not set errno. I both cases there is no error message at all in the output file. The current theory is that the `python` process gets aborted by a SIGABRT and cannot write the message to the output file. I think chasing that down is beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304899857
https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:162,Availability,error,error,162,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426
https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:345,Availability,Error,Error,345,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426
https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:368,Availability,error,error,368,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426
https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:396,Availability,Error,Error,396,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426
https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:463,Availability,error,error,463,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426
https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:168,Integrability,message,message,168,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426
https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:40,Safety,abort,abort,40,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426
https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:73,Testability,test,test,73,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426
https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:185,Testability,test,test,185,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426
https://github.com/psi4/psi4/issues/2760#issuecomment-1293529896:1567,Energy Efficiency,energy,energy,1567,"Thank you for bring this to our attention! I was also able to recreate the bug using your example. I looked into it a little bit, and found something interesting. Particularly, it seems the presence of randomness is dependent on the size of the basis set. When one switches the basis set in your minimal example from STO-3G to STO-6G:. ```; diff minimal_example.py my_minimal_example.py ; 20c20; < 'pbe0/sto-3g',; ---; > 'pbe0/sto-6g',; ```. One seems randomness in the final answer, but to a decreased amount:. ```; python3 my_minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2; -0.18948320502566343; -0.18948320502566343; -0.19856521894753998; -0.18948320502566343; -0.18948320502566343; -0.3347954277756876; -0.18948320502566343; -0.18948320502566343; -0.18948320502566343; -0.18948320502566343; ```. That said, the answer PK commonly converges to here seems wrong anyway, as using DIRECT leads to an answer of -0.47102563660383534 h, and DF leads to the close answer of -0.4711430783826256 h. . When switching to the 3-21G basis set:; ```; diff minimal_example.py my_minimal_example.py ; 20c20; < 'pbe0/sto-3g',; ---; > 'pbe0/3-21g',; ```. Everything seems to look good:. ```; python3 my_minimal_example.py --num_threads 6 --scf_type PK --element ; 1 --multiplicity 2; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; ```. Consistent answers, and closely matching the DIRECT energy of -0.4964017399788503 h. These findings lead me to suspect that the issue you pointed out here is due to PK having issues handling calculations with extremely small basis function counts. Regardless, I shall look into this more. Thank you again for bringing this to our attention!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2760#issuecomment-1293529896
https://github.com/psi4/psi4/issues/2760#issuecomment-1293529896:216,Integrability,depend,dependent,216,"Thank you for bring this to our attention! I was also able to recreate the bug using your example. I looked into it a little bit, and found something interesting. Particularly, it seems the presence of randomness is dependent on the size of the basis set. When one switches the basis set in your minimal example from STO-3G to STO-6G:. ```; diff minimal_example.py my_minimal_example.py ; 20c20; < 'pbe0/sto-3g',; ---; > 'pbe0/sto-6g',; ```. One seems randomness in the final answer, but to a decreased amount:. ```; python3 my_minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2; -0.18948320502566343; -0.18948320502566343; -0.19856521894753998; -0.18948320502566343; -0.18948320502566343; -0.3347954277756876; -0.18948320502566343; -0.18948320502566343; -0.18948320502566343; -0.18948320502566343; ```. That said, the answer PK commonly converges to here seems wrong anyway, as using DIRECT leads to an answer of -0.47102563660383534 h, and DF leads to the close answer of -0.4711430783826256 h. . When switching to the 3-21G basis set:; ```; diff minimal_example.py my_minimal_example.py ; 20c20; < 'pbe0/sto-3g',; ---; > 'pbe0/3-21g',; ```. Everything seems to look good:. ```; python3 my_minimal_example.py --num_threads 6 --scf_type PK --element ; 1 --multiplicity 2; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; -0.4964017399794977; ```. Consistent answers, and closely matching the DIRECT energy of -0.4964017399788503 h. These findings lead me to suspect that the issue you pointed out here is due to PK having issues handling calculations with extremely small basis function counts. Regardless, I shall look into this more. Thank you again for bringing this to our attention!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2760#issuecomment-1293529896
https://github.com/psi4/psi4/issues/2760#issuecomment-1295073395:134,Energy Efficiency,energy,energy,134,I bet this is a problem with all minimal basis sets like STO-3G and STO-6G. Maybe something has changed in the SCF loop and the final energy is not stored if the density did not change in the first SCF iteration?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2760#issuecomment-1295073395
https://github.com/psi4/psi4/issues/2760#issuecomment-1297581676:211,Usability,Simpl,Simply,211,"Hi all! I have submitted a PR to fix this bug. The bug behind this issue is that, for sufficiently small calculations run in parallel with the PK SCF option, the buffer size per thread can actually be set to 0. Simply enforcing a minimum buffer size per thread of 1 seems to fix the issue presented here. Thank you again for bring this bug to our attention!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2760#issuecomment-1297581676
https://github.com/psi4/psi4/pull/2761#issuecomment-1302395632:39,Availability,failure,failure,39,Please rebase and push again. The test failure (unrelated to this PR) should be fixed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2761#issuecomment-1302395632
https://github.com/psi4/psi4/pull/2761#issuecomment-1302395632:34,Testability,test,test,34,Please rebase and push again. The test failure (unrelated to this PR) should be fixed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2761#issuecomment-1302395632
https://github.com/psi4/psi4/pull/2762#issuecomment-1293471883:18,Availability,failure,failure,18,"Looking at the CI failure logs, it seems that the issue is with the package ""Pint"":. `ImportError: cannot import name 'quantity' from 'pint' (C:\Miniconda\envs\baseenv\lib\site-packages\pint\__init__.py). This particular error seems to commonly show up for the failed CI tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1293471883
https://github.com/psi4/psi4/pull/2762#issuecomment-1293471883:221,Availability,error,error,221,"Looking at the CI failure logs, it seems that the issue is with the package ""Pint"":. `ImportError: cannot import name 'quantity' from 'pint' (C:\Miniconda\envs\baseenv\lib\site-packages\pint\__init__.py). This particular error seems to commonly show up for the failed CI tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1293471883
https://github.com/psi4/psi4/pull/2762#issuecomment-1293471883:26,Testability,log,logs,26,"Looking at the CI failure logs, it seems that the issue is with the package ""Pint"":. `ImportError: cannot import name 'quantity' from 'pint' (C:\Miniconda\envs\baseenv\lib\site-packages\pint\__init__.py). This particular error seems to commonly show up for the failed CI tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1293471883
https://github.com/psi4/psi4/pull/2762#issuecomment-1293471883:271,Testability,test,tests,271,"Looking at the CI failure logs, it seems that the issue is with the package ""Pint"":. `ImportError: cannot import name 'quantity' from 'pint' (C:\Miniconda\envs\baseenv\lib\site-packages\pint\__init__.py). This particular error seems to commonly show up for the failed CI tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1293471883
https://github.com/psi4/psi4/pull/2762#issuecomment-1300831794:351,Integrability,wrap,wrappings,351,"This PR LGTM. I'm a little iffy about naming a SCF_TYPE based only on its exchange algorithm, but (1) it's in line with COSX and (2) that's an issue that I think we're kicking ahead to the actual J & K separation. There's big code changes, but from my gross comparisons, they're code moving around (collecting J from COSK and K from Direct) in new JK wrappings. > How do we feel about having the integral-direct DF-J implementation in two separate JK subclasses? The plan is to remove this in the second CompositeJK PR, when DFJLinK and DFJCOSK are combined, but is the dual implementation of DF-J something people would take issue with?. No problem by me for temporary dual implementation. If there's any chance this could be forgotten, please file a issue just as a reminder.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1300831794
https://github.com/psi4/psi4/pull/2762#issuecomment-1302167994:563,Integrability,wrap,wrappings,563,"> This PR LGTM. I'm a little iffy about naming a SCF_TYPE based only on its exchange algorithm, but (1) it's in line with COSX. Thanks! Yeah, this precedence is the big reason I named the SCF_TYPE for DFJLinK the way I did. > and (2) that's an issue that I think we're kicking ahead to the actual J & K separation. . This is correct. I plan on adding a new SCF_TYPE naming scheme for CompositeJK in the next CompositeJK PR. > There's big code changes, but from my gross comparisons, they're code moving around (collecting J from COSK and K from Direct) in new JK wrappings. This is also correct. It's basically a refactoring of the code to combine the DFCOSK DFJ with the old DirectJK LinK into a new, separate JK class. > No problem by me for temporary dual implementation. If there's any chance this could be forgotten, please file a issue just as a reminder. Awesome, thanks! This dual implementation is something I plan on removing in the next CompositeJK PR, as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302167994
https://github.com/psi4/psi4/pull/2762#issuecomment-1302167994:613,Modifiability,refactor,refactoring,613,"> This PR LGTM. I'm a little iffy about naming a SCF_TYPE based only on its exchange algorithm, but (1) it's in line with COSX. Thanks! Yeah, this precedence is the big reason I named the SCF_TYPE for DFJLinK the way I did. > and (2) that's an issue that I think we're kicking ahead to the actual J & K separation. . This is correct. I plan on adding a new SCF_TYPE naming scheme for CompositeJK in the next CompositeJK PR. > There's big code changes, but from my gross comparisons, they're code moving around (collecting J from COSK and K from Direct) in new JK wrappings. This is also correct. It's basically a refactoring of the code to combine the DFCOSK DFJ with the old DirectJK LinK into a new, separate JK class. > No problem by me for temporary dual implementation. If there's any chance this could be forgotten, please file a issue just as a reminder. Awesome, thanks! This dual implementation is something I plan on removing in the next CompositeJK PR, as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302167994
https://github.com/psi4/psi4/pull/2762#issuecomment-1302399200:155,Energy Efficiency,efficient,efficient,155,"Conceptual questions before I start a proper review: is it possible to have a J and K algorithm where implementing the two _in a single algorithm_ is more efficient than implementing both in a mix-and-match fashion? If so, how are going to take advantage of the efficiency gains from combining them?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302399200
https://github.com/psi4/psi4/pull/2762#issuecomment-1302473673:157,Energy Efficiency,efficient,efficient,157,"> Conceptual questions before I start a proper review: is it possible to have a J and K algorithm where implementing the two _in a single algorithm_ is more efficient than implementing both in a mix-and-match fashion? If so, how are going to take advantage of the efficiency gains from combining them?. Assuming I'm understanding this question correctly, implementing both J and K together in a single algorithm (as done in DirectJK) is generally more efficient than mix-and-match separate J and K algorithms for smaller systems, but less so for larger systems. This is because, generally, algorithms designed to build J and K separately exploit properties specific to those matrices (e.g. the exponential decay of the Density matrix with distance between basis function pairs in Exchange contributions) to lower algorithmic scaling, with the trade-off of a higher prefactor due to recomputation of integrals across separate J and K algorithms. . If we're talking about, say, trying to compute parts of one matrix within the algorithm meant to compute the other (say, partially building J within the LinK algorithm and building the rest of J in a separate algorithm), this may be possible, and I believe Ochsenfeld discusses this possibility shortly in his LinK paper. But, I'm not so sure of the benefits of doing so, if there are any benefits at all compared to something like DirectJK. Additionally, one of the big benefits of CompositeJK (effective J or K construction in cases where only one such matrix is needed, e.g., DFT with GGA functionals) would be lost.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302473673
https://github.com/psi4/psi4/pull/2762#issuecomment-1302473673:452,Energy Efficiency,efficient,efficient,452,"> Conceptual questions before I start a proper review: is it possible to have a J and K algorithm where implementing the two _in a single algorithm_ is more efficient than implementing both in a mix-and-match fashion? If so, how are going to take advantage of the efficiency gains from combining them?. Assuming I'm understanding this question correctly, implementing both J and K together in a single algorithm (as done in DirectJK) is generally more efficient than mix-and-match separate J and K algorithms for smaller systems, but less so for larger systems. This is because, generally, algorithms designed to build J and K separately exploit properties specific to those matrices (e.g. the exponential decay of the Density matrix with distance between basis function pairs in Exchange contributions) to lower algorithmic scaling, with the trade-off of a higher prefactor due to recomputation of integrals across separate J and K algorithms. . If we're talking about, say, trying to compute parts of one matrix within the algorithm meant to compute the other (say, partially building J within the LinK algorithm and building the rest of J in a separate algorithm), this may be possible, and I believe Ochsenfeld discusses this possibility shortly in his LinK paper. But, I'm not so sure of the benefits of doing so, if there are any benefits at all compared to something like DirectJK. Additionally, one of the big benefits of CompositeJK (effective J or K construction in cases where only one such matrix is needed, e.g., DFT with GGA functionals) would be lost.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302473673
https://github.com/psi4/psi4/pull/2762#issuecomment-1302490589:153,Deployability,integrat,integrating,153,"Wording this another way: what JK features is CompositeJK replacing, and what is it leaving be? Are there J-K combinations that we're leaving be because integrating them with CompositeJK would make things worse?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302490589
https://github.com/psi4/psi4/pull/2762#issuecomment-1302490589:153,Integrability,integrat,integrating,153,"Wording this another way: what JK features is CompositeJK replacing, and what is it leaving be? Are there J-K combinations that we're leaving be because integrating them with CompositeJK would make things worse?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302490589
https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908:155,Deployability,integrat,integrating,155,"> Wording this another way: what JK features is CompositeJK replacing, and what is it leaving be? Are there J-K combinations that we're leaving be because integrating them with CompositeJK would make things worse?. Ahhhhhhhh, thanks for the clarification! I was worried I may have misinterpreted your original question. What CompositeJK will be replacing specifically that is already in Psi4 is the DFJCOSK class and the implementation of LinK in DirectJK. Other expansions that will be made to CompositeJK, such as CFMM, are not yet in Psi4 proper. CompositeJK will not touch other JK algorithms present in Psi4, such as DirectJK or the conventional DFJK algorithms. The original plan for CompositeJK, from many months ago, was to completely redo the JK hierarchy so that any J algorithm in Psi4 could be combined with any K algorithm. However, I was quickly convinced that this was a bad idea, because certain combinations of J and K from the entire Psi4 option list would not perform well. For example, we can see this even now, where the current LinK implementation is always run with DirectJK's formuation of J and thus displays poor performance. The current idea for CompositeJK, then, is that it will he a hub for the implementation of separate J and K build algorithms designed specifically for the construction of those matrices; e.g., Direct DF-J, LinK, COSX, CFMM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908
https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908:155,Integrability,integrat,integrating,155,"> Wording this another way: what JK features is CompositeJK replacing, and what is it leaving be? Are there J-K combinations that we're leaving be because integrating them with CompositeJK would make things worse?. Ahhhhhhhh, thanks for the clarification! I was worried I may have misinterpreted your original question. What CompositeJK will be replacing specifically that is already in Psi4 is the DFJCOSK class and the implementation of LinK in DirectJK. Other expansions that will be made to CompositeJK, such as CFMM, are not yet in Psi4 proper. CompositeJK will not touch other JK algorithms present in Psi4, such as DirectJK or the conventional DFJK algorithms. The original plan for CompositeJK, from many months ago, was to completely redo the JK hierarchy so that any J algorithm in Psi4 could be combined with any K algorithm. However, I was quickly convinced that this was a bad idea, because certain combinations of J and K from the entire Psi4 option list would not perform well. For example, we can see this even now, where the current LinK implementation is always run with DirectJK's formuation of J and thus displays poor performance. The current idea for CompositeJK, then, is that it will he a hub for the implementation of separate J and K build algorithms designed specifically for the construction of those matrices; e.g., Direct DF-J, LinK, COSX, CFMM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908
https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908:979,Performance,perform,perform,979,"> Wording this another way: what JK features is CompositeJK replacing, and what is it leaving be? Are there J-K combinations that we're leaving be because integrating them with CompositeJK would make things worse?. Ahhhhhhhh, thanks for the clarification! I was worried I may have misinterpreted your original question. What CompositeJK will be replacing specifically that is already in Psi4 is the DFJCOSK class and the implementation of LinK in DirectJK. Other expansions that will be made to CompositeJK, such as CFMM, are not yet in Psi4 proper. CompositeJK will not touch other JK algorithms present in Psi4, such as DirectJK or the conventional DFJK algorithms. The original plan for CompositeJK, from many months ago, was to completely redo the JK hierarchy so that any J algorithm in Psi4 could be combined with any K algorithm. However, I was quickly convinced that this was a bad idea, because certain combinations of J and K from the entire Psi4 option list would not perform well. For example, we can see this even now, where the current LinK implementation is always run with DirectJK's formuation of J and thus displays poor performance. The current idea for CompositeJK, then, is that it will he a hub for the implementation of separate J and K build algorithms designed specifically for the construction of those matrices; e.g., Direct DF-J, LinK, COSX, CFMM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908
https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908:1139,Performance,perform,performance,1139,"> Wording this another way: what JK features is CompositeJK replacing, and what is it leaving be? Are there J-K combinations that we're leaving be because integrating them with CompositeJK would make things worse?. Ahhhhhhhh, thanks for the clarification! I was worried I may have misinterpreted your original question. What CompositeJK will be replacing specifically that is already in Psi4 is the DFJCOSK class and the implementation of LinK in DirectJK. Other expansions that will be made to CompositeJK, such as CFMM, are not yet in Psi4 proper. CompositeJK will not touch other JK algorithms present in Psi4, such as DirectJK or the conventional DFJK algorithms. The original plan for CompositeJK, from many months ago, was to completely redo the JK hierarchy so that any J algorithm in Psi4 could be combined with any K algorithm. However, I was quickly convinced that this was a bad idea, because certain combinations of J and K from the entire Psi4 option list would not perform well. For example, we can see this even now, where the current LinK implementation is always run with DirectJK's formuation of J and thus displays poor performance. The current idea for CompositeJK, then, is that it will he a hub for the implementation of separate J and K build algorithms designed specifically for the construction of those matrices; e.g., Direct DF-J, LinK, COSX, CFMM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908
https://github.com/psi4/psi4/pull/2763#issuecomment-1298619970:32,Energy Efficiency,reduce,reduced,32,As long as the threads are only reduced during the PK steps it would only have benefits. No threads that do no work and allocate memory (Even if it doesn't matter in practice). The automatic selection probably ensures the in-core algorithm for these small calculations but could you test `pk_algo = YOSHIMINE/REORDER` and `PK_NO_INCORE True` as well? We probably have no test coverage.; Limiting `nthreads` in the PKManager https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L154 might solve headaches in the other algorithms. I saw a `ntask < nthreads` check in Yoshimine. If that exceeds time you planned to invest for the PK bug fix that is also fine.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2763#issuecomment-1298619970
https://github.com/psi4/psi4/pull/2763#issuecomment-1298619970:120,Energy Efficiency,allocate,allocate,120,As long as the threads are only reduced during the PK steps it would only have benefits. No threads that do no work and allocate memory (Even if it doesn't matter in practice). The automatic selection probably ensures the in-core algorithm for these small calculations but could you test `pk_algo = YOSHIMINE/REORDER` and `PK_NO_INCORE True` as well? We probably have no test coverage.; Limiting `nthreads` in the PKManager https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L154 might solve headaches in the other algorithms. I saw a `ntask < nthreads` check in Yoshimine. If that exceeds time you planned to invest for the PK bug fix that is also fine.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2763#issuecomment-1298619970
https://github.com/psi4/psi4/pull/2763#issuecomment-1298619970:283,Testability,test,test,283,As long as the threads are only reduced during the PK steps it would only have benefits. No threads that do no work and allocate memory (Even if it doesn't matter in practice). The automatic selection probably ensures the in-core algorithm for these small calculations but could you test `pk_algo = YOSHIMINE/REORDER` and `PK_NO_INCORE True` as well? We probably have no test coverage.; Limiting `nthreads` in the PKManager https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L154 might solve headaches in the other algorithms. I saw a `ntask < nthreads` check in Yoshimine. If that exceeds time you planned to invest for the PK bug fix that is also fine.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2763#issuecomment-1298619970
https://github.com/psi4/psi4/pull/2763#issuecomment-1298619970:371,Testability,test,test,371,As long as the threads are only reduced during the PK steps it would only have benefits. No threads that do no work and allocate memory (Even if it doesn't matter in practice). The automatic selection probably ensures the in-core algorithm for these small calculations but could you test `pk_algo = YOSHIMINE/REORDER` and `PK_NO_INCORE True` as well? We probably have no test coverage.; Limiting `nthreads` in the PKManager https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L154 might solve headaches in the other algorithms. I saw a `ntask < nthreads` check in Yoshimine. If that exceeds time you planned to invest for the PK bug fix that is also fine.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2763#issuecomment-1298619970
https://github.com/psi4/psi4/pull/2763#issuecomment-1298684102:34,Energy Efficiency,reduce,reduced,34,"> As long as the threads are only reduced during the PK steps it would only have benefits. No threads that do no work and allocate memory (Even if it doesn't matter in practice). This is all true. Any opposition I would have to reducing thread counts is from a principle standpoint - essentially having the code forcibly doing something in opposition to what the user wanted it to do. That said, this is a minor qualm on my part, and everything you said here is correct regardless. > The automatic selection probably ensures the in-core algorithm for these small calculations but could you test pk_algo = YOSHIMINE/REORDER and PK_NO_INCORE True as well? We probably have no test coverage.; Limiting nthreads in the PKManager https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L154 might solve headaches in the other algorithms. I saw a ntask < nthreads check in Yoshimine. Sure! I tested the Yoshimine and Reorder algorithms (with PK_NO_INCORE set to True) with a slightly modified form of the minimal_example.py file provided in issue https://github.com/psi4/psi4/issues/2760; and as it turns out, using PK_ALGO=REORDER leads to a segfault when using my implementation. Your suggestion of changing nthreads directly fixes that REORDER segfault issue as well. In light of that, I will be happy to use your suggested methodology for this PR!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2763#issuecomment-1298684102
https://github.com/psi4/psi4/pull/2763#issuecomment-1298684102:122,Energy Efficiency,allocate,allocate,122,"> As long as the threads are only reduced during the PK steps it would only have benefits. No threads that do no work and allocate memory (Even if it doesn't matter in practice). This is all true. Any opposition I would have to reducing thread counts is from a principle standpoint - essentially having the code forcibly doing something in opposition to what the user wanted it to do. That said, this is a minor qualm on my part, and everything you said here is correct regardless. > The automatic selection probably ensures the in-core algorithm for these small calculations but could you test pk_algo = YOSHIMINE/REORDER and PK_NO_INCORE True as well? We probably have no test coverage.; Limiting nthreads in the PKManager https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L154 might solve headaches in the other algorithms. I saw a ntask < nthreads check in Yoshimine. Sure! I tested the Yoshimine and Reorder algorithms (with PK_NO_INCORE set to True) with a slightly modified form of the minimal_example.py file provided in issue https://github.com/psi4/psi4/issues/2760; and as it turns out, using PK_ALGO=REORDER leads to a segfault when using my implementation. Your suggestion of changing nthreads directly fixes that REORDER segfault issue as well. In light of that, I will be happy to use your suggested methodology for this PR!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2763#issuecomment-1298684102
https://github.com/psi4/psi4/pull/2763#issuecomment-1298684102:590,Testability,test,test,590,"> As long as the threads are only reduced during the PK steps it would only have benefits. No threads that do no work and allocate memory (Even if it doesn't matter in practice). This is all true. Any opposition I would have to reducing thread counts is from a principle standpoint - essentially having the code forcibly doing something in opposition to what the user wanted it to do. That said, this is a minor qualm on my part, and everything you said here is correct regardless. > The automatic selection probably ensures the in-core algorithm for these small calculations but could you test pk_algo = YOSHIMINE/REORDER and PK_NO_INCORE True as well? We probably have no test coverage.; Limiting nthreads in the PKManager https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L154 might solve headaches in the other algorithms. I saw a ntask < nthreads check in Yoshimine. Sure! I tested the Yoshimine and Reorder algorithms (with PK_NO_INCORE set to True) with a slightly modified form of the minimal_example.py file provided in issue https://github.com/psi4/psi4/issues/2760; and as it turns out, using PK_ALGO=REORDER leads to a segfault when using my implementation. Your suggestion of changing nthreads directly fixes that REORDER segfault issue as well. In light of that, I will be happy to use your suggested methodology for this PR!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2763#issuecomment-1298684102
https://github.com/psi4/psi4/pull/2763#issuecomment-1298684102:674,Testability,test,test,674,"> As long as the threads are only reduced during the PK steps it would only have benefits. No threads that do no work and allocate memory (Even if it doesn't matter in practice). This is all true. Any opposition I would have to reducing thread counts is from a principle standpoint - essentially having the code forcibly doing something in opposition to what the user wanted it to do. That said, this is a minor qualm on my part, and everything you said here is correct regardless. > The automatic selection probably ensures the in-core algorithm for these small calculations but could you test pk_algo = YOSHIMINE/REORDER and PK_NO_INCORE True as well? We probably have no test coverage.; Limiting nthreads in the PKManager https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L154 might solve headaches in the other algorithms. I saw a ntask < nthreads check in Yoshimine. Sure! I tested the Yoshimine and Reorder algorithms (with PK_NO_INCORE set to True) with a slightly modified form of the minimal_example.py file provided in issue https://github.com/psi4/psi4/issues/2760; and as it turns out, using PK_ALGO=REORDER leads to a segfault when using my implementation. Your suggestion of changing nthreads directly fixes that REORDER segfault issue as well. In light of that, I will be happy to use your suggested methodology for this PR!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2763#issuecomment-1298684102
https://github.com/psi4/psi4/pull/2763#issuecomment-1298684102:907,Testability,test,tested,907,"> As long as the threads are only reduced during the PK steps it would only have benefits. No threads that do no work and allocate memory (Even if it doesn't matter in practice). This is all true. Any opposition I would have to reducing thread counts is from a principle standpoint - essentially having the code forcibly doing something in opposition to what the user wanted it to do. That said, this is a minor qualm on my part, and everything you said here is correct regardless. > The automatic selection probably ensures the in-core algorithm for these small calculations but could you test pk_algo = YOSHIMINE/REORDER and PK_NO_INCORE True as well? We probably have no test coverage.; Limiting nthreads in the PKManager https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L154 might solve headaches in the other algorithms. I saw a ntask < nthreads check in Yoshimine. Sure! I tested the Yoshimine and Reorder algorithms (with PK_NO_INCORE set to True) with a slightly modified form of the minimal_example.py file provided in issue https://github.com/psi4/psi4/issues/2760; and as it turns out, using PK_ALGO=REORDER leads to a segfault when using my implementation. Your suggestion of changing nthreads directly fixes that REORDER segfault issue as well. In light of that, I will be happy to use your suggested methodology for this PR!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2763#issuecomment-1298684102
https://github.com/psi4/psi4/pull/2766#issuecomment-1303443124:18,Testability,test,test,18,"> Do we need more test coverage? I haven't actually checked LDA instability analysis. Imagining a test is tricky. Simple. Run a LDA calculation with the wrong occupations, and run the stability analysis which should reveal negative eigenvalues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1303443124
https://github.com/psi4/psi4/pull/2766#issuecomment-1303443124:98,Testability,test,test,98,"> Do we need more test coverage? I haven't actually checked LDA instability analysis. Imagining a test is tricky. Simple. Run a LDA calculation with the wrong occupations, and run the stability analysis which should reveal negative eigenvalues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1303443124
https://github.com/psi4/psi4/pull/2766#issuecomment-1303443124:114,Usability,Simpl,Simple,114,"> Do we need more test coverage? I haven't actually checked LDA instability analysis. Imagining a test is tricky. Simple. Run a LDA calculation with the wrong occupations, and run the stability analysis which should reveal negative eigenvalues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1303443124
https://github.com/psi4/psi4/pull/2766#issuecomment-1303494696:20,Testability,test,test,20,"> > Do we need more test coverage? I haven't actually checked LDA instability analysis. Imagining a test is tricky.; > ; > Simple. Run a LDA calculation with the wrong occupations, and run the stability analysis which should reveal negative eigenvalues. That's a good start. To make it more stringent, could somebody do this exercise in QChem and report both the system and the instability eigenvalues? if Psi can reproduce those results, I'll be thrilled. (Please do the same for HF as well, so we can catch prefactor differences between Psi and QChem.) I'd do this myself, but Emory doesn't have QChem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1303494696
https://github.com/psi4/psi4/pull/2766#issuecomment-1303494696:100,Testability,test,test,100,"> > Do we need more test coverage? I haven't actually checked LDA instability analysis. Imagining a test is tricky.; > ; > Simple. Run a LDA calculation with the wrong occupations, and run the stability analysis which should reveal negative eigenvalues. That's a good start. To make it more stringent, could somebody do this exercise in QChem and report both the system and the instability eigenvalues? if Psi can reproduce those results, I'll be thrilled. (Please do the same for HF as well, so we can catch prefactor differences between Psi and QChem.) I'd do this myself, but Emory doesn't have QChem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1303494696
https://github.com/psi4/psi4/pull/2766#issuecomment-1303494696:123,Usability,Simpl,Simple,123,"> > Do we need more test coverage? I haven't actually checked LDA instability analysis. Imagining a test is tricky.; > ; > Simple. Run a LDA calculation with the wrong occupations, and run the stability analysis which should reveal negative eigenvalues. That's a good start. To make it more stringent, could somebody do this exercise in QChem and report both the system and the instability eigenvalues? if Psi can reproduce those results, I'll be thrilled. (Please do the same for HF as well, so we can catch prefactor differences between Psi and QChem.) I'd do this myself, but Emory doesn't have QChem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1303494696
https://github.com/psi4/psi4/pull/2766#issuecomment-1304809239:351,Energy Efficiency,energy,energy,351,"triplet B2 (qchem example), def2-SVP; ```; QCHEM_HF -0.0923 -0.3325; PSI4_HF -0.04614 -0.1663 # factor of 2! --> -0.09228 -0.3326; QCHEM_SVWN3 0.0406 0.0406 -0.0364; ```. ```; molecule bb {; 0 3; b; b 1 R; R = 1.587553; symmetry c1; }. set {; reference uhf; basis def2-svp; STABILITY_ANALYSIS check; SOLVER_N_GUESS 4; solver_n_root 2; scf_type pk; }. energy('hf'); # energy('svwn') ; ev=variable('SCF STABILITY EIGENVALUES').np; print_out(f""All eigenvalues: {ev} \n""); print(f""All eigenvalues: {ev} \n""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1304809239
https://github.com/psi4/psi4/pull/2766#issuecomment-1304809239:367,Energy Efficiency,energy,energy,367,"triplet B2 (qchem example), def2-SVP; ```; QCHEM_HF -0.0923 -0.3325; PSI4_HF -0.04614 -0.1663 # factor of 2! --> -0.09228 -0.3326; QCHEM_SVWN3 0.0406 0.0406 -0.0364; ```. ```; molecule bb {; 0 3; b; b 1 R; R = 1.587553; symmetry c1; }. set {; reference uhf; basis def2-svp; STABILITY_ANALYSIS check; SOLVER_N_GUESS 4; solver_n_root 2; scf_type pk; }. energy('hf'); # energy('svwn') ; ev=variable('SCF STABILITY EIGENVALUES').np; print_out(f""All eigenvalues: {ev} \n""); print(f""All eigenvalues: {ev} \n""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1304809239
https://github.com/psi4/psi4/pull/2766#issuecomment-1304809239:387,Modifiability,variab,variable,387,"triplet B2 (qchem example), def2-SVP; ```; QCHEM_HF -0.0923 -0.3325; PSI4_HF -0.04614 -0.1663 # factor of 2! --> -0.09228 -0.3326; QCHEM_SVWN3 0.0406 0.0406 -0.0364; ```. ```; molecule bb {; 0 3; b; b 1 R; R = 1.587553; symmetry c1; }. set {; reference uhf; basis def2-svp; STABILITY_ANALYSIS check; SOLVER_N_GUESS 4; solver_n_root 2; scf_type pk; }. energy('hf'); # energy('svwn') ; ev=variable('SCF STABILITY EIGENVALUES').np; print_out(f""All eigenvalues: {ev} \n""); print(f""All eigenvalues: {ev} \n""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1304809239
https://github.com/psi4/psi4/pull/2766#issuecomment-1305713366:73,Availability,error,error,73,"Excellent. Psi being too low by a prefactor of 2 was the exact prefactor error that I expected. QChem's eigenvalues are the correct ones. This error in Psi has no computational effect in SOSCF because our gradient has the same prefactor error, no effect in instability analysis because of normalization, and no effect in standard SCF steps because diagonalization doesn't care about orbital gradients and hessians. Psi's instability analysis returns 0.02026 and -0.0142. The lower eigenvalue does not match QChem and does not change significantly in response to increasing convergence tightness or grid points. I expect to have a busy week, but I'll do some poking at why this is. If this seems to be a rabbit hole, I'll just drop LDA-UKS support.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1305713366
https://github.com/psi4/psi4/pull/2766#issuecomment-1305713366:143,Availability,error,error,143,"Excellent. Psi being too low by a prefactor of 2 was the exact prefactor error that I expected. QChem's eigenvalues are the correct ones. This error in Psi has no computational effect in SOSCF because our gradient has the same prefactor error, no effect in instability analysis because of normalization, and no effect in standard SCF steps because diagonalization doesn't care about orbital gradients and hessians. Psi's instability analysis returns 0.02026 and -0.0142. The lower eigenvalue does not match QChem and does not change significantly in response to increasing convergence tightness or grid points. I expect to have a busy week, but I'll do some poking at why this is. If this seems to be a rabbit hole, I'll just drop LDA-UKS support.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1305713366
https://github.com/psi4/psi4/pull/2766#issuecomment-1305713366:237,Availability,error,error,237,"Excellent. Psi being too low by a prefactor of 2 was the exact prefactor error that I expected. QChem's eigenvalues are the correct ones. This error in Psi has no computational effect in SOSCF because our gradient has the same prefactor error, no effect in instability analysis because of normalization, and no effect in standard SCF steps because diagonalization doesn't care about orbital gradients and hessians. Psi's instability analysis returns 0.02026 and -0.0142. The lower eigenvalue does not match QChem and does not change significantly in response to increasing convergence tightness or grid points. I expect to have a busy week, but I'll do some poking at why this is. If this seems to be a rabbit hole, I'll just drop LDA-UKS support.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1305713366
https://github.com/psi4/psi4/pull/2766#issuecomment-1305868903:7,Testability,test,test,7,"Let me test something with the DFT part. edit: main suspect is the ""wrong"" VWN correlation",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1305868903
https://github.com/psi4/psi4/pull/2766#issuecomment-1305889380:291,Testability,test,tested,291,"In our docs it says `SVWN | SVWN3 (RPA)` for psi4 and I took `VWN3` in QChem. But libxc nomenclature is `VWN_RPA` (no added 3) for what psi4 uses and in Qchem that is `VNW1RPA` because why not :). ```; qchem svnw(RPA): -0.0285 0.0405 0.0405 ; ```; That agrees well with psi4, yay! I locally tested also PW92 with qchem and psi4 and they agree as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1305889380
https://github.com/psi4/psi4/pull/2766#issuecomment-1310708464:35,Deployability,release,release,35,Added some more docs warning and a release note item. Thanks for the approval!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1310708464
https://github.com/psi4/psi4/pull/2766#issuecomment-1314195915:50,Testability,log,logic,50,"> Does this fix #1125?. No. The ""number-of-roots"" logic will need to be changed in a different PR. The goal of this PR is to move over to Python with minimal behavior changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1314195915
https://github.com/psi4/psi4/pull/2767#issuecomment-1307045497:178,Availability,down,down,178,I think I'm going to have a look at the mysterious segfault since I've been doing quite some libmints/libint2-related debugging for #2414 etc. It should not be too hard to track down (hopefully) 😄,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1307045497
https://github.com/psi4/psi4/pull/2767#issuecomment-1326705824:167,Energy Efficiency,energy,energy,167,"Also I'm not sure how to deal with the ambivalence between DDX and PCM in terms of the user-facing flags to enable the models and the Psi variables to store results / energy terms. PCMsolver can do PCM and COSMO, but DDX can provide domain-decomposition variants of these plus in the future linearised Poisson-Boltzmann (LPB), which is in some sense an extension to PCM. So looking ahead it feels weird to have a flag PCM to decide whether LPB is run. Similar DDX and PCMsolver will not give the same values for the solvation energy, but are still sort of doing the same thing (continuum solvation models). Any thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1326705824
https://github.com/psi4/psi4/pull/2767#issuecomment-1326705824:526,Energy Efficiency,energy,energy,526,"Also I'm not sure how to deal with the ambivalence between DDX and PCM in terms of the user-facing flags to enable the models and the Psi variables to store results / energy terms. PCMsolver can do PCM and COSMO, but DDX can provide domain-decomposition variants of these plus in the future linearised Poisson-Boltzmann (LPB), which is in some sense an extension to PCM. So looking ahead it feels weird to have a flag PCM to decide whether LPB is run. Similar DDX and PCMsolver will not give the same values for the solvation energy, but are still sort of doing the same thing (continuum solvation models). Any thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1326705824
https://github.com/psi4/psi4/pull/2767#issuecomment-1326705824:138,Modifiability,variab,variables,138,"Also I'm not sure how to deal with the ambivalence between DDX and PCM in terms of the user-facing flags to enable the models and the Psi variables to store results / energy terms. PCMsolver can do PCM and COSMO, but DDX can provide domain-decomposition variants of these plus in the future linearised Poisson-Boltzmann (LPB), which is in some sense an extension to PCM. So looking ahead it feels weird to have a flag PCM to decide whether LPB is run. Similar DDX and PCMsolver will not give the same values for the solvation energy, but are still sort of doing the same thing (continuum solvation models). Any thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1326705824
https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496:788,Performance,perform,performance,788,"Hi @maxscheurer. Let me briefly react to your comments. > If the elec_only functionality is working, one could add LR-DDX for TDDFT. I can look up where the line of code needs to be added. If we want to add this, you could probably generate reference data with Gaussian, if it's not too much to ask. Nice idea, but it is not yet been tested to the point where I would be confident in it. I have this planned as a follow-up to this one ... I'll add a todo for now. > Will it be possible to add nuclear gradients in a follow-up PR? I think this would be a much appreciated feature by a lot of Psi users. Yes absolutely. That takes a bit of work (as more quantities are needed on the psi4-side), but ddx has them and naturally it would make sense to carry that forward to psi4. > What about performance in general? Did you run some small benchmark comparing to the existing PCM implementation? . I did not benchmark things rigorously, but e.g. on nitro-aniline in an STO-3G basis the timings were noticably different. In that setup the main load of the SCF is on the pcm. Here the SCF needs around 150s for PCMsolver and around 40s for ddx. Please take this with a grain of salt as I have done zero testing in how this scales or translates to realistic setups.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496
https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496:1038,Performance,load,load,1038,"Hi @maxscheurer. Let me briefly react to your comments. > If the elec_only functionality is working, one could add LR-DDX for TDDFT. I can look up where the line of code needs to be added. If we want to add this, you could probably generate reference data with Gaussian, if it's not too much to ask. Nice idea, but it is not yet been tested to the point where I would be confident in it. I have this planned as a follow-up to this one ... I'll add a todo for now. > Will it be possible to add nuclear gradients in a follow-up PR? I think this would be a much appreciated feature by a lot of Psi users. Yes absolutely. That takes a bit of work (as more quantities are needed on the psi4-side), but ddx has them and naturally it would make sense to carry that forward to psi4. > What about performance in general? Did you run some small benchmark comparing to the existing PCM implementation? . I did not benchmark things rigorously, but e.g. on nitro-aniline in an STO-3G basis the timings were noticably different. In that setup the main load of the SCF is on the pcm. Here the SCF needs around 150s for PCMsolver and around 40s for ddx. Please take this with a grain of salt as I have done zero testing in how this scales or translates to realistic setups.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496
https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496:334,Testability,test,tested,334,"Hi @maxscheurer. Let me briefly react to your comments. > If the elec_only functionality is working, one could add LR-DDX for TDDFT. I can look up where the line of code needs to be added. If we want to add this, you could probably generate reference data with Gaussian, if it's not too much to ask. Nice idea, but it is not yet been tested to the point where I would be confident in it. I have this planned as a follow-up to this one ... I'll add a todo for now. > Will it be possible to add nuclear gradients in a follow-up PR? I think this would be a much appreciated feature by a lot of Psi users. Yes absolutely. That takes a bit of work (as more quantities are needed on the psi4-side), but ddx has them and naturally it would make sense to carry that forward to psi4. > What about performance in general? Did you run some small benchmark comparing to the existing PCM implementation? . I did not benchmark things rigorously, but e.g. on nitro-aniline in an STO-3G basis the timings were noticably different. In that setup the main load of the SCF is on the pcm. Here the SCF needs around 150s for PCMsolver and around 40s for ddx. Please take this with a grain of salt as I have done zero testing in how this scales or translates to realistic setups.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496
https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496:835,Testability,benchmark,benchmark,835,"Hi @maxscheurer. Let me briefly react to your comments. > If the elec_only functionality is working, one could add LR-DDX for TDDFT. I can look up where the line of code needs to be added. If we want to add this, you could probably generate reference data with Gaussian, if it's not too much to ask. Nice idea, but it is not yet been tested to the point where I would be confident in it. I have this planned as a follow-up to this one ... I'll add a todo for now. > Will it be possible to add nuclear gradients in a follow-up PR? I think this would be a much appreciated feature by a lot of Psi users. Yes absolutely. That takes a bit of work (as more quantities are needed on the psi4-side), but ddx has them and naturally it would make sense to carry that forward to psi4. > What about performance in general? Did you run some small benchmark comparing to the existing PCM implementation? . I did not benchmark things rigorously, but e.g. on nitro-aniline in an STO-3G basis the timings were noticably different. In that setup the main load of the SCF is on the pcm. Here the SCF needs around 150s for PCMsolver and around 40s for ddx. Please take this with a grain of salt as I have done zero testing in how this scales or translates to realistic setups.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496
https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496:903,Testability,benchmark,benchmark,903,"Hi @maxscheurer. Let me briefly react to your comments. > If the elec_only functionality is working, one could add LR-DDX for TDDFT. I can look up where the line of code needs to be added. If we want to add this, you could probably generate reference data with Gaussian, if it's not too much to ask. Nice idea, but it is not yet been tested to the point where I would be confident in it. I have this planned as a follow-up to this one ... I'll add a todo for now. > Will it be possible to add nuclear gradients in a follow-up PR? I think this would be a much appreciated feature by a lot of Psi users. Yes absolutely. That takes a bit of work (as more quantities are needed on the psi4-side), but ddx has them and naturally it would make sense to carry that forward to psi4. > What about performance in general? Did you run some small benchmark comparing to the existing PCM implementation? . I did not benchmark things rigorously, but e.g. on nitro-aniline in an STO-3G basis the timings were noticably different. In that setup the main load of the SCF is on the pcm. Here the SCF needs around 150s for PCMsolver and around 40s for ddx. Please take this with a grain of salt as I have done zero testing in how this scales or translates to realistic setups.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496
https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496:1196,Testability,test,testing,1196,"Hi @maxscheurer. Let me briefly react to your comments. > If the elec_only functionality is working, one could add LR-DDX for TDDFT. I can look up where the line of code needs to be added. If we want to add this, you could probably generate reference data with Gaussian, if it's not too much to ask. Nice idea, but it is not yet been tested to the point where I would be confident in it. I have this planned as a follow-up to this one ... I'll add a todo for now. > Will it be possible to add nuclear gradients in a follow-up PR? I think this would be a much appreciated feature by a lot of Psi users. Yes absolutely. That takes a bit of work (as more quantities are needed on the psi4-side), but ddx has them and naturally it would make sense to carry that forward to psi4. > What about performance in general? Did you run some small benchmark comparing to the existing PCM implementation? . I did not benchmark things rigorously, but e.g. on nitro-aniline in an STO-3G basis the timings were noticably different. In that setup the main load of the SCF is on the pcm. Here the SCF needs around 150s for PCMsolver and around 40s for ddx. Please take this with a grain of salt as I have done zero testing in how this scales or translates to realistic setups.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496
https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358:169,Energy Efficiency,energy,energy,169,"> Also I'm not sure how to deal with the ambivalence between DDX and PCM in terms of the user-facing flags to enable the models and the Psi variables to store results / energy terms. > PCMsolver can do PCM and COSMO, but DDX can provide domain-decomposition variants of these plus in the future linearised Poisson-Boltzmann (LPB), which is in some sense an extension to PCM. So looking ahead it feels weird to have a flag PCM to decide whether LPB is run. Similar DDX and PCMsolver will not give the same values for the solvation energy, but are still sort of doing the same thing (continuum solvation models). Any thoughts?. Psi likes to have a uniform interface when one can get the same value from different engines, but this has really only worked out for empirical dispersion. So the other principle is that it's fine for options to be a passthrough to the upstream project. Then PCM, PE, and DDX are effectually engine/upstream specifiers rather than the method flags that ""PCM"" suggests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358
https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358:530,Energy Efficiency,energy,energy,530,"> Also I'm not sure how to deal with the ambivalence between DDX and PCM in terms of the user-facing flags to enable the models and the Psi variables to store results / energy terms. > PCMsolver can do PCM and COSMO, but DDX can provide domain-decomposition variants of these plus in the future linearised Poisson-Boltzmann (LPB), which is in some sense an extension to PCM. So looking ahead it feels weird to have a flag PCM to decide whether LPB is run. Similar DDX and PCMsolver will not give the same values for the solvation energy, but are still sort of doing the same thing (continuum solvation models). Any thoughts?. Psi likes to have a uniform interface when one can get the same value from different engines, but this has really only worked out for empirical dispersion. So the other principle is that it's fine for options to be a passthrough to the upstream project. Then PCM, PE, and DDX are effectually engine/upstream specifiers rather than the method flags that ""PCM"" suggests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358
https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358:654,Integrability,interface,interface,654,"> Also I'm not sure how to deal with the ambivalence between DDX and PCM in terms of the user-facing flags to enable the models and the Psi variables to store results / energy terms. > PCMsolver can do PCM and COSMO, but DDX can provide domain-decomposition variants of these plus in the future linearised Poisson-Boltzmann (LPB), which is in some sense an extension to PCM. So looking ahead it feels weird to have a flag PCM to decide whether LPB is run. Similar DDX and PCMsolver will not give the same values for the solvation energy, but are still sort of doing the same thing (continuum solvation models). Any thoughts?. Psi likes to have a uniform interface when one can get the same value from different engines, but this has really only worked out for empirical dispersion. So the other principle is that it's fine for options to be a passthrough to the upstream project. Then PCM, PE, and DDX are effectually engine/upstream specifiers rather than the method flags that ""PCM"" suggests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358
https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358:140,Modifiability,variab,variables,140,"> Also I'm not sure how to deal with the ambivalence between DDX and PCM in terms of the user-facing flags to enable the models and the Psi variables to store results / energy terms. > PCMsolver can do PCM and COSMO, but DDX can provide domain-decomposition variants of these plus in the future linearised Poisson-Boltzmann (LPB), which is in some sense an extension to PCM. So looking ahead it feels weird to have a flag PCM to decide whether LPB is run. Similar DDX and PCMsolver will not give the same values for the solvation energy, but are still sort of doing the same thing (continuum solvation models). Any thoughts?. Psi likes to have a uniform interface when one can get the same value from different engines, but this has really only worked out for empirical dispersion. So the other principle is that it's fine for options to be a passthrough to the upstream project. Then PCM, PE, and DDX are effectually engine/upstream specifiers rather than the method flags that ""PCM"" suggests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358
https://github.com/psi4/psi4/pull/2767#issuecomment-1336497610:89,Integrability,interface,interface,89,"Looks like there's a trivial merge conflict. Lmk if you prefer (1) I resolve with the GH interface, (2) I rebase and force-push, or (3) you want to handle it. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1336497610
https://github.com/psi4/psi4/pull/2767#issuecomment-1336978218:76,Testability,test,tests,76,> Looks like there's a trivial merge conflict. . I just fixed it to get the tests running.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1336978218
https://github.com/psi4/psi4/pull/2767#issuecomment-1337328184:88,Deployability,release,release,88,Let's postpone the tighter conv checking and merge this to get it into the upcoming 1.7 release ☺️ Are you ok with this @mfherbst @loriab?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1337328184
https://github.com/psi4/psi4/pull/2767#issuecomment-1337772443:90,Deployability,release,release,90,> Let's postpone the tighter conv checking and merge this to get it into the upcoming 1.7 release. Fine by me.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1337772443
https://github.com/psi4/psi4/pull/2767#issuecomment-1337785055:91,Deployability,release,release,91,">> Let's postpone the tighter conv checking and merge this to get it into the upcoming 1.7 release. > Fine by me. Me, too. Only TODO is the options semi-reversion. Sorry for the extra work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1337785055
https://github.com/psi4/psi4/pull/2768#issuecomment-1305901307:95,Integrability,depend,dependence,95,Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1305901307
https://github.com/psi4/psi4/pull/2768#issuecomment-1305901307:6,Testability,test,testing,6,Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1305901307
https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:348,Availability,toler,tolerances,348,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603
https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:1766,Availability,down,down,1766,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603
https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:1799,Deployability,update,updated,1799,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603
https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:97,Integrability,depend,dependence,97,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603
https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:8,Testability,test,testing,8,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603
https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:685,Testability,test,test,685,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603
https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:987,Testability,test,test,987,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603
https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:1715,Testability,test,testing,1715,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603
https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:997,Usability,undo,undoubtedly,997,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603
https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956:883,Deployability,release,release,883,"> Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated. I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms. How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956
https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956:269,Energy Efficiency,energy,energy,269,"> Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated. I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms. How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956
https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956:307,Energy Efficiency,energy,energy,307,"> Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated. I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms. How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956
https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956:44,Testability,test,tested,44,"> Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated. I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms. How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956
https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956:380,Testability,test,testing,380,"> Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated. I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms. How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956
https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956:485,Testability,test,test,485,"> Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated. I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms. How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956
https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956:340,Usability,feedback,feedback,340,"> Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated. I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms. How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956
https://github.com/psi4/psi4/pull/2768#issuecomment-1309250403:61,Testability,test,test,61,"I strongly agree with Lori about having this as a regression test rather than an accuracy test. Put the new, approximate energies with all the others. That should be a good indicator to others working with the SCF system of what accuracy to expect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1309250403
https://github.com/psi4/psi4/pull/2768#issuecomment-1309250403:90,Testability,test,test,90,"I strongly agree with Lori about having this as a regression test rather than an accuracy test. Put the new, approximate energies with all the others. That should be a good indicator to others working with the SCF system of what accuracy to expect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1309250403
https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815:899,Deployability,release,release,899,"> > Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated.; > ; > I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms.; > ; > How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release. > I strongly agree with Lori about having this as a regression test rather than an accuracy test. Put the new, approximate energies with all the others. That should be a good indicator to others working with the SCF system of what accuracy to expect. All right, sounds like a plan! I will do this, then!. Also, Lori, to answer your question about samples, I have been editing them manually. Thank you for letting me know about their autogeneration!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815
https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815:271,Energy Efficiency,energy,energy,271,"> > Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated.; > ; > I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms.; > ; > How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release. > I strongly agree with Lori about having this as a regression test rather than an accuracy test. Put the new, approximate energies with all the others. That should be a good indicator to others working with the SCF system of what accuracy to expect. All right, sounds like a plan! I will do this, then!. Also, Lori, to answer your question about samples, I have been editing them manually. Thank you for letting me know about their autogeneration!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815
https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815:309,Energy Efficiency,energy,energy,309,"> > Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated.; > ; > I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms.; > ; > How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release. > I strongly agree with Lori about having this as a regression test rather than an accuracy test. Put the new, approximate energies with all the others. That should be a good indicator to others working with the SCF system of what accuracy to expect. All right, sounds like a plan! I will do this, then!. Also, Lori, to answer your question about samples, I have been editing them manually. Thank you for letting me know about their autogeneration!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815
https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815:46,Testability,test,tested,46,"> > Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated.; > ; > I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms.; > ; > How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release. > I strongly agree with Lori about having this as a regression test rather than an accuracy test. Put the new, approximate energies with all the others. That should be a good indicator to others working with the SCF system of what accuracy to expect. All right, sounds like a plan! I will do this, then!. Also, Lori, to answer your question about samples, I have been editing them manually. Thank you for letting me know about their autogeneration!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815
https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815:382,Testability,test,testing,382,"> > Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated.; > ; > I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms.; > ; > How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release. > I strongly agree with Lori about having this as a regression test rather than an accuracy test. Put the new, approximate energies with all the others. That should be a good indicator to others working with the SCF system of what accuracy to expect. All right, sounds like a plan! I will do this, then!. Also, Lori, to answer your question about samples, I have been editing them manually. Thank you for letting me know about their autogeneration!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815
https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815:494,Testability,test,test,494,"> > Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated.; > ; > I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms.; > ; > How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release. > I strongly agree with Lori about having this as a regression test rather than an accuracy test. Put the new, approximate energies with all the others. That should be a good indicator to others working with the SCF system of what accuracy to expect. All right, sounds like a plan! I will do this, then!. Also, Lori, to answer your question about samples, I have been editing them manually. Thank you for letting me know about their autogeneration!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815
https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815:971,Testability,test,test,971,"> > Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated.; > ; > I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms.; > ; > How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release. > I strongly agree with Lori about having this as a regression test rather than an accuracy test. Put the new, approximate energies with all the others. That should be a good indicator to others working with the SCF system of what accuracy to expect. All right, sounds like a plan! I will do this, then!. Also, Lori, to answer your question about samples, I have been editing them manually. Thank you for letting me know about their autogeneration!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815
https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815:1000,Testability,test,test,1000,"> > Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated.; > ; > I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms.; > ; > How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release. > I strongly agree with Lori about having this as a regression test rather than an accuracy test. Put the new, approximate energies with all the others. That should be a good indicator to others working with the SCF system of what accuracy to expect. All right, sounds like a plan! I will do this, then!. Also, Lori, to answer your question about samples, I have been editing them manually. Thank you for letting me know about their autogeneration!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815
https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815:342,Usability,feedback,feedback,342,"> > Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated.; > ; > I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms.; > ; > How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release. > I strongly agree with Lori about having this as a regression test rather than an accuracy test. Put the new, approximate energies with all the others. That should be a good indicator to others working with the SCF system of what accuracy to expect. All right, sounds like a plan! I will do this, then!. Also, Lori, to answer your question about samples, I have been editing them manually. Thank you for letting me know about their autogeneration!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815
https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110:175,Availability,toler,tolerances,175,"I did a couple more things here:. 1) At the suggestion of the reviewers, I added individual reference energies for the current composite methods (which were acquired at tight tolerances - 1e-10 for D and E convergence, and 1e-14 for ERI screening). The COSX and LinK methods now test against these corresponding reference energies at the normal 1e-6 atol. . 2) With 1) in mind, I made more sweeping changes as well. First, the reference energies are now kept in a dictionary rather than spread out across different variables. This improves readability and should facilitate the addition of new methods, Composite or otherwise, to the scf5 testing suite. Additionally, composite methods are tested in a loop per test case. This will facilitate the testing of new Composite methods added to Psi4, as will happen in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110
https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110:515,Modifiability,variab,variables,515,"I did a couple more things here:. 1) At the suggestion of the reviewers, I added individual reference energies for the current composite methods (which were acquired at tight tolerances - 1e-10 for D and E convergence, and 1e-14 for ERI screening). The COSX and LinK methods now test against these corresponding reference energies at the normal 1e-6 atol. . 2) With 1) in mind, I made more sweeping changes as well. First, the reference energies are now kept in a dictionary rather than spread out across different variables. This improves readability and should facilitate the addition of new methods, Composite or otherwise, to the scf5 testing suite. Additionally, composite methods are tested in a loop per test case. This will facilitate the testing of new Composite methods added to Psi4, as will happen in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110
https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110:279,Testability,test,test,279,"I did a couple more things here:. 1) At the suggestion of the reviewers, I added individual reference energies for the current composite methods (which were acquired at tight tolerances - 1e-10 for D and E convergence, and 1e-14 for ERI screening). The COSX and LinK methods now test against these corresponding reference energies at the normal 1e-6 atol. . 2) With 1) in mind, I made more sweeping changes as well. First, the reference energies are now kept in a dictionary rather than spread out across different variables. This improves readability and should facilitate the addition of new methods, Composite or otherwise, to the scf5 testing suite. Additionally, composite methods are tested in a loop per test case. This will facilitate the testing of new Composite methods added to Psi4, as will happen in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110
https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110:639,Testability,test,testing,639,"I did a couple more things here:. 1) At the suggestion of the reviewers, I added individual reference energies for the current composite methods (which were acquired at tight tolerances - 1e-10 for D and E convergence, and 1e-14 for ERI screening). The COSX and LinK methods now test against these corresponding reference energies at the normal 1e-6 atol. . 2) With 1) in mind, I made more sweeping changes as well. First, the reference energies are now kept in a dictionary rather than spread out across different variables. This improves readability and should facilitate the addition of new methods, Composite or otherwise, to the scf5 testing suite. Additionally, composite methods are tested in a loop per test case. This will facilitate the testing of new Composite methods added to Psi4, as will happen in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110
https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110:690,Testability,test,tested,690,"I did a couple more things here:. 1) At the suggestion of the reviewers, I added individual reference energies for the current composite methods (which were acquired at tight tolerances - 1e-10 for D and E convergence, and 1e-14 for ERI screening). The COSX and LinK methods now test against these corresponding reference energies at the normal 1e-6 atol. . 2) With 1) in mind, I made more sweeping changes as well. First, the reference energies are now kept in a dictionary rather than spread out across different variables. This improves readability and should facilitate the addition of new methods, Composite or otherwise, to the scf5 testing suite. Additionally, composite methods are tested in a loop per test case. This will facilitate the testing of new Composite methods added to Psi4, as will happen in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110
https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110:711,Testability,test,test,711,"I did a couple more things here:. 1) At the suggestion of the reviewers, I added individual reference energies for the current composite methods (which were acquired at tight tolerances - 1e-10 for D and E convergence, and 1e-14 for ERI screening). The COSX and LinK methods now test against these corresponding reference energies at the normal 1e-6 atol. . 2) With 1) in mind, I made more sweeping changes as well. First, the reference energies are now kept in a dictionary rather than spread out across different variables. This improves readability and should facilitate the addition of new methods, Composite or otherwise, to the scf5 testing suite. Additionally, composite methods are tested in a loop per test case. This will facilitate the testing of new Composite methods added to Psi4, as will happen in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110
https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110:747,Testability,test,testing,747,"I did a couple more things here:. 1) At the suggestion of the reviewers, I added individual reference energies for the current composite methods (which were acquired at tight tolerances - 1e-10 for D and E convergence, and 1e-14 for ERI screening). The COSX and LinK methods now test against these corresponding reference energies at the normal 1e-6 atol. . 2) With 1) in mind, I made more sweeping changes as well. First, the reference energies are now kept in a dictionary rather than spread out across different variables. This improves readability and should facilitate the addition of new methods, Composite or otherwise, to the scf5 testing suite. Additionally, composite methods are tested in a loop per test case. This will facilitate the testing of new Composite methods added to Psi4, as will happen in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110
https://github.com/psi4/psi4/pull/2769#issuecomment-1320216508:51,Modifiability,variab,variable,51,"@loriab, please re-review. The last commit changed variable definitions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2769#issuecomment-1320216508
https://github.com/psi4/psi4/pull/2775#issuecomment-1313995566:1,Testability,test,tests,1,[tests/test_erisieve.py](https://github.com/psi4/psi4/blob/master/tests/pytests/test_erisieve.py) is unhappy with the changes. You can run it locally via `<objdir># pytest -v ../tests/pytests/test_eriseive.py` after executing the results of `<objdir># stage/bin/psi4 --psiapi`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1313995566
https://github.com/psi4/psi4/pull/2775#issuecomment-1313995566:66,Testability,test,tests,66,[tests/test_erisieve.py](https://github.com/psi4/psi4/blob/master/tests/pytests/test_erisieve.py) is unhappy with the changes. You can run it locally via `<objdir># pytest -v ../tests/pytests/test_eriseive.py` after executing the results of `<objdir># stage/bin/psi4 --psiapi`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1313995566
https://github.com/psi4/psi4/pull/2775#issuecomment-1313995566:178,Testability,test,tests,178,[tests/test_erisieve.py](https://github.com/psi4/psi4/blob/master/tests/pytests/test_erisieve.py) is unhappy with the changes. You can run it locally via `<objdir># pytest -v ../tests/pytests/test_eriseive.py` after executing the results of `<objdir># stage/bin/psi4 --psiapi`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1313995566
https://github.com/psi4/psi4/pull/2775#issuecomment-1314416941:3,Testability,test,tests,3,"> [tests/test_erisieve.py](https://github.com/psi4/psi4/blob/master/tests/pytests/test_erisieve.py) is unhappy with the changes. You can run it locally via `<objdir># pytest -v ../tests/pytests/test_eriseive.py` after executing the results of `<objdir># stage/bin/psi4 --psiapi`. Thats strange, I couldn't reproduce locally ☹️",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314416941
https://github.com/psi4/psi4/pull/2775#issuecomment-1314416941:68,Testability,test,tests,68,"> [tests/test_erisieve.py](https://github.com/psi4/psi4/blob/master/tests/pytests/test_erisieve.py) is unhappy with the changes. You can run it locally via `<objdir># pytest -v ../tests/pytests/test_eriseive.py` after executing the results of `<objdir># stage/bin/psi4 --psiapi`. Thats strange, I couldn't reproduce locally ☹️",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314416941
https://github.com/psi4/psi4/pull/2775#issuecomment-1314416941:180,Testability,test,tests,180,"> [tests/test_erisieve.py](https://github.com/psi4/psi4/blob/master/tests/pytests/test_erisieve.py) is unhappy with the changes. You can run it locally via `<objdir># pytest -v ../tests/pytests/test_eriseive.py` after executing the results of `<objdir># stage/bin/psi4 --psiapi`. Thats strange, I couldn't reproduce locally ☹️",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314416941
https://github.com/psi4/psi4/pull/2775#issuecomment-1314634682:67,Testability,test,tests,67,@loriab to add to this the CI seems to **build** fine. Some of the tests no dice.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314634682
https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646:164,Deployability,install,install,164,"If `/Users/hugomacdermott/Desktop/dev/psi4_build/` is your `CMAKE_INSTALL_PREFIX`, then this is fine, but you can make development a little easier by skipping the `install` step. In your `objdir/` is a `stage/` dir with a complete install that gets updated with every `make`. It's this installation that gets run with `ctest`. I'd seek that, then run the results of `objdir/stage/bin/psi4 --psiapi` and check that the `which` & `python -c ` commands returns paths in `objdir/stage/`. This way there's a quick turnaround between edit/make/test. I don't see anything necessarily wrong with what you posted. The above is just a setup that can reduce confusion if you forget the install step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646
https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646:231,Deployability,install,install,231,"If `/Users/hugomacdermott/Desktop/dev/psi4_build/` is your `CMAKE_INSTALL_PREFIX`, then this is fine, but you can make development a little easier by skipping the `install` step. In your `objdir/` is a `stage/` dir with a complete install that gets updated with every `make`. It's this installation that gets run with `ctest`. I'd seek that, then run the results of `objdir/stage/bin/psi4 --psiapi` and check that the `which` & `python -c ` commands returns paths in `objdir/stage/`. This way there's a quick turnaround between edit/make/test. I don't see anything necessarily wrong with what you posted. The above is just a setup that can reduce confusion if you forget the install step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646
https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646:249,Deployability,update,updated,249,"If `/Users/hugomacdermott/Desktop/dev/psi4_build/` is your `CMAKE_INSTALL_PREFIX`, then this is fine, but you can make development a little easier by skipping the `install` step. In your `objdir/` is a `stage/` dir with a complete install that gets updated with every `make`. It's this installation that gets run with `ctest`. I'd seek that, then run the results of `objdir/stage/bin/psi4 --psiapi` and check that the `which` & `python -c ` commands returns paths in `objdir/stage/`. This way there's a quick turnaround between edit/make/test. I don't see anything necessarily wrong with what you posted. The above is just a setup that can reduce confusion if you forget the install step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646
https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646:286,Deployability,install,installation,286,"If `/Users/hugomacdermott/Desktop/dev/psi4_build/` is your `CMAKE_INSTALL_PREFIX`, then this is fine, but you can make development a little easier by skipping the `install` step. In your `objdir/` is a `stage/` dir with a complete install that gets updated with every `make`. It's this installation that gets run with `ctest`. I'd seek that, then run the results of `objdir/stage/bin/psi4 --psiapi` and check that the `which` & `python -c ` commands returns paths in `objdir/stage/`. This way there's a quick turnaround between edit/make/test. I don't see anything necessarily wrong with what you posted. The above is just a setup that can reduce confusion if you forget the install step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646
https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646:675,Deployability,install,install,675,"If `/Users/hugomacdermott/Desktop/dev/psi4_build/` is your `CMAKE_INSTALL_PREFIX`, then this is fine, but you can make development a little easier by skipping the `install` step. In your `objdir/` is a `stage/` dir with a complete install that gets updated with every `make`. It's this installation that gets run with `ctest`. I'd seek that, then run the results of `objdir/stage/bin/psi4 --psiapi` and check that the `which` & `python -c ` commands returns paths in `objdir/stage/`. This way there's a quick turnaround between edit/make/test. I don't see anything necessarily wrong with what you posted. The above is just a setup that can reduce confusion if you forget the install step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646
https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646:640,Energy Efficiency,reduce,reduce,640,"If `/Users/hugomacdermott/Desktop/dev/psi4_build/` is your `CMAKE_INSTALL_PREFIX`, then this is fine, but you can make development a little easier by skipping the `install` step. In your `objdir/` is a `stage/` dir with a complete install that gets updated with every `make`. It's this installation that gets run with `ctest`. I'd seek that, then run the results of `objdir/stage/bin/psi4 --psiapi` and check that the `which` & `python -c ` commands returns paths in `objdir/stage/`. This way there's a quick turnaround between edit/make/test. I don't see anything necessarily wrong with what you posted. The above is just a setup that can reduce confusion if you forget the install step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646
https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646:538,Testability,test,test,538,"If `/Users/hugomacdermott/Desktop/dev/psi4_build/` is your `CMAKE_INSTALL_PREFIX`, then this is fine, but you can make development a little easier by skipping the `install` step. In your `objdir/` is a `stage/` dir with a complete install that gets updated with every `make`. It's this installation that gets run with `ctest`. I'd seek that, then run the results of `objdir/stage/bin/psi4 --psiapi` and check that the `which` & `python -c ` commands returns paths in `objdir/stage/`. This way there's a quick turnaround between edit/make/test. I don't see anything necessarily wrong with what you posted. The above is just a setup that can reduce confusion if you forget the install step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646
https://github.com/psi4/psi4/pull/2775#issuecomment-1316328355:369,Availability,down,down,369,"@JonathonMisiewicz @loriab I think I understand now, I thought you had to use an explicit `std::move` but that is only for an **`lvalue`**, you can do . ```c++; std::shared_ptr<TwoBodyAOInt>(factory->erf_eri(omega_); ```. where `erf_eri` returns a `std::unique_ptr` because its a **temporary `rvalue`**. My bad sorry for the misunderstanding. . Regardless I will track down the failing test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1316328355
https://github.com/psi4/psi4/pull/2775#issuecomment-1316328355:386,Testability,test,test,386,"@JonathonMisiewicz @loriab I think I understand now, I thought you had to use an explicit `std::move` but that is only for an **`lvalue`**, you can do . ```c++; std::shared_ptr<TwoBodyAOInt>(factory->erf_eri(omega_); ```. where `erf_eri` returns a `std::unique_ptr` because its a **temporary `rvalue`**. My bad sorry for the misunderstanding. . Regardless I will track down the failing test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1316328355
https://github.com/psi4/psi4/pull/2775#issuecomment-1387406900:50,Usability,clear,clear,50,"> Is there a reason not to merge this now?. To be clear, this is directed at @hmacdope, since you don't have ""Ready to merge"" checked.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1387406900
https://github.com/psi4/psi4/issues/2777#issuecomment-1317597874:331,Modifiability,extend,extended,331,"Are you describing that `c1_deep_copy` on R/U/ROHF wfns are fine b/c https://github.com/psi4/psi4/blob/1ecf33397370ebaa3b2ec14dd276c22519c66ed4/psi4/src/psi4/libscf_solver/rhf.cc#L999-L1002 etc. in the derived classes copy over the orbitals; whereas, `c1_deep_copy` on say, CC, is lacking because those derived wfn classes haven't extended the method?. This makes sense historically since `c1_deep_copy`'s purpose was simply transitioning a symmetry-using SCF wfn into a c1-only post-SCF module. But I can see its deficiencies beyond that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2777#issuecomment-1317597874
https://github.com/psi4/psi4/issues/2777#issuecomment-1317597874:418,Usability,simpl,simply,418,"Are you describing that `c1_deep_copy` on R/U/ROHF wfns are fine b/c https://github.com/psi4/psi4/blob/1ecf33397370ebaa3b2ec14dd276c22519c66ed4/psi4/src/psi4/libscf_solver/rhf.cc#L999-L1002 etc. in the derived classes copy over the orbitals; whereas, `c1_deep_copy` on say, CC, is lacking because those derived wfn classes haven't extended the method?. This makes sense historically since `c1_deep_copy`'s purpose was simply transitioning a symmetry-using SCF wfn into a c1-only post-SCF module. But I can see its deficiencies beyond that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2777#issuecomment-1317597874
https://github.com/psi4/psi4/issues/2777#issuecomment-1317600770:440,Modifiability,extend,extend,440,"Yes, the HF subclasses are fine. More general wavefunctions are not. We stumbled across it by trying to take a CASSCF wavefunction, convert it to c1, and feed that the de-symmetrized orbitals into an orbital localizer. This is a different use case than passing a reference!. I would think that the `hf.cc` class can figure out what it needs to do, based on checking `same_a_b_orbs` and `same_a_b_dens`. Other subclasses should only need to extend if it needs anything more sophisticated than that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2777#issuecomment-1317600770
https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:571,Availability,error,error,571,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885
https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:753,Availability,error,error,753,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885
https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:958,Availability,down,downwards,958,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885
https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:1322,Availability,error,error,1322,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885
https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:1475,Availability,recover,recover,1475,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885
https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:320,Energy Efficiency,energy,energy,320,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885
https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:1216,Energy Efficiency,allocate,allocated,1216,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885
https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:674,Integrability,contract,contract,674,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885
https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:818,Integrability,contract,contracts,818,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885
https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:998,Integrability,contract,contract,998,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885
https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:1436,Integrability,contract,contracts,1436,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885
https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:1122,Performance,throughput,throughput,1122,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885
https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:1275,Safety,detect,detects,1275,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885
https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885:1475,Safety,recover,recover,1475,"This sounds like in the same class as too many roots for basis. They tend to segfault (example below) so should certainly be handled better. ```; molecule water {; 0 1; O; H 1 1.07; H 1 1.07 2 109.5; symmetry cs; }. set basis sto-3g; set roots_per_irrep [8, 8]. G, wfn = gradient('eom-ccsd', return_wfn=True); ans = wfn.energy(); ```. The user has issued two contradictory requests -- basis set and nroots. And part of the trouble is that psi only knows they're contradictory well into the calculation (e.g., post-GS-CCSD). That complicates issuing a prompt and specific error. I agree that Susi's preferred behavior is most likely what the user wants -- keep the basis set contract and violate the nroots request. A few paths:. 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover. Likely most of this should be moved to an issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2780#issuecomment-1322391885
https://github.com/psi4/psi4/issues/2783#issuecomment-1321068490:786,Availability,error,error,786,"`phi_ao` is passed to `dx_read` as an argument. I'm pretty sure that the description of `phi_ao` is wrong; https://github.com/psi4/psi4/blob/760c5af199b6a8202b081ad18a271ee9886ee66d/psi4/src/psi4/libqt/dx_read.cc#L60. The only place where `dx_read` is used is; https://github.com/psi4/psi4/blob/760c5af199b6a8202b081ad18a271ee9886ee66d/psi4/src/psi4/libscf_solver/hf.cc#L601. The warning is; ```; -Wnonnull; Warn about passing a null pointer for arguments marked as requiring a non-null value by the ""nonnull"" function attribute. -Wnonnull is included in -Wall and -Wformat. It can be disabled with the -Wno-nonnull option.; ```; There is no null pointer issue; the code is merely unsafe since it assumes that the pointers are not null. Adding a check for null pointers and throwing an error in that case should fix this warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2783#issuecomment-1321068490
https://github.com/psi4/psi4/issues/2783#issuecomment-1321068490:681,Safety,unsafe,unsafe,681,"`phi_ao` is passed to `dx_read` as an argument. I'm pretty sure that the description of `phi_ao` is wrong; https://github.com/psi4/psi4/blob/760c5af199b6a8202b081ad18a271ee9886ee66d/psi4/src/psi4/libqt/dx_read.cc#L60. The only place where `dx_read` is used is; https://github.com/psi4/psi4/blob/760c5af199b6a8202b081ad18a271ee9886ee66d/psi4/src/psi4/libscf_solver/hf.cc#L601. The warning is; ```; -Wnonnull; Warn about passing a null pointer for arguments marked as requiring a non-null value by the ""nonnull"" function attribute. -Wnonnull is included in -Wall and -Wformat. It can be disabled with the -Wno-nonnull option.; ```; There is no null pointer issue; the code is merely unsafe since it assumes that the pointers are not null. Adding a check for null pointers and throwing an error in that case should fix this warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2783#issuecomment-1321068490
https://github.com/psi4/psi4/pull/2784#issuecomment-1321426283:80,Testability,TEST,TEST,80,Thanks for the fctl. These are the values I generate. ```; E18 = -74.736724053 #TEST; E28 = -74.736724053 #TEST; E38 = -74.387079031 #TEST; E48 = -74.213835345 #TEST; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2784#issuecomment-1321426283
https://github.com/psi4/psi4/pull/2784#issuecomment-1321426283:107,Testability,TEST,TEST,107,Thanks for the fctl. These are the values I generate. ```; E18 = -74.736724053 #TEST; E28 = -74.736724053 #TEST; E38 = -74.387079031 #TEST; E48 = -74.213835345 #TEST; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2784#issuecomment-1321426283
https://github.com/psi4/psi4/pull/2784#issuecomment-1321426283:134,Testability,TEST,TEST,134,Thanks for the fctl. These are the values I generate. ```; E18 = -74.736724053 #TEST; E28 = -74.736724053 #TEST; E38 = -74.387079031 #TEST; E48 = -74.213835345 #TEST; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2784#issuecomment-1321426283
https://github.com/psi4/psi4/pull/2784#issuecomment-1321426283:161,Testability,TEST,TEST,161,Thanks for the fctl. These are the values I generate. ```; E18 = -74.736724053 #TEST; E28 = -74.736724053 #TEST; E38 = -74.387079031 #TEST; E48 = -74.213835345 #TEST; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2784#issuecomment-1321426283
https://github.com/psi4/psi4/pull/2785#issuecomment-1322413359:43,Deployability,install,installed,43,"hmm, you're right -- adcc 15.14 is getting installed https://github.com/psi4/psi4/actions/runs/3508758253/jobs/5877394681#step:16:956 but not detected for tests https://github.com/psi4/psi4/actions/runs/3508758253/jobs/5877394681#step:21:656",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322413359
https://github.com/psi4/psi4/pull/2785#issuecomment-1322413359:142,Safety,detect,detected,142,"hmm, you're right -- adcc 15.14 is getting installed https://github.com/psi4/psi4/actions/runs/3508758253/jobs/5877394681#step:16:956 but not detected for tests https://github.com/psi4/psi4/actions/runs/3508758253/jobs/5877394681#step:21:656",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322413359
https://github.com/psi4/psi4/pull/2785#issuecomment-1322413359:155,Testability,test,tests,155,"hmm, you're right -- adcc 15.14 is getting installed https://github.com/psi4/psi4/actions/runs/3508758253/jobs/5877394681#step:16:956 but not detected for tests https://github.com/psi4/psi4/actions/runs/3508758253/jobs/5877394681#step:21:656",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322413359
https://github.com/psi4/psi4/pull/2785#issuecomment-1322471526:27,Availability,error,error,27,What is the other possible error during Psi-internal adcc build? 😬,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322471526
https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930:29,Availability,error,error,29,> What is the other possible error during Psi-internal adcc build? 😬. Something libtensor related that I have not investigated further:; ```; copying adcc/visualisation/Spectrum.py -> build/lib.linux-x86_64-3.10/adcc/visualisation; running build_ext; building 'libadcc' extension; creating build/temp.linux-x86_64-3.10; creating build/temp.linux-x86_64-3.10/libadcc; creating build/temp.linux-x86_64-3.10/libadcc/MoSpaces; creating build/temp.linux-x86_64-3.10/libadcc/TensorImpl; creating build/temp.linux-x86_64-3.10/libadcc/guess; creating build/temp.linux-x86_64-3.10/libadcc/pyiface; x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c libadcc/AdcMemory.cc -o build/temp.linux-x86_64-3.10/libadcc/AdcMemory.o -Wall -Wextra -Werror -O3 -isystem /home/tgy/.local/include; libadcc/AdcMemory.cc:26:10: fatal error: libtensor/core/allocator.h: No such file or directory; 26 | #include <libtensor/core/allocator.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1; make[2]: *** [external/downstream/adcc/CMakeFiles/adcc_external.dir/build.make:86: external/downstream/adcc/adcc_external-prefix/src/adcc_external-stamp/adcc_external-build] Error 1; make[1]: *** [CMakeFiles/Makefile2:11798: external/downstream/adcc/CMakeFiles/adcc_external.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930
https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930:1046,Availability,error,error,1046,> What is the other possible error during Psi-internal adcc build? 😬. Something libtensor related that I have not investigated further:; ```; copying adcc/visualisation/Spectrum.py -> build/lib.linux-x86_64-3.10/adcc/visualisation; running build_ext; building 'libadcc' extension; creating build/temp.linux-x86_64-3.10; creating build/temp.linux-x86_64-3.10/libadcc; creating build/temp.linux-x86_64-3.10/libadcc/MoSpaces; creating build/temp.linux-x86_64-3.10/libadcc/TensorImpl; creating build/temp.linux-x86_64-3.10/libadcc/guess; creating build/temp.linux-x86_64-3.10/libadcc/pyiface; x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c libadcc/AdcMemory.cc -o build/temp.linux-x86_64-3.10/libadcc/AdcMemory.o -Wall -Wextra -Werror -O3 -isystem /home/tgy/.local/include; libadcc/AdcMemory.cc:26:10: fatal error: libtensor/core/allocator.h: No such file or directory; 26 | #include <libtensor/core/allocator.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1; make[2]: *** [external/downstream/adcc/CMakeFiles/adcc_external.dir/build.make:86: external/downstream/adcc/adcc_external-prefix/src/adcc_external-stamp/adcc_external-build] Error 1; make[1]: *** [CMakeFiles/Makefile2:11798: external/downstream/adcc/CMakeFiles/adcc_external.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930
https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930:1209,Availability,error,error,1209,> What is the other possible error during Psi-internal adcc build? 😬. Something libtensor related that I have not investigated further:; ```; copying adcc/visualisation/Spectrum.py -> build/lib.linux-x86_64-3.10/adcc/visualisation; running build_ext; building 'libadcc' extension; creating build/temp.linux-x86_64-3.10; creating build/temp.linux-x86_64-3.10/libadcc; creating build/temp.linux-x86_64-3.10/libadcc/MoSpaces; creating build/temp.linux-x86_64-3.10/libadcc/TensorImpl; creating build/temp.linux-x86_64-3.10/libadcc/guess; creating build/temp.linux-x86_64-3.10/libadcc/pyiface; x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c libadcc/AdcMemory.cc -o build/temp.linux-x86_64-3.10/libadcc/AdcMemory.o -Wall -Wextra -Werror -O3 -isystem /home/tgy/.local/include; libadcc/AdcMemory.cc:26:10: fatal error: libtensor/core/allocator.h: No such file or directory; 26 | #include <libtensor/core/allocator.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1; make[2]: *** [external/downstream/adcc/CMakeFiles/adcc_external.dir/build.make:86: external/downstream/adcc/adcc_external-prefix/src/adcc_external-stamp/adcc_external-build] Error 1; make[1]: *** [CMakeFiles/Makefile2:11798: external/downstream/adcc/CMakeFiles/adcc_external.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930
https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930:1304,Availability,down,downstream,1304,> What is the other possible error during Psi-internal adcc build? 😬. Something libtensor related that I have not investigated further:; ```; copying adcc/visualisation/Spectrum.py -> build/lib.linux-x86_64-3.10/adcc/visualisation; running build_ext; building 'libadcc' extension; creating build/temp.linux-x86_64-3.10; creating build/temp.linux-x86_64-3.10/libadcc; creating build/temp.linux-x86_64-3.10/libadcc/MoSpaces; creating build/temp.linux-x86_64-3.10/libadcc/TensorImpl; creating build/temp.linux-x86_64-3.10/libadcc/guess; creating build/temp.linux-x86_64-3.10/libadcc/pyiface; x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c libadcc/AdcMemory.cc -o build/temp.linux-x86_64-3.10/libadcc/AdcMemory.o -Wall -Wextra -Werror -O3 -isystem /home/tgy/.local/include; libadcc/AdcMemory.cc:26:10: fatal error: libtensor/core/allocator.h: No such file or directory; 26 | #include <libtensor/core/allocator.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1; make[2]: *** [external/downstream/adcc/CMakeFiles/adcc_external.dir/build.make:86: external/downstream/adcc/adcc_external-prefix/src/adcc_external-stamp/adcc_external-build] Error 1; make[1]: *** [CMakeFiles/Makefile2:11798: external/downstream/adcc/CMakeFiles/adcc_external.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930
https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930:1373,Availability,down,downstream,1373,> What is the other possible error during Psi-internal adcc build? 😬. Something libtensor related that I have not investigated further:; ```; copying adcc/visualisation/Spectrum.py -> build/lib.linux-x86_64-3.10/adcc/visualisation; running build_ext; building 'libadcc' extension; creating build/temp.linux-x86_64-3.10; creating build/temp.linux-x86_64-3.10/libadcc; creating build/temp.linux-x86_64-3.10/libadcc/MoSpaces; creating build/temp.linux-x86_64-3.10/libadcc/TensorImpl; creating build/temp.linux-x86_64-3.10/libadcc/guess; creating build/temp.linux-x86_64-3.10/libadcc/pyiface; x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c libadcc/AdcMemory.cc -o build/temp.linux-x86_64-3.10/libadcc/AdcMemory.o -Wall -Wextra -Werror -O3 -isystem /home/tgy/.local/include; libadcc/AdcMemory.cc:26:10: fatal error: libtensor/core/allocator.h: No such file or directory; 26 | #include <libtensor/core/allocator.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1; make[2]: *** [external/downstream/adcc/CMakeFiles/adcc_external.dir/build.make:86: external/downstream/adcc/adcc_external-prefix/src/adcc_external-stamp/adcc_external-build] Error 1; make[1]: *** [CMakeFiles/Makefile2:11798: external/downstream/adcc/CMakeFiles/adcc_external.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930
https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930:1455,Availability,Error,Error,1455,> What is the other possible error during Psi-internal adcc build? 😬. Something libtensor related that I have not investigated further:; ```; copying adcc/visualisation/Spectrum.py -> build/lib.linux-x86_64-3.10/adcc/visualisation; running build_ext; building 'libadcc' extension; creating build/temp.linux-x86_64-3.10; creating build/temp.linux-x86_64-3.10/libadcc; creating build/temp.linux-x86_64-3.10/libadcc/MoSpaces; creating build/temp.linux-x86_64-3.10/libadcc/TensorImpl; creating build/temp.linux-x86_64-3.10/libadcc/guess; creating build/temp.linux-x86_64-3.10/libadcc/pyiface; x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c libadcc/AdcMemory.cc -o build/temp.linux-x86_64-3.10/libadcc/AdcMemory.o -Wall -Wextra -Werror -O3 -isystem /home/tgy/.local/include; libadcc/AdcMemory.cc:26:10: fatal error: libtensor/core/allocator.h: No such file or directory; 26 | #include <libtensor/core/allocator.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1; make[2]: *** [external/downstream/adcc/CMakeFiles/adcc_external.dir/build.make:86: external/downstream/adcc/adcc_external-prefix/src/adcc_external-stamp/adcc_external-build] Error 1; make[1]: *** [CMakeFiles/Makefile2:11798: external/downstream/adcc/CMakeFiles/adcc_external.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930
https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930:1515,Availability,down,downstream,1515,> What is the other possible error during Psi-internal adcc build? 😬. Something libtensor related that I have not investigated further:; ```; copying adcc/visualisation/Spectrum.py -> build/lib.linux-x86_64-3.10/adcc/visualisation; running build_ext; building 'libadcc' extension; creating build/temp.linux-x86_64-3.10; creating build/temp.linux-x86_64-3.10/libadcc; creating build/temp.linux-x86_64-3.10/libadcc/MoSpaces; creating build/temp.linux-x86_64-3.10/libadcc/TensorImpl; creating build/temp.linux-x86_64-3.10/libadcc/guess; creating build/temp.linux-x86_64-3.10/libadcc/pyiface; x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c libadcc/AdcMemory.cc -o build/temp.linux-x86_64-3.10/libadcc/AdcMemory.o -Wall -Wextra -Werror -O3 -isystem /home/tgy/.local/include; libadcc/AdcMemory.cc:26:10: fatal error: libtensor/core/allocator.h: No such file or directory; 26 | #include <libtensor/core/allocator.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1; make[2]: *** [external/downstream/adcc/CMakeFiles/adcc_external.dir/build.make:86: external/downstream/adcc/adcc_external-prefix/src/adcc_external-stamp/adcc_external-build] Error 1; make[1]: *** [CMakeFiles/Makefile2:11798: external/downstream/adcc/CMakeFiles/adcc_external.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930
https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930:1565,Availability,Error,Error,1565,> What is the other possible error during Psi-internal adcc build? 😬. Something libtensor related that I have not investigated further:; ```; copying adcc/visualisation/Spectrum.py -> build/lib.linux-x86_64-3.10/adcc/visualisation; running build_ext; building 'libadcc' extension; creating build/temp.linux-x86_64-3.10; creating build/temp.linux-x86_64-3.10/libadcc; creating build/temp.linux-x86_64-3.10/libadcc/MoSpaces; creating build/temp.linux-x86_64-3.10/libadcc/TensorImpl; creating build/temp.linux-x86_64-3.10/libadcc/guess; creating build/temp.linux-x86_64-3.10/libadcc/pyiface; x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c libadcc/AdcMemory.cc -o build/temp.linux-x86_64-3.10/libadcc/AdcMemory.o -Wall -Wextra -Werror -O3 -isystem /home/tgy/.local/include; libadcc/AdcMemory.cc:26:10: fatal error: libtensor/core/allocator.h: No such file or directory; 26 | #include <libtensor/core/allocator.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1; make[2]: *** [external/downstream/adcc/CMakeFiles/adcc_external.dir/build.make:86: external/downstream/adcc/adcc_external-prefix/src/adcc_external-stamp/adcc_external-build] Error 1; make[1]: *** [CMakeFiles/Makefile2:11798: external/downstream/adcc/CMakeFiles/adcc_external.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930
https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930:726,Security,secur,security,726,> What is the other possible error during Psi-internal adcc build? 😬. Something libtensor related that I have not investigated further:; ```; copying adcc/visualisation/Spectrum.py -> build/lib.linux-x86_64-3.10/adcc/visualisation; running build_ext; building 'libadcc' extension; creating build/temp.linux-x86_64-3.10; creating build/temp.linux-x86_64-3.10/libadcc; creating build/temp.linux-x86_64-3.10/libadcc/MoSpaces; creating build/temp.linux-x86_64-3.10/libadcc/TensorImpl; creating build/temp.linux-x86_64-3.10/libadcc/guess; creating build/temp.linux-x86_64-3.10/libadcc/pyiface; x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c libadcc/AdcMemory.cc -o build/temp.linux-x86_64-3.10/libadcc/AdcMemory.o -Wall -Wextra -Werror -O3 -isystem /home/tgy/.local/include; libadcc/AdcMemory.cc:26:10: fatal error: libtensor/core/allocator.h: No such file or directory; 26 | #include <libtensor/core/allocator.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1; make[2]: *** [external/downstream/adcc/CMakeFiles/adcc_external.dir/build.make:86: external/downstream/adcc/adcc_external-prefix/src/adcc_external-stamp/adcc_external-build] Error 1; make[1]: *** [CMakeFiles/Makefile2:11798: external/downstream/adcc/CMakeFiles/adcc_external.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930
https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930:802,Security,secur,security,802,> What is the other possible error during Psi-internal adcc build? 😬. Something libtensor related that I have not investigated further:; ```; copying adcc/visualisation/Spectrum.py -> build/lib.linux-x86_64-3.10/adcc/visualisation; running build_ext; building 'libadcc' extension; creating build/temp.linux-x86_64-3.10; creating build/temp.linux-x86_64-3.10/libadcc; creating build/temp.linux-x86_64-3.10/libadcc/MoSpaces; creating build/temp.linux-x86_64-3.10/libadcc/TensorImpl; creating build/temp.linux-x86_64-3.10/libadcc/guess; creating build/temp.linux-x86_64-3.10/libadcc/pyiface; x86_64-linux-gnu-gcc -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -g -fwrapv -O2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -I/usr/include/python3.10 -c libadcc/AdcMemory.cc -o build/temp.linux-x86_64-3.10/libadcc/AdcMemory.o -Wall -Wextra -Werror -O3 -isystem /home/tgy/.local/include; libadcc/AdcMemory.cc:26:10: fatal error: libtensor/core/allocator.h: No such file or directory; 26 | #include <libtensor/core/allocator.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1; make[2]: *** [external/downstream/adcc/CMakeFiles/adcc_external.dir/build.make:86: external/downstream/adcc/adcc_external-prefix/src/adcc_external-stamp/adcc_external-build] Error 1; make[1]: *** [CMakeFiles/Makefile2:11798: external/downstream/adcc/CMakeFiles/adcc_external.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322477930
https://github.com/psi4/psi4/pull/2785#issuecomment-1322484515:114,Availability,down,downloaded,114,"Okay, so this is not built in a conda environment, but using system compiler etc. In that case, libtensorlight is downloaded and put into ~/.local, as the compiler flags suggest, too. Hard to debug for me, but concerning this PR, there is no harm in bumping the reqd adcc version. Please merge this if you agree @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2785#issuecomment-1322484515
https://github.com/psi4/psi4/pull/2791#issuecomment-1335930052:24,Testability,test,tests,24,> I appreciate the many tests!. I only hope they're enough. there's 5 disp programs out there governed by 4 sets of logic and about 3 sets of defaults. :-),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2791#issuecomment-1335930052
https://github.com/psi4/psi4/pull/2791#issuecomment-1335930052:116,Testability,log,logic,116,> I appreciate the many tests!. I only hope they're enough. there's 5 disp programs out there governed by 4 sets of logic and about 3 sets of defaults. :-),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2791#issuecomment-1335930052
https://github.com/psi4/psi4/pull/2792#issuecomment-1325322458:224,Deployability,update,updates,224,"Something that has been brought to my attention that I should clarify and haven't - the bells and whistles that DFJLinK used to have with its IncFock formalism are still there; this PR does not remove those. Rather, this PR updates DFJLinK's IncFock to be as close to DFJCOSK's IncFock as possible while keeping the bells and whistles. This is also where my first question comes from - would it be good to fully standardize the two by changing DFJCOSK's IncFock in this PR, as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1325322458
https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404:229,Energy Efficiency,efficient,efficient,229,"> This lgtm after some whitespace tidying for clarity. Would it be useful to add a check to existing tests of each of the JK classes that can use incfock along the lines of `compare(1, variable(""SCF ITERATIONS"") < 15.0, ""incfock efficient"")`?. Thanks; whitespace issues cleaned up!. Regarding the test you suggest, I do think that is a good idea. In principle, if we wanted to measure IncFock efficiency in a test, it might be better measured using a difference in SCF iteration counts between IncFock and corresponding non-IncFock runs, rather than using a raw SCF iteration count for the IncFock run. But none of the tests, as far as I am aware, have both IncFock and non-IncFock runs for the same SCF method executed simultaneously. Your suggested method works with the current tests, and it should still work quite well for testing IncFock efficiency since it will catch any cases where IncFock causes serious convergence issues. I will implement it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404
https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404:185,Modifiability,variab,variable,185,"> This lgtm after some whitespace tidying for clarity. Would it be useful to add a check to existing tests of each of the JK classes that can use incfock along the lines of `compare(1, variable(""SCF ITERATIONS"") < 15.0, ""incfock efficient"")`?. Thanks; whitespace issues cleaned up!. Regarding the test you suggest, I do think that is a good idea. In principle, if we wanted to measure IncFock efficiency in a test, it might be better measured using a difference in SCF iteration counts between IncFock and corresponding non-IncFock runs, rather than using a raw SCF iteration count for the IncFock run. But none of the tests, as far as I am aware, have both IncFock and non-IncFock runs for the same SCF method executed simultaneously. Your suggested method works with the current tests, and it should still work quite well for testing IncFock efficiency since it will catch any cases where IncFock causes serious convergence issues. I will implement it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404
https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404:101,Testability,test,tests,101,"> This lgtm after some whitespace tidying for clarity. Would it be useful to add a check to existing tests of each of the JK classes that can use incfock along the lines of `compare(1, variable(""SCF ITERATIONS"") < 15.0, ""incfock efficient"")`?. Thanks; whitespace issues cleaned up!. Regarding the test you suggest, I do think that is a good idea. In principle, if we wanted to measure IncFock efficiency in a test, it might be better measured using a difference in SCF iteration counts between IncFock and corresponding non-IncFock runs, rather than using a raw SCF iteration count for the IncFock run. But none of the tests, as far as I am aware, have both IncFock and non-IncFock runs for the same SCF method executed simultaneously. Your suggested method works with the current tests, and it should still work quite well for testing IncFock efficiency since it will catch any cases where IncFock causes serious convergence issues. I will implement it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404
https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404:297,Testability,test,test,297,"> This lgtm after some whitespace tidying for clarity. Would it be useful to add a check to existing tests of each of the JK classes that can use incfock along the lines of `compare(1, variable(""SCF ITERATIONS"") < 15.0, ""incfock efficient"")`?. Thanks; whitespace issues cleaned up!. Regarding the test you suggest, I do think that is a good idea. In principle, if we wanted to measure IncFock efficiency in a test, it might be better measured using a difference in SCF iteration counts between IncFock and corresponding non-IncFock runs, rather than using a raw SCF iteration count for the IncFock run. But none of the tests, as far as I am aware, have both IncFock and non-IncFock runs for the same SCF method executed simultaneously. Your suggested method works with the current tests, and it should still work quite well for testing IncFock efficiency since it will catch any cases where IncFock causes serious convergence issues. I will implement it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404
https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404:409,Testability,test,test,409,"> This lgtm after some whitespace tidying for clarity. Would it be useful to add a check to existing tests of each of the JK classes that can use incfock along the lines of `compare(1, variable(""SCF ITERATIONS"") < 15.0, ""incfock efficient"")`?. Thanks; whitespace issues cleaned up!. Regarding the test you suggest, I do think that is a good idea. In principle, if we wanted to measure IncFock efficiency in a test, it might be better measured using a difference in SCF iteration counts between IncFock and corresponding non-IncFock runs, rather than using a raw SCF iteration count for the IncFock run. But none of the tests, as far as I am aware, have both IncFock and non-IncFock runs for the same SCF method executed simultaneously. Your suggested method works with the current tests, and it should still work quite well for testing IncFock efficiency since it will catch any cases where IncFock causes serious convergence issues. I will implement it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404
https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404:619,Testability,test,tests,619,"> This lgtm after some whitespace tidying for clarity. Would it be useful to add a check to existing tests of each of the JK classes that can use incfock along the lines of `compare(1, variable(""SCF ITERATIONS"") < 15.0, ""incfock efficient"")`?. Thanks; whitespace issues cleaned up!. Regarding the test you suggest, I do think that is a good idea. In principle, if we wanted to measure IncFock efficiency in a test, it might be better measured using a difference in SCF iteration counts between IncFock and corresponding non-IncFock runs, rather than using a raw SCF iteration count for the IncFock run. But none of the tests, as far as I am aware, have both IncFock and non-IncFock runs for the same SCF method executed simultaneously. Your suggested method works with the current tests, and it should still work quite well for testing IncFock efficiency since it will catch any cases where IncFock causes serious convergence issues. I will implement it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404
https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404:781,Testability,test,tests,781,"> This lgtm after some whitespace tidying for clarity. Would it be useful to add a check to existing tests of each of the JK classes that can use incfock along the lines of `compare(1, variable(""SCF ITERATIONS"") < 15.0, ""incfock efficient"")`?. Thanks; whitespace issues cleaned up!. Regarding the test you suggest, I do think that is a good idea. In principle, if we wanted to measure IncFock efficiency in a test, it might be better measured using a difference in SCF iteration counts between IncFock and corresponding non-IncFock runs, rather than using a raw SCF iteration count for the IncFock run. But none of the tests, as far as I am aware, have both IncFock and non-IncFock runs for the same SCF method executed simultaneously. Your suggested method works with the current tests, and it should still work quite well for testing IncFock efficiency since it will catch any cases where IncFock causes serious convergence issues. I will implement it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404
https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404:828,Testability,test,testing,828,"> This lgtm after some whitespace tidying for clarity. Would it be useful to add a check to existing tests of each of the JK classes that can use incfock along the lines of `compare(1, variable(""SCF ITERATIONS"") < 15.0, ""incfock efficient"")`?. Thanks; whitespace issues cleaned up!. Regarding the test you suggest, I do think that is a good idea. In principle, if we wanted to measure IncFock efficiency in a test, it might be better measured using a difference in SCF iteration counts between IncFock and corresponding non-IncFock runs, rather than using a raw SCF iteration count for the IncFock run. But none of the tests, as far as I am aware, have both IncFock and non-IncFock runs for the same SCF method executed simultaneously. Your suggested method works with the current tests, and it should still work quite well for testing IncFock efficiency since it will catch any cases where IncFock causes serious convergence issues. I will implement it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404
https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057:314,Availability,down,down,314,"All right, bug fixed, and IncFock tests added! The new IncFock efficiency tests compare against an SCF ITERATIONS value of x+3, where x is the number of SCF iterations observed in the corresponding non-IncFock run (which also matches the iteration count seen in each output.ref file). I can reduce the 3 component down to something else if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057
https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057:291,Energy Efficiency,reduce,reduce,291,"All right, bug fixed, and IncFock tests added! The new IncFock efficiency tests compare against an SCF ITERATIONS value of x+3, where x is the number of SCF iterations observed in the corresponding non-IncFock run (which also matches the iteration count seen in each output.ref file). I can reduce the 3 component down to something else if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057
https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057:34,Testability,test,tests,34,"All right, bug fixed, and IncFock tests added! The new IncFock efficiency tests compare against an SCF ITERATIONS value of x+3, where x is the number of SCF iterations observed in the corresponding non-IncFock run (which also matches the iteration count seen in each output.ref file). I can reduce the 3 component down to something else if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057
https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057:74,Testability,test,tests,74,"All right, bug fixed, and IncFock tests added! The new IncFock efficiency tests compare against an SCF ITERATIONS value of x+3, where x is the number of SCF iterations observed in the corresponding non-IncFock run (which also matches the iteration count seen in each output.ref file). I can reduce the 3 component down to something else if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057
https://github.com/psi4/psi4/pull/2795#issuecomment-1334709386:53,Safety,avoid,avoid,53,If so shall we push forward for this small change to avoid conflicts with #2775 that would occur if we changed everything to not return base class?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2795#issuecomment-1334709386
https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805:281,Deployability,INSTALL,INSTALL,281,"Thanks, I'll add that as it can ease detection. In this case it's not important as Libint2 only uses Python to process files for the Fortran interface and for some testing -- any Python will do there. https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805
https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805:141,Integrability,interface,interface,141,"Thanks, I'll add that as it can ease detection. In this case it's not important as Libint2 only uses Python to process files for the Fortran interface and for some testing -- any Python will do there. https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805
https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805:37,Safety,detect,detection,37,"Thanks, I'll add that as it can ease detection. In this case it's not important as Libint2 only uses Python to process files for the Fortran interface and for some testing -- any Python will do there. https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805
https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805:164,Testability,test,testing,164,"Thanks, I'll add that as it can ease detection. In this case it's not important as Libint2 only uses Python to process files for the Fortran interface and for some testing -- any Python will do there. https://github.com/evaleev/libint/blob/9f12ee61e1ce52420fe3020712c3584cb3e9a1b4/INSTALL.md",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2796#issuecomment-1326997805
https://github.com/psi4/psi4/issues/2800#issuecomment-1328095947:275,Deployability,install,install,275,"Please use `PYMOD_INSTALL_LIBDIR` https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L94-L95 to adjust the path. Since Linux build conventions and Python build conventions can't both be fully adhered to, Psi4 prefers the former, especially as one doesn't always want an install into Python's site-packages. I suspect the `__init__` logic will heal if this cmake var is used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2800#issuecomment-1328095947
https://github.com/psi4/psi4/issues/2800#issuecomment-1328095947:337,Testability,log,logic,337,"Please use `PYMOD_INSTALL_LIBDIR` https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L94-L95 to adjust the path. Since Linux build conventions and Python build conventions can't both be fully adhered to, Psi4 prefers the former, especially as one doesn't always want an install into Python's site-packages. I suspect the `__init__` logic will heal if this cmake var is used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2800#issuecomment-1328095947
https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160:175,Deployability,release,release,175,"Yeah, the BLAS+OpenMP detection in Psi4 much predates the CMake FindBLAS, OneAPI, and Intel MKLConfig.cmake reforms. I'm not keen on any immediate changes before the upcoming release, but I agree that it's worth revisiting to see if some of the new tools streamline the build or solve more situations w/o intervention. (Though I personally don't like having environment variables influence CMake. :-) ). Btw iirc, OpenMP doesn't like to be statically linked, so you might favor `libiomp5.so`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160
https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160:370,Modifiability,variab,variables,370,"Yeah, the BLAS+OpenMP detection in Psi4 much predates the CMake FindBLAS, OneAPI, and Intel MKLConfig.cmake reforms. I'm not keen on any immediate changes before the upcoming release, but I agree that it's worth revisiting to see if some of the new tools streamline the build or solve more situations w/o intervention. (Though I personally don't like having environment variables influence CMake. :-) ). Btw iirc, OpenMP doesn't like to be statically linked, so you might favor `libiomp5.so`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160
https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160:22,Safety,detect,detection,22,"Yeah, the BLAS+OpenMP detection in Psi4 much predates the CMake FindBLAS, OneAPI, and Intel MKLConfig.cmake reforms. I'm not keen on any immediate changes before the upcoming release, but I agree that it's worth revisiting to see if some of the new tools streamline the build or solve more situations w/o intervention. (Though I personally don't like having environment variables influence CMake. :-) ). Btw iirc, OpenMP doesn't like to be statically linked, so you might favor `libiomp5.so`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2806#issuecomment-1329482160
https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540:303,Integrability,depend,depending,303,"> Thanks for looking at stability. Probably later we can add a test for each of the stabilities that parameterizes all the scf methods and incfock combinations. You're welcome! This would probably be a good idea, especially since, from my testing, some issues pop up with stability tests UHF references depending on the SCF_TYPE method used currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540
https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540:101,Modifiability,parameteriz,parameterizes,101,"> Thanks for looking at stability. Probably later we can add a test for each of the stabilities that parameterizes all the scf methods and incfock combinations. You're welcome! This would probably be a good idea, especially since, from my testing, some issues pop up with stability tests UHF references depending on the SCF_TYPE method used currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540
https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540:63,Testability,test,test,63,"> Thanks for looking at stability. Probably later we can add a test for each of the stabilities that parameterizes all the scf methods and incfock combinations. You're welcome! This would probably be a good idea, especially since, from my testing, some issues pop up with stability tests UHF references depending on the SCF_TYPE method used currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540
https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540:239,Testability,test,testing,239,"> Thanks for looking at stability. Probably later we can add a test for each of the stabilities that parameterizes all the scf methods and incfock combinations. You're welcome! This would probably be a good idea, especially since, from my testing, some issues pop up with stability tests UHF references depending on the SCF_TYPE method used currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540
https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540:282,Testability,test,tests,282,"> Thanks for looking at stability. Probably later we can add a test for each of the stabilities that parameterizes all the scf methods and incfock combinations. You're welcome! This would probably be a good idea, especially since, from my testing, some issues pop up with stability tests UHF references depending on the SCF_TYPE method used currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540
https://github.com/psi4/psi4/pull/2808#issuecomment-1332351744:0,Availability,Ping,Ping,0,Ping me for review after Pt 1.5 gets merged in. I'm worried about possible merge conflicts.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332351744
https://github.com/psi4/psi4/pull/2808#issuecomment-1332396372:115,Testability,test,test,115,"> This all looks good to me. Let us know when this is ready to merge. Will do! I think I want to run a quick final test set with the DFJLinK PR merged in, to make sure nothing broke. Then, it should be good to go!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332396372
https://github.com/psi4/psi4/pull/2808#issuecomment-1332580612:10,Availability,error,error,10,"So the CI error here is... interesting. `FAILED: src/psi4/libdpd/CMakeFiles/dpd.dir/buf4_mat_irrep_wrt.cc.obj ; C:\PROGRA~1\LLVM\bin\clang-cl.exe /nologo -TP -DUSING_LAPACK_MKL -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_NONSTDC_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++17 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_wrt.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\buf4_mat_irrep_wrt.cc; In file included from D:\a\1\s\psi4\src\psi4\libdpd\buf4_mat_irrep_wrt.cc:33:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\cstdio:9:; C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\yvals_core.h(784,1): error: static_assert failed ""Error in C++ Standard Library usage.""; _EMIT_STL_ERROR(STL1000, ""Unexpected compiler version, expected Clang 14.0.0 or newer."");; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\yvals_core.h(456,5): note: expanded from macro '_EMIT_STL_ERROR'; static_assert(false, ""Error in C++ Standard Library usage.""); ^ ~~~~~; 1 error generated.`. Two overall errors on the Windows Psi4 build in this vein.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332580612
https://github.com/psi4/psi4/pull/2808#issuecomment-1332580612:1014,Availability,error,error,1014,"So the CI error here is... interesting. `FAILED: src/psi4/libdpd/CMakeFiles/dpd.dir/buf4_mat_irrep_wrt.cc.obj ; C:\PROGRA~1\LLVM\bin\clang-cl.exe /nologo -TP -DUSING_LAPACK_MKL -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_NONSTDC_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++17 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_wrt.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\buf4_mat_irrep_wrt.cc; In file included from D:\a\1\s\psi4\src\psi4\libdpd\buf4_mat_irrep_wrt.cc:33:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\cstdio:9:; C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\yvals_core.h(784,1): error: static_assert failed ""Error in C++ Standard Library usage.""; _EMIT_STL_ERROR(STL1000, ""Unexpected compiler version, expected Clang 14.0.0 or newer."");; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\yvals_core.h(456,5): note: expanded from macro '_EMIT_STL_ERROR'; static_assert(false, ""Error in C++ Standard Library usage.""); ^ ~~~~~; 1 error generated.`. Two overall errors on the Windows Psi4 build in this vein.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332580612
https://github.com/psi4/psi4/pull/2808#issuecomment-1332580612:1043,Availability,Error,Error,1043,"So the CI error here is... interesting. `FAILED: src/psi4/libdpd/CMakeFiles/dpd.dir/buf4_mat_irrep_wrt.cc.obj ; C:\PROGRA~1\LLVM\bin\clang-cl.exe /nologo -TP -DUSING_LAPACK_MKL -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_NONSTDC_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++17 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_wrt.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\buf4_mat_irrep_wrt.cc; In file included from D:\a\1\s\psi4\src\psi4\libdpd\buf4_mat_irrep_wrt.cc:33:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\cstdio:9:; C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\yvals_core.h(784,1): error: static_assert failed ""Error in C++ Standard Library usage.""; _EMIT_STL_ERROR(STL1000, ""Unexpected compiler version, expected Clang 14.0.0 or newer."");; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\yvals_core.h(456,5): note: expanded from macro '_EMIT_STL_ERROR'; static_assert(false, ""Error in C++ Standard Library usage.""); ^ ~~~~~; 1 error generated.`. Two overall errors on the Windows Psi4 build in this vein.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332580612
https://github.com/psi4/psi4/pull/2808#issuecomment-1332580612:1442,Availability,Error,Error,1442,"So the CI error here is... interesting. `FAILED: src/psi4/libdpd/CMakeFiles/dpd.dir/buf4_mat_irrep_wrt.cc.obj ; C:\PROGRA~1\LLVM\bin\clang-cl.exe /nologo -TP -DUSING_LAPACK_MKL -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_NONSTDC_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++17 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_wrt.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\buf4_mat_irrep_wrt.cc; In file included from D:\a\1\s\psi4\src\psi4\libdpd\buf4_mat_irrep_wrt.cc:33:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\cstdio:9:; C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\yvals_core.h(784,1): error: static_assert failed ""Error in C++ Standard Library usage.""; _EMIT_STL_ERROR(STL1000, ""Unexpected compiler version, expected Clang 14.0.0 or newer."");; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\yvals_core.h(456,5): note: expanded from macro '_EMIT_STL_ERROR'; static_assert(false, ""Error in C++ Standard Library usage.""); ^ ~~~~~; 1 error generated.`. Two overall errors on the Windows Psi4 build in this vein.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332580612
https://github.com/psi4/psi4/pull/2808#issuecomment-1332580612:1493,Availability,error,error,1493,"So the CI error here is... interesting. `FAILED: src/psi4/libdpd/CMakeFiles/dpd.dir/buf4_mat_irrep_wrt.cc.obj ; C:\PROGRA~1\LLVM\bin\clang-cl.exe /nologo -TP -DUSING_LAPACK_MKL -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_NONSTDC_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++17 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_wrt.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\buf4_mat_irrep_wrt.cc; In file included from D:\a\1\s\psi4\src\psi4\libdpd\buf4_mat_irrep_wrt.cc:33:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\cstdio:9:; C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\yvals_core.h(784,1): error: static_assert failed ""Error in C++ Standard Library usage.""; _EMIT_STL_ERROR(STL1000, ""Unexpected compiler version, expected Clang 14.0.0 or newer."");; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\yvals_core.h(456,5): note: expanded from macro '_EMIT_STL_ERROR'; static_assert(false, ""Error in C++ Standard Library usage.""); ^ ~~~~~; 1 error generated.`. Two overall errors on the Windows Psi4 build in this vein.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332580612
https://github.com/psi4/psi4/pull/2808#issuecomment-1332580612:1524,Availability,error,errors,1524,"So the CI error here is... interesting. `FAILED: src/psi4/libdpd/CMakeFiles/dpd.dir/buf4_mat_irrep_wrt.cc.obj ; C:\PROGRA~1\LLVM\bin\clang-cl.exe /nologo -TP -DUSING_LAPACK_MKL -D_CRT_NONSTDC_NO_DEPRECATE -D_CRT_NONSTDC_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS -D_USE_MATH_DEFINES -ID:\a\1\s\psi4\include -ID:\a\1\s\psi4\src -imsvc C:\tools\miniconda3\include -imsvc C:\tools\miniconda3\Library\include -imsvc C:\tools\miniconda3\Library\include\eigen3 /arch:AVX /O2 /Ob2 /DNDEBUG -MD /EHsc -Xclang -fopenmp -std:c++17 /showIncludes /Fosrc\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_wrt.cc.obj /Fdsrc\psi4\libdpd\CMakeFiles\dpd.dir\dpd.pdb -c -- D:\a\1\s\psi4\src\psi4\libdpd\buf4_mat_irrep_wrt.cc; In file included from D:\a\1\s\psi4\src\psi4\libdpd\buf4_mat_irrep_wrt.cc:33:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\cstdio:9:; C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\yvals_core.h(784,1): error: static_assert failed ""Error in C++ Standard Library usage.""; _EMIT_STL_ERROR(STL1000, ""Unexpected compiler version, expected Clang 14.0.0 or newer."");; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\include\yvals_core.h(456,5): note: expanded from macro '_EMIT_STL_ERROR'; static_assert(false, ""Error in C++ Standard Library usage.""); ^ ~~~~~; 1 error generated.`. Two overall errors on the Windows Psi4 build in this vein.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332580612
https://github.com/psi4/psi4/pull/2808#issuecomment-1332827250:119,Availability,failure,failure,119,"I've gotten that once today, too. Then I've gotten distracted by other matters. Even if a restart fixes it, another CI failure will crop up later on, so please rebase, and we'll see if this is a consistent issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332827250
https://github.com/psi4/psi4/pull/2808#issuecomment-1333200894:24,Availability,error,error,24,"I got the static_assert error again now. The file it's triggering on hasn't had recent changes, so I don't know why it's popping up now, unless it's an intermittant/brownout strategy to push upgrades. Anyways, switching the llvm version https://github.com/psi4/psi4/pull/2791/files#diff-9f5f8e4d87a7d1fbb0e8f30d1c680c5f42f6af10c04aa81d342c7dfa5af9a99fR10 at least gets the build started.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1333200894
https://github.com/psi4/psi4/pull/2808#issuecomment-1333200894:191,Deployability,upgrade,upgrades,191,"I got the static_assert error again now. The file it's triggering on hasn't had recent changes, so I don't know why it's popping up now, unless it's an intermittant/brownout strategy to push upgrades. Anyways, switching the llvm version https://github.com/psi4/psi4/pull/2791/files#diff-9f5f8e4d87a7d1fbb0e8f30d1c680c5f42f6af10c04aa81d342c7dfa5af9a99fR10 at least gets the build started.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1333200894
https://github.com/psi4/psi4/pull/2808#issuecomment-1333851983:26,Availability,error,error,26,"> I got the static_assert error again now. The file it's triggering on hasn't had recent changes, so I don't know why it's popping up now, unless it's an intermittant/brownout strategy to push upgrades. Anyways, switching the llvm version https://github.com/psi4/psi4/pull/2791/files#diff-9f5f8e4d87a7d1fbb0e8f30d1c680c5f42f6af10c04aa81d342c7dfa5af9a99fR10 at least gets the build started. Hmmmm, I see. Thank you for looking into this! I just rebased and pushed again, so we will see if that helps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1333851983
https://github.com/psi4/psi4/pull/2808#issuecomment-1333851983:193,Deployability,upgrade,upgrades,193,"> I got the static_assert error again now. The file it's triggering on hasn't had recent changes, so I don't know why it's popping up now, unless it's an intermittant/brownout strategy to push upgrades. Anyways, switching the llvm version https://github.com/psi4/psi4/pull/2791/files#diff-9f5f8e4d87a7d1fbb0e8f30d1c680c5f42f6af10c04aa81d342c7dfa5af9a99fR10 at least gets the build started. Hmmmm, I see. Thank you for looking into this! I just rebased and pushed again, so we will see if that helps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1333851983
https://github.com/psi4/psi4/pull/2813#issuecomment-1333565864:59,Availability,error,error,59,"Rebasing is not trivial for some reason, I am getting this error on force-push. > refusing to allow an OAuth App to create or update workflow `.github/workflows/ecosystem.yml` without `workflow` scope. Tried a few things to get a new token, etc. with no avail. I can work around this, but only a bit later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2813#issuecomment-1333565864
https://github.com/psi4/psi4/pull/2813#issuecomment-1333565864:254,Availability,avail,avail,254,"Rebasing is not trivial for some reason, I am getting this error on force-push. > refusing to allow an OAuth App to create or update workflow `.github/workflows/ecosystem.yml` without `workflow` scope. Tried a few things to get a new token, etc. with no avail. I can work around this, but only a bit later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2813#issuecomment-1333565864
https://github.com/psi4/psi4/pull/2813#issuecomment-1333565864:126,Deployability,update,update,126,"Rebasing is not trivial for some reason, I am getting this error on force-push. > refusing to allow an OAuth App to create or update workflow `.github/workflows/ecosystem.yml` without `workflow` scope. Tried a few things to get a new token, etc. with no avail. I can work around this, but only a bit later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2813#issuecomment-1333565864
https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597:2066,Availability,error,error,2066,"://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang-common-6.0-dev amd64 1:6.0.1-14 [3015 kB]; 2022-12-01T16:30:07.1867680Z Get:4 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang1-6.0 amd64 1:6.0.1-14 [7472 kB]; 2022-12-01T16:31:01.2307594Z Get:5 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 clang-6.0 amd64 1:6.0.1-14 [9831 kB]; 2022-12-01T16:32:37.6678852Z Get:6 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp5-10 amd64 1:10.0.0-4ubuntu1 [300 kB]; 2022-12-01T16:32:38.5410720Z Get:7 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-10-dev amd64 1:10.0.0-4ubuntu1 [47.7 kB]; 2022-12-01T16:32:38.5769178Z Get:8 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-runtime amd64 1:6.0.1-14 [207 kB]; 2022-12-01T16:32:38.6670727Z Get:9 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0 amd64 1:6.0.1-14 [4889 kB]; 2022-12-01T16:33:14.3718902Z Get:10 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-dev amd64 1:6.0.1-14 [24.0 MB]; 2022-12-01T16:35:33.4054716Z Get:11 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-dev amd64 1:10.0-50~exp1 [2824 B]; 2022-12-01T16:35:33.4069243Z Fetched 65.0 MB in 12min 10s (89.1 kB/s); 2022-12-01T16:35:33.4339396Z E: Failed to fetch http://azure.archive.ubuntu.com/ubuntu/pool/main/libj/libjsoncpp/libjsoncpp1_1.7.4-3.1ubuntu2_amd64.deb 503 Service Unavailable [IP: 52.147.219.192 80]; 2022-12-01T16:35:33.4341544Z E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?; 2022-12-01T16:35:33.4444758Z ##[error]Bash exited with code '100'.; 2022-12-01T16:35:33.4494014Z ##[section]Finishing: Apt-Get Packages; 2022-12-01T16:35:33.6248939Z ##[section]Starting: Checkout psi4/psi4@refs/pull/2816/merge to s; 2022-12-01T16:35:33.6261343Z `. Seems to be an issue with loading and installing packages with apt-get? Maybe this is a one-time thing that can be fixed with a CI restart.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597
https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597:1999,Deployability,update,update,1999,"://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang-common-6.0-dev amd64 1:6.0.1-14 [3015 kB]; 2022-12-01T16:30:07.1867680Z Get:4 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang1-6.0 amd64 1:6.0.1-14 [7472 kB]; 2022-12-01T16:31:01.2307594Z Get:5 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 clang-6.0 amd64 1:6.0.1-14 [9831 kB]; 2022-12-01T16:32:37.6678852Z Get:6 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp5-10 amd64 1:10.0.0-4ubuntu1 [300 kB]; 2022-12-01T16:32:38.5410720Z Get:7 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-10-dev amd64 1:10.0.0-4ubuntu1 [47.7 kB]; 2022-12-01T16:32:38.5769178Z Get:8 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-runtime amd64 1:6.0.1-14 [207 kB]; 2022-12-01T16:32:38.6670727Z Get:9 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0 amd64 1:6.0.1-14 [4889 kB]; 2022-12-01T16:33:14.3718902Z Get:10 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-dev amd64 1:6.0.1-14 [24.0 MB]; 2022-12-01T16:35:33.4054716Z Get:11 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-dev amd64 1:10.0-50~exp1 [2824 B]; 2022-12-01T16:35:33.4069243Z Fetched 65.0 MB in 12min 10s (89.1 kB/s); 2022-12-01T16:35:33.4339396Z E: Failed to fetch http://azure.archive.ubuntu.com/ubuntu/pool/main/libj/libjsoncpp/libjsoncpp1_1.7.4-3.1ubuntu2_amd64.deb 503 Service Unavailable [IP: 52.147.219.192 80]; 2022-12-01T16:35:33.4341544Z E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?; 2022-12-01T16:35:33.4444758Z ##[error]Bash exited with code '100'.; 2022-12-01T16:35:33.4494014Z ##[section]Finishing: Apt-Get Packages; 2022-12-01T16:35:33.6248939Z ##[section]Starting: Checkout psi4/psi4@refs/pull/2816/merge to s; 2022-12-01T16:35:33.6261343Z `. Seems to be an issue with loading and installing packages with apt-get? Maybe this is a one-time thing that can be fixed with a CI restart.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597
https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597:2337,Deployability,install,installing,2337,"://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang-common-6.0-dev amd64 1:6.0.1-14 [3015 kB]; 2022-12-01T16:30:07.1867680Z Get:4 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang1-6.0 amd64 1:6.0.1-14 [7472 kB]; 2022-12-01T16:31:01.2307594Z Get:5 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 clang-6.0 amd64 1:6.0.1-14 [9831 kB]; 2022-12-01T16:32:37.6678852Z Get:6 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp5-10 amd64 1:10.0.0-4ubuntu1 [300 kB]; 2022-12-01T16:32:38.5410720Z Get:7 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-10-dev amd64 1:10.0.0-4ubuntu1 [47.7 kB]; 2022-12-01T16:32:38.5769178Z Get:8 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-runtime amd64 1:6.0.1-14 [207 kB]; 2022-12-01T16:32:38.6670727Z Get:9 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0 amd64 1:6.0.1-14 [4889 kB]; 2022-12-01T16:33:14.3718902Z Get:10 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-dev amd64 1:6.0.1-14 [24.0 MB]; 2022-12-01T16:35:33.4054716Z Get:11 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-dev amd64 1:10.0-50~exp1 [2824 B]; 2022-12-01T16:35:33.4069243Z Fetched 65.0 MB in 12min 10s (89.1 kB/s); 2022-12-01T16:35:33.4339396Z E: Failed to fetch http://azure.archive.ubuntu.com/ubuntu/pool/main/libj/libjsoncpp/libjsoncpp1_1.7.4-3.1ubuntu2_amd64.deb 503 Service Unavailable [IP: 52.147.219.192 80]; 2022-12-01T16:35:33.4341544Z E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?; 2022-12-01T16:35:33.4444758Z ##[error]Bash exited with code '100'.; 2022-12-01T16:35:33.4494014Z ##[section]Finishing: Apt-Get Packages; 2022-12-01T16:35:33.6248939Z ##[section]Starting: Checkout psi4/psi4@refs/pull/2816/merge to s; 2022-12-01T16:35:33.6261343Z `. Seems to be an issue with loading and installing packages with apt-get? Maybe this is a one-time thing that can be fixed with a CI restart.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597
https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597:2325,Performance,load,loading,2325,"://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang-common-6.0-dev amd64 1:6.0.1-14 [3015 kB]; 2022-12-01T16:30:07.1867680Z Get:4 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libclang1-6.0 amd64 1:6.0.1-14 [7472 kB]; 2022-12-01T16:31:01.2307594Z Get:5 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 clang-6.0 amd64 1:6.0.1-14 [9831 kB]; 2022-12-01T16:32:37.6678852Z Get:6 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp5-10 amd64 1:10.0.0-4ubuntu1 [300 kB]; 2022-12-01T16:32:38.5410720Z Get:7 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-10-dev amd64 1:10.0.0-4ubuntu1 [47.7 kB]; 2022-12-01T16:32:38.5769178Z Get:8 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-runtime amd64 1:6.0.1-14 [207 kB]; 2022-12-01T16:32:38.6670727Z Get:9 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0 amd64 1:6.0.1-14 [4889 kB]; 2022-12-01T16:33:14.3718902Z Get:10 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 llvm-6.0-dev amd64 1:6.0.1-14 [24.0 MB]; 2022-12-01T16:35:33.4054716Z Get:11 http://azure.archive.ubuntu.com/ubuntu focal/universe amd64 libomp-dev amd64 1:10.0-50~exp1 [2824 B]; 2022-12-01T16:35:33.4069243Z Fetched 65.0 MB in 12min 10s (89.1 kB/s); 2022-12-01T16:35:33.4339396Z E: Failed to fetch http://azure.archive.ubuntu.com/ubuntu/pool/main/libj/libjsoncpp/libjsoncpp1_1.7.4-3.1ubuntu2_amd64.deb 503 Service Unavailable [IP: 52.147.219.192 80]; 2022-12-01T16:35:33.4341544Z E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?; 2022-12-01T16:35:33.4444758Z ##[error]Bash exited with code '100'.; 2022-12-01T16:35:33.4494014Z ##[section]Finishing: Apt-Get Packages; 2022-12-01T16:35:33.6248939Z ##[section]Starting: Checkout psi4/psi4@refs/pull/2816/merge to s; 2022-12-01T16:35:33.6261343Z `. Seems to be an issue with loading and installing packages with apt-get? Maybe this is a one-time thing that can be fixed with a CI restart.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1334145597
https://github.com/psi4/psi4/pull/2816#issuecomment-1337111281:486,Availability,error,error,486,"This reminds me, there *is* a technique to avoid recomputing every `N` iterations. Namely, I think Ahlrichs(?) described a procedure where one keeps track of the change of the density matrix from the reference one by setting `D_0=0` and `D_i = D_{i-1} + max{|Duv|}` where `Duv` is the difference density matrix at iteration `i` and `D_i` tracks the changes. Instead of doing the reset every `N` iterations, one does a full rebuild when `D_i >= eps` because by then sufficient numerical error may have creeped into the calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1337111281
https://github.com/psi4/psi4/pull/2816#issuecomment-1337111281:43,Safety,avoid,avoid,43,"This reminds me, there *is* a technique to avoid recomputing every `N` iterations. Namely, I think Ahlrichs(?) described a procedure where one keeps track of the change of the density matrix from the reference one by setting `D_0=0` and `D_i = D_{i-1} + max{|Duv|}` where `Duv` is the difference density matrix at iteration `i` and `D_i` tracks the changes. Instead of doing the reset every `N` iterations, one does a full rebuild when `D_i >= eps` because by then sufficient numerical error may have creeped into the calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1337111281
https://github.com/psi4/psi4/pull/2816#issuecomment-1337458155:488,Availability,error,error,488,"> This reminds me, there _is_ a technique to avoid recomputing every `N` iterations. Namely, I think Ahlrichs(?) described a procedure where one keeps track of the change of the density matrix from the reference one by setting `D_0=0` and `D_i = D_{i-1} + max{|Duv|}` where `Duv` is the difference density matrix at iteration `i` and `D_i` tracks the changes. Instead of doing the reset every `N` iterations, one does a full rebuild when `D_i >= eps` because by then sufficient numerical error may have creeped into the calculation. Thank you for telling me about this! This is an intriguing idea overall. Essentially, instead of hard-setting a number of iterations to fully recompute the Fock matrix, one does it dynamically based on how much the density matrix has changed over time. While I don't think this PR is the right place to implement such a scheme (with 1.7 is right around the corner; and since such a scheme would break standardization of IncFock between the different integral-direct JK builds Psi4 has currently, assuming we implement it only in DFJCOSK for this PR), it could be worth investigating in the future. The potential for removing a human-set parameter (INCFOCK_FULL_FOCK_EVERY in this case) is always appealing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1337458155
https://github.com/psi4/psi4/pull/2816#issuecomment-1337458155:45,Safety,avoid,avoid,45,"> This reminds me, there _is_ a technique to avoid recomputing every `N` iterations. Namely, I think Ahlrichs(?) described a procedure where one keeps track of the change of the density matrix from the reference one by setting `D_0=0` and `D_i = D_{i-1} + max{|Duv|}` where `Duv` is the difference density matrix at iteration `i` and `D_i` tracks the changes. Instead of doing the reset every `N` iterations, one does a full rebuild when `D_i >= eps` because by then sufficient numerical error may have creeped into the calculation. Thank you for telling me about this! This is an intriguing idea overall. Essentially, instead of hard-setting a number of iterations to fully recompute the Fock matrix, one does it dynamically based on how much the density matrix has changed over time. While I don't think this PR is the right place to implement such a scheme (with 1.7 is right around the corner; and since such a scheme would break standardization of IncFock between the different integral-direct JK builds Psi4 has currently, assuming we implement it only in DFJCOSK for this PR), it could be worth investigating in the future. The potential for removing a human-set parameter (INCFOCK_FULL_FOCK_EVERY in this case) is always appealing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2816#issuecomment-1337458155
https://github.com/psi4/psi4/pull/2818#issuecomment-1337609687:217,Testability,test,tests,217,"I'm happy to talk orbital ordering at PsiCon. One of the points I'll be making in my talk is the importance of keeping this sort of thing documented. I'll be pushing one more commit momentarily, when build and dipole tests pass again. After that, it'll be good to merge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2818#issuecomment-1337609687
https://github.com/psi4/psi4/pull/2823#issuecomment-1469079358:259,Availability,error,error,259,"Sorry, I knew I should have merged this this afternoon. If you make this change https://github.com/psi4/psi4/pull/2895/files#diff-9886b1fe077112c3a9952964ed992dc3cd38b48d0a506a6b7a00241e4669d2b1R243 that should fix Linux Eco CI. And I think the Windows Azure error is a fluke.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2823#issuecomment-1469079358
https://github.com/psi4/psi4/pull/2824#issuecomment-1337777780:102,Energy Efficiency,schedul,schedule,102,"Thank you for letting me know!. Regarding parallelization, nothing seems especially amiss. I can see `schedule(guided)` being preferred over `schedule(dynamic)` here. The comments look largely good to me, as well!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2824#issuecomment-1337777780
https://github.com/psi4/psi4/pull/2824#issuecomment-1337777780:142,Energy Efficiency,schedul,schedule,142,"Thank you for letting me know!. Regarding parallelization, nothing seems especially amiss. I can see `schedule(guided)` being preferred over `schedule(dynamic)` here. The comments look largely good to me, as well!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2824#issuecomment-1337777780
https://github.com/psi4/psi4/pull/2824#issuecomment-1337777780:111,Usability,guid,guided,111,"Thank you for letting me know!. Regarding parallelization, nothing seems especially amiss. I can see `schedule(guided)` being preferred over `schedule(dynamic)` here. The comments look largely good to me, as well!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2824#issuecomment-1337777780
https://github.com/psi4/psi4/pull/2827#issuecomment-1339961826:12,Testability,test,tests,12,"are the new tests hitting the bug? code change was to findif. if it's not too long, you could have a dertype=1 and a dertype=0 in the test input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2827#issuecomment-1339961826
https://github.com/psi4/psi4/pull/2827#issuecomment-1339961826:134,Testability,test,test,134,"are the new tests hitting the bug? code change was to findif. if it's not too long, you could have a dertype=1 and a dertype=0 in the test input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2827#issuecomment-1339961826
https://github.com/psi4/psi4/pull/2827#issuecomment-1339978094:51,Security,Validat,ValidationError,51,"Yes, the new test would hit the bug and raise the `ValidationError` above in 1.6 and 1.7. The test is very quick.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2827#issuecomment-1339978094
https://github.com/psi4/psi4/pull/2827#issuecomment-1339978094:13,Testability,test,test,13,"Yes, the new test would hit the bug and raise the `ValidationError` above in 1.6 and 1.7. The test is very quick.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2827#issuecomment-1339978094
https://github.com/psi4/psi4/pull/2827#issuecomment-1339978094:94,Testability,test,test,94,"Yes, the new test would hit the bug and raise the `ValidationError` above in 1.6 and 1.7. The test is very quick.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2827#issuecomment-1339978094
https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061:194,Availability,error,error,194,"Thanks for the bug report. What's _happening_ is that test 243 is testing an eigenvector compute routine. The phase is non-deterministic, so the test does postprocessing on the phase. Due to an error in the test itself, the phase postprocessing was not done on the first row, causing the incorrect sign. tl;dr: Your Psi compilation is fine. The test was buggy. Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061
https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061:97,Integrability,rout,routine,97,"Thanks for the bug report. What's _happening_ is that test 243 is testing an eigenvector compute routine. The phase is non-deterministic, so the test does postprocessing on the phase. Due to an error in the test itself, the phase postprocessing was not done on the first row, causing the incorrect sign. tl;dr: Your Psi compilation is fine. The test was buggy. Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061
https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061:54,Testability,test,test,54,"Thanks for the bug report. What's _happening_ is that test 243 is testing an eigenvector compute routine. The phase is non-deterministic, so the test does postprocessing on the phase. Due to an error in the test itself, the phase postprocessing was not done on the first row, causing the incorrect sign. tl;dr: Your Psi compilation is fine. The test was buggy. Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061
https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061:66,Testability,test,testing,66,"Thanks for the bug report. What's _happening_ is that test 243 is testing an eigenvector compute routine. The phase is non-deterministic, so the test does postprocessing on the phase. Due to an error in the test itself, the phase postprocessing was not done on the first row, causing the incorrect sign. tl;dr: Your Psi compilation is fine. The test was buggy. Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061
https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061:145,Testability,test,test,145,"Thanks for the bug report. What's _happening_ is that test 243 is testing an eigenvector compute routine. The phase is non-deterministic, so the test does postprocessing on the phase. Due to an error in the test itself, the phase postprocessing was not done on the first row, causing the incorrect sign. tl;dr: Your Psi compilation is fine. The test was buggy. Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061
https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061:207,Testability,test,test,207,"Thanks for the bug report. What's _happening_ is that test 243 is testing an eigenvector compute routine. The phase is non-deterministic, so the test does postprocessing on the phase. Due to an error in the test itself, the phase postprocessing was not done on the first row, causing the incorrect sign. tl;dr: Your Psi compilation is fine. The test was buggy. Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061
https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061:345,Testability,test,test,345,"Thanks for the bug report. What's _happening_ is that test 243 is testing an eigenvector compute routine. The phase is non-deterministic, so the test does postprocessing on the phase. Due to an error in the test itself, the phase postprocessing was not done on the first row, causing the incorrect sign. tl;dr: Your Psi compilation is fine. The test was buggy. Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2828#issuecomment-1342683061
https://github.com/psi4/psi4/issues/2830#issuecomment-1343695259:246,Testability,test,tests,246,"Ok, that sounds like a problem then. I'm not sure how to help debugging. From the CI, they run from source, they run from conda packages, they run on Linux, Mac, and Windows; so I think the broad setup is sound. You might try seeing if the ""api"" tests (tests/pytests/) run differently than the ""cli"" tests tests/*/input.dat .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343695259
https://github.com/psi4/psi4/issues/2830#issuecomment-1343695259:253,Testability,test,tests,253,"Ok, that sounds like a problem then. I'm not sure how to help debugging. From the CI, they run from source, they run from conda packages, they run on Linux, Mac, and Windows; so I think the broad setup is sound. You might try seeing if the ""api"" tests (tests/pytests/) run differently than the ""cli"" tests tests/*/input.dat .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343695259
https://github.com/psi4/psi4/issues/2830#issuecomment-1343695259:300,Testability,test,tests,300,"Ok, that sounds like a problem then. I'm not sure how to help debugging. From the CI, they run from source, they run from conda packages, they run on Linux, Mac, and Windows; so I think the broad setup is sound. You might try seeing if the ""api"" tests (tests/pytests/) run differently than the ""cli"" tests tests/*/input.dat .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343695259
https://github.com/psi4/psi4/issues/2830#issuecomment-1343695259:306,Testability,test,tests,306,"Ok, that sounds like a problem then. I'm not sure how to help debugging. From the CI, they run from source, they run from conda packages, they run on Linux, Mac, and Windows; so I think the broad setup is sound. You might try seeing if the ""api"" tests (tests/pytests/) run differently than the ""cli"" tests tests/*/input.dat .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343695259
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:34,Availability,error,error,34,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:625,Availability,error,errors,625,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:726,Availability,ERROR,ERRORS,726,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:899,Availability,ERROR,ERROR,899,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:403,Modifiability,config,configfile,403,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:427,Modifiability,plugin,plugins,427,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:26,Safety,timeout,timeout,26,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:464,Safety,timeout,timeout-,464,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:1533,Safety,timeout,timeout,1533,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:1618,Safety,timeout,timeout,1618,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:1626,Safety,timeout,timeout,1626,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:1697,Safety,Timeout,TimeoutExpired,1697,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:1723,Safety,timeout,timeout,1723,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:1746,Safety,Timeout,TimeoutExpired,1746,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:6,Testability,test,tests,6,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:132,Testability,test,test,132,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:553,Testability,mock,mock-,553,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:916,Testability,test,tests,916,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:1113,Testability,test,testing,1113,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:1205,Testability,test,testing,1205,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:1329,Testability,test,testing,1329,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:1860,Testability,test,tests,1860,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097:1927,Testability,test,test,1927,"""api"" tests fail with the timeout error:; ```; ==================================================================================== test session starts =====================================================================================; platform freebsd13 -- Python 3.9.15, pytest-7.2.0, pluggy-1.0.0; Using --randomly-seed=3542811706; rootdir: /disk-samsung/freebsd-ports/science/psi4/work/psi4-1.7, configfile: pytest.ini; plugins: cov-2.9.0, randomly-3.12.0, timeout-2.1.0, rerunfailures-10.1, flaky-3.7.0, xdist-2.5.0, env-0.6.2, freezegun-0.4.2, mock-1.10.4, forked-1.4.0, hypothesis-6.56.2; collected 1337 items / 19 errors . =========================================================================================== ERRORS ===========================================================================================; ________________________________________________________________________ ERROR collecting tests/pytests/test_adcc.py _________________________________________________________________________; test_adcc.py:9: in <module>; from addons import using; addons.py:9: in <module>; from qcengine.testing import _programs as _programs_qcng; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:173: in <module>; ""psi4"": is_program_new_enough(""psi4"", ""1.2""),; /usr/local/lib/python3.9/site-packages/qcengine/testing.py:62: in is_program_new_enough; candidate_version = qcng.get_program(program).get_version(); /usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py:90: in get_version; exc[""proc""].wait(timeout=30); /usr/local/lib/python3.9/subprocess.py:1189: in wait; return self._wait(timeout=timeout); /usr/local/lib/python3.9/subprocess.py:1909: in _wait; raise TimeoutExpired(self.args, timeout); E subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds; ```. I think that most tests themselves pass, but there's something wrong with the python test harness.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343724097
https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561:1453,Modifiability,config,config,1453,"```psi4 --version``` prints correct version. ```qcengine info``` fails:; ```; $ qcengine info psi4; Traceback (most recent call last):; File ""/usr/local/bin/qcengine"", line 33, in <module>; sys.exit(load_entry_point('qcengine==0.26.0', 'console_scripts', 'qcengine')()); File ""/usr/local/bin/qcengine"", line 25, in importlib_load_entry_point; return next(matches).load(); File ""/usr/local/lib/python3.9/importlib/metadata.py"", line 86, in load; module = import_module(match.group('module')); File ""/usr/local/lib/python3.9/importlib/__init__.py"", line 127, in import_module; return _bootstrap._gcd_import(name[level:], package, level); File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 972, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 986, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 680, in _load_unlocked; File ""<frozen importlib._bootstrap_external>"", line 850, in exec_module; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""/usr/local/lib/python3.9/site-packages/qcengine/__init__.py"", line 5, in <module>; from . import config, exceptions; File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 340, in <module>; _load_defaults(); File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 173, in _load_defaults; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561
https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561:1527,Modifiability,config,config,1527,"```psi4 --version``` prints correct version. ```qcengine info``` fails:; ```; $ qcengine info psi4; Traceback (most recent call last):; File ""/usr/local/bin/qcengine"", line 33, in <module>; sys.exit(load_entry_point('qcengine==0.26.0', 'console_scripts', 'qcengine')()); File ""/usr/local/bin/qcengine"", line 25, in importlib_load_entry_point; return next(matches).load(); File ""/usr/local/lib/python3.9/importlib/metadata.py"", line 86, in load; module = import_module(match.group('module')); File ""/usr/local/lib/python3.9/importlib/__init__.py"", line 127, in import_module; return _bootstrap._gcd_import(name[level:], package, level); File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 972, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 986, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 680, in _load_unlocked; File ""<frozen importlib._bootstrap_external>"", line 850, in exec_module; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""/usr/local/lib/python3.9/site-packages/qcengine/__init__.py"", line 5, in <module>; from . import config, exceptions; File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 340, in <module>; _load_defaults(); File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 173, in _load_defaults; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561
https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561:1634,Modifiability,config,config,1634,"```psi4 --version``` prints correct version. ```qcengine info``` fails:; ```; $ qcengine info psi4; Traceback (most recent call last):; File ""/usr/local/bin/qcengine"", line 33, in <module>; sys.exit(load_entry_point('qcengine==0.26.0', 'console_scripts', 'qcengine')()); File ""/usr/local/bin/qcengine"", line 25, in importlib_load_entry_point; return next(matches).load(); File ""/usr/local/lib/python3.9/importlib/metadata.py"", line 86, in load; module = import_module(match.group('module')); File ""/usr/local/lib/python3.9/importlib/__init__.py"", line 127, in import_module; return _bootstrap._gcd_import(name[level:], package, level); File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 972, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 986, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 680, in _load_unlocked; File ""<frozen importlib._bootstrap_external>"", line 850, in exec_module; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""/usr/local/lib/python3.9/site-packages/qcengine/__init__.py"", line 5, in <module>; from . import config, exceptions; File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 340, in <module>; _load_defaults(); File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 173, in _load_defaults; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561
https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561:364,Performance,load,load,364,"```psi4 --version``` prints correct version. ```qcengine info``` fails:; ```; $ qcengine info psi4; Traceback (most recent call last):; File ""/usr/local/bin/qcengine"", line 33, in <module>; sys.exit(load_entry_point('qcengine==0.26.0', 'console_scripts', 'qcengine')()); File ""/usr/local/bin/qcengine"", line 25, in importlib_load_entry_point; return next(matches).load(); File ""/usr/local/lib/python3.9/importlib/metadata.py"", line 86, in load; module = import_module(match.group('module')); File ""/usr/local/lib/python3.9/importlib/__init__.py"", line 127, in import_module; return _bootstrap._gcd_import(name[level:], package, level); File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 972, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 986, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 680, in _load_unlocked; File ""<frozen importlib._bootstrap_external>"", line 850, in exec_module; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""/usr/local/lib/python3.9/site-packages/qcengine/__init__.py"", line 5, in <module>; from . import config, exceptions; File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 340, in <module>; _load_defaults(); File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 173, in _load_defaults; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561
https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561:439,Performance,load,load,439,"```psi4 --version``` prints correct version. ```qcengine info``` fails:; ```; $ qcengine info psi4; Traceback (most recent call last):; File ""/usr/local/bin/qcengine"", line 33, in <module>; sys.exit(load_entry_point('qcengine==0.26.0', 'console_scripts', 'qcengine')()); File ""/usr/local/bin/qcengine"", line 25, in importlib_load_entry_point; return next(matches).load(); File ""/usr/local/lib/python3.9/importlib/metadata.py"", line 86, in load; module = import_module(match.group('module')); File ""/usr/local/lib/python3.9/importlib/__init__.py"", line 127, in import_module; return _bootstrap._gcd_import(name[level:], package, level); File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 972, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""<frozen importlib._bootstrap>"", line 1030, in _gcd_import; File ""<frozen importlib._bootstrap>"", line 1007, in _find_and_load; File ""<frozen importlib._bootstrap>"", line 986, in _find_and_load_unlocked; File ""<frozen importlib._bootstrap>"", line 680, in _load_unlocked; File ""<frozen importlib._bootstrap_external>"", line 850, in exec_module; File ""<frozen importlib._bootstrap>"", line 228, in _call_with_frames_removed; File ""/usr/local/lib/python3.9/site-packages/qcengine/__init__.py"", line 5, in <module>; from . import config, exceptions; File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 340, in <module>; _load_defaults(); File ""/usr/local/lib/python3.9/site-packages/qcengine/config.py"", line 173, in _load_defaults; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343732561
https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199:641,Availability,error,error,641,"I'm confused, too, as that doesn't seem congruent with your reported . ```; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```. Unless you have a stray `/tmp/qcengine.yaml`, I'd expect https://github.com/MolSSI/QCEngine/blob/master/qcengine/config.py#L186 to be invoked. Here's a CI run on psi4 1.7 that shows up in qcengine info https://github.com/MolSSI/QCEngine/actions/runs/3654021638/jobs/6174071225#step:9:19 and there's no special configuration or `qcengine.yaml` files. So all I can think of to debug on your setup is to print stuff until the error becomes clear. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199
https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199:528,Deployability,configurat,configuration,528,"I'm confused, too, as that doesn't seem congruent with your reported . ```; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```. Unless you have a stray `/tmp/qcengine.yaml`, I'd expect https://github.com/MolSSI/QCEngine/blob/master/qcengine/config.py#L186 to be invoked. Here's a CI run on psi4 1.7 that shows up in qcengine info https://github.com/MolSSI/QCEngine/actions/runs/3654021638/jobs/6174071225#step:9:19 and there's no special configuration or `qcengine.yaml` files. So all I can think of to debug on your setup is to print stuff until the error becomes clear. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199
https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199:331,Modifiability,config,config,331,"I'm confused, too, as that doesn't seem congruent with your reported . ```; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```. Unless you have a stray `/tmp/qcengine.yaml`, I'd expect https://github.com/MolSSI/QCEngine/blob/master/qcengine/config.py#L186 to be invoked. Here's a CI run on psi4 1.7 that shows up in qcengine info https://github.com/MolSSI/QCEngine/actions/runs/3654021638/jobs/6174071225#step:9:19 and there's no special configuration or `qcengine.yaml` files. So all I can think of to debug on your setup is to print stuff until the error becomes clear. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199
https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199:528,Modifiability,config,configuration,528,"I'm confused, too, as that doesn't seem congruent with your reported . ```; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```. Unless you have a stray `/tmp/qcengine.yaml`, I'd expect https://github.com/MolSSI/QCEngine/blob/master/qcengine/config.py#L186 to be invoked. Here's a CI run on psi4 1.7 that shows up in qcengine info https://github.com/MolSSI/QCEngine/actions/runs/3654021638/jobs/6174071225#step:9:19 and there's no special configuration or `qcengine.yaml` files. So all I can think of to debug on your setup is to print stuff until the error becomes clear. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199
https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199:655,Usability,clear,clear,655,"I'm confused, too, as that doesn't seem congruent with your reported . ```; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```. Unless you have a stray `/tmp/qcengine.yaml`, I'd expect https://github.com/MolSSI/QCEngine/blob/master/qcengine/config.py#L186 to be invoked. Here's a CI run on psi4 1.7 that shows up in qcengine info https://github.com/MolSSI/QCEngine/actions/runs/3654021638/jobs/6174071225#step:9:19 and there's no special configuration or `qcengine.yaml` files. So all I can think of to debug on your setup is to print stuff until the error becomes clear. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199
https://github.com/psi4/psi4/pull/2833#issuecomment-1346871211:35,Availability,error,error,35,"Also, here's what I get for the CI error:. `Error: The process 'C:\Miniconda\condabin\conda.bat' failed with exit code 1`. This seems unrelated to the changes in this PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1346871211
https://github.com/psi4/psi4/pull/2833#issuecomment-1346871211:44,Availability,Error,Error,44,"Also, here's what I get for the CI error:. `Error: The process 'C:\Miniconda\condabin\conda.bat' failed with exit code 1`. This seems unrelated to the changes in this PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1346871211
https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406:3,Availability,error,error,3,CI error with the recent updates: . ```; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 9 100 9 0 0 46 0 --:--:-- --:--:-- --:--:-- 49; tar: Error opening archive: Unrecognized archive format; Error: Process completed with exit code 1.; ```. Seems to be the CI acting goofy again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406
https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406:246,Availability,Error,Error,246,CI error with the recent updates: . ```; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 9 100 9 0 0 46 0 --:--:-- --:--:-- --:--:-- 49; tar: Error opening archive: Unrecognized archive format; Error: Process completed with exit code 1.; ```. Seems to be the CI acting goofy again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406
https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406:298,Availability,Error,Error,298,CI error with the recent updates: . ```; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 9 100 9 0 0 46 0 --:--:-- --:--:-- --:--:-- 49; tar: Error opening archive: Unrecognized archive format; Error: Process completed with exit code 1.; ```. Seems to be the CI acting goofy again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406
https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406:25,Deployability,update,updates,25,CI error with the recent updates: . ```; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed. 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; 100 9 100 9 0 0 46 0 --:--:-- --:--:-- --:--:-- 49; tar: Error opening archive: Unrecognized archive format; Error: Process completed with exit code 1.; ```. Seems to be the CI acting goofy again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1372346406
https://github.com/psi4/psi4/pull/2833#issuecomment-1372611138:11,Deployability,update,update,11,Further CI update - it seems the ddd-deriv test fails with this PR... but only on Windows.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1372611138
https://github.com/psi4/psi4/pull/2833#issuecomment-1372611138:43,Testability,test,test,43,Further CI update - it seems the ddd-deriv test fails with this PR... but only on Windows.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1372611138
https://github.com/psi4/psi4/pull/2834#issuecomment-1349562483:9,Availability,failure,failure,9,"The test failure is because of a 0.1 cm^-1 change in hessian frequencies due to the keyword change. I either need to adjust the screening value in the test, adjust the reference, or adjust the default screening value. Opinions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1349562483
https://github.com/psi4/psi4/pull/2834#issuecomment-1349562483:4,Testability,test,test,4,"The test failure is because of a 0.1 cm^-1 change in hessian frequencies due to the keyword change. I either need to adjust the screening value in the test, adjust the reference, or adjust the default screening value. Opinions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1349562483
https://github.com/psi4/psi4/pull/2834#issuecomment-1349562483:151,Testability,test,test,151,"The test failure is because of a 0.1 cm^-1 change in hessian frequencies due to the keyword change. I either need to adjust the screening value in the test, adjust the reference, or adjust the default screening value. Opinions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1349562483
https://github.com/psi4/psi4/pull/2834#issuecomment-1349577053:143,Testability,test,tests,143,I don't think you can adjust the reference b/c it's analytic vs fd. https://github.com/psi4/psi4/blob/f8a5f63abeb916750e00fdad7c3bb55a5dfa481f/tests/dft-freq-analytic/input.dat#L18-L19. maybe adjust the screening in the test for now. have you run stdsuite? there could be more of these.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1349577053
https://github.com/psi4/psi4/pull/2834#issuecomment-1349577053:220,Testability,test,test,220,I don't think you can adjust the reference b/c it's analytic vs fd. https://github.com/psi4/psi4/blob/f8a5f63abeb916750e00fdad7c3bb55a5dfa481f/tests/dft-freq-analytic/input.dat#L18-L19. maybe adjust the screening in the test for now. have you run stdsuite? there could be more of these.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1349577053
https://github.com/psi4/psi4/pull/2834#issuecomment-1349591584:31,Availability,failure,failures,31,"`svwn_hessian_module` shows 15 failures, now that I check that... Can I just halve the default value? That will make RKS behavior as it was before. UKS will stay change, but I think that's unavoidable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1349591584
https://github.com/psi4/psi4/pull/2834#issuecomment-1349608028:31,Availability,failure,failures,31,"> svwn_hessian_module shows 15 failures, now that I check that... Can I just halve the default value? That will make RKS behavior as it was before. UKS will stay change, but I think that's unavoidable. Unless you think new (w/PR) analytic value is better than before (in which case I need to re-collect refs), I agree on halving the default. That's equivalent to tightening up occ/dfocc to work under standard options settings. All stdsuite is run under standard conv and options (besides points=5; otherwise nothing would match).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1349608028
https://github.com/psi4/psi4/pull/2834#issuecomment-1351452556:58,Availability,toler,tolerance,58,"Psi's default behavior is to default to the LibXC density tolerance, although this can be overridden if the user supplies the `DFT_DENSITY_TOLERANCE` keyword. This is a large cutoff indeed, and I have not found any mention in DFT hessian papers of special recommendations for screening based on density, only recommendations for screening of AO-indexed quantities. (See Sec. IIIA [here](https://aip.scitation.org/doi/10.1063/1.466887). Sadly, I have found no record of Ref. 48 ever being published.) This seems large to me, but I'd rather not touch it too much without either an expert opinion or word from @dgasmith on what the impetus for this cutoff was.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1351452556
https://github.com/psi4/psi4/pull/2834#issuecomment-1353418708:6,Testability,test,tests,6,"Quick tests on a 510 basis function system show that timing savings between old and new defaults are utterly negligible. Changed, per @susilehtola's recommendation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1353418708
https://github.com/psi4/psi4/pull/2834#issuecomment-1353502599:81,Deployability,release,releases,81,"We could, perhaps, give it as a _candidate_ for deprecation and deprecate it two releases from now, if nobody objects?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1353502599
https://github.com/psi4/psi4/pull/2836#issuecomment-1356234732:14,Testability,test,test,14,"If we plan to test many methods in this way, shouldn't this be a pytest?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2836#issuecomment-1356234732
https://github.com/psi4/psi4/pull/2842#issuecomment-1380787808:144,Availability,avail,available,144,Where are the basis sets from? Ideally they should just go straight to https://github.com/MolSSI-BSE/basis_set_exchange. The r2SCAN hybrids are available in the current version of Libxc.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1380787808
https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:216,Availability,error,error,216,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360
https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:613,Energy Efficiency,energy,energy,613,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360
https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:680,Energy Efficiency,energy,energy,680,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360
https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:783,Energy Efficiency,ENERGY,ENERGY,783,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360
https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:801,Energy Efficiency,energy,energy,801,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360
https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:222,Integrability,message,messages,222,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360
https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:763,Modifiability,variab,variable,763,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360
https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:811,Testability,TEST,TEST,811,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360
https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:17,Availability,error,error,17,"@hokru I get the error below when there's no dftd4 of any kind around. (It's what Azure linux is doing now.) When I change the try/except in qcng empirical_disp_param line 906 from ModuleNotFoundError to ImportError. This is py310, so I'm not sure why, but it might be a sol'n. ```(py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list dftd; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342
https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1244,Availability,error,error,1244,"I'm not sure why, but it might be a sol'n. ```(py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list dftd; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/driver/p4util/__init__.py:35: in <module>; from .fcidump import *; stage/lib/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342
https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1341,Availability,ERROR,ERRORS,1341,"t at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/driver/p4util/__init__.py:35: in <module>; from .fcidump import *; stage/lib/psi4/driver/p4util/fcidump.py:43: in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; stage/lib/psi4/driver/procrouting/__init__.py:2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342
https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1510,Availability,ERROR,ERROR,1510,"t at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/driver/p4util/__init__.py:35: in <module>; from .fcidump import *; stage/lib/psi4/driver/p4util/fcidump.py:43: in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; stage/lib/psi4/driver/procrouting/__init__.py:2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342
https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1162,Modifiability,config,configfile,1162,"al_disp_param line 906 from ModuleNotFoundError to ImportError. This is py310, so I'm not sure why, but it might be a sol'n. ```(py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list dftd; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342
https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1186,Modifiability,plugin,plugins,1186,"undError to ImportError. This is py310, so I'm not sure why, but it might be a sol'n. ```(py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list dftd; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/driver/p4util/__init__.py:35: in <modul",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342
https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:852,Testability,test,tests,852,"@hokru I get the error below when there's no dftd4 of any kind around. (It's what Azure linux is doing now.) When I change the try/except in qcng empirical_disp_param line 906 from ModuleNotFoundError to ImportError. This is py310, so I'm not sure why, but it might be a sol'n. ```(py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list dftd; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342
https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:964,Testability,test,test,964,"@hokru I get the error below when there's no dftd4 of any kind around. (It's what Azure linux is doing now.) When I change the try/except in qcng empirical_disp_param line 906 from ModuleNotFoundError to ImportError. This is py310, so I'm not sure why, but it might be a sol'n. ```(py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list dftd; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342
https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1527,Testability,test,tests,1527,"t at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/driver/p4util/__init__.py:35: in <module>; from .fcidump import *; stage/lib/psi4/driver/p4util/fcidump.py:43: in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; stage/lib/psi4/driver/procrouting/__init__.py:2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342
https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1654,Testability,test,test,1654,"olchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/driver/p4util/__init__.py:35: in <module>; from .fcidump import *; stage/lib/psi4/driver/p4util/fcidump.py:43: in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; stage/lib/psi4/driver/procrouting/__init__.py:29: in <module>; from .proc_table import procedures, hooks, energy_only_methods, integrated_basis_methods; stage/lib/psi4/driver/procrouting/proc_table.py:34: in <module>; from . import sapt; stage/lib/psi4/driver/procrouting/sapt/__",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342
https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1690,Testability,test,tests,1690,"olchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/driver/p4util/__init__.py:35: in <module>; from .fcidump import *; stage/lib/psi4/driver/p4util/fcidump.py:43: in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; stage/lib/psi4/driver/procrouting/__init__.py:29: in <module>; from .proc_table import procedures, hooks, energy_only_methods, integrated_basis_methods; stage/lib/psi4/driver/procrouting/proc_table.py:34: in <module>; from . import sapt; stage/lib/psi4/driver/procrouting/sapt/__",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342
https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1741,Testability,test,test,1741,"nda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/driver/p4util/__init__.py:35: in <module>; from .fcidump import *; stage/lib/psi4/driver/p4util/fcidump.py:43: in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; stage/lib/psi4/driver/procrouting/__init__.py:29: in <module>; from .proc_table import procedures, hooks, energy_only_methods, integrated_basis_methods; stage/lib/psi4/driver/procrouting/proc_table.py:34: in <module>; from . import sapt; stage/lib/psi4/driver/procrouting/sapt/__init__.py:29: in <module>; from .sapt_proc import run_sapt_dft, sapt_dft, run_sf_sapt; stage/lib/psi4/driver/procrouting",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342
https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:1804,Testability,test,tests,1804,"gle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi4.driver.molutil import *; stage/lib/psi4/driver/molutil.py:36: in <module>; from psi4.driver.p4util import temp_circular_import_blocker; stage/lib/psi4/driver/p4util/__init__.py:35: in <module>; from .fcidump import *; stage/lib/psi4/driver/p4util/fcidump.py:43: in <module>; from psi4.driver.procrouting.proc_util import check_iwl_file_from_scf_type; stage/lib/psi4/driver/procrouting/__init__.py:29: in <module>; from .proc_table import procedures, hooks, energy_only_methods, integrated_basis_methods; stage/lib/psi4/driver/procrouting/proc_table.py:34: in <module>; from . import sapt; stage/lib/psi4/driver/procrouting/sapt/__init__.py:29: in <module>; from .sapt_proc import run_sapt_dft, sapt_dft, run_sf_sapt; stage/lib/psi4/driver/procrouting/sapt/sapt_proc.py:36: in <module>; from psi4.driver.procroutin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342
https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:4860,Testability,test,test,4860,"c_util.py:37: in <module>; from psi4.driver.procrouting.dft import functionals, build_superfunctional_from_dictionary; stage/lib/psi4/driver/procrouting/dft/__init__.py:29: in <module>; from .superfunctionals import build_superfunctional; stage/lib/psi4/driver/procrouting/dft/superfunctionals.py:37: in <module>; from . import dft_builder; stage/lib/psi4/driver/procrouting/dft/dft_builder.py:86: in <module>; from qcengine.programs.empirical_dispersion_resources import dashcoeff, get_dispersion_aliases, new_d4_api; stage/lib/qcengine/__init__.py:6: in <module>; from .compute import compute, compute_procedure; stage/lib/qcengine/compute.py:11: in <module>; from .procedures import get_procedure; stage/lib/qcengine/procedures/__init__.py:1: in <module>; from .base import get_procedure, list_all_procedures, list_available_procedures, register_procedure; stage/lib/qcengine/procedures/base.py:10: in <module>; from .nwchem_opt import NWChemDriverProcedure; stage/lib/qcengine/procedures/nwchem_opt/__init__.py:7: in <module>; from qcengine.procedures.nwchem_opt.harvester import harvest_as_atomic_result; stage/lib/qcengine/procedures/nwchem_opt/harvester.py:8: in <module>; from qcengine.programs.nwchem.harvester import harvest_outfile_pass; stage/lib/qcengine/programs/__init__.py:1: in <module>; from .base import get_program, list_all_programs, list_available_programs, register_program, unregister_program; stage/lib/qcengine/programs/base.py:11: in <module>; from .dftd3 import DFTD3Harness; stage/lib/qcengine/programs/dftd3.py:19: in <module>; from . import empirical_dispersion_resources; stage/lib/qcengine/programs/empirical_dispersion_resources.py:906: in <module>; from dftd4 import __version__ as d4_version; E ImportError: cannot import name '__version__' from 'dftd4' (unknown location); ================================================================================ short test summary info ================================================================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342
https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348:335,Availability,error,errors,335,"I've tweaked the https://github.com/MolSSI/QCEngine/pull/393/files PR slightly, and I think it's ready for merge. Here, I've added a few tests (b97-3c, r2scan2-3c, and r2scan2-d4) and tried them with several combinations of old/new gcp, old/new dftd3, and 3.4/3.5 dftd4, so I'm semi-confident they run when they ought and give helpful errors when they can't. The tests I added cover energy and gradient, but they're purely internal -- no reference values from a separate implementation. What further tests are wanted?. The labels/selectors for pytest should be in good shape (that is, tests will skip if wrong gcp/d3/d4 detected). CTest selectors aren't in good shape, so if you get helpful ""can't run"" errors, that's expected; wrong values aren't expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348
https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348:703,Availability,error,errors,703,"I've tweaked the https://github.com/MolSSI/QCEngine/pull/393/files PR slightly, and I think it's ready for merge. Here, I've added a few tests (b97-3c, r2scan2-3c, and r2scan2-d4) and tried them with several combinations of old/new gcp, old/new dftd3, and 3.4/3.5 dftd4, so I'm semi-confident they run when they ought and give helpful errors when they can't. The tests I added cover energy and gradient, but they're purely internal -- no reference values from a separate implementation. What further tests are wanted?. The labels/selectors for pytest should be in good shape (that is, tests will skip if wrong gcp/d3/d4 detected). CTest selectors aren't in good shape, so if you get helpful ""can't run"" errors, that's expected; wrong values aren't expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348
https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348:383,Energy Efficiency,energy,energy,383,"I've tweaked the https://github.com/MolSSI/QCEngine/pull/393/files PR slightly, and I think it's ready for merge. Here, I've added a few tests (b97-3c, r2scan2-3c, and r2scan2-d4) and tried them with several combinations of old/new gcp, old/new dftd3, and 3.4/3.5 dftd4, so I'm semi-confident they run when they ought and give helpful errors when they can't. The tests I added cover energy and gradient, but they're purely internal -- no reference values from a separate implementation. What further tests are wanted?. The labels/selectors for pytest should be in good shape (that is, tests will skip if wrong gcp/d3/d4 detected). CTest selectors aren't in good shape, so if you get helpful ""can't run"" errors, that's expected; wrong values aren't expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348
https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348:620,Safety,detect,detected,620,"I've tweaked the https://github.com/MolSSI/QCEngine/pull/393/files PR slightly, and I think it's ready for merge. Here, I've added a few tests (b97-3c, r2scan2-3c, and r2scan2-d4) and tried them with several combinations of old/new gcp, old/new dftd3, and 3.4/3.5 dftd4, so I'm semi-confident they run when they ought and give helpful errors when they can't. The tests I added cover energy and gradient, but they're purely internal -- no reference values from a separate implementation. What further tests are wanted?. The labels/selectors for pytest should be in good shape (that is, tests will skip if wrong gcp/d3/d4 detected). CTest selectors aren't in good shape, so if you get helpful ""can't run"" errors, that's expected; wrong values aren't expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348
https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348:137,Testability,test,tests,137,"I've tweaked the https://github.com/MolSSI/QCEngine/pull/393/files PR slightly, and I think it's ready for merge. Here, I've added a few tests (b97-3c, r2scan2-3c, and r2scan2-d4) and tried them with several combinations of old/new gcp, old/new dftd3, and 3.4/3.5 dftd4, so I'm semi-confident they run when they ought and give helpful errors when they can't. The tests I added cover energy and gradient, but they're purely internal -- no reference values from a separate implementation. What further tests are wanted?. The labels/selectors for pytest should be in good shape (that is, tests will skip if wrong gcp/d3/d4 detected). CTest selectors aren't in good shape, so if you get helpful ""can't run"" errors, that's expected; wrong values aren't expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348
https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348:363,Testability,test,tests,363,"I've tweaked the https://github.com/MolSSI/QCEngine/pull/393/files PR slightly, and I think it's ready for merge. Here, I've added a few tests (b97-3c, r2scan2-3c, and r2scan2-d4) and tried them with several combinations of old/new gcp, old/new dftd3, and 3.4/3.5 dftd4, so I'm semi-confident they run when they ought and give helpful errors when they can't. The tests I added cover energy and gradient, but they're purely internal -- no reference values from a separate implementation. What further tests are wanted?. The labels/selectors for pytest should be in good shape (that is, tests will skip if wrong gcp/d3/d4 detected). CTest selectors aren't in good shape, so if you get helpful ""can't run"" errors, that's expected; wrong values aren't expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348
https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348:500,Testability,test,tests,500,"I've tweaked the https://github.com/MolSSI/QCEngine/pull/393/files PR slightly, and I think it's ready for merge. Here, I've added a few tests (b97-3c, r2scan2-3c, and r2scan2-d4) and tried them with several combinations of old/new gcp, old/new dftd3, and 3.4/3.5 dftd4, so I'm semi-confident they run when they ought and give helpful errors when they can't. The tests I added cover energy and gradient, but they're purely internal -- no reference values from a separate implementation. What further tests are wanted?. The labels/selectors for pytest should be in good shape (that is, tests will skip if wrong gcp/d3/d4 detected). CTest selectors aren't in good shape, so if you get helpful ""can't run"" errors, that's expected; wrong values aren't expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348
https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348:585,Testability,test,tests,585,"I've tweaked the https://github.com/MolSSI/QCEngine/pull/393/files PR slightly, and I think it's ready for merge. Here, I've added a few tests (b97-3c, r2scan2-3c, and r2scan2-d4) and tried them with several combinations of old/new gcp, old/new dftd3, and 3.4/3.5 dftd4, so I'm semi-confident they run when they ought and give helpful errors when they can't. The tests I added cover energy and gradient, but they're purely internal -- no reference values from a separate implementation. What further tests are wanted?. The labels/selectors for pytest should be in good shape (that is, tests will skip if wrong gcp/d3/d4 detected). CTest selectors aren't in good shape, so if you get helpful ""can't run"" errors, that's expected; wrong values aren't expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348
https://github.com/psi4/psi4/pull/2842#issuecomment-1732451176:132,Testability,test,tests,132,"Hi folks - I'd like to help with this, although I'm not familiar with the psi4 code internals. Do you need reference values for the tests? (on what systems?). I'm wondering if the gcp part of r2SCAN-3c would affect the results in any test with a single molecule; do we need something like a water dimer?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1732451176
https://github.com/psi4/psi4/pull/2842#issuecomment-1732451176:234,Testability,test,test,234,"Hi folks - I'd like to help with this, although I'm not familiar with the psi4 code internals. Do you need reference values for the tests? (on what systems?). I'm wondering if the gcp part of r2SCAN-3c would affect the results in any test with a single molecule; do we need something like a water dimer?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1732451176
https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854:359,Availability,down,downloads,359,"Thanks for your interest and the offer, @aizvorski. Looking back over this, the necessary QCEngine has now been released, so it looks like my first steps are updating that CI and limiting Libxc to v6 so the functional definitions can be simplified. Certainly intermolecular tests are desirable. There's some ref values here http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN55/functional/r2SCAN-3c.html but largely they need hunting down in either papers or an independent implementation. I like S22 but anything independent will do. Then Susi had some basis set comments that I haven't looked into yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854
https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854:439,Availability,down,down,439,"Thanks for your interest and the offer, @aizvorski. Looking back over this, the necessary QCEngine has now been released, so it looks like my first steps are updating that CI and limiting Libxc to v6 so the functional definitions can be simplified. Certainly intermolecular tests are desirable. There's some ref values here http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN55/functional/r2SCAN-3c.html but largely they need hunting down in either papers or an independent implementation. I like S22 but anything independent will do. Then Susi had some basis set comments that I haven't looked into yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854
https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854:112,Deployability,release,released,112,"Thanks for your interest and the offer, @aizvorski. Looking back over this, the necessary QCEngine has now been released, so it looks like my first steps are updating that CI and limiting Libxc to v6 so the functional definitions can be simplified. Certainly intermolecular tests are desirable. There's some ref values here http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN55/functional/r2SCAN-3c.html but largely they need hunting down in either papers or an independent implementation. I like S22 but anything independent will do. Then Susi had some basis set comments that I haven't looked into yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854
https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854:274,Testability,test,tests,274,"Thanks for your interest and the offer, @aizvorski. Looking back over this, the necessary QCEngine has now been released, so it looks like my first steps are updating that CI and limiting Libxc to v6 so the functional definitions can be simplified. Certainly intermolecular tests are desirable. There's some ref values here http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN55/functional/r2SCAN-3c.html but largely they need hunting down in either papers or an independent implementation. I like S22 but anything independent will do. Then Susi had some basis set comments that I haven't looked into yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854
https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854:237,Usability,simpl,simplified,237,"Thanks for your interest and the offer, @aizvorski. Looking back over this, the necessary QCEngine has now been released, so it looks like my first steps are updating that CI and limiting Libxc to v6 so the functional definitions can be simplified. Certainly intermolecular tests are desirable. There's some ref values here http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN55/functional/r2SCAN-3c.html but largely they need hunting down in either papers or an independent implementation. I like S22 but anything independent will do. Then Susi had some basis set comments that I haven't looked into yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1732492854
https://github.com/psi4/psi4/pull/2842#issuecomment-1830386611:178,Availability,avail,available,178,"@aizvorski or @hokru (or anyone), did you happen to have on hand independent ref values for any of these five fctls, particularly r2SCAN-3C & B97-3C ? (Note that c-f dftd4 isn't available for py312, so I'll likely need to adjust the CI to improve testing coverage. If this makes it into v1.9, I'm good with dropping support for dftd3 classic and the psi4 build of dftd4. Also, the plan is libxc=6, dropping v5 support.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1830386611
https://github.com/psi4/psi4/pull/2842#issuecomment-1830386611:247,Testability,test,testing,247,"@aizvorski or @hokru (or anyone), did you happen to have on hand independent ref values for any of these five fctls, particularly r2SCAN-3C & B97-3C ? (Note that c-f dftd4 isn't available for py312, so I'll likely need to adjust the CI to improve testing coverage. If this makes it into v1.9, I'm good with dropping support for dftd3 classic and the psi4 build of dftd4. Also, the plan is libxc=6, dropping v5 support.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1830386611
https://github.com/psi4/psi4/pull/2842#issuecomment-1837441075:138,Testability,test,test-skipping,138,"This adds external comparisons for the r2SCAN hybrids, r2scan-3c, B97-3c. It also implements wB97X-3c. I think it's good to go. (well, CI/test-skipping may yet need tweaks.) But @susilehtola or @hokru might want to look it over.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1837441075
https://github.com/psi4/psi4/pull/2845#issuecomment-1407771245:214,Testability,test,testsuite,214,"It's not `np.float` but `np.double`, but shouldn't https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L540 be treated similarly, or is that not relevant (or maybe just not exercised by the testsuite)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2845#issuecomment-1407771245
https://github.com/psi4/psi4/issues/2846#issuecomment-1378895552:66,Testability,benchmark,benchmarking,66,"Thanks for the investigation. In that case, this is a question of benchmarking the extra zeroing versus not doing things in a loop...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2846#issuecomment-1378895552
https://github.com/psi4/psi4/issues/2847#issuecomment-1378878929:366,Availability,error,error,366,"Hi, I'm one of the core developers for Psi. One of my personal objectives for this year is to _replace_ our current I/O system, which has not been significantly redesigned since its original creation in the '90s. While it fulfilled its original design goals of simplifying the API compared to its predecessor, its _steep learning curve_ and _difficult to understand error messages_ are obstacles to continued Psi development, given that our graduate student-led development inherently has high turnover. I can tell you now that your project is of immediate interest. I'll look over the project in detail and have more detailed thoughts for you by this time next week.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1378878929
https://github.com/psi4/psi4/issues/2847#issuecomment-1378878929:261,Usability,simpl,simplifying,261,"Hi, I'm one of the core developers for Psi. One of my personal objectives for this year is to _replace_ our current I/O system, which has not been significantly redesigned since its original creation in the '90s. While it fulfilled its original design goals of simplifying the API compared to its predecessor, its _steep learning curve_ and _difficult to understand error messages_ are obstacles to continued Psi development, given that our graduate student-led development inherently has high turnover. I can tell you now that your project is of immediate interest. I'll look over the project in detail and have more detailed thoughts for you by this time next week.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1378878929
https://github.com/psi4/psi4/issues/2847#issuecomment-1378878929:321,Usability,learn,learning,321,"Hi, I'm one of the core developers for Psi. One of my personal objectives for this year is to _replace_ our current I/O system, which has not been significantly redesigned since its original creation in the '90s. While it fulfilled its original design goals of simplifying the API compared to its predecessor, its _steep learning curve_ and _difficult to understand error messages_ are obstacles to continued Psi development, given that our graduate student-led development inherently has high turnover. I can tell you now that your project is of immediate interest. I'll look over the project in detail and have more detailed thoughts for you by this time next week.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1378878929
https://github.com/psi4/psi4/issues/2847#issuecomment-1379266385:49,Availability,error,error,49,"Glad to hear that we are right on time :-) . The error handling is something central for us too as we aimed to make trexio user-friendly. Btw, if you notice something needed for Psi4 which is currently missing in the trexio format - feel free to open an issue in the repo or ping me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1379266385
https://github.com/psi4/psi4/issues/2847#issuecomment-1379266385:275,Availability,ping,ping,275,"Glad to hear that we are right on time :-) . The error handling is something central for us too as we aimed to make trexio user-friendly. Btw, if you notice something needed for Psi4 which is currently missing in the trexio format - feel free to open an issue in the repo or ping me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1379266385
https://github.com/psi4/psi4/issues/2847#issuecomment-1379266385:123,Usability,user-friendly,user-friendly,123,"Glad to hear that we are right on time :-) . The error handling is something central for us too as we aimed to make trexio user-friendly. Btw, if you notice something needed for Psi4 which is currently missing in the trexio format - feel free to open an issue in the repo or ping me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1379266385
https://github.com/psi4/psi4/issues/2847#issuecomment-1380171044:269,Performance,perform,perform,269,"Hi!; I am also a developer of TREXIO, and of the quantum package software. In quantum package, we have the ability to import/export data from TREXIO files, and we use it to export wave functions for QMC codes, one- and two-body RDMs to send them to the GammCor code to perform SAPT calculations, and we export integrals in TREXIO to perform FCIQMC calculations with NECI. It would be nice for us to also be able to exchange data with Psi4 (in the two directions).; I am also willing to help if needed!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1380171044
https://github.com/psi4/psi4/issues/2847#issuecomment-1380171044:333,Performance,perform,perform,333,"Hi!; I am also a developer of TREXIO, and of the quantum package software. In quantum package, we have the ability to import/export data from TREXIO files, and we use it to export wave functions for QMC codes, one- and two-body RDMs to send them to the GammCor code to perform SAPT calculations, and we export integrals in TREXIO to perform FCIQMC calculations with NECI. It would be nice for us to also be able to exchange data with Psi4 (in the two directions).; I am also willing to help if needed!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1380171044
https://github.com/psi4/psi4/issues/2847#issuecomment-1387486579:41,Modifiability,extend,extended,41,"First batch of questions:. Can TREXIO be extended to support other C++ types, such as `complex` or `double`?; If a section has no data, e.g., Psi doesn't use a cell or periodic boundary calculations, I assume that consumes no memory?; Is there a way for us to store an intermediate with an arbitrary name? For example, let's say that we have a coupled cluster code that needs to store on disk not only the T2 amplitudes but an amplitude called W. Can we do that?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1387486579
https://github.com/psi4/psi4/issues/2847#issuecomment-1387505470:40,Modifiability,extend,extended,40,"Hi @JonathonMisiewicz . > Can TREXIO be extended to support other C++ types, such as complex or double?. `double` type is fully supported (it is the default for floats or can be explicitly accessed by using the `_64` suffix in the API). In fact, we fully support 32- and 64-bit integers and floats as well as strings and arrays of strings. The `complex` type is supported implicitly, namely the real and imaginary parts can be written in two independent calls to the TREXIO API. > If a section has no data, e.g., Psi doesn't use a cell or periodic boundary calculations, I assume that consumes no memory?. Exactly, it is up to the user to decide which data to store. > Is there a way for us to store an intermediate with an arbitrary name? For example, let's say that we have a coupled cluster code that needs to store on disk not only the T2 amplitudes but an amplitude called W. Can we do that?. I think you would need to modify a format for that, only items listed in the `trex.org` (`trex.json`) can be written since the source code of the library is auto-generated from the format specification. @scemama please correct me if I am wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1387505470
https://github.com/psi4/psi4/issues/2847#issuecomment-1387505470:189,Security,access,accessed,189,"Hi @JonathonMisiewicz . > Can TREXIO be extended to support other C++ types, such as complex or double?. `double` type is fully supported (it is the default for floats or can be explicitly accessed by using the `_64` suffix in the API). In fact, we fully support 32- and 64-bit integers and floats as well as strings and arrays of strings. The `complex` type is supported implicitly, namely the real and imaginary parts can be written in two independent calls to the TREXIO API. > If a section has no data, e.g., Psi doesn't use a cell or periodic boundary calculations, I assume that consumes no memory?. Exactly, it is up to the user to decide which data to store. > Is there a way for us to store an intermediate with an arbitrary name? For example, let's say that we have a coupled cluster code that needs to store on disk not only the T2 amplitudes but an amplitude called W. Can we do that?. I think you would need to modify a format for that, only items listed in the `trex.org` (`trex.json`) can be written since the source code of the library is auto-generated from the format specification. @scemama please correct me if I am wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1387505470
https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:1378,Deployability,integrat,integrated,1378,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906
https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:1378,Integrability,integrat,integrated,1378,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906
https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:453,Modifiability,extend,extend,453,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906
https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:1175,Modifiability,extend,extend,1175,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906
https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:1318,Modifiability,extend,extend,1318,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906
https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:1409,Modifiability,config,configure,1409,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906
https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:1522,Modifiability,extend,extend,1522,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906
https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:901,Safety,detect,detected,901,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906
https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:968,Security,access,access,968,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906
https://github.com/psi4/psi4/issues/2847#issuecomment-1396175430:59,Integrability,depend,dependencies,59,"Thanks for the response. Psi is no stranger to forking our dependencies to fit our needs. Remember that one of our requirements is ease of use. For example, let's take our `dfmp2` code. We need to store over 18 different intermediates on disk, most of which are meaningless outside of the context of DFMP2. Needing to have a JSON file listing all intermediates, and making sure that the intermediate names of different modules don't clash, are problems we don't have in the current code, and introducing those make ease-of-use more complicated. That said, I see the merit in having a unified listing of all intermediates, at least on a per-module level. I'll think more about this, and of course, I can only speak for myself, not all Psi core developers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396175430
https://github.com/psi4/psi4/issues/2847#issuecomment-1396201059:55,Integrability,wrap,wrapper,55,"OK, I understand. In that case, maybe writing your own wrapper around HDF5 for temporary files would be a better option, because you would be able to pass strings to functions to specify the data you manipulate, while in TREXIO we have different functions for different data. So creating a new intermediate in the code would be straightforward.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396201059
https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466:191,Availability,avail,available,191,"Just to make sure I understand how the library works:; During the installation procedure, there will be a `trex.json` file added. The contents of this file change the _groups_ and _variables available within each group_. (For Psi devs, this is equivalent to libpsio file and libpsio entry name.) So by editing the file and then re-compiling (`make`, `make check` and then `make install`?), we can edit the entries available to `trexio`. Is that all right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466
https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466:414,Availability,avail,available,414,"Just to make sure I understand how the library works:; During the installation procedure, there will be a `trex.json` file added. The contents of this file change the _groups_ and _variables available within each group_. (For Psi devs, this is equivalent to libpsio file and libpsio entry name.) So by editing the file and then re-compiling (`make`, `make check` and then `make install`?), we can edit the entries available to `trexio`. Is that all right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466
https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466:66,Deployability,install,installation,66,"Just to make sure I understand how the library works:; During the installation procedure, there will be a `trex.json` file added. The contents of this file change the _groups_ and _variables available within each group_. (For Psi devs, this is equivalent to libpsio file and libpsio entry name.) So by editing the file and then re-compiling (`make`, `make check` and then `make install`?), we can edit the entries available to `trexio`. Is that all right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466
https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466:378,Deployability,install,install,378,"Just to make sure I understand how the library works:; During the installation procedure, there will be a `trex.json` file added. The contents of this file change the _groups_ and _variables available within each group_. (For Psi devs, this is equivalent to libpsio file and libpsio entry name.) So by editing the file and then re-compiling (`make`, `make check` and then `make install`?), we can edit the entries available to `trexio`. Is that all right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397079466
https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918:334,Integrability,interface,interfaces,334,"What you say seems exact. Just to be sure: when you are in ""developer mode"" (you get the library from the GitHub repo, not the tar.gz), when you run `make` Emacs parses an org-mode file and creates a JSON from the tables. Then, this JSON file is read by a Python script to generate C functions and headers, and the Fortran and Python interfaces. The names of the functions are `trexio_<group>_write_<attribute>`. So you can edit the trex.org file to add extra info to the JSON. There are 2 possibilities:; 1. You create at the top of the file, just before the Metadata section a block like:; ```python; #+begin_src python :tangle trex.json; ""psi4mp2"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]],; ""t1"" : [ ""float"", [ ""mo.num"", ""mo.num"" ]],; },; ""psi4ccsd"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]]; },; #+end_src; ``` ; 2. Or you create a section in the Org-mode syntax like; ```text; * Psi4; This section documents the temporary arrays specific to psi4. ** DFMP2 (psi4dfmp2 group); Here, we specify the data for DFMP2.... [\; t = \sum_{ij} ...; \]; \[; W = \sum_{ijab} ...; \] . #+NAME: psi4dfmp2; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |; | ~t~ | ~float~ | ~(mo.num,mo.num)~ | t in the equation above |. #+CALL: json(data=psi4dfmp2, title=""psi4dfmp2""). ** CCSD (psi4ccsd group); Here, we specify the data for CCSD.... #+NAME: psi4ccsd; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |. #+CALL: json(data=psi4ccsd, title=""psi4ccsd"", last=1). ```; Now if in Emacs you execute ""Ctrl-C Ctrl-C"" when your cursor is on the line ""CALL:json ..."", it will automatically genera",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918
https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918:1159,Modifiability,Variab,Variable,1159,"ON file is read by a Python script to generate C functions and headers, and the Fortran and Python interfaces. The names of the functions are `trexio_<group>_write_<attribute>`. So you can edit the trex.org file to add extra info to the JSON. There are 2 possibilities:; 1. You create at the top of the file, just before the Metadata section a block like:; ```python; #+begin_src python :tangle trex.json; ""psi4mp2"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]],; ""t1"" : [ ""float"", [ ""mo.num"", ""mo.num"" ]],; },; ""psi4ccsd"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]]; },; #+end_src; ``` ; 2. Or you create a section in the Org-mode syntax like; ```text; * Psi4; This section documents the temporary arrays specific to psi4. ** DFMP2 (psi4dfmp2 group); Here, we specify the data for DFMP2.... [\; t = \sum_{ij} ...; \]; \[; W = \sum_{ijab} ...; \] . #+NAME: psi4dfmp2; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |; | ~t~ | ~float~ | ~(mo.num,mo.num)~ | t in the equation above |. #+CALL: json(data=psi4dfmp2, title=""psi4dfmp2""). ** CCSD (psi4ccsd group); Here, we specify the data for CCSD.... #+NAME: psi4ccsd; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |. #+CALL: json(data=psi4ccsd, title=""psi4ccsd"", last=1). ```; Now if in Emacs you execute ""Ctrl-C Ctrl-C"" when your cursor is on the line ""CALL:json ..."", it will automatically generate the JSON code from the data of the table and put it in the file, similarly to what happens when you are using a Jupyter Notebook and you evaluate a cell. Note: the `last=1` argument handles the presence/absence of a comma in the gen",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918
https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918:1589,Modifiability,Variab,Variable,1589," the JSON. There are 2 possibilities:; 1. You create at the top of the file, just before the Metadata section a block like:; ```python; #+begin_src python :tangle trex.json; ""psi4mp2"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]],; ""t1"" : [ ""float"", [ ""mo.num"", ""mo.num"" ]],; },; ""psi4ccsd"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]]; },; #+end_src; ``` ; 2. Or you create a section in the Org-mode syntax like; ```text; * Psi4; This section documents the temporary arrays specific to psi4. ** DFMP2 (psi4dfmp2 group); Here, we specify the data for DFMP2.... [\; t = \sum_{ij} ...; \]; \[; W = \sum_{ijab} ...; \] . #+NAME: psi4dfmp2; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |; | ~t~ | ~float~ | ~(mo.num,mo.num)~ | t in the equation above |. #+CALL: json(data=psi4dfmp2, title=""psi4dfmp2""). ** CCSD (psi4ccsd group); Here, we specify the data for CCSD.... #+NAME: psi4ccsd; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |. #+CALL: json(data=psi4ccsd, title=""psi4ccsd"", last=1). ```; Now if in Emacs you execute ""Ctrl-C Ctrl-C"" when your cursor is on the line ""CALL:json ..."", it will automatically generate the JSON code from the data of the table and put it in the file, similarly to what happens when you are using a Jupyter Notebook and you evaluate a cell. Note: the `last=1` argument handles the presence/absence of a comma in the generated JSON. So `last=1` should be present only in the very last JSON block of the file. ; When you compile the library, this will generate the functions `trexio_[read|write|has]_psi4mp2_w` and `trexio_[read|write|has]_psi4ccsd_w`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918
https://github.com/psi4/psi4/issues/2847#issuecomment-1409366515:138,Modifiability,variab,variable,138,"Psi and TREXIO use the word ""file"" differently, so let me reword. Right now, a user can do the equivalent of saying to save a matrix as a variable in a group, as long as the _group_ is pre-defined. The user can create a completely new variable in an existing group if they so choose. Is there a way for us to retain that functionality with TREXIO?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1409366515
https://github.com/psi4/psi4/issues/2847#issuecomment-1409366515:235,Modifiability,variab,variable,235,"Psi and TREXIO use the word ""file"" differently, so let me reword. Right now, a user can do the equivalent of saying to save a matrix as a variable in a group, as long as the _group_ is pre-defined. The user can create a completely new variable in an existing group if they so choose. Is there a way for us to retain that functionality with TREXIO?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1409366515
https://github.com/psi4/psi4/issues/2847#issuecomment-1410051003:194,Modifiability,variab,variable,194,"Now I see, thanks. No, this is not possible with the current version of trexio which is tightly coupled to the corresponding format defined in `trex.json`. There is no way to write an arbitrary variable until it's defined in the format (we have internal consistency checks for the sizes of the matrices for example in order to prevent inconsistent data). . @scemama We could probably add a functionality allowing to write an arbitrary variable in e.g. ""external"" group via generic `trexio_write|read_(file, variable-str, datatype-str, size-max)`. I can implement it easily for the HDF5 back end but TEXT one is more tricky.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1410051003
https://github.com/psi4/psi4/issues/2847#issuecomment-1410051003:435,Modifiability,variab,variable,435,"Now I see, thanks. No, this is not possible with the current version of trexio which is tightly coupled to the corresponding format defined in `trex.json`. There is no way to write an arbitrary variable until it's defined in the format (we have internal consistency checks for the sizes of the matrices for example in order to prevent inconsistent data). . @scemama We could probably add a functionality allowing to write an arbitrary variable in e.g. ""external"" group via generic `trexio_write|read_(file, variable-str, datatype-str, size-max)`. I can implement it easily for the HDF5 back end but TEXT one is more tricky.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1410051003
https://github.com/psi4/psi4/issues/2847#issuecomment-1410051003:507,Modifiability,variab,variable-str,507,"Now I see, thanks. No, this is not possible with the current version of trexio which is tightly coupled to the corresponding format defined in `trex.json`. There is no way to write an arbitrary variable until it's defined in the format (we have internal consistency checks for the sizes of the matrices for example in order to prevent inconsistent data). . @scemama We could probably add a functionality allowing to write an arbitrary variable in e.g. ""external"" group via generic `trexio_write|read_(file, variable-str, datatype-str, size-max)`. I can implement it easily for the HDF5 back end but TEXT one is more tricky.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1410051003
https://github.com/psi4/psi4/issues/2847#issuecomment-1429418466:83,Energy Efficiency,adapt,adapted,83,"Hi @JonathonMisiewicz,; Have you heard about the ESCDF library? It might be better adapted to what you want to do. It is also based on HDF5, but it is more low-level and flexible than TREXIO. See https://th.fhi-berlin.mpg.de/site/uploads/Publications/Oliveira_The_CECAM_electronic.pdf section G page 153.; I have never tried it, so I have no opinion on how easy it is to use.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1429418466
https://github.com/psi4/psi4/issues/2847#issuecomment-1429418466:83,Modifiability,adapt,adapted,83,"Hi @JonathonMisiewicz,; Have you heard about the ESCDF library? It might be better adapted to what you want to do. It is also based on HDF5, but it is more low-level and flexible than TREXIO. See https://th.fhi-berlin.mpg.de/site/uploads/Publications/Oliveira_The_CECAM_electronic.pdf section G page 153.; I have never tried it, so I have no opinion on how easy it is to use.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1429418466
https://github.com/psi4/psi4/issues/2847#issuecomment-1429418466:170,Modifiability,flexible,flexible,170,"Hi @JonathonMisiewicz,; Have you heard about the ESCDF library? It might be better adapted to what you want to do. It is also based on HDF5, but it is more low-level and flexible than TREXIO. See https://th.fhi-berlin.mpg.de/site/uploads/Publications/Oliveira_The_CECAM_electronic.pdf section G page 153.; I have never tried it, so I have no opinion on how easy it is to use.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1429418466
https://github.com/psi4/psi4/issues/2847#issuecomment-1538512969:507,Testability,test,test,507,"@JonathonMisiewicz @scemama I finally got some time for the proof-of-concept implementation of generic I/O in TREXIO. Only numerical (int/float) arrays for now and only for the HDF5 back end, but this should be enough to get an idea whether TREXIO is a suitable candidate for the I/O back end of Psi4. . The PR for the associated `add-external-group` branch is here: https://github.com/TREX-CoE/trexio/pull/117. The API calls are slight different from the conventional TREXIO API. A few examples are:. - [C test](https://github.com/TREX-CoE/trexio/blob/8ac64c2a750cc997dd96afb2efe7035ba89043f1/tests/io_dset_external_hdf5.c); - [Python test](https://github.com/TREX-CoE/trexio/blob/8ac64c2a750cc997dd96afb2efe7035ba89043f1/python/test/test_api.py#L152). Let me know if you have any questions or comments.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1538512969
https://github.com/psi4/psi4/issues/2847#issuecomment-1538512969:594,Testability,test,tests,594,"@JonathonMisiewicz @scemama I finally got some time for the proof-of-concept implementation of generic I/O in TREXIO. Only numerical (int/float) arrays for now and only for the HDF5 back end, but this should be enough to get an idea whether TREXIO is a suitable candidate for the I/O back end of Psi4. . The PR for the associated `add-external-group` branch is here: https://github.com/TREX-CoE/trexio/pull/117. The API calls are slight different from the conventional TREXIO API. A few examples are:. - [C test](https://github.com/TREX-CoE/trexio/blob/8ac64c2a750cc997dd96afb2efe7035ba89043f1/tests/io_dset_external_hdf5.c); - [Python test](https://github.com/TREX-CoE/trexio/blob/8ac64c2a750cc997dd96afb2efe7035ba89043f1/python/test/test_api.py#L152). Let me know if you have any questions or comments.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1538512969
https://github.com/psi4/psi4/issues/2847#issuecomment-1538512969:636,Testability,test,test,636,"@JonathonMisiewicz @scemama I finally got some time for the proof-of-concept implementation of generic I/O in TREXIO. Only numerical (int/float) arrays for now and only for the HDF5 back end, but this should be enough to get an idea whether TREXIO is a suitable candidate for the I/O back end of Psi4. . The PR for the associated `add-external-group` branch is here: https://github.com/TREX-CoE/trexio/pull/117. The API calls are slight different from the conventional TREXIO API. A few examples are:. - [C test](https://github.com/TREX-CoE/trexio/blob/8ac64c2a750cc997dd96afb2efe7035ba89043f1/tests/io_dset_external_hdf5.c); - [Python test](https://github.com/TREX-CoE/trexio/blob/8ac64c2a750cc997dd96afb2efe7035ba89043f1/python/test/test_api.py#L152). Let me know if you have any questions or comments.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1538512969
https://github.com/psi4/psi4/issues/2847#issuecomment-1538512969:730,Testability,test,test,730,"@JonathonMisiewicz @scemama I finally got some time for the proof-of-concept implementation of generic I/O in TREXIO. Only numerical (int/float) arrays for now and only for the HDF5 back end, but this should be enough to get an idea whether TREXIO is a suitable candidate for the I/O back end of Psi4. . The PR for the associated `add-external-group` branch is here: https://github.com/TREX-CoE/trexio/pull/117. The API calls are slight different from the conventional TREXIO API. A few examples are:. - [C test](https://github.com/TREX-CoE/trexio/blob/8ac64c2a750cc997dd96afb2efe7035ba89043f1/tests/io_dset_external_hdf5.c); - [Python test](https://github.com/TREX-CoE/trexio/blob/8ac64c2a750cc997dd96afb2efe7035ba89043f1/python/test/test_api.py#L152). Let me know if you have any questions or comments.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1538512969
https://github.com/psi4/psi4/pull/2848#issuecomment-1497957071:6,Usability,clear,clear,6,"To be clear, `AO_core_` controls which subalgorithm is used? If so, that should be mentioned in a comment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2848#issuecomment-1497957071
https://github.com/psi4/psi4/pull/2848#issuecomment-1497988883:8,Usability,clear,clear,8,"> To be clear, `AO_core_` controls which subalgorithm is used? If so, that should be mentioned in a comment. That's correct! `AO_core_ = true` means the in-core subalgorithm is used, while `AO_core_ = false` means the out-of-core subalgorithm is used. I added comments to clarify.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2848#issuecomment-1497988883
https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083:42,Availability,error,error,42,"I would consider not making VV10 throw an error, since it has negligible effects on the electron density. Najibi and Goerigk write in [doi:10.1021/acs.jctc.8b00842](https://doi.org/10.1021/acs.jctc.8b00842). > While in a strictest sense, energy calculations with vdW-DFAs should be carried out fully self-consistently, we demonstrate conclusively for a total of 11 methods that such a strategy only increases the computational time eﬀort without having any signiﬁcant eﬀect on energetic properties, electron densities, or orbital-energy diﬀerences. The recent analytical frequencies study by Feng, Liang and Head-Gordon in [arXiv:2208.14639](https://arxiv.org/abs/2208.14639) states. > The contribution of VV10 to simulating harmonic frequencies is shown to be small for small molecules but important for systems where weak interactions are important, such as water clusters. That manuscript does have analytical second derivatives, so I guess one could extend it to TDDFT as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083
https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083:238,Energy Efficiency,energy,energy,238,"I would consider not making VV10 throw an error, since it has negligible effects on the electron density. Najibi and Goerigk write in [doi:10.1021/acs.jctc.8b00842](https://doi.org/10.1021/acs.jctc.8b00842). > While in a strictest sense, energy calculations with vdW-DFAs should be carried out fully self-consistently, we demonstrate conclusively for a total of 11 methods that such a strategy only increases the computational time eﬀort without having any signiﬁcant eﬀect on energetic properties, electron densities, or orbital-energy diﬀerences. The recent analytical frequencies study by Feng, Liang and Head-Gordon in [arXiv:2208.14639](https://arxiv.org/abs/2208.14639) states. > The contribution of VV10 to simulating harmonic frequencies is shown to be small for small molecules but important for systems where weak interactions are important, such as water clusters. That manuscript does have analytical second derivatives, so I guess one could extend it to TDDFT as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083
https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083:530,Energy Efficiency,energy,energy,530,"I would consider not making VV10 throw an error, since it has negligible effects on the electron density. Najibi and Goerigk write in [doi:10.1021/acs.jctc.8b00842](https://doi.org/10.1021/acs.jctc.8b00842). > While in a strictest sense, energy calculations with vdW-DFAs should be carried out fully self-consistently, we demonstrate conclusively for a total of 11 methods that such a strategy only increases the computational time eﬀort without having any signiﬁcant eﬀect on energetic properties, electron densities, or orbital-energy diﬀerences. The recent analytical frequencies study by Feng, Liang and Head-Gordon in [arXiv:2208.14639](https://arxiv.org/abs/2208.14639) states. > The contribution of VV10 to simulating harmonic frequencies is shown to be small for small molecules but important for systems where weak interactions are important, such as water clusters. That manuscript does have analytical second derivatives, so I guess one could extend it to TDDFT as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083
https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083:954,Modifiability,extend,extend,954,"I would consider not making VV10 throw an error, since it has negligible effects on the electron density. Najibi and Goerigk write in [doi:10.1021/acs.jctc.8b00842](https://doi.org/10.1021/acs.jctc.8b00842). > While in a strictest sense, energy calculations with vdW-DFAs should be carried out fully self-consistently, we demonstrate conclusively for a total of 11 methods that such a strategy only increases the computational time eﬀort without having any signiﬁcant eﬀect on energetic properties, electron densities, or orbital-energy diﬀerences. The recent analytical frequencies study by Feng, Liang and Head-Gordon in [arXiv:2208.14639](https://arxiv.org/abs/2208.14639) states. > The contribution of VV10 to simulating harmonic frequencies is shown to be small for small molecules but important for systems where weak interactions are important, such as water clusters. That manuscript does have analytical second derivatives, so I guess one could extend it to TDDFT as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083
https://github.com/psi4/psi4/pull/2849#issuecomment-1380313699:150,Availability,error,error,150,"Psi has a mechanism to make VV10 a post-iteration correction. How about allowing stability analysis / TDDFT if VV10 is post-iterative, and raising an error otherwise, directing users to make VV10 post-iterative?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2849#issuecomment-1380313699
https://github.com/psi4/psi4/issues/2850#issuecomment-1380346948:203,Deployability,release,released,203,"@hmacdope happy to. I am currently working on a similar PR for r2scan-3c and others: https://github.com/psi4/psi4/pull/2842 you can have a look to get an idea what would be needed. Until the new ORCA is released we don't have good reference values for tests, but I was planning to write to the Grimme group.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2850#issuecomment-1380346948
https://github.com/psi4/psi4/issues/2850#issuecomment-1380346948:252,Testability,test,tests,252,"@hmacdope happy to. I am currently working on a similar PR for r2scan-3c and others: https://github.com/psi4/psi4/pull/2842 you can have a look to get an idea what would be needed. Until the new ORCA is released we don't have good reference values for tests, but I was planning to write to the Grimme group.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2850#issuecomment-1380346948
https://github.com/psi4/psi4/issues/2850#issuecomment-1831287726:22,Security,access,access,22,"Do you happen to have access to v5 ORCA, @annulen? My orca is quite old -- v3.6. If you could generate ref values for this system perhaps https://github.com/psi4/psi4/blob/master/psi4/share/psi4/databases/S22.py#L695-L708 (monoA, monoB, dimer), that'd be a great help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2850#issuecomment-1831287726
https://github.com/psi4/psi4/pull/2851#issuecomment-1441901797:150,Availability,avail,available,150,"I'll review later today. For now, I'll just say that I'm vehemently opposed to opening the first DLPNO-CCSD PR in Psi. I would much prefer a publicly available Psi4Numpy implementation first.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2851#issuecomment-1441901797
https://github.com/psi4/psi4/issues/2853#issuecomment-1387584061:150,Security,validat,validation,150,Konrad [suggests](http://forum.psicode.org/t/sapt-calculation/2698/2) the basis set should be flagged as not-containing-enough-basis-functions during validation.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2853#issuecomment-1387584061
https://github.com/psi4/psi4/issues/2853#issuecomment-1397353017:109,Usability,intuit,intuition,109,"Is there ever a legitimate reason for an atom to have fewer basis functions than it has active electrons? My intuition is no, but I don't want to attempt any code to enforce that before at least checking for reasons. @susilehtola",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2853#issuecomment-1397353017
https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933:462,Availability,error,error,462,"> Is there ever a legitimate reason for an atom to have fewer basis functions than it has active electrons? My intuition is no, but I don't want to attempt any code to enforce that before at least checking for reasons. On a purely mathematical ground, there is no reason not to allow calculations where some nuclei do not have any basis functions; after all, all that matters is the flexibility of the whole basis set. I would therefore recommend against a hard error here, or there should at least be a flag to control whether an error is raised or not. Not having sufficiently many basis functions to hold the electrons is, however, a major error and should always result in an error termination. Here, Ba is indeed given a 3s3p basis set, which has 12 spatial orbitals and can thereby hold 24 electrons, whereas Ba has 56 electrons. The error `Cannot set element 12 since there are only 12 elements` arises from exactly this; it seems that the size of the fragment basis is not checked, or not checked early enough!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933
https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933:531,Availability,error,error,531,"> Is there ever a legitimate reason for an atom to have fewer basis functions than it has active electrons? My intuition is no, but I don't want to attempt any code to enforce that before at least checking for reasons. On a purely mathematical ground, there is no reason not to allow calculations where some nuclei do not have any basis functions; after all, all that matters is the flexibility of the whole basis set. I would therefore recommend against a hard error here, or there should at least be a flag to control whether an error is raised or not. Not having sufficiently many basis functions to hold the electrons is, however, a major error and should always result in an error termination. Here, Ba is indeed given a 3s3p basis set, which has 12 spatial orbitals and can thereby hold 24 electrons, whereas Ba has 56 electrons. The error `Cannot set element 12 since there are only 12 elements` arises from exactly this; it seems that the size of the fragment basis is not checked, or not checked early enough!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933
https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933:643,Availability,error,error,643,"> Is there ever a legitimate reason for an atom to have fewer basis functions than it has active electrons? My intuition is no, but I don't want to attempt any code to enforce that before at least checking for reasons. On a purely mathematical ground, there is no reason not to allow calculations where some nuclei do not have any basis functions; after all, all that matters is the flexibility of the whole basis set. I would therefore recommend against a hard error here, or there should at least be a flag to control whether an error is raised or not. Not having sufficiently many basis functions to hold the electrons is, however, a major error and should always result in an error termination. Here, Ba is indeed given a 3s3p basis set, which has 12 spatial orbitals and can thereby hold 24 electrons, whereas Ba has 56 electrons. The error `Cannot set element 12 since there are only 12 elements` arises from exactly this; it seems that the size of the fragment basis is not checked, or not checked early enough!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933
https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933:680,Availability,error,error,680,"> Is there ever a legitimate reason for an atom to have fewer basis functions than it has active electrons? My intuition is no, but I don't want to attempt any code to enforce that before at least checking for reasons. On a purely mathematical ground, there is no reason not to allow calculations where some nuclei do not have any basis functions; after all, all that matters is the flexibility of the whole basis set. I would therefore recommend against a hard error here, or there should at least be a flag to control whether an error is raised or not. Not having sufficiently many basis functions to hold the electrons is, however, a major error and should always result in an error termination. Here, Ba is indeed given a 3s3p basis set, which has 12 spatial orbitals and can thereby hold 24 electrons, whereas Ba has 56 electrons. The error `Cannot set element 12 since there are only 12 elements` arises from exactly this; it seems that the size of the fragment basis is not checked, or not checked early enough!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933
https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933:840,Availability,error,error,840,"> Is there ever a legitimate reason for an atom to have fewer basis functions than it has active electrons? My intuition is no, but I don't want to attempt any code to enforce that before at least checking for reasons. On a purely mathematical ground, there is no reason not to allow calculations where some nuclei do not have any basis functions; after all, all that matters is the flexibility of the whole basis set. I would therefore recommend against a hard error here, or there should at least be a flag to control whether an error is raised or not. Not having sufficiently many basis functions to hold the electrons is, however, a major error and should always result in an error termination. Here, Ba is indeed given a 3s3p basis set, which has 12 spatial orbitals and can thereby hold 24 electrons, whereas Ba has 56 electrons. The error `Cannot set element 12 since there are only 12 elements` arises from exactly this; it seems that the size of the fragment basis is not checked, or not checked early enough!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933
https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933:111,Usability,intuit,intuition,111,"> Is there ever a legitimate reason for an atom to have fewer basis functions than it has active electrons? My intuition is no, but I don't want to attempt any code to enforce that before at least checking for reasons. On a purely mathematical ground, there is no reason not to allow calculations where some nuclei do not have any basis functions; after all, all that matters is the flexibility of the whole basis set. I would therefore recommend against a hard error here, or there should at least be a flag to control whether an error is raised or not. Not having sufficiently many basis functions to hold the electrons is, however, a major error and should always result in an error termination. Here, Ba is indeed given a 3s3p basis set, which has 12 spatial orbitals and can thereby hold 24 electrons, whereas Ba has 56 electrons. The error `Cannot set element 12 since there are only 12 elements` arises from exactly this; it seems that the size of the fragment basis is not checked, or not checked early enough!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2853#issuecomment-1397449933
https://github.com/psi4/psi4/issues/2858#issuecomment-1397482999:106,Integrability,message,messages,106,"This job completes just fine for me on the current master, although with some entirely reasonable warning messages. What version of Psi4 are you using? My guess is that you're using 1.7 or earlier, and #2619 fixed this bug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2858#issuecomment-1397482999
https://github.com/psi4/psi4/pull/2859#issuecomment-1398810600:15,Availability,error,error,15,"I modified the error message from being about ""core electrons"" to just ""electrons."" Aside from that, @susilehtola's comments addressed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1398810600
https://github.com/psi4/psi4/pull/2859#issuecomment-1398810600:21,Integrability,message,message,21,"I modified the error message from being about ""core electrons"" to just ""electrons."" Aside from that, @susilehtola's comments addressed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1398810600
https://github.com/psi4/psi4/pull/2859#issuecomment-1399445500:17,Availability,error,error,17,"> I modified the error message from being about ""core electrons"" to just ""electrons."" . Ah, copy-paste error. You didn't accept the suggestions tho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1399445500
https://github.com/psi4/psi4/pull/2859#issuecomment-1399445500:103,Availability,error,error,103,"> I modified the error message from being about ""core electrons"" to just ""electrons."" . Ah, copy-paste error. You didn't accept the suggestions tho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1399445500
https://github.com/psi4/psi4/pull/2859#issuecomment-1399445500:23,Integrability,message,message,23,"> I modified the error message from being about ""core electrons"" to just ""electrons."" . Ah, copy-paste error. You didn't accept the suggestions tho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1399445500
https://github.com/psi4/psi4/pull/2859#issuecomment-1399466230:74,Availability,error,error,74,I wrote and pushed my own commit implementing them (fixing the copy-paste error). See the latest commit. I don't see an issue here.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1399466230
https://github.com/psi4/psi4/pull/2859#issuecomment-1403785234:76,Availability,error,error,76,> I wrote and pushed my own commit implementing them (fixing the copy-paste error). See the latest commit. I don't see an issue here. @susilehtola,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1403785234
https://github.com/psi4/psi4/pull/2859#issuecomment-1404913573:78,Availability,error,error,78,"> > I wrote and pushed my own commit implementing them (fixing the copy-paste error). See the latest commit. I don't see an issue here. In the future, please use ""accept suggestion"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1404913573
https://github.com/psi4/psi4/pull/2859#issuecomment-1404992356:80,Availability,error,error,80,"> > > I wrote and pushed my own commit implementing them (fixing the copy-paste error). See the latest commit. I don't see an issue here.; > ; > In the future, please use ""accept suggestion"". Not when I need to suggest a change to the suggestion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1404992356
https://github.com/psi4/psi4/pull/2861#issuecomment-1445140150:480,Performance,optimiz,optimization,480,">> the linux L2 is my local c-b, but mac and windows are from c-f staged-recipes. apparently any Hessian ERIs cause the Windows build to hang longer than the 6h Azure allows, so the W package is hessin-ints-less for TEI (I kept the onebody 2der). > Is this going to be a long-term state of affairs? I'd love to add more analytic hessians. It's likely to be semi-permanent for Windows. (Resolution would involve partitioning the 2nd deriv ERIs to a separate build group with lower optimization (as JMT does) and some good luck that they still compile quicker. Or petitioning to upload a hand-built package instead of relying on their CI build services, and I wouldn't like to do that before the L2 code is properly upstream.). But none of this is a block to new analytic hessians. Linux and Mac or anyone building L2 from source (with proper settings) is able to take adv of anal. H. And any new ones won't need extra work-around code, only a label for their tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2861#issuecomment-1445140150
https://github.com/psi4/psi4/pull/2861#issuecomment-1445140150:958,Testability,test,tests,958,">> the linux L2 is my local c-b, but mac and windows are from c-f staged-recipes. apparently any Hessian ERIs cause the Windows build to hang longer than the 6h Azure allows, so the W package is hessin-ints-less for TEI (I kept the onebody 2der). > Is this going to be a long-term state of affairs? I'd love to add more analytic hessians. It's likely to be semi-permanent for Windows. (Resolution would involve partitioning the 2nd deriv ERIs to a separate build group with lower optimization (as JMT does) and some good luck that they still compile quicker. Or petitioning to upload a hand-built package instead of relying on their CI build services, and I wouldn't like to do that before the L2 code is properly upstream.). But none of this is a block to new analytic hessians. Linux and Mac or anyone building L2 from source (with proper settings) is able to take adv of anal. H. And any new ones won't need extra work-around code, only a label for their tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2861#issuecomment-1445140150
https://github.com/psi4/psi4/pull/2861#issuecomment-1445475438:100,Deployability,toggle,toggles,100,"Thanks, @maxscheurer, centralized L2 initialize/finalize seems to work just fine. Now the orderings toggles only effect core.cc (L2 init), solidharmonics.cc (sh ordering), and points.cc (g2g ordering).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2861#issuecomment-1445475438
https://github.com/psi4/psi4/issues/2865#issuecomment-1407770502:191,Deployability,update,update,191,"Yes, I've been updating them as I notice them, and 2845 is the most recent. afaik, there aren't any outstanding expired types. Sorry about the poor commit message - it was part of a big docs update. If you're still working from v1.3, https://github.com/psi4/psi4/issues/2656#issuecomment-1299120848 may be useful patches, too. Thanks for working on keeping this old version going. On the moving-past-v1.3 front, I now have a version of Libint2 that has solid harmonic ordering runtime-switchable, so a single build could work for all open-source consumers, finally including psi. But that'll require upstream acceptance into L2 and new versions (maybe could get away with rebuild?) of the quantum chem packages. So nothing imminent, but some progress.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1407770502
https://github.com/psi4/psi4/issues/2865#issuecomment-1407770502:313,Deployability,patch,patches,313,"Yes, I've been updating them as I notice them, and 2845 is the most recent. afaik, there aren't any outstanding expired types. Sorry about the poor commit message - it was part of a big docs update. If you're still working from v1.3, https://github.com/psi4/psi4/issues/2656#issuecomment-1299120848 may be useful patches, too. Thanks for working on keeping this old version going. On the moving-past-v1.3 front, I now have a version of Libint2 that has solid harmonic ordering runtime-switchable, so a single build could work for all open-source consumers, finally including psi. But that'll require upstream acceptance into L2 and new versions (maybe could get away with rebuild?) of the quantum chem packages. So nothing imminent, but some progress.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1407770502
https://github.com/psi4/psi4/issues/2865#issuecomment-1407770502:155,Integrability,message,message,155,"Yes, I've been updating them as I notice them, and 2845 is the most recent. afaik, there aren't any outstanding expired types. Sorry about the poor commit message - it was part of a big docs update. If you're still working from v1.3, https://github.com/psi4/psi4/issues/2656#issuecomment-1299120848 may be useful patches, too. Thanks for working on keeping this old version going. On the moving-past-v1.3 front, I now have a version of Libint2 that has solid harmonic ordering runtime-switchable, so a single build could work for all open-source consumers, finally including psi. But that'll require upstream acceptance into L2 and new versions (maybe could get away with rebuild?) of the quantum chem packages. So nothing imminent, but some progress.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1407770502
https://github.com/psi4/psi4/issues/2865#issuecomment-1407791101:155,Testability,test,testsuite,155,"I had to add some additional hunks, for the no longer existing `datastructures.py` and `scipy_hungarian.py`, not sure those are the correct fixes, but the testsuite (as far as Debian runs it, 143 test cases at least) now passes except for a numerical issue in `matrix1` (`Eigenvectors: computed value (0.0291933) does not match (-0.02919332316478252).`) and some other python problems in `pywrap-align{,-chiral`:. ```; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/util/gph_uno_bipartite.py"", line 109, in _enumMaximumMatching; if g.node[kk]['bipartite'] == 0:; ^^^^^^. AttributeError: 'Graph' object has no attribute 'node'; ```. For completeness, those are the additional hunks:. ```; Index: psi4/psi4/driver/qcdb/datastructures.py; ===================================================================; --- psi4.orig/psi4/driver/qcdb/datastructures.py; +++ psi4/psi4/driver/qcdb/datastructures.py; @@ -58,11 +58,11 @@ class QCAspect(collections.namedtuple('Q; for d in ['doi', 'comment', 'glossary']:; dicary.pop(d); if isinstance(self.data, (np.ndarray, np.number)):; - if self.data.dtype == np.complex:; + if self.data.dtype == complex:; dicary['data'] = [dicary['data'].real.tolist(), dicary['data'].imag.tolist()]; else:; dicary['data'] = dicary['data'].tolist(); - elif isinstance(self.data, (complex, np.complex)):; + elif isinstance(self.data, (complex, complex)):; dicary['data'] = [self.data.real, self.data.imag]; ; return dicary; Index: psi4/psi4/driver/qcdb/util/scipy_hungarian.py; ===================================================================; --- psi4.orig/psi4/driver/qcdb/util/scipy_hungarian.py; +++ psi4/psi4/driver/qcdb/util/scipy_hungarian.py; @@ -93,14 +93,14 @@ def linear_sum_assignment(cost_matrix, r; % (cost_matrix.shape,)); ; if not (np.issubdtype(cost_matrix.dtype, np.number) or; - cost_matrix.dtype == np.dtype(np.bool)):; + cost_matrix.dtype == np.dtype(bool)):; raise ValueError(""expected a matrix containing numerical entries, got",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1407791101
https://github.com/psi4/psi4/issues/2865#issuecomment-1407791101:196,Testability,test,test,196,"I had to add some additional hunks, for the no longer existing `datastructures.py` and `scipy_hungarian.py`, not sure those are the correct fixes, but the testsuite (as far as Debian runs it, 143 test cases at least) now passes except for a numerical issue in `matrix1` (`Eigenvectors: computed value (0.0291933) does not match (-0.02919332316478252).`) and some other python problems in `pywrap-align{,-chiral`:. ```; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/util/gph_uno_bipartite.py"", line 109, in _enumMaximumMatching; if g.node[kk]['bipartite'] == 0:; ^^^^^^. AttributeError: 'Graph' object has no attribute 'node'; ```. For completeness, those are the additional hunks:. ```; Index: psi4/psi4/driver/qcdb/datastructures.py; ===================================================================; --- psi4.orig/psi4/driver/qcdb/datastructures.py; +++ psi4/psi4/driver/qcdb/datastructures.py; @@ -58,11 +58,11 @@ class QCAspect(collections.namedtuple('Q; for d in ['doi', 'comment', 'glossary']:; dicary.pop(d); if isinstance(self.data, (np.ndarray, np.number)):; - if self.data.dtype == np.complex:; + if self.data.dtype == complex:; dicary['data'] = [dicary['data'].real.tolist(), dicary['data'].imag.tolist()]; else:; dicary['data'] = dicary['data'].tolist(); - elif isinstance(self.data, (complex, np.complex)):; + elif isinstance(self.data, (complex, complex)):; dicary['data'] = [self.data.real, self.data.imag]; ; return dicary; Index: psi4/psi4/driver/qcdb/util/scipy_hungarian.py; ===================================================================; --- psi4.orig/psi4/driver/qcdb/util/scipy_hungarian.py; +++ psi4/psi4/driver/qcdb/util/scipy_hungarian.py; @@ -93,14 +93,14 @@ def linear_sum_assignment(cost_matrix, r; % (cost_matrix.shape,)); ; if not (np.issubdtype(cost_matrix.dtype, np.number) or; - cost_matrix.dtype == np.dtype(np.bool)):; + cost_matrix.dtype == np.dtype(bool)):; raise ValueError(""expected a matrix containing numerical entries, got",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1407791101
https://github.com/psi4/psi4/issues/2865#issuecomment-1407791731:292,Usability,clear,clear,292,"> Re [#2845 (comment)](https://github.com/psi4/psi4/pull/2845#issuecomment-1407771245), yes, perhaps it should be `double`. All it needs is a C double, and I thought Py float was that. Another reading of https://numpy.org/doc/stable/user/basics.types.html isn't helping. Sorry, I wasn't very clear - I meant that other than `np.float`, there's also some `np.double` hanging around, in particular this one:. > ```; > psi4/driver/p4util/numpy_helper.py: ret.nph[n].flat[:] = np.frombuffer(json_data[""data""][n], dtype=np.double); > ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1407791731
https://github.com/psi4/psi4/issues/2865#issuecomment-1409681147:459,Deployability,update,updates,459,"Glad to hear it's mostly working; * https://github.com/psi4/psi4/pull/2829 might help `matrix1`; * yes, the hungarian file had that change and now resides https://github.com/MolSSI/QCElemental/blob/master/qcelemental/util/scipy_hungarian.py#L103; * the datastructures is refactored into a different class https://github.com/MolSSI/QCElemental/blob/master/qcelemental/datum.py#L45 but your changes are good; * it looks like the uno_bipartite file has had some updates, incl. node -> nodes https://github.com/MolSSI/QCElemental/blob/master/qcelemental/util/gph_uno_bipartite.py#L108",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1409681147
https://github.com/psi4/psi4/issues/2865#issuecomment-1409681147:271,Modifiability,refactor,refactored,271,"Glad to hear it's mostly working; * https://github.com/psi4/psi4/pull/2829 might help `matrix1`; * yes, the hungarian file had that change and now resides https://github.com/MolSSI/QCElemental/blob/master/qcelemental/util/scipy_hungarian.py#L103; * the datastructures is refactored into a different class https://github.com/MolSSI/QCElemental/blob/master/qcelemental/datum.py#L45 but your changes are good; * it looks like the uno_bipartite file has had some updates, incl. node -> nodes https://github.com/MolSSI/QCElemental/blob/master/qcelemental/util/gph_uno_bipartite.py#L108",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1409681147
https://github.com/psi4/psi4/issues/2866#issuecomment-1411434650:64,Availability,down,download,64,Thanks for your response. You are right. But I guess we need to download and use the basis for transition metal manually.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2866#issuecomment-1411434650
https://github.com/psi4/psi4/issues/2868#issuecomment-1411024740:26,Availability,down,down,26,"Yes. The forums have been down since Thursday of last week. @lothian is working on getting it restored, but that involves a rather time-consuming backup and an operating system update. In the meantime, ask questions as issues (as you just did) or [on Slack](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2868#issuecomment-1411024740
https://github.com/psi4/psi4/issues/2868#issuecomment-1411024740:177,Deployability,update,update,177,"Yes. The forums have been down since Thursday of last week. @lothian is working on getting it restored, but that involves a rather time-consuming backup and an operating system update. In the meantime, ask questions as issues (as you just did) or [on Slack](https://join.slack.com/t/psi4/shared_invite/zt-5s36s4rb-SQH6_AWyfWOqlKYN3cFs4Q).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2868#issuecomment-1411024740
https://github.com/psi4/psi4/issues/2869#issuecomment-1411453257:316,Availability,error,error,316,"I'd trust sapt0 over ssapt0 in general. But the large difference btwn them and even btwn sapt0 and HF raises suspicion that the molecule or the distances involved aren't in the perturbation theory regime. SAPT0 should be around the HF and MP2 supermolecular interaction energies. Also, sapt0 is going to have better error cancelation with smaller double-zeta (like jun-cc-pvdz) so maybe svp.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2869#issuecomment-1411453257
https://github.com/psi4/psi4/issues/2869#issuecomment-1428848043:245,Integrability,Message,Message,245,"ok，thanks.在 2023年2月14日，上午6:34，Jonathon Misiewicz ***@***.***> 写道：﻿; @mars303 Is there still an issue here, or can we close this?. —Reply to this email directly, view it on GitHub, or unsubscribe.You are receiving this because you were mentioned.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2869#issuecomment-1428848043
https://github.com/psi4/psi4/issues/2870#issuecomment-1411945748:912,Energy Efficiency,energy,energy,912,The key information of the input file.; ```; memory 40 GB. molecule trimer {; 0 1; C 1.07154500 -0.44112100 1.91483900; C -0.17235900 -0.69652300 2.10370800; H -0.91485400 -1.28561300 2.61721300; C 2.45326100 -0.73511300 2.24630100; C 2.85437200 -2.08262200 2.30607700; C 3.40427800 0.27780800 2.45099100; C 4.18806600 -2.39739300 2.55990100; H 2.14221600 -2.86783100 2.07560500; C 4.73194500 -0.04754300 2.71722300; H 3.09893800 1.31634000 2.39879300; C 5.12929300 -1.38659800 2.76657000; H 4.48898800 -3.44096500 2.57307500; H 5.45915400 0.74482300 2.87386900; H 6.16909200 -1.63882200 2.95648300; --; 0 1; Ni 0.01252300 0.22250100 0.43479800; P -1.47081900 1.42539400 1.60377300; Br 1.54315200 -4.13099100 -0.43801300; ...; --; 0 1; P -1.40616300 -0.52452000 -1.14922700; ...; }. set {; scf_type DF; MAXITER 1000; freeze_core True; fisapt_do_plot true ; }. basis {; assign jun-cc-pvdz; assign Ni def2-svp; }. energy('fisapt0'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2870#issuecomment-1411945748
https://github.com/psi4/psi4/issues/2870#issuecomment-1411969749:43,Energy Efficiency,reduce,reduced,43,"Please include either the full input, or a reduced test case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2870#issuecomment-1411969749
https://github.com/psi4/psi4/issues/2870#issuecomment-1411969749:51,Testability,test,test,51,"Please include either the full input, or a reduced test case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2870#issuecomment-1411969749
https://github.com/psi4/psi4/issues/2870#issuecomment-1412882795:80,Testability,test,tests,80,"If you haven't already, take a look at https://github.com/psi4/psi4/blob/master/tests/isapt2/input.dat#L6 to see if setting total chgmult might be needed for your fragments.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2870#issuecomment-1412882795
https://github.com/psi4/psi4/issues/2871#issuecomment-1425797037:123,Integrability,interface,interface,123,"Just a note that this bug actually affects all atoms that have 2 letters, not only `Cl`, making the current Psi4/geometric interface functional only for single-letter atoms.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2871#issuecomment-1425797037
https://github.com/psi4/psi4/pull/2872#issuecomment-1421267186:10,Testability,test,tests,10,"Geometric tests are here https://github.com/psi4/psi4/blob/master/tests/pytests/test_geometric.py , but they wouldn't have caught the problem you identified. If you feel like adding more, go for it, but I don't think this is a problem we're likely to relapse on. If you wanted to run those, from a compiled psi4 in `<objdir>`, execute the results of `stage/bin/psi4 --psiapi` to set up paths, then `pytest -v ../tests/pytests/test_geometric.py`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2872#issuecomment-1421267186
https://github.com/psi4/psi4/pull/2872#issuecomment-1421267186:66,Testability,test,tests,66,"Geometric tests are here https://github.com/psi4/psi4/blob/master/tests/pytests/test_geometric.py , but they wouldn't have caught the problem you identified. If you feel like adding more, go for it, but I don't think this is a problem we're likely to relapse on. If you wanted to run those, from a compiled psi4 in `<objdir>`, execute the results of `stage/bin/psi4 --psiapi` to set up paths, then `pytest -v ../tests/pytests/test_geometric.py`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2872#issuecomment-1421267186
https://github.com/psi4/psi4/pull/2872#issuecomment-1421267186:412,Testability,test,tests,412,"Geometric tests are here https://github.com/psi4/psi4/blob/master/tests/pytests/test_geometric.py , but they wouldn't have caught the problem you identified. If you feel like adding more, go for it, but I don't think this is a problem we're likely to relapse on. If you wanted to run those, from a compiled psi4 in `<objdir>`, execute the results of `stage/bin/psi4 --psiapi` to set up paths, then `pytest -v ../tests/pytests/test_geometric.py`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2872#issuecomment-1421267186
https://github.com/psi4/psi4/pull/2872#issuecomment-1421273370:158,Testability,test,test,158,The only way this bug can re-appear is if `geometric` will change the way they process the atomic labels (which is what happened I suppose). Let me know if a test with `Cl` atom has to be added.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2872#issuecomment-1421273370
https://github.com/psi4/psi4/pull/2872#issuecomment-1421284934:158,Testability,test,test,158,"> The only way this bug can re-appear is if geometric will change the way they process the atomic labels (which is what happened I suppose). Let me know if a test with Cl atom has to be added. No need, imo. It's psi sending atoms weirdly (for legacy case-code-is-longwinded-in-old-c++ reasons), not geometric expecting atoms weirdly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2872#issuecomment-1421284934
https://github.com/psi4/psi4/issues/2878#issuecomment-1435413211:97,Energy Efficiency,ENERGY,ENERGY,97,"Very easily. ```; wfn, grad = psi4.gradient(method, return_wfn=True); en = wfn.variable(""CURRENT ENERGY""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2878#issuecomment-1435413211
https://github.com/psi4/psi4/issues/2878#issuecomment-1435413211:79,Modifiability,variab,variable,79,"Very easily. ```; wfn, grad = psi4.gradient(method, return_wfn=True); en = wfn.variable(""CURRENT ENERGY""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2878#issuecomment-1435413211
https://github.com/psi4/psi4/issues/2879#issuecomment-1437802626:337,Availability,down,download,337,"Psi4 was changing Libint2 requirements a good deal in mid-2021 through early-2022. So if your environment is from before, say, April 2022, but your psi4 src is newer, it's better to create a fresh psi4-dev env. At present you should be using one of. * [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2); * [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); * [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2). You can see what you've got with `conda list`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2879#issuecomment-1437802626
https://github.com/psi4/psi4/issues/2879#issuecomment-1437802626:475,Availability,down,download,475,"Psi4 was changing Libint2 requirements a good deal in mid-2021 through early-2022. So if your environment is from before, say, April 2022, but your psi4 src is newer, it's better to create a fresh psi4-dev env. At present you should be using one of. * [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2); * [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); * [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2). You can see what you've got with `conda list`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2879#issuecomment-1437802626
https://github.com/psi4/psi4/issues/2879#issuecomment-1437802626:610,Availability,down,download,610,"Psi4 was changing Libint2 requirements a good deal in mid-2021 through early-2022. So if your environment is from before, say, April 2022, but your psi4 src is newer, it's better to create a fresh psi4-dev env. At present you should be using one of. * [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2); * [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); * [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2). You can see what you've got with `conda list`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2879#issuecomment-1437802626
https://github.com/psi4/psi4/issues/2879#issuecomment-1437809093:345,Availability,down,download,345,"> Psi4 was changing Libint2 requirements a good deal in mid-2021 through early-2022. So if your environment is from before, say, April 2022, but your psi4 src is newer, it's better to create a fresh psi4-dev env. At present you should be using one of; > ; > * [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2); > * [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); > * [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2); > ; > You can see what you've got with `conda list`. Thank you very much. I'm using a fresh psi4-dev env, which I create with the following command: conda create -n psi4env python=3.9 psi4 gau2grid=2 --only-deps -c psi4/label/dev.; When I use the conda list to check it, it also includes: libint2 2.7.1 h2fe1556_15 psi4/label/dev.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2879#issuecomment-1437809093
https://github.com/psi4/psi4/issues/2879#issuecomment-1437809093:485,Availability,down,download,485,"> Psi4 was changing Libint2 requirements a good deal in mid-2021 through early-2022. So if your environment is from before, say, April 2022, but your psi4 src is newer, it's better to create a fresh psi4-dev env. At present you should be using one of; > ; > * [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2); > * [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); > * [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2); > ; > You can see what you've got with `conda list`. Thank you very much. I'm using a fresh psi4-dev env, which I create with the following command: conda create -n psi4env python=3.9 psi4 gau2grid=2 --only-deps -c psi4/label/dev.; When I use the conda list to check it, it also includes: libint2 2.7.1 h2fe1556_15 psi4/label/dev.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2879#issuecomment-1437809093
https://github.com/psi4/psi4/issues/2879#issuecomment-1437809093:622,Availability,down,download,622,"> Psi4 was changing Libint2 requirements a good deal in mid-2021 through early-2022. So if your environment is from before, say, April 2022, but your psi4 src is newer, it's better to create a fresh psi4-dev env. At present you should be using one of; > ; > * [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2); > * [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); > * [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2); > ; > You can see what you've got with `conda list`. Thank you very much. I'm using a fresh psi4-dev env, which I create with the following command: conda create -n psi4env python=3.9 psi4 gau2grid=2 --only-deps -c psi4/label/dev.; When I use the conda list to check it, it also includes: libint2 2.7.1 h2fe1556_15 psi4/label/dev.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2879#issuecomment-1437809093
https://github.com/psi4/psi4/issues/2879#issuecomment-1437927691:14,Safety,detect,detecting,14,"So is libint2 detecting correctly now and psi4 is compiling, or are you still having problems? If the latter, is it a clean objdir?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2879#issuecomment-1437927691
https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744:649,Deployability,update,updated,649,"I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.). ```; ### Setup. molecule dimer {; He; X 1 R ; He 2 1.0 1 180 ; }. set basis 6-31G(d). Rvals = [1.4, 1.5]. ### Compute; ecp = {}; for R in Rvals:; dimer.R = R ; ecp[R] = energy(""mp2""). ### Printout; psi4.print_out(""\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""). for R in Rvals:; psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); ```. The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744
https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744:320,Energy Efficiency,energy,energy,320,"I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.). ```; ### Setup. molecule dimer {; He; X 1 R ; He 2 1.0 1 180 ; }. set basis 6-31G(d). Rvals = [1.4, 1.5]. ### Compute; ecp = {}; for R in Rvals:; dimer.R = R ; ecp[R] = energy(""mp2""). ### Printout; psi4.print_out(""\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""). for R in Rvals:; psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); ```. The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744
https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744:40,Usability,simpl,simplify,40,"I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.). ```; ### Setup. molecule dimer {; He; X 1 R ; He 2 1.0 1 180 ; }. set basis 6-31G(d). Rvals = [1.4, 1.5]. ### Compute; ecp = {}; for R in Rvals:; dimer.R = R ; ecp[R] = energy(""mp2""). ### Printout; psi4.print_out(""\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""). for R in Rvals:; psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); ```. The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744
https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744:129,Usability,simpl,simple,129,"I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.). ```; ### Setup. molecule dimer {; He; X 1 R ; He 2 1.0 1 180 ; }. set basis 6-31G(d). Rvals = [1.4, 1.5]. ### Compute; ecp = {}; for R in Rvals:; dimer.R = R ; ecp[R] = energy(""mp2""). ### Printout; psi4.print_out(""\n""); psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); psi4.print_out(""-----------------------------------------------------\n""). for R in Rvals:; psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); ```. The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1438951744
https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966:727,Deployability,update,updated,727,"> I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.); > ; > ```; > ### Setup; > ; > molecule dimer {; > He; > X 1 R ; > He 2 1.0 1 180 ; > }; > ; > set basis 6-31G(d); > ; > Rvals = [1.4, 1.5]; > ; > ### Compute; > ecp = {}; > for R in Rvals:; > dimer.R = R ; > ecp[R] = energy(""mp2""); > ; > ### Printout; > psi4.print_out(""\n""); > psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); > psi4.print_out(""-----------------------------------------------------\n""); > ; > for R in Rvals:; > psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); > ```; > ; > The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab. Thank you for the confirmation. We are undertaking a couple of force field optimization project which will require 30K or more energy surface scan using PSI4. We would highly appreciate if this issue could be solved soon. Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966
https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966:370,Energy Efficiency,energy,energy,370,"> I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.); > ; > ```; > ### Setup; > ; > molecule dimer {; > He; > X 1 R ; > He 2 1.0 1 180 ; > }; > ; > set basis 6-31G(d); > ; > Rvals = [1.4, 1.5]; > ; > ### Compute; > ecp = {}; > for R in Rvals:; > dimer.R = R ; > ecp[R] = energy(""mp2""); > ; > ### Printout; > psi4.print_out(""\n""); > psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); > psi4.print_out(""-----------------------------------------------------\n""); > ; > for R in Rvals:; > psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); > ```; > ; > The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab. Thank you for the confirmation. We are undertaking a couple of force field optimization project which will require 30K or more energy surface scan using PSI4. We would highly appreciate if this issue could be solved soon. Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966
https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966:882,Energy Efficiency,energy,energy,882,"> I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.); > ; > ```; > ### Setup; > ; > molecule dimer {; > He; > X 1 R ; > He 2 1.0 1 180 ; > }; > ; > set basis 6-31G(d); > ; > Rvals = [1.4, 1.5]; > ; > ### Compute; > ecp = {}; > for R in Rvals:; > dimer.R = R ; > ecp[R] = energy(""mp2""); > ; > ### Printout; > psi4.print_out(""\n""); > psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); > psi4.print_out(""-----------------------------------------------------\n""); > ; > for R in Rvals:; > psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); > ```; > ; > The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab. Thank you for the confirmation. We are undertaking a couple of force field optimization project which will require 30K or more energy surface scan using PSI4. We would highly appreciate if this issue could be solved soon. Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966
https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966:830,Performance,optimiz,optimization,830,"> I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.); > ; > ```; > ### Setup; > ; > molecule dimer {; > He; > X 1 R ; > He 2 1.0 1 180 ; > }; > ; > set basis 6-31G(d); > ; > Rvals = [1.4, 1.5]; > ; > ### Compute; > ecp = {}; > for R in Rvals:; > dimer.R = R ; > ecp[R] = energy(""mp2""); > ; > ### Printout; > psi4.print_out(""\n""); > psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); > psi4.print_out(""-----------------------------------------------------\n""); > ; > for R in Rvals:; > psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); > ```; > ; > The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab. Thank you for the confirmation. We are undertaking a couple of force field optimization project which will require 30K or more energy surface scan using PSI4. We would highly appreciate if this issue could be solved soon. Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966
https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966:42,Usability,simpl,simplify,42,"> I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.); > ; > ```; > ### Setup; > ; > molecule dimer {; > He; > X 1 R ; > He 2 1.0 1 180 ; > }; > ; > set basis 6-31G(d); > ; > Rvals = [1.4, 1.5]; > ; > ### Compute; > ecp = {}; > for R in Rvals:; > dimer.R = R ; > ecp[R] = energy(""mp2""); > ; > ### Printout; > psi4.print_out(""\n""); > psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); > psi4.print_out(""-----------------------------------------------------\n""); > ; > for R in Rvals:; > psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); > ```; > ; > The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab. Thank you for the confirmation. We are undertaking a couple of force field optimization project which will require 30K or more energy surface scan using PSI4. We would highly appreciate if this issue could be solved soon. Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966
https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966:131,Usability,simpl,simple,131,"> I'm able to confirm the report and also simplify the example. (We appreciate the report. We also appreciate examples that are as simple as possible.); > ; > ```; > ### Setup; > ; > molecule dimer {; > He; > X 1 R ; > He 2 1.0 1 180 ; > }; > ; > set basis 6-31G(d); > ; > Rvals = [1.4, 1.5]; > ; > ### Compute; > ecp = {}; > for R in Rvals:; > dimer.R = R ; > ecp[R] = energy(""mp2""); > ; > ### Printout; > psi4.print_out(""\n""); > psi4.print_out("" R [Ang] E_int [kcal/mol] \n""); > psi4.print_out(""-----------------------------------------------------\n""); > ; > for R in Rvals:; > psi4.print_out("" %3.1f %10.6f\n"" % (R, ecp[R])); > ```; > ; > The position of atoms defined relative to a dummy atom in a Z-matrix aren't getting updated, it seems. @loriab. Thank you for the confirmation. We are undertaking a couple of force field optimization project which will require 30K or more energy surface scan using PSI4. We would highly appreciate if this issue could be solved soon. Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1440673966
https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883:171,Availability,error,error,171,"I, too, am worried that dummy atoms and adjusted geometries weren't designed to work together, as none of the scanning examples use dummy atoms. (In which case we need an error message.) However, there is a workaround. You could define the molecule as a string, then instantiate the molecule anew for each step in the scan, like below. Would this help? Thanks for trying psi!. ```; sdimer = """"""; He; X 1 {R} ; He 2 1.0 1 180 ; """""". set basis 6-31G(d). Rvals = [1.4, 1.5]; ref_nre = {1.4: 0.8819620, 1.5: 0.8466835}. ### Compute; ecp = {}; nre = {}; for R in Rvals:; dimer = geometry(sdimer.format(R=R)); ene = energy(""mp2""); ecp[R] = ene; nre[R] = dimer.nuclear_repulsion_energy(); print(R, ene, dimer.nuclear_repulsion_energy()); ; for R in Rvals:; compare_values(ref_nre[R], nre[R], 5, f'nre {R}'). ```; ```; 1.4 -5.732454436415538 0.8819620177833327; 1.5 -5.7325858447838085 0.846683537072; nre 1.4...............................................................................PASSED; nre 1.5...............................................................................PASSED; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883
https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883:610,Energy Efficiency,energy,energy,610,"I, too, am worried that dummy atoms and adjusted geometries weren't designed to work together, as none of the scanning examples use dummy atoms. (In which case we need an error message.) However, there is a workaround. You could define the molecule as a string, then instantiate the molecule anew for each step in the scan, like below. Would this help? Thanks for trying psi!. ```; sdimer = """"""; He; X 1 {R} ; He 2 1.0 1 180 ; """""". set basis 6-31G(d). Rvals = [1.4, 1.5]; ref_nre = {1.4: 0.8819620, 1.5: 0.8466835}. ### Compute; ecp = {}; nre = {}; for R in Rvals:; dimer = geometry(sdimer.format(R=R)); ene = energy(""mp2""); ecp[R] = ene; nre[R] = dimer.nuclear_repulsion_energy(); print(R, ene, dimer.nuclear_repulsion_energy()); ; for R in Rvals:; compare_values(ref_nre[R], nre[R], 5, f'nre {R}'). ```; ```; 1.4 -5.732454436415538 0.8819620177833327; 1.5 -5.7325858447838085 0.846683537072; nre 1.4...............................................................................PASSED; nre 1.5...............................................................................PASSED; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883
https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883:177,Integrability,message,message,177,"I, too, am worried that dummy atoms and adjusted geometries weren't designed to work together, as none of the scanning examples use dummy atoms. (In which case we need an error message.) However, there is a workaround. You could define the molecule as a string, then instantiate the molecule anew for each step in the scan, like below. Would this help? Thanks for trying psi!. ```; sdimer = """"""; He; X 1 {R} ; He 2 1.0 1 180 ; """""". set basis 6-31G(d). Rvals = [1.4, 1.5]; ref_nre = {1.4: 0.8819620, 1.5: 0.8466835}. ### Compute; ecp = {}; nre = {}; for R in Rvals:; dimer = geometry(sdimer.format(R=R)); ene = energy(""mp2""); ecp[R] = ene; nre[R] = dimer.nuclear_repulsion_energy(); print(R, ene, dimer.nuclear_repulsion_energy()); ; for R in Rvals:; compare_values(ref_nre[R], nre[R], 5, f'nre {R}'). ```; ```; 1.4 -5.732454436415538 0.8819620177833327; 1.5 -5.7325858447838085 0.846683537072; nre 1.4...............................................................................PASSED; nre 1.5...............................................................................PASSED; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883
https://github.com/psi4/psi4/issues/2883#issuecomment-1440866212:152,Energy Efficiency,energy,energy,152,"Case in point, I was doing a CAS(4,6)CI calculation on HBr at 1.5A/cc-pVDZ/cc-pVDZ-JKFIT (default DF basis), and DETCI returned a ~700 mEh correclation energy from the tiny 16-determinant CAS. @JonathonMisiewicz quickly figured out DETCI wasn't using DF integrals. It turned out that cc-pVDZ-JKFIT is a very bad DF basis for Br, and should probably not have been used anyway, but it would have been nice to at least get a CASCI energy consistent with the SCF calculation, imho.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2883#issuecomment-1440866212
https://github.com/psi4/psi4/issues/2883#issuecomment-1440866212:428,Energy Efficiency,energy,energy,428,"Case in point, I was doing a CAS(4,6)CI calculation on HBr at 1.5A/cc-pVDZ/cc-pVDZ-JKFIT (default DF basis), and DETCI returned a ~700 mEh correclation energy from the tiny 16-determinant CAS. @JonathonMisiewicz quickly figured out DETCI wasn't using DF integrals. It turned out that cc-pVDZ-JKFIT is a very bad DF basis for Br, and should probably not have been used anyway, but it would have been nice to at least get a CASCI energy consistent with the SCF calculation, imho.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2883#issuecomment-1440866212
https://github.com/psi4/psi4/issues/2883#issuecomment-1440883487:19,Integrability,message,message,19,"Ah I see your next message now. Yes, I agree it'd be nice if all defaults were consistent, but that'd mean nothing could be df. The last table at docs/introduction/capabilities can show what defaults to df and what to conventional. Admittedly casscf/rasscf aren't on there as I didn't get to them in my last testing push.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2883#issuecomment-1440883487
https://github.com/psi4/psi4/issues/2883#issuecomment-1440883487:308,Testability,test,testing,308,"Ah I see your next message now. Yes, I agree it'd be nice if all defaults were consistent, but that'd mean nothing could be df. The last table at docs/introduction/capabilities can show what defaults to df and what to conventional. Admittedly casscf/rasscf aren't on there as I didn't get to them in my last testing push.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2883#issuecomment-1440883487
https://github.com/psi4/psi4/issues/2884#issuecomment-1442271378:164,Performance,perform,perform,164,"I am actually more looking for advice than complaining or reporting a bug here. It's indeed more of a qcengine thing, but I was wondering whether psi4 had a way to perform the conversion. I spotted `psi4.schema_wrapper.driver._convert_wavefunction()` (https://github.com/psi4/psi4/blob/6260856e4002a8398cdba67c2ce2254d47c49d37/psi4/driver/schema_wrapper.py#L493) that can convert a `psi4_wfn` to a `qcschema_wfn` and I was wondering whether a function to perform the inverse operation exists somewhere (doing the `qcschema_wfn` to `psi4_wfn` conversion). I totally understand this is not strictly a psi4 issue here so I'll close if you think it's irrelevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2884#issuecomment-1442271378
https://github.com/psi4/psi4/issues/2884#issuecomment-1442271378:455,Performance,perform,perform,455,"I am actually more looking for advice than complaining or reporting a bug here. It's indeed more of a qcengine thing, but I was wondering whether psi4 had a way to perform the conversion. I spotted `psi4.schema_wrapper.driver._convert_wavefunction()` (https://github.com/psi4/psi4/blob/6260856e4002a8398cdba67c2ce2254d47c49d37/psi4/driver/schema_wrapper.py#L493) that can convert a `psi4_wfn` to a `qcschema_wfn` and I was wondering whether a function to perform the inverse operation exists somewhere (doing the `qcschema_wfn` to `psi4_wfn` conversion). I totally understand this is not strictly a psi4 issue here so I'll close if you think it's irrelevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2884#issuecomment-1442271378
https://github.com/psi4/psi4/issues/2884#issuecomment-1442372972:200,Usability,simpl,simple,200,"""Round-tripping"" of wfn (`psi4.core.Wavefunction` -> `AtomicResult.wavefunction` -> `psi4.core.Wavefunction`) is a definite goal, but you concluded rightly that it does not work now. A needed step is simple round-tripping of `BasisSet`, and my last bout of working on that got to this stage: https://github.com/psi4/psi4/pull/2861 . I'd like to work on this again, but I don't know when. It's fine to leave this open, in my opinion, since this is a question others may have.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2884#issuecomment-1442372972
https://github.com/psi4/psi4/issues/2884#issuecomment-1442733037:30,Availability,error,error,30,"Sorry, that #2861 link was an error. https://github.com/MolSSI/QCElemental/pull/230 was what I meant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2884#issuecomment-1442733037
https://github.com/psi4/psi4/issues/2890#issuecomment-1452015040:18,Availability,ping,ping,18,Obligatory @hokru ping.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1452015040
https://github.com/psi4/psi4/issues/2890#issuecomment-1458711309:27,Availability,robust,robust,27,"**General comments**: The `robust` scheme uses the following orders in the regions: [7, nominal-7, nominal, nominal] Meaning only the inner 50% are pruned. And things will break i think when the order is 7 -> 86 points or smaller.; Also for `Treutler` it does not make much sense to go below 11 -> 194 points because the order of the core region is fixed at that and you don't want to have the outer regions with less points than the inner.; I didn't take into account people would want to do pruning with small grids to be honest and even if things do not ""break"" there will certainly an unwanted imbalance. This needs to be at least checked by the code in the future.; As for pruning schemes for small grids, one could come up with a new scheme or even let the user input an array with orders to make grid pruning fully manually adjustable. **On topic**: I don't really understand why this should happen currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1458711309
https://github.com/psi4/psi4/issues/2890#issuecomment-1460256518:821,Availability,ROBUST,ROBUST,821,"Thank you for looking into this!. So first and foremost, I have a question on this front. When I look at the [the Psi4 documentation](https://psicode.org/psi4manual/master/dft.html) on DFT grids in Psi4, it seems that an order of 7 maps to 26 spherical grid points, rather than the 86 that you mention. I won't pretend to be an expert on the DFTGrid class, but I assume this is because the orders that are referenced within the DFTGrid class pruning schemes (and I presume your comment) are different from the orders mentioned in the documentation?. Its further interesting because, by default, the initial grid that COSX uses has 50 spherical points in it, which maps to an order of 11 in the documentation (and I believe an order of 5 based on how your comment maps orders to spherical points). The COSX grids also use ROBUST pruning by default. With these settings, the COSX code should break with the default grid settings... but it doesn't seem to? To be fair, its possible that the current default settings for the initial COSX grid break the code by leading to a wonky grid rather than leading to a segfault/exception (though I would expect the latter, from my understanding of the pruning schemes). Also, as a report on my end, I made a slight modification to the code to allow for more control over how COSX grids are made - nuclear schemes, radial schemes, block schemes, etc. I then tried different combinations of grid parameters for COSX with 146 spherical points. Unfortunately, nothing I tried worked. Whatever bug we are dealing with here... it's insidious. And as a final comment, I suppose this brings up the question of, how do we want to handle this? You bring up a couple of possible solutions in your comment, none of which I have any qualms with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1460256518
https://github.com/psi4/psi4/issues/2890#issuecomment-1460466266:53,Testability,test,testing,53,I have a working psi4 version again and will do some testing. Using `print 5` I see the Fock matrix becomes `nan` at the end which is definitely not good :-). I don't think ADIIS should turn on for the final iteration.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1460466266
https://github.com/psi4/psi4/issues/2890#issuecomment-1460782376:464,Availability,ROBUST,ROBUST,464,"After some deep digging, the source of the `nan`s has been identified!. In the function `compute_numeric_overlap` in DFJCOSK.cc, we have this block of code:; ```; for (size_t p = 0; p < npoints_block; p++) {; for (size_t k = 0; k < nbf_block; k++) {; X_blockp[p][k] = point_values->get(p, k) * std::sqrt(w[p]);; }; }; ```. which is meant to compute a part of the X matrix, as defined in Eq. 2 of [this paper.](https://doi.org/10.1063/1.3646921) Problem is, with a ROBUST grid pruning scheme and 146 spherical points, some of the weights w seem to evaluate as negative. The resulting square-rooting of these weights during computing X_blockp, then, is what leads to the `nan`s that were observed. After some discussion with @hokru, it seems that Psi4 grid weights can indeed be negative as expected behavior, so this is a problem that could show up with other constructed grids fed into COSX. This leaves the question - how do we best handle this? One obvious start is to simply have COSX throw an exception if a grid with negative weights is used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1460782376
https://github.com/psi4/psi4/issues/2890#issuecomment-1460782376:971,Usability,simpl,simply,971,"After some deep digging, the source of the `nan`s has been identified!. In the function `compute_numeric_overlap` in DFJCOSK.cc, we have this block of code:; ```; for (size_t p = 0; p < npoints_block; p++) {; for (size_t k = 0; k < nbf_block; k++) {; X_blockp[p][k] = point_values->get(p, k) * std::sqrt(w[p]);; }; }; ```. which is meant to compute a part of the X matrix, as defined in Eq. 2 of [this paper.](https://doi.org/10.1063/1.3646921) Problem is, with a ROBUST grid pruning scheme and 146 spherical points, some of the weights w seem to evaluate as negative. The resulting square-rooting of these weights during computing X_blockp, then, is what leads to the `nan`s that were observed. After some discussion with @hokru, it seems that Psi4 grid weights can indeed be negative as expected behavior, so this is a problem that could show up with other constructed grids fed into COSX. This leaves the question - how do we best handle this? One obvious start is to simply have COSX throw an exception if a grid with negative weights is used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1460782376
https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:266,Availability,ROBUST,ROBUST,266,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214
https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:449,Availability,failure,failure,449,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214
https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:103,Deployability,configurat,configurations,103,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214
https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:527,Deployability,configurat,configurations,527,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214
https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:631,Integrability,depend,dependent,631,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214
https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:103,Modifiability,config,configurations,103,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214
https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:527,Modifiability,config,configurations,527,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214
https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:148,Testability,test,testing,148,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214
https://github.com/psi4/psi4/issues/2890#issuecomment-1468114267:103,Availability,failure,failure,103,"One thing that I would like to note is that prior to https://github.com/psi4/psi4/pull/2686 this DSYEV failure would not have been caught, and Psi4 would have carried on with whatever the failed diagonalization returned.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468114267
https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013:87,Availability,error,error,87,"I decided to take an intermediate step regarding this issue by making a PR wherein the error messages received upon breaking COSX with negative grid weights are more informative to the end user. Not a full fix, but at least with that, an end user that runs into this issue can know how to get around it. In the meantime, what do we all think the _best_ fix for this issue would be? Discussion in this chat has different reformulations of the X matrix to be able to handle grids with negative grid weights, while recent discussion in the Psi4 dev Slack has suggested the possibility of simply removing grid configurations that lead to negative weights. Which approach is the best, I do not immediately know. Also worth sharing in this chat, it seems that the negative grid weights that were observed as part of this issue, are _not_ an explicit bug, but rather a consequence of how the grids weights are determined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013
https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013:606,Deployability,configurat,configurations,606,"I decided to take an intermediate step regarding this issue by making a PR wherein the error messages received upon breaking COSX with negative grid weights are more informative to the end user. Not a full fix, but at least with that, an end user that runs into this issue can know how to get around it. In the meantime, what do we all think the _best_ fix for this issue would be? Discussion in this chat has different reformulations of the X matrix to be able to handle grids with negative grid weights, while recent discussion in the Psi4 dev Slack has suggested the possibility of simply removing grid configurations that lead to negative weights. Which approach is the best, I do not immediately know. Also worth sharing in this chat, it seems that the negative grid weights that were observed as part of this issue, are _not_ an explicit bug, but rather a consequence of how the grids weights are determined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013
https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013:93,Integrability,message,messages,93,"I decided to take an intermediate step regarding this issue by making a PR wherein the error messages received upon breaking COSX with negative grid weights are more informative to the end user. Not a full fix, but at least with that, an end user that runs into this issue can know how to get around it. In the meantime, what do we all think the _best_ fix for this issue would be? Discussion in this chat has different reformulations of the X matrix to be able to handle grids with negative grid weights, while recent discussion in the Psi4 dev Slack has suggested the possibility of simply removing grid configurations that lead to negative weights. Which approach is the best, I do not immediately know. Also worth sharing in this chat, it seems that the negative grid weights that were observed as part of this issue, are _not_ an explicit bug, but rather a consequence of how the grids weights are determined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013
https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013:606,Modifiability,config,configurations,606,"I decided to take an intermediate step regarding this issue by making a PR wherein the error messages received upon breaking COSX with negative grid weights are more informative to the end user. Not a full fix, but at least with that, an end user that runs into this issue can know how to get around it. In the meantime, what do we all think the _best_ fix for this issue would be? Discussion in this chat has different reformulations of the X matrix to be able to handle grids with negative grid weights, while recent discussion in the Psi4 dev Slack has suggested the possibility of simply removing grid configurations that lead to negative weights. Which approach is the best, I do not immediately know. Also worth sharing in this chat, it seems that the negative grid weights that were observed as part of this issue, are _not_ an explicit bug, but rather a consequence of how the grids weights are determined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013
https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013:585,Usability,simpl,simply,585,"I decided to take an intermediate step regarding this issue by making a PR wherein the error messages received upon breaking COSX with negative grid weights are more informative to the end user. Not a full fix, but at least with that, an end user that runs into this issue can know how to get around it. In the meantime, what do we all think the _best_ fix for this issue would be? Discussion in this chat has different reformulations of the X matrix to be able to handle grids with negative grid weights, while recent discussion in the Psi4 dev Slack has suggested the possibility of simply removing grid configurations that lead to negative weights. Which approach is the best, I do not immediately know. Also worth sharing in this chat, it seems that the negative grid weights that were observed as part of this issue, are _not_ an explicit bug, but rather a consequence of how the grids weights are determined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013
https://github.com/psi4/psi4/issues/2890#issuecomment-1497993552:149,Availability,error,error,149,"Based on the discussion we had today in the Psi4 dev meeting, it has been decided that the best way to fully solve this issue is simply to have COSX error out when a grid with negative weights is encountered. This is what https://github.com/psi4/psi4/pull/2906 implements, so once that PR is merged into Psi4, this issue can be closed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1497993552
https://github.com/psi4/psi4/issues/2890#issuecomment-1497993552:129,Usability,simpl,simply,129,"Based on the discussion we had today in the Psi4 dev meeting, it has been decided that the best way to fully solve this issue is simply to have COSX error out when a grid with negative weights is encountered. This is what https://github.com/psi4/psi4/pull/2906 implements, so once that PR is merged into Psi4, this issue can be closed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1497993552
https://github.com/psi4/psi4/issues/2890#issuecomment-1499304044:117,Availability,toler,tolerance,117,"Two questions:; - Have you checked the magnitude of the negative grid weights? Are they near-zero, within some small tolerance? That could be justification for zeroing them out; - Why not implement my above suggestion of forming two separate `X` matrices? This would be simple to do",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1499304044
https://github.com/psi4/psi4/issues/2890#issuecomment-1499304044:270,Usability,simpl,simple,270,"Two questions:; - Have you checked the magnitude of the negative grid weights? Are they near-zero, within some small tolerance? That could be justification for zeroing them out; - Why not implement my above suggestion of forming two separate `X` matrices? This would be simple to do",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1499304044
https://github.com/psi4/psi4/issues/2890#issuecomment-1499311759:103,Availability,toler,tolerance,103,"> * Have you checked the magnitude of the negative grid weights? Are they near-zero, within some small tolerance? That could be justification for zeroing them out. They are of proper magnitude. Grid points with tiny weights are also already screened out during construction.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1499311759
https://github.com/psi4/psi4/issues/2890#issuecomment-1503331042:125,Availability,toler,tolerance,125,"> Two questions:; > ; > * Have you checked the magnitude of the negative grid weights? Are they near-zero, within some small tolerance? That could be justification for zeroing them out; > * Why not implement my above suggestion of forming two separate `X` matrices? This would be simple to do. @hokru answered the first part; and while I couldn't say what a ""proper magnitude"" is, my observation was that some of the negative weights were large enough in magnitude to where zeroing them out wouldn't be feasible. For your second part, it's just what was settled on at the Psi4 dev meeting, moreso than anything. On further reflection, though, I can work on your suggestion today, because you're right, it wouldn't be too hard to do what you said.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1503331042
https://github.com/psi4/psi4/issues/2890#issuecomment-1503331042:280,Usability,simpl,simple,280,"> Two questions:; > ; > * Have you checked the magnitude of the negative grid weights? Are they near-zero, within some small tolerance? That could be justification for zeroing them out; > * Why not implement my above suggestion of forming two separate `X` matrices? This would be simple to do. @hokru answered the first part; and while I couldn't say what a ""proper magnitude"" is, my observation was that some of the negative weights were large enough in magnitude to where zeroing them out wouldn't be feasible. For your second part, it's just what was settled on at the Psi4 dev meeting, moreso than anything. On further reflection, though, I can work on your suggestion today, because you're right, it wouldn't be too hard to do what you said.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1503331042
https://github.com/psi4/psi4/issues/2890#issuecomment-1503657450:240,Usability,intuit,intuitive,240,"_If_ we go with Zach's suggestion, then I insist that the code emit a warning when there are negative grid weights with COSX. We're in a case where the original COSX procedure is undefined, and the user should know that, whether our fix is intuitive or not. (I don't know COSX theory well enough to comment on that.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1503657450
https://github.com/psi4/psi4/issues/2890#issuecomment-1503691888:242,Usability,intuit,intuitive,242,"> _If_ we go with Zach's suggestion, then I insist that the code emit a warning when there are negative grid weights with COSX. We're in a case where the original COSX procedure is undefined, and the user should know that, whether our fix is intuitive or not. (I don't know COSX theory well enough to comment on that.). I would agree with this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1503691888
https://github.com/psi4/psi4/issues/2890#issuecomment-1505035691:341,Safety,avoid,avoids,341,You can't set negative weights to zero since that will change the results. The real fix would be to use grids with non-negative weights. Using a product grid instead of Lebedev would be one option. For now I would just disable the grids with negative weights as in done in many other codes. Switching to the use of the asymmetric form which avoids the square roots of the weights may be an option but it might also increase memory costs by a factor of 2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1505035691
https://github.com/psi4/psi4/issues/2892#issuecomment-1459871063:402,Integrability,wrap,wrapper,402,"So it sounds like what you really want is a three-index overlap matrix, where two of the indices are in the AO basis and the third is an auxiliary basis function which is defined by the machine learning model; this is how you get 60 functions. Looking at the 3coverlap code at the lowest level, the code supports computing 3-index overlap intergrals between 3 different basis sets, and there is also a wrapper function for this; ```; SharedMatrix MintsHelper::ao_3coverlap(std::shared_ptr<BasisSet> bs1, std::shared_ptr<BasisSet> bs2,; std::shared_ptr<BasisSet> bs3) {; auto ints = std::make_shared<ThreeCenterOverlapInt>(bs1, bs2, bs3);; return ao_3coverlap_helper(""AO 3-Center Overlap Tensor"", ints);; }; ```; and it is also revealed in the Python interface, which means that you should be able to call it. Hopefully someone else can tell how to fit all the pieces together.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2892#issuecomment-1459871063
https://github.com/psi4/psi4/issues/2892#issuecomment-1459871063:750,Integrability,interface,interface,750,"So it sounds like what you really want is a three-index overlap matrix, where two of the indices are in the AO basis and the third is an auxiliary basis function which is defined by the machine learning model; this is how you get 60 functions. Looking at the 3coverlap code at the lowest level, the code supports computing 3-index overlap intergrals between 3 different basis sets, and there is also a wrapper function for this; ```; SharedMatrix MintsHelper::ao_3coverlap(std::shared_ptr<BasisSet> bs1, std::shared_ptr<BasisSet> bs2,; std::shared_ptr<BasisSet> bs3) {; auto ints = std::make_shared<ThreeCenterOverlapInt>(bs1, bs2, bs3);; return ao_3coverlap_helper(""AO 3-Center Overlap Tensor"", ints);; }; ```; and it is also revealed in the Python interface, which means that you should be able to call it. Hopefully someone else can tell how to fit all the pieces together.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2892#issuecomment-1459871063
https://github.com/psi4/psi4/issues/2892#issuecomment-1459871063:194,Usability,learn,learning,194,"So it sounds like what you really want is a three-index overlap matrix, where two of the indices are in the AO basis and the third is an auxiliary basis function which is defined by the machine learning model; this is how you get 60 functions. Looking at the 3coverlap code at the lowest level, the code supports computing 3-index overlap intergrals between 3 different basis sets, and there is also a wrapper function for this; ```; SharedMatrix MintsHelper::ao_3coverlap(std::shared_ptr<BasisSet> bs1, std::shared_ptr<BasisSet> bs2,; std::shared_ptr<BasisSet> bs3) {; auto ints = std::make_shared<ThreeCenterOverlapInt>(bs1, bs2, bs3);; return ao_3coverlap_helper(""AO 3-Center Overlap Tensor"", ints);; }; ```; and it is also revealed in the Python interface, which means that you should be able to call it. Hopefully someone else can tell how to fit all the pieces together.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2892#issuecomment-1459871063
https://github.com/psi4/psi4/issues/2892#issuecomment-1459905386:411,Integrability,wrap,wrapper,411,"> So it sounds like what you really want is a three-index overlap matrix, where two of the indices are in the AO basis and the third is an auxiliary basis function which is defined by the machine learning model; this is how you get 60 functions.; > ; > Looking at the 3coverlap code at the lowest level, the code supports computing 3-index overlap intergrals between 3 different basis sets, and there is also a wrapper function for this; > ; > ```; > SharedMatrix MintsHelper::ao_3coverlap(std::shared_ptr<BasisSet> bs1, std::shared_ptr<BasisSet> bs2,; > std::shared_ptr<BasisSet> bs3) {; > auto ints = std::make_shared<ThreeCenterOverlapInt>(bs1, bs2, bs3);; > return ao_3coverlap_helper(""AO 3-Center Overlap Tensor"", ints);; > }; > ```; > ; > and it is also revealed in the Python interface, which means that you should be able to call it.; > ; > Hopefully someone else can tell how to fit all the pieces together. thanks for your pointers @susilehtola ! yes, i see this code now and this is a good start. so, what is left is for me to define a `psi4`-compatible `BasisSet` to represent the set of Gaussian auxiliary basis functions that I want (say the 60 different ones used by the paper). . it would be fantastic if anyone could give pointers on this!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2892#issuecomment-1459905386
https://github.com/psi4/psi4/issues/2892#issuecomment-1459905386:783,Integrability,interface,interface,783,"> So it sounds like what you really want is a three-index overlap matrix, where two of the indices are in the AO basis and the third is an auxiliary basis function which is defined by the machine learning model; this is how you get 60 functions.; > ; > Looking at the 3coverlap code at the lowest level, the code supports computing 3-index overlap intergrals between 3 different basis sets, and there is also a wrapper function for this; > ; > ```; > SharedMatrix MintsHelper::ao_3coverlap(std::shared_ptr<BasisSet> bs1, std::shared_ptr<BasisSet> bs2,; > std::shared_ptr<BasisSet> bs3) {; > auto ints = std::make_shared<ThreeCenterOverlapInt>(bs1, bs2, bs3);; > return ao_3coverlap_helper(""AO 3-Center Overlap Tensor"", ints);; > }; > ```; > ; > and it is also revealed in the Python interface, which means that you should be able to call it.; > ; > Hopefully someone else can tell how to fit all the pieces together. thanks for your pointers @susilehtola ! yes, i see this code now and this is a good start. so, what is left is for me to define a `psi4`-compatible `BasisSet` to represent the set of Gaussian auxiliary basis functions that I want (say the 60 different ones used by the paper). . it would be fantastic if anyone could give pointers on this!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2892#issuecomment-1459905386
https://github.com/psi4/psi4/issues/2892#issuecomment-1459905386:196,Usability,learn,learning,196,"> So it sounds like what you really want is a three-index overlap matrix, where two of the indices are in the AO basis and the third is an auxiliary basis function which is defined by the machine learning model; this is how you get 60 functions.; > ; > Looking at the 3coverlap code at the lowest level, the code supports computing 3-index overlap intergrals between 3 different basis sets, and there is also a wrapper function for this; > ; > ```; > SharedMatrix MintsHelper::ao_3coverlap(std::shared_ptr<BasisSet> bs1, std::shared_ptr<BasisSet> bs2,; > std::shared_ptr<BasisSet> bs3) {; > auto ints = std::make_shared<ThreeCenterOverlapInt>(bs1, bs2, bs3);; > return ao_3coverlap_helper(""AO 3-Center Overlap Tensor"", ints);; > }; > ```; > ; > and it is also revealed in the Python interface, which means that you should be able to call it.; > ; > Hopefully someone else can tell how to fit all the pieces together. thanks for your pointers @susilehtola ! yes, i see this code now and this is a good start. so, what is left is for me to define a `psi4`-compatible `BasisSet` to represent the set of Gaussian auxiliary basis functions that I want (say the 60 different ones used by the paper). . it would be fantastic if anyone could give pointers on this!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2892#issuecomment-1459905386
https://github.com/psi4/psi4/issues/2893#issuecomment-1460731784:246,Availability,error,error,246,"The initial issue was that cclib looks for the first line of the header (""Psi4: An Open-Source Ab Initio Electronic Structure Package"") to decide which parser to use. I pasted this into one of the outputs and tried parsing it, but still threw an error. I just ran the same molecule with psithon and tried to parse the output, found the same error. Looks like adding the header text to the start of my output file would fix the issue. Would it be reasonable to add a `header=True` option to the `set_output_file()` function, such that the contents of `header.py` are automatically included?. As for the cclib issue, it looks like the structure of the Convergence Check section has changed since their code was written. I'll file an issue over there to fix that matter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1460731784
https://github.com/psi4/psi4/issues/2893#issuecomment-1460731784:341,Availability,error,error,341,"The initial issue was that cclib looks for the first line of the header (""Psi4: An Open-Source Ab Initio Electronic Structure Package"") to decide which parser to use. I pasted this into one of the outputs and tried parsing it, but still threw an error. I just ran the same molecule with psithon and tried to parse the output, found the same error. Looks like adding the header text to the start of my output file would fix the issue. Would it be reasonable to add a `header=True` option to the `set_output_file()` function, such that the contents of `header.py` are automatically included?. As for the cclib issue, it looks like the structure of the Convergence Check section has changed since their code was written. I'll file an issue over there to fix that matter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1460731784
https://github.com/psi4/psi4/issues/2893#issuecomment-1461056596:562,Energy Efficiency,energy,energy,562,"Yes, adding a header=true is possible. What conv crit changed so you know? Geom opt, scf, cc, other? I suspect geom opt since we switched that out in Dec. . So in your Jupiter notebook, you're importing psi4, setting an output file (soon to incl header), running a single job(cclib consumable) closing that output file, processing or storing it, setting another output file, running another single job?. I ask b/c the Jupiter route usually amalgamates lots of outputs (that cclib won't like). Another route would be to have a node that prints the header at each energy/gradient/Hess/opt/freq call.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1461056596
https://github.com/psi4/psi4/issues/2893#issuecomment-1461056596:426,Integrability,rout,route,426,"Yes, adding a header=true is possible. What conv crit changed so you know? Geom opt, scf, cc, other? I suspect geom opt since we switched that out in Dec. . So in your Jupiter notebook, you're importing psi4, setting an output file (soon to incl header), running a single job(cclib consumable) closing that output file, processing or storing it, setting another output file, running another single job?. I ask b/c the Jupiter route usually amalgamates lots of outputs (that cclib won't like). Another route would be to have a node that prints the header at each energy/gradient/Hess/opt/freq call.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1461056596
https://github.com/psi4/psi4/issues/2893#issuecomment-1461056596:501,Integrability,rout,route,501,"Yes, adding a header=true is possible. What conv crit changed so you know? Geom opt, scf, cc, other? I suspect geom opt since we switched that out in Dec. . So in your Jupiter notebook, you're importing psi4, setting an output file (soon to incl header), running a single job(cclib consumable) closing that output file, processing or storing it, setting another output file, running another single job?. I ask b/c the Jupiter route usually amalgamates lots of outputs (that cclib won't like). Another route would be to have a node that prints the header at each energy/gradient/Hess/opt/freq call.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1461056596
https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608:554,Integrability,rout,routines,554,"I was doing a geometry optimization, and only the header changed. The cclib parser skips the header lines by content and the recent psi4 output has a different sequence of blank lines and info. . As for my application, I'm trying to teach chemistry students a bit of computational chemistry. The specific goal is to calculate geometry, vibrational modes and perform a PES scan on H3O+ using two levels of theory. So once the geometry is defined, I'm setting the output file, calling `psi4.print_header()`, then running the `optimize()` and `frequency()` routines. After fixing the (outdated) cclib parser, all the data seems to come through correctly. . Cclib just needs to see that initial line (""Psi4: An Open-Source Ab Initio Electronic Structure Package"") when it starts reading to assign the correct parsing file. I couldn't find any way to manually specify a parser.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608
https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608:23,Performance,optimiz,optimization,23,"I was doing a geometry optimization, and only the header changed. The cclib parser skips the header lines by content and the recent psi4 output has a different sequence of blank lines and info. . As for my application, I'm trying to teach chemistry students a bit of computational chemistry. The specific goal is to calculate geometry, vibrational modes and perform a PES scan on H3O+ using two levels of theory. So once the geometry is defined, I'm setting the output file, calling `psi4.print_header()`, then running the `optimize()` and `frequency()` routines. After fixing the (outdated) cclib parser, all the data seems to come through correctly. . Cclib just needs to see that initial line (""Psi4: An Open-Source Ab Initio Electronic Structure Package"") when it starts reading to assign the correct parsing file. I couldn't find any way to manually specify a parser.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608
https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608:358,Performance,perform,perform,358,"I was doing a geometry optimization, and only the header changed. The cclib parser skips the header lines by content and the recent psi4 output has a different sequence of blank lines and info. . As for my application, I'm trying to teach chemistry students a bit of computational chemistry. The specific goal is to calculate geometry, vibrational modes and perform a PES scan on H3O+ using two levels of theory. So once the geometry is defined, I'm setting the output file, calling `psi4.print_header()`, then running the `optimize()` and `frequency()` routines. After fixing the (outdated) cclib parser, all the data seems to come through correctly. . Cclib just needs to see that initial line (""Psi4: An Open-Source Ab Initio Electronic Structure Package"") when it starts reading to assign the correct parsing file. I couldn't find any way to manually specify a parser.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608
https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608:524,Performance,optimiz,optimize,524,"I was doing a geometry optimization, and only the header changed. The cclib parser skips the header lines by content and the recent psi4 output has a different sequence of blank lines and info. . As for my application, I'm trying to teach chemistry students a bit of computational chemistry. The specific goal is to calculate geometry, vibrational modes and perform a PES scan on H3O+ using two levels of theory. So once the geometry is defined, I'm setting the output file, calling `psi4.print_header()`, then running the `optimize()` and `frequency()` routines. After fixing the (outdated) cclib parser, all the data seems to come through correctly. . Cclib just needs to see that initial line (""Psi4: An Open-Source Ab Initio Electronic Structure Package"") when it starts reading to assign the correct parsing file. I couldn't find any way to manually specify a parser.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2893#issuecomment-1463919608
https://github.com/psi4/psi4/issues/2894#issuecomment-1465255536:88,Deployability,install,install,88,"Something's very peculiar with the setup if you're getting windows conflicts on a linux install. If it's windows you're targeting, the c-f channel is needed (Win;conda;3.8;stable from https://psicode.org/installs/v17/).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2894#issuecomment-1465255536
https://github.com/psi4/psi4/issues/2894#issuecomment-1465255536:204,Deployability,install,installs,204,"Something's very peculiar with the setup if you're getting windows conflicts on a linux install. If it's windows you're targeting, the c-f channel is needed (Win;conda;3.8;stable from https://psicode.org/installs/v17/).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2894#issuecomment-1465255536
https://github.com/psi4/psi4/pull/2895#issuecomment-1468730524:306,Safety,detect,detection,306,"> I would strongly prefer if Psi4 retained at least some compatibility with BLAS/LAPACK implementations beyond MKL/Accelerate, like OpenBLAS which does implement extensions like daxpby. Oh, yes, I agree that Psi4 should continue to/strive to work with a range of implementations. Right now it's not bad at detection. But non-MKL doesn't get tried out too often. I'll see how OpenBLAS fares again soon when I try c-f psi4. There, the recc is to compile against netlib, then let user choose the backend at runtime. Alternately, one can hard-code MKL, etc. It's good to see that OpenBLAS with OpenMP is now an option (https://github.com/conda-forge/openblas-feedstock/blob/main/recipe/meta.yaml#L20). I think it was pthreads only a few years ago. My comment on ""works only for MKL or Accelerate"" was meant for only the daxpby check, so we're not blocking the Accelerate folks. > It is disappointing that Apple's budget does not seem to cover updating their LAPACK library with contemporary extensions. Hear, hear! And fix bugs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1468730524
https://github.com/psi4/psi4/pull/2895#issuecomment-1501178407:420,Integrability,interface,interface,420,"> if the goal is to re-enable compilation on apple Silicon with Accelerate, then we also need to take care of DGGSVD3/DGGSVP3, which are not shipped with the library. These functions are not used or exported to the python side by psi4. Yes, that was the intent -- to reenable Accelerate. Thanks for posting to get this on record. As far as I recall and observe, the lapack plan for psi has been for libqt to provide a C interface for all lapack, whether used internally or not, so that plugins can depend on psi for all blas/lapack. Python exports are as-needed. The latter function generically (not Matrix) could be handled by numpy nowadays. Whether we want to continue to serve the role of clapack is probably a question for a psi conf call. I agree, checking for those fns and conditionally excluding them at build-time is what I should do with this PR. What I don't like about it is that it's not going to work with the c-f scheme (https://conda-forge.org/docs/maintainer/knowledge_base.html#how-it-works) where one builds against a standards-compliant generic lapack, then, perhaps, switchs to Accelerate at runtime. I haven't run across a substitution I can define for DGGSVD3/DGGSVP3 -- has anyone else? Apple's recalcitrant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1501178407
https://github.com/psi4/psi4/pull/2895#issuecomment-1501178407:498,Integrability,depend,depend,498,"> if the goal is to re-enable compilation on apple Silicon with Accelerate, then we also need to take care of DGGSVD3/DGGSVP3, which are not shipped with the library. These functions are not used or exported to the python side by psi4. Yes, that was the intent -- to reenable Accelerate. Thanks for posting to get this on record. As far as I recall and observe, the lapack plan for psi has been for libqt to provide a C interface for all lapack, whether used internally or not, so that plugins can depend on psi for all blas/lapack. Python exports are as-needed. The latter function generically (not Matrix) could be handled by numpy nowadays. Whether we want to continue to serve the role of clapack is probably a question for a psi conf call. I agree, checking for those fns and conditionally excluding them at build-time is what I should do with this PR. What I don't like about it is that it's not going to work with the c-f scheme (https://conda-forge.org/docs/maintainer/knowledge_base.html#how-it-works) where one builds against a standards-compliant generic lapack, then, perhaps, switchs to Accelerate at runtime. I haven't run across a substitution I can define for DGGSVD3/DGGSVP3 -- has anyone else? Apple's recalcitrant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1501178407
https://github.com/psi4/psi4/pull/2895#issuecomment-1501178407:486,Modifiability,plugin,plugins,486,"> if the goal is to re-enable compilation on apple Silicon with Accelerate, then we also need to take care of DGGSVD3/DGGSVP3, which are not shipped with the library. These functions are not used or exported to the python side by psi4. Yes, that was the intent -- to reenable Accelerate. Thanks for posting to get this on record. As far as I recall and observe, the lapack plan for psi has been for libqt to provide a C interface for all lapack, whether used internally or not, so that plugins can depend on psi for all blas/lapack. Python exports are as-needed. The latter function generically (not Matrix) could be handled by numpy nowadays. Whether we want to continue to serve the role of clapack is probably a question for a psi conf call. I agree, checking for those fns and conditionally excluding them at build-time is what I should do with this PR. What I don't like about it is that it's not going to work with the c-f scheme (https://conda-forge.org/docs/maintainer/knowledge_base.html#how-it-works) where one builds against a standards-compliant generic lapack, then, perhaps, switchs to Accelerate at runtime. I haven't run across a substitution I can define for DGGSVD3/DGGSVP3 -- has anyone else? Apple's recalcitrant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1501178407
https://github.com/psi4/psi4/pull/2895#issuecomment-1520885541:118,Availability,error,error,118,"Ok, hopefully the latest commit has made Psi4 safe for Accelerate again. I wasn't able to recreate the missing symbol error on Linux, but I think these workarounds will suffice. I at least got the CMake to find the MKL fns and then not find them under a different name.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1520885541
https://github.com/psi4/psi4/pull/2895#issuecomment-1520885541:46,Safety,safe,safe,46,"Ok, hopefully the latest commit has made Psi4 safe for Accelerate again. I wasn't able to recreate the missing symbol error on Linux, but I think these workarounds will suffice. I at least got the CMake to find the MKL fns and then not find them under a different name.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1520885541
https://github.com/psi4/psi4/issues/2897#issuecomment-1467564524:111,Availability,avail,available,111,"Note that the SAD guess in Psi4 is not the best one possible, as it is not symmetry aware. Such a SAD guess is available in PySCF, and it is also directly accessible from Python. I have planned to rectify the situation in Psi4 in the future, but I have some other projects to finish before that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467564524
https://github.com/psi4/psi4/issues/2897#issuecomment-1467564524:155,Security,access,accessible,155,"Note that the SAD guess in Psi4 is not the best one possible, as it is not symmetry aware. Such a SAD guess is available in PySCF, and it is also directly accessible from Python. I have planned to rectify the situation in Psi4 in the future, but I have some other projects to finish before that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467564524
https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397:10,Deployability,update,update,10,"i have an update, i found this open PR (which hasn't been merged since 2018) on `psi4numpy` https://github.com/psi4/psi4numpy/pull/36/files . and adapted the code, and it works, though I couldn't specify the `dft_functional = ""WB97X-D""` parameter, but I believe it doesn't matter for the initial guess. . ```python; mol = psi4_geo. # cant specify 'dft_functional': ""WB97X-D"", not valid; psi4.set_options({'basis': 'def2-svp',; 'scf__reference': 'rhf',; # 'scf__dft_functional': ""WB97X-D"",; 'e_convergence': 1e-8}). # Integral generation from Psi4's MintsHelper; wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); # t = time.time(); mints = psi4.core.MintsHelper(wfn.basisset()); S = np.asarray(mints.ao_overlap()). # Get nbf and ndocc for closed shell molecules; nbf = S.shape[0]; ndocc = wfn.nalpha(). print('\nNumber of occupied orbitals: %d' % ndocc); print('Number of basis functions: %d' % nbf). # Set SAD basis sets; nbeta = wfn.nbeta(); psi4.core.prepare_options_for_module(""SCF""); sad_basis_list = psi4.core.BasisSet.build(wfn.molecule(), ""ORBITAL"",; psi4.core.get_global_option(""BASIS""), puream=wfn.basisset().has_puream(),; return_atomlist=True). sad_fitting_list = psi4.core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SAD"",; psi4.core.get_option(""SCF"", ""DF_BASIS_SAD""), puream=wfn.basisset().has_puream(),; return_atomlist=True). # Use Psi4 SADGuess object to build the SAD Guess; SAD = psi4.core.SADGuess.build_SAD(wfn.basisset(), sad_basis_list) # , ndocc, nbeta; SAD.set_atomic_fit_bases(sad_fitting_list); SAD.compute_guess();; D = SAD.Da(); sad_guess_manual = D.to_array(); ```. however, when I compare this `sad_guess_manual` with the density matrix from the full SCF with `maxiter = 0`, they are not close :( ; ```python; # run full SCF but limit maxiter to 0; psi4.set_options(; {; ""scf__reference"": ""rhf"",; ""scf__maxiter"": 0,; ""scf__fail_on_maxiter"": False; }; ); energy_sad, wfn_sad = psi4.energy('scf/def2-svp', dft_functional=""WB97X-D"", molecule=psi4_g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397
https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397:146,Energy Efficiency,adapt,adapted,146,"i have an update, i found this open PR (which hasn't been merged since 2018) on `psi4numpy` https://github.com/psi4/psi4numpy/pull/36/files . and adapted the code, and it works, though I couldn't specify the `dft_functional = ""WB97X-D""` parameter, but I believe it doesn't matter for the initial guess. . ```python; mol = psi4_geo. # cant specify 'dft_functional': ""WB97X-D"", not valid; psi4.set_options({'basis': 'def2-svp',; 'scf__reference': 'rhf',; # 'scf__dft_functional': ""WB97X-D"",; 'e_convergence': 1e-8}). # Integral generation from Psi4's MintsHelper; wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); # t = time.time(); mints = psi4.core.MintsHelper(wfn.basisset()); S = np.asarray(mints.ao_overlap()). # Get nbf and ndocc for closed shell molecules; nbf = S.shape[0]; ndocc = wfn.nalpha(). print('\nNumber of occupied orbitals: %d' % ndocc); print('Number of basis functions: %d' % nbf). # Set SAD basis sets; nbeta = wfn.nbeta(); psi4.core.prepare_options_for_module(""SCF""); sad_basis_list = psi4.core.BasisSet.build(wfn.molecule(), ""ORBITAL"",; psi4.core.get_global_option(""BASIS""), puream=wfn.basisset().has_puream(),; return_atomlist=True). sad_fitting_list = psi4.core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SAD"",; psi4.core.get_option(""SCF"", ""DF_BASIS_SAD""), puream=wfn.basisset().has_puream(),; return_atomlist=True). # Use Psi4 SADGuess object to build the SAD Guess; SAD = psi4.core.SADGuess.build_SAD(wfn.basisset(), sad_basis_list) # , ndocc, nbeta; SAD.set_atomic_fit_bases(sad_fitting_list); SAD.compute_guess();; D = SAD.Da(); sad_guess_manual = D.to_array(); ```. however, when I compare this `sad_guess_manual` with the density matrix from the full SCF with `maxiter = 0`, they are not close :( ; ```python; # run full SCF but limit maxiter to 0; psi4.set_options(; {; ""scf__reference"": ""rhf"",; ""scf__maxiter"": 0,; ""scf__fail_on_maxiter"": False; }; ); energy_sad, wfn_sad = psi4.energy('scf/def2-svp', dft_functional=""WB97X-D"", molecule=psi4_g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397
https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397:1937,Energy Efficiency,energy,energy,1937,"l = psi4_geo. # cant specify 'dft_functional': ""WB97X-D"", not valid; psi4.set_options({'basis': 'def2-svp',; 'scf__reference': 'rhf',; # 'scf__dft_functional': ""WB97X-D"",; 'e_convergence': 1e-8}). # Integral generation from Psi4's MintsHelper; wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); # t = time.time(); mints = psi4.core.MintsHelper(wfn.basisset()); S = np.asarray(mints.ao_overlap()). # Get nbf and ndocc for closed shell molecules; nbf = S.shape[0]; ndocc = wfn.nalpha(). print('\nNumber of occupied orbitals: %d' % ndocc); print('Number of basis functions: %d' % nbf). # Set SAD basis sets; nbeta = wfn.nbeta(); psi4.core.prepare_options_for_module(""SCF""); sad_basis_list = psi4.core.BasisSet.build(wfn.molecule(), ""ORBITAL"",; psi4.core.get_global_option(""BASIS""), puream=wfn.basisset().has_puream(),; return_atomlist=True). sad_fitting_list = psi4.core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SAD"",; psi4.core.get_option(""SCF"", ""DF_BASIS_SAD""), puream=wfn.basisset().has_puream(),; return_atomlist=True). # Use Psi4 SADGuess object to build the SAD Guess; SAD = psi4.core.SADGuess.build_SAD(wfn.basisset(), sad_basis_list) # , ndocc, nbeta; SAD.set_atomic_fit_bases(sad_fitting_list); SAD.compute_guess();; D = SAD.Da(); sad_guess_manual = D.to_array(); ```. however, when I compare this `sad_guess_manual` with the density matrix from the full SCF with `maxiter = 0`, they are not close :( ; ```python; # run full SCF but limit maxiter to 0; psi4.set_options(; {; ""scf__reference"": ""rhf"",; ""scf__maxiter"": 0,; ""scf__fail_on_maxiter"": False; }; ); energy_sad, wfn_sad = psi4.energy('scf/def2-svp', dft_functional=""WB97X-D"", molecule=psi4_geo, return_wfn=True); density_mat_0iters = wfn_sad.Da().to_array(). np.isclose(sad_guess_manual, density_mat_0iters, atol=1e-5).sum() / (density_mat_0iters.shape[0] ** 2); >> 0.08549818 # should be close to 1.00 but no :/ ; ```. i think this must mean that even setting `maxiter = 0` already evolves the initial guess",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397
https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397:146,Modifiability,adapt,adapted,146,"i have an update, i found this open PR (which hasn't been merged since 2018) on `psi4numpy` https://github.com/psi4/psi4numpy/pull/36/files . and adapted the code, and it works, though I couldn't specify the `dft_functional = ""WB97X-D""` parameter, but I believe it doesn't matter for the initial guess. . ```python; mol = psi4_geo. # cant specify 'dft_functional': ""WB97X-D"", not valid; psi4.set_options({'basis': 'def2-svp',; 'scf__reference': 'rhf',; # 'scf__dft_functional': ""WB97X-D"",; 'e_convergence': 1e-8}). # Integral generation from Psi4's MintsHelper; wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); # t = time.time(); mints = psi4.core.MintsHelper(wfn.basisset()); S = np.asarray(mints.ao_overlap()). # Get nbf and ndocc for closed shell molecules; nbf = S.shape[0]; ndocc = wfn.nalpha(). print('\nNumber of occupied orbitals: %d' % ndocc); print('Number of basis functions: %d' % nbf). # Set SAD basis sets; nbeta = wfn.nbeta(); psi4.core.prepare_options_for_module(""SCF""); sad_basis_list = psi4.core.BasisSet.build(wfn.molecule(), ""ORBITAL"",; psi4.core.get_global_option(""BASIS""), puream=wfn.basisset().has_puream(),; return_atomlist=True). sad_fitting_list = psi4.core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SAD"",; psi4.core.get_option(""SCF"", ""DF_BASIS_SAD""), puream=wfn.basisset().has_puream(),; return_atomlist=True). # Use Psi4 SADGuess object to build the SAD Guess; SAD = psi4.core.SADGuess.build_SAD(wfn.basisset(), sad_basis_list) # , ndocc, nbeta; SAD.set_atomic_fit_bases(sad_fitting_list); SAD.compute_guess();; D = SAD.Da(); sad_guess_manual = D.to_array(); ```. however, when I compare this `sad_guess_manual` with the density matrix from the full SCF with `maxiter = 0`, they are not close :( ; ```python; # run full SCF but limit maxiter to 0; psi4.set_options(; {; ""scf__reference"": ""rhf"",; ""scf__maxiter"": 0,; ""scf__fail_on_maxiter"": False; }; ); energy_sad, wfn_sad = psi4.energy('scf/def2-svp', dft_functional=""WB97X-D"", molecule=psi4_g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397
https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397:2293,Modifiability,evolve,evolves,2293,"l = psi4_geo. # cant specify 'dft_functional': ""WB97X-D"", not valid; psi4.set_options({'basis': 'def2-svp',; 'scf__reference': 'rhf',; # 'scf__dft_functional': ""WB97X-D"",; 'e_convergence': 1e-8}). # Integral generation from Psi4's MintsHelper; wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); # t = time.time(); mints = psi4.core.MintsHelper(wfn.basisset()); S = np.asarray(mints.ao_overlap()). # Get nbf and ndocc for closed shell molecules; nbf = S.shape[0]; ndocc = wfn.nalpha(). print('\nNumber of occupied orbitals: %d' % ndocc); print('Number of basis functions: %d' % nbf). # Set SAD basis sets; nbeta = wfn.nbeta(); psi4.core.prepare_options_for_module(""SCF""); sad_basis_list = psi4.core.BasisSet.build(wfn.molecule(), ""ORBITAL"",; psi4.core.get_global_option(""BASIS""), puream=wfn.basisset().has_puream(),; return_atomlist=True). sad_fitting_list = psi4.core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SAD"",; psi4.core.get_option(""SCF"", ""DF_BASIS_SAD""), puream=wfn.basisset().has_puream(),; return_atomlist=True). # Use Psi4 SADGuess object to build the SAD Guess; SAD = psi4.core.SADGuess.build_SAD(wfn.basisset(), sad_basis_list) # , ndocc, nbeta; SAD.set_atomic_fit_bases(sad_fitting_list); SAD.compute_guess();; D = SAD.Da(); sad_guess_manual = D.to_array(); ```. however, when I compare this `sad_guess_manual` with the density matrix from the full SCF with `maxiter = 0`, they are not close :( ; ```python; # run full SCF but limit maxiter to 0; psi4.set_options(; {; ""scf__reference"": ""rhf"",; ""scf__maxiter"": 0,; ""scf__fail_on_maxiter"": False; }; ); energy_sad, wfn_sad = psi4.energy('scf/def2-svp', dft_functional=""WB97X-D"", molecule=psi4_geo, return_wfn=True); density_mat_0iters = wfn_sad.Da().to_array(). np.isclose(sad_guess_manual, density_mat_0iters, atol=1e-5).sum() / (density_mat_0iters.shape[0] ** 2); >> 0.08549818 # should be close to 1.00 but no :/ ; ```. i think this must mean that even setting `maxiter = 0` already evolves the initial guess",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397
https://github.com/psi4/psi4/issues/2897#issuecomment-1467597056:113,Availability,avail,available,113,"> Note that the SAD guess in Psi4 is not the best one possible, as it is not symmetry aware. Such a SAD guess is available in PySCF, and it is also directly accessible from Python.; > ; > I have planned to rectify the situation in Psi4 in the future, but I have some other projects to finish before that. thanks for this very useful pointer! I will then give `PySCF` a try. however, my main concern with `PySCF` is, after getting the SAD Guess from it, I have to reorder the rows and columns of the density matrix, so that it aligns with the ordering in `psi4` ? I believe these 2 programs do not have the same ordering (but I'm not certain). I need to do this as most of my workflow is centred in `psi4`, and a large amount of calculations of density matrices have already been done with `psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467597056
https://github.com/psi4/psi4/issues/2897#issuecomment-1467597056:157,Security,access,accessible,157,"> Note that the SAD guess in Psi4 is not the best one possible, as it is not symmetry aware. Such a SAD guess is available in PySCF, and it is also directly accessible from Python.; > ; > I have planned to rectify the situation in Psi4 in the future, but I have some other projects to finish before that. thanks for this very useful pointer! I will then give `PySCF` a try. however, my main concern with `PySCF` is, after getting the SAD Guess from it, I have to reorder the rows and columns of the density matrix, so that it aligns with the ordering in `psi4` ? I believe these 2 programs do not have the same ordering (but I'm not certain). I need to do this as most of my workflow is centred in `psi4`, and a large amount of calculations of density matrices have already been done with `psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467597056
https://github.com/psi4/psi4/issues/2897#issuecomment-1469841907:362,Integrability,interoperab,interoperable,362,"> would you have any thoughts/concerns on doing the SAD guessing in `PySCF` and then doing the row/col re-ordering?. What do you need the guesses for? PySCF can also be used to run similar calculations as Psi4. I don't know if there are differences between the basis function conventions between Psi4 and PySCF. Unfortunately, quantum chemistry programs are not interoperable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1469841907
https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276:377,Integrability,interoperab,interoperable,377,"> > would you have any thoughts/concerns on doing the SAD guessing in `PySCF` and then doing the row/col re-ordering?; > ; > What do you need the guesses for? PySCF can also be used to run similar calculations as Psi4.; > ; > I don't know if there are differences between the basis function conventions between Psi4 and PySCF. Unfortunately, quantum chemistry programs are not interoperable. I'm trying to build a ML model that can predict the converged density matrix. To verify whether the model is of any value, I wish to plug the predictions into a quantum chemistry program. . The problem is that the dataset I'm using (`QMugs`) has used `psi4` to calculate ""groundtruth"" energies & density matrices at the DFT level. So, my ML model is learning to output density matrices with the ordering convention used by `psi4`. If I wish to plug it into a different software, like `PySCF`, I believe I'll have to do some re-ordering or transformations... Would simply re-ordering the rows/columns not work? (my understanding was that if the basis set was identical, but just that one program uses say `px py pz` vs another using `pz py px` a reordering would suffice, but I'm not exactly a quantum chemistry expert...). Similarly, I wish to compare the convergence rates of my ML model's predicted density matrices against default initial guesses, and also just look at the matrices themselves to compare how they look like (for my own understanding/analysis)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276
https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276:432,Safety,predict,predict,432,"> > would you have any thoughts/concerns on doing the SAD guessing in `PySCF` and then doing the row/col re-ordering?; > ; > What do you need the guesses for? PySCF can also be used to run similar calculations as Psi4.; > ; > I don't know if there are differences between the basis function conventions between Psi4 and PySCF. Unfortunately, quantum chemistry programs are not interoperable. I'm trying to build a ML model that can predict the converged density matrix. To verify whether the model is of any value, I wish to plug the predictions into a quantum chemistry program. . The problem is that the dataset I'm using (`QMugs`) has used `psi4` to calculate ""groundtruth"" energies & density matrices at the DFT level. So, my ML model is learning to output density matrices with the ordering convention used by `psi4`. If I wish to plug it into a different software, like `PySCF`, I believe I'll have to do some re-ordering or transformations... Would simply re-ordering the rows/columns not work? (my understanding was that if the basis set was identical, but just that one program uses say `px py pz` vs another using `pz py px` a reordering would suffice, but I'm not exactly a quantum chemistry expert...). Similarly, I wish to compare the convergence rates of my ML model's predicted density matrices against default initial guesses, and also just look at the matrices themselves to compare how they look like (for my own understanding/analysis)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276
https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276:534,Safety,predict,predictions,534,"> > would you have any thoughts/concerns on doing the SAD guessing in `PySCF` and then doing the row/col re-ordering?; > ; > What do you need the guesses for? PySCF can also be used to run similar calculations as Psi4.; > ; > I don't know if there are differences between the basis function conventions between Psi4 and PySCF. Unfortunately, quantum chemistry programs are not interoperable. I'm trying to build a ML model that can predict the converged density matrix. To verify whether the model is of any value, I wish to plug the predictions into a quantum chemistry program. . The problem is that the dataset I'm using (`QMugs`) has used `psi4` to calculate ""groundtruth"" energies & density matrices at the DFT level. So, my ML model is learning to output density matrices with the ordering convention used by `psi4`. If I wish to plug it into a different software, like `PySCF`, I believe I'll have to do some re-ordering or transformations... Would simply re-ordering the rows/columns not work? (my understanding was that if the basis set was identical, but just that one program uses say `px py pz` vs another using `pz py px` a reordering would suffice, but I'm not exactly a quantum chemistry expert...). Similarly, I wish to compare the convergence rates of my ML model's predicted density matrices against default initial guesses, and also just look at the matrices themselves to compare how they look like (for my own understanding/analysis)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276
https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276:1283,Safety,predict,predicted,1283,"> > would you have any thoughts/concerns on doing the SAD guessing in `PySCF` and then doing the row/col re-ordering?; > ; > What do you need the guesses for? PySCF can also be used to run similar calculations as Psi4.; > ; > I don't know if there are differences between the basis function conventions between Psi4 and PySCF. Unfortunately, quantum chemistry programs are not interoperable. I'm trying to build a ML model that can predict the converged density matrix. To verify whether the model is of any value, I wish to plug the predictions into a quantum chemistry program. . The problem is that the dataset I'm using (`QMugs`) has used `psi4` to calculate ""groundtruth"" energies & density matrices at the DFT level. So, my ML model is learning to output density matrices with the ordering convention used by `psi4`. If I wish to plug it into a different software, like `PySCF`, I believe I'll have to do some re-ordering or transformations... Would simply re-ordering the rows/columns not work? (my understanding was that if the basis set was identical, but just that one program uses say `px py pz` vs another using `pz py px` a reordering would suffice, but I'm not exactly a quantum chemistry expert...). Similarly, I wish to compare the convergence rates of my ML model's predicted density matrices against default initial guesses, and also just look at the matrices themselves to compare how they look like (for my own understanding/analysis)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276
https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276:742,Usability,learn,learning,742,"> > would you have any thoughts/concerns on doing the SAD guessing in `PySCF` and then doing the row/col re-ordering?; > ; > What do you need the guesses for? PySCF can also be used to run similar calculations as Psi4.; > ; > I don't know if there are differences between the basis function conventions between Psi4 and PySCF. Unfortunately, quantum chemistry programs are not interoperable. I'm trying to build a ML model that can predict the converged density matrix. To verify whether the model is of any value, I wish to plug the predictions into a quantum chemistry program. . The problem is that the dataset I'm using (`QMugs`) has used `psi4` to calculate ""groundtruth"" energies & density matrices at the DFT level. So, my ML model is learning to output density matrices with the ordering convention used by `psi4`. If I wish to plug it into a different software, like `PySCF`, I believe I'll have to do some re-ordering or transformations... Would simply re-ordering the rows/columns not work? (my understanding was that if the basis set was identical, but just that one program uses say `px py pz` vs another using `pz py px` a reordering would suffice, but I'm not exactly a quantum chemistry expert...). Similarly, I wish to compare the convergence rates of my ML model's predicted density matrices against default initial guesses, and also just look at the matrices themselves to compare how they look like (for my own understanding/analysis)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276
https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276:956,Usability,simpl,simply,956,"> > would you have any thoughts/concerns on doing the SAD guessing in `PySCF` and then doing the row/col re-ordering?; > ; > What do you need the guesses for? PySCF can also be used to run similar calculations as Psi4.; > ; > I don't know if there are differences between the basis function conventions between Psi4 and PySCF. Unfortunately, quantum chemistry programs are not interoperable. I'm trying to build a ML model that can predict the converged density matrix. To verify whether the model is of any value, I wish to plug the predictions into a quantum chemistry program. . The problem is that the dataset I'm using (`QMugs`) has used `psi4` to calculate ""groundtruth"" energies & density matrices at the DFT level. So, my ML model is learning to output density matrices with the ordering convention used by `psi4`. If I wish to plug it into a different software, like `PySCF`, I believe I'll have to do some re-ordering or transformations... Would simply re-ordering the rows/columns not work? (my understanding was that if the basis set was identical, but just that one program uses say `px py pz` vs another using `pz py px` a reordering would suffice, but I'm not exactly a quantum chemistry expert...). Similarly, I wish to compare the convergence rates of my ML model's predicted density matrices against default initial guesses, and also just look at the matrices themselves to compare how they look like (for my own understanding/analysis)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276
https://github.com/psi4/psi4/issues/2897#issuecomment-1470573935:42,Safety,predict,predict,42,"> I'm trying to build a ML model that can predict the converged density matrix. To verify whether the model is of any value, I wish to plug the predictions into a quantum chemistry program. Well, I've worked on initial guesses in [J. Chem. Theory Comput. 15, 1593 (2019)](https://doi.org/10.1021/acs.jctc.8b01089) and [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046); I hope you are aware of these works, the first one being especially topical for what you want to do. If you need quantum chemistry expertise, feel free to reach out. I honestly don't know if it would just be a question of reordering px, py, and pz, or whether there are also differences in the basis functions' normalization and phase.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1470573935
https://github.com/psi4/psi4/issues/2897#issuecomment-1470573935:144,Safety,predict,predictions,144,"> I'm trying to build a ML model that can predict the converged density matrix. To verify whether the model is of any value, I wish to plug the predictions into a quantum chemistry program. Well, I've worked on initial guesses in [J. Chem. Theory Comput. 15, 1593 (2019)](https://doi.org/10.1021/acs.jctc.8b01089) and [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046); I hope you are aware of these works, the first one being especially topical for what you want to do. If you need quantum chemistry expertise, feel free to reach out. I honestly don't know if it would just be a question of reordering px, py, and pz, or whether there are also differences in the basis functions' normalization and phase.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1470573935
https://github.com/psi4/psi4/issues/2898#issuecomment-1468521746:246,Availability,avail,available,246,"No reason you should know this, but `gcc-5-mp` is sign that the solver can't install a recent psi4 into the existing environment and so is instead going back 5+ years to a time when packages were less defensively pinned and conda only had gcc v4 available on defaults channel. I'd suggest creating a new env and specifying the python. If needed, you can specify the psi4 version. And if you've got your setup pulling from conda-forge at higher priority than defaults, you can clobber that, too. So something along the lines of the below, to be over-explicit. Also see https://psicode.org/installs/v17/ if you haven't already. If that works, but you really don't want a separate environment, then try the more explicit install into your working env and/or post back here with your `conda list`, and I'll try to see if there's any red flags. ```; conda create -n p4env python=3.9 psi4=1.7 -c defaults -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468521746
https://github.com/psi4/psi4/issues/2898#issuecomment-1468521746:77,Deployability,install,install,77,"No reason you should know this, but `gcc-5-mp` is sign that the solver can't install a recent psi4 into the existing environment and so is instead going back 5+ years to a time when packages were less defensively pinned and conda only had gcc v4 available on defaults channel. I'd suggest creating a new env and specifying the python. If needed, you can specify the psi4 version. And if you've got your setup pulling from conda-forge at higher priority than defaults, you can clobber that, too. So something along the lines of the below, to be over-explicit. Also see https://psicode.org/installs/v17/ if you haven't already. If that works, but you really don't want a separate environment, then try the more explicit install into your working env and/or post back here with your `conda list`, and I'll try to see if there's any red flags. ```; conda create -n p4env python=3.9 psi4=1.7 -c defaults -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468521746
https://github.com/psi4/psi4/issues/2898#issuecomment-1468521746:588,Deployability,install,installs,588,"No reason you should know this, but `gcc-5-mp` is sign that the solver can't install a recent psi4 into the existing environment and so is instead going back 5+ years to a time when packages were less defensively pinned and conda only had gcc v4 available on defaults channel. I'd suggest creating a new env and specifying the python. If needed, you can specify the psi4 version. And if you've got your setup pulling from conda-forge at higher priority than defaults, you can clobber that, too. So something along the lines of the below, to be over-explicit. Also see https://psicode.org/installs/v17/ if you haven't already. If that works, but you really don't want a separate environment, then try the more explicit install into your working env and/or post back here with your `conda list`, and I'll try to see if there's any red flags. ```; conda create -n p4env python=3.9 psi4=1.7 -c defaults -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468521746
https://github.com/psi4/psi4/issues/2898#issuecomment-1468521746:718,Deployability,install,install,718,"No reason you should know this, but `gcc-5-mp` is sign that the solver can't install a recent psi4 into the existing environment and so is instead going back 5+ years to a time when packages were less defensively pinned and conda only had gcc v4 available on defaults channel. I'd suggest creating a new env and specifying the python. If needed, you can specify the psi4 version. And if you've got your setup pulling from conda-forge at higher priority than defaults, you can clobber that, too. So something along the lines of the below, to be over-explicit. Also see https://psicode.org/installs/v17/ if you haven't already. If that works, but you really don't want a separate environment, then try the more explicit install into your working env and/or post back here with your `conda list`, and I'll try to see if there's any red flags. ```; conda create -n p4env python=3.9 psi4=1.7 -c defaults -c psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468521746
https://github.com/psi4/psi4/issues/2898#issuecomment-1468531129:205,Deployability,install,installation,205,Thanks so much @loriab - I think the conda-forge over defaults must have been the root cause of the issues (I have tried the conda command from the link you sent and was reluctant to have a separate conda installation),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468531129
https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:132,Availability,robust,robust,132,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742
https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:350,Deployability,install,install,350,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742
https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:364,Deployability,install,install,364,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742
https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:763,Deployability,install,installation,763,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742
https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:616,Integrability,depend,dependency,616,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742
https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:441,Safety,safe,safe,441,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742
https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:124,Usability,simpl,simple,124,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742
https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:789,Usability,clear,clear,789,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742
https://github.com/psi4/psi4/issues/2898#issuecomment-1468624824:102,Deployability,install,installer,102,Thanks for those extra points - really good to know. On the second point there I was referring to the installer release - does that not create a new installation (hence the lines to alter the bashrc etc in the installation commands)? [I understand my original post was ambiguous/as clear as mud],MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468624824
https://github.com/psi4/psi4/issues/2898#issuecomment-1468624824:112,Deployability,release,release,112,Thanks for those extra points - really good to know. On the second point there I was referring to the installer release - does that not create a new installation (hence the lines to alter the bashrc etc in the installation commands)? [I understand my original post was ambiguous/as clear as mud],MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468624824
https://github.com/psi4/psi4/issues/2898#issuecomment-1468624824:149,Deployability,install,installation,149,Thanks for those extra points - really good to know. On the second point there I was referring to the installer release - does that not create a new installation (hence the lines to alter the bashrc etc in the installation commands)? [I understand my original post was ambiguous/as clear as mud],MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468624824
https://github.com/psi4/psi4/issues/2898#issuecomment-1468624824:210,Deployability,install,installation,210,Thanks for those extra points - really good to know. On the second point there I was referring to the installer release - does that not create a new installation (hence the lines to alter the bashrc etc in the installation commands)? [I understand my original post was ambiguous/as clear as mud],MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468624824
https://github.com/psi4/psi4/issues/2898#issuecomment-1468624824:282,Usability,clear,clear,282,Thanks for those extra points - really good to know. On the second point there I was referring to the installer release - does that not create a new installation (hence the lines to alter the bashrc etc in the installation commands)? [I understand my original post was ambiguous/as clear as mud],MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468624824
https://github.com/psi4/psi4/issues/2898#issuecomment-1468638876:33,Deployability,install,installer,33,"Yes, you're quite right that the installer release (essentially miniconda with psi4 pre-installed) is a new conda installation. Sorry, for the people willing to type `conda install`, I forget they may have considered the installer. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468638876
https://github.com/psi4/psi4/issues/2898#issuecomment-1468638876:43,Deployability,release,release,43,"Yes, you're quite right that the installer release (essentially miniconda with psi4 pre-installed) is a new conda installation. Sorry, for the people willing to type `conda install`, I forget they may have considered the installer. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468638876
https://github.com/psi4/psi4/issues/2898#issuecomment-1468638876:88,Deployability,install,installed,88,"Yes, you're quite right that the installer release (essentially miniconda with psi4 pre-installed) is a new conda installation. Sorry, for the people willing to type `conda install`, I forget they may have considered the installer. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468638876
https://github.com/psi4/psi4/issues/2898#issuecomment-1468638876:114,Deployability,install,installation,114,"Yes, you're quite right that the installer release (essentially miniconda with psi4 pre-installed) is a new conda installation. Sorry, for the people willing to type `conda install`, I forget they may have considered the installer. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468638876
https://github.com/psi4/psi4/issues/2898#issuecomment-1468638876:173,Deployability,install,install,173,"Yes, you're quite right that the installer release (essentially miniconda with psi4 pre-installed) is a new conda installation. Sorry, for the people willing to type `conda install`, I forget they may have considered the installer. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468638876
https://github.com/psi4/psi4/issues/2898#issuecomment-1468638876:221,Deployability,install,installer,221,"Yes, you're quite right that the installer release (essentially miniconda with psi4 pre-installed) is a new conda installation. Sorry, for the people willing to type `conda install`, I forget they may have considered the installer. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468638876
https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737:145,Energy Efficiency,charge,charged,145,"> Wow, that's quite the involved method. I found a few comments, but lgtm! Main question is: are unsuitable complications like extern-in-system, charged molecule?, etc. stopped early? Thanks for the contribution!. Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737
https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737:275,Energy Efficiency,charge,charged,275,"> Wow, that's quite the involved method. I found a few comments, but lgtm! Main question is: are unsuitable complications like extern-in-system, charged molecule?, etc. stopped early? Thanks for the contribution!. Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737
https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737:407,Integrability,depend,dependent,407,"> Wow, that's quite the involved method. I found a few comments, but lgtm! Main question is: are unsuitable complications like extern-in-system, charged molecule?, etc. stopped early? Thanks for the contribution!. Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737
https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737:457,Testability,test,tested,457,"> Wow, that's quite the involved method. I found a few comments, but lgtm! Main question is: are unsuitable complications like extern-in-system, charged molecule?, etc. stopped early? Thanks for the contribution!. Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737
https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737:229,Usability,feedback,feedback,229,"> Wow, that's quite the involved method. I found a few comments, but lgtm! Main question is: are unsuitable complications like extern-in-system, charged molecule?, etc. stopped early? Thanks for the contribution!. Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737
https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182:63,Energy Efficiency,charge,charged,63,"> Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out. I don't have any particular concerns -- I just noticed your paper was on neutrals and the PR intro mentioned ""Not tested with external potentials."".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182
https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182:195,Integrability,depend,dependent,195,"> Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out. I don't have any particular concerns -- I just noticed your paper was on neutrals and the PR intro mentioned ""Not tested with external potentials."".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182
https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182:245,Testability,test,tested,245,"> Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out. I don't have any particular concerns -- I just noticed your paper was on neutrals and the PR intro mentioned ""Not tested with external potentials."".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182
https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182:430,Testability,test,tested,430,"> Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out. I don't have any particular concerns -- I just noticed your paper was on neutrals and the PR intro mentioned ""Not tested with external potentials."".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182
https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182:17,Usability,feedback,feedback,17,"> Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out. I don't have any particular concerns -- I just noticed your paper was on neutrals and the PR intro mentioned ""Not tested with external potentials."".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182
https://github.com/psi4/psi4/issues/2900#issuecomment-1471582665:427,Deployability,install,installation,427,"> Only things that come to mind are comment out `import forte` as unneeded and fix the quotes around `scf` (may just be font). Posting code by triple backtick rather than screenshot makes it possible to copy. Thank you. I tried what you suggested, but the result is still the same. Also, I ran the example that came with the psi4/tests folder, and it turned out to be the same, so I thought it might be something wrong with my installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2900#issuecomment-1471582665
https://github.com/psi4/psi4/issues/2900#issuecomment-1471582665:330,Testability,test,tests,330,"> Only things that come to mind are comment out `import forte` as unneeded and fix the quotes around `scf` (may just be font). Posting code by triple backtick rather than screenshot makes it possible to copy. Thank you. I tried what you suggested, but the result is still the same. Also, I ran the example that came with the psi4/tests folder, and it turned out to be the same, so I thought it might be something wrong with my installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2900#issuecomment-1471582665
https://github.com/psi4/psi4/issues/2901#issuecomment-1473309599:20,Energy Efficiency,energy,energy,20,"Distance on x-axis, energy on y-axis. Calculations done using Psi4 1.7.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473309599
https://github.com/psi4/psi4/issues/2901#issuecomment-1473356455:114,Energy Efficiency,energy,energy,114,"If you examine `Final Occupation by Irrep` you can see it changes eventually, causing a drastic change in the SCF energy.; It's not a technically issue but an electronic one. What you can try is set `psi4.set_options({'reference': 'uhf', 'guess':'read'})` after the first SCF is done and check if the state still changes. It should help a lot. (And think about which state you want, and/or check which is lower in energy).; Sometimes bond scans are more stable going from long to short distances.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473356455
https://github.com/psi4/psi4/issues/2901#issuecomment-1473356455:414,Energy Efficiency,energy,energy,414,"If you examine `Final Occupation by Irrep` you can see it changes eventually, causing a drastic change in the SCF energy.; It's not a technically issue but an electronic one. What you can try is set `psi4.set_options({'reference': 'uhf', 'guess':'read'})` after the first SCF is done and check if the state still changes. It should help a lot. (And think about which state you want, and/or check which is lower in energy).; Sometimes bond scans are more stable going from long to short distances.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473356455
https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718:6,Energy Efficiency,energy,energy,6,"> The energy is not a smooth function of the distance, however all the calculations have converged SCF. Complete input script which takes a few minutes to run is attached as well as output. There are more examples. Am I missing something in checking for convergence? . Sort of. There is no guarantee that an SCF solution for a particular geometry is unique. The SCF iterations may converge to an ustable HF solution, you can check for this by running the stability analysis. But even if you find a stable HF solution, it is usually impossible to prove that you have found the global minimum. If you are using UHF, you may also want to look into the various forms of symmetry breaking, it is possible that you actually do not want the global minimum UHF solution if it is too spin-symmetry-broken. But if you _are_ looking to find the global minimum for every point of your scan, you are going to have to employ some sort of nonlinear global optimization strategy, the simplest of which is to try a bunch of guesses for every point and use the lowest solution found.; You may get some ideas you could adapt to Psi4 from [this paper of mine.](https://doi.org/10.1063/5.0080817)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718
https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718:1100,Energy Efficiency,adapt,adapt,1100,"> The energy is not a smooth function of the distance, however all the calculations have converged SCF. Complete input script which takes a few minutes to run is attached as well as output. There are more examples. Am I missing something in checking for convergence? . Sort of. There is no guarantee that an SCF solution for a particular geometry is unique. The SCF iterations may converge to an ustable HF solution, you can check for this by running the stability analysis. But even if you find a stable HF solution, it is usually impossible to prove that you have found the global minimum. If you are using UHF, you may also want to look into the various forms of symmetry breaking, it is possible that you actually do not want the global minimum UHF solution if it is too spin-symmetry-broken. But if you _are_ looking to find the global minimum for every point of your scan, you are going to have to employ some sort of nonlinear global optimization strategy, the simplest of which is to try a bunch of guesses for every point and use the lowest solution found.; You may get some ideas you could adapt to Psi4 from [this paper of mine.](https://doi.org/10.1063/5.0080817)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718
https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718:1100,Modifiability,adapt,adapt,1100,"> The energy is not a smooth function of the distance, however all the calculations have converged SCF. Complete input script which takes a few minutes to run is attached as well as output. There are more examples. Am I missing something in checking for convergence? . Sort of. There is no guarantee that an SCF solution for a particular geometry is unique. The SCF iterations may converge to an ustable HF solution, you can check for this by running the stability analysis. But even if you find a stable HF solution, it is usually impossible to prove that you have found the global minimum. If you are using UHF, you may also want to look into the various forms of symmetry breaking, it is possible that you actually do not want the global minimum UHF solution if it is too spin-symmetry-broken. But if you _are_ looking to find the global minimum for every point of your scan, you are going to have to employ some sort of nonlinear global optimization strategy, the simplest of which is to try a bunch of guesses for every point and use the lowest solution found.; You may get some ideas you could adapt to Psi4 from [this paper of mine.](https://doi.org/10.1063/5.0080817)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718
https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718:941,Performance,optimiz,optimization,941,"> The energy is not a smooth function of the distance, however all the calculations have converged SCF. Complete input script which takes a few minutes to run is attached as well as output. There are more examples. Am I missing something in checking for convergence? . Sort of. There is no guarantee that an SCF solution for a particular geometry is unique. The SCF iterations may converge to an ustable HF solution, you can check for this by running the stability analysis. But even if you find a stable HF solution, it is usually impossible to prove that you have found the global minimum. If you are using UHF, you may also want to look into the various forms of symmetry breaking, it is possible that you actually do not want the global minimum UHF solution if it is too spin-symmetry-broken. But if you _are_ looking to find the global minimum for every point of your scan, you are going to have to employ some sort of nonlinear global optimization strategy, the simplest of which is to try a bunch of guesses for every point and use the lowest solution found.; You may get some ideas you could adapt to Psi4 from [this paper of mine.](https://doi.org/10.1063/5.0080817)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718
https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718:968,Usability,simpl,simplest,968,"> The energy is not a smooth function of the distance, however all the calculations have converged SCF. Complete input script which takes a few minutes to run is attached as well as output. There are more examples. Am I missing something in checking for convergence? . Sort of. There is no guarantee that an SCF solution for a particular geometry is unique. The SCF iterations may converge to an ustable HF solution, you can check for this by running the stability analysis. But even if you find a stable HF solution, it is usually impossible to prove that you have found the global minimum. If you are using UHF, you may also want to look into the various forms of symmetry breaking, it is possible that you actually do not want the global minimum UHF solution if it is too spin-symmetry-broken. But if you _are_ looking to find the global minimum for every point of your scan, you are going to have to employ some sort of nonlinear global optimization strategy, the simplest of which is to try a bunch of guesses for every point and use the lowest solution found.; You may get some ideas you could adapt to Psi4 from [this paper of mine.](https://doi.org/10.1063/5.0080817)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718
https://github.com/psi4/psi4/issues/2901#issuecomment-1473868464:220,Energy Efficiency,energy,energy,220,"> Doing as you suggest indeed improves the results to something reasonable. Just wondering whether this is like a systematic solution. For the specific problem of obtaining a smooth curve that continues a particular SCF energy, using guess read is about as much of a systematic solution as you can have. There are cases where an SCF solution simply ceases to exist along a potential energy curve, associated with near-singularities in the MO hessian. In such a case, no convergence trick can help you. If the ""guess read"" technique doesn't work, try adding `set soscf true`. If that still doesn't work, odds are that the solution ceases to exist. (Note: SOSCF is not implemented for DFT functionals with meta or iterative VV10 components.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473868464
https://github.com/psi4/psi4/issues/2901#issuecomment-1473868464:383,Energy Efficiency,energy,energy,383,"> Doing as you suggest indeed improves the results to something reasonable. Just wondering whether this is like a systematic solution. For the specific problem of obtaining a smooth curve that continues a particular SCF energy, using guess read is about as much of a systematic solution as you can have. There are cases where an SCF solution simply ceases to exist along a potential energy curve, associated with near-singularities in the MO hessian. In such a case, no convergence trick can help you. If the ""guess read"" technique doesn't work, try adding `set soscf true`. If that still doesn't work, odds are that the solution ceases to exist. (Note: SOSCF is not implemented for DFT functionals with meta or iterative VV10 components.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473868464
https://github.com/psi4/psi4/issues/2901#issuecomment-1473868464:342,Usability,simpl,simply,342,"> Doing as you suggest indeed improves the results to something reasonable. Just wondering whether this is like a systematic solution. For the specific problem of obtaining a smooth curve that continues a particular SCF energy, using guess read is about as much of a systematic solution as you can have. There are cases where an SCF solution simply ceases to exist along a potential energy curve, associated with near-singularities in the MO hessian. In such a case, no convergence trick can help you. If the ""guess read"" technique doesn't work, try adding `set soscf true`. If that still doesn't work, odds are that the solution ceases to exist. (Note: SOSCF is not implemented for DFT functionals with meta or iterative VV10 components.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473868464
https://github.com/psi4/psi4/pull/2903#issuecomment-1774302846:37,Availability,error,errors,37,The latest version of psi4 is giving errors when using pcmsolver: https://github.com/PCMSolver/pcmsolver/issues/206,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2903#issuecomment-1774302846
https://github.com/psi4/psi4/pull/2905#issuecomment-1479818207:194,Modifiability,parameteriz,parameterized,194,"> Thanks. In that case, can we change the comment at the start of the file to mention that? As written, I thought the two energies were supposed to be identical. Sounds good. This is why I like parameterized pytest for seeing the input differences. @bennybp, did I get the why-different reasons right above? And if you're changing that comment, maybe regenerate the ref file w/o test fail:. https://github.com/psi4/psi4/pull/2905/files#diff-667f7008a6b3ab105b3130447305716990d91451c161ed7eaf1f04886bd32a00R361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2905#issuecomment-1479818207
https://github.com/psi4/psi4/pull/2905#issuecomment-1479818207:379,Testability,test,test,379,"> Thanks. In that case, can we change the comment at the start of the file to mention that? As written, I thought the two energies were supposed to be identical. Sounds good. This is why I like parameterized pytest for seeing the input differences. @bennybp, did I get the why-different reasons right above? And if you're changing that comment, maybe regenerate the ref file w/o test fail:. https://github.com/psi4/psi4/pull/2905/files#diff-667f7008a6b3ab105b3130447305716990d91451c161ed7eaf1f04886bd32a00R361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2905#issuecomment-1479818207
https://github.com/psi4/psi4/pull/2905#issuecomment-1480168547:65,Integrability,interface,interfaces,65,"I'm letting @loriab merge, since she's more familiar with MolSSI interfaces.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2905#issuecomment-1480168547
https://github.com/psi4/psi4/pull/2906#issuecomment-1497949553:18,Availability,error,error,18,"Please update the error message to say that the grid is unusable with COSX, rather than ""better fix"" incoming.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1497949553
https://github.com/psi4/psi4/pull/2906#issuecomment-1497949553:7,Deployability,update,update,7,"Please update the error message to say that the grid is unusable with COSX, rather than ""better fix"" incoming.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1497949553
https://github.com/psi4/psi4/pull/2906#issuecomment-1497949553:24,Integrability,message,message,24,"Please update the error message to say that the grid is unusable with COSX, rather than ""better fix"" incoming.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1497949553
https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769:20,Availability,error,error,20,"> Please update the error message to say that the grid is unusable with COSX, rather than ""better fix"" incoming. > See above. > Maybe language like ""The definition of the current grid includes negative weights. As these are not suitable for the COSX implementation, please choose another grid through ..."". Done and done! Wording changed to match these suggestions. Also, for those not at the Psi4 dev meeting today, it was agreed upon that this PR would indeed be the final fix to the COSX grid issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769
https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769:9,Deployability,update,update,9,"> Please update the error message to say that the grid is unusable with COSX, rather than ""better fix"" incoming. > See above. > Maybe language like ""The definition of the current grid includes negative weights. As these are not suitable for the COSX implementation, please choose another grid through ..."". Done and done! Wording changed to match these suggestions. Also, for those not at the Psi4 dev meeting today, it was agreed upon that this PR would indeed be the final fix to the COSX grid issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769
https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769:26,Integrability,message,message,26,"> Please update the error message to say that the grid is unusable with COSX, rather than ""better fix"" incoming. > See above. > Maybe language like ""The definition of the current grid includes negative weights. As these are not suitable for the COSX implementation, please choose another grid through ..."". Done and done! Wording changed to match these suggestions. Also, for those not at the Psi4 dev meeting today, it was agreed upon that this PR would indeed be the final fix to the COSX grid issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769
https://github.com/psi4/psi4/pull/2906#issuecomment-1509276521:189,Deployability,release,released,189,"@mfherbst , there's a couple of the ddx tests failing now https://github.com/psi4/psi4/actions/runs/4703123664/jobs/8341938828?pr=2906#step:23:739, and I suspect it's because of the v0.4.1 released yesterday since it was working fine with v0.3.0 after your #2918 . Does this sound right? If so, we can pin to v0.3 unless you have a PR in the works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1509276521
https://github.com/psi4/psi4/pull/2906#issuecomment-1509276521:40,Testability,test,tests,40,"@mfherbst , there's a couple of the ddx tests failing now https://github.com/psi4/psi4/actions/runs/4703123664/jobs/8341938828?pr=2906#step:23:739, and I suspect it's because of the v0.4.1 released yesterday since it was working fine with v0.3.0 after your #2918 . Does this sound right? If so, we can pin to v0.3 unless you have a PR in the works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1509276521
https://github.com/psi4/psi4/pull/2909#issuecomment-1483079896:322,Availability,down,downstream,322,"Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed. fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483079896
https://github.com/psi4/psi4/pull/2909#issuecomment-1483079896:151,Integrability,interface,interface,151,"Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed. fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483079896
https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:324,Availability,down,downstream,324,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698
https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:638,Availability,down,downstream,638,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698
https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:1000,Availability,down,downstream,1000,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698
https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:1032,Availability,mainten,maintenance,1032,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698
https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:153,Integrability,interface,interface,153,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698
https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:705,Integrability,interface,interfaces,705,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698
https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:785,Integrability,interface,interfaces,785,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698
https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:987,Integrability,interface,interface,987,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698
https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:1317,Integrability,interface,interface,1317,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698
https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:602,Security,expose,expose,602,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698
https://github.com/psi4/psi4/pull/2909#issuecomment-1483209663:177,Availability,down,downstream,177,"> I don't like the idea of removing these functions. Some of us in Francesco's group use `swap_columns` to move orbitals in the C matrix. Thanks, I have no intention of causing downstream pain by axing it if it is actually being used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483209663
https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:178,Availability,down,downstream,178,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672
https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:485,Availability,down,downstream,485,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672
https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:704,Availability,down,downstream,704,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672
https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:736,Availability,mainten,maintenance,736,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672
https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:245,Integrability,interface,interfaces,245,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672
https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:325,Integrability,interface,interfaces,325,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672
https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:691,Integrability,interface,interface,691,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672
https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:1021,Integrability,interface,interface,1021,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672
https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:1339,Integrability,interface,interface,1339,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672
https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:500,Modifiability,plugin,plugins,500,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672
https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:1138,Safety,detect,detection,1138,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672
https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:142,Security,expose,expose,142,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672
https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:1152,Testability,test,testing,1152,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672
https://github.com/psi4/psi4/issues/2910#issuecomment-1485812391:83,Availability,error,errors,83,"I think it should be possible, provided the optimizer cooperates. Have you hit any errors yet? If the molecule gives trouble, you can define it within the loop like https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883 so that each step is independent. You could also try the geomeTRIC optimizers instead of default optking. Also note that OpenFF runs oodles of psi4/geomeTRIC torsion scans through QCArchive, if you need to scale up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485812391
https://github.com/psi4/psi4/issues/2910#issuecomment-1485812391:44,Performance,optimiz,optimizer,44,"I think it should be possible, provided the optimizer cooperates. Have you hit any errors yet? If the molecule gives trouble, you can define it within the loop like https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883 so that each step is independent. You could also try the geomeTRIC optimizers instead of default optking. Also note that OpenFF runs oodles of psi4/geomeTRIC torsion scans through QCArchive, if you need to scale up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485812391
https://github.com/psi4/psi4/issues/2910#issuecomment-1485812391:297,Performance,optimiz,optimizers,297,"I think it should be possible, provided the optimizer cooperates. Have you hit any errors yet? If the molecule gives trouble, you can define it within the loop like https://github.com/psi4/psi4/issues/2880#issuecomment-1444654883 so that each step is independent. You could also try the geomeTRIC optimizers instead of default optking. Also note that OpenFF runs oodles of psi4/geomeTRIC torsion scans through QCArchive, if you need to scale up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485812391
https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821:98,Deployability,update,update,98,"Just to add to everyone else's guidance. Yes you can use cartesian coordinates. Just note that to update the geometry,without using a zmatrix, you'll want to use the `ranged_dihedral` keyword instead of `frozen_dihedral`. You can still freeze dihedrals with cartesian geometries, they just can't be set directly in the input file. `ranged_dihedral` sets a target value for the optimizer to optimize towards. . ```import psi4 ; ; hooh = psi4.geometry(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """""") ; ; psi4.set_options({ ; ""basis"": ""cc-pvdz"", ; ""intrafrag_step_limit"": 0.1, ; }) ; ; dihedrals = [100, 110, 120, 130, 140, 150] ; PES = [] ; ; for phi in dihedrals: ; psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ; E = psi4.optimize('scf', mol=hooh) ; PES.append((phi, E)) ; ; print(""\n\tcc-pVDZ SCF energy as a function of phi\n"") ; for point in PES: ; print(""\t%5.1f%20.10f"" % (point[0], point[1])) ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821
https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821:1002,Energy Efficiency,energy,energy,1002,"Just to add to everyone else's guidance. Yes you can use cartesian coordinates. Just note that to update the geometry,without using a zmatrix, you'll want to use the `ranged_dihedral` keyword instead of `frozen_dihedral`. You can still freeze dihedrals with cartesian geometries, they just can't be set directly in the input file. `ranged_dihedral` sets a target value for the optimizer to optimize towards. . ```import psi4 ; ; hooh = psi4.geometry(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """""") ; ; psi4.set_options({ ; ""basis"": ""cc-pvdz"", ; ""intrafrag_step_limit"": 0.1, ; }) ; ; dihedrals = [100, 110, 120, 130, 140, 150] ; PES = [] ; ; for phi in dihedrals: ; psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ; E = psi4.optimize('scf', mol=hooh) ; PES.append((phi, E)) ; ; print(""\n\tcc-pVDZ SCF energy as a function of phi\n"") ; for point in PES: ; print(""\t%5.1f%20.10f"" % (point[0], point[1])) ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821
https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821:377,Performance,optimiz,optimizer,377,"Just to add to everyone else's guidance. Yes you can use cartesian coordinates. Just note that to update the geometry,without using a zmatrix, you'll want to use the `ranged_dihedral` keyword instead of `frozen_dihedral`. You can still freeze dihedrals with cartesian geometries, they just can't be set directly in the input file. `ranged_dihedral` sets a target value for the optimizer to optimize towards. . ```import psi4 ; ; hooh = psi4.geometry(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """""") ; ; psi4.set_options({ ; ""basis"": ""cc-pvdz"", ; ""intrafrag_step_limit"": 0.1, ; }) ; ; dihedrals = [100, 110, 120, 130, 140, 150] ; PES = [] ; ; for phi in dihedrals: ; psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ; E = psi4.optimize('scf', mol=hooh) ; PES.append((phi, E)) ; ; print(""\n\tcc-pVDZ SCF energy as a function of phi\n"") ; for point in PES: ; print(""\t%5.1f%20.10f"" % (point[0], point[1])) ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821
https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821:390,Performance,optimiz,optimize,390,"Just to add to everyone else's guidance. Yes you can use cartesian coordinates. Just note that to update the geometry,without using a zmatrix, you'll want to use the `ranged_dihedral` keyword instead of `frozen_dihedral`. You can still freeze dihedrals with cartesian geometries, they just can't be set directly in the input file. `ranged_dihedral` sets a target value for the optimizer to optimize towards. . ```import psi4 ; ; hooh = psi4.geometry(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """""") ; ; psi4.set_options({ ; ""basis"": ""cc-pvdz"", ; ""intrafrag_step_limit"": 0.1, ; }) ; ; dihedrals = [100, 110, 120, 130, 140, 150] ; PES = [] ; ; for phi in dihedrals: ; psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ; E = psi4.optimize('scf', mol=hooh) ; PES.append((phi, E)) ; ; print(""\n\tcc-pVDZ SCF energy as a function of phi\n"") ; for point in PES: ; print(""\t%5.1f%20.10f"" % (point[0], point[1])) ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821
https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821:926,Performance,optimiz,optimize,926,"Just to add to everyone else's guidance. Yes you can use cartesian coordinates. Just note that to update the geometry,without using a zmatrix, you'll want to use the `ranged_dihedral` keyword instead of `frozen_dihedral`. You can still freeze dihedrals with cartesian geometries, they just can't be set directly in the input file. `ranged_dihedral` sets a target value for the optimizer to optimize towards. . ```import psi4 ; ; hooh = psi4.geometry(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """""") ; ; psi4.set_options({ ; ""basis"": ""cc-pvdz"", ; ""intrafrag_step_limit"": 0.1, ; }) ; ; dihedrals = [100, 110, 120, 130, 140, 150] ; PES = [] ; ; for phi in dihedrals: ; psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ; E = psi4.optimize('scf', mol=hooh) ; PES.append((phi, E)) ; ; print(""\n\tcc-pVDZ SCF energy as a function of phi\n"") ; for point in PES: ; print(""\t%5.1f%20.10f"" % (point[0], point[1])) ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821
https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821:31,Usability,guid,guidance,31,"Just to add to everyone else's guidance. Yes you can use cartesian coordinates. Just note that to update the geometry,without using a zmatrix, you'll want to use the `ranged_dihedral` keyword instead of `frozen_dihedral`. You can still freeze dihedrals with cartesian geometries, they just can't be set directly in the input file. `ranged_dihedral` sets a target value for the optimizer to optimize towards. . ```import psi4 ; ; hooh = psi4.geometry(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """""") ; ; psi4.set_options({ ; ""basis"": ""cc-pvdz"", ; ""intrafrag_step_limit"": 0.1, ; }) ; ; dihedrals = [100, 110, 120, 130, 140, 150] ; PES = [] ; ; for phi in dihedrals: ; psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ; E = psi4.optimize('scf', mol=hooh) ; PES.append((phi, E)) ; ; print(""\n\tcc-pVDZ SCF energy as a function of phi\n"") ; for point in PES: ; print(""\t%5.1f%20.10f"" % (point[0], point[1])) ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485848821
https://github.com/psi4/psi4/issues/2910#issuecomment-1485859168:268,Availability,error,error,268,"Thanks for the help everyone. . I am actually running into an issue with 'ranged_dihedral'. Both `psi4.core.set_local_option(""OPTKING"", ""RANGED_DIHEDRAL"", dihedral_string)` and 'psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ` give an error. ```; Error: option RANGED_DIHEDRAL is not contained in the list of available options. Error: option RANGED_DIHEDRAL is not contained in the list of available options. Did you mean? . Did you mean? ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485859168
https://github.com/psi4/psi4/issues/2910#issuecomment-1485859168:280,Availability,Error,Error,280,"Thanks for the help everyone. . I am actually running into an issue with 'ranged_dihedral'. Both `psi4.core.set_local_option(""OPTKING"", ""RANGED_DIHEDRAL"", dihedral_string)` and 'psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ` give an error. ```; Error: option RANGED_DIHEDRAL is not contained in the list of available options. Error: option RANGED_DIHEDRAL is not contained in the list of available options. Did you mean? . Did you mean? ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485859168
https://github.com/psi4/psi4/issues/2910#issuecomment-1485859168:342,Availability,avail,available,342,"Thanks for the help everyone. . I am actually running into an issue with 'ranged_dihedral'. Both `psi4.core.set_local_option(""OPTKING"", ""RANGED_DIHEDRAL"", dihedral_string)` and 'psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ` give an error. ```; Error: option RANGED_DIHEDRAL is not contained in the list of available options. Error: option RANGED_DIHEDRAL is not contained in the list of available options. Did you mean? . Did you mean? ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485859168
https://github.com/psi4/psi4/issues/2910#issuecomment-1485859168:361,Availability,Error,Error,361,"Thanks for the help everyone. . I am actually running into an issue with 'ranged_dihedral'. Both `psi4.core.set_local_option(""OPTKING"", ""RANGED_DIHEDRAL"", dihedral_string)` and 'psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ` give an error. ```; Error: option RANGED_DIHEDRAL is not contained in the list of available options. Error: option RANGED_DIHEDRAL is not contained in the list of available options. Did you mean? . Did you mean? ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485859168
https://github.com/psi4/psi4/issues/2910#issuecomment-1485859168:423,Availability,avail,available,423,"Thanks for the help everyone. . I am actually running into an issue with 'ranged_dihedral'. Both `psi4.core.set_local_option(""OPTKING"", ""RANGED_DIHEDRAL"", dihedral_string)` and 'psi4.set_options({""ranged_dihedral"": f""1 2 3 4 {phi - 0.0001} {phi + 0.0001}""}) ` give an error. ```; Error: option RANGED_DIHEDRAL is not contained in the list of available options. Error: option RANGED_DIHEDRAL is not contained in the list of available options. Did you mean? . Did you mean? ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485859168
https://github.com/psi4/psi4/issues/2910#issuecomment-1485964679:135,Availability,error,error,135,"fixed_dihedral is at least allowing the calculation to run, but it appears as soon as the next optimization cycle starts the following error code pops up ""Process finished with exit code -1073741819 (0xC0000005)"". wondering if the scratch data is the cause? ""Scratch directory: C:\Users\vike\AppData\Local\Temp/"". Is there a way to specify the scratch directory?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485964679
https://github.com/psi4/psi4/issues/2910#issuecomment-1485964679:95,Performance,optimiz,optimization,95,"fixed_dihedral is at least allowing the calculation to run, but it appears as soon as the next optimization cycle starts the following error code pops up ""Process finished with exit code -1073741819 (0xC0000005)"". wondering if the scratch data is the cause? ""Scratch directory: C:\Users\vike\AppData\Local\Temp/"". Is there a way to specify the scratch directory?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1485964679
https://github.com/psi4/psi4/issues/2910#issuecomment-1486033478:258,Performance,Optimiz,OptimizationSpecification,258,"As Lori mentioned an alternate way with qcengine, psi4, torsiondrive and geometric combo is as follows: . ```; from qcelemental.models import Molecule, DriverEnum; from qcelemental.models.common_models import Model; from qcelemental.models.procedures import OptimizationSpecification, QCInputSpecification, TDKeywords, TorsionDriveInput; from qcengine import compute_procedure; from matplotlib import pyplot as plt. def return_td_result(qcmol, dihedrals, method, program, basis):; result = compute_procedure(; input_data=TorsionDriveInput(; keywords={; ""dihedrals"": [dihedrals],; ""grid_spacing"": [20]; },; input_specification=QCInputSpecification(; driver=DriverEnum.gradient,; model=Model(method=method, basis=basis); ),; initial_molecule=[qcmol,],; optimization_spec=OptimizationSpecification(; procedure=""geomeTRIC"",; keywords={; ""coordsys"": ""dlc"",; ""maxiter"": 300,; ""program"": program,; }; ); ),; local_options={""ncores"": 8, ""jobs_per_node"":1, ""scratch_directory"":""/tmp/""},; procedure=""torsiondrive""; ); energies = list(result.final_energies.values()); min_ener = min(energies); energies = [(it-min_ener) * 627.5094740630558 for it in energies]; angles = list(result.final_energies.keys()); angles = [int(it) for it in angles]; angles, energies = zip(*sorted(zip(angles, energies))); return result, angles, energies. def main():; qcmol = Molecule.from_data(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """"""). print(qcmol); dihedrals = [0,1,2,3]; result, angles, energies = return_td_result(method='SCF', qcmol=qcmol, dihedrals=dihedrals, program='psi4', basis='cc-pvdz'). plt.figure(figsize=(12,8)); plt.plot(angles, energies, label=""SCF""); plt.xlabel(""Angles in degrees""); plt.ylabel(""energies in kcal/mol""); plt.legend(); plt.title('TD profile'); plt.savefig(f'torsion_profile.png', bbox_inches='tight'); #plt.show(). if __name_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486033478
https://github.com/psi4/psi4/issues/2910#issuecomment-1486033478:769,Performance,Optimiz,OptimizationSpecification,769,"As Lori mentioned an alternate way with qcengine, psi4, torsiondrive and geometric combo is as follows: . ```; from qcelemental.models import Molecule, DriverEnum; from qcelemental.models.common_models import Model; from qcelemental.models.procedures import OptimizationSpecification, QCInputSpecification, TDKeywords, TorsionDriveInput; from qcengine import compute_procedure; from matplotlib import pyplot as plt. def return_td_result(qcmol, dihedrals, method, program, basis):; result = compute_procedure(; input_data=TorsionDriveInput(; keywords={; ""dihedrals"": [dihedrals],; ""grid_spacing"": [20]; },; input_specification=QCInputSpecification(; driver=DriverEnum.gradient,; model=Model(method=method, basis=basis); ),; initial_molecule=[qcmol,],; optimization_spec=OptimizationSpecification(; procedure=""geomeTRIC"",; keywords={; ""coordsys"": ""dlc"",; ""maxiter"": 300,; ""program"": program,; }; ); ),; local_options={""ncores"": 8, ""jobs_per_node"":1, ""scratch_directory"":""/tmp/""},; procedure=""torsiondrive""; ); energies = list(result.final_energies.values()); min_ener = min(energies); energies = [(it-min_ener) * 627.5094740630558 for it in energies]; angles = list(result.final_energies.keys()); angles = [int(it) for it in angles]; angles, energies = zip(*sorted(zip(angles, energies))); return result, angles, energies. def main():; qcmol = Molecule.from_data(""""""; 0 1 ; H 0.856507560196 0.771327307016 0.559729319002 ; O 0.121036132436 0.684379466849 -0.035268035646 ; O -0.121036132436 -0.684379466849 -0.035268035646 ; H -0.856507560196 -0.771327307016 0.559729319002 ; """"""). print(qcmol); dihedrals = [0,1,2,3]; result, angles, energies = return_td_result(method='SCF', qcmol=qcmol, dihedrals=dihedrals, program='psi4', basis='cc-pvdz'). plt.figure(figsize=(12,8)); plt.plot(angles, energies, label=""SCF""); plt.xlabel(""Angles in degrees""); plt.ylabel(""energies in kcal/mol""); plt.legend(); plt.title('TD profile'); plt.savefig(f'torsion_profile.png', bbox_inches='tight'); #plt.show(). if __name_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486033478
https://github.com/psi4/psi4/issues/2910#issuecomment-1486045729:276,Availability,error,error,276,"Trying @pavankum's code. File ""C:/Users/vike/PycharmProjects/pythonProject/test.py"", line 28, in return_td_result; energies = list(result.final_energies.values()); AttributeError: 'FailedOperation' object has no attribute 'final_energies'. printing result ... FailedOperation(error=ComputeError(error_type='resource_error', error_message='QCEngine Resource Error: Procedure torsiondrive is registered with QCEngine, but cannot be found.')). do I need to do a special install to use this properly?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486045729
https://github.com/psi4/psi4/issues/2910#issuecomment-1486045729:357,Availability,Error,Error,357,"Trying @pavankum's code. File ""C:/Users/vike/PycharmProjects/pythonProject/test.py"", line 28, in return_td_result; energies = list(result.final_energies.values()); AttributeError: 'FailedOperation' object has no attribute 'final_energies'. printing result ... FailedOperation(error=ComputeError(error_type='resource_error', error_message='QCEngine Resource Error: Procedure torsiondrive is registered with QCEngine, but cannot be found.')). do I need to do a special install to use this properly?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486045729
https://github.com/psi4/psi4/issues/2910#issuecomment-1486045729:467,Deployability,install,install,467,"Trying @pavankum's code. File ""C:/Users/vike/PycharmProjects/pythonProject/test.py"", line 28, in return_td_result; energies = list(result.final_energies.values()); AttributeError: 'FailedOperation' object has no attribute 'final_energies'. printing result ... FailedOperation(error=ComputeError(error_type='resource_error', error_message='QCEngine Resource Error: Procedure torsiondrive is registered with QCEngine, but cannot be found.')). do I need to do a special install to use this properly?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486045729
https://github.com/psi4/psi4/issues/2910#issuecomment-1486045729:75,Testability,test,test,75,"Trying @pavankum's code. File ""C:/Users/vike/PycharmProjects/pythonProject/test.py"", line 28, in return_td_result; energies = list(result.final_energies.values()); AttributeError: 'FailedOperation' object has no attribute 'final_energies'. printing result ... FailedOperation(error=ComputeError(error_type='resource_error', error_message='QCEngine Resource Error: Procedure torsiondrive is registered with QCEngine, but cannot be found.')). do I need to do a special install to use this properly?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486045729
https://github.com/psi4/psi4/issues/2910#issuecomment-1486191960:291,Integrability,depend,dependencies,291,"> Procedure torsiondrive is registered with QCEngine, but cannot be found. @ErikCVik you need `torsiondrive` in your env. I am on linux and here is a minimal set of packages to create a new environment, which worked for me.; ```; name: psi4_td; channels:; - psi4; - conda-forge; - defaults; dependencies:; - python =3.9; - qcengine; - qcelemental; - blas=*=*mkl; - libblas=*=*mkl; - matplotlib; - psi4; - dftd3; - gcp; - gau2grid >=2.0.7; - geometric; - torsiondrive; ```; You can copy it to a file and run `mamba env create -f file.yaml`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486191960
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:284,Availability,error,error,284,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:403,Availability,error,error,403,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:472,Availability,error,error,472,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:506,Availability,error,error,506,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1641,Availability,error,error,1641,"9, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.compute(input_data, config)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 121, in compute\n pversion = parse_version(self.get_version())\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 89, in get_version\n with popen([which_prog, ""--version""]) as exc:\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\contextlib.py"", line 113, in __enter__\n return next(self.gen)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-pack",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1678,Availability,error,errors,1678,"etric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.compute(input_data, config)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 121, in compute\n pversion = parse_version(self.get_version())\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 89, in get_version\n with popen([which_prog, ""--version""]) as exc:\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\contextlib.py"", line 113, in __enter__\n return next(self.gen)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 3",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1788,Availability,Error,Error,1788,"eometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.compute(input_data, config)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 121, in compute\n pversion = parse_version(self.get_version())\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 89, in get_version\n with popen([which_prog, ""--version""]) as exc:\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\contextlib.py"", line 113, in __enter__\n return next(self.gen)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 304, in popen\n ret = {""proc"": subprocess.Popen(args, **popen_kwargs)}\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 858, in __",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:5223,Availability,Avail,Available,5223,"several minutes. Press CTRL-C to abort.; Examining python=3.9: 43%|██████████████████████████▏ | 6/14 [00:20<00:30, 3.87s/it]|Examining libblas[build=*mkl]: 64%|█████████████████████████████████▍ | 9/14 [00:30<00:24, 4.99s/it]|Examining conflict for geometric torsiondrive: 43%|███████████████▍ | 6/14 [00:16<00:10, 1.28s/it]\Examining conflict for matplotlib psi4 geometric torsiondrive: 86%|████████████████▎ | 12/14 [00:43<00:07, 3.92s/it]|Examining conflict for matplotlib psi4 geometric: 93%|█████████████████████████████▋ | 13/14 [00:47<00:04, 4.52s/it]/Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 19it [01:06, 3.74Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 20it [01:06, 3.94Examining conflict for matplotlib python: : 20it [01:11, 3.94s/it] failed /. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package libblas conflicts for:; matplotlib -> numpy=1.11 -> libblas[version='>=3.8.0,<4.0a0|>=3.9.0,<4.0a0']; psi4 -> numpy -> libblas[version='>=3.8.0,<4.0a0|>=3.9.0,<4.0a0']; torsiondrive -> numpy[version='>=1.11,<2.0a0'] -> libblas[version='>=3.8.0,<4.0a0|>=3.9.0,<4.0a0']; libblas[build=*mkl]; geometric -> numpy[version='>=1.18,<2.0a0'] -> libblas[version='>=3.8.0,<4.0a0|>=3.9.0,<4.0a0']; qcelemental -> numpy[version='>=1.12.0'] -> libblas[version='>=3.8.0,<4.0a0|>=3.9.0,<4.0a0']. Package vs2008_runtime conflicts for:; qcelemental -> python -> vs2008_runtime; geometric -> python -> vs2008_runtime; qcengine -> python -> vs2008_runtime; matplotlib -> python[version='>=2.7,<2.8.0a0'] -> vs2008_runtime[version='>=9.0.30729.1,<10.0a0']. Package six conflicts for:; matplotlib -> cycler -> six[version='>=1.5']; geometric -> six; psi4 -> pytest -> six[version='>=1.10.0']; torsiondrive -> geometric[version='>=0.9.7'] -> six. Package blas conflicts for:; blas[bui",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:140,Deployability,install,install,140,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:249,Deployability,install,install,249,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:3406,Deployability,install,install,3406," in get_version\n with popen([which_prog, ""--version""]) as exc:\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\contextlib.py"", line 113, in __enter__\n return next(self.gen)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 304, in popen\n ret = {""proc"": subprocess.Popen(args, **popen_kwargs)}\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 858, in __init__\n self._execute_child(args, executable, preexec_fn, close_fds,\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 1251, in _execute_child\n args = list2cmdline(args)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 553, in list2cmdline\n for arg in map(os.fsdecode, seq):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\os.py"", line 818, in fsdecode\n filename = fspath(filename) # Does type-checking of `filename`.\nTypeError: expected str, bytes or os.PathLike object, not NoneType\n\n')); ```; From yml install; ```; Collecting package metadata (repodata.json): done; Solving environment: |; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining python=3.9: 43%|██████████████████████████▏ | 6/14 [00:19<00:29, 3.66s/it]|Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental psi4: 57%|▌| 8/14 [00:22<00:10, \Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 19it [01:02, 3.49Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 20it [01:02, 3.71Examining conflict for matplotlib python: : 20it [01:07, 3.71s/it] failed -; Solving environment: /; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining python=3.9: 43%|██████████████████████████▏ | 6/14 [00:20<00:30, 3.87s/it]|Examining libblas[build=*mkl]: 64%|█████████████████████████████████",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:290,Integrability,message,message,290,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1623,Integrability,Message,Message,1623,"9, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.compute(input_data, config)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 121, in compute\n pversion = parse_version(self.get_version())\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 89, in get_version\n with popen([which_prog, ""--version""]) as exc:\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\contextlib.py"", line 113, in __enter__\n return next(self.gen)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-pack",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1760,Integrability,Message,Message,1760,"eometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.compute(input_data, config)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 121, in compute\n pversion = parse_version(self.get_version())\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 89, in get_version\n with popen([which_prog, ""--version""]) as exc:\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\contextlib.py"", line 113, in __enter__\n return next(self.gen)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 304, in popen\n ret = {""proc"": subprocess.Popen(args, **popen_kwargs)}\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 858, in __",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:2124,Modifiability,config,config,2124,"ine 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.compute(input_data, config)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 121, in compute\n pversion = parse_version(self.get_version())\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 89, in get_version\n with popen([which_prog, ""--version""]) as exc:\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\contextlib.py"", line 113, in __enter__\n return next(self.gen)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 304, in popen\n ret = {""proc"": subprocess.Popen(args, **popen_kwargs)}\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 858, in __init__\n self._execute_child(args, executable, preexec_fn, close_fds,\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 1251, in _execute_child\n args = list2cmdline(args)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 553, in list2cmdline\n for arg in map(os.fsdecode, seq):",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:687,Performance,optimiz,optimize,687,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:696,Performance,Optimiz,Optimize,696,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:847,Performance,optimiz,optimize,847,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:874,Performance,Optimiz,Optimize,874,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:892,Performance,optimiz,optimizer,892,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:902,Performance,optimiz,optimizeGeometry,902,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1001,Performance,optimiz,optimize,1001,"Thanks for the help!. FYI, I am on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1028,Performance,optimiz,optimizeGeometry,1028," on windows, but will run this in a Linux terminal if I get it working. I am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packag",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1150,Performance,optimiz,optimize,1150,"am getting conflicts when I try to install the yml file to a fresh env (see below). Is there an easier work around than this? I was able to pip install torsiondrive, but I get an error message relating to geometric? uninstalling and reinstalling geometric does not solve this. ```; FailedOperation(error=ComputeError(error_type='unknown', error_message='TorsionDrive error at 100:\ngeomeTRIC run_json error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\run_json.py"", line 269, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:3595,Safety,abort,abort,3595,"File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 304, in popen\n ret = {""proc"": subprocess.Popen(args, **popen_kwargs)}\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 858, in __init__\n self._execute_child(args, executable, preexec_fn, close_fds,\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 1251, in _execute_child\n args = list2cmdline(args)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\subprocess.py"", line 553, in list2cmdline\n for arg in map(os.fsdecode, seq):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\os.py"", line 818, in fsdecode\n filename = fspath(filename) # Does type-checking of `filename`.\nTypeError: expected str, bytes or os.PathLike object, not NoneType\n\n')); ```; From yml install; ```; Collecting package metadata (repodata.json): done; Solving environment: |; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining python=3.9: 43%|██████████████████████████▏ | 6/14 [00:19<00:29, 3.66s/it]|Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental psi4: 57%|▌| 8/14 [00:22<00:10, \Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 19it [01:02, 3.49Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 20it [01:02, 3.71Examining conflict for matplotlib python: : 20it [01:07, 3.71s/it] failed -; Solving environment: /; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining python=3.9: 43%|██████████████████████████▏ | 6/14 [00:20<00:30, 3.87s/it]|Examining libblas[build=*mkl]: 64%|█████████████████████████████████▍ | 9/14 [00:30<00:24, 4.99s/it]|Examining conflict for geometric torsiondrive: 43%|███████████████▍ | 6/14 [00:16<00:10, 1.28s/it]\Examining conflict for matplotlib psi4 geometric tor",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:4245,Safety,abort,abort,4245,"n fsdecode\n filename = fspath(filename) # Does type-checking of `filename`.\nTypeError: expected str, bytes or os.PathLike object, not NoneType\n\n')); ```; From yml install; ```; Collecting package metadata (repodata.json): done; Solving environment: |; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining python=3.9: 43%|██████████████████████████▏ | 6/14 [00:19<00:29, 3.66s/it]|Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental psi4: 57%|▌| 8/14 [00:22<00:10, \Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 19it [01:02, 3.49Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 20it [01:02, 3.71Examining conflict for matplotlib python: : 20it [01:07, 3.71s/it] failed -; Solving environment: /; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; Examining python=3.9: 43%|██████████████████████████▏ | 6/14 [00:20<00:30, 3.87s/it]|Examining libblas[build=*mkl]: 64%|█████████████████████████████████▍ | 9/14 [00:30<00:24, 4.99s/it]|Examining conflict for geometric torsiondrive: 43%|███████████████▍ | 6/14 [00:16<00:10, 1.28s/it]\Examining conflict for matplotlib psi4 geometric torsiondrive: 86%|████████████████▎ | 12/14 [00:43<00:07, 3.92s/it]|Examining conflict for matplotlib psi4 geometric: 93%|█████████████████████████████▋ | 13/14 [00:47<00:04, 4.52s/it]/Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 19it [01:06, 3.74Examining conflict for geometric torsiondrive matplotlib qcengine python qcelemental gau2grid psi4: : 20it [01:06, 3.94Examining conflict for matplotlib python: : 20it [01:11, 3.94s/it] failed /. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available version",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:8082,Security,certificate,certificates,8082,"version='>=2.0.7'] -> vc[version='>=14.1,<15.0a0|>=14.2,<15']; python=3.9 -> bzip2[version='>=1.0.8,<2.0a0'] -> vc[version='9.*|>=14,<15.0a0|>=14.2,<15']; qcengine -> psutil -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; qcelemental -> numpy[version='>=1.12.0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; psi4 -> gau2grid -> vc[version='14.*|9.*|>=14,<15.0a0|>=14.1,<15|>=14.1,<15.0a0|>=14.2,<15|>=14.2,<15.0a0']; torsiondrive -> numpy[version='>=1.11,<2.0a0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15']; geometric -> numpy[version='>=1.18,<2.0a0'] -> vc[version='10.*|14.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|9.*|>=9,<10.0a0']; python=3.9 -> vc[version='>=14.1,<15|>=14.1,<15.0a0']; blas[build=*mkl] -> mkl -> vc[version='>=14.1,<15.0a0']; matplotlib -> vc[version='14.*|>=14.1,<15.0a0|9.*']. Package ca-certificates conflicts for:; qcengine -> python -> ca-certificates; matplotlib -> python[version='>=2.7,<2.8.0a0'] -> ca-certificates; geometric -> python -> ca-certificates; qcelemental -> python -> ca-certificates; python=3.9 -> openssl[version='>=3.0.7,<4.0a0'] -> ca-certificates. Package funcsigs conflicts for:; qcelemental -> pint -> funcsigs; psi4 -> pytest -> funcsigs[version='>=1.0']. Package typing-extensions conflicts for:; qcengine -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; qcelemental -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; matplotlib -> kiwisolver -> typing-extensions. Package qcelemental conflicts for:; psi4 -> qcelemental[version='0.25.0.*|0.25.1.*']; psi4 -> optking -> qcelemental[version='>=0.12.0|>=0.21.0|>=0.24.0,<0.26.0|>=0.24.0|>=0.23.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']; qcelemental; qcengine -> qcelemental[version='>=0.12.0|>=0.23.0|>=0.24.0|>=0.24.0,<0.26.0|>=0.7.0|>=0.6.0|>=0.4.2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:8136,Security,certificate,certificates,8136,"version='>=2.0.7'] -> vc[version='>=14.1,<15.0a0|>=14.2,<15']; python=3.9 -> bzip2[version='>=1.0.8,<2.0a0'] -> vc[version='9.*|>=14,<15.0a0|>=14.2,<15']; qcengine -> psutil -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; qcelemental -> numpy[version='>=1.12.0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; psi4 -> gau2grid -> vc[version='14.*|9.*|>=14,<15.0a0|>=14.1,<15|>=14.1,<15.0a0|>=14.2,<15|>=14.2,<15.0a0']; torsiondrive -> numpy[version='>=1.11,<2.0a0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15']; geometric -> numpy[version='>=1.18,<2.0a0'] -> vc[version='10.*|14.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|9.*|>=9,<10.0a0']; python=3.9 -> vc[version='>=14.1,<15|>=14.1,<15.0a0']; blas[build=*mkl] -> mkl -> vc[version='>=14.1,<15.0a0']; matplotlib -> vc[version='14.*|>=14.1,<15.0a0|9.*']. Package ca-certificates conflicts for:; qcengine -> python -> ca-certificates; matplotlib -> python[version='>=2.7,<2.8.0a0'] -> ca-certificates; geometric -> python -> ca-certificates; qcelemental -> python -> ca-certificates; python=3.9 -> openssl[version='>=3.0.7,<4.0a0'] -> ca-certificates. Package funcsigs conflicts for:; qcelemental -> pint -> funcsigs; psi4 -> pytest -> funcsigs[version='>=1.0']. Package typing-extensions conflicts for:; qcengine -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; qcelemental -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; matplotlib -> kiwisolver -> typing-extensions. Package qcelemental conflicts for:; psi4 -> qcelemental[version='0.25.0.*|0.25.1.*']; psi4 -> optking -> qcelemental[version='>=0.12.0|>=0.21.0|>=0.24.0,<0.26.0|>=0.24.0|>=0.23.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']; qcelemental; qcengine -> qcelemental[version='>=0.12.0|>=0.23.0|>=0.24.0|>=0.24.0,<0.26.0|>=0.7.0|>=0.6.0|>=0.4.2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:8203,Security,certificate,certificates,8203,"='9.*|>=14,<15.0a0|>=14.2,<15']; qcengine -> psutil -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; qcelemental -> numpy[version='>=1.12.0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; psi4 -> gau2grid -> vc[version='14.*|9.*|>=14,<15.0a0|>=14.1,<15|>=14.1,<15.0a0|>=14.2,<15|>=14.2,<15.0a0']; torsiondrive -> numpy[version='>=1.11,<2.0a0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15']; geometric -> numpy[version='>=1.18,<2.0a0'] -> vc[version='10.*|14.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|9.*|>=9,<10.0a0']; python=3.9 -> vc[version='>=14.1,<15|>=14.1,<15.0a0']; blas[build=*mkl] -> mkl -> vc[version='>=14.1,<15.0a0']; matplotlib -> vc[version='14.*|>=14.1,<15.0a0|9.*']. Package ca-certificates conflicts for:; qcengine -> python -> ca-certificates; matplotlib -> python[version='>=2.7,<2.8.0a0'] -> ca-certificates; geometric -> python -> ca-certificates; qcelemental -> python -> ca-certificates; python=3.9 -> openssl[version='>=3.0.7,<4.0a0'] -> ca-certificates. Package funcsigs conflicts for:; qcelemental -> pint -> funcsigs; psi4 -> pytest -> funcsigs[version='>=1.0']. Package typing-extensions conflicts for:; qcengine -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; qcelemental -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; matplotlib -> kiwisolver -> typing-extensions. Package qcelemental conflicts for:; psi4 -> qcelemental[version='0.25.0.*|0.25.1.*']; psi4 -> optking -> qcelemental[version='>=0.12.0|>=0.21.0|>=0.24.0,<0.26.0|>=0.24.0|>=0.23.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']; qcelemental; qcengine -> qcelemental[version='>=0.12.0|>=0.23.0|>=0.24.0|>=0.24.0,<0.26.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']. Package m2w64-gcc-libs conflicts for:; psi4 -> dftd3-python -> m2w64-gcc-libs; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:8243,Security,certificate,certificates,8243,"='9.*|>=14,<15.0a0|>=14.2,<15']; qcengine -> psutil -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; qcelemental -> numpy[version='>=1.12.0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; psi4 -> gau2grid -> vc[version='14.*|9.*|>=14,<15.0a0|>=14.1,<15|>=14.1,<15.0a0|>=14.2,<15|>=14.2,<15.0a0']; torsiondrive -> numpy[version='>=1.11,<2.0a0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15']; geometric -> numpy[version='>=1.18,<2.0a0'] -> vc[version='10.*|14.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|9.*|>=9,<10.0a0']; python=3.9 -> vc[version='>=14.1,<15|>=14.1,<15.0a0']; blas[build=*mkl] -> mkl -> vc[version='>=14.1,<15.0a0']; matplotlib -> vc[version='14.*|>=14.1,<15.0a0|9.*']. Package ca-certificates conflicts for:; qcengine -> python -> ca-certificates; matplotlib -> python[version='>=2.7,<2.8.0a0'] -> ca-certificates; geometric -> python -> ca-certificates; qcelemental -> python -> ca-certificates; python=3.9 -> openssl[version='>=3.0.7,<4.0a0'] -> ca-certificates. Package funcsigs conflicts for:; qcelemental -> pint -> funcsigs; psi4 -> pytest -> funcsigs[version='>=1.0']. Package typing-extensions conflicts for:; qcengine -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; qcelemental -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; matplotlib -> kiwisolver -> typing-extensions. Package qcelemental conflicts for:; psi4 -> qcelemental[version='0.25.0.*|0.25.1.*']; psi4 -> optking -> qcelemental[version='>=0.12.0|>=0.21.0|>=0.24.0,<0.26.0|>=0.24.0|>=0.23.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']; qcelemental; qcengine -> qcelemental[version='>=0.12.0|>=0.23.0|>=0.24.0|>=0.24.0,<0.26.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']. Package m2w64-gcc-libs conflicts for:; psi4 -> dftd3-python -> m2w64-gcc-libs; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:8285,Security,certificate,certificates,8285,"='9.*|>=14,<15.0a0|>=14.2,<15']; qcengine -> psutil -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; qcelemental -> numpy[version='>=1.12.0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; psi4 -> gau2grid -> vc[version='14.*|9.*|>=14,<15.0a0|>=14.1,<15|>=14.1,<15.0a0|>=14.2,<15|>=14.2,<15.0a0']; torsiondrive -> numpy[version='>=1.11,<2.0a0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15']; geometric -> numpy[version='>=1.18,<2.0a0'] -> vc[version='10.*|14.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|9.*|>=9,<10.0a0']; python=3.9 -> vc[version='>=14.1,<15|>=14.1,<15.0a0']; blas[build=*mkl] -> mkl -> vc[version='>=14.1,<15.0a0']; matplotlib -> vc[version='14.*|>=14.1,<15.0a0|9.*']. Package ca-certificates conflicts for:; qcengine -> python -> ca-certificates; matplotlib -> python[version='>=2.7,<2.8.0a0'] -> ca-certificates; geometric -> python -> ca-certificates; qcelemental -> python -> ca-certificates; python=3.9 -> openssl[version='>=3.0.7,<4.0a0'] -> ca-certificates. Package funcsigs conflicts for:; qcelemental -> pint -> funcsigs; psi4 -> pytest -> funcsigs[version='>=1.0']. Package typing-extensions conflicts for:; qcengine -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; qcelemental -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; matplotlib -> kiwisolver -> typing-extensions. Package qcelemental conflicts for:; psi4 -> qcelemental[version='0.25.0.*|0.25.1.*']; psi4 -> optking -> qcelemental[version='>=0.12.0|>=0.21.0|>=0.24.0,<0.26.0|>=0.24.0|>=0.23.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']; qcelemental; qcengine -> qcelemental[version='>=0.12.0|>=0.23.0|>=0.24.0|>=0.24.0,<0.26.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']. Package m2w64-gcc-libs conflicts for:; psi4 -> dftd3-python -> m2w64-gcc-libs; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:8353,Security,certificate,certificates,8353,".0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; qcelemental -> numpy[version='>=1.12.0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|>=9,<10.0a0']; psi4 -> gau2grid -> vc[version='14.*|9.*|>=14,<15.0a0|>=14.1,<15|>=14.1,<15.0a0|>=14.2,<15|>=14.2,<15.0a0']; torsiondrive -> numpy[version='>=1.11,<2.0a0'] -> vc[version='10.*|14.*|9.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15']; geometric -> numpy[version='>=1.18,<2.0a0'] -> vc[version='10.*|14.*|>=14,<15.0a0|>=14.1,<15.0a0|>=14.1,<15|>=14.2,<15|9.*|>=9,<10.0a0']; python=3.9 -> vc[version='>=14.1,<15|>=14.1,<15.0a0']; blas[build=*mkl] -> mkl -> vc[version='>=14.1,<15.0a0']; matplotlib -> vc[version='14.*|>=14.1,<15.0a0|9.*']. Package ca-certificates conflicts for:; qcengine -> python -> ca-certificates; matplotlib -> python[version='>=2.7,<2.8.0a0'] -> ca-certificates; geometric -> python -> ca-certificates; qcelemental -> python -> ca-certificates; python=3.9 -> openssl[version='>=3.0.7,<4.0a0'] -> ca-certificates. Package funcsigs conflicts for:; qcelemental -> pint -> funcsigs; psi4 -> pytest -> funcsigs[version='>=1.0']. Package typing-extensions conflicts for:; qcengine -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; qcelemental -> pydantic[version='>=1.8.2'] -> typing-extensions[version='>=3.7.4.3|>=4.1.0|>=4.2.0']; matplotlib -> kiwisolver -> typing-extensions. Package qcelemental conflicts for:; psi4 -> qcelemental[version='0.25.0.*|0.25.1.*']; psi4 -> optking -> qcelemental[version='>=0.12.0|>=0.21.0|>=0.24.0,<0.26.0|>=0.24.0|>=0.23.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']; qcelemental; qcengine -> qcelemental[version='>=0.12.0|>=0.23.0|>=0.24.0|>=0.24.0,<0.26.0|>=0.7.0|>=0.6.0|>=0.4.2|>=0.3.3|>=0.3.*|>=0.2.6|>=0.2.2|>=0.2.1']. Package m2w64-gcc-libs conflicts for:; psi4 -> dftd3-python -> m2w64-gcc-libs; blas[build=*mkl] -> m2w64-gcc-libs. Package numpy-base conflicts for:; psi4 -> numpy -> numpy-base[versi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020
https://github.com/psi4/psi4/issues/2910#issuecomment-1487053389:213,Deployability,patch,patched,213,"If your final target is Linux, I'd advise starting there now, as it's going to have more software and be better behaved than Windows. If you do continue with Win, I think there was a geometric-on-win bug that was patched this year, so make sure you're getting the `_1` build https://anaconda.org/conda-forge/geometric/files",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1487053389
https://github.com/psi4/psi4/issues/2910#issuecomment-1487515986:54,Deployability,Install,Installing,54,So lack of compatibility with windows is the problem. Installing torsiondrive into my conda env on Linux lets me run the code shared above directly in python. closing this thread for now,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1487515986
https://github.com/psi4/psi4/issues/2911#issuecomment-1487206380:143,Deployability,integrat,integration,143,"Great!. If you need more precision, set the PySCF grids by a pair of numbers, rather than by grid level. That should disable PySCF's numerical integration grid pruning. Psi is not pruned, by default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487206380
https://github.com/psi4/psi4/issues/2911#issuecomment-1487206380:143,Integrability,integrat,integration,143,"Great!. If you need more precision, set the PySCF grids by a pair of numbers, rather than by grid level. That should disable PySCF's numerical integration grid pruning. Psi is not pruned, by default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487206380
https://github.com/psi4/psi4/issues/2911#issuecomment-1487278053:88,Energy Efficiency,energy,energy,88,"@JonathonMisiewicz Thanks a lot for the advice!. Yes for larger alkanes like Decane the energy agreement was not more 3-4 decimal places. Based on your advice I modified the script, however, there is not much of an improvement in the agreement. In fact the total number of grid points also differ. ```python; import os. ncores = 8; os.environ['OMP_NUM_THREADS'] = str(ncores); os.environ[""OPENBLAS_NUM_THREADS""] = str(ncores) # export OPENBLAS_NUM_THREADS=4; os.environ[""MKL_NUM_THREADS""] = str(ncores) # export MKL_NUM_THREADS=4; os.environ[""VECLIB_MAXIMUM_THREADS""] = str(ncores) # export VECLIB_MAXIMUM_THREADS=4; os.environ[""NUMEXPR_NUM_THREADS""] = str(ncores) # export NUMEXPR_NUM_THREADS=4; # Set the max memory for PySCF; os.environ[""PYSCF_MAX_MEMORY""] = str(120000). import psi4; psi4.set_memory(int(120000*1e6)); numpy_memory = 40; import pyscf; from pyscf import dft; # pyscf.lib.misc.num_threads(n=8). xyzFilename = 'Decane_C10H22.xyz'. with open(xyzFilename,""r"") as f:; xyz_string = f.read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sap"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":302,; ""dft_radial_points"" :75,; ""diis_max_vecs"" : 6,; #""DFT_NUCLEAR_SCHEME"":""becke"",; ""E_CONVERGENCE"":1e-7,; }; ); energy = psi4.energy(name=""scf"",dft_functional=""svwn"", molecule=psi4_geo, return_wfn=False); energy = 0. # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, ; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ); # mol.max_memory = 10_000; mf = dft.rks.RKS(mol, xc=""LDA,VWNRPA"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; # mf.grids.level = 5; mf.verbose = 4; mf.grids.prune = None; mf.grids.atom_grid = (75, 302); mf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487278053
https://github.com/psi4/psi4/issues/2911#issuecomment-1487278053:1542,Energy Efficiency,energy,energy,1542,"HREADS'] = str(ncores); os.environ[""OPENBLAS_NUM_THREADS""] = str(ncores) # export OPENBLAS_NUM_THREADS=4; os.environ[""MKL_NUM_THREADS""] = str(ncores) # export MKL_NUM_THREADS=4; os.environ[""VECLIB_MAXIMUM_THREADS""] = str(ncores) # export VECLIB_MAXIMUM_THREADS=4; os.environ[""NUMEXPR_NUM_THREADS""] = str(ncores) # export NUMEXPR_NUM_THREADS=4; # Set the max memory for PySCF; os.environ[""PYSCF_MAX_MEMORY""] = str(120000). import psi4; psi4.set_memory(int(120000*1e6)); numpy_memory = 40; import pyscf; from pyscf import dft; # pyscf.lib.misc.num_threads(n=8). xyzFilename = 'Decane_C10H22.xyz'. with open(xyzFilename,""r"") as f:; xyz_string = f.read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sap"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":302,; ""dft_radial_points"" :75,; ""diis_max_vecs"" : 6,; #""DFT_NUCLEAR_SCHEME"":""becke"",; ""E_CONVERGENCE"":1e-7,; }; ); energy = psi4.energy(name=""scf"",dft_functional=""svwn"", molecule=psi4_geo, return_wfn=False); energy = 0. # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, ; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ); # mol.max_memory = 10_000; mf = dft.rks.RKS(mol, xc=""LDA,VWNRPA"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; # mf.grids.level = 5; mf.verbose = 4; mf.grids.prune = None; mf.grids.atom_grid = (75, 302); mf.grids.becke_scheme = dft.gen_grid.stratmann; mf.small_rho_cutoff = 1e-15; mf.conv_tol = 1e-7; mf.kernel(); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); ```. Is there any further advice that you might have?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487278053
https://github.com/psi4/psi4/issues/2911#issuecomment-1487278053:1556,Energy Efficiency,energy,energy,1556,"HREADS'] = str(ncores); os.environ[""OPENBLAS_NUM_THREADS""] = str(ncores) # export OPENBLAS_NUM_THREADS=4; os.environ[""MKL_NUM_THREADS""] = str(ncores) # export MKL_NUM_THREADS=4; os.environ[""VECLIB_MAXIMUM_THREADS""] = str(ncores) # export VECLIB_MAXIMUM_THREADS=4; os.environ[""NUMEXPR_NUM_THREADS""] = str(ncores) # export NUMEXPR_NUM_THREADS=4; # Set the max memory for PySCF; os.environ[""PYSCF_MAX_MEMORY""] = str(120000). import psi4; psi4.set_memory(int(120000*1e6)); numpy_memory = 40; import pyscf; from pyscf import dft; # pyscf.lib.misc.num_threads(n=8). xyzFilename = 'Decane_C10H22.xyz'. with open(xyzFilename,""r"") as f:; xyz_string = f.read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sap"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":302,; ""dft_radial_points"" :75,; ""diis_max_vecs"" : 6,; #""DFT_NUCLEAR_SCHEME"":""becke"",; ""E_CONVERGENCE"":1e-7,; }; ); energy = psi4.energy(name=""scf"",dft_functional=""svwn"", molecule=psi4_geo, return_wfn=False); energy = 0. # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, ; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ); # mol.max_memory = 10_000; mf = dft.rks.RKS(mol, xc=""LDA,VWNRPA"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; # mf.grids.level = 5; mf.verbose = 4; mf.grids.prune = None; mf.grids.atom_grid = (75, 302); mf.grids.becke_scheme = dft.gen_grid.stratmann; mf.small_rho_cutoff = 1e-15; mf.conv_tol = 1e-7; mf.kernel(); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); ```. Is there any further advice that you might have?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487278053
https://github.com/psi4/psi4/issues/2911#issuecomment-1487278053:1635,Energy Efficiency,energy,energy,1635,"HREADS'] = str(ncores); os.environ[""OPENBLAS_NUM_THREADS""] = str(ncores) # export OPENBLAS_NUM_THREADS=4; os.environ[""MKL_NUM_THREADS""] = str(ncores) # export MKL_NUM_THREADS=4; os.environ[""VECLIB_MAXIMUM_THREADS""] = str(ncores) # export VECLIB_MAXIMUM_THREADS=4; os.environ[""NUMEXPR_NUM_THREADS""] = str(ncores) # export NUMEXPR_NUM_THREADS=4; # Set the max memory for PySCF; os.environ[""PYSCF_MAX_MEMORY""] = str(120000). import psi4; psi4.set_memory(int(120000*1e6)); numpy_memory = 40; import pyscf; from pyscf import dft; # pyscf.lib.misc.num_threads(n=8). xyzFilename = 'Decane_C10H22.xyz'. with open(xyzFilename,""r"") as f:; xyz_string = f.read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sap"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":302,; ""dft_radial_points"" :75,; ""diis_max_vecs"" : 6,; #""DFT_NUCLEAR_SCHEME"":""becke"",; ""E_CONVERGENCE"":1e-7,; }; ); energy = psi4.energy(name=""scf"",dft_functional=""svwn"", molecule=psi4_geo, return_wfn=False); energy = 0. # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, ; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ); # mol.max_memory = 10_000; mf = dft.rks.RKS(mol, xc=""LDA,VWNRPA"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; # mf.grids.level = 5; mf.verbose = 4; mf.grids.prune = None; mf.grids.atom_grid = (75, 302); mf.grids.becke_scheme = dft.gen_grid.stratmann; mf.small_rho_cutoff = 1e-15; mf.conv_tol = 1e-7; mf.kernel(); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); ```. Is there any further advice that you might have?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487278053
https://github.com/psi4/psi4/issues/2911#issuecomment-1487278053:2183,Energy Efficiency,energy,energy,2183,"HREADS'] = str(ncores); os.environ[""OPENBLAS_NUM_THREADS""] = str(ncores) # export OPENBLAS_NUM_THREADS=4; os.environ[""MKL_NUM_THREADS""] = str(ncores) # export MKL_NUM_THREADS=4; os.environ[""VECLIB_MAXIMUM_THREADS""] = str(ncores) # export VECLIB_MAXIMUM_THREADS=4; os.environ[""NUMEXPR_NUM_THREADS""] = str(ncores) # export NUMEXPR_NUM_THREADS=4; # Set the max memory for PySCF; os.environ[""PYSCF_MAX_MEMORY""] = str(120000). import psi4; psi4.set_memory(int(120000*1e6)); numpy_memory = 40; import pyscf; from pyscf import dft; # pyscf.lib.misc.num_threads(n=8). xyzFilename = 'Decane_C10H22.xyz'. with open(xyzFilename,""r"") as f:; xyz_string = f.read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sap"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":302,; ""dft_radial_points"" :75,; ""diis_max_vecs"" : 6,; #""DFT_NUCLEAR_SCHEME"":""becke"",; ""E_CONVERGENCE"":1e-7,; }; ); energy = psi4.energy(name=""scf"",dft_functional=""svwn"", molecule=psi4_geo, return_wfn=False); energy = 0. # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, ; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ); # mol.max_memory = 10_000; mf = dft.rks.RKS(mol, xc=""LDA,VWNRPA"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; # mf.grids.level = 5; mf.verbose = 4; mf.grids.prune = None; mf.grids.atom_grid = (75, 302); mf.grids.becke_scheme = dft.gen_grid.stratmann; mf.small_rho_cutoff = 1e-15; mf.conv_tol = 1e-7; mf.kernel(); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); ```. Is there any further advice that you might have?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487278053
https://github.com/psi4/psi4/issues/2911#issuecomment-1487278053:2229,Energy Efficiency,energy,energy,2229,"HREADS'] = str(ncores); os.environ[""OPENBLAS_NUM_THREADS""] = str(ncores) # export OPENBLAS_NUM_THREADS=4; os.environ[""MKL_NUM_THREADS""] = str(ncores) # export MKL_NUM_THREADS=4; os.environ[""VECLIB_MAXIMUM_THREADS""] = str(ncores) # export VECLIB_MAXIMUM_THREADS=4; os.environ[""NUMEXPR_NUM_THREADS""] = str(ncores) # export NUMEXPR_NUM_THREADS=4; # Set the max memory for PySCF; os.environ[""PYSCF_MAX_MEMORY""] = str(120000). import psi4; psi4.set_memory(int(120000*1e6)); numpy_memory = 40; import pyscf; from pyscf import dft; # pyscf.lib.misc.num_threads(n=8). xyzFilename = 'Decane_C10H22.xyz'. with open(xyzFilename,""r"") as f:; xyz_string = f.read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sap"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":302,; ""dft_radial_points"" :75,; ""diis_max_vecs"" : 6,; #""DFT_NUCLEAR_SCHEME"":""becke"",; ""E_CONVERGENCE"":1e-7,; }; ); energy = psi4.energy(name=""scf"",dft_functional=""svwn"", molecule=psi4_geo, return_wfn=False); energy = 0. # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, ; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ); # mol.max_memory = 10_000; mf = dft.rks.RKS(mol, xc=""LDA,VWNRPA"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; # mf.grids.level = 5; mf.verbose = 4; mf.grids.prune = None; mf.grids.atom_grid = (75, 302); mf.grids.becke_scheme = dft.gen_grid.stratmann; mf.small_rho_cutoff = 1e-15; mf.conv_tol = 1e-7; mf.kernel(); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); ```. Is there any further advice that you might have?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487278053
https://github.com/psi4/psi4/issues/2911#issuecomment-1487415356:151,Deployability,integrat,integration,151,"> Great!; > ; > If you need more precision, set the PySCF grids by a pair of numbers, rather than by grid level. That should disable PySCF's numerical integration grid pruning. Psi is not pruned, by default. That does not suffice. In addition to setting the grid with e.g. `mf.grids.atom_grid = (100,590)` you need to turn pruning off explicitly with `mf.grids.prune = None`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487415356
https://github.com/psi4/psi4/issues/2911#issuecomment-1487415356:151,Integrability,integrat,integration,151,"> Great!; > ; > If you need more precision, set the PySCF grids by a pair of numbers, rather than by grid level. That should disable PySCF's numerical integration grid pruning. Psi is not pruned, by default. That does not suffice. In addition to setting the grid with e.g. `mf.grids.atom_grid = (100,590)` you need to turn pruning off explicitly with `mf.grids.prune = None`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487415356
https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682:238,Integrability,depend,dependencies,238,"By defaults PySCF truncates basis functions to `1e-8` while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in https://github.com/pyscf/pyscf/issues/1313. There are also be differences in how linear dependencies are handled in density fitting. I think Psi4 diagonalizes the Coulomb overlap `(A|B)` and throws away linearly dependent functions while PySCF directly solves the system of linear equations. In my experience, PySCF hangs much more easily in linear dependencies than Psi4. Linear dependencies are really the weak point in PySCF overall. Orbital basis linear dependencies also are not removed by default, and one needs to do this separately, which is a common issue for practical calculations. (This should not be an issue in the def2-SVP calculation here since the basis is so small.) The linear dependency issues also pop up in other places in the code, and I had tickets open for a long time about these, but I think the last of them have now been closed so calculations with strong linear dependencies should work in the PySCF master branch, e.g. doing diatomics at negligible internuclear distances like R = 1e-4 bohr. I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. Psi4 will use density fitting to get the orbitals close to convergence for `scf_type direct`; you can do a similar thing in PySCF. For some systems PySCF will be way faster than Psi4 with exact integrals, since it handles generally contracted basis sets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682
https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682:362,Integrability,depend,dependent,362,"By defaults PySCF truncates basis functions to `1e-8` while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in https://github.com/pyscf/pyscf/issues/1313. There are also be differences in how linear dependencies are handled in density fitting. I think Psi4 diagonalizes the Coulomb overlap `(A|B)` and throws away linearly dependent functions while PySCF directly solves the system of linear equations. In my experience, PySCF hangs much more easily in linear dependencies than Psi4. Linear dependencies are really the weak point in PySCF overall. Orbital basis linear dependencies also are not removed by default, and one needs to do this separately, which is a common issue for practical calculations. (This should not be an issue in the def2-SVP calculation here since the basis is so small.) The linear dependency issues also pop up in other places in the code, and I had tickets open for a long time about these, but I think the last of them have now been closed so calculations with strong linear dependencies should work in the PySCF master branch, e.g. doing diatomics at negligible internuclear distances like R = 1e-4 bohr. I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. Psi4 will use density fitting to get the orbitals close to convergence for `scf_type direct`; you can do a similar thing in PySCF. For some systems PySCF will be way faster than Psi4 with exact integrals, since it handles generally contracted basis sets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682
https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682:499,Integrability,depend,dependencies,499,"By defaults PySCF truncates basis functions to `1e-8` while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in https://github.com/pyscf/pyscf/issues/1313. There are also be differences in how linear dependencies are handled in density fitting. I think Psi4 diagonalizes the Coulomb overlap `(A|B)` and throws away linearly dependent functions while PySCF directly solves the system of linear equations. In my experience, PySCF hangs much more easily in linear dependencies than Psi4. Linear dependencies are really the weak point in PySCF overall. Orbital basis linear dependencies also are not removed by default, and one needs to do this separately, which is a common issue for practical calculations. (This should not be an issue in the def2-SVP calculation here since the basis is so small.) The linear dependency issues also pop up in other places in the code, and I had tickets open for a long time about these, but I think the last of them have now been closed so calculations with strong linear dependencies should work in the PySCF master branch, e.g. doing diatomics at negligible internuclear distances like R = 1e-4 bohr. I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. Psi4 will use density fitting to get the orbitals close to convergence for `scf_type direct`; you can do a similar thing in PySCF. For some systems PySCF will be way faster than Psi4 with exact integrals, since it handles generally contracted basis sets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682
https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682:530,Integrability,depend,dependencies,530,"By defaults PySCF truncates basis functions to `1e-8` while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in https://github.com/pyscf/pyscf/issues/1313. There are also be differences in how linear dependencies are handled in density fitting. I think Psi4 diagonalizes the Coulomb overlap `(A|B)` and throws away linearly dependent functions while PySCF directly solves the system of linear equations. In my experience, PySCF hangs much more easily in linear dependencies than Psi4. Linear dependencies are really the weak point in PySCF overall. Orbital basis linear dependencies also are not removed by default, and one needs to do this separately, which is a common issue for practical calculations. (This should not be an issue in the def2-SVP calculation here since the basis is so small.) The linear dependency issues also pop up in other places in the code, and I had tickets open for a long time about these, but I think the last of them have now been closed so calculations with strong linear dependencies should work in the PySCF master branch, e.g. doing diatomics at negligible internuclear distances like R = 1e-4 bohr. I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. Psi4 will use density fitting to get the orbitals close to convergence for `scf_type direct`; you can do a similar thing in PySCF. For some systems PySCF will be way faster than Psi4 with exact integrals, since it handles generally contracted basis sets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682
https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682:608,Integrability,depend,dependencies,608,"By defaults PySCF truncates basis functions to `1e-8` while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in https://github.com/pyscf/pyscf/issues/1313. There are also be differences in how linear dependencies are handled in density fitting. I think Psi4 diagonalizes the Coulomb overlap `(A|B)` and throws away linearly dependent functions while PySCF directly solves the system of linear equations. In my experience, PySCF hangs much more easily in linear dependencies than Psi4. Linear dependencies are really the weak point in PySCF overall. Orbital basis linear dependencies also are not removed by default, and one needs to do this separately, which is a common issue for practical calculations. (This should not be an issue in the def2-SVP calculation here since the basis is so small.) The linear dependency issues also pop up in other places in the code, and I had tickets open for a long time about these, but I think the last of them have now been closed so calculations with strong linear dependencies should work in the PySCF master branch, e.g. doing diatomics at negligible internuclear distances like R = 1e-4 bohr. I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. Psi4 will use density fitting to get the orbitals close to convergence for `scf_type direct`; you can do a similar thing in PySCF. For some systems PySCF will be way faster than Psi4 with exact integrals, since it handles generally contracted basis sets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682
https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682:846,Integrability,depend,dependency,846,"By defaults PySCF truncates basis functions to `1e-8` while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in https://github.com/pyscf/pyscf/issues/1313. There are also be differences in how linear dependencies are handled in density fitting. I think Psi4 diagonalizes the Coulomb overlap `(A|B)` and throws away linearly dependent functions while PySCF directly solves the system of linear equations. In my experience, PySCF hangs much more easily in linear dependencies than Psi4. Linear dependencies are really the weak point in PySCF overall. Orbital basis linear dependencies also are not removed by default, and one needs to do this separately, which is a common issue for practical calculations. (This should not be an issue in the def2-SVP calculation here since the basis is so small.) The linear dependency issues also pop up in other places in the code, and I had tickets open for a long time about these, but I think the last of them have now been closed so calculations with strong linear dependencies should work in the PySCF master branch, e.g. doing diatomics at negligible internuclear distances like R = 1e-4 bohr. I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. Psi4 will use density fitting to get the orbitals close to convergence for `scf_type direct`; you can do a similar thing in PySCF. For some systems PySCF will be way faster than Psi4 with exact integrals, since it handles generally contracted basis sets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682
https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682:1042,Integrability,depend,dependencies,1042,"By defaults PySCF truncates basis functions to `1e-8` while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in https://github.com/pyscf/pyscf/issues/1313. There are also be differences in how linear dependencies are handled in density fitting. I think Psi4 diagonalizes the Coulomb overlap `(A|B)` and throws away linearly dependent functions while PySCF directly solves the system of linear equations. In my experience, PySCF hangs much more easily in linear dependencies than Psi4. Linear dependencies are really the weak point in PySCF overall. Orbital basis linear dependencies also are not removed by default, and one needs to do this separately, which is a common issue for practical calculations. (This should not be an issue in the def2-SVP calculation here since the basis is so small.) The linear dependency issues also pop up in other places in the code, and I had tickets open for a long time about these, but I think the last of them have now been closed so calculations with strong linear dependencies should work in the PySCF master branch, e.g. doing diatomics at negligible internuclear distances like R = 1e-4 bohr. I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. Psi4 will use density fitting to get the orbitals close to convergence for `scf_type direct`; you can do a similar thing in PySCF. For some systems PySCF will be way faster than Psi4 with exact integrals, since it handles generally contracted basis sets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682
https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682:1513,Integrability,contract,contracted,1513,"By defaults PySCF truncates basis functions to `1e-8` while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in https://github.com/pyscf/pyscf/issues/1313. There are also be differences in how linear dependencies are handled in density fitting. I think Psi4 diagonalizes the Coulomb overlap `(A|B)` and throws away linearly dependent functions while PySCF directly solves the system of linear equations. In my experience, PySCF hangs much more easily in linear dependencies than Psi4. Linear dependencies are really the weak point in PySCF overall. Orbital basis linear dependencies also are not removed by default, and one needs to do this separately, which is a common issue for practical calculations. (This should not be an issue in the def2-SVP calculation here since the basis is so small.) The linear dependency issues also pop up in other places in the code, and I had tickets open for a long time about these, but I think the last of them have now been closed so calculations with strong linear dependencies should work in the PySCF master branch, e.g. doing diatomics at negligible internuclear distances like R = 1e-4 bohr. I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. Psi4 will use density fitting to get the orbitals close to convergence for `scf_type direct`; you can do a similar thing in PySCF. For some systems PySCF will be way faster than Psi4 with exact integrals, since it handles generally contracted basis sets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487428682
https://github.com/psi4/psi4/issues/2911#issuecomment-1487436664:496,Energy Efficiency,energy,energy,496,"So in addition to setting `mf.small_rho_cutoff = 1e-15` in PySCF you also need to use a smaller threshold for the basis function screening. The default density screening threshold in Psi4 comes from Libxc, which is usually `1e-15`. I think there is another keyword for controlling the basis function threshold. I recently looked at the density threshold in finite element calculations on atoms in [arXiv:2302.06284](https://arxiv.org/abs/2302.06284). `1e-11` was sufficient to converge the total energy for all functionals to 1e-7 Hartree. The results for molecules may be different, though, since one might have larger regions of space with low electron density. Usually one is able to get different programs to agree beyond 1 uEh in DFT total energies, when the calculations are converged with respect to all numerical parameters. I usually only look at small calculations, though, since my usual interest is just to check that a functional is implemented the same way. Here that is not an issue since libxc provides the density functional to both Psi4 and PySCF, which is a huge boon for reproducibility.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487436664
https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:1743,Availability,error,error,1743," to 1e-8 while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in. I am not sure which threshold are you talking about here. One of the thresholds I found here is much tighter and should be enough imho; https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28. > There are also be differences in how linear dependencies are handled in density fitting. As you said, I don't think here there are any major issues regarding linear dependencies. > I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. . I am working on this suggestion. > So in addition to setting mf.small_rho_cutoff = 1e-15 in PySCF you also need to use a smaller threshold for the basis function screening. Is this the same as here (https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28) or something else?; I tried reducing it 1e-20 using the config file but still got the same result (an error of around 35 uH). > Usually one is able to get different programs to agree beyond 1 uEh in DFT total energies, when the calculations are converged with respect to all numerical parameters. I usually only look at small calculations, though,. I agree and I am usually able to reproduce the same results as TURBOMOLE RIPER (using mostly defaults) upto $<1 \mu H$ accuracy even for large systems. This is why I was trying to find out why the difference was around 35 uH for decane. Furthermore, since the no. of grid points coming out of pyscf and psi4 were different even for the same number of radial and angular grid points, I even tried to use the same grids as psi4 in pyscf but still got the same result. Here is the script I used; ```python; import os. ncores = 8; os.environ['OMP_NUM_THREADS'] = str(ncores); os.environ[""OPENBLAS_NUM_THREADS""] = str(ncores) # export OPENBLAS_NUM_THREADS=4; os.environ[""MKL_NUM_THREADS""] = str(ncores) # export MKL",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168
https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:3807,Energy Efficiency,energy,energy,3807,"export NUMEXPR_NUM_THREADS=4; # Set the max memory for PySCF; os.environ[""PYSCF_MAX_MEMORY""] = str(120000). import psi4; psi4.set_memory(int(120000*1e6)); numpy_memory = 40; import pyscf; from pyscf import dft; import numpy as np; # pyscf.lib.misc.num_threads(n=8). xyzFilename = 'Decane_C10H22.xyz'. #psi4_geo = psi4.geometry(geo_txt); with open(xyzFilename,""r"") as f:; xyz_string = f.read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sap"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":302,; ""dft_radial_points"" :75,; ""diis_max_vecs"" : 6,; #""DFT_NUCLEAR_SCHEME"":""becke"",; ""E_CONVERGENCE"":1e-7,; }; ); energy_psi4, wfn = psi4.energy(name=""scf"",dft_functional=""svwn"", molecule=psi4_geo, return_wfn=True); basis = wfn.basisset(). # Generate grid points; functional = psi4.driver.dft.build_superfunctional(""svwn"", True)[0] # True states that we're working with a restricted system; Vpot = psi4.core.VBase.build(basis, functional, ""RV"") # This object contains different methods associated with DFT methods and the grid.; # ""RV"" states that this is a restricted system consistent with 'functional'; Vpot.initialize() # We initialize the object. # The grid (and weights) can then be extracted from Vpot.; x, y, z, weights_psi4 = Vpot.get_np_xyzw(); Vpot = 0; #print(x.shape); #print(y.shape); #print(z.shape); #print(weights_psi4.shape); # Combine the arrays into a single 2D array; points = np.column_stack((x, y, z)); print(points.shape). # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, # just removing the last line that was only for psi4; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ). mf = dft.rks.RKS(mol, xc=""LDA,VWNRPA"").density_fit(auxbasis=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168
https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:5360,Energy Efficiency,energy,energy,5360,"lse,; ""guess"": ""sap"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":302,; ""dft_radial_points"" :75,; ""diis_max_vecs"" : 6,; #""DFT_NUCLEAR_SCHEME"":""becke"",; ""E_CONVERGENCE"":1e-7,; }; ); energy_psi4, wfn = psi4.energy(name=""scf"",dft_functional=""svwn"", molecule=psi4_geo, return_wfn=True); basis = wfn.basisset(). # Generate grid points; functional = psi4.driver.dft.build_superfunctional(""svwn"", True)[0] # True states that we're working with a restricted system; Vpot = psi4.core.VBase.build(basis, functional, ""RV"") # This object contains different methods associated with DFT methods and the grid.; # ""RV"" states that this is a restricted system consistent with 'functional'; Vpot.initialize() # We initialize the object. # The grid (and weights) can then be extracted from Vpot.; x, y, z, weights_psi4 = Vpot.get_np_xyzw(); Vpot = 0; #print(x.shape); #print(y.shape); #print(z.shape); #print(weights_psi4.shape); # Combine the arrays into a single 2D array; points = np.column_stack((x, y, z)); print(points.shape). # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, # just removing the last line that was only for psi4; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ). mf = dft.rks.RKS(mol, xc=""LDA,VWNRPA"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; # mf.grids.level = 5; mf.verbose = 4; mf.grids.prune = None; mf.grids.atom_grid = (75, 302); mf.grids.becke_scheme = dft.gen_grid.stratmann; mf.small_rho_cutoff = 1e-15; mf.grids.build(); mf.grids.coords = points; print(mf.grids.coords.shape); mf.grids.weights = weights_psi4; print(mf.grids.weights.shape); mf.conv_tol = 1e-7; energy_pyscf = mf.kernel(); print(mf.grids.coords.shape); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); print(abs(energy_psi4-energy_pyscf)). ```. Not entirely sure if pyscf indeed was using psi4 grids here though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168
https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:5406,Energy Efficiency,energy,energy,5406,"lse,; ""guess"": ""sap"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":302,; ""dft_radial_points"" :75,; ""diis_max_vecs"" : 6,; #""DFT_NUCLEAR_SCHEME"":""becke"",; ""E_CONVERGENCE"":1e-7,; }; ); energy_psi4, wfn = psi4.energy(name=""scf"",dft_functional=""svwn"", molecule=psi4_geo, return_wfn=True); basis = wfn.basisset(). # Generate grid points; functional = psi4.driver.dft.build_superfunctional(""svwn"", True)[0] # True states that we're working with a restricted system; Vpot = psi4.core.VBase.build(basis, functional, ""RV"") # This object contains different methods associated with DFT methods and the grid.; # ""RV"" states that this is a restricted system consistent with 'functional'; Vpot.initialize() # We initialize the object. # The grid (and weights) can then be extracted from Vpot.; x, y, z, weights_psi4 = Vpot.get_np_xyzw(); Vpot = 0; #print(x.shape); #print(y.shape); #print(z.shape); #print(weights_psi4.shape); # Combine the arrays into a single 2D array; points = np.column_stack((x, y, z)); print(points.shape). # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, # just removing the last line that was only for psi4; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ). mf = dft.rks.RKS(mol, xc=""LDA,VWNRPA"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; # mf.grids.level = 5; mf.verbose = 4; mf.grids.prune = None; mf.grids.atom_grid = (75, 302); mf.grids.becke_scheme = dft.gen_grid.stratmann; mf.small_rho_cutoff = 1e-15; mf.grids.build(); mf.grids.coords = points; print(mf.grids.coords.shape); mf.grids.weights = weights_psi4; print(mf.grids.weights.shape); mf.conv_tol = 1e-7; energy_pyscf = mf.kernel(); print(mf.grids.coords.shape); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); print(abs(energy_psi4-energy_pyscf)). ```. Not entirely sure if pyscf indeed was using psi4 grids here though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168
https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:1091,Integrability,depend,dependencies,1091," libxc keywords to combine unambiguity and human readability: xc = 'lda_x,lda_c_vwn_rpa'. You can also use libxc identifiers in Psi4 but the syntax is a bit more verbose (you need to define a Psi4-style functional). Yes, I agree that `xc = 'lda_x,lda_c_vwn_rpa'` is better in terms of readability. Thanks for letting me know!. > That does not suffice. In addition to setting the grid with e.g. mf.grids.atom_grid = (100,590) you need to turn pruning off explicitly with mf.grids.prune = None. I noticed that too which is why I had used it in the script I provided. > By defaults PySCF truncates basis functions to 1e-8 while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in. I am not sure which threshold are you talking about here. One of the thresholds I found here is much tighter and should be enough imho; https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28. > There are also be differences in how linear dependencies are handled in density fitting. As you said, I don't think here there are any major issues regarding linear dependencies. > I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. . I am working on this suggestion. > So in addition to setting mf.small_rho_cutoff = 1e-15 in PySCF you also need to use a smaller threshold for the basis function screening. Is this the same as here (https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28) or something else?; I tried reducing it 1e-20 using the config file but still got the same result (an error of around 35 uH). > Usually one is able to get different programs to agree beyond 1 uEh in DFT total energies, when the calculations are converged with respect to all numerical parameters. I usually only look at small calculations, though,. I agree and I am usually able to reproduce the same results as TURBOMOLE RIPER (using mostly default",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168
https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:1212,Integrability,depend,dependencies,1212,"ou can also use libxc identifiers in Psi4 but the syntax is a bit more verbose (you need to define a Psi4-style functional). Yes, I agree that `xc = 'lda_x,lda_c_vwn_rpa'` is better in terms of readability. Thanks for letting me know!. > That does not suffice. In addition to setting the grid with e.g. mf.grids.atom_grid = (100,590) you need to turn pruning off explicitly with mf.grids.prune = None. I noticed that too which is why I had used it in the script I provided. > By defaults PySCF truncates basis functions to 1e-8 while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in. I am not sure which threshold are you talking about here. One of the thresholds I found here is much tighter and should be enough imho; https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28. > There are also be differences in how linear dependencies are handled in density fitting. As you said, I don't think here there are any major issues regarding linear dependencies. > I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. . I am working on this suggestion. > So in addition to setting mf.small_rho_cutoff = 1e-15 in PySCF you also need to use a smaller threshold for the basis function screening. Is this the same as here (https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28) or something else?; I tried reducing it 1e-20 using the config file but still got the same result (an error of around 35 uH). > Usually one is able to get different programs to agree beyond 1 uEh in DFT total energies, when the calculations are converged with respect to all numerical parameters. I usually only look at small calculations, though,. I agree and I am usually able to reproduce the same results as TURBOMOLE RIPER (using mostly defaults) upto $<1 \mu H$ accuracy even for large systems. This is why I was trying to find out w",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168
https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:1697,Modifiability,config,config,1697," to 1e-8 while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in. I am not sure which threshold are you talking about here. One of the thresholds I found here is much tighter and should be enough imho; https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28. > There are also be differences in how linear dependencies are handled in density fitting. As you said, I don't think here there are any major issues regarding linear dependencies. > I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. . I am working on this suggestion. > So in addition to setting mf.small_rho_cutoff = 1e-15 in PySCF you also need to use a smaller threshold for the basis function screening. Is this the same as here (https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28) or something else?; I tried reducing it 1e-20 using the config file but still got the same result (an error of around 35 uH). > Usually one is able to get different programs to agree beyond 1 uEh in DFT total energies, when the calculations are converged with respect to all numerical parameters. I usually only look at small calculations, though,. I agree and I am usually able to reproduce the same results as TURBOMOLE RIPER (using mostly defaults) upto $<1 \mu H$ accuracy even for large systems. This is why I was trying to find out why the difference was around 35 uH for decane. Furthermore, since the no. of grid points coming out of pyscf and psi4 were different even for the same number of radial and angular grid points, I even tried to use the same grids as psi4 in pyscf but still got the same result. Here is the script I used; ```python; import os. ncores = 8; os.environ['OMP_NUM_THREADS'] = str(ncores); os.environ[""OPENBLAS_NUM_THREADS""] = str(ncores) # export OPENBLAS_NUM_THREADS=4; os.environ[""MKL_NUM_THREADS""] = str(ncores) # export MKL",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168
https://github.com/psi4/psi4/issues/2911#issuecomment-1487635966:8,Energy Efficiency,energy,energy,8,"BTW the energy agreement b/w PySCF and psi4 for Ethane with the above script is up to 1e-11 a.u. so I guess, this is as good as it is gonna get.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487635966
https://github.com/psi4/psi4/issues/2911#issuecomment-1488546315:10,Energy Efficiency,energy,energy,10,"> BTW the energy agreement b/w PySCF and psi4 for Ethane with the above script is up to 1e-11 a.u. so I guess, this is as good as it is gonna get. So what did you change from the earlier try? Just the system?. I think it is important to dig out why the programs are giving different total energies in large calculations, since this may hint to a bug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1488546315
https://github.com/psi4/psi4/issues/2911#issuecomment-1488616136:450,Energy Efficiency,energy,energy,450,"I think I didn't convey what I meant here. . The earlier problem I reported in this issue was that the Ethane LDA energies were not matching, which got resolved by using the correct functional. But I had stated there that the energies only matched up to 6 decimal places. Later on with your and @JonathonMisiewicz 's advice I posted a new script comparing the energies for a different molecule (Decane) with the two programs. There I stated that the energy difference was 35 uH. And then as a side note, I have mentioned that for a smaller Ethane molecule, however, the difference is only 1e-11 H **_using the same script_**. . Edit: Ahh, I didn't notice your edited reply. Yes, I just changed the system. Currently, for my needs the difference in energies is acceptable. But I would definitely keep investigating more systems or different functionals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1488616136
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:70,Deployability,install,install,70,"python 3.8, 3.9, & 3.10 all failing. also removed the '-rt'. `; mamba install psi4 psi4 python=3.8 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.8']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:1042,Deployability,install,installable,1042,"python 3.8, 3.9, & 3.10 all failing. also removed the '-rt'. `; mamba install psi4 psi4 python=3.8 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.8']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:1367,Deployability,install,installed,1367,"██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.8']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:1767,Deployability,install,installed,1767,"'python=3.8']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2023,Deployability,install,installed,2023,"ible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be inst",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2195,Deployability,install,installed,2195,"10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2252,Deployability,install,installable,2252,"_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2376,Deployability,install,installed,2376,"│ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /███████████████████████",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2480,Deployability,install,installed,2480,"ich does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗███",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2569,Deployability,install,installed,2569,"│ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔█",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2658,Deployability,install,installed,2658," missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2747,Deployability,install,installed,2747,"* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2845,Deployability,install,installed,2845,"; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:2934,Deployability,install,installed,2934,"4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:3022,Deployability,install,installed,3022,"stalled;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.9']. pkgs/r/linux-64 No change; pkgs/main/linux-64 No change; pkgs/main/no",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:3124,Deployability,install,installed,3124,"perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.9']. pkgs/r/linux-64 No change; pkgs/main/linux-64 No change; pkgs/main/noarch No change; psi4/noarch No change; pkgs/r/noarch No change; psi4/linux-64 No change; Could not so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:3210,Deployability,install,installed,3210,"as previously explained);; └─ python 3.8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.9']. pkgs/r/linux-64 No change; pkgs/main/linux-64 No change; pkgs/main/noarch No change; psi4/noarch No change; pkgs/r/noarch No change; psi4/linux-64 No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:3242,Deployability,install,install,3242,".8** is installable with the potential options; ├─ python [3.8.0|3.8.1] would require; │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; ├─ python [3.8.10|3.8.11|3.8.8] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; ├─ python 3.8.12 would require; │ └─ openssl >=1.1.1l,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.8.13 would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.8.15|3.8.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.8.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.8.2 would require; │ └─ openssl >=1.1.1e,<1.1.2a , which can be installed;; ├─ python [3.8.2|3.8.3|3.8.5] would require; │ └─ openssl >=1.1.1g,<1.1.2a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.9']. pkgs/r/linux-64 No change; pkgs/main/linux-64 No change; pkgs/main/noarch No change; psi4/noarch No change; pkgs/r/noarch No change; psi4/linux-64 No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:4206,Deployability,install,installable,4206,"a , which can be installed;; └─ python 3.8.8 would require; └─ openssl >=1.1.1j,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.9 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.9']. pkgs/r/linux-64 No change; pkgs/main/linux-64 No change; pkgs/main/noarch No change; psi4/noarch No change; pkgs/r/noarch No change; psi4/linux-64 No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:4531,Deployability,install,installed,4531,"╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.9']. pkgs/r/linux-64 No change; pkgs/main/linux-64 No change; pkgs/main/noarch No change; psi4/noarch No change; pkgs/r/noarch No change; psi4/linux-64 No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be insta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:4931,Deployability,install,installed,4931,"'psi4', 'python=3.9']. pkgs/r/linux-64 No change; pkgs/main/linux-64 No change; pkgs/main/noarch No change; psi4/noarch No change; pkgs/r/noarch No change; psi4/linux-64 No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:5187,Deployability,install,installed,5187,"ible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:5359,Deployability,install,installed,5359,"10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be instal",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:5416,Deployability,install,installable,5416,"2_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:5532,Deployability,install,installed,5532,"alled;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /███████████████████",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:5620,Deployability,install,installed,5620," │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:5718,Deployability,install,installed,5718,"uld require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:5807,Deployability,install,installed,5807,"xist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║█",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:5905,Deployability,install,installed,5905,"on 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:6003,Deployability,install,installed,6003,"quires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:6092,Deployability,install,installed,6092,"1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas 1.0 mkl, which can be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:6180,Deployability,install,installed,6180," be installed;; │ └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; │ ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.10']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:6282,Deployability,install,installed,6282,"xist (perhaps a missing channel);; │ └─ pychemps2 1.7.1 , which cannot be installed (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.10']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:6368,Deployability,install,installed,6368,"lled (as previously explained);; └─ python 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.10']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:6400,Deployability,install,install,6400,"thon 3.9** is installable with the potential options; ├─ python 3.9.0 would require; │ └─ openssl >=1.1.1h,<1.1.2a , which can be installed;; ├─ python 3.9.1 would require; │ └─ openssl >=1.1.1i,<1.1.2a , which can be installed;; ├─ python [3.9.11|3.9.12] would require; │ └─ openssl >=1.1.1n,<1.1.2a , which can be installed;; ├─ python 3.9.12 would require; │ └─ openssl >=1.1.1o,<1.1.2a , which can be installed;; ├─ python [3.9.13|3.9.15] would require; │ └─ openssl >=1.1.1q,<1.1.2a , which can be installed;; ├─ python [3.9.15|3.9.16] would require; │ └─ openssl >=1.1.1s,<1.1.2a , which can be installed;; ├─ python 3.9.16 would require; │ └─ openssl >=1.1.1t,<1.1.2a , which can be installed;; ├─ python 3.9.2 would require; │ └─ openssl >=1.1.1j,<1.1.2a , which can be installed;; ├─ python [3.9.4|3.9.5|3.9.6] would require; │ └─ openssl >=1.1.1k,<1.1.2a , which can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.10']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └─ psi4 is installable with the potentia",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:7374,Deployability,install,installable,7374,"hich can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.10']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └─ psi4 is installable with the potential options; ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:7689,Deployability,install,installed,7689,"██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.10']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └─ psi4 is installable with the potential options; ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ op",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:8165,Deployability,install,installed,8165,"ng cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └─ psi4 is installable with the potential options; ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1c,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1b,<1.1.2a , which can be installed;; │ ├─ python [2.7.16|2.7.17] would require; │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ └─ python 2.7.18, which can be installed;; ├─ psi4 1.1+add49b9 would require; │ └─ gcc-5-mp , which requires; │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:8258,Deployability,install,installed,8258,"i4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └─ psi4 is installable with the potential options; ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1c,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1b,<1.1.2a , which can be installed;; │ ├─ python [2.7.16|2.7.17] would require; │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ └─ python 2.7.18, which can be installed;; ├─ psi4 1.1+add49b9 would require; │ └─ gcc-5-mp , which requires; │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ └─ blas 1.0 mkl, which can be installed;; └─ psi4 [0.5.360|1.0rc0|1.0rc213]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:8360,Deployability,install,installed,8360,"─ psi4 is installable with the potential options; ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1c,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1b,<1.1.2a , which can be installed;; │ ├─ python [2.7.16|2.7.17] would require; │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ └─ python 2.7.18, which can be installed;; ├─ psi4 1.1+add49b9 would require; │ └─ gcc-5-mp , which requires; │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ └─ blas 1.0 mkl, which can be installed;; └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; └─ pychemps2 1.7.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:8453,Deployability,install,installed,8453,"1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1c,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1b,<1.1.2a , which can be installed;; │ ├─ python [2.7.16|2.7.17] would require; │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ └─ python 2.7.18, which can be installed;; ├─ psi4 1.1+add49b9 would require; │ └─ gcc-5-mp , which requires; │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ └─ blas 1.0 mkl, which can be installed;; └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; └─ pychemps2 1.7.1 , which cannot be installed (as previously explained).; `",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:8546,Deployability,install,installed,8546,"1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1c,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1b,<1.1.2a , which can be installed;; │ ├─ python [2.7.16|2.7.17] would require; │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ └─ python 2.7.18, which can be installed;; ├─ psi4 1.1+add49b9 would require; │ └─ gcc-5-mp , which requires; │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ └─ blas 1.0 mkl, which can be installed;; └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; └─ pychemps2 1.7.1 , which cannot be installed (as previously explained).; `",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:8639,Deployability,install,installed,8639,"1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1c,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1b,<1.1.2a , which can be installed;; │ ├─ python [2.7.16|2.7.17] would require; │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ └─ python 2.7.18, which can be installed;; ├─ psi4 1.1+add49b9 would require; │ └─ gcc-5-mp , which requires; │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ └─ blas 1.0 mkl, which can be installed;; └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; └─ pychemps2 1.7.1 , which cannot be installed (as previously explained).; `",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:8732,Deployability,install,installed,8732,"1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1c,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1b,<1.1.2a , which can be installed;; │ ├─ python [2.7.16|2.7.17] would require; │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ └─ python 2.7.18, which can be installed;; ├─ psi4 1.1+add49b9 would require; │ └─ gcc-5-mp , which requires; │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ └─ blas 1.0 mkl, which can be installed;; └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; └─ pychemps2 1.7.1 , which cannot be installed (as previously explained).; `",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:8825,Deployability,install,installed,8825,"1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1c,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1b,<1.1.2a , which can be installed;; │ ├─ python [2.7.16|2.7.17] would require; │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ └─ python 2.7.18, which can be installed;; ├─ psi4 1.1+add49b9 would require; │ └─ gcc-5-mp , which requires; │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ └─ blas 1.0 mkl, which can be installed;; └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; └─ pychemps2 1.7.1 , which cannot be installed (as previously explained).; `",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:8927,Deployability,install,installed,8927,"1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1c,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1b,<1.1.2a , which can be installed;; │ ├─ python [2.7.16|2.7.17] would require; │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ └─ python 2.7.18, which can be installed;; ├─ psi4 1.1+add49b9 would require; │ └─ gcc-5-mp , which requires; │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ └─ blas 1.0 mkl, which can be installed;; └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; └─ pychemps2 1.7.1 , which cannot be installed (as previously explained).; `",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:8972,Deployability,install,installed,8972,"1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1c,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1b,<1.1.2a , which can be installed;; │ ├─ python [2.7.16|2.7.17] would require; │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ └─ python 2.7.18, which can be installed;; ├─ psi4 1.1+add49b9 would require; │ └─ gcc-5-mp , which requires; │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ └─ blas 1.0 mkl, which can be installed;; └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; └─ pychemps2 1.7.1 , which cannot be installed (as previously explained).; `",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:9218,Deployability,install,installed,9218,"1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1c,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1b,<1.1.2a , which can be installed;; │ ├─ python [2.7.16|2.7.17] would require; │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ └─ python 2.7.18, which can be installed;; ├─ psi4 1.1+add49b9 would require; │ └─ gcc-5-mp , which requires; │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ └─ blas 1.0 mkl, which can be installed;; └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; └─ pychemps2 1.7.1 , which cannot be installed (as previously explained).; `",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:9384,Deployability,install,installed,9384,"1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │ ├─ python [2.7.14|2.7.15] would require; │ │ └─ openssl >=1.0.2o,<1.0.3a , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2m,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.0.2p,<1.0.3a , which can be installed;; │ ├─ python 2.7.15 would require; │ │ └─ openssl >=1.1.1a,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1c,<1.1.2a , which can be installed;; │ ├─ python 2.7.16 would require; │ │ └─ openssl >=1.1.1b,<1.1.2a , which can be installed;; │ ├─ python [2.7.16|2.7.17] would require; │ │ └─ openssl >=1.1.1d,<1.1.2a , which can be installed;; │ └─ python 2.7.18, which can be installed;; ├─ psi4 1.1+add49b9 would require; │ └─ gcc-5-mp , which requires; │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ └─ blas 1.0 mkl, which can be installed;; └─ psi4 [0.5.360|1.0rc0|1.0rc213] would require; ├─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; └─ pychemps2 1.7.1 , which cannot be installed (as previously explained).; `",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:810,Performance,cache,cache,810,"python 3.8, 3.9, & 3.10 all failing. also removed the '-rt'. `; mamba install psi4 psi4 python=3.8 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.8']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:840,Performance,cache,cache,840,"python 3.8, 3.9, & 3.10 all failing. also removed the '-rt'. `; mamba install psi4 psi4 python=3.8 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.8']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:869,Performance,cache,cache,869,"python 3.8, 3.9, & 3.10 all failing. also removed the '-rt'. `; mamba install psi4 psi4 python=3.8 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.8']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:896,Performance,cache,cache,896,"python 3.8, 3.9, & 3.10 all failing. also removed the '-rt'. `; mamba install psi4 psi4 python=3.8 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.8']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; ├─ psi4 is installable with the potential options; │ ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ │ └─ pychemps2 >=1.7.1 with the potential options; │ │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ │ └─ blas 1.0 mkl, which can be installed;; │ │ ├─ pychemps2 1.7.1 would require; │ │ │ └─ chemps2 1.7.1 , which requires; │ │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ │ └─ pychemps2 1.8.3 would require; │ │ └─ chemps2 1.8.3 , which requires; │ │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ │ └─ python 2.7* , which can be installed;; │ ├─ psi4 1.1+add49b9 would require; │ │ └─ gcc-5-mp , which requires; │ │ └─ mpc 1.0.1 , which does not exist (perhaps a missing channel);; │ ├─ psi4 [1.2+9d4a61c|1.2.1+406f4de|...|1.7+6ce35a5] would require; │ │ └─ blas ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:7142,Performance,cache,cache,7142,"hich can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.10']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └─ psi4 is installable with the potential options; ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:7172,Performance,cache,cache,7172,"hich can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.10']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └─ psi4 is installable with the potential options; ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:7201,Performance,cache,cache,7201,"hich can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.10']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └─ psi4 is installable with the potential options; ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966:7228,Performance,cache,cache,7228,"hich can be installed;; └─ python 3.9.7 would require; └─ openssl >=1.1.1l,<1.1.2a , which can be installed.; (ecv) [vike]$ mamba install psi4 psi4 python=3.10 -c psi4. __ __ __ __; / \ / \ / \ / \; / \/ \/ \/ \; ███████████████/ /██/ /██/ /██/ /████████████████████████; / / \ / \ / \ / \ \____; / / \_/ \_/ \_/ \ o \__,; / _/ \_____/ `; |/; ███╗ ███╗ █████╗ ███╗ ███╗██████╗ █████╗; ████╗ ████║██╔══██╗████╗ ████║██╔══██╗██╔══██╗; ██╔████╔██║███████║██╔████╔██║██████╔╝███████║; ██║╚██╔╝██║██╔══██║██║╚██╔╝██║██╔══██╗██╔══██║; ██║ ╚═╝ ██║██║ ██║██║ ╚═╝ ██║██████╔╝██║ ██║; ╚═╝ ╚═╝╚═╝ ╚═╝╚═╝ ╚═╝╚═════╝ ╚═╝ ╚═╝. mamba (1.4.1) supported by @QuantStack. GitHub: https://github.com/mamba-org/mamba; Twitter: https://twitter.com/QuantStack. █████████████████████████████████████████████████████████████. Looking for: ['psi4', 'psi4', 'python=3.10']. pkgs/main/linux-64 Using cache; pkgs/main/noarch Using cache; pkgs/r/linux-64 Using cache; pkgs/r/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change; Could not solve for environment specs; The following packages are incompatible; └─ psi4 is installable with the potential options; ├─ psi4 [1.0.0|1.0.24|...|1.0rc216] would require; │ └─ pychemps2 >=1.7.1 with the potential options; │ ├─ pychemps2 [1.8.10|1.8.11|1.8.9] would require; │ │ └─ chemps2 [1.8.10 hbe8a562_0|1.8.11 hbe8a562_0|1.8.9 h8c3debe_0], which requires; │ │ └─ blas 1.0 mkl, which can be installed;; │ ├─ pychemps2 1.7.1 would require; │ │ └─ chemps2 1.7.1 , which requires; │ │ └─ hdf5 1.8.16 , which does not exist (perhaps a missing channel);; │ └─ pychemps2 1.8.3 would require; │ └─ chemps2 1.8.3 , which requires; │ └─ hdf5 1.8.17 , which does not exist (perhaps a missing channel);; ├─ psi4 [0.0.10|0.1.100|...|0.5.0] would require; │ └─ python 2.7* with the potential options; │ ├─ python [2.7.13|2.7.14] would require; │ │ └─ openssl 1.0.* , which can be installed;; │ ├─ python 2.7.14 would require; │ │ └─ openssl >=1.0.2n,<1.0.3a , which can be installed;; │",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488619966
https://github.com/psi4/psi4/issues/2912#issuecomment-1488634530:91,Deployability,install,install,91,Got it!. I created the p4env via `conda create -n p4env psi4 -c psi4` and then used pip to install rdkit via `pip install rdkit`. closing issue,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488634530
https://github.com/psi4/psi4/issues/2912#issuecomment-1488634530:114,Deployability,install,install,114,Got it!. I created the p4env via `conda create -n p4env psi4 -c psi4` and then used pip to install rdkit via `pip install rdkit`. closing issue,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2912#issuecomment-1488634530
https://github.com/psi4/psi4/issues/2913#issuecomment-1487557230:71,Performance,cache,cache,71,Should there be an output in the zip? You might try first w/o altering cache settings.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2913#issuecomment-1487557230
https://github.com/psi4/psi4/issues/2913#issuecomment-1487616511:642,Safety,detect,detect,642,"Thanks. Your input looks reasonable to me. You could add `freeze_core=""true""`, if appealing, for some cost savings. TDC could diagnose more fully. In the meantime, is there any chance you're interested in trying density-fitted `gradient(""df-ccsd(t)"")` instead? https://psicode.org/psi4manual/master/occ.html#id73 That's analytic, or `gradient(""ccsd(t)"", dertype=0)` would do finite difference of the implementation you're running. Once-upon-a-time, UHF-CC(T)-gradients-are-N^8 and/or RHF-CC(T)-gradients-not-specialized-from-UHF was true. I now suspect that when I redid the capabilities tables last year that my test cases were too small to detect over-steep scaling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2913#issuecomment-1487616511
https://github.com/psi4/psi4/issues/2913#issuecomment-1487616511:613,Testability,test,test,613,"Thanks. Your input looks reasonable to me. You could add `freeze_core=""true""`, if appealing, for some cost savings. TDC could diagnose more fully. In the meantime, is there any chance you're interested in trying density-fitted `gradient(""df-ccsd(t)"")` instead? https://psicode.org/psi4manual/master/occ.html#id73 That's analytic, or `gradient(""ccsd(t)"", dertype=0)` would do finite difference of the implementation you're running. Once-upon-a-time, UHF-CC(T)-gradients-are-N^8 and/or RHF-CC(T)-gradients-not-specialized-from-UHF was true. I now suspect that when I redid the capabilities tables last year that my test cases were too small to detect over-steep scaling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2913#issuecomment-1487616511
https://github.com/psi4/psi4/issues/2914#issuecomment-1488779189:138,Usability,simpl,simple-,138,"please post `conda list`, `psi4 --version`, and a full input file. If it's just the pairwise analysis, there was https://github.com/dftd3/simple-dftd3/issues/35 . I'd have to see your versions to gauge susceptibility.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1488779189
https://github.com/psi4/psi4/issues/2914#issuecomment-1489094028:7962,Energy Efficiency,energy,energy,7962,00 36.03000000 9.93000000; O 26.68000000 36.87000000 11.09000000; H 25.98000000 36.69000000 11.80000000; C 26.74000000 34.53000000 10.18000000; O 27.89000001 34.37000000 11.02000000; C 28.26999999 33.01000001 11.01000002; O 29.55000001 32.99000000 11.67000002; C 28.63999990 28.50999996 11.68000007; C 28.33000059 29.91000007 12.18999969; O 28.83999937 30.35999995 13.22000030; C 30.62999995 33.35999999 10.78999982; C 31.16000002 34.76999999 11.04999999; O 30.15000000 35.79999999 10.86000001; H 29.24000000 35.45000000 11.16000000; C 32.36999990 35.04000004 10.16000007; N 32.96000011 36.40000001 10.24999989; H 33.43999992 36.60999994 11.11000008; C 31.37999998 30.92000003 10.71999990; O 31.03000002 30.69999997 9.34000003; H 30.25000000 31.26000002 9.07999999; C 31.76000013 32.36999994 11.05000035; O 32.93999984 32.67000007 10.28999985; C 33.39000016 33.98999994 10.58000000; O 34.65999997 34.09000001 9.93000003; C 33.92000000 38.41000000 9.38000000; C 33.23999999 37.07000001 9.14000001; O 33.00000000 36.61999999 8.02000000; H 24.65435416 33.93176259 10.20516873; H 25.34521441 34.27665155 11.81574303; H 25.95348789 31.94064553 9.95017919; H 27.22224423 32.15996591 12.70774349; H 25.55263275 36.16980897 9.44319827; H 27.30964226 36.38871462 9.25057388; H 26.94085586 34.07030274 9.19461993; H 28.41642946 32.70183446 9.95088734; H 27.78322955 28.04516473 11.18381951; H 28.96566529 27.88896763 12.51500357; H 29.46599158 28.57798137 10.96121476; H 30.30437458 33.30673875 9.73855107; H 31.48481262 34.80326610 12.11000048; H 32.10587690 34.89673725 9.10524993; H 32.25831075 30.29233849 10.89465664; H 30.58203658 30.61056845 11.40353474; H 31.99325508 32.41226530 12.13277846; H 33.61480536 34.07507757 11.65938436; H 34.49473784 34.29470961 8.99885832; H 34.70612551 38.54358507 8.63398711; H 34.34077243 38.49556636 10.38550479; H 33.18213475 39.20628980 9.23705282; }. set {; scf_type DF; freeze_core True; basis jun-cc-pVDZ; soscf true; soscf_max_iter 30; }. energy('fisapt0-d3mbj'),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1489094028
https://github.com/psi4/psi4/issues/2914#issuecomment-1489094028:493,Security,certificate,certificates,493,"> please post `conda list`, `psi4 --version`, and a full input file. If it's just the pairwise analysis, there was [dftd3/simple-dftd3#35](https://github.com/dftd3/simple-dftd3/issues/35) . I'd have to see your versions to gauge susceptibility. packages in environment at /home/gang/psi4conda:; #; # Name Version Build Channel; _libgcc_mutex 0.1 main ; _openmp_mutex 5.1 1_gnu ; ambit 0.6 py39h53dec33_2 psi4; attrs 22.1.0 py39h06a4308_0 ; blas 1.0 mkl ; brotlipy 0.7.0 py39h27cfd23_1003 ; ca-certificates 2022.10.11 h06a4308_0 ; certifi 2022.9.24 py39h06a4308_0 ; cffi 1.15.1 py39h5eee18b_3 ; charset-normalizer 2.0.4 pyhd3eb1b0_0 ; chemps2 1.8.11 hbe8a562_0 psi4; conda 22.11.1 py39h06a4308_4 ; conda-package-handling 1.9.0 py39h5eee18b_1 ; cryptography 38.0.1 py39h9ce1e76_0 ; dftd3 3.2.1 h84218bc_2 psi4; dftd4 v3.3.0 py39h758d17c_2 psi4; dkh 1.2 h173d85e_2 psi4; flit-core 3.6.0 pyhd3eb1b0_0 ; fockci 0.2.0 pyh681c21d_0 psi4; gau2grid 2.0.7 hd18ef5c_0 psi4; gcp 2.0.2 he991be0_2 psi4; gdma 2.2.6 h0e1e685_6 psi4; hdf5 1.10.6 hb1b8bf9_0 ; idna 3.4 py39h06a4308_0 ; importlib-metadata 4.11.3 py39h06a4308_0 ; importlib_metadata 4.11.3 hd3eb1b0_0 ; importlib_resources 5.2.0 pyhd3eb1b0_1 ; iniconfig 1.1.1 pyhd3eb1b0_0 ; intel-openmp 2021.4.0 h06a4308_3561 ; ld_impl_linux-64 2.38 h1181459_1 ; libecpint 1.0.7 hfebba4c_0 psi4; libefp 1.5.0 h117b10a_4 psi4; libffi 3.4.2 h6a678d5_6 ; libgcc-ng 11.2.0 h1234567_1 ; libgfortran-ng 7.5.0 ha8ba4b0_17 ; libgfortran4 7.5.0 ha8ba4b0_17 ; libgomp 11.2.0 h1234567_1 ; libint2 2.7.1 h2fe1556_15 psi4; libstdcxx-ng 11.2.0 h1234567_1 ; libxc 5.2.3 hfebba4c_0 psi4; mkl 2021.4.0 h06a4308_640 ; mkl-service 2.4.0 py39h7f8727e_0 ; mkl_fft 1.3.1 py39hd3c417c_0 ; mkl_random 1.2.2 py39h51133e4_0 ; mp2d 1.1.0 hfd86e86_0 psi4; msgpack-python 1.0.3 py39hd09550d_0 ; ncurses 6.3 h5eee18b_3 ; networkx 2.8.4 py39h06a4308_0 ; numpy 1.20.0 pypi_0 pypi; openssl 1.1.1s h7f8727e_0 ; optking 0.2.1 pyhbc12335_1 psi4; packaging 21.3 pyhd3eb1b0_0 ; pcmsolver 1.2.1.1 py39h92d4a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1489094028
https://github.com/psi4/psi4/issues/2914#issuecomment-1489094028:122,Usability,simpl,simple-,122,"> please post `conda list`, `psi4 --version`, and a full input file. If it's just the pairwise analysis, there was [dftd3/simple-dftd3#35](https://github.com/dftd3/simple-dftd3/issues/35) . I'd have to see your versions to gauge susceptibility. packages in environment at /home/gang/psi4conda:; #; # Name Version Build Channel; _libgcc_mutex 0.1 main ; _openmp_mutex 5.1 1_gnu ; ambit 0.6 py39h53dec33_2 psi4; attrs 22.1.0 py39h06a4308_0 ; blas 1.0 mkl ; brotlipy 0.7.0 py39h27cfd23_1003 ; ca-certificates 2022.10.11 h06a4308_0 ; certifi 2022.9.24 py39h06a4308_0 ; cffi 1.15.1 py39h5eee18b_3 ; charset-normalizer 2.0.4 pyhd3eb1b0_0 ; chemps2 1.8.11 hbe8a562_0 psi4; conda 22.11.1 py39h06a4308_4 ; conda-package-handling 1.9.0 py39h5eee18b_1 ; cryptography 38.0.1 py39h9ce1e76_0 ; dftd3 3.2.1 h84218bc_2 psi4; dftd4 v3.3.0 py39h758d17c_2 psi4; dkh 1.2 h173d85e_2 psi4; flit-core 3.6.0 pyhd3eb1b0_0 ; fockci 0.2.0 pyh681c21d_0 psi4; gau2grid 2.0.7 hd18ef5c_0 psi4; gcp 2.0.2 he991be0_2 psi4; gdma 2.2.6 h0e1e685_6 psi4; hdf5 1.10.6 hb1b8bf9_0 ; idna 3.4 py39h06a4308_0 ; importlib-metadata 4.11.3 py39h06a4308_0 ; importlib_metadata 4.11.3 hd3eb1b0_0 ; importlib_resources 5.2.0 pyhd3eb1b0_1 ; iniconfig 1.1.1 pyhd3eb1b0_0 ; intel-openmp 2021.4.0 h06a4308_3561 ; ld_impl_linux-64 2.38 h1181459_1 ; libecpint 1.0.7 hfebba4c_0 psi4; libefp 1.5.0 h117b10a_4 psi4; libffi 3.4.2 h6a678d5_6 ; libgcc-ng 11.2.0 h1234567_1 ; libgfortran-ng 7.5.0 ha8ba4b0_17 ; libgfortran4 7.5.0 ha8ba4b0_17 ; libgomp 11.2.0 h1234567_1 ; libint2 2.7.1 h2fe1556_15 psi4; libstdcxx-ng 11.2.0 h1234567_1 ; libxc 5.2.3 hfebba4c_0 psi4; mkl 2021.4.0 h06a4308_640 ; mkl-service 2.4.0 py39h7f8727e_0 ; mkl_fft 1.3.1 py39hd3c417c_0 ; mkl_random 1.2.2 py39h51133e4_0 ; mp2d 1.1.0 hfd86e86_0 psi4; msgpack-python 1.0.3 py39hd09550d_0 ; ncurses 6.3 h5eee18b_3 ; networkx 2.8.4 py39h06a4308_0 ; numpy 1.20.0 pypi_0 pypi; openssl 1.1.1s h7f8727e_0 ; optking 0.2.1 pyhbc12335_1 psi4; packaging 21.3 pyhd3eb1b0_0 ; pcmsolver 1.2.1.1 py39h92d4a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1489094028
https://github.com/psi4/psi4/issues/2914#issuecomment-1489094028:164,Usability,simpl,simple-,164,"> please post `conda list`, `psi4 --version`, and a full input file. If it's just the pairwise analysis, there was [dftd3/simple-dftd3#35](https://github.com/dftd3/simple-dftd3/issues/35) . I'd have to see your versions to gauge susceptibility. packages in environment at /home/gang/psi4conda:; #; # Name Version Build Channel; _libgcc_mutex 0.1 main ; _openmp_mutex 5.1 1_gnu ; ambit 0.6 py39h53dec33_2 psi4; attrs 22.1.0 py39h06a4308_0 ; blas 1.0 mkl ; brotlipy 0.7.0 py39h27cfd23_1003 ; ca-certificates 2022.10.11 h06a4308_0 ; certifi 2022.9.24 py39h06a4308_0 ; cffi 1.15.1 py39h5eee18b_3 ; charset-normalizer 2.0.4 pyhd3eb1b0_0 ; chemps2 1.8.11 hbe8a562_0 psi4; conda 22.11.1 py39h06a4308_4 ; conda-package-handling 1.9.0 py39h5eee18b_1 ; cryptography 38.0.1 py39h9ce1e76_0 ; dftd3 3.2.1 h84218bc_2 psi4; dftd4 v3.3.0 py39h758d17c_2 psi4; dkh 1.2 h173d85e_2 psi4; flit-core 3.6.0 pyhd3eb1b0_0 ; fockci 0.2.0 pyh681c21d_0 psi4; gau2grid 2.0.7 hd18ef5c_0 psi4; gcp 2.0.2 he991be0_2 psi4; gdma 2.2.6 h0e1e685_6 psi4; hdf5 1.10.6 hb1b8bf9_0 ; idna 3.4 py39h06a4308_0 ; importlib-metadata 4.11.3 py39h06a4308_0 ; importlib_metadata 4.11.3 hd3eb1b0_0 ; importlib_resources 5.2.0 pyhd3eb1b0_1 ; iniconfig 1.1.1 pyhd3eb1b0_0 ; intel-openmp 2021.4.0 h06a4308_3561 ; ld_impl_linux-64 2.38 h1181459_1 ; libecpint 1.0.7 hfebba4c_0 psi4; libefp 1.5.0 h117b10a_4 psi4; libffi 3.4.2 h6a678d5_6 ; libgcc-ng 11.2.0 h1234567_1 ; libgfortran-ng 7.5.0 ha8ba4b0_17 ; libgfortran4 7.5.0 ha8ba4b0_17 ; libgomp 11.2.0 h1234567_1 ; libint2 2.7.1 h2fe1556_15 psi4; libstdcxx-ng 11.2.0 h1234567_1 ; libxc 5.2.3 hfebba4c_0 psi4; mkl 2021.4.0 h06a4308_640 ; mkl-service 2.4.0 py39h7f8727e_0 ; mkl_fft 1.3.1 py39hd3c417c_0 ; mkl_random 1.2.2 py39h51133e4_0 ; mp2d 1.1.0 hfd86e86_0 psi4; msgpack-python 1.0.3 py39hd09550d_0 ; ncurses 6.3 h5eee18b_3 ; networkx 2.8.4 py39h06a4308_0 ; numpy 1.20.0 pypi_0 pypi; openssl 1.1.1s h7f8727e_0 ; optking 0.2.1 pyhbc12335_1 psi4; packaging 21.3 pyhd3eb1b0_0 ; pcmsolver 1.2.1.1 py39h92d4a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1489094028
https://github.com/psi4/psi4/issues/2914#issuecomment-1720232923:8830,Availability,error,error,8830,"9.187; N 32.575 19.445 27.669; C 32.087 18.889 26.432; C 31.731 17.414 26.713; C 31.321 16.545 25.541; C 31.013 15.137 26.058; C 30.543 14.205 24.939; N 30.199 12.899 25.479; H 31.224 19.458 26.087; H 32.557 18.953 28.374; H 32.758 18.931 25.732; H 32.498 16.999 27.137; H 31.008 17.401 27.36; H 30.542 16.92 25.101; H 32.031 16.513 24.881; H 31.806 14.766 26.475; H 30.329 15.188 26.744; H 29.773 14.59 24.492; H 31.241 14.112 24.272; H 29.548 12.991 26.078; H 29.922 12.373 24.817; H 30.914 12.537 25.867; C 31.761 21.869 21.802; C 32.242 20.403 21.82; C 33.766 20.25 22.033; C 34.219 19.883 23.454; N 33.896 18.494 23.771; C 34.834 17.555 23.931; N 36.131 17.833 23.815; N 34.474 16.305 24.204; H 31.663 22.232 22.825; H 30.794 21.929 21.302; H 32.406 22.415 21.326; H 31.776 19.927 22.525; H 31.997 19.98 20.982; H 34.092 19.569 21.424; H 34.194 21.084 21.782; H 35.175 20.022 23.537; H 33.79 20.472 24.095; H 33.07 18.269 23.849; H 36.39 18.633 23.634; H 36.712 17.209 23.924; H 33.641 16.105 24.278; H 35.074 15.698 24.31; C 38.551 24.807 28.833; C 39.217 23.791 29.752; O 40.012 23.0 29.251; H 39.174 24.9 27.944; H 37.55 24.41 28.664; H 38.405 25.701 29.18; N 38.994 23.745 31.065; C 39.394 22.611 31.867; C 38.505 22.665 33.102; O 37.885 23.692 33.416; C 40.943 22.687 32.147; C 41.446 23.269 33.424; O 41.297 21.311 32.139; H 38.613 24.41 31.455; H 39.273 21.75 31.437; H 41.327 23.294 31.495; H 42.122 21.236 32.281; H 42.415 23.239 33.434; H 41.151 24.19 33.499; H 41.099 22.757 34.172; N 38.365 21.521 33.776; C 37.444 21.422 34.889; H 36.713 20.636 34.701; H 37.974 21.174 35.809; H 38.903 20.867 33.627; H 36.998 22.28 34.969. units angstrom; no_reorient; symmetry c1; }. set globals {; basis jun-cc-pvdz; df_basis_scf jun-cc-pvdz-jkfit; df_basis_sapt jun-cc-pvdz-ri; guess sad; scf_type df; freeze_core true; }. set sapt {; print 1; }. energy('fisapt0-d3mbj'); ```. Hello, We are having the same pairwise sum error . ! !; ! pairwise sum -2.401299138175176 != energy -2.40130245 !; ! !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1720232923
https://github.com/psi4/psi4/issues/2914#issuecomment-1720232923:8757,Energy Efficiency,energy,energy,8757,"9.187; N 32.575 19.445 27.669; C 32.087 18.889 26.432; C 31.731 17.414 26.713; C 31.321 16.545 25.541; C 31.013 15.137 26.058; C 30.543 14.205 24.939; N 30.199 12.899 25.479; H 31.224 19.458 26.087; H 32.557 18.953 28.374; H 32.758 18.931 25.732; H 32.498 16.999 27.137; H 31.008 17.401 27.36; H 30.542 16.92 25.101; H 32.031 16.513 24.881; H 31.806 14.766 26.475; H 30.329 15.188 26.744; H 29.773 14.59 24.492; H 31.241 14.112 24.272; H 29.548 12.991 26.078; H 29.922 12.373 24.817; H 30.914 12.537 25.867; C 31.761 21.869 21.802; C 32.242 20.403 21.82; C 33.766 20.25 22.033; C 34.219 19.883 23.454; N 33.896 18.494 23.771; C 34.834 17.555 23.931; N 36.131 17.833 23.815; N 34.474 16.305 24.204; H 31.663 22.232 22.825; H 30.794 21.929 21.302; H 32.406 22.415 21.326; H 31.776 19.927 22.525; H 31.997 19.98 20.982; H 34.092 19.569 21.424; H 34.194 21.084 21.782; H 35.175 20.022 23.537; H 33.79 20.472 24.095; H 33.07 18.269 23.849; H 36.39 18.633 23.634; H 36.712 17.209 23.924; H 33.641 16.105 24.278; H 35.074 15.698 24.31; C 38.551 24.807 28.833; C 39.217 23.791 29.752; O 40.012 23.0 29.251; H 39.174 24.9 27.944; H 37.55 24.41 28.664; H 38.405 25.701 29.18; N 38.994 23.745 31.065; C 39.394 22.611 31.867; C 38.505 22.665 33.102; O 37.885 23.692 33.416; C 40.943 22.687 32.147; C 41.446 23.269 33.424; O 41.297 21.311 32.139; H 38.613 24.41 31.455; H 39.273 21.75 31.437; H 41.327 23.294 31.495; H 42.122 21.236 32.281; H 42.415 23.239 33.434; H 41.151 24.19 33.499; H 41.099 22.757 34.172; N 38.365 21.521 33.776; C 37.444 21.422 34.889; H 36.713 20.636 34.701; H 37.974 21.174 35.809; H 38.903 20.867 33.627; H 36.998 22.28 34.969. units angstrom; no_reorient; symmetry c1; }. set globals {; basis jun-cc-pvdz; df_basis_scf jun-cc-pvdz-jkfit; df_basis_sapt jun-cc-pvdz-ri; guess sad; scf_type df; freeze_core true; }. set sapt {; print 1; }. energy('fisapt0-d3mbj'); ```. Hello, We are having the same pairwise sum error . ! !; ! pairwise sum -2.401299138175176 != energy -2.40130245 !; ! !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1720232923
https://github.com/psi4/psi4/issues/2914#issuecomment-1720232923:8880,Energy Efficiency,energy,energy,8880,"9.187; N 32.575 19.445 27.669; C 32.087 18.889 26.432; C 31.731 17.414 26.713; C 31.321 16.545 25.541; C 31.013 15.137 26.058; C 30.543 14.205 24.939; N 30.199 12.899 25.479; H 31.224 19.458 26.087; H 32.557 18.953 28.374; H 32.758 18.931 25.732; H 32.498 16.999 27.137; H 31.008 17.401 27.36; H 30.542 16.92 25.101; H 32.031 16.513 24.881; H 31.806 14.766 26.475; H 30.329 15.188 26.744; H 29.773 14.59 24.492; H 31.241 14.112 24.272; H 29.548 12.991 26.078; H 29.922 12.373 24.817; H 30.914 12.537 25.867; C 31.761 21.869 21.802; C 32.242 20.403 21.82; C 33.766 20.25 22.033; C 34.219 19.883 23.454; N 33.896 18.494 23.771; C 34.834 17.555 23.931; N 36.131 17.833 23.815; N 34.474 16.305 24.204; H 31.663 22.232 22.825; H 30.794 21.929 21.302; H 32.406 22.415 21.326; H 31.776 19.927 22.525; H 31.997 19.98 20.982; H 34.092 19.569 21.424; H 34.194 21.084 21.782; H 35.175 20.022 23.537; H 33.79 20.472 24.095; H 33.07 18.269 23.849; H 36.39 18.633 23.634; H 36.712 17.209 23.924; H 33.641 16.105 24.278; H 35.074 15.698 24.31; C 38.551 24.807 28.833; C 39.217 23.791 29.752; O 40.012 23.0 29.251; H 39.174 24.9 27.944; H 37.55 24.41 28.664; H 38.405 25.701 29.18; N 38.994 23.745 31.065; C 39.394 22.611 31.867; C 38.505 22.665 33.102; O 37.885 23.692 33.416; C 40.943 22.687 32.147; C 41.446 23.269 33.424; O 41.297 21.311 32.139; H 38.613 24.41 31.455; H 39.273 21.75 31.437; H 41.327 23.294 31.495; H 42.122 21.236 32.281; H 42.415 23.239 33.434; H 41.151 24.19 33.499; H 41.099 22.757 34.172; N 38.365 21.521 33.776; C 37.444 21.422 34.889; H 36.713 20.636 34.701; H 37.974 21.174 35.809; H 38.903 20.867 33.627; H 36.998 22.28 34.969. units angstrom; no_reorient; symmetry c1; }. set globals {; basis jun-cc-pvdz; df_basis_scf jun-cc-pvdz-jkfit; df_basis_sapt jun-cc-pvdz-ri; guess sad; scf_type df; freeze_core true; }. set sapt {; print 1; }. energy('fisapt0-d3mbj'); ```. Hello, We are having the same pairwise sum error . ! !; ! pairwise sum -2.401299138175176 != energy -2.40130245 !; ! !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1720232923
https://github.com/psi4/psi4/issues/2914#issuecomment-1720232923:410,Security,certificate,certificates,410,```; # packages in environment at /home/tjsntlci/.conda/envs/p4dev:; #; # Name Version Build Channel; _libgcc_mutex 0.1 main; _openmp_mutex 5.1 1_gnu; _sysroot_linux-64_curr_repodata_hack 3 haa98f57_10; ambit 0.6 py38h53dec33_2 psi4; attrs 22.1.0 py38h06a4308_0; binutils_impl_linux-64 2.35.1 h27ae35d_9; binutils_linux-64 2.35.1 h454624a_30; blas 1.0 mkl; bzip2 1.0.8 h7b6447c_0; c-ares 1.18.1 h7f8727e_0; ca-certificates 2023.01.10 h06a4308_0; certifi 2022.12.7 py38h06a4308_0; chemps2 1.8.11 hbe8a562_0 psi4; cmake 3.22.1 h1fce559_0; dkh 1.2 h173d85e_2 psi4; eigen 3.3.7 hd09550d_1; execnet 1.9.0 pyhd3eb1b0_0; expat 2.4.9 h6a678d5_0; flit-core 3.6.0 pyhd3eb1b0_0; gau2grid 2.0.7 hd18ef5c_0 psi4; gcc_impl_linux-64 7.5.0 h7105cf2_17; gcc_linux-64 7.5.0 h8f34230_30; gdma 2.2.6 h0e1e685_6 psi4; gfortran_impl_linux-64 7.5.0 ha8c8e06_17; gfortran_linux-64 7.5.0 h96bb648_30; gxx_impl_linux-64 7.5.0 h0a5bf11_17; gxx_linux-64 7.5.0 hffc177d_30; hdf5 1.10.6 hb1b8bf9_0; importlib-metadata 4.11.3 py38h06a4308_0; importlib_metadata 4.11.3 hd3eb1b0_0; importlib_resources 5.2.0 pyhd3eb1b0_1; iniconfig 1.1.1 pyhd3eb1b0_0; intel-openmp 2021.4.0 h06a4308_3561; kernel-headers_linux-64 3.10.0 h57e8cba_10; krb5 1.19.4 h568e23c_0; ld_impl_linux-64 2.35.1 h7274673_9; libcurl 7.87.0 h91b91d3_0; libecpint 1.0.7 hfebba4c_0 psi4; libedit 3.1.20221030 h5eee18b_0; libev 4.33 h7f8727e_1; libffi 3.4.2 h6a678d5_6; libgcc-devel_linux-64 7.5.0 hbbeae57_17; libgcc-ng 11.2.0 h1234567_1; libgfortran-ng 7.5.0 ha8ba4b0_17; libgfortran4 7.5.0 ha8ba4b0_17; libgomp 11.2.0 h1234567_1; libint2 2.7.1 h2fe1556_15 psi4; libnghttp2 1.46.0 hce63b2e_0; libssh2 1.10.0 h8f2d780_0; libstdcxx-devel_linux-64 7.5.0 hf0c5c8d_17; libstdcxx-ng 11.2.0 h1234567_1; libuv 1.40.0 h7b6447c_0; libxc 5.2.3 hfebba4c_0 psi4; lz4-c 1.9.4 h6a678d5_0; mkl 2021.4.0 h06a4308_640; mkl-devel 2021.4.0 h66538d2_640; mkl-include 2021.4.0 h06a4308_640; mkl-service 2.4.0 py38h7f8727e_0; mkl_fft 1.3.1 py38hd3c417c_0; mkl_random 1.2.2 py38h51133e4_0; ms,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1720232923
https://github.com/psi4/psi4/issues/2914#issuecomment-1720790520:602,Deployability,install,installs,602,"I don't have enough memory to complete these jobs, but I note that the first env example is using package `dftd3` from the psi4 channel, and the second env has no dftd3-related packages, suggesting a local binary. That older implementation of dftd3 with a fairly recent psi4 (1.7 from late 2022) could manifest the incompatibility you saw. I'd suggest using the latest version of psi4 (1.8.1) and the newer `dftd3-python` package instead. A new env from `conda create -n p4env psi4 python=3.10 dftd3-python -c conda-forge/label/libint_dev -c conda-forge` (variations as needed from https://psicode.org/installs/v18/ with `*/conda/*/stable` selections).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2914#issuecomment-1720790520
https://github.com/psi4/psi4/pull/2915#issuecomment-1493167993:107,Energy Efficiency,reduce,reduce,107,"Just implemented some of Lori and Tibor's suggestions. I have also implemented SC-LMP2 for ""weak pairs"" to reduce the cost of the LCCSD computation, per the Sparse Maps II paper.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2915#issuecomment-1493167993
https://github.com/psi4/psi4/issues/2916#issuecomment-1495233931:68,Deployability,update,update,68,"Very sorry, I hit submit before I finished typing the issue. I will update this issue with details about the problem. Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2916#issuecomment-1495233931
https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238:60,Availability,error,error,60,I have updated the body of the issue with details about the error message. Thanks in advance!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238
https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238:7,Deployability,update,updated,7,I have updated the body of the issue with details about the error message. Thanks in advance!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238
https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238:66,Integrability,message,message,66,I have updated the body of the issue with details about the error message. Thanks in advance!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2916#issuecomment-1495254238
https://github.com/psi4/psi4/issues/2916#issuecomment-1495847906:173,Deployability,release,releases,173,What version of Psi4 are you using? I _suspect_ this was fixed in [a previous PR of mine](https://github.com/psi4/psi4/pull/2857) that hasn't yet been included in any conda releases. I'll confirm when I get to the office.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2916#issuecomment-1495847906
https://github.com/psi4/psi4/issues/2916#issuecomment-1496078211:180,Availability,error,error,180,"Since you got v1.7 from conda with `-c psi4`, you can get v1.8a1.dev37 (for Linux) from conda with `-c psi4/label/dev`. It will have Jonathon's fix. Thanks for the nicely prepared error report, btw.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2916#issuecomment-1496078211
https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:256,Availability,avail,available,256,"This is a quick script exported from Jupyter to animate vibrational modes from Psi4. It uses py3Dmol and takes in dressed xyz files. The script shows how to turn psi4's exported results into the dressed xyz files. I should write something so the format is available directly. Or this’d be a nice opportunity for a jupyter widget, which @armcdona might try. And @fevangelista has a widget for vib vector arrows that could probably be animated. ```; #!/usr/bin/env python; # coding: utf-8; ​; # In[ ]:; ​; ​; # note the capital ""D"". obtain by `conda install py3dmol -c conda-forge`; import py3Dmol; print(py3Dmol.__version__); ​; ​; # In[ ]:; ​; ​; # run an optfreq calc and write the vibrational analysis to disk in a "".vibrec"" file; ​; # molecule h2odim {; # O -1.551007 -0.114520 0.000000; # H -1.934259 0.762503 0.000000; # H -0.599677 0.040712 0.000000; # --; # 0 1; # O 1.350625 0.111469 0.000000; # H 1.680398 -0.373741 -0.758561; # H 1.680398 -0.373741 0.758561; # units angstrom; # }; ​; # set basis sto-3g; # set e_convergence 9; # set g_convergence gau_verytight; ​; # optimize('mp2', molecule=h2odim); ​; ​; # e, wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; v",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131
https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:548,Deployability,install,install,548,"This is a quick script exported from Jupyter to animate vibrational modes from Psi4. It uses py3Dmol and takes in dressed xyz files. The script shows how to turn psi4's exported results into the dressed xyz files. I should write something so the format is available directly. Or this’d be a nice opportunity for a jupyter widget, which @armcdona might try. And @fevangelista has a widget for vib vector arrows that could probably be animated. ```; #!/usr/bin/env python; # coding: utf-8; ​; # In[ ]:; ​; ​; # note the capital ""D"". obtain by `conda install py3dmol -c conda-forge`; import py3Dmol; print(py3Dmol.__version__); ​; ​; # In[ ]:; ​; ​; # run an optfreq calc and write the vibrational analysis to disk in a "".vibrec"" file; ​; # molecule h2odim {; # O -1.551007 -0.114520 0.000000; # H -1.934259 0.762503 0.000000; # H -0.599677 0.040712 0.000000; # --; # 0 1; # O 1.350625 0.111469 0.000000; # H 1.680398 -0.373741 -0.758561; # H 1.680398 -0.373741 0.758561; # units angstrom; # }; ​; # set basis sto-3g; # set e_convergence 9; # set g_convergence gau_verytight; ​; # optimize('mp2', molecule=h2odim); ​; ​; # e, wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; v",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131
https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:1078,Performance,optimiz,optimize,1078,"takes in dressed xyz files. The script shows how to turn psi4's exported results into the dressed xyz files. I should write something so the format is available directly. Or this’d be a nice opportunity for a jupyter widget, which @armcdona might try. And @fevangelista has a widget for vib vector arrows that could probably be animated. ```; #!/usr/bin/env python; # coding: utf-8; ​; # In[ ]:; ​; ​; # note the capital ""D"". obtain by `conda install py3dmol -c conda-forge`; import py3Dmol; print(py3Dmol.__version__); ​; ​; # In[ ]:; ​; ​; # run an optfreq calc and write the vibrational analysis to disk in a "".vibrec"" file; ​; # molecule h2odim {; # O -1.551007 -0.114520 0.000000; # H -1.934259 0.762503 0.000000; # H -0.599677 0.040712 0.000000; # --; # 0 1; # O 1.350625 0.111469 0.000000; # H 1.680398 -0.373741 -0.758561; # H 1.680398 -0.373741 0.758561; # units angstrom; # }; ​; # set basis sto-3g; # set e_convergence 9; # set g_convergence gau_verytight; ​; # optimize('mp2', molecule=h2odim); ​; ​; # e, wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = n",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131
https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:1658,Performance,load,load,1658,"nalysis to disk in a "".vibrec"" file; ​; # molecule h2odim {; # O -1.551007 -0.114520 0.000000; # H -1.934259 0.762503 0.000000; # H -0.599677 0.040712 0.000000; # --; # 0 1; # O 1.350625 0.111469 0.000000; # H 1.680398 -0.373741 -0.758561; # H 1.680398 -0.373741 0.758561; # units angstrom; # }; ​; # set basis sto-3g; # set e_convergence 9; # set g_convergence gau_verytight; ​; # optimize('mp2', molecule=h2odim); ​; ​; # e, wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = nat * 3; vibs[""molecule""][""geom""]; ​; ​; # In[ ]:; ​; ​; # load Cartesian normal modes matrix into numpy and reshape it; import numpy as np; import qcelemental as qcel; from qcelemental import Datum; datum_x = json.loads(vibs[""x""])[""data""]; len(datum_x); datum_x = np.array(datum_x).reshape((ndof, ndof)).T.round(2); datum_x; ​; ​; # In[ ]:; ​; ​; # form ugly XYZ file strings for each mode where; # * first col is atomic symbol,; # * cols 2-4 are geometry in Ang,; # * and 5-7 are displacement; # * note that XYZ file strings are in list `xyzs` that is 1-indexed; geom = np.array(vibs[""molec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131
https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:1734,Performance,load,loads,1734,"odim {; # O -1.551007 -0.114520 0.000000; # H -1.934259 0.762503 0.000000; # H -0.599677 0.040712 0.000000; # --; # 0 1; # O 1.350625 0.111469 0.000000; # H 1.680398 -0.373741 -0.758561; # H 1.680398 -0.373741 0.758561; # units angstrom; # }; ​; # set basis sto-3g; # set e_convergence 9; # set g_convergence gau_verytight; ​; # optimize('mp2', molecule=h2odim); ​; ​; # e, wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = nat * 3; vibs[""molecule""][""geom""]; ​; ​; # In[ ]:; ​; ​; # load Cartesian normal modes matrix into numpy and reshape it; import numpy as np; import qcelemental as qcel; from qcelemental import Datum; datum_x = json.loads(vibs[""x""])[""data""]; len(datum_x); datum_x = np.array(datum_x).reshape((ndof, ndof)).T.round(2); datum_x; ​; ​; # In[ ]:; ​; ​; # form ugly XYZ file strings for each mode where; # * first col is atomic symbol,; # * cols 2-4 are geometry in Ang,; # * and 5-7 are displacement; # * note that XYZ file strings are in list `xyzs` that is 1-indexed; geom = np.array(vibs[""molecule""][""geom""]).reshape((-1, 3)); print(geom); geom_ang",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131
https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:1923,Performance,load,load,1923,", wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = nat * 3; vibs[""molecule""][""geom""]; ​; ​; # In[ ]:; ​; ​; # load Cartesian normal modes matrix into numpy and reshape it; import numpy as np; import qcelemental as qcel; from qcelemental import Datum; datum_x = json.loads(vibs[""x""])[""data""]; len(datum_x); datum_x = np.array(datum_x).reshape((ndof, ndof)).T.round(2); datum_x; ​; ​; # In[ ]:; ​; ​; # form ugly XYZ file strings for each mode where; # * first col is atomic symbol,; # * cols 2-4 are geometry in Ang,; # * and 5-7 are displacement; # * note that XYZ file strings are in list `xyzs` that is 1-indexed; geom = np.array(vibs[""molecule""][""geom""]).reshape((-1, 3)); print(geom); geom_ang = geom * 0.529; ​; xyzs = [None]; for mod in range(ndof):; nmode = datum_x[mod].reshape((-1, 3)); print(nmode); smode = [str(nat), f""vib mode {mod+1}""]; for iat, (atg, atd) in enumerate(zip(geom_ang, nmode)):; atln = [*atg, *atd]; atln = "" "".join([str(at) if abs(at)>1.e-8 else ""0.0"" for at in atln]); atln = vibs[""molecule""][""elem""][iat] + "" "" + atln; smode.append(atln",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131
https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:2163,Performance,load,load,2163,", wfn = freq('mp2', molecule=h2odim, return_wfn=True); ​; # set hessian_write on; # vibanal_wfn(wfn, molecule=h2odim); ​; # # A. print all the vib-related info from original `e, wfn = freq()` call; # for k, v in wfn.frequency_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = nat * 3; vibs[""molecule""][""geom""]; ​; ​; # In[ ]:; ​; ​; # load Cartesian normal modes matrix into numpy and reshape it; import numpy as np; import qcelemental as qcel; from qcelemental import Datum; datum_x = json.loads(vibs[""x""])[""data""]; len(datum_x); datum_x = np.array(datum_x).reshape((ndof, ndof)).T.round(2); datum_x; ​; ​; # In[ ]:; ​; ​; # form ugly XYZ file strings for each mode where; # * first col is atomic symbol,; # * cols 2-4 are geometry in Ang,; # * and 5-7 are displacement; # * note that XYZ file strings are in list `xyzs` that is 1-indexed; geom = np.array(vibs[""molecule""][""geom""]).reshape((-1, 3)); print(geom); geom_ang = geom * 0.529; ​; xyzs = [None]; for mod in range(ndof):; nmode = datum_x[mod].reshape((-1, 3)); print(nmode); smode = [str(nat), f""vib mode {mod+1}""]; for iat, (atg, atd) in enumerate(zip(geom_ang, nmode)):; atln = [*atg, *atd]; atln = "" "".join([str(at) if abs(at)>1.e-8 else ""0.0"" for at in atln]); atln = vibs[""molecule""][""elem""][iat] + "" "" + atln; smode.append(atln",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131
https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131:2319,Performance,load,loads,2319,"y_analysis.items():; # print(v); ​; # # B. `set hessian_write on` above wrote all the vib- & thermo-related info from last analysis.; # # now, print all the vib- & thermo-related info from that file; # with open(core.get_writer_file_prefix(h2odim.name()) + "".vibrec"") as handle:; # import json; # jsondata = json.load(handle); # jsondata = {k: (v if k in ['molecule', 'hessian'] else json.loads(v)) for k, v in jsondata.items()}; ​; # for k, v in jsondata.items():; # print(k, v); ​; ​; # In[ ]:; ​; ​; import json; with open(""freq_demo.h2odim.6436.vibrec"") as fp:; vibs = json.load(fp); ​; ​; # In[ ]:; ​; ​; # See all the vibrational analysis contents; vibs; ​; ​; # In[ ]:; ​; ​; vibs; vibs[""molecule""][""elez""]; nat = len(vibs[""molecule""][""elez""]); ndof = nat * 3; vibs[""molecule""][""geom""]; ​; ​; # In[ ]:; ​; ​; # load Cartesian normal modes matrix into numpy and reshape it; import numpy as np; import qcelemental as qcel; from qcelemental import Datum; datum_x = json.loads(vibs[""x""])[""data""]; len(datum_x); datum_x = np.array(datum_x).reshape((ndof, ndof)).T.round(2); datum_x; ​; ​; # In[ ]:; ​; ​; # form ugly XYZ file strings for each mode where; # * first col is atomic symbol,; # * cols 2-4 are geometry in Ang,; # * and 5-7 are displacement; # * note that XYZ file strings are in list `xyzs` that is 1-indexed; geom = np.array(vibs[""molecule""][""geom""]).reshape((-1, 3)); print(geom); geom_ang = geom * 0.529; ​; xyzs = [None]; for mod in range(ndof):; nmode = datum_x[mod].reshape((-1, 3)); print(nmode); smode = [str(nat), f""vib mode {mod+1}""]; for iat, (atg, atd) in enumerate(zip(geom_ang, nmode)):; atln = [*atg, *atd]; atln = "" "".join([str(at) if abs(at)>1.e-8 else ""0.0"" for at in atln]); atln = vibs[""molecule""][""elem""][iat] + "" "" + atln; smode.append(atln); smode = (""\n"".join(smode)).lstrip(); print(smode); xyzs.append(smode); ​; ​; # In[ ]:; ​; ​; # view mode number 9 (xyzs[9]); xyzview = py3Dmol.view(width=400,height=400); xyzview.addModel(xyzs[9],'xyz',{'vibrate': {'frames",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2920#issuecomment-1509020131
https://github.com/psi4/psi4/pull/2921#issuecomment-1534991954:119,Deployability,release,release,119,"I haven't heard anything over at https://github.com/psi4/psi4/issues/2940, so I think a ""hard pin"" is in order for the release. That is, not just prevent CI from using the new 0.4 but update the external/ddx/CMakeLists.txt to avert users grabbing it. I'll fix this PR up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2921#issuecomment-1534991954
https://github.com/psi4/psi4/pull/2921#issuecomment-1534991954:184,Deployability,update,update,184,"I haven't heard anything over at https://github.com/psi4/psi4/issues/2940, so I think a ""hard pin"" is in order for the release. That is, not just prevent CI from using the new 0.4 but update the external/ddx/CMakeLists.txt to avert users grabbing it. I'll fix this PR up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2921#issuecomment-1534991954
https://github.com/psi4/psi4/pull/2921#issuecomment-1535504340:138,Testability,test,test,138,"I've filed https://github.com/ddsolvation/ddX/issues/142 over at the parent project. Further investigation makes me uncertain whether our test reference may just have a built-in bug, in which case I hate to pin to a worse version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2921#issuecomment-1535504340
https://github.com/psi4/psi4/pull/2924#issuecomment-1520037369:34,Deployability,update,update,34,"> the read_options blurb needs an update https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L1418-L1424 . If you want to save for a later PR, ok with me.; > ; > otherwise, lgtm. Ah, nice catch. Updating that now. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2924#issuecomment-1520037369
https://github.com/psi4/psi4/pull/2926#issuecomment-1520592511:729,Deployability,release,release,729,"The some-subtype-values-not-applicable-to-some-scftype-values doesn't bother me too much -- after all, direct, cd, etc. can't take any subtype value besides auto. So long as the read_options docstring is clear and the code rejects non-meaningful subtype choices, I don't think users are led astray. All the same, I'm not hearty on my suggestion because it seems a little indistinct between algorithm choice (usually scftype) and memory transition choice (usually subtype). Maybe, if designed from scratch, there'd be `YOSHIMINE_PK`, `REORDERED_PK`, and `PK` as `scftype`s and then PK `subtype`s `OUT_OF_CORE` and `INCORE` would fit the DF pattern nicely. That might well be considered too much reengineering at this point in the release cycle. So minimum change, unless others chime in, is leave as-is and add the `PK_NO_INCORE` to the deprecation messages here https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L553",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1520592511
https://github.com/psi4/psi4/pull/2926#issuecomment-1520592511:848,Integrability,message,messages,848,"The some-subtype-values-not-applicable-to-some-scftype-values doesn't bother me too much -- after all, direct, cd, etc. can't take any subtype value besides auto. So long as the read_options docstring is clear and the code rejects non-meaningful subtype choices, I don't think users are led astray. All the same, I'm not hearty on my suggestion because it seems a little indistinct between algorithm choice (usually scftype) and memory transition choice (usually subtype). Maybe, if designed from scratch, there'd be `YOSHIMINE_PK`, `REORDERED_PK`, and `PK` as `scftype`s and then PK `subtype`s `OUT_OF_CORE` and `INCORE` would fit the DF pattern nicely. That might well be considered too much reengineering at this point in the release cycle. So minimum change, unless others chime in, is leave as-is and add the `PK_NO_INCORE` to the deprecation messages here https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L553",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1520592511
https://github.com/psi4/psi4/pull/2926#issuecomment-1520592511:204,Usability,clear,clear,204,"The some-subtype-values-not-applicable-to-some-scftype-values doesn't bother me too much -- after all, direct, cd, etc. can't take any subtype value besides auto. So long as the read_options docstring is clear and the code rejects non-meaningful subtype choices, I don't think users are led astray. All the same, I'm not hearty on my suggestion because it seems a little indistinct between algorithm choice (usually scftype) and memory transition choice (usually subtype). Maybe, if designed from scratch, there'd be `YOSHIMINE_PK`, `REORDERED_PK`, and `PK` as `scftype`s and then PK `subtype`s `OUT_OF_CORE` and `INCORE` would fit the DF pattern nicely. That might well be considered too much reengineering at this point in the release cycle. So minimum change, unless others chime in, is leave as-is and add the `PK_NO_INCORE` to the deprecation messages here https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L553",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1520592511
https://github.com/psi4/psi4/pull/2926#issuecomment-1520631012:942,Deployability,release,release,942,"> The some-subtype-values-not-applicable-to-some-scftype-values doesn't bother me too much -- after all, direct, cd, etc. can't take any subtype value besides auto. So long as the read_options docstring is clear and the code rejects non-meaningful subtype choices, I don't think users are led astray. That's all fair, to be honest, although I agree moreso with your second paragraph below, and what you said about indistinctness between algorithm choice and memory transition choice is applicable for sure.; ; > All the same, I'm not hearty on my suggestion because it seems a little indistinct between algorithm choice (usually scftype) and memory transition choice (usually subtype). Maybe, if designed from scratch, there'd be `YOSHIMINE_PK`, `REORDERED_PK`, and `PK` as `scftype`s and then PK `subtype`s `OUT_OF_CORE` and `INCORE` would fit the DF pattern nicely. That might well be considered too much reengineering at this point in the release cycle. This is true, and a point I hadn't considered, either. I wouldn't mind taking such a project on, but I would probably save it for after v1.8. > So minimum change, unless others chime in, is leave as-is and add the `PK_NO_INCORE` to the deprecation messages here https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L553. Will do!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1520631012
https://github.com/psi4/psi4/pull/2926#issuecomment-1520631012:1205,Integrability,message,messages,1205,"> The some-subtype-values-not-applicable-to-some-scftype-values doesn't bother me too much -- after all, direct, cd, etc. can't take any subtype value besides auto. So long as the read_options docstring is clear and the code rejects non-meaningful subtype choices, I don't think users are led astray. That's all fair, to be honest, although I agree moreso with your second paragraph below, and what you said about indistinctness between algorithm choice and memory transition choice is applicable for sure.; ; > All the same, I'm not hearty on my suggestion because it seems a little indistinct between algorithm choice (usually scftype) and memory transition choice (usually subtype). Maybe, if designed from scratch, there'd be `YOSHIMINE_PK`, `REORDERED_PK`, and `PK` as `scftype`s and then PK `subtype`s `OUT_OF_CORE` and `INCORE` would fit the DF pattern nicely. That might well be considered too much reengineering at this point in the release cycle. This is true, and a point I hadn't considered, either. I wouldn't mind taking such a project on, but I would probably save it for after v1.8. > So minimum change, unless others chime in, is leave as-is and add the `PK_NO_INCORE` to the deprecation messages here https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L553. Will do!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1520631012
https://github.com/psi4/psi4/pull/2926#issuecomment-1520631012:206,Usability,clear,clear,206,"> The some-subtype-values-not-applicable-to-some-scftype-values doesn't bother me too much -- after all, direct, cd, etc. can't take any subtype value besides auto. So long as the read_options docstring is clear and the code rejects non-meaningful subtype choices, I don't think users are led astray. That's all fair, to be honest, although I agree moreso with your second paragraph below, and what you said about indistinctness between algorithm choice and memory transition choice is applicable for sure.; ; > All the same, I'm not hearty on my suggestion because it seems a little indistinct between algorithm choice (usually scftype) and memory transition choice (usually subtype). Maybe, if designed from scratch, there'd be `YOSHIMINE_PK`, `REORDERED_PK`, and `PK` as `scftype`s and then PK `subtype`s `OUT_OF_CORE` and `INCORE` would fit the DF pattern nicely. That might well be considered too much reengineering at this point in the release cycle. This is true, and a point I hadn't considered, either. I wouldn't mind taking such a project on, but I would probably save it for after v1.8. > So minimum change, unless others chime in, is leave as-is and add the `PK_NO_INCORE` to the deprecation messages here https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L553. Will do!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1520631012
https://github.com/psi4/psi4/pull/2926#issuecomment-1521761303:12,Integrability,message,message,12,"Deprecation message added! I'm less familiar with deprecating things in Psi4, so let me know if anything else should be done on that front.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1521761303
https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327:984,Performance,perform,performant,984,"Hi all! I was working on folding the `PK_ALGO` keywords into `SCF_SUBTYPE`, and I ran into an issue that may be worth discussing. . By default, using `OOC_YOSHIMINE` and `OOC_REORDER` as `SCF_SUBTYPE`s the way we were discussing causes the calculation to throw an exception. The issue is because, in the SAD guess, DFJK is used by default; and `SCF_SUBTYPE` applies to the SAD guess DFJK (at least MemDFJK currently, and soon DiskDFJK) as well. Since `OOC_YOSHIMINE` and `OOC_REORDER` would be used as the keyword for the SAD DFJK, and since DFJK doesn't support those keywords explicitly for `SCF_SUBTYPE`, the calculation throws an exception. Note that setting `SAD_SCF_TYPE=DIRECT` eliminates this issue entirely. There are probably a few ways to resolve this, if we choose to explicitly continue on this path:. 1. As mentioned above, simply force `SAD_SCF_TYPE` to another option (like `DIRECT`) for PK calculations. I'll admit I'm not a big fan of this approach since DF is more performant, although it may not matter in the grand scheme of things since it's just the SAD guess. ; 2. Force `OOC_YOSHIMINE` and `OOC_REORDER` to work with the DFJK algorithms. The logical way to do this would be to have those keywords act the exact same as `SCF_SUBTYPE=OUT_OF_CORE` for DFJK. I'm a bit iffy on this one, as well, since it may imply that the three out-of-core keywords have different impacts on DFJK when they really don't. Documentation can clear that up, but still. What does everyone think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327
https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327:1167,Testability,log,logical,1167,"Hi all! I was working on folding the `PK_ALGO` keywords into `SCF_SUBTYPE`, and I ran into an issue that may be worth discussing. . By default, using `OOC_YOSHIMINE` and `OOC_REORDER` as `SCF_SUBTYPE`s the way we were discussing causes the calculation to throw an exception. The issue is because, in the SAD guess, DFJK is used by default; and `SCF_SUBTYPE` applies to the SAD guess DFJK (at least MemDFJK currently, and soon DiskDFJK) as well. Since `OOC_YOSHIMINE` and `OOC_REORDER` would be used as the keyword for the SAD DFJK, and since DFJK doesn't support those keywords explicitly for `SCF_SUBTYPE`, the calculation throws an exception. Note that setting `SAD_SCF_TYPE=DIRECT` eliminates this issue entirely. There are probably a few ways to resolve this, if we choose to explicitly continue on this path:. 1. As mentioned above, simply force `SAD_SCF_TYPE` to another option (like `DIRECT`) for PK calculations. I'll admit I'm not a big fan of this approach since DF is more performant, although it may not matter in the grand scheme of things since it's just the SAD guess. ; 2. Force `OOC_YOSHIMINE` and `OOC_REORDER` to work with the DFJK algorithms. The logical way to do this would be to have those keywords act the exact same as `SCF_SUBTYPE=OUT_OF_CORE` for DFJK. I'm a bit iffy on this one, as well, since it may imply that the three out-of-core keywords have different impacts on DFJK when they really don't. Documentation can clear that up, but still. What does everyone think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327
https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327:838,Usability,simpl,simply,838,"Hi all! I was working on folding the `PK_ALGO` keywords into `SCF_SUBTYPE`, and I ran into an issue that may be worth discussing. . By default, using `OOC_YOSHIMINE` and `OOC_REORDER` as `SCF_SUBTYPE`s the way we were discussing causes the calculation to throw an exception. The issue is because, in the SAD guess, DFJK is used by default; and `SCF_SUBTYPE` applies to the SAD guess DFJK (at least MemDFJK currently, and soon DiskDFJK) as well. Since `OOC_YOSHIMINE` and `OOC_REORDER` would be used as the keyword for the SAD DFJK, and since DFJK doesn't support those keywords explicitly for `SCF_SUBTYPE`, the calculation throws an exception. Note that setting `SAD_SCF_TYPE=DIRECT` eliminates this issue entirely. There are probably a few ways to resolve this, if we choose to explicitly continue on this path:. 1. As mentioned above, simply force `SAD_SCF_TYPE` to another option (like `DIRECT`) for PK calculations. I'll admit I'm not a big fan of this approach since DF is more performant, although it may not matter in the grand scheme of things since it's just the SAD guess. ; 2. Force `OOC_YOSHIMINE` and `OOC_REORDER` to work with the DFJK algorithms. The logical way to do this would be to have those keywords act the exact same as `SCF_SUBTYPE=OUT_OF_CORE` for DFJK. I'm a bit iffy on this one, as well, since it may imply that the three out-of-core keywords have different impacts on DFJK when they really don't. Documentation can clear that up, but still. What does everyone think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327
https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327:1445,Usability,clear,clear,1445,"Hi all! I was working on folding the `PK_ALGO` keywords into `SCF_SUBTYPE`, and I ran into an issue that may be worth discussing. . By default, using `OOC_YOSHIMINE` and `OOC_REORDER` as `SCF_SUBTYPE`s the way we were discussing causes the calculation to throw an exception. The issue is because, in the SAD guess, DFJK is used by default; and `SCF_SUBTYPE` applies to the SAD guess DFJK (at least MemDFJK currently, and soon DiskDFJK) as well. Since `OOC_YOSHIMINE` and `OOC_REORDER` would be used as the keyword for the SAD DFJK, and since DFJK doesn't support those keywords explicitly for `SCF_SUBTYPE`, the calculation throws an exception. Note that setting `SAD_SCF_TYPE=DIRECT` eliminates this issue entirely. There are probably a few ways to resolve this, if we choose to explicitly continue on this path:. 1. As mentioned above, simply force `SAD_SCF_TYPE` to another option (like `DIRECT`) for PK calculations. I'll admit I'm not a big fan of this approach since DF is more performant, although it may not matter in the grand scheme of things since it's just the SAD guess. ; 2. Force `OOC_YOSHIMINE` and `OOC_REORDER` to work with the DFJK algorithms. The logical way to do this would be to have those keywords act the exact same as `SCF_SUBTYPE=OUT_OF_CORE` for DFJK. I'm a bit iffy on this one, as well, since it may imply that the three out-of-core keywords have different impacts on DFJK when they really don't. Documentation can clear that up, but still. What does everyone think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327
https://github.com/psi4/psi4/pull/2926#issuecomment-1524010298:263,Usability,simpl,simple,263,"> All right, I disabled SCF_SUBTYPE for SAD guess runs! I went with a pretty basic solution - just adjust the Python driver and force-set SCF_SUBTYPE=AUTO for the guess part of the run. Let me know if this is an acceptable solution. Ah, turning it off py-side is simple and great, but there's a better way. The minor trouble with your approach is that it's restoring the value but not the status of whether the user has set it. That latter piece of info is often used to decide whether an option is default or not or whether, once control has returned to the user, to write the option explicitly in subsequent calcs. The usual remedy that you'll see scattered in proc.py are optstash=OptionsState([list o options]) ... do work ... optstash.restore(). So I'd suggest using that or the content manager like https://github.com/psi4/psi4/pull/2926/files#diff-2aec42d854b50db94cde6a3f9d3c665eed11e8f1f083040807d9e4dd4696895aL67-L68 `[""SCF"", ""SCF_SUBTYPE""]` for ""local"" setting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1524010298
https://github.com/psi4/psi4/pull/2926#issuecomment-1524072691:272,Usability,simpl,simple,272,"> > All right, I disabled SCF_SUBTYPE for SAD guess runs! I went with a pretty basic solution - just adjust the Python driver and force-set SCF_SUBTYPE=AUTO for the guess part of the run. Let me know if this is an acceptable solution.; > ; > Ah, turning it off py-side is simple and great, but there's a better way. The minor trouble with your approach is that it's restoring the value but not the status of whether the user has set it. That latter piece of info is often used to decide whether an option is default or not or whether, once control has returned to the user, to write the option explicitly in subsequent calcs. The usual remedy that you'll see scattered in proc.py are optstash=OptionsState([list o options]) ... do work ... optstash.restore(). So I'd suggest using that or the content manager like https://github.com/psi4/psi4/pull/2926/files#diff-2aec42d854b50db94cde6a3f9d3c665eed11e8f1f083040807d9e4dd4696895aL67-L68 `[""SCF"", ""SCF_SUBTYPE""]` for ""local"" setting. Done and done! This is all great knowledge; thank you!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1524072691
https://github.com/psi4/psi4/pull/2926#issuecomment-1527469285:111,Performance,queue,queue,111,"So now that this PR and https://github.com/psi4/psi4/pull/2924 have both been approved for adding to the merge queue, my guess is that there will be a merge conflict between the two, at the `SCF_SUBTYPE` docstring in scf_subtype.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1527469285
https://github.com/psi4/psi4/pull/2926#issuecomment-1527697847:113,Performance,queue,queue,113,"> So now that this PR and https://github.com/psi4/psi4/pull/2924 have both been approved for adding to the merge queue, my guess is that there will be a merge conflict between the two, at the SCF_SUBTYPE docstring in scf_subtype.cc. Sounds worth adding these two to the queue and seeing how it handles the second. Agree that probably you'll have to rebase or reconcile somehow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1527697847
https://github.com/psi4/psi4/pull/2926#issuecomment-1527697847:270,Performance,queue,queue,270,"> So now that this PR and https://github.com/psi4/psi4/pull/2924 have both been approved for adding to the merge queue, my guess is that there will be a merge conflict between the two, at the SCF_SUBTYPE docstring in scf_subtype.cc. Sounds worth adding these two to the queue and seeing how it handles the second. Agree that probably you'll have to rebase or reconcile somehow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1527697847
https://github.com/psi4/psi4/pull/2926#issuecomment-1527710839:82,Performance,queue,queue,82,"> > So now that this PR and #2924 have both been approved for adding to the merge queue, my guess is that there will be a merge conflict between the two, at the SCF_SUBTYPE docstring in scf_subtype.cc.; > ; > Sounds worth adding these two to the queue and seeing how it handles the second. Agree that probably you'll have to rebase or reconcile somehow. Yeah, I don't think we've had an actual merge conflict from the merge queue yet (at least not that I have seen), so it can be an experiment to see what happens in that case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1527710839
https://github.com/psi4/psi4/pull/2926#issuecomment-1527710839:246,Performance,queue,queue,246,"> > So now that this PR and #2924 have both been approved for adding to the merge queue, my guess is that there will be a merge conflict between the two, at the SCF_SUBTYPE docstring in scf_subtype.cc.; > ; > Sounds worth adding these two to the queue and seeing how it handles the second. Agree that probably you'll have to rebase or reconcile somehow. Yeah, I don't think we've had an actual merge conflict from the merge queue yet (at least not that I have seen), so it can be an experiment to see what happens in that case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1527710839
https://github.com/psi4/psi4/pull/2926#issuecomment-1527710839:424,Performance,queue,queue,424,"> > So now that this PR and #2924 have both been approved for adding to the merge queue, my guess is that there will be a merge conflict between the two, at the SCF_SUBTYPE docstring in scf_subtype.cc.; > ; > Sounds worth adding these two to the queue and seeing how it handles the second. Agree that probably you'll have to rebase or reconcile somehow. Yeah, I don't think we've had an actual merge conflict from the merge queue yet (at least not that I have seen), so it can be an experiment to see what happens in that case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1527710839
https://github.com/psi4/psi4/pull/2926#issuecomment-1527965147:114,Performance,queue,queue,114,"I suppose if anyone wants to check the merged `SCF_SUBTYPE` docstring, they can; else, I'll add this to the merge queue by the time I finish up today.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1527965147
https://github.com/psi4/psi4/pull/2928#issuecomment-1529032891:29,Testability,test,tests,29,"For some unknown reason ADCC tests run by the CI have started failing, but otherwise this is ready.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2928#issuecomment-1529032891
https://github.com/psi4/psi4/issues/2930#issuecomment-1520131433:11,Deployability,update,updated,11,I have now updated in the information above under software specs.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2930#issuecomment-1520131433
https://github.com/psi4/psi4/issues/2930#issuecomment-1520147773:108,Deployability,install,install,108,"Psi4 1.5 is quite old at this point.; Ordinarily, I would ask you to try 1.7, but I have no idea why `conda install -c psi4 psi4` is giving you 1.5 instead of the latest release. Maybe you could try `conda install psi4 python=3.9 -c psi4` ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2930#issuecomment-1520147773
https://github.com/psi4/psi4/issues/2930#issuecomment-1520147773:170,Deployability,release,release,170,"Psi4 1.5 is quite old at this point.; Ordinarily, I would ask you to try 1.7, but I have no idea why `conda install -c psi4 psi4` is giving you 1.5 instead of the latest release. Maybe you could try `conda install psi4 python=3.9 -c psi4` ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2930#issuecomment-1520147773
https://github.com/psi4/psi4/issues/2930#issuecomment-1520147773:206,Deployability,install,install,206,"Psi4 1.5 is quite old at this point.; Ordinarily, I would ask you to try 1.7, but I have no idea why `conda install -c psi4 psi4` is giving you 1.5 instead of the latest release. Maybe you could try `conda install psi4 python=3.9 -c psi4` ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2930#issuecomment-1520147773
https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923:69,Deployability,update,updates,69,I don't see any issues cropping up. I should make some documentation updates though to inform users how `optking` inherits logging from `psi4`. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923
https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923:114,Modifiability,inherit,inherits,114,I don't see any issues cropping up. I should make some documentation updates though to inform users how `optking` inherits logging from `psi4`. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923
https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923:222,Modifiability,inherit,inherit,222,I don't see any issues cropping up. I should make some documentation updates though to inform users how `optking` inherits logging from `psi4`. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923
https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923:123,Testability,log,logging,123,I don't see any issues cropping up. I should make some documentation updates though to inform users how `optking` inherits logging from `psi4`. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923
https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923:230,Testability,log,logging,230,I don't see any issues cropping up. I should make some documentation updates though to inform users how `optking` inherits logging from `psi4`. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923
https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935:71,Deployability,update,updates,71,"> I don't see any issues cropping up. I should make some documentation updates though to inform users how optking inherits logging from psi4. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4. Great, thanks for checking, @AlexHeide !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935
https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935:114,Modifiability,inherit,inherits,114,"> I don't see any issues cropping up. I should make some documentation updates though to inform users how optking inherits logging from psi4. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4. Great, thanks for checking, @AlexHeide !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935
https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935:220,Modifiability,inherit,inherit,220,"> I don't see any issues cropping up. I should make some documentation updates though to inform users how optking inherits logging from psi4. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4. Great, thanks for checking, @AlexHeide !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935
https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935:123,Testability,log,logging,123,"> I don't see any issues cropping up. I should make some documentation updates though to inform users how optking inherits logging from psi4. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4. Great, thanks for checking, @AlexHeide !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935
https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935:228,Testability,log,logging,228,"> I don't see any issues cropping up. I should make some documentation updates though to inform users how optking inherits logging from psi4. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4. Great, thanks for checking, @AlexHeide !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935
https://github.com/psi4/psi4/pull/2933#issuecomment-1527816347:127,Availability,down,downstream,127,"Ah, so it seems I made a mistake in my assumptions. The failed CI tells me this:. `/home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/threeindexintegrals.cc:33:10: fatal error: psi4/libmints/sieve.h: No such file or directory; #include <psi4/libmints/sieve.h>`; ; It seems that PKJK is, in fact, _not_ the only place that uses ERISieve. This v2rdm_casscf plugin does, as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527816347
https://github.com/psi4/psi4/pull/2933#issuecomment-1527816347:242,Availability,error,error,242,"Ah, so it seems I made a mistake in my assumptions. The failed CI tells me this:. `/home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/threeindexintegrals.cc:33:10: fatal error: psi4/libmints/sieve.h: No such file or directory; #include <psi4/libmints/sieve.h>`; ; It seems that PKJK is, in fact, _not_ the only place that uses ERISieve. This v2rdm_casscf plugin does, as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527816347
https://github.com/psi4/psi4/pull/2933#issuecomment-1527816347:427,Modifiability,plugin,plugin,427,"Ah, so it seems I made a mistake in my assumptions. The failed CI tells me this:. `/home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/threeindexintegrals.cc:33:10: fatal error: psi4/libmints/sieve.h: No such file or directory; #include <psi4/libmints/sieve.h>`; ; It seems that PKJK is, in fact, _not_ the only place that uses ERISieve. This v2rdm_casscf plugin does, as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527816347
https://github.com/psi4/psi4/pull/2933#issuecomment-1527847196:156,Availability,down,downstream,156,"v2rdm strikes again! :-). fwiw, the original author (DePrince) isn't dedicated to preserving the plugin, but it's handy for catching things that may affect downstream users. Right now we're pulling from https://github.com/loriab/v2rdm_casscf/tree/v2rdm8, so if you want to PR a switchout of ERISeive to there for post-1.8, that'd be fine. In any case, it might be worth getting in a deprecation warning now for v1.8 on ERISeive.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527847196
https://github.com/psi4/psi4/pull/2933#issuecomment-1527847196:97,Modifiability,plugin,plugin,97,"v2rdm strikes again! :-). fwiw, the original author (DePrince) isn't dedicated to preserving the plugin, but it's handy for catching things that may affect downstream users. Right now we're pulling from https://github.com/loriab/v2rdm_casscf/tree/v2rdm8, so if you want to PR a switchout of ERISeive to there for post-1.8, that'd be fine. In any case, it might be worth getting in a deprecation warning now for v1.8 on ERISeive.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527847196
https://github.com/psi4/psi4/pull/2933#issuecomment-1527891258:164,Availability,down,downstream,164,"> v2rdm strikes again! :-); > ; > fwiw, the original author (DePrince) isn't dedicated to preserving the plugin, but it's handy for catching things that may affect downstream users. Right now we're pulling from https://github.com/loriab/v2rdm_casscf/tree/v2rdm8, so if you want to PR a switchout of ERISeive to there for post-1.8, that'd be fine. In any case, it might be worth getting in a deprecation warning now for v1.8 on ERISeive. Thank you for the heads-up on this! I'll work on getting rid of ERISieve there, as well, and deprecate ERISieve here for 1.8. With this PR being connected to v2rdm_casscf, it'd probably be wise to make this PR post-1.8.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527891258
https://github.com/psi4/psi4/pull/2933#issuecomment-1527891258:105,Modifiability,plugin,plugin,105,"> v2rdm strikes again! :-); > ; > fwiw, the original author (DePrince) isn't dedicated to preserving the plugin, but it's handy for catching things that may affect downstream users. Right now we're pulling from https://github.com/loriab/v2rdm_casscf/tree/v2rdm8, so if you want to PR a switchout of ERISeive to there for post-1.8, that'd be fine. In any case, it might be worth getting in a deprecation warning now for v1.8 on ERISeive. Thank you for the heads-up on this! I'll work on getting rid of ERISieve there, as well, and deprecate ERISieve here for 1.8. With this PR being connected to v2rdm_casscf, it'd probably be wise to make this PR post-1.8.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527891258
https://github.com/psi4/psi4/pull/2933#issuecomment-1561805862:248,Performance,bottleneck,bottleneck,248,"I officially opened up a PR for v2rdm_casscf, at https://github.com/loriab/v2rdm_casscf/pull/5, which removes ERISieve from v2rdm_casscf and replaces it with TwoBodyAOInt. Once that is added in, we can progress with this PR, as that is the current bottleneck preventing this PR from passing CI testing. Ideally, there's no fun surprises after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1561805862
https://github.com/psi4/psi4/pull/2933#issuecomment-1561805862:294,Testability,test,testing,294,"I officially opened up a PR for v2rdm_casscf, at https://github.com/loriab/v2rdm_casscf/pull/5, which removes ERISieve from v2rdm_casscf and replaces it with TwoBodyAOInt. Once that is added in, we can progress with this PR, as that is the current bottleneck preventing this PR from passing CI testing. Ideally, there's no fun surprises after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1561805862
https://github.com/psi4/psi4/pull/2935#issuecomment-1527938536:90,Availability,down,downstream,90,"It looks like the entire `ERISieve` class is marked as `PSI_API`, so AFAIK that is giving downstream the permission to rely on both the object and all of its public members being a stable API, not just a few functions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527938536
https://github.com/psi4/psi4/pull/2935#issuecomment-1527947435:96,Availability,down,downstream,96,"> It looks like the entire `ERISieve` class is marked as `PSI_API`, so AFAIK that is giving ; > downstream the permission to rely on both the object and all of its public members ; > being a stable API, not just a few functions. I think that is right, as well. When I said ""user-facing"", I meant the `ERISieve` functions that are explicitly enabled Python-side via PyBind, as defined through the `export_mints.cc` file. Deprecation as a whole is less my realm of expertise, however, so I'm not 100% if what I'm doing is even the ideal route regardless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527947435
https://github.com/psi4/psi4/pull/2935#issuecomment-1527947435:535,Integrability,rout,route,535,"> It looks like the entire `ERISieve` class is marked as `PSI_API`, so AFAIK that is giving ; > downstream the permission to rely on both the object and all of its public members ; > being a stable API, not just a few functions. I think that is right, as well. When I said ""user-facing"", I meant the `ERISieve` functions that are explicitly enabled Python-side via PyBind, as defined through the `export_mints.cc` file. Deprecation as a whole is less my realm of expertise, however, so I'm not 100% if what I'm doing is even the ideal route regardless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527947435
https://github.com/psi4/psi4/pull/2935#issuecomment-1527976438:149,Integrability,message,message,149,"All right, blanket deprecated `ERISieve`!. ... but there's a catch. It seems the compiler complains when trying to use `PSI_API` and `PSI_DEPRECATE(""message"")` together on the same class. I essentially had to hand-insert the associated macros to get the code to compile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527976438
https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:1142,Deployability,Upgrade,UpgradeHelper,1142,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259
https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:614,Integrability,wrap,wrap,614,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259
https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:929,Integrability,message,message,929,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259
https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:63,Modifiability,plugin,plugins,63,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259
https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:306,Modifiability,plugin,plugin,306,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259
https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:336,Modifiability,plugin,plugin,336,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259
https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:223,Security,expose,exposed,223,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259
https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:880,Usability,clear,clear,880,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259
https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:1104,Usability,guid,guidance,1104,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259
https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795:1033,Integrability,wrap,wrap,1033,"> Ok, two different levels here:. First off, thank you very much for sharing some details on all of this!; ; > * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance. That make sense. I recently blanket-deprecated the `ERISieve` class with (the equivalent of) `PSI_DEPRECATED`. The issue I saw, was that using both `PSI_API` and `PSI_DEPRECATED` for the same class caused the compiler to complain, although using their textual equivalents seem to work fine. Hopefully, that settles the deprecation C-side. > * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Also very good to know! This will be my next focus, then, since I don't have any wrapper functions for the ERISieve Python-side functions right now. I think I will switch this to a draft PR in the meantime, since it seems some more needs to be done on my end.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795
https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795:1223,Integrability,wrap,wrapper,1223,"> Ok, two different levels here:. First off, thank you very much for sharing some details on all of this!; ; > * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance. That make sense. I recently blanket-deprecated the `ERISieve` class with (the equivalent of) `PSI_DEPRECATED`. The issue I saw, was that using both `PSI_API` and `PSI_DEPRECATED` for the same class caused the compiler to complain, although using their textual equivalents seem to work fine. Hopefully, that settles the deprecation C-side. > * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Also very good to know! This will be my next focus, then, since I don't have any wrapper functions for the ERISieve Python-side functions right now. I think I will switch this to a draft PR in the meantime, since it seems some more needs to be done on my end.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795
https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795:142,Modifiability,plugin,plugins,142,"> Ok, two different levels here:. First off, thank you very much for sharing some details on all of this!; ; > * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance. That make sense. I recently blanket-deprecated the `ERISieve` class with (the equivalent of) `PSI_DEPRECATED`. The issue I saw, was that using both `PSI_API` and `PSI_DEPRECATED` for the same class caused the compiler to complain, although using their textual equivalents seem to work fine. Hopefully, that settles the deprecation C-side. > * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Also very good to know! This will be my next focus, then, since I don't have any wrapper functions for the ERISieve Python-side functions right now. I think I will switch this to a draft PR in the meantime, since it seems some more needs to be done on my end.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795
https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795:385,Modifiability,plugin,plugin,385,"> Ok, two different levels here:. First off, thank you very much for sharing some details on all of this!; ; > * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance. That make sense. I recently blanket-deprecated the `ERISieve` class with (the equivalent of) `PSI_DEPRECATED`. The issue I saw, was that using both `PSI_API` and `PSI_DEPRECATED` for the same class caused the compiler to complain, although using their textual equivalents seem to work fine. Hopefully, that settles the deprecation C-side. > * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Also very good to know! This will be my next focus, then, since I don't have any wrapper functions for the ERISieve Python-side functions right now. I think I will switch this to a draft PR in the meantime, since it seems some more needs to be done on my end.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795
https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795:415,Modifiability,plugin,plugin,415,"> Ok, two different levels here:. First off, thank you very much for sharing some details on all of this!; ; > * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance. That make sense. I recently blanket-deprecated the `ERISieve` class with (the equivalent of) `PSI_DEPRECATED`. The issue I saw, was that using both `PSI_API` and `PSI_DEPRECATED` for the same class caused the compiler to complain, although using their textual equivalents seem to work fine. Hopefully, that settles the deprecation C-side. > * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Also very good to know! This will be my next focus, then, since I don't have any wrapper functions for the ERISieve Python-side functions right now. I think I will switch this to a draft PR in the meantime, since it seems some more needs to be done on my end.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795
https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795:302,Security,expose,exposed,302,"> Ok, two different levels here:. First off, thank you very much for sharing some details on all of this!; ; > * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance. That make sense. I recently blanket-deprecated the `ERISieve` class with (the equivalent of) `PSI_DEPRECATED`. The issue I saw, was that using both `PSI_API` and `PSI_DEPRECATED` for the same class caused the compiler to complain, although using their textual equivalents seem to work fine. Hopefully, that settles the deprecation C-side. > * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Also very good to know! This will be my next focus, then, since I don't have any wrapper functions for the ERISieve Python-side functions right now. I think I will switch this to a draft PR in the meantime, since it seems some more needs to be done on my end.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795
https://github.com/psi4/psi4/issues/2936#issuecomment-1528087425:104,Integrability,interface,interface,104,"you want the dftd3-python pkg from conda-forge. I think you've got the executable/lib, but the qcengine interface uses the python bindings which are in a different package.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2936#issuecomment-1528087425
https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755:174,Integrability,interface,interface,174,"We intend to avoid conda as it would make the application run slower. Do you; mean dftd3-python pkg from conda forge is the only option at the moment?; I was able to use the interface to grimme's dftd3 compiled through the source, ; however, to use the three-body becke johnson damping it is the simple dftd3 we need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755
https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755:13,Safety,avoid,avoid,13,"We intend to avoid conda as it would make the application run slower. Do you; mean dftd3-python pkg from conda forge is the only option at the moment?; I was able to use the interface to grimme's dftd3 compiled through the source, ; however, to use the three-body becke johnson damping it is the simple dftd3 we need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755
https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755:296,Usability,simpl,simple,296,"We intend to avoid conda as it would make the application run slower. Do you; mean dftd3-python pkg from conda forge is the only option at the moment?; I was able to use the interface to grimme's dftd3 compiled through the source, ; however, to use the three-body becke johnson damping it is the simple dftd3 we need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2936#issuecomment-1528687755
https://github.com/psi4/psi4/issues/2936#issuecomment-1528735776:186,Usability,simpl,simple-,186,"PSI4 uses the Python API of `s-dftd3` while for the old `dftd3` it uses the binary.; Just to be sure, did you turned on the python API when compiling `s-dftd3`? https://github.com/dftd3/simple-dftd3#python-api. And if so can you `import dftd3` in python after setting `psi4 --psiapi-path`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2936#issuecomment-1528735776
https://github.com/psi4/psi4/issues/2936#issuecomment-1531213641:201,Testability,test,test,201,I had to set `export PYTHONPATH=$PYTHONPATH:<path_to_s-dftd3_install_dir>/lib/python3.10/site-packages/`. For QCEngine to recognize `s-dftd3` as an engine the import needs to work. That's the internal test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2936#issuecomment-1531213641
https://github.com/psi4/psi4/pull/2937#issuecomment-1529060031:394,Availability,error,errors,394,"Formatting is great, but just in case part of your goal is to compare basissets at the `.gbs` file level, I wanted to let you know about https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/primitives/diff_gbs.py . Thhe basis set exchange has one, too, -- I think https://github.com/MolSSI-BSE/basis_set_exchange/blob/master/basis_set_exchange/curate/diff.py. I'll look into the adcc errors. I think Max updated the conda packages recently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2937#issuecomment-1529060031
https://github.com/psi4/psi4/pull/2937#issuecomment-1529060031:414,Deployability,update,updated,414,"Formatting is great, but just in case part of your goal is to compare basissets at the `.gbs` file level, I wanted to let you know about https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/primitives/diff_gbs.py . Thhe basis set exchange has one, too, -- I think https://github.com/MolSSI-BSE/basis_set_exchange/blob/master/basis_set_exchange/curate/diff.py. I'll look into the adcc errors. I think Max updated the conda packages recently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2937#issuecomment-1529060031
https://github.com/psi4/psi4/pull/2937#issuecomment-1810019071:137,Testability,test,testing,137,"> Conflicts are trivial, so please lmk if you want to handle the rebase or website UI resolve, or if I should, @TiborGY . Thanks for the testing, conflicts resolved via the web-UI.; PS. Github decided to do a ""merge-master-into-this"" to resolve the conflict, LMK if that is a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2937#issuecomment-1810019071
https://github.com/psi4/psi4/issues/2941#issuecomment-1529849644:195,Deployability,release,release,195,"The bug was introduced in #2839, which parallelized UKS gradients. I _assumed_ the feature was ready to go, somebody had just forgotten to enable it, but apparently not. I'll fix this before the release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2941#issuecomment-1529849644
https://github.com/psi4/psi4/issues/2941#issuecomment-1531183367:219,Testability,test,test,219,"> The bug was introduced in #2839, which parallelized UKS gradients. I _assumed_ the feature was ready to go, somebody had just forgotten to enable it, but apparently not. The question is why was this not caught by the test suite..?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2941#issuecomment-1531183367
https://github.com/psi4/psi4/issues/2941#issuecomment-1531525344:18,Testability,test,test,18,"I recall that the test suite runs in serial. We'd love a parallel version, but @loriab has had other priorities. Do correct me if I'm wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2941#issuecomment-1531525344
https://github.com/psi4/psi4/issues/2941#issuecomment-1531633439:151,Availability,avail,available,151,The parallel test suite is a matter of adding `-n2` in 2-3 places. I really should make it an option. CI (that won't tell us how many threads are even available) hasn't been the best place for running a parallel suite.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2941#issuecomment-1531633439
https://github.com/psi4/psi4/issues/2941#issuecomment-1531633439:13,Testability,test,test,13,The parallel test suite is a matter of adding `-n2` in 2-3 places. I really should make it an option. CI (that won't tell us how many threads are even available) hasn't been the best place for running a parallel suite.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2941#issuecomment-1531633439
https://github.com/psi4/psi4/pull/2943#issuecomment-1533160060:96,Energy Efficiency,energy,energy,96,"> I wonder if it's the syntax qc_module=""ccenergy"" is confusing since that's the name of the CC energy code, but it's signaling to compute gradients analytically. I'm not sure what I'd prefer, but I don't think this will be obvious to most users. I agree there's not a great name for the cc suite. Only alternative I've seen is `cc*`. `cc` alone seems too generic. It looks like the `qc_module=ccenergy` came about for this role between beta5 and v1.0: https://github.com/psi4/psi4archive/blob/1.0.x/src/bin/psi4/read_options.cc#L165-L168 . So it's longstanding, though probably little used. If you think of a preferred alias, it'd be easy enough to re-route, I suspect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2943#issuecomment-1533160060
https://github.com/psi4/psi4/pull/2943#issuecomment-1533160060:653,Integrability,rout,route,653,"> I wonder if it's the syntax qc_module=""ccenergy"" is confusing since that's the name of the CC energy code, but it's signaling to compute gradients analytically. I'm not sure what I'd prefer, but I don't think this will be obvious to most users. I agree there's not a great name for the cc suite. Only alternative I've seen is `cc*`. `cc` alone seems too generic. It looks like the `qc_module=ccenergy` came about for this role between beta5 and v1.0: https://github.com/psi4/psi4archive/blob/1.0.x/src/bin/psi4/read_options.cc#L165-L168 . So it's longstanding, though probably little used. If you think of a preferred alias, it'd be easy enough to re-route, I suspect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2943#issuecomment-1533160060
https://github.com/psi4/psi4/pull/2943#issuecomment-1533165946:98,Energy Efficiency,energy,energy,98,"> > I wonder if it's the syntax qc_module=""ccenergy"" is confusing since that's the name of the CC energy code, but it's signaling to compute gradients analytically. I'm not sure what I'd prefer, but I don't think this will be obvious to most users.; > ; > I agree there's not a great name for the cc suite. Only alternative I've seen is `cc*`. `cc` alone seems too generic.; > ; > It looks like the `qc_module=ccenergy` came about for this role between beta5 and v1.0: https://github.com/psi4/psi4archive/blob/1.0.x/src/bin/psi4/read_options.cc#L165-L168 . So it's longstanding, though probably little used. If you think of a preferred alias, it'd be easy enough to re-route, I suspect. OK, then let's go ahead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2943#issuecomment-1533165946
https://github.com/psi4/psi4/pull/2943#issuecomment-1533165946:669,Integrability,rout,route,669,"> > I wonder if it's the syntax qc_module=""ccenergy"" is confusing since that's the name of the CC energy code, but it's signaling to compute gradients analytically. I'm not sure what I'd prefer, but I don't think this will be obvious to most users.; > ; > I agree there's not a great name for the cc suite. Only alternative I've seen is `cc*`. `cc` alone seems too generic.; > ; > It looks like the `qc_module=ccenergy` came about for this role between beta5 and v1.0: https://github.com/psi4/psi4archive/blob/1.0.x/src/bin/psi4/read_options.cc#L165-L168 . So it's longstanding, though probably little used. If you think of a preferred alias, it'd be easy enough to re-route, I suspect. OK, then let's go ahead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2943#issuecomment-1533165946
https://github.com/psi4/psi4/pull/2944#issuecomment-1529757856:165,Testability,test,tests,165,"> I don't know where exactly... I'd have stored it in the adcc repo maybe, unless you have a suggestion where to put it. That's fine. Or if you want it here, maybe `tests/pytests/test_adcc/`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2944#issuecomment-1529757856
https://github.com/psi4/psi4/issues/2951#issuecomment-1536683682:1048,Availability,avail,available,1048,"Yeah sylabs would definitely work but only allows for storing .sif images. We could consider only offering `docker` containers and having `apptainer` users pull from `dockerhub`. See https://apptainer.org/docs/user/main/docker_and_oci.html#docker-hub. I know Jet loves using docker dev containers and I'm guessing others on the dev team do too. . As an explicit example from apptainers docs: ; pull tensorflow and run with the host's amd gpu libraries loaded into the container. MPI is essentially the same.; ```; $ apptainer pull docker://rocm/tensorflow:latest; $ apptainer run --rocm tensorflow_latest.sif; ```. As described in the link I referenced there are a few peculiarities that we would have to work through so that our docker containers will run properly with `apptainer`. Off the top of my head the two main things would be:. * making sure nothing is being installed in `/root` or `/home` by default (easy); * making sure that a writable filesystem is being mounted (The user would ultimately need to ensure that a scratch directory is available or that they're running from a directory/volume with disk space available). If we wanted, it might be nice to convert the docker containers explicitly to apptainer format and upload to sylabs? A new user at a super-computing institute probably wouldn't check dockerhub. For building apptainer containers, I normally start by pulling base images from dockerhub to work with. I haven't tried pulling and running docker containers directly though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536683682
https://github.com/psi4/psi4/issues/2951#issuecomment-1536683682:1122,Availability,avail,available,1122,"Yeah sylabs would definitely work but only allows for storing .sif images. We could consider only offering `docker` containers and having `apptainer` users pull from `dockerhub`. See https://apptainer.org/docs/user/main/docker_and_oci.html#docker-hub. I know Jet loves using docker dev containers and I'm guessing others on the dev team do too. . As an explicit example from apptainers docs: ; pull tensorflow and run with the host's amd gpu libraries loaded into the container. MPI is essentially the same.; ```; $ apptainer pull docker://rocm/tensorflow:latest; $ apptainer run --rocm tensorflow_latest.sif; ```. As described in the link I referenced there are a few peculiarities that we would have to work through so that our docker containers will run properly with `apptainer`. Off the top of my head the two main things would be:. * making sure nothing is being installed in `/root` or `/home` by default (easy); * making sure that a writable filesystem is being mounted (The user would ultimately need to ensure that a scratch directory is available or that they're running from a directory/volume with disk space available). If we wanted, it might be nice to convert the docker containers explicitly to apptainer format and upload to sylabs? A new user at a super-computing institute probably wouldn't check dockerhub. For building apptainer containers, I normally start by pulling base images from dockerhub to work with. I haven't tried pulling and running docker containers directly though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536683682
https://github.com/psi4/psi4/issues/2951#issuecomment-1536683682:869,Deployability,install,installed,869,"Yeah sylabs would definitely work but only allows for storing .sif images. We could consider only offering `docker` containers and having `apptainer` users pull from `dockerhub`. See https://apptainer.org/docs/user/main/docker_and_oci.html#docker-hub. I know Jet loves using docker dev containers and I'm guessing others on the dev team do too. . As an explicit example from apptainers docs: ; pull tensorflow and run with the host's amd gpu libraries loaded into the container. MPI is essentially the same.; ```; $ apptainer pull docker://rocm/tensorflow:latest; $ apptainer run --rocm tensorflow_latest.sif; ```. As described in the link I referenced there are a few peculiarities that we would have to work through so that our docker containers will run properly with `apptainer`. Off the top of my head the two main things would be:. * making sure nothing is being installed in `/root` or `/home` by default (easy); * making sure that a writable filesystem is being mounted (The user would ultimately need to ensure that a scratch directory is available or that they're running from a directory/volume with disk space available). If we wanted, it might be nice to convert the docker containers explicitly to apptainer format and upload to sylabs? A new user at a super-computing institute probably wouldn't check dockerhub. For building apptainer containers, I normally start by pulling base images from dockerhub to work with. I haven't tried pulling and running docker containers directly though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536683682
https://github.com/psi4/psi4/issues/2951#issuecomment-1536683682:452,Performance,load,loaded,452,"Yeah sylabs would definitely work but only allows for storing .sif images. We could consider only offering `docker` containers and having `apptainer` users pull from `dockerhub`. See https://apptainer.org/docs/user/main/docker_and_oci.html#docker-hub. I know Jet loves using docker dev containers and I'm guessing others on the dev team do too. . As an explicit example from apptainers docs: ; pull tensorflow and run with the host's amd gpu libraries loaded into the container. MPI is essentially the same.; ```; $ apptainer pull docker://rocm/tensorflow:latest; $ apptainer run --rocm tensorflow_latest.sif; ```. As described in the link I referenced there are a few peculiarities that we would have to work through so that our docker containers will run properly with `apptainer`. Off the top of my head the two main things would be:. * making sure nothing is being installed in `/root` or `/home` by default (easy); * making sure that a writable filesystem is being mounted (The user would ultimately need to ensure that a scratch directory is available or that they're running from a directory/volume with disk space available). If we wanted, it might be nice to convert the docker containers explicitly to apptainer format and upload to sylabs? A new user at a super-computing institute probably wouldn't check dockerhub. For building apptainer containers, I normally start by pulling base images from dockerhub to work with. I haven't tried pulling and running docker containers directly though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536683682
https://github.com/psi4/psi4/issues/2951#issuecomment-1536697098:138,Safety,avoid,avoid,138,"This also seems like a good time just to point out that if anyone has plans for portions of psi4 to use mpi parallelism, we would want to avoid having the psi4 executable explicitly call mpirun or similiar like `xcfour` does. The ideal mpi setup would be for the user to use the host's `mpirun / mpiexec` executable to run the container. Then, the host mpi and container mpi either need to use the same PMI library or the user would need to bind the host's mpi libraries into the container. GPU support only requires the `--rocm` and `--nv` flags that I referenced above.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536697098
https://github.com/psi4/psi4/issues/2951#issuecomment-1536705064:92,Deployability,install,install,92,"Ok, I've secured `psi4` login at sylabs. I'm for storing them where they can be found. The ""install apptainer"" GHA only had two stars, so I bet there isn't a ready-made ""upload to sylabs GHA"". I'm not sure if it's doing no root or writeable filesys or anything. Do you want repo access to play with it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536705064
https://github.com/psi4/psi4/issues/2951#issuecomment-1536705064:9,Security,secur,secured,9,"Ok, I've secured `psi4` login at sylabs. I'm for storing them where they can be found. The ""install apptainer"" GHA only had two stars, so I bet there isn't a ready-made ""upload to sylabs GHA"". I'm not sure if it's doing no root or writeable filesys or anything. Do you want repo access to play with it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536705064
https://github.com/psi4/psi4/issues/2951#issuecomment-1536705064:279,Security,access,access,279,"Ok, I've secured `psi4` login at sylabs. I'm for storing them where they can be found. The ""install apptainer"" GHA only had two stars, so I bet there isn't a ready-made ""upload to sylabs GHA"". I'm not sure if it's doing no root or writeable filesys or anything. Do you want repo access to play with it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536705064
https://github.com/psi4/psi4/issues/2951#issuecomment-1536705064:24,Testability,log,login,24,"Ok, I've secured `psi4` login at sylabs. I'm for storing them where they can be found. The ""install apptainer"" GHA only had two stars, so I bet there isn't a ready-made ""upload to sylabs GHA"". I'm not sure if it's doing no root or writeable filesys or anything. Do you want repo access to play with it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2951#issuecomment-1536705064
https://github.com/psi4/psi4/pull/2952#issuecomment-1537967934:62,Availability,error,error,62,"Since ddLPB has the electric field as RHS, it may be that the error in the numerical derivatives (numerical Fock) is higher than in ddPCM/ddCOSMO. To be sure, you could try to lower the step size, you should observe a decreasing error in the analytical-numerical Fock comparison (at least until it hits the finite numerical precision), if it is not like that, there may be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2952#issuecomment-1537967934
https://github.com/psi4/psi4/pull/2952#issuecomment-1537967934:229,Availability,error,error,229,"Since ddLPB has the electric field as RHS, it may be that the error in the numerical derivatives (numerical Fock) is higher than in ddPCM/ddCOSMO. To be sure, you could try to lower the step size, you should observe a decreasing error in the analytical-numerical Fock comparison (at least until it hits the finite numerical precision), if it is not like that, there may be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2952#issuecomment-1537967934
https://github.com/psi4/psi4/pull/2952#issuecomment-1538765695:12,Modifiability,variab,variable,12,"This is the variable to vary? https://github.com/ddsolvation/ddX/blob/main/tests/matrix_derivatives.f90#L129. I'm having problems getting an editable pyddx build working with psi, so I'm inclined to merge this as-is. This PR against c-f 0.4.1 is clean against psi4 current master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2952#issuecomment-1538765695
https://github.com/psi4/psi4/pull/2952#issuecomment-1538765695:75,Testability,test,tests,75,"This is the variable to vary? https://github.com/ddsolvation/ddX/blob/main/tests/matrix_derivatives.f90#L129. I'm having problems getting an editable pyddx build working with psi, so I'm inclined to merge this as-is. This PR against c-f 0.4.1 is clean against psi4 current master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2952#issuecomment-1538765695
https://github.com/psi4/psi4/pull/2952#issuecomment-1540335863:116,Testability,test,tests,116,Sorry for the late reply.; I meant this: https://github.com/psi4/psi4/blob/6173fba2dc820bba05918f3dfa599550704de4f5/tests/pytests/test_ddx.py#LL76C48-L76C51. In any case the pull request looked good for me.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2952#issuecomment-1540335863
https://github.com/psi4/psi4/pull/2953#issuecomment-1808185903:250,Safety,avoid,avoid,250,"I had to write some code recently using the Dimension object and I was thinking that it would be useful to support initialization from a list, for example:; ```; Dimension orbs({3,0,1,1}); ```; This is particularly useful when working with Slices to avoid doing this:; ```; auto start_dim = psi::Dimension(1);; start_dim[0] = start;; ```; I think it might already be supported on the python side. Another useful thing would be to have direct access to the underlying std::vector object, or const iterators for it. That way, one could use Dimensions in loops more naturally. I was wondering, since you are modifying the class, would you be able to implement these changes as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1808185903
https://github.com/psi4/psi4/pull/2953#issuecomment-1808185903:442,Security,access,access,442,"I had to write some code recently using the Dimension object and I was thinking that it would be useful to support initialization from a list, for example:; ```; Dimension orbs({3,0,1,1}); ```; This is particularly useful when working with Slices to avoid doing this:; ```; auto start_dim = psi::Dimension(1);; start_dim[0] = start;; ```; I think it might already be supported on the python side. Another useful thing would be to have direct access to the underlying std::vector object, or const iterators for it. That way, one could use Dimensions in loops more naturally. I was wondering, since you are modifying the class, would you be able to implement these changes as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1808185903
https://github.com/psi4/psi4/pull/2953#issuecomment-1808472560:331,Modifiability,refactor,refactoring,331,"> ; > I was wondering, since you are modifying the class, would you be able to implement these changes as well?. I could look into it, but I have other priorities for the next couple of months. I am also yet to receive any feedback/reviews on the changes pushed so far, so I would prefer to have the commits of this PR to be about refactoring only.; I think adding new features would be better done in a separate PR, after this is merged or rejected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1808472560
https://github.com/psi4/psi4/pull/2953#issuecomment-1808472560:223,Usability,feedback,feedback,223,"> ; > I was wondering, since you are modifying the class, would you be able to implement these changes as well?. I could look into it, but I have other priorities for the next couple of months. I am also yet to receive any feedback/reviews on the changes pushed so far, so I would prefer to have the commits of this PR to be about refactoring only.; I think adding new features would be better done in a separate PR, after this is merged or rejected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1808472560
https://github.com/psi4/psi4/pull/2953#issuecomment-1810074282:434,Deployability,release,released,434,"> Are there any Python bindings that hit the deprecated fns?. I don't think so? They are not used in `py::class_<Dimension>` in `export_mints.cc`, if there are other places to look for Python bindings let me know and I will check. > This would be a good time to get the deprecation warnings in, so the fns can be removed by 1.10. Perhaps, but I delayed it because. 1. I was not sure that this would get thorough reviews before 1.9 is released. This is something that could disrupt people's codes/plugins that rely on it. I do not know how widely they are used, thus I want to give people time to stumble into the deprecation warning and yell before it is too late.; 2. These functions are not exactly unused, even in Psi4 itself. It will not be a trivial task to rip them out, and I doubt that I will have enough free time to complete it before May 2024.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1810074282
https://github.com/psi4/psi4/pull/2953#issuecomment-1810074282:496,Modifiability,plugin,plugins,496,"> Are there any Python bindings that hit the deprecated fns?. I don't think so? They are not used in `py::class_<Dimension>` in `export_mints.cc`, if there are other places to look for Python bindings let me know and I will check. > This would be a good time to get the deprecation warnings in, so the fns can be removed by 1.10. Perhaps, but I delayed it because. 1. I was not sure that this would get thorough reviews before 1.9 is released. This is something that could disrupt people's codes/plugins that rely on it. I do not know how widely they are used, thus I want to give people time to stumble into the deprecation warning and yell before it is too late.; 2. These functions are not exactly unused, even in Psi4 itself. It will not be a trivial task to rip them out, and I doubt that I will have enough free time to complete it before May 2024.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1810074282
https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600:507,Deployability,release,released,507,">> Are there any Python bindings that hit the deprecated fns?. > I don't think so? They are not used in py::class_<Dimension> in export_mints.cc, if there are other places to look for Python bindings let me know and I will check. Looks like export_mints.cc only, so you've got that covered, thanks. >> This would be a good time to get the deprecation warnings in, so the fns can be removed by 1.10. > Perhaps, but I delayed it because; > 1. I was not sure that this would get thorough reviews before 1.9 is released. This is something that could disrupt people's codes/plugins that rely on it. I do not know how widely they are used, thus I want to give people time to stumble into the deprecation warning and yell before it is too late.; > 2. These functions are not exactly unused, even in Psi4 itself. It will not be a trivial task to rip them out, and I doubt that I will have enough free time to complete it before May 2024. Sounds fair. Two cycles may be good for the deprecation warning, as plugin devs like clear warnings.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600
https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600:569,Modifiability,plugin,plugins,569,">> Are there any Python bindings that hit the deprecated fns?. > I don't think so? They are not used in py::class_<Dimension> in export_mints.cc, if there are other places to look for Python bindings let me know and I will check. Looks like export_mints.cc only, so you've got that covered, thanks. >> This would be a good time to get the deprecation warnings in, so the fns can be removed by 1.10. > Perhaps, but I delayed it because; > 1. I was not sure that this would get thorough reviews before 1.9 is released. This is something that could disrupt people's codes/plugins that rely on it. I do not know how widely they are used, thus I want to give people time to stumble into the deprecation warning and yell before it is too late.; > 2. These functions are not exactly unused, even in Psi4 itself. It will not be a trivial task to rip them out, and I doubt that I will have enough free time to complete it before May 2024. Sounds fair. Two cycles may be good for the deprecation warning, as plugin devs like clear warnings.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600
https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600:998,Modifiability,plugin,plugin,998,">> Are there any Python bindings that hit the deprecated fns?. > I don't think so? They are not used in py::class_<Dimension> in export_mints.cc, if there are other places to look for Python bindings let me know and I will check. Looks like export_mints.cc only, so you've got that covered, thanks. >> This would be a good time to get the deprecation warnings in, so the fns can be removed by 1.10. > Perhaps, but I delayed it because; > 1. I was not sure that this would get thorough reviews before 1.9 is released. This is something that could disrupt people's codes/plugins that rely on it. I do not know how widely they are used, thus I want to give people time to stumble into the deprecation warning and yell before it is too late.; > 2. These functions are not exactly unused, even in Psi4 itself. It will not be a trivial task to rip them out, and I doubt that I will have enough free time to complete it before May 2024. Sounds fair. Two cycles may be good for the deprecation warning, as plugin devs like clear warnings.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600
https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600:1015,Usability,clear,clear,1015,">> Are there any Python bindings that hit the deprecated fns?. > I don't think so? They are not used in py::class_<Dimension> in export_mints.cc, if there are other places to look for Python bindings let me know and I will check. Looks like export_mints.cc only, so you've got that covered, thanks. >> This would be a good time to get the deprecation warnings in, so the fns can be removed by 1.10. > Perhaps, but I delayed it because; > 1. I was not sure that this would get thorough reviews before 1.9 is released. This is something that could disrupt people's codes/plugins that rely on it. I do not know how widely they are used, thus I want to give people time to stumble into the deprecation warning and yell before it is too late.; > 2. These functions are not exactly unused, even in Psi4 itself. It will not be a trivial task to rip them out, and I doubt that I will have enough free time to complete it before May 2024. Sounds fair. Two cycles may be good for the deprecation warning, as plugin devs like clear warnings.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600
https://github.com/psi4/psi4/issues/2964#issuecomment-1548014314:152,Safety,detect,detection,152,"This is a subtle problem: Psi4 reorients molecules to their principal axes, and shifts the origin to the center of mass by default (mostly for symmetry detection purposes); this shift makes the input grid inconsistent with the geometry. Long term, I guess the code should apply the same shift to any grids, for consistency. Until then, the translation / rotation can be disabled as follows:; ```python; geometry= """"""; 0 1; F 0.0 0.0 0.09241; H 0.0 0.0 -0.83169; noreorient; nocom; """"""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2964#issuecomment-1548014314
https://github.com/psi4/psi4/pull/2967#issuecomment-1560779360:29,Availability,failure,failures,29,I don't really see if the CI failures are related to my changes. @loriab Any ideas?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2967#issuecomment-1560779360
https://github.com/psi4/psi4/pull/2967#issuecomment-1560976633:174,Availability,error,error,174,"The problems are unrelated to this PR. Rebase and push, and the problems will be fixed. (Psi's ""grab the latest pydantic"" will use an updated pydantic, which won't raise the error.). I'll review this PR later today, since I know the TDSCF code the best, nowadays.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2967#issuecomment-1560976633
https://github.com/psi4/psi4/pull/2967#issuecomment-1560976633:134,Deployability,update,updated,134,"The problems are unrelated to this PR. Rebase and push, and the problems will be fixed. (Psi's ""grab the latest pydantic"" will use an updated pydantic, which won't raise the error.). I'll review this PR later today, since I know the TDSCF code the best, nowadays.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2967#issuecomment-1560976633
https://github.com/psi4/psi4/pull/2967#issuecomment-1561294933:8,Availability,failure,failures,8,"The Win failures are the pydantic 1.10.7 + typing extensions 4.6 we were seeing yesterday. It should have cleared up, some I'm retriggering one to check.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2967#issuecomment-1561294933
https://github.com/psi4/psi4/pull/2967#issuecomment-1561294933:106,Usability,clear,cleared,106,"The Win failures are the pydantic 1.10.7 + typing extensions 4.6 we were seeing yesterday. It should have cleared up, some I'm retriggering one to check.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2967#issuecomment-1561294933
https://github.com/psi4/psi4/pull/2968#issuecomment-1629734161:15,Testability,test,test,15,> Do we have a test on the distributed multipoles?. Just one: https://github.com/psi4/psi4/blob/master/tests/gdma/gdma1/input.dat that's mirrored at https://github.com/psi4/psi4/blob/master/tests/pytests/test_addons.py#L14,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2968#issuecomment-1629734161
https://github.com/psi4/psi4/pull/2968#issuecomment-1629734161:103,Testability,test,tests,103,> Do we have a test on the distributed multipoles?. Just one: https://github.com/psi4/psi4/blob/master/tests/gdma/gdma1/input.dat that's mirrored at https://github.com/psi4/psi4/blob/master/tests/pytests/test_addons.py#L14,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2968#issuecomment-1629734161
https://github.com/psi4/psi4/pull/2968#issuecomment-1629734161:190,Testability,test,tests,190,> Do we have a test on the distributed multipoles?. Just one: https://github.com/psi4/psi4/blob/master/tests/gdma/gdma1/input.dat that's mirrored at https://github.com/psi4/psi4/blob/master/tests/pytests/test_addons.py#L14,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2968#issuecomment-1629734161
https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995:44,Energy Efficiency,Energy,Energy,44,"For comparison, this is ""Before"":; ```; ==> Energy Analysis <== . Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -76.02703273 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Correction ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -76.00402048 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction E 16.219 [kcal/mol] 67.860 [kJ/mol] 0.02584634 [Eh]; Total E, Electronic energy at 298.15 [K] -76.00118639 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction H 16.811 [kcal/mol] 70.339 [kJ/mol] 0.02679052 [Eh]; Total H, Enthalpy at 298.15 [K] -76.00024221 [Eh]. Gibbs free energy, G = H - T * S; Electronic G -0.000 [kcal/mol] -0.000 [kJ/mol] -0.00000000 [Eh]; Translational G -8.837 [kcal/mol] -36.975 [kJ/mol] -0.01408306 [Eh]; Rotational G -2.205 [kcal/mol] -9.226 [kJ/mol] -0.00351384 [Eh]; Vibrational G 14.440 [kcal/mol] 60.418 [kJ/mol] 0.02301206 [Eh]; Correction G 3.398 [kcal/mol] 14.218 [kJ/mol] 0.00541516 [Eh]; Total G, Free enthalpy at 298.15 [K] -76.02161757 [Eh]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995
https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995:81,Energy Efficiency,energy,energy,81,"For comparison, this is ""Before"":; ```; ==> Energy Analysis <== . Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -76.02703273 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Correction ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -76.00402048 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction E 16.219 [kcal/mol] 67.860 [kJ/mol] 0.02584634 [Eh]; Total E, Electronic energy at 298.15 [K] -76.00118639 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction H 16.811 [kcal/mol] 70.339 [kJ/mol] 0.02679052 [Eh]; Total H, Enthalpy at 298.15 [K] -76.00024221 [Eh]. Gibbs free energy, G = H - T * S; Electronic G -0.000 [kcal/mol] -0.000 [kJ/mol] -0.00000000 [Eh]; Translational G -8.837 [kcal/mol] -36.975 [kJ/mol] -0.01408306 [Eh]; Rotational G -2.205 [kcal/mol] -9.226 [kJ/mol] -0.00351384 [Eh]; Vibrational G 14.440 [kcal/mol] 60.418 [kJ/mol] 0.02301206 [Eh]; Correction G 3.398 [kcal/mol] 14.218 [kJ/mol] 0.00541516 [Eh]; Total G, Free enthalpy at 298.15 [K] -76.02161757 [Eh]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995
https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995:114,Energy Efficiency,energy,energy,114,"For comparison, this is ""Before"":; ```; ==> Energy Analysis <== . Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -76.02703273 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Correction ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -76.00402048 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction E 16.219 [kcal/mol] 67.860 [kJ/mol] 0.02584634 [Eh]; Total E, Electronic energy at 298.15 [K] -76.00118639 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction H 16.811 [kcal/mol] 70.339 [kJ/mol] 0.02679052 [Eh]; Total H, Enthalpy at 298.15 [K] -76.00024221 [Eh]. Gibbs free energy, G = H - T * S; Electronic G -0.000 [kcal/mol] -0.000 [kJ/mol] -0.00000000 [Eh]; Translational G -8.837 [kcal/mol] -36.975 [kJ/mol] -0.01408306 [Eh]; Rotational G -2.205 [kcal/mol] -9.226 [kJ/mol] -0.00351384 [Eh]; Vibrational G 14.440 [kcal/mol] 60.418 [kJ/mol] 0.02301206 [Eh]; Correction G 3.398 [kcal/mol] 14.218 [kJ/mol] 0.00541516 [Eh]; Total G, Free enthalpy at 298.15 [K] -76.02161757 [Eh]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995
https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995:175,Energy Efficiency,energy,energy,175,"For comparison, this is ""Before"":; ```; ==> Energy Analysis <== . Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -76.02703273 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Correction ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -76.00402048 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction E 16.219 [kcal/mol] 67.860 [kJ/mol] 0.02584634 [Eh]; Total E, Electronic energy at 298.15 [K] -76.00118639 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction H 16.811 [kcal/mol] 70.339 [kJ/mol] 0.02679052 [Eh]; Total H, Enthalpy at 298.15 [K] -76.00024221 [Eh]. Gibbs free energy, G = H - T * S; Electronic G -0.000 [kcal/mol] -0.000 [kJ/mol] -0.00000000 [Eh]; Translational G -8.837 [kcal/mol] -36.975 [kJ/mol] -0.01408306 [Eh]; Rotational G -2.205 [kcal/mol] -9.226 [kJ/mol] -0.00351384 [Eh]; Vibrational G 14.440 [kcal/mol] 60.418 [kJ/mol] 0.02301206 [Eh]; Correction G 3.398 [kcal/mol] 14.218 [kJ/mol] 0.00541516 [Eh]; Total G, Free enthalpy at 298.15 [K] -76.02161757 [Eh]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995
https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995:593,Energy Efficiency,energy,energy,593,"For comparison, this is ""Before"":; ```; ==> Energy Analysis <== . Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -76.02703273 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Correction ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -76.00402048 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction E 16.219 [kcal/mol] 67.860 [kJ/mol] 0.02584634 [Eh]; Total E, Electronic energy at 298.15 [K] -76.00118639 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction H 16.811 [kcal/mol] 70.339 [kJ/mol] 0.02679052 [Eh]; Total H, Enthalpy at 298.15 [K] -76.00024221 [Eh]. Gibbs free energy, G = H - T * S; Electronic G -0.000 [kcal/mol] -0.000 [kJ/mol] -0.00000000 [Eh]; Translational G -8.837 [kcal/mol] -36.975 [kJ/mol] -0.01408306 [Eh]; Rotational G -2.205 [kcal/mol] -9.226 [kJ/mol] -0.00351384 [Eh]; Vibrational G 14.440 [kcal/mol] 60.418 [kJ/mol] 0.02301206 [Eh]; Correction G 3.398 [kcal/mol] 14.218 [kJ/mol] 0.00541516 [Eh]; Total G, Free enthalpy at 298.15 [K] -76.02161757 [Eh]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995
https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995:636,Energy Efficiency,Energy,Energy,636,"For comparison, this is ""Before"":; ```; ==> Energy Analysis <== . Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -76.02703273 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Correction ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -76.00402048 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction E 16.219 [kcal/mol] 67.860 [kJ/mol] 0.02584634 [Eh]; Total E, Electronic energy at 298.15 [K] -76.00118639 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction H 16.811 [kcal/mol] 70.339 [kJ/mol] 0.02679052 [Eh]; Total H, Enthalpy at 298.15 [K] -76.00024221 [Eh]. Gibbs free energy, G = H - T * S; Electronic G -0.000 [kcal/mol] -0.000 [kJ/mol] -0.00000000 [Eh]; Translational G -8.837 [kcal/mol] -36.975 [kJ/mol] -0.01408306 [Eh]; Rotational G -2.205 [kcal/mol] -9.226 [kJ/mol] -0.00351384 [Eh]; Vibrational G 14.440 [kcal/mol] 60.418 [kJ/mol] 0.02301206 [Eh]; Correction G 3.398 [kcal/mol] 14.218 [kJ/mol] 0.00541516 [Eh]; Total G, Free enthalpy at 298.15 [K] -76.02161757 [Eh]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995
https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995:1000,Energy Efficiency,energy,energy,1000,"For comparison, this is ""Before"":; ```; ==> Energy Analysis <== . Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -76.02703273 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Correction ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -76.00402048 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction E 16.219 [kcal/mol] 67.860 [kJ/mol] 0.02584634 [Eh]; Total E, Electronic energy at 298.15 [K] -76.00118639 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction H 16.811 [kcal/mol] 70.339 [kJ/mol] 0.02679052 [Eh]; Total H, Enthalpy at 298.15 [K] -76.00024221 [Eh]. Gibbs free energy, G = H - T * S; Electronic G -0.000 [kcal/mol] -0.000 [kJ/mol] -0.00000000 [Eh]; Translational G -8.837 [kcal/mol] -36.975 [kJ/mol] -0.01408306 [Eh]; Rotational G -2.205 [kcal/mol] -9.226 [kJ/mol] -0.00351384 [Eh]; Vibrational G 14.440 [kcal/mol] 60.418 [kJ/mol] 0.02301206 [Eh]; Correction G 3.398 [kcal/mol] 14.218 [kJ/mol] 0.00541516 [Eh]; Total G, Free enthalpy at 298.15 [K] -76.02161757 [Eh]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995
https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995:1459,Energy Efficiency,energy,energy,1459,"For comparison, this is ""Before"":; ```; ==> Energy Analysis <== . Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -76.02703273 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Correction ZPE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301225 [Eh] 5050.605 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -76.00402048 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction E 16.219 [kcal/mol] 67.860 [kJ/mol] 0.02584634 [Eh]; Total E, Electronic energy at 298.15 [K] -76.00118639 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301378 [Eh]; Correction H 16.811 [kcal/mol] 70.339 [kJ/mol] 0.02679052 [Eh]; Total H, Enthalpy at 298.15 [K] -76.00024221 [Eh]. Gibbs free energy, G = H - T * S; Electronic G -0.000 [kcal/mol] -0.000 [kJ/mol] -0.00000000 [Eh]; Translational G -8.837 [kcal/mol] -36.975 [kJ/mol] -0.01408306 [Eh]; Rotational G -2.205 [kcal/mol] -9.226 [kJ/mol] -0.00351384 [Eh]; Vibrational G 14.440 [kcal/mol] 60.418 [kJ/mol] 0.02301206 [Eh]; Correction G 3.398 [kcal/mol] 14.218 [kJ/mol] 0.00541516 [Eh]; Total G, Free enthalpy at 298.15 [K] -76.02161757 [Eh]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2969#issuecomment-1562015995
https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915:5,Availability,error,error,5,"PSIO error 12 means write error:; https://github.com/psi4/psi4/blob/58efb602ee9fdf3d774a3a6f073dbf47f2ac249b/psi4/src/psi4/libpsio/config.h#L55. Unfortunately your environment does not seem to give you the rest of the error message, so we dont actually know why a write has failed. Are you sure you have enough free disk space for the temporary files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915
https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915:26,Availability,error,error,26,"PSIO error 12 means write error:; https://github.com/psi4/psi4/blob/58efb602ee9fdf3d774a3a6f073dbf47f2ac249b/psi4/src/psi4/libpsio/config.h#L55. Unfortunately your environment does not seem to give you the rest of the error message, so we dont actually know why a write has failed. Are you sure you have enough free disk space for the temporary files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915
https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915:218,Availability,error,error,218,"PSIO error 12 means write error:; https://github.com/psi4/psi4/blob/58efb602ee9fdf3d774a3a6f073dbf47f2ac249b/psi4/src/psi4/libpsio/config.h#L55. Unfortunately your environment does not seem to give you the rest of the error message, so we dont actually know why a write has failed. Are you sure you have enough free disk space for the temporary files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915
https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915:224,Integrability,message,message,224,"PSIO error 12 means write error:; https://github.com/psi4/psi4/blob/58efb602ee9fdf3d774a3a6f073dbf47f2ac249b/psi4/src/psi4/libpsio/config.h#L55. Unfortunately your environment does not seem to give you the rest of the error message, so we dont actually know why a write has failed. Are you sure you have enough free disk space for the temporary files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915
https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915:131,Modifiability,config,config,131,"PSIO error 12 means write error:; https://github.com/psi4/psi4/blob/58efb602ee9fdf3d774a3a6f073dbf47f2ac249b/psi4/src/psi4/libpsio/config.h#L55. Unfortunately your environment does not seem to give you the rest of the error message, so we dont actually know why a write has failed. Are you sure you have enough free disk space for the temporary files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915
https://github.com/psi4/psi4/issues/2970#issuecomment-1565665594:123,Availability,error,error,123,"The disk space for the temporary file is about 245 GB. I don't know exactly how much space it requires. Could this kind of error raise a Python exception? I use `try...except` to mark failed points, and `core dumped` can not be caught within the Python script.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565665594
https://github.com/psi4/psi4/issues/2970#issuecomment-1565673938:5705,Energy Efficiency,energy,energy,5705,"543745, 0.5345655452, 3.830479889], [-0.1642482084, -4.8870667374, -1.3346361942], [-0.4246651863, -3.3287027858, -2.1574341496], [7.835478458, 0.065926779, -0.9217655086], [0.2801993817, 0.956672257, 2.7286499313], [1.7470023071, 1.3598969122, 3.3460428246], [-3.829442847, -2.5711178289, 0.8127942519], [4.203697503, 3.8694521886, 2.5508165156], [2.7646312712, -0.6072610943, 2.0709963606], [1.8229417322, 3.9989502928, 2.3471195754], [2.8732914, 3.4283145737, -0.4584330667], [1.4232745887, 4.3450459859, -0.0530997127], [4.329620552, 2.5614196883, 1.3839267312], [2.8817086248, 6.0173146394, 1.1617793827], [3.6252554546, 2.2719743014, 2.9830155292], [-7.4434855186, 0.4410405616, -2.5890974162], [3.2010845698, 5.9140326326, -0.5704640658], [0.5088426041, 2.4245642089, 0.9265473367], [6.0893550874, 2.0422571744, -0.1530407297], [-1.862134336, 0.4034738095, 2.2937204065], [-1.4138901004, 0.644406742, 0.0455352137], [-0.7095180298, -1.2632553768, -1.1676109686], [-0.6142721952, -3.2938004635, -0.1006904859], [1.97840289, -3.6814323378, 0.1492620683], [-0.9437197295, 0.7707072186, -2.1950994456], [3.0305830988, -0.7745567723, -0.0274639225], [2.1393686347, 1.0406513402, -0.6640047053], [2.7240826757, -0.0248994808, -1.0779442116], [0.9643448844, 1.7016817799, 2.7995701586], [-1.1897838302, -1.4434141329, 1.1398546593], [-4.6504826146, 0.9351211172, 3.0300907006], [0.5539503234, 2.3790185178, -3.9384263268], [-6.3763829627, 0.5740180369, 0.5055913646], [-5.5478006374, -0.1317291531, -2.5089137294], [3.352889237, -3.2422161861, 1.8787720858]]]); }. psi4.set_memory(""8 GB""); psi4.set_num_threads(4); types = np.array(data[""atom_names""])[data[""atom_types""]]; buff = [""0 1""]; for tt, cc in zip(types, data[""coords""][0]):; buff.append("" "".join([tt] + [str(x) for x in cc])); psi4.geometry(""\n"".join(buff)). G, wfn = psi4.gradient(""WB97M-D3BJ/def2-TZVPPD"", return_wfn=True); energy = wfn.energy(); wfn.gradient().print_out(); gradient = np.array(G). # post process energy and gradient; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565673938
https://github.com/psi4/psi4/issues/2970#issuecomment-1565673938:5718,Energy Efficiency,energy,energy,5718,"543745, 0.5345655452, 3.830479889], [-0.1642482084, -4.8870667374, -1.3346361942], [-0.4246651863, -3.3287027858, -2.1574341496], [7.835478458, 0.065926779, -0.9217655086], [0.2801993817, 0.956672257, 2.7286499313], [1.7470023071, 1.3598969122, 3.3460428246], [-3.829442847, -2.5711178289, 0.8127942519], [4.203697503, 3.8694521886, 2.5508165156], [2.7646312712, -0.6072610943, 2.0709963606], [1.8229417322, 3.9989502928, 2.3471195754], [2.8732914, 3.4283145737, -0.4584330667], [1.4232745887, 4.3450459859, -0.0530997127], [4.329620552, 2.5614196883, 1.3839267312], [2.8817086248, 6.0173146394, 1.1617793827], [3.6252554546, 2.2719743014, 2.9830155292], [-7.4434855186, 0.4410405616, -2.5890974162], [3.2010845698, 5.9140326326, -0.5704640658], [0.5088426041, 2.4245642089, 0.9265473367], [6.0893550874, 2.0422571744, -0.1530407297], [-1.862134336, 0.4034738095, 2.2937204065], [-1.4138901004, 0.644406742, 0.0455352137], [-0.7095180298, -1.2632553768, -1.1676109686], [-0.6142721952, -3.2938004635, -0.1006904859], [1.97840289, -3.6814323378, 0.1492620683], [-0.9437197295, 0.7707072186, -2.1950994456], [3.0305830988, -0.7745567723, -0.0274639225], [2.1393686347, 1.0406513402, -0.6640047053], [2.7240826757, -0.0248994808, -1.0779442116], [0.9643448844, 1.7016817799, 2.7995701586], [-1.1897838302, -1.4434141329, 1.1398546593], [-4.6504826146, 0.9351211172, 3.0300907006], [0.5539503234, 2.3790185178, -3.9384263268], [-6.3763829627, 0.5740180369, 0.5055913646], [-5.5478006374, -0.1317291531, -2.5089137294], [3.352889237, -3.2422161861, 1.8787720858]]]); }. psi4.set_memory(""8 GB""); psi4.set_num_threads(4); types = np.array(data[""atom_names""])[data[""atom_types""]]; buff = [""0 1""]; for tt, cc in zip(types, data[""coords""][0]):; buff.append("" "".join([tt] + [str(x) for x in cc])); psi4.geometry(""\n"".join(buff)). G, wfn = psi4.gradient(""WB97M-D3BJ/def2-TZVPPD"", return_wfn=True); energy = wfn.energy(); wfn.gradient().print_out(); gradient = np.array(G). # post process energy and gradient; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565673938
https://github.com/psi4/psi4/issues/2970#issuecomment-1565673938:5795,Energy Efficiency,energy,energy,5795,"543745, 0.5345655452, 3.830479889], [-0.1642482084, -4.8870667374, -1.3346361942], [-0.4246651863, -3.3287027858, -2.1574341496], [7.835478458, 0.065926779, -0.9217655086], [0.2801993817, 0.956672257, 2.7286499313], [1.7470023071, 1.3598969122, 3.3460428246], [-3.829442847, -2.5711178289, 0.8127942519], [4.203697503, 3.8694521886, 2.5508165156], [2.7646312712, -0.6072610943, 2.0709963606], [1.8229417322, 3.9989502928, 2.3471195754], [2.8732914, 3.4283145737, -0.4584330667], [1.4232745887, 4.3450459859, -0.0530997127], [4.329620552, 2.5614196883, 1.3839267312], [2.8817086248, 6.0173146394, 1.1617793827], [3.6252554546, 2.2719743014, 2.9830155292], [-7.4434855186, 0.4410405616, -2.5890974162], [3.2010845698, 5.9140326326, -0.5704640658], [0.5088426041, 2.4245642089, 0.9265473367], [6.0893550874, 2.0422571744, -0.1530407297], [-1.862134336, 0.4034738095, 2.2937204065], [-1.4138901004, 0.644406742, 0.0455352137], [-0.7095180298, -1.2632553768, -1.1676109686], [-0.6142721952, -3.2938004635, -0.1006904859], [1.97840289, -3.6814323378, 0.1492620683], [-0.9437197295, 0.7707072186, -2.1950994456], [3.0305830988, -0.7745567723, -0.0274639225], [2.1393686347, 1.0406513402, -0.6640047053], [2.7240826757, -0.0248994808, -1.0779442116], [0.9643448844, 1.7016817799, 2.7995701586], [-1.1897838302, -1.4434141329, 1.1398546593], [-4.6504826146, 0.9351211172, 3.0300907006], [0.5539503234, 2.3790185178, -3.9384263268], [-6.3763829627, 0.5740180369, 0.5055913646], [-5.5478006374, -0.1317291531, -2.5089137294], [3.352889237, -3.2422161861, 1.8787720858]]]); }. psi4.set_memory(""8 GB""); psi4.set_num_threads(4); types = np.array(data[""atom_names""])[data[""atom_types""]]; buff = [""0 1""]; for tt, cc in zip(types, data[""coords""][0]):; buff.append("" "".join([tt] + [str(x) for x in cc])); psi4.geometry(""\n"".join(buff)). G, wfn = psi4.gradient(""WB97M-D3BJ/def2-TZVPPD"", return_wfn=True); energy = wfn.energy(); wfn.gradient().print_out(); gradient = np.array(G). # post process energy and gradient; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565673938
https://github.com/psi4/psi4/issues/2970#issuecomment-1877081205:101,Availability,error,error,101,"I bet this is because of the calls to `exit()` in libpsio, combined with the lack of flushing of the error messages to the output. I have replaced the calls to `exit()` in #3118, which should solve this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1877081205
https://github.com/psi4/psi4/issues/2970#issuecomment-1877081205:107,Integrability,message,messages,107,"I bet this is because of the calls to `exit()` in libpsio, combined with the lack of flushing of the error messages to the output. I have replaced the calls to `exit()` in #3118, which should solve this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1877081205
https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965:137,Availability,fault,faulty,137,"I thought this was fixed long ago, but upon testing, that must have been `gradient`, `hessian`, and `frequency`, as `optimize` is indeed faulty. @psi-rking, I can intercept this in the psi driver, but would you prefer to intercept in optking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965
https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965:117,Performance,optimiz,optimize,117,"I thought this was fixed long ago, but upon testing, that must have been `gradient`, `hessian`, and `frequency`, as `optimize` is indeed faulty. @psi-rking, I can intercept this in the psi driver, but would you prefer to intercept in optking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965
https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965:44,Testability,test,testing,44,"I thought this was fixed long ago, but upon testing, that must have been `gradient`, `hessian`, and `frequency`, as `optimize` is indeed faulty. @psi-rking, I can intercept this in the psi driver, but would you prefer to intercept in optking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965
https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214:172,Availability,error,error,172,"I think I would leave the `OptimizationResult` with `""success"": ""false""`. Adding something optking side would be better imo especially if the goal is just a comprehensible error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214
https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214:178,Integrability,message,message,178,"I think I would leave the `OptimizationResult` with `""success"": ""false""`. Adding something optking side would be better imo especially if the goal is just a comprehensible error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214
https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214:27,Performance,Optimiz,OptimizationResult,27,"I think I would leave the `OptimizationResult` with `""success"": ""false""`. Adding something optking side would be better imo especially if the goal is just a comprehensible error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568683214
https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787:184,Availability,error,error,184,"Agreed we'll catch it and print a clear message. However, I'm thinking of a user sending a list of molecules that includes some atoms through the optimizer, and so whether this is an ""error"", and if ""false"" is going to interrupt desirable processes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787
https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787:40,Integrability,message,message,40,"Agreed we'll catch it and print a clear message. However, I'm thinking of a user sending a list of molecules that includes some atoms through the optimizer, and so whether this is an ""error"", and if ""false"" is going to interrupt desirable processes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787
https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787:146,Performance,optimiz,optimizer,146,"Agreed we'll catch it and print a clear message. However, I'm thinking of a user sending a list of molecules that includes some atoms through the optimizer, and so whether this is an ""error"", and if ""false"" is going to interrupt desirable processes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787
https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787:34,Usability,clear,clear,34,"Agreed we'll catch it and print a clear message. However, I'm thinking of a user sending a list of molecules that includes some atoms through the optimizer, and so whether this is an ""error"", and if ""false"" is going to interrupt desirable processes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787
https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119:102,Availability,error,error,102,"I think in terms of trying not to interrupt a high throughput scenario that we should still return an error in the `OptimizationResult` and set `""success"": ""false""` to warn the user that trying to grab something from `""return_result""` won't work. If we're giving json output back, optking failing shouldn't result in an error being returned to the user. They should be able to keep going naturally. If they try to check `'return_result'` though without checking for success they'd likely get a `NoneType` error or something which could kill whatever scripts they're running. The question in my mind is whether we should actually run a simple energy calc at the requested level of theory an place the `AtomicResult` in the `""trajectory""` so that they have some results to work with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119
https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119:320,Availability,error,error,320,"I think in terms of trying not to interrupt a high throughput scenario that we should still return an error in the `OptimizationResult` and set `""success"": ""false""` to warn the user that trying to grab something from `""return_result""` won't work. If we're giving json output back, optking failing shouldn't result in an error being returned to the user. They should be able to keep going naturally. If they try to check `'return_result'` though without checking for success they'd likely get a `NoneType` error or something which could kill whatever scripts they're running. The question in my mind is whether we should actually run a simple energy calc at the requested level of theory an place the `AtomicResult` in the `""trajectory""` so that they have some results to work with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119
https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119:505,Availability,error,error,505,"I think in terms of trying not to interrupt a high throughput scenario that we should still return an error in the `OptimizationResult` and set `""success"": ""false""` to warn the user that trying to grab something from `""return_result""` won't work. If we're giving json output back, optking failing shouldn't result in an error being returned to the user. They should be able to keep going naturally. If they try to check `'return_result'` though without checking for success they'd likely get a `NoneType` error or something which could kill whatever scripts they're running. The question in my mind is whether we should actually run a simple energy calc at the requested level of theory an place the `AtomicResult` in the `""trajectory""` so that they have some results to work with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119
https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119:642,Energy Efficiency,energy,energy,642,"I think in terms of trying not to interrupt a high throughput scenario that we should still return an error in the `OptimizationResult` and set `""success"": ""false""` to warn the user that trying to grab something from `""return_result""` won't work. If we're giving json output back, optking failing shouldn't result in an error being returned to the user. They should be able to keep going naturally. If they try to check `'return_result'` though without checking for success they'd likely get a `NoneType` error or something which could kill whatever scripts they're running. The question in my mind is whether we should actually run a simple energy calc at the requested level of theory an place the `AtomicResult` in the `""trajectory""` so that they have some results to work with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119
https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119:51,Performance,throughput,throughput,51,"I think in terms of trying not to interrupt a high throughput scenario that we should still return an error in the `OptimizationResult` and set `""success"": ""false""` to warn the user that trying to grab something from `""return_result""` won't work. If we're giving json output back, optking failing shouldn't result in an error being returned to the user. They should be able to keep going naturally. If they try to check `'return_result'` though without checking for success they'd likely get a `NoneType` error or something which could kill whatever scripts they're running. The question in my mind is whether we should actually run a simple energy calc at the requested level of theory an place the `AtomicResult` in the `""trajectory""` so that they have some results to work with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119
https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119:116,Performance,Optimiz,OptimizationResult,116,"I think in terms of trying not to interrupt a high throughput scenario that we should still return an error in the `OptimizationResult` and set `""success"": ""false""` to warn the user that trying to grab something from `""return_result""` won't work. If we're giving json output back, optking failing shouldn't result in an error being returned to the user. They should be able to keep going naturally. If they try to check `'return_result'` though without checking for success they'd likely get a `NoneType` error or something which could kill whatever scripts they're running. The question in my mind is whether we should actually run a simple energy calc at the requested level of theory an place the `AtomicResult` in the `""trajectory""` so that they have some results to work with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119
https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119:635,Usability,simpl,simple,635,"I think in terms of trying not to interrupt a high throughput scenario that we should still return an error in the `OptimizationResult` and set `""success"": ""false""` to warn the user that trying to grab something from `""return_result""` won't work. If we're giving json output back, optking failing shouldn't result in an error being returned to the user. They should be able to keep going naturally. If they try to check `'return_result'` though without checking for success they'd likely get a `NoneType` error or something which could kill whatever scripts they're running. The question in my mind is whether we should actually run a simple energy calc at the requested level of theory an place the `AtomicResult` in the `""trajectory""` so that they have some results to work with.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1570349119
https://github.com/psi4/psi4/issues/2971#issuecomment-1571236559:91,Availability,avail,available,91,"@AlexHeide, your suggestion to compute an energy is an excellent one. How do we do it? I'm available to work on this, but not sure where to start putting the catch. Feel free to cue me on Slack if that's more convenient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1571236559
https://github.com/psi4/psi4/issues/2971#issuecomment-1571236559:42,Energy Efficiency,energy,energy,42,"@AlexHeide, your suggestion to compute an energy is an excellent one. How do we do it? I'm available to work on this, but not sure where to start putting the catch. Feel free to cue me on Slack if that's more convenient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1571236559
https://github.com/psi4/psi4/issues/2971#issuecomment-1581441113:58,Testability,test,test,58,"Great! Once that's in and in the conda stack, let's add a test case before closing this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1581441113
https://github.com/psi4/psi4/pull/2972#issuecomment-1604327835:161,Testability,test,tests,161,"> What's the effect, does this leave the temporary files hanging?. Probably yes, adding to the misc temp files from pcm https://github.com/psi4/psi4/blob/master/tests/pytests/conftest.py#L52-L53 . I guess we could try to add these to on-exit like the numpy files.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2972#issuecomment-1604327835
https://github.com/psi4/psi4/pull/2973#issuecomment-1570262210:251,Testability,test,testing,251,"So I cross-checked this with the CompositeJK methods, and; as I somewhat suspected might happen, the CompositeJK methods do not work with `screening none`. `SCF_TYPE DFDIRJ+LINK` segfaults, while `SCF_TYPE DFDIRJ+COSX` gives the wrong answer, from my testing. . The composite methods partially implement the screening machinery within themselves instead of relying entirely on the `TwoBodyAOInt::shell_significant()` function for sieving. Some `TwoBodyAOInt` member functions, such as `TwoBodyAOInt::shell_pair_values` (used in DF-DirJ), and `TwoBodyAOInt::shell_pair_significant` (used in LinK) are used to assist with this. However, these functions rely on values that (specifically, `shell_pair_values_`, `screening_threshold_squared_`, and `max_integral_`) are initialized during the call to `TwoBodyAOInt::create_sieve_pair_info`, which is never called when `screening_type` is set to `none` due to the `return` upon registering `ScreeningType::None` for the sieve during `TwoBodyAOInt::setup_sieve`. That's where I suspect these problems are coming from. Given this wasn't caught by CI, it may be reasonable to add a new test for different JK methods at different screening types, but that wouldn't be for this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2973#issuecomment-1570262210
https://github.com/psi4/psi4/pull/2973#issuecomment-1570262210:1127,Testability,test,test,1127,"So I cross-checked this with the CompositeJK methods, and; as I somewhat suspected might happen, the CompositeJK methods do not work with `screening none`. `SCF_TYPE DFDIRJ+LINK` segfaults, while `SCF_TYPE DFDIRJ+COSX` gives the wrong answer, from my testing. . The composite methods partially implement the screening machinery within themselves instead of relying entirely on the `TwoBodyAOInt::shell_significant()` function for sieving. Some `TwoBodyAOInt` member functions, such as `TwoBodyAOInt::shell_pair_values` (used in DF-DirJ), and `TwoBodyAOInt::shell_pair_significant` (used in LinK) are used to assist with this. However, these functions rely on values that (specifically, `shell_pair_values_`, `screening_threshold_squared_`, and `max_integral_`) are initialized during the call to `TwoBodyAOInt::create_sieve_pair_info`, which is never called when `screening_type` is set to `none` due to the `return` upon registering `ScreeningType::None` for the sieve during `TwoBodyAOInt::setup_sieve`. That's where I suspect these problems are coming from. Given this wasn't caught by CI, it may be reasonable to add a new test for different JK methods at different screening types, but that wouldn't be for this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2973#issuecomment-1570262210
https://github.com/psi4/psi4/pull/2975#issuecomment-1572599789:84,Availability,ERROR,ERROR,84,`/home/runner/work/psi4/psi4/code/objdir/doc/sphinxman/source/introduction.rst:141: ERROR: Unexpected indentation.` appease the Sphinx,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2975#issuecomment-1572599789
https://github.com/psi4/psi4/issues/2976#issuecomment-1573525851:159,Energy Efficiency,energy,energy,159,"Oh right, the issue is that due to `freeze_core = True`, there is only one active electron. So yeah, it would be nice if MP2 did not crash but returned the HF energy, since the MP2 correction is zero.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2976#issuecomment-1573525851
https://github.com/psi4/psi4/pull/2980#issuecomment-1582606031:91,Testability,test,test,91,"Thanks for the contribution. Have you built this modified version of Psi locally? When our test suite tries to build it, it doesn't work. That's the first step in testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1582606031
https://github.com/psi4/psi4/pull/2980#issuecomment-1582606031:163,Testability,test,testing,163,"Thanks for the contribution. Have you built this modified version of Psi locally? When our test suite tries to build it, it doesn't work. That's the first step in testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1582606031
https://github.com/psi4/psi4/pull/2980#issuecomment-1583040315:27,Deployability,pipeline,pipeline,27,"Was able to build locally, pipeline (up to `ctest`) ran successfully. There were issues on `pytest`, but it seems like these issues have to do with missing packages, so I'm not sure how to address them. See https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=4577f1f3-bc89-5040-5cf1-0f1c10ea6889&l=4843 for more details. Any advice would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583040315
https://github.com/psi4/psi4/pull/2980#issuecomment-1583040315:272,Testability,log,logs,272,"Was able to build locally, pipeline (up to `ctest`) ran successfully. There were issues on `pytest`, but it seems like these issues have to do with missing packages, so I'm not sure how to address them. See https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=4577f1f3-bc89-5040-5cf1-0f1c10ea6889&l=4843 for more details. Any advice would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583040315
https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943:23,Availability,error,error,23,"I see we have a plugin error here https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=e678ab3d-f7fc-50f0-56d8-3349f4950165&l=9304 . That's very possibly pre-existing -- I should have retained skeletons in ctest when I deduplicated the ctest and pytest calls. The ""missing packages"" link doesn't work for me. What is the text? Does running the `test_sapt_dft1` test in particular work for you locally?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943
https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943:16,Modifiability,plugin,plugin,16,"I see we have a plugin error here https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=e678ab3d-f7fc-50f0-56d8-3349f4950165&l=9304 . That's very possibly pre-existing -- I should have retained skeletons in ctest when I deduplicated the ctest and pytest calls. The ""missing packages"" link doesn't work for me. What is the text? Does running the `test_sapt_dft1` test in particular work for you locally?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943
https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943:99,Testability,log,logs,99,"I see we have a plugin error here https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=e678ab3d-f7fc-50f0-56d8-3349f4950165&l=9304 . That's very possibly pre-existing -- I should have retained skeletons in ctest when I deduplicated the ctest and pytest calls. The ""missing packages"" link doesn't work for me. What is the text? Does running the `test_sapt_dft1` test in particular work for you locally?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943
https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943:419,Testability,test,test,419,"I see we have a plugin error here https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=e678ab3d-f7fc-50f0-56d8-3349f4950165&l=9304 . That's very possibly pre-existing -- I should have retained skeletons in ctest when I deduplicated the ctest and pytest calls. The ""missing packages"" link doesn't work for me. What is the text? Does running the `test_sapt_dft1` test in particular work for you locally?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943
https://github.com/psi4/psi4/pull/2980#issuecomment-1583072475:126,Testability,log,logs,126,"Fixed the link in the original comment, also adding it here: https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=4577f1f3-bc89-5040-5cf1-0f1c10ea6889&l=4843",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583072475
https://github.com/psi4/psi4/pull/2980#issuecomment-1583077201:127,Availability,failure,failure,127,"A skipped test is not a problem -- the CI environment or resources constraints preclude running the test, so it's skipped. The failure above that of `dft_sapt1` is a problem https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=4577f1f3-bc89-5040-5cf1-0f1c10ea6889&l=4664 so a good first debugging step is to try it locally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583077201
https://github.com/psi4/psi4/pull/2980#issuecomment-1583077201:10,Testability,test,test,10,"A skipped test is not a problem -- the CI environment or resources constraints preclude running the test, so it's skipped. The failure above that of `dft_sapt1` is a problem https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=4577f1f3-bc89-5040-5cf1-0f1c10ea6889&l=4664 so a good first debugging step is to try it locally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583077201
https://github.com/psi4/psi4/pull/2980#issuecomment-1583077201:100,Testability,test,test,100,"A skipped test is not a problem -- the CI environment or resources constraints preclude running the test, so it's skipped. The failure above that of `dft_sapt1` is a problem https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=4577f1f3-bc89-5040-5cf1-0f1c10ea6889&l=4664 so a good first debugging step is to try it locally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583077201
https://github.com/psi4/psi4/pull/2980#issuecomment-1583077201:239,Testability,log,logs,239,"A skipped test is not a problem -- the CI environment or resources constraints preclude running the test, so it's skipped. The failure above that of `dft_sapt1` is a problem https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=4577f1f3-bc89-5040-5cf1-0f1c10ea6889&l=4664 so a good first debugging step is to try it locally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583077201
https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:720,Modifiability,variab,variable,720,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169
https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:807,Modifiability,variab,variable,807,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169
https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:778,Performance,cache,cached,778,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169
https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:42,Testability,test,test,42,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169
https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:126,Testability,test,test,126,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169
https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:163,Testability,test,test,163,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169
https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:198,Testability,test,tests,198,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169
https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:357,Testability,test,tests,357,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169
https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:396,Testability,test,test,396,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169
https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:532,Testability,test,tests,532,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169
https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:591,Testability,test,tests,591,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169
https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:756,Testability,test,test,756,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169
https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:552,Usability,guid,guide,552,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169
https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:923,Usability,guid,guidance,923,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169
https://github.com/psi4/psi4/pull/2982#issuecomment-1630876129:212,Testability,test,test,212,"Yup, @JonathonMisiewicz, I do have this PR on my radar and it's overall a super useful contribution! Unfortunately, I'm very short on time for the next couple weeks and it might still be a while until I properly test it out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1630876129
https://github.com/psi4/psi4/pull/2982#issuecomment-1714404565:212,Testability,test,test,212,"> Okay, that makes much more sense. I'm used to different parameter values being entirely different computations, not different checks on a single computation. Can you please add a docstring explaining what this test does, so that doesn't bite anybody else? Example: ""Test that the CABS and OBS spaces are orthonormal."" Renaming ""o1"" and ""o2"" to ""idx1"" and ""idx2"" would also make a lot of difference. Just want to make sure this one didn't get lost. 😅",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1714404565
https://github.com/psi4/psi4/pull/2982#issuecomment-1714404565:268,Testability,Test,Test,268,"> Okay, that makes much more sense. I'm used to different parameter values being entirely different computations, not different checks on a single computation. Can you please add a docstring explaining what this test does, so that doesn't bite anybody else? Example: ""Test that the CABS and OBS spaces are orthonormal."" Renaming ""o1"" and ""o2"" to ""idx1"" and ""idx2"" would also make a lot of difference. Just want to make sure this one didn't get lost. 😅",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1714404565
https://github.com/psi4/psi4/pull/2982#issuecomment-1714499781:26,Availability,failure,failure,26,The reason for docs build failure is unrelated to this PR. I've asked Lori to take a look.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1714499781
https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318:34,Availability,down,down,34,Almost certainly because Ben took down some old qcel/qcng docs in preparation for the qcfractal release. I'll hunt down the replacement. Probably this can still join the merge queue b/c only Azure is required to pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318
https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318:115,Availability,down,down,115,Almost certainly because Ben took down some old qcel/qcng docs in preparation for the qcfractal release. I'll hunt down the replacement. Probably this can still join the merge queue b/c only Azure is required to pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318
https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318:96,Deployability,release,release,96,Almost certainly because Ben took down some old qcel/qcng docs in preparation for the qcfractal release. I'll hunt down the replacement. Probably this can still join the merge queue b/c only Azure is required to pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318
https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318:176,Performance,queue,queue,176,Almost certainly because Ben took down some old qcel/qcng docs in preparation for the qcfractal release. I'll hunt down the replacement. Probably this can still join the merge queue b/c only Azure is required to pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1714533318
https://github.com/psi4/psi4/pull/2984#issuecomment-1589812264:14,Testability,test,test,14,"Can we have a test case, out of paranoia?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2984#issuecomment-1589812264
https://github.com/psi4/psi4/pull/2984#issuecomment-1589872664:16,Testability,test,test,16,"> Can we have a test case, out of paranoia?. Sure thing, added.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2984#issuecomment-1589872664
https://github.com/psi4/psi4/issues/2985#issuecomment-1590021130:356,Usability,simpl,simple,356,"The MintsHelper functions for the one-electron integrals automatically assumes no symmetry if two basis sets are given, even if they are the same. Changes to the code since Libint1 have made it so the one_body_ao_computer runs off shellpairs in filling the returned matrix so symmetry is run even though its set to false in the function. I have included a simple fix to this in my PR #2982 , I’m just waiting for review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2985#issuecomment-1590021130
https://github.com/psi4/psi4/pull/2986#issuecomment-1591433295:100,Integrability,rout,routine,100,"Why did the matrices come out lower/upper diagonal before, how is that fixed now? Does the integral routine only fill one half when the basis sets are the same?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2986#issuecomment-1591433295
https://github.com/psi4/psi4/issues/2989#issuecomment-1606221049:477,Availability,error,error,477,"Regrettably, this is expected. From https://www.basissetexchange.org/ (choose role: JK-fitting and element He), you can see that there isn't a Dunning cc-pVNZ basis defined for Helium. Usually what psi4 does is use the universal def2-universal-JKFIT when there isn't a JKfit designed for the orbital basis. But this is turned off above quad-zeta b/c (1) the universal basis is quad-zeta itself and (2) if you're in 5-zeta territory you might not appreciate the density-fitting error anyways. You'll have to decide if you want the quad-zeta fitting basis anyways or want to turn off DF or downgrade the basis for He, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2989#issuecomment-1606221049
https://github.com/psi4/psi4/issues/2989#issuecomment-1606221049:588,Availability,down,downgrade,588,"Regrettably, this is expected. From https://www.basissetexchange.org/ (choose role: JK-fitting and element He), you can see that there isn't a Dunning cc-pVNZ basis defined for Helium. Usually what psi4 does is use the universal def2-universal-JKFIT when there isn't a JKfit designed for the orbital basis. But this is turned off above quad-zeta b/c (1) the universal basis is quad-zeta itself and (2) if you're in 5-zeta territory you might not appreciate the density-fitting error anyways. You'll have to decide if you want the quad-zeta fitting basis anyways or want to turn off DF or downgrade the basis for He, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2989#issuecomment-1606221049
https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172:1206,Energy Efficiency,energy,energy,1206,"Even when using all the parameters suggested by @PhillCli in a test sript, the calculation does not complete. The SCF part is executed, but it seems that there is a problem when building the basis set for the SAPT calculation. Calculation stops at this point. ![Screenshot from 2023-06-27 09-54-28](https://github.com/psi4/psi4/assets/17604953/24f20f18-3708-46dc-b80b-681a98083799). Displaying the following message in the executation terminal. ![Screenshot from 2023-06-27 09-57-24](https://github.com/psi4/psi4/assets/17604953/6fdd54b8-3210-4b4e-a000-ed640f187e7c). The script I am using for the test . ```python; import psi4; import time; psi4.core.set_output_file('output.dat', False). he2_geometry = """"""; He; --; He 1 {0}; """""". Rvals = [2.5, 3.0,]. start = time.time(); psi4.set_num_threads(4); psi4.set_memory(""30000 MB""). psi4.set_options(; {; ""reference"": ""uhf"",; ""scf_type"": ""direct"",; ""df_basis_scf"": ""def2-universal-JKFIT"",; ""df_basis_sapt"": ""aug-cc-pv6z-ri"",; ""basis_guess"": ""aug-cc-pvdz"",; ""basis"": ""d-aug-cc-pv5z"",; ""guess"": ""sad"",; ""maxiter"": 300,; ""e_convergence"": 1e-10,; ""d_convergence"": 1e-10,; }; ). ecp = {}. for R in Rvals:; he2 = psi4.geometry(he2_geometry.format(R)); ecp[R] = psi4.energy('sapt0', molecule=he2). # Prints to screen; print(""Interaction Energies\n\n""); print("" R E_int ""); print(""---------------------------------------------------------""); for R in Rvals:; e = ecp[R] ; print("" {:3.1f} {:1.6f}"".format(R, e)); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172
https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172:408,Integrability,message,message,408,"Even when using all the parameters suggested by @PhillCli in a test sript, the calculation does not complete. The SCF part is executed, but it seems that there is a problem when building the basis set for the SAPT calculation. Calculation stops at this point. ![Screenshot from 2023-06-27 09-54-28](https://github.com/psi4/psi4/assets/17604953/24f20f18-3708-46dc-b80b-681a98083799). Displaying the following message in the executation terminal. ![Screenshot from 2023-06-27 09-57-24](https://github.com/psi4/psi4/assets/17604953/6fdd54b8-3210-4b4e-a000-ed640f187e7c). The script I am using for the test . ```python; import psi4; import time; psi4.core.set_output_file('output.dat', False). he2_geometry = """"""; He; --; He 1 {0}; """""". Rvals = [2.5, 3.0,]. start = time.time(); psi4.set_num_threads(4); psi4.set_memory(""30000 MB""). psi4.set_options(; {; ""reference"": ""uhf"",; ""scf_type"": ""direct"",; ""df_basis_scf"": ""def2-universal-JKFIT"",; ""df_basis_sapt"": ""aug-cc-pv6z-ri"",; ""basis_guess"": ""aug-cc-pvdz"",; ""basis"": ""d-aug-cc-pv5z"",; ""guess"": ""sad"",; ""maxiter"": 300,; ""e_convergence"": 1e-10,; ""d_convergence"": 1e-10,; }; ). ecp = {}. for R in Rvals:; he2 = psi4.geometry(he2_geometry.format(R)); ecp[R] = psi4.energy('sapt0', molecule=he2). # Prints to screen; print(""Interaction Energies\n\n""); print("" R E_int ""); print(""---------------------------------------------------------""); for R in Rvals:; e = ecp[R] ; print("" {:3.1f} {:1.6f}"".format(R, e)); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172
https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172:63,Testability,test,test,63,"Even when using all the parameters suggested by @PhillCli in a test sript, the calculation does not complete. The SCF part is executed, but it seems that there is a problem when building the basis set for the SAPT calculation. Calculation stops at this point. ![Screenshot from 2023-06-27 09-54-28](https://github.com/psi4/psi4/assets/17604953/24f20f18-3708-46dc-b80b-681a98083799). Displaying the following message in the executation terminal. ![Screenshot from 2023-06-27 09-57-24](https://github.com/psi4/psi4/assets/17604953/6fdd54b8-3210-4b4e-a000-ed640f187e7c). The script I am using for the test . ```python; import psi4; import time; psi4.core.set_output_file('output.dat', False). he2_geometry = """"""; He; --; He 1 {0}; """""". Rvals = [2.5, 3.0,]. start = time.time(); psi4.set_num_threads(4); psi4.set_memory(""30000 MB""). psi4.set_options(; {; ""reference"": ""uhf"",; ""scf_type"": ""direct"",; ""df_basis_scf"": ""def2-universal-JKFIT"",; ""df_basis_sapt"": ""aug-cc-pv6z-ri"",; ""basis_guess"": ""aug-cc-pvdz"",; ""basis"": ""d-aug-cc-pv5z"",; ""guess"": ""sad"",; ""maxiter"": 300,; ""e_convergence"": 1e-10,; ""d_convergence"": 1e-10,; }; ). ecp = {}. for R in Rvals:; he2 = psi4.geometry(he2_geometry.format(R)); ecp[R] = psi4.energy('sapt0', molecule=he2). # Prints to screen; print(""Interaction Energies\n\n""); print("" R E_int ""); print(""---------------------------------------------------------""); for R in Rvals:; e = ecp[R] ; print("" {:3.1f} {:1.6f}"".format(R, e)); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172
https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172:598,Testability,test,test,598,"Even when using all the parameters suggested by @PhillCli in a test sript, the calculation does not complete. The SCF part is executed, but it seems that there is a problem when building the basis set for the SAPT calculation. Calculation stops at this point. ![Screenshot from 2023-06-27 09-54-28](https://github.com/psi4/psi4/assets/17604953/24f20f18-3708-46dc-b80b-681a98083799). Displaying the following message in the executation terminal. ![Screenshot from 2023-06-27 09-57-24](https://github.com/psi4/psi4/assets/17604953/6fdd54b8-3210-4b4e-a000-ed640f187e7c). The script I am using for the test . ```python; import psi4; import time; psi4.core.set_output_file('output.dat', False). he2_geometry = """"""; He; --; He 1 {0}; """""". Rvals = [2.5, 3.0,]. start = time.time(); psi4.set_num_threads(4); psi4.set_memory(""30000 MB""). psi4.set_options(; {; ""reference"": ""uhf"",; ""scf_type"": ""direct"",; ""df_basis_scf"": ""def2-universal-JKFIT"",; ""df_basis_sapt"": ""aug-cc-pv6z-ri"",; ""basis_guess"": ""aug-cc-pvdz"",; ""basis"": ""d-aug-cc-pv5z"",; ""guess"": ""sad"",; ""maxiter"": 300,; ""e_convergence"": 1e-10,; ""d_convergence"": 1e-10,; }; ). ecp = {}. for R in Rvals:; he2 = psi4.geometry(he2_geometry.format(R)); ecp[R] = psi4.energy('sapt0', molecule=he2). # Prints to screen; print(""Interaction Energies\n\n""); print("" R E_int ""); print(""---------------------------------------------------------""); for R in Rvals:; e = ecp[R] ; print("" {:3.1f} {:1.6f}"".format(R, e)); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172
https://github.com/psi4/psi4/issues/2989#issuecomment-1609497869:12,Availability,down,downloading,12,"Can you try downloading the basis set from BSE, maybe psi4 doesn't come with the RI-fit for He (I don't remember). I'm seeing it available here: https://www.basissetexchange.org/basis/aug-cc-pv6z-rifit/format/psi4/?version=1&elements=2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2989#issuecomment-1609497869
https://github.com/psi4/psi4/issues/2989#issuecomment-1609497869:129,Availability,avail,available,129,"Can you try downloading the basis set from BSE, maybe psi4 doesn't come with the RI-fit for He (I don't remember). I'm seeing it available here: https://www.basissetexchange.org/basis/aug-cc-pv6z-rifit/format/psi4/?version=1&elements=2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2989#issuecomment-1609497869
https://github.com/psi4/psi4/issues/2990#issuecomment-1606556298:279,Deployability,update,updated,279,"The value should be a float `1e-3` or an int `3` not a string, `'1e-3'`. It's fine to just set the option globally as well,; ```; psi4.set_options({'e_convergence': 1e-3}); ```; unless you need different modules to have different options set. This part of the tutorial should be updated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2990#issuecomment-1606556298
https://github.com/psi4/psi4/issues/2991#issuecomment-1606566187:68,Deployability,install,install,68,The libint package needed is in a dev label of conda-forge. You can install psi4 1.8 with; ```; conda install psi4 -c conda-forge/label/libint_dev -c conda-forge ; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1606566187
https://github.com/psi4/psi4/issues/2991#issuecomment-1606566187:102,Deployability,install,install,102,The libint package needed is in a dev label of conda-forge. You can install psi4 1.8 with; ```; conda install psi4 -c conda-forge/label/libint_dev -c conda-forge ; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1606566187
https://github.com/psi4/psi4/issues/2991#issuecomment-1606717136:70,Deployability,install,install,70,"> The libint package needed is in a dev label of conda-forge. You can install psi4 1.8 with; > ; > ```; > conda install psi4 -c conda-forge/label/libint_dev -c conda-forge ; > ```. Dear Philip,. Thanks so much for your information",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1606717136
https://github.com/psi4/psi4/issues/2991#issuecomment-1606717136:112,Deployability,install,install,112,"> The libint package needed is in a dev label of conda-forge. You can install psi4 1.8 with; > ; > ```; > conda install psi4 -c conda-forge/label/libint_dev -c conda-forge ; > ```. Dear Philip,. Thanks so much for your information",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1606717136
https://github.com/psi4/psi4/issues/2991#issuecomment-1608794583:77,Deployability,install,install,77,"> Is there a reason this issue still needs to be open?. Hi, Jonathon. `conda install psi4 -c psi4` will install 1.7 version, not the 1.8. Is there any reson that the default `conda install psi4 -c psi4` not install the latest production version 1.8?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1608794583
https://github.com/psi4/psi4/issues/2991#issuecomment-1608794583:104,Deployability,install,install,104,"> Is there a reason this issue still needs to be open?. Hi, Jonathon. `conda install psi4 -c psi4` will install 1.7 version, not the 1.8. Is there any reson that the default `conda install psi4 -c psi4` not install the latest production version 1.8?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1608794583
https://github.com/psi4/psi4/issues/2991#issuecomment-1608794583:181,Deployability,install,install,181,"> Is there a reason this issue still needs to be open?. Hi, Jonathon. `conda install psi4 -c psi4` will install 1.7 version, not the 1.8. Is there any reson that the default `conda install psi4 -c psi4` not install the latest production version 1.8?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1608794583
https://github.com/psi4/psi4/issues/2991#issuecomment-1608794583:207,Deployability,install,install,207,"> Is there a reason this issue still needs to be open?. Hi, Jonathon. `conda install psi4 -c psi4` will install 1.7 version, not the 1.8. Is there any reson that the default `conda install psi4 -c psi4` not install the latest production version 1.8?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1608794583
https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972:59,Availability,error,error,59,"I cannot install psi4 v1.8 from conda. I get the following error. I'm on Ubuntu 22.04. Is this a known issue? Workarounds?. ```sh; ❯ conda create --name psi4-2 --channel conda-forge 'psi4==1.8' 35s  base; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Package qcengine conflicts for:; psi4==1.8 -> qcengine[version='>=0.26.0,<0.27.0a0']; Package libint conflicts for:; psi4==1.8 -> libint=2.7.3dev1; Package _openmp_mutex conflicts for:; psi4==1.8 -> _openmp_mutex[version='*,>=4.5',build=*_llvm]; Package python_abi conflicts for:; psi4==1.8 -> python_abi[version='3.10.*|3.11.*|3.8.*|3.9.*',build='*_cp311|*_cp310|*_cp38|*_cp39']; Package libxc-c conflicts for:; psi4==1.8 -> libxc-c[version='>=6.1.0,<7.0a0',build=cpu_*]; Package qcelemental conflicts for:; psi4==1.8 -> qcelemental[version='>=0.25.1,<0.26.0a0']; Package python conflicts for:; psi4==1.8 -> python[version='>=3.10,<3.11.0a0|>=3.11,<3.12.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; Package pytest conflicts for:; psi4==1.8 -> pytest[version='>=7.0.1']; Package pyddx conflicts for:; psi4==1.8 -> pyddx[version='>=0.4.1']; Package pymdi conflicts for:; psi4==1.8 -> pymdi[version='>=1.2']; Package mkl conflicts for:; psi4==1.8 -> mkl[version='>=2022.2.1,<2023.0a0']; Package dkh conflicts for:; psi4==1.8 -> dkh[version='>=1.2,<1.3.0a0']; Package adcc conflicts for:; psi4==1.8 -> adcc[version='>=0.15.16']; Package networkx conflicts for:; psi4==1.8 -> networkx; Package numpy conflicts for:; psi4==1.8 -> numpy; Package libblas conflicts for:; psi4==1.8 -> libblas=[build=*mkl]; Package pybind11-abi conflicts for:; psi4==1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972
https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972:9,Deployability,install,install,9,"I cannot install psi4 v1.8 from conda. I get the following error. I'm on Ubuntu 22.04. Is this a known issue? Workarounds?. ```sh; ❯ conda create --name psi4-2 --channel conda-forge 'psi4==1.8' 35s  base; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Package qcengine conflicts for:; psi4==1.8 -> qcengine[version='>=0.26.0,<0.27.0a0']; Package libint conflicts for:; psi4==1.8 -> libint=2.7.3dev1; Package _openmp_mutex conflicts for:; psi4==1.8 -> _openmp_mutex[version='*,>=4.5',build=*_llvm]; Package python_abi conflicts for:; psi4==1.8 -> python_abi[version='3.10.*|3.11.*|3.8.*|3.9.*',build='*_cp311|*_cp310|*_cp38|*_cp39']; Package libxc-c conflicts for:; psi4==1.8 -> libxc-c[version='>=6.1.0,<7.0a0',build=cpu_*]; Package qcelemental conflicts for:; psi4==1.8 -> qcelemental[version='>=0.25.1,<0.26.0a0']; Package python conflicts for:; psi4==1.8 -> python[version='>=3.10,<3.11.0a0|>=3.11,<3.12.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; Package pytest conflicts for:; psi4==1.8 -> pytest[version='>=7.0.1']; Package pyddx conflicts for:; psi4==1.8 -> pyddx[version='>=0.4.1']; Package pymdi conflicts for:; psi4==1.8 -> pymdi[version='>=1.2']; Package mkl conflicts for:; psi4==1.8 -> mkl[version='>=2022.2.1,<2023.0a0']; Package dkh conflicts for:; psi4==1.8 -> dkh[version='>=1.2,<1.3.0a0']; Package adcc conflicts for:; psi4==1.8 -> adcc[version='>=0.15.16']; Package networkx conflicts for:; psi4==1.8 -> networkx; Package numpy conflicts for:; psi4==1.8 -> numpy; Package libblas conflicts for:; psi4==1.8 -> libblas=[build=*mkl]; Package pybind11-abi conflicts for:; psi4==1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972
https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972:550,Safety,abort,abort,550,"I cannot install psi4 v1.8 from conda. I get the following error. I'm on Ubuntu 22.04. Is this a known issue? Workarounds?. ```sh; ❯ conda create --name psi4-2 --channel conda-forge 'psi4==1.8' 35s  base; Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: | ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Package qcengine conflicts for:; psi4==1.8 -> qcengine[version='>=0.26.0,<0.27.0a0']; Package libint conflicts for:; psi4==1.8 -> libint=2.7.3dev1; Package _openmp_mutex conflicts for:; psi4==1.8 -> _openmp_mutex[version='*,>=4.5',build=*_llvm]; Package python_abi conflicts for:; psi4==1.8 -> python_abi[version='3.10.*|3.11.*|3.8.*|3.9.*',build='*_cp311|*_cp310|*_cp38|*_cp39']; Package libxc-c conflicts for:; psi4==1.8 -> libxc-c[version='>=6.1.0,<7.0a0',build=cpu_*]; Package qcelemental conflicts for:; psi4==1.8 -> qcelemental[version='>=0.25.1,<0.26.0a0']; Package python conflicts for:; psi4==1.8 -> python[version='>=3.10,<3.11.0a0|>=3.11,<3.12.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; Package pytest conflicts for:; psi4==1.8 -> pytest[version='>=7.0.1']; Package pyddx conflicts for:; psi4==1.8 -> pyddx[version='>=0.4.1']; Package pymdi conflicts for:; psi4==1.8 -> pymdi[version='>=1.2']; Package mkl conflicts for:; psi4==1.8 -> mkl[version='>=2022.2.1,<2023.0a0']; Package dkh conflicts for:; psi4==1.8 -> dkh[version='>=1.2,<1.3.0a0']; Package adcc conflicts for:; psi4==1.8 -> adcc[version='>=0.15.16']; Package networkx conflicts for:; psi4==1.8 -> networkx; Package numpy conflicts for:; psi4==1.8 -> numpy; Package libblas conflicts for:; psi4==1.8 -> libblas=[build=*mkl]; Package pybind11-abi conflicts for:; psi4==1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1697915972
https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880:2309,Availability,error,errors,2309,"7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/__init__.py"", line 90, in <module>; from .driver import endorsed_plugins; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/driver/__init__.py"", line 42, in <module>; from qcelemental import constants; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/__init__.py"", line 6, in <module>; from . import covalent_radii, models, molparse, molutil, periodic_table, physical_constants, util, vanderwaals_radii; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/__init__.py"", line 10, in <module>; from .align import AlignmentMill; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/align.py"", line 6, in <module>; from ..util import blockwise_contract, blockwise_expand; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/__init__.py"", line 1, in <module>; from .autodocs import auto_gen_docs_on_demand, get_base_docs; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/autodocs.py"", line 6, in <module>; from pydantic import BaseModel, BaseSettings; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/__init__.py"", line 210, in __getattr__; return _getattr_migration(attr_name); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/_migration.py"", line 289, in wrapper; raise PydanticImportError(; pydantic.errors.PydanticImportError: `BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/2.3/migration/#basesettings-has-moved-to-pydantic-settings for more details. For further information visit https://errors.pydantic.dev/2.3/u/import-error; ~ ❯ ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880
https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880:2548,Availability,error,errors,2548,"7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/__init__.py"", line 90, in <module>; from .driver import endorsed_plugins; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/driver/__init__.py"", line 42, in <module>; from qcelemental import constants; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/__init__.py"", line 6, in <module>; from . import covalent_radii, models, molparse, molutil, periodic_table, physical_constants, util, vanderwaals_radii; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/__init__.py"", line 10, in <module>; from .align import AlignmentMill; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/align.py"", line 6, in <module>; from ..util import blockwise_contract, blockwise_expand; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/__init__.py"", line 1, in <module>; from .autodocs import auto_gen_docs_on_demand, get_base_docs; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/autodocs.py"", line 6, in <module>; from pydantic import BaseModel, BaseSettings; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/__init__.py"", line 210, in __getattr__; return _getattr_migration(attr_name); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/_migration.py"", line 289, in wrapper; raise PydanticImportError(; pydantic.errors.PydanticImportError: `BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/2.3/migration/#basesettings-has-moved-to-pydantic-settings for more details. For further information visit https://errors.pydantic.dev/2.3/u/import-error; ~ ❯ ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880
https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880:2581,Availability,error,error,2581,"7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/__init__.py"", line 90, in <module>; from .driver import endorsed_plugins; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/driver/__init__.py"", line 42, in <module>; from qcelemental import constants; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/__init__.py"", line 6, in <module>; from . import covalent_radii, models, molparse, molutil, periodic_table, physical_constants, util, vanderwaals_radii; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/__init__.py"", line 10, in <module>; from .align import AlignmentMill; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/align.py"", line 6, in <module>; from ..util import blockwise_contract, blockwise_expand; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/__init__.py"", line 1, in <module>; from .autodocs import auto_gen_docs_on_demand, get_base_docs; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/autodocs.py"", line 6, in <module>; from pydantic import BaseModel, BaseSettings; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/__init__.py"", line 210, in __getattr__; return _getattr_migration(attr_name); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/_migration.py"", line 289, in wrapper; raise PydanticImportError(; pydantic.errors.PydanticImportError: `BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/2.3/migration/#basesettings-has-moved-to-pydantic-settings for more details. For further information visit https://errors.pydantic.dev/2.3/u/import-error; ~ ❯ ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880
https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880:78,Deployability,install,install,78,"Thanks so much for the quick response, @philipmnel! This does indeed make the install work; however, `psi4` does not work, appearantly due to issues with pydantic v1 vs v2. Is there a fix for this? Does psi4 v1.8 support pydantic v2?. ```sh; ~ ❯ conda activate psi4-2  base; ~ ❯ psi4 --version  psi4-2; Valid config keys have changed in V2:; * 'allow_mutation' has been removed; Traceback (most recent call last):; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; ^^^^^^^^^^^; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/__init__.py"", line 90, in <module>; from .driver import endorsed_plugins; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/driver/__init__.py"", line 42, in <module>; from qcelemental import constants; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/__init__.py"", line 6, in <module>; from . import covalent_radii, models, molparse, molutil, periodic_table, physical_constants, util, vanderwaals_radii; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/__init__.py"", line 10, in <module>; from .align import AlignmentMill; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/align.py"", line 6, in <module>; from ..util import blockwise_contract, blockwise_expand; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/__init__.py"", line 1, in <module>; from .autodocs import auto_gen_docs_on_demand, get_base_docs; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/autodocs.py"", line 6, in <module>; from pydantic import BaseModel, BaseSettings; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880
https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880:2263,Integrability,wrap,wrapper,2263,"7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/__init__.py"", line 90, in <module>; from .driver import endorsed_plugins; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/driver/__init__.py"", line 42, in <module>; from qcelemental import constants; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/__init__.py"", line 6, in <module>; from . import covalent_radii, models, molparse, molutil, periodic_table, physical_constants, util, vanderwaals_radii; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/__init__.py"", line 10, in <module>; from .align import AlignmentMill; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/align.py"", line 6, in <module>; from ..util import blockwise_contract, blockwise_expand; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/__init__.py"", line 1, in <module>; from .autodocs import auto_gen_docs_on_demand, get_base_docs; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/autodocs.py"", line 6, in <module>; from pydantic import BaseModel, BaseSettings; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/__init__.py"", line 210, in __getattr__; return _getattr_migration(attr_name); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/_migration.py"", line 289, in wrapper; raise PydanticImportError(; pydantic.errors.PydanticImportError: `BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/2.3/migration/#basesettings-has-moved-to-pydantic-settings for more details. For further information visit https://errors.pydantic.dev/2.3/u/import-error; ~ ❯ ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880
https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880:311,Modifiability,config,config,311,"Thanks so much for the quick response, @philipmnel! This does indeed make the install work; however, `psi4` does not work, appearantly due to issues with pydantic v1 vs v2. Is there a fix for this? Does psi4 v1.8 support pydantic v2?. ```sh; ~ ❯ conda activate psi4-2  base; ~ ❯ psi4 --version  psi4-2; Valid config keys have changed in V2:; * 'allow_mutation' has been removed; Traceback (most recent call last):; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; ^^^^^^^^^^^; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/__init__.py"", line 90, in <module>; from .driver import endorsed_plugins; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/driver/__init__.py"", line 42, in <module>; from qcelemental import constants; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/__init__.py"", line 6, in <module>; from . import covalent_radii, models, molparse, molutil, periodic_table, physical_constants, util, vanderwaals_radii; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/__init__.py"", line 10, in <module>; from .align import AlignmentMill; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/align.py"", line 6, in <module>; from ..util import blockwise_contract, blockwise_expand; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/__init__.py"", line 1, in <module>; from .autodocs import auto_gen_docs_on_demand, get_base_docs; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/autodocs.py"", line 6, in <module>; from pydantic import BaseModel, BaseSettings; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880
https://github.com/psi4/psi4/issues/2991#issuecomment-1698257545:14,Deployability,patch,patch,14,I believe the patch for pydantic v2 support should be in the psi4 1.8.1 build. Try `psi4==1.8.1` in your conda install.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698257545
https://github.com/psi4/psi4/issues/2991#issuecomment-1698257545:111,Deployability,install,install,111,I believe the patch for pydantic v2 support should be in the psi4 1.8.1 build. Try `psi4==1.8.1` in your conda install.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698257545
https://github.com/psi4/psi4/issues/2991#issuecomment-1698293203:44,Availability,toler,tolerant,44,"In particular, 1.8.1 `_2` is pydantic v1/v2 tolerant . likewise qcel v0.26 and qcng v0.27 and v0.28 . qcf next is pinned to pydantic v1, iirc. There's a possibility that 1.8.2 will be pydantic v2 API if we can make a plan to do the whole qca stack at once. If that sounds appealing or alarming to anyone, please chime in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698293203
https://github.com/psi4/psi4/issues/2991#issuecomment-1699379644:172,Availability,down,download,172,"If, upon `conda list psi4` the hash-like build string ends in `_2`, then all's well. [linux-64/psi4-1.8.1-py39hd162a35_2.conda](https://anaconda.org/conda-forge/psi4/1.8.1/download/linux-64/psi4-1.8.1-py39hd162a35_2.conda) is one such. That's probably what you got since the solver tries hard to pick the most recent build and only won't if other constraints get in the way. If you wanted to specify it directly, it'd be `conda create ... 'psi4=1.8.1=*_2'` to specify the version exactly and the build ending in `_2`. I should have been clearer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1699379644
https://github.com/psi4/psi4/issues/2991#issuecomment-1699379644:31,Security,hash,hash-like,31,"If, upon `conda list psi4` the hash-like build string ends in `_2`, then all's well. [linux-64/psi4-1.8.1-py39hd162a35_2.conda](https://anaconda.org/conda-forge/psi4/1.8.1/download/linux-64/psi4-1.8.1-py39hd162a35_2.conda) is one such. That's probably what you got since the solver tries hard to pick the most recent build and only won't if other constraints get in the way. If you wanted to specify it directly, it'd be `conda create ... 'psi4=1.8.1=*_2'` to specify the version exactly and the build ending in `_2`. I should have been clearer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1699379644
https://github.com/psi4/psi4/issues/2991#issuecomment-1699379644:537,Usability,clear,clearer,537,"If, upon `conda list psi4` the hash-like build string ends in `_2`, then all's well. [linux-64/psi4-1.8.1-py39hd162a35_2.conda](https://anaconda.org/conda-forge/psi4/1.8.1/download/linux-64/psi4-1.8.1-py39hd162a35_2.conda) is one such. That's probably what you got since the solver tries hard to pick the most recent build and only won't if other constraints get in the way. If you wanted to specify it directly, it'd be `conda create ... 'psi4=1.8.1=*_2'` to specify the version exactly and the build ending in `_2`. I should have been clearer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1699379644
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:22,Availability,error,error,22,"I'm getting one other error when I try to use `psi4==1.8.1` alongside some other packages. Any idea what this is about?. ```sh. raised unexpected: TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:158,Availability,Error,Error,158,"I'm getting one other error when I try to use `psi4==1.8.1` alongside some other packages. Any idea what this is about?. ```sh. raised unexpected: TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1766,Availability,Error,Error,1766,"cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears to be coming from using a `psi4` channel for installation. Some of my old `env.yaml` files used a `psi4` channel. The `psi4` installation from that channel appears broken. If you install from `conda-forge` it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1843,Availability,Error,Error,1843,"cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears to be coming from using a `psi4` channel for installation. Some of my old `env.yaml` files used a `psi4` channel. The `psi4` installation from that channel appears broken. If you install from `conda-forge` it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:2326,Deployability,install,installation,2326,"cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears to be coming from using a `psi4` channel for installation. Some of my old `env.yaml` files used a `psi4` channel. The `psi4` installation from that channel appears broken. If you install from `conda-forge` it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:2406,Deployability,install,installation,2406,"cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears to be coming from using a `psi4` channel for installation. Some of my old `env.yaml` files used a `psi4` channel. The `psi4` installation from that channel appears broken. If you install from `conda-forge` it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:2460,Deployability,install,install,2460,"cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears to be coming from using a `psi4` channel for installation. Some of my old `env.yaml` files used a `psi4` channel. The `psi4` installation from that channel appears broken. If you install from `conda-forge` it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1081,Energy Efficiency,adapt,adapter,1081,"e some other packages. Any idea what this is about?. ```sh. raised unexpected: TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1150,Energy Efficiency,adapt,adapters,1150," TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1283,Energy Efficiency,adapt,adapters,1283,"3, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1081,Integrability,adapter,adapter,1081,"e some other packages. Any idea what this is about?. ```sh. raised unexpected: TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1150,Integrability,adapter,adapters,1150," TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1283,Integrability,adapter,adapters,1283,"3, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1081,Modifiability,adapt,adapter,1081,"e some other packages. Any idea what this is about?. ```sh. raised unexpected: TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1150,Modifiability,adapt,adapters,1150," TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1283,Modifiability,adapt,adapters,1283,"3, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1497,Modifiability,config,config,1497,"cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears to be coming from using a `psi4` channel for installation. Some of my old `env.yaml` files used a `psi4` channel. The `psi4` installation from that channel appears broken. If you install from `conda-forge` it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124
https://github.com/psi4/psi4/pull/2997#issuecomment-1618728269:13,Deployability,update,update,13,"I'm going to update the branch and then add to merge queue, so heads-up that local != remote.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2997#issuecomment-1618728269
https://github.com/psi4/psi4/pull/2997#issuecomment-1618728269:53,Performance,queue,queue,53,"I'm going to update the branch and then add to merge queue, so heads-up that local != remote.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/2997#issuecomment-1618728269
https://github.com/psi4/psi4/issues/2998#issuecomment-1619297631:44,Deployability,configurat,configuration,44,"It'd be helpful to see the output from your configuration step. That is, the `cmake -S. -Bobjdir` result. Are you seeking to use other than MKL?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1619297631
https://github.com/psi4/psi4/issues/2998#issuecomment-1619297631:44,Modifiability,config,configuration,44,"It'd be helpful to see the output from your configuration step. That is, the `cmake -S. -Bobjdir` result. Are you seeking to use other than MKL?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1619297631
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:46,Deployability,configurat,configuration,46,"> It'd be helpful to see the output from your configuration step. That is, the `cmake -S. -Bobjdir` result. Are you seeking to use other than MKL?. I am using MKL and eigen build from source code.; here is the cmd line for cmake . `cmake .. -DCMAKE_INSTALL_PREFIX=./install -DEigen3_DIR=/home/yuyeqing/software/eigen3`. and I also export MKL and eigen in bashrc by . ```; export MATH_ROOT=""/home/yuyeqing/intel/oneapi/mkl/latest""; export LD_LIBRARY_PATH=""/home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:266,Deployability,install,install,266,"> It'd be helpful to see the output from your configuration step. That is, the `cmake -S. -Bobjdir` result. Are you seeking to use other than MKL?. I am using MKL and eigen build from source code.; here is the cmd line for cmake . `cmake .. -DCMAKE_INSTALL_PREFIX=./install -DEigen3_DIR=/home/yuyeqing/software/eigen3`. and I also export MKL and eigen in bashrc by . ```; export MATH_ROOT=""/home/yuyeqing/intel/oneapi/mkl/latest""; export LD_LIBRARY_PATH=""/home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:771,Deployability,Release,Release,771,"eqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:2204,Deployability,install,install,2204,"eqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:2237,Deployability,install,install,2237,"eqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:4807,Deployability,install,install,4807,": CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_c2_d2_l4;eri_c3_d0_l2;eri_c3_d0_l3;eri_c3_d0_l4;eri_c3_d0_l5;eri_c3_d0_l6;eri_c3_d1_l2;eri_c3_d1_l3;eri_c3_d1_l4;eri_c3_d1_l5;eri_c3_d2_l2;eri_c3_d2_l3;eri_c3_d2_l4;eri_c4_d0_l2;eri_c4_d0_l3;eri_c4_d0_l4;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d1_l3;eri_c4_d1_l4;eri_c4_d2_l2;eri_c4_d2_l3;g12_d0_l2;g12_d0_l3;g12_d0_l4;g12_d1_l2;g12_d1_l3;g12_d1_l4;impure_sh;onebody_d0_l2;onebody_d0_l3;onebody_d0_l4;onebody_d0_l5;onebody_d0_l6;onebody_d1_l2;onebody_d1_l3;onebody_d1_l4;onebody_d1_l5;onebody_d2_l2;onebody_d2_l3;onebody_d2_l4;shared;sss; -- Found Libint2 5: /mnt/f/psi4/build_linux/stage/lib/libint2.so.2 (found version 2.7.2); -- Suitable qcelemental could not be located, Building qcelemental instead.; -- Suitable qcengine could not be located, Building qcengine instead.; -- Suitable optking could not be located, Building optking instead.; -- Found Libxc: /mnt/f/psi4/build_linux/stage/lib/libxc.a (found version 6.1.0); -- Suitable BrianQC could not be located, please contact info@brianqc.com to obtain BrianQC; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No LaTeX (incl. pdflatex), no PDF docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi sphinx-autodoc-typehints graphviz python-graphviz autodoc-pydantic -c conda-forge -c psi4); -- Adding test cases: Psi4; -- Configuring done (71.4s); -- Generating done (129.1s); -- Build files have been written to: /mnt/f/psi4/build_linux; ```. is there anything missing?. THANKS!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:46,Modifiability,config,configuration,46,"> It'd be helpful to see the output from your configuration step. That is, the `cmake -S. -Bobjdir` result. Are you seeking to use other than MKL?. I am using MKL and eigen build from source code.; here is the cmd line for cmake . `cmake .. -DCMAKE_INSTALL_PREFIX=./install -DEigen3_DIR=/home/yuyeqing/software/eigen3`. and I also export MKL and eigen in bashrc by . ```; export MATH_ROOT=""/home/yuyeqing/intel/oneapi/mkl/latest""; export LD_LIBRARY_PATH=""/home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:4987,Modifiability,Config,Configuring,4987,": CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_c2_d2_l4;eri_c3_d0_l2;eri_c3_d0_l3;eri_c3_d0_l4;eri_c3_d0_l5;eri_c3_d0_l6;eri_c3_d1_l2;eri_c3_d1_l3;eri_c3_d1_l4;eri_c3_d1_l5;eri_c3_d2_l2;eri_c3_d2_l3;eri_c3_d2_l4;eri_c4_d0_l2;eri_c4_d0_l3;eri_c4_d0_l4;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d1_l3;eri_c4_d1_l4;eri_c4_d2_l2;eri_c4_d2_l3;g12_d0_l2;g12_d0_l3;g12_d0_l4;g12_d1_l2;g12_d1_l3;g12_d1_l4;impure_sh;onebody_d0_l2;onebody_d0_l3;onebody_d0_l4;onebody_d0_l5;onebody_d0_l6;onebody_d1_l2;onebody_d1_l3;onebody_d1_l4;onebody_d1_l5;onebody_d2_l2;onebody_d2_l3;onebody_d2_l4;shared;sss; -- Found Libint2 5: /mnt/f/psi4/build_linux/stage/lib/libint2.so.2 (found version 2.7.2); -- Suitable qcelemental could not be located, Building qcelemental instead.; -- Suitable qcengine could not be located, Building qcengine instead.; -- Suitable optking could not be located, Building optking instead.; -- Found Libxc: /mnt/f/psi4/build_linux/stage/lib/libxc.a (found version 6.1.0); -- Suitable BrianQC could not be located, please contact info@brianqc.com to obtain BrianQC; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No LaTeX (incl. pdflatex), no PDF docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi sphinx-autodoc-typehints graphviz python-graphviz autodoc-pydantic -c conda-forge -c psi4); -- Adding test cases: Psi4; -- Configuring done (71.4s); -- Generating done (129.1s); -- Build files have been written to: /mnt/f/psi4/build_linux; ```. is there anything missing?. THANKS!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:819,Performance,Perform,Performing,819,"eqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:890,Performance,Perform,Performing,890,"eqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:2699,Performance,Perform,Performing,2699,": share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- consider adding full directory path to OpenMP_LIBRARY_DIRS; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found LAPACK MKL: /home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64/libmkl_rt.so;...; -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /mnt/f/psi4/build_linux/stage/include (found version 2.10.3); -- Found gau2grid: /mnt/f/psi4/build_linux/stage/lib/libgg.a (found version 2.0.7); -- Found Eigen3: /home/yuyeqing/software/eigen3/include/eigen3 (Required is at least version ""3.0.0""); -- Boost detected. satisfied by headers bundled with Libint2 distribution; -- Libint2Config components requested: CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_c2_d2_l4;eri_c3_d0_l2;eri_c3_d0_l3;eri_c3_d0_l4;eri_c3_d0_l5;eri_c3_d0_l6;eri_c3_d1_l2;eri_c3_d1_l3;eri_c3_d1_l4;eri_c3_d1_l5;eri_c3_d2_l2;eri_c3_d2_l3;eri_c3_d2_l4;eri_c4_d0_l2;eri_c4_d0_l3;eri_c4_d0_l4;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d1_l3;eri_c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:2728,Performance,Perform,Performing,2728,": share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- consider adding full directory path to OpenMP_LIBRARY_DIRS; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found LAPACK MKL: /home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64/libmkl_rt.so;...; -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /mnt/f/psi4/build_linux/stage/include (found version 2.10.3); -- Found gau2grid: /mnt/f/psi4/build_linux/stage/lib/libgg.a (found version 2.0.7); -- Found Eigen3: /home/yuyeqing/software/eigen3/include/eigen3 (Required is at least version ""3.0.0""); -- Boost detected. satisfied by headers bundled with Libint2 distribution; -- Libint2Config components requested: CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_c2_d2_l4;eri_c3_d0_l2;eri_c3_d0_l3;eri_c3_d0_l4;eri_c3_d0_l5;eri_c3_d0_l6;eri_c3_d1_l2;eri_c3_d1_l3;eri_c3_d1_l4;eri_c3_d1_l5;eri_c3_d2_l2;eri_c3_d2_l3;eri_c3_d2_l4;eri_c4_d0_l2;eri_c4_d0_l3;eri_c4_d0_l4;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d1_l3;eri_c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:2525,Safety,Detect,Detecting,2525,"CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- consider adding full directory path to OpenMP_LIBRARY_DIRS; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found LAPACK MKL: /home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64/libmkl_rt.so;...; -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /mnt/f/psi4/build_linux/stage/include (found version 2.10.3); -- Found gau2grid: /mnt/f/psi4/build_linux/stage/lib/libgg.a (found version 2.0.7); -- Found Eigen3: /home/yuyeqing/software/eigen3/include/eigen3 (Required is at least version ""3.0.0""); -- Boost detected. satisfied by headers bundled with Libint2 distribution; -- Libint2Config components requested: CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:3041,Safety,detect,detected,3041,"sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- consider adding full directory path to OpenMP_LIBRARY_DIRS; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found LAPACK MKL: /home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64/libmkl_rt.so;...; -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /mnt/f/psi4/build_linux/stage/include (found version 2.10.3); -- Found gau2grid: /mnt/f/psi4/build_linux/stage/lib/libgg.a (found version 2.0.7); -- Found Eigen3: /home/yuyeqing/software/eigen3/include/eigen3 (Required is at least version ""3.0.0""); -- Boost detected. satisfied by headers bundled with Libint2 distribution; -- Libint2Config components requested: CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_c2_d2_l4;eri_c3_d0_l2;eri_c3_d0_l3;eri_c3_d0_l4;eri_c3_d0_l5;eri_c3_d0_l6;eri_c3_d1_l2;eri_c3_d1_l3;eri_c3_d1_l4;eri_c3_d1_l5;eri_c3_d2_l2;eri_c3_d2_l3;eri_c3_d2_l4;eri_c4_d0_l2;eri_c4_d0_l3;eri_c4_d0_l4;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d1_l3;eri_c4_d1_l4;eri_c4_d2_l2;eri_c4_d2_l3;g12_d0_l2;g12_d0_l3;g12_d0_l4;g12_d1_l2;g12_d1_l3;g12_d1_l4;impure_sh;onebody_d0_l2;onebody_d0_l3;onebody_d0_l4;onebody_d0_l5;onebody_d0_l6;onebody_d1_l2;onebody_d1_l3;onebody_d1_l4;onebody_d1_l5;onebody_d2_l2;onebody_d2_l3;onebody_d2_l4;s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:615,Testability,log,log,615,"> It'd be helpful to see the output from your configuration step. That is, the `cmake -S. -Bobjdir` result. Are you seeking to use other than MKL?. I am using MKL and eigen build from source code.; here is the cmd line for cmake . `cmake .. -DCMAKE_INSTALL_PREFIX=./install -DEigen3_DIR=/home/yuyeqing/software/eigen3`. and I also export MKL and eigen in bashrc by . ```; export MATH_ROOT=""/home/yuyeqing/intel/oneapi/mkl/latest""; export LD_LIBRARY_PATH=""/home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:830,Testability,Test,Test,830,"eqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:901,Testability,Test,Test,901,"eqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- con",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:2710,Testability,Test,Test,2710,": share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- consider adding full directory path to OpenMP_LIBRARY_DIRS; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found LAPACK MKL: /home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64/libmkl_rt.so;...; -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /mnt/f/psi4/build_linux/stage/include (found version 2.10.3); -- Found gau2grid: /mnt/f/psi4/build_linux/stage/lib/libgg.a (found version 2.0.7); -- Found Eigen3: /home/yuyeqing/software/eigen3/include/eigen3 (Required is at least version ""3.0.0""); -- Boost detected. satisfied by headers bundled with Libint2 distribution; -- Libint2Config components requested: CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_c2_d2_l4;eri_c3_d0_l2;eri_c3_d0_l3;eri_c3_d0_l4;eri_c3_d0_l5;eri_c3_d0_l6;eri_c3_d1_l2;eri_c3_d1_l3;eri_c3_d1_l4;eri_c3_d1_l5;eri_c3_d2_l2;eri_c3_d2_l3;eri_c3_d2_l4;eri_c4_d0_l2;eri_c4_d0_l3;eri_c4_d0_l4;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d1_l3;eri_c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:2739,Testability,Test,Test,2739,": share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: avx; -- Setting option SPHINX_THEME: sphinx_psi_theme; -- Setting option SPHINXMAN_STRICT: OFF; -- Setting option BUILD_Libint2_GENERATOR: OFF; -- Setting option psi4_SHGAUSS_ORDERING: gaussian; -- Psi4 install: /mnt/f/psi4/build_linux/install; -- Found Python 3.10: /home/yuyeqing/software/miniconda3/envs/psi/bin/python3.10 (found version 3.10.11); -- Psi4 staging: /mnt/f/psi4/build_linux/stage; -- CMAKE_CXX_FLAGS: -march=native; -- Could NOT find iomp5 -- consider adding full directory path to OpenMP_LIBRARY_DIRS; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found LAPACK MKL: /home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64/libmkl_rt.so;...; -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /mnt/f/psi4/build_linux/stage/include (found version 2.10.3); -- Found gau2grid: /mnt/f/psi4/build_linux/stage/lib/libgg.a (found version 2.0.7); -- Found Eigen3: /home/yuyeqing/software/eigen3/include/eigen3 (Required is at least version ""3.0.0""); -- Boost detected. satisfied by headers bundled with Libint2 distribution; -- Libint2Config components requested: CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_c2_d2_l4;eri_c3_d0_l2;eri_c3_d0_l3;eri_c3_d0_l4;eri_c3_d0_l5;eri_c3_d0_l6;eri_c3_d1_l2;eri_c3_d1_l3;eri_c3_d1_l4;eri_c3_d1_l5;eri_c3_d2_l2;eri_c3_d2_l3;eri_c3_d2_l4;eri_c4_d0_l2;eri_c4_d0_l3;eri_c4_d0_l4;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d1_l3;eri_c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:4966,Testability,test,test,4966,": CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_c2_d2_l4;eri_c3_d0_l2;eri_c3_d0_l3;eri_c3_d0_l4;eri_c3_d0_l5;eri_c3_d0_l6;eri_c3_d1_l2;eri_c3_d1_l3;eri_c3_d1_l4;eri_c3_d1_l5;eri_c3_d2_l2;eri_c3_d2_l3;eri_c3_d2_l4;eri_c4_d0_l2;eri_c4_d0_l3;eri_c4_d0_l4;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d1_l3;eri_c4_d1_l4;eri_c4_d2_l2;eri_c4_d2_l3;g12_d0_l2;g12_d0_l3;g12_d0_l4;g12_d1_l2;g12_d1_l3;g12_d1_l4;impure_sh;onebody_d0_l2;onebody_d0_l3;onebody_d0_l4;onebody_d0_l5;onebody_d0_l6;onebody_d1_l2;onebody_d1_l3;onebody_d1_l4;onebody_d1_l5;onebody_d2_l2;onebody_d2_l3;onebody_d2_l4;shared;sss; -- Found Libint2 5: /mnt/f/psi4/build_linux/stage/lib/libint2.so.2 (found version 2.7.2); -- Suitable qcelemental could not be located, Building qcelemental instead.; -- Suitable qcengine could not be located, Building qcengine instead.; -- Suitable optking could not be located, Building optking instead.; -- Found Libxc: /mnt/f/psi4/build_linux/stage/lib/libxc.a (found version 6.1.0); -- Suitable BrianQC could not be located, please contact info@brianqc.com to obtain BrianQC; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No LaTeX (incl. pdflatex), no PDF docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi sphinx-autodoc-typehints graphviz python-graphviz autodoc-pydantic -c conda-forge -c psi4); -- Adding test cases: Psi4; -- Configuring done (71.4s); -- Generating done (129.1s); -- Build files have been written to: /mnt/f/psi4/build_linux; ```. is there anything missing?. THANKS!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119
https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430:315,Availability,avail,available,315,"It's missing finding the `libiomp5.so`. In a oneapi installation, it's in a different directory than `libmkl_rt.so`, so you source the whole oneapi install or add more to ld_library_path. Alternately, all this can be got from conda. If you have the `mkl-devel` and `mkl` packages installed, the iomp5 lib should be available. Second alternately, you can specify the location of the dir containing iomp5 by `-D OpenMP_LIBRARY_DIRS=""/path/to/dir/containing/iomp5_lib`. There's some additional notes in #2965 in case helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430
https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430:52,Deployability,install,installation,52,"It's missing finding the `libiomp5.so`. In a oneapi installation, it's in a different directory than `libmkl_rt.so`, so you source the whole oneapi install or add more to ld_library_path. Alternately, all this can be got from conda. If you have the `mkl-devel` and `mkl` packages installed, the iomp5 lib should be available. Second alternately, you can specify the location of the dir containing iomp5 by `-D OpenMP_LIBRARY_DIRS=""/path/to/dir/containing/iomp5_lib`. There's some additional notes in #2965 in case helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430
https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430:148,Deployability,install,install,148,"It's missing finding the `libiomp5.so`. In a oneapi installation, it's in a different directory than `libmkl_rt.so`, so you source the whole oneapi install or add more to ld_library_path. Alternately, all this can be got from conda. If you have the `mkl-devel` and `mkl` packages installed, the iomp5 lib should be available. Second alternately, you can specify the location of the dir containing iomp5 by `-D OpenMP_LIBRARY_DIRS=""/path/to/dir/containing/iomp5_lib`. There's some additional notes in #2965 in case helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430
https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430:280,Deployability,install,installed,280,"It's missing finding the `libiomp5.so`. In a oneapi installation, it's in a different directory than `libmkl_rt.so`, so you source the whole oneapi install or add more to ld_library_path. Alternately, all this can be got from conda. If you have the `mkl-devel` and `mkl` packages installed, the iomp5 lib should be available. Second alternately, you can specify the location of the dir containing iomp5 by `-D OpenMP_LIBRARY_DIRS=""/path/to/dir/containing/iomp5_lib`. There's some additional notes in #2965 in case helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620754430
https://github.com/psi4/psi4/issues/2998#issuecomment-1622809815:317,Availability,avail,available,317,"> It's missing finding the `libiomp5.so`. In a oneapi installation, it's in a different directory than `libmkl_rt.so`, so you source the whole oneapi install or add more to ld_library_path. Alternately, all this can be got from conda. If you have the `mkl-devel` and `mkl` packages installed, the iomp5 lib should be available. Second alternately, you can specify the location of the dir containing iomp5 by `-D OpenMP_LIBRARY_DIRS=""/path/to/dir/containing/iomp5_lib`.; > ; > There's some additional notes in #2965 in case helpful. Very appreciate! It works!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1622809815
https://github.com/psi4/psi4/issues/2998#issuecomment-1622809815:54,Deployability,install,installation,54,"> It's missing finding the `libiomp5.so`. In a oneapi installation, it's in a different directory than `libmkl_rt.so`, so you source the whole oneapi install or add more to ld_library_path. Alternately, all this can be got from conda. If you have the `mkl-devel` and `mkl` packages installed, the iomp5 lib should be available. Second alternately, you can specify the location of the dir containing iomp5 by `-D OpenMP_LIBRARY_DIRS=""/path/to/dir/containing/iomp5_lib`.; > ; > There's some additional notes in #2965 in case helpful. Very appreciate! It works!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1622809815
https://github.com/psi4/psi4/issues/2998#issuecomment-1622809815:150,Deployability,install,install,150,"> It's missing finding the `libiomp5.so`. In a oneapi installation, it's in a different directory than `libmkl_rt.so`, so you source the whole oneapi install or add more to ld_library_path. Alternately, all this can be got from conda. If you have the `mkl-devel` and `mkl` packages installed, the iomp5 lib should be available. Second alternately, you can specify the location of the dir containing iomp5 by `-D OpenMP_LIBRARY_DIRS=""/path/to/dir/containing/iomp5_lib`.; > ; > There's some additional notes in #2965 in case helpful. Very appreciate! It works!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1622809815
https://github.com/psi4/psi4/issues/2998#issuecomment-1622809815:282,Deployability,install,installed,282,"> It's missing finding the `libiomp5.so`. In a oneapi installation, it's in a different directory than `libmkl_rt.so`, so you source the whole oneapi install or add more to ld_library_path. Alternately, all this can be got from conda. If you have the `mkl-devel` and `mkl` packages installed, the iomp5 lib should be available. Second alternately, you can specify the location of the dir containing iomp5 by `-D OpenMP_LIBRARY_DIRS=""/path/to/dir/containing/iomp5_lib`.; > ; > There's some additional notes in #2965 in case helpful. Very appreciate! It works!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1622809815
https://github.com/psi4/psi4/issues/3000#issuecomment-1618885662:481,Energy Efficiency,energy,energy,481,"Thank you for posting this!. I was looking into this some, and something popped up that quite troubled me. When I make the following changes to your minimal reproducing script:. ```; (p4devcf) dpoole34@ds6:~/Documents/Codes/psi4-scftype-bugfix/samples (master)$ diff scftype_bug_example.py scftype_bug_example_edit2.py ; 16c16; < psi4.set_options(dict(basis='sto-3g', reference='RHF')) ; ---; > psi4.set_options(dict(basis='sto-3g', reference='RHF', save_jk=True)) ; 22c22; < psi4.energy(name='scf'); ---; > energy, wfn = psi4.energy(name='scf', return_wfn=True); 25a26; > scf_type2x5 = type(wfn.jk()); 39c40; < print(scf_type1, scf_type2, scf_type3); ---; > print(scf_type1, scf_type2, scf_type2x5, scf_type3); ```. The type of the JK object that is returned is a MemDFJK class, as seen in the following output: `PK PK <class 'psi4.core.MemDFJK'> DF` It seems that the initial call to `psi4.energy` actually uses `SCF_TYPE=DF`. This can be confirmed by commenting out the call to `psi4.core.be_quiet()` in your script and observing the resulting output of the first call:. ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12; ```. It's as if Psi4 is internally using an `SCF_TYPE` of `DF` for the initial calls, even though the returned `SCF_TYPE` from your calls to `get_global_options` is of `PK`. Possibly, the code not converging causes the internal and returned `SCF_TYPE` values to realign, causing the bug you see in your script. But I can't say for sure exactly the cause at the moment, and I am looking into it moreso. . If this is a bug that is actively causing problems within any production runs you are doing, one thing I noticed that resolves the issue is if you explicitly define `SCF_TYPE` in the `psi4.set_options` call:. ```; (p4devcf) dpoole34@ds6:~/Documents/Codes/psi4-scftype-bugfix/samples (master)$ diff s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3000#issuecomment-1618885662
https://github.com/psi4/psi4/issues/3000#issuecomment-1618885662:508,Energy Efficiency,energy,energy,508,"Thank you for posting this!. I was looking into this some, and something popped up that quite troubled me. When I make the following changes to your minimal reproducing script:. ```; (p4devcf) dpoole34@ds6:~/Documents/Codes/psi4-scftype-bugfix/samples (master)$ diff scftype_bug_example.py scftype_bug_example_edit2.py ; 16c16; < psi4.set_options(dict(basis='sto-3g', reference='RHF')) ; ---; > psi4.set_options(dict(basis='sto-3g', reference='RHF', save_jk=True)) ; 22c22; < psi4.energy(name='scf'); ---; > energy, wfn = psi4.energy(name='scf', return_wfn=True); 25a26; > scf_type2x5 = type(wfn.jk()); 39c40; < print(scf_type1, scf_type2, scf_type3); ---; > print(scf_type1, scf_type2, scf_type2x5, scf_type3); ```. The type of the JK object that is returned is a MemDFJK class, as seen in the following output: `PK PK <class 'psi4.core.MemDFJK'> DF` It seems that the initial call to `psi4.energy` actually uses `SCF_TYPE=DF`. This can be confirmed by commenting out the call to `psi4.core.be_quiet()` in your script and observing the resulting output of the first call:. ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12; ```. It's as if Psi4 is internally using an `SCF_TYPE` of `DF` for the initial calls, even though the returned `SCF_TYPE` from your calls to `get_global_options` is of `PK`. Possibly, the code not converging causes the internal and returned `SCF_TYPE` values to realign, causing the bug you see in your script. But I can't say for sure exactly the cause at the moment, and I am looking into it moreso. . If this is a bug that is actively causing problems within any production runs you are doing, one thing I noticed that resolves the issue is if you explicitly define `SCF_TYPE` in the `psi4.set_options` call:. ```; (p4devcf) dpoole34@ds6:~/Documents/Codes/psi4-scftype-bugfix/samples (master)$ diff s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3000#issuecomment-1618885662
https://github.com/psi4/psi4/issues/3000#issuecomment-1618885662:527,Energy Efficiency,energy,energy,527,"Thank you for posting this!. I was looking into this some, and something popped up that quite troubled me. When I make the following changes to your minimal reproducing script:. ```; (p4devcf) dpoole34@ds6:~/Documents/Codes/psi4-scftype-bugfix/samples (master)$ diff scftype_bug_example.py scftype_bug_example_edit2.py ; 16c16; < psi4.set_options(dict(basis='sto-3g', reference='RHF')) ; ---; > psi4.set_options(dict(basis='sto-3g', reference='RHF', save_jk=True)) ; 22c22; < psi4.energy(name='scf'); ---; > energy, wfn = psi4.energy(name='scf', return_wfn=True); 25a26; > scf_type2x5 = type(wfn.jk()); 39c40; < print(scf_type1, scf_type2, scf_type3); ---; > print(scf_type1, scf_type2, scf_type2x5, scf_type3); ```. The type of the JK object that is returned is a MemDFJK class, as seen in the following output: `PK PK <class 'psi4.core.MemDFJK'> DF` It seems that the initial call to `psi4.energy` actually uses `SCF_TYPE=DF`. This can be confirmed by commenting out the call to `psi4.core.be_quiet()` in your script and observing the resulting output of the first call:. ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12; ```. It's as if Psi4 is internally using an `SCF_TYPE` of `DF` for the initial calls, even though the returned `SCF_TYPE` from your calls to `get_global_options` is of `PK`. Possibly, the code not converging causes the internal and returned `SCF_TYPE` values to realign, causing the bug you see in your script. But I can't say for sure exactly the cause at the moment, and I am looking into it moreso. . If this is a bug that is actively causing problems within any production runs you are doing, one thing I noticed that resolves the issue is if you explicitly define `SCF_TYPE` in the `psi4.set_options` call:. ```; (p4devcf) dpoole34@ds6:~/Documents/Codes/psi4-scftype-bugfix/samples (master)$ diff s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3000#issuecomment-1618885662
https://github.com/psi4/psi4/issues/3000#issuecomment-1618885662:892,Energy Efficiency,energy,energy,892,"Thank you for posting this!. I was looking into this some, and something popped up that quite troubled me. When I make the following changes to your minimal reproducing script:. ```; (p4devcf) dpoole34@ds6:~/Documents/Codes/psi4-scftype-bugfix/samples (master)$ diff scftype_bug_example.py scftype_bug_example_edit2.py ; 16c16; < psi4.set_options(dict(basis='sto-3g', reference='RHF')) ; ---; > psi4.set_options(dict(basis='sto-3g', reference='RHF', save_jk=True)) ; 22c22; < psi4.energy(name='scf'); ---; > energy, wfn = psi4.energy(name='scf', return_wfn=True); 25a26; > scf_type2x5 = type(wfn.jk()); 39c40; < print(scf_type1, scf_type2, scf_type3); ---; > print(scf_type1, scf_type2, scf_type2x5, scf_type3); ```. The type of the JK object that is returned is a MemDFJK class, as seen in the following output: `PK PK <class 'psi4.core.MemDFJK'> DF` It seems that the initial call to `psi4.energy` actually uses `SCF_TYPE=DF`. This can be confirmed by commenting out the call to `psi4.core.be_quiet()` in your script and observing the resulting output of the first call:. ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12; ```. It's as if Psi4 is internally using an `SCF_TYPE` of `DF` for the initial calls, even though the returned `SCF_TYPE` from your calls to `get_global_options` is of `PK`. Possibly, the code not converging causes the internal and returned `SCF_TYPE` values to realign, causing the bug you see in your script. But I can't say for sure exactly the cause at the moment, and I am looking into it moreso. . If this is a bug that is actively causing problems within any production runs you are doing, one thing I noticed that resolves the issue is if you explicitly define `SCF_TYPE` in the `psi4.set_options` call:. ```; (p4devcf) dpoole34@ds6:~/Documents/Codes/psi4-scftype-bugfix/samples (master)$ diff s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3000#issuecomment-1618885662
https://github.com/psi4/psi4/issues/3000#issuecomment-1618885662:1208,Energy Efficiency,Energy,Energy,1208,"/Codes/psi4-scftype-bugfix/samples (master)$ diff scftype_bug_example.py scftype_bug_example_edit2.py ; 16c16; < psi4.set_options(dict(basis='sto-3g', reference='RHF')) ; ---; > psi4.set_options(dict(basis='sto-3g', reference='RHF', save_jk=True)) ; 22c22; < psi4.energy(name='scf'); ---; > energy, wfn = psi4.energy(name='scf', return_wfn=True); 25a26; > scf_type2x5 = type(wfn.jk()); 39c40; < print(scf_type1, scf_type2, scf_type3); ---; > print(scf_type1, scf_type2, scf_type2x5, scf_type3); ```. The type of the JK object that is returned is a MemDFJK class, as seen in the following output: `PK PK <class 'psi4.core.MemDFJK'> DF` It seems that the initial call to `psi4.energy` actually uses `SCF_TYPE=DF`. This can be confirmed by commenting out the call to `psi4.core.be_quiet()` in your script and observing the resulting output of the first call:. ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12; ```. It's as if Psi4 is internally using an `SCF_TYPE` of `DF` for the initial calls, even though the returned `SCF_TYPE` from your calls to `get_global_options` is of `PK`. Possibly, the code not converging causes the internal and returned `SCF_TYPE` values to realign, causing the bug you see in your script. But I can't say for sure exactly the cause at the moment, and I am looking into it moreso. . If this is a bug that is actively causing problems within any production runs you are doing, one thing I noticed that resolves the issue is if you explicitly define `SCF_TYPE` in the `psi4.set_options` call:. ```; (p4devcf) dpoole34@ds6:~/Documents/Codes/psi4-scftype-bugfix/samples (master)$ diff scftype_bug_example.py scftype_bug_example_edit2.py ; 16c16; < psi4.set_options(dict(basis='sto-3g', reference='RHF')) ; ---; > psi4.set_options(dict(basis='sto-3g', reference='RHF', scf_type='pk')) ; ```. which gives ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3000#issuecomment-1618885662
https://github.com/psi4/psi4/pull/3001#issuecomment-1618978873:185,Availability,error,errors,185,"> Since this is real trouble if a K-needing method doesn't get a K, maybe add a test of scf_type=dfdirj parametrized over BP86 and B3LYP that checks that the former runs and the latter errors informatively. Yeah, I can do that!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3001#issuecomment-1618978873
https://github.com/psi4/psi4/pull/3001#issuecomment-1618978873:80,Testability,test,test,80,"> Since this is real trouble if a K-needing method doesn't get a K, maybe add a test of scf_type=dfdirj parametrized over BP86 and B3LYP that checks that the former runs and the latter errors informatively. Yeah, I can do that!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3001#issuecomment-1618978873
https://github.com/psi4/psi4/pull/3001#issuecomment-1629413896:23,Testability,test,tests,23,"> thanks for the extra tests!. You're welcome! I think the new tests should be good to go now. > This is great! Another big advantage is that one can use the smaller J fitting basis sets (`def2-universal-JFIT`) as default like other QC programs and save memory (plus a small speed up). Don't want to feature creep this PR though :). Thank you! What you describe should already be doable in Psi4 v1.8. This PR just makes the specification of `SCF_TYPE` for such uses, cleaner and more sensible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3001#issuecomment-1629413896
https://github.com/psi4/psi4/pull/3001#issuecomment-1629413896:63,Testability,test,tests,63,"> thanks for the extra tests!. You're welcome! I think the new tests should be good to go now. > This is great! Another big advantage is that one can use the smaller J fitting basis sets (`def2-universal-JFIT`) as default like other QC programs and save memory (plus a small speed up). Don't want to feature creep this PR though :). Thank you! What you describe should already be doable in Psi4 v1.8. This PR just makes the specification of `SCF_TYPE` for such uses, cleaner and more sensible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3001#issuecomment-1629413896
https://github.com/psi4/psi4/issues/3006#issuecomment-1627820604:18,Testability,test,tests,18,I haven't run any tests but it looks like it succeeded this time. Thanks.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3006#issuecomment-1627820604
https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686:60,Deployability,install,installed,60,"I suspect it's a stray forte somewhere. However, I have not installed forte as part of this separate environment, I do have a failed compilation of it around so that could be the reason. The call appears to be coming from this function in psi4:; `PSI4.DRIVER.P4UTIL.PROCUTIL`. is this forte:. ```; def prepare_options_for_set_options() -> Dict[str, Any]:; """"""Collect current state of :py:class:`psi4.core.Options` information for; reloading by :py:func:`~psi4.driver.p4util.set_options`. Returns; -------; Dict[str, Any]; Dictionary where keys are keyword names, either plain for those to be; set globally or mangled ""module__keyword"" for those to be set locally,; and values are keyword values. """"""; flat_options = {}; has_changed_snapshot = {module: core.options_to_python(module) for module in _modules}. for opt in core.get_global_option_list():; handled_locally = False; ghoc = core.has_global_option_changed(opt); opt_snapshot = {k: v[opt] for k, v in has_changed_snapshot.items() if opt in v}; for module, (lhoc, ohoc) in opt_snapshot.items():; if ohoc:; if lhoc:; key = module + '__' + opt; val = core.get_local_option(module, opt); else:; key = opt; val = core.get_global_option(opt); handled_locally = True; flat_options[key] = val. if ghoc and not handled_locally:; # some options are globals section (not level) so not in any module; flat_options[opt] = core.get_global_option(opt). # The normal machinery to forward plugin options to Psi goes through 'plugin_load'.; # Forte doesn't use this. Pending a larger options rewrite (move to a Python dictionary?),; # we need the following dirty hack. try:; import forte # Needed for Forte options to run.; except ImportError:; pass; else:; # Initialization tasks with Psi options; psi_options = core.get_options(); current_module = psi_options.get_current_module(); # Get the current Forte options from Forte; forte_options = forte.ForteOptions(); forte.register_forte_options(forte_options); psi_options.set_current_module(""FORTE""); try:; fort",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686
https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686:1429,Modifiability,plugin,plugin,1429,"ding by :py:func:`~psi4.driver.p4util.set_options`. Returns; -------; Dict[str, Any]; Dictionary where keys are keyword names, either plain for those to be; set globally or mangled ""module__keyword"" for those to be set locally,; and values are keyword values. """"""; flat_options = {}; has_changed_snapshot = {module: core.options_to_python(module) for module in _modules}. for opt in core.get_global_option_list():; handled_locally = False; ghoc = core.has_global_option_changed(opt); opt_snapshot = {k: v[opt] for k, v in has_changed_snapshot.items() if opt in v}; for module, (lhoc, ohoc) in opt_snapshot.items():; if ohoc:; if lhoc:; key = module + '__' + opt; val = core.get_local_option(module, opt); else:; key = opt; val = core.get_global_option(opt); handled_locally = True; flat_options[key] = val. if ghoc and not handled_locally:; # some options are globals section (not level) so not in any module; flat_options[opt] = core.get_global_option(opt). # The normal machinery to forward plugin options to Psi goes through 'plugin_load'.; # Forte doesn't use this. Pending a larger options rewrite (move to a Python dictionary?),; # we need the following dirty hack. try:; import forte # Needed for Forte options to run.; except ImportError:; pass; else:; # Initialization tasks with Psi options; psi_options = core.get_options(); current_module = psi_options.get_current_module(); # Get the current Forte options from Forte; forte_options = forte.ForteOptions(); forte.register_forte_options(forte_options); psi_options.set_current_module(""FORTE""); try:; forte_options.get_options_from_psi4(psi_options); except RuntimeError:; # If we're in this case, Forte hasn't pushed its options to Psi.; pass; else:; # Load changed Forte options into `flat_options`; for name, metadata in forte_options.dict().items():; if metadata[""value""] != metadata[""default_value""]:; flat_options[f""forte__{name.lower()}""] = metadata[""value""]; finally:; # Restore current module; psi_options.set_current_module(curren",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686
https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686:1531,Modifiability,rewrite,rewrite,1531,"il.set_options`. Returns; -------; Dict[str, Any]; Dictionary where keys are keyword names, either plain for those to be; set globally or mangled ""module__keyword"" for those to be set locally,; and values are keyword values. """"""; flat_options = {}; has_changed_snapshot = {module: core.options_to_python(module) for module in _modules}. for opt in core.get_global_option_list():; handled_locally = False; ghoc = core.has_global_option_changed(opt); opt_snapshot = {k: v[opt] for k, v in has_changed_snapshot.items() if opt in v}; for module, (lhoc, ohoc) in opt_snapshot.items():; if ohoc:; if lhoc:; key = module + '__' + opt; val = core.get_local_option(module, opt); else:; key = opt; val = core.get_global_option(opt); handled_locally = True; flat_options[key] = val. if ghoc and not handled_locally:; # some options are globals section (not level) so not in any module; flat_options[opt] = core.get_global_option(opt). # The normal machinery to forward plugin options to Psi goes through 'plugin_load'.; # Forte doesn't use this. Pending a larger options rewrite (move to a Python dictionary?),; # we need the following dirty hack. try:; import forte # Needed for Forte options to run.; except ImportError:; pass; else:; # Initialization tasks with Psi options; psi_options = core.get_options(); current_module = psi_options.get_current_module(); # Get the current Forte options from Forte; forte_options = forte.ForteOptions(); forte.register_forte_options(forte_options); psi_options.set_current_module(""FORTE""); try:; forte_options.get_options_from_psi4(psi_options); except RuntimeError:; # If we're in this case, Forte hasn't pushed its options to Psi.; pass; else:; # Load changed Forte options into `flat_options`; for name, metadata in forte_options.dict().items():; if metadata[""value""] != metadata[""default_value""]:; flat_options[f""forte__{name.lower()}""] = metadata[""value""]; finally:; # Restore current module; psi_options.set_current_module(current_module); return flat_options; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686
https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686:2150,Performance,Load,Load,2150,"il.set_options`. Returns; -------; Dict[str, Any]; Dictionary where keys are keyword names, either plain for those to be; set globally or mangled ""module__keyword"" for those to be set locally,; and values are keyword values. """"""; flat_options = {}; has_changed_snapshot = {module: core.options_to_python(module) for module in _modules}. for opt in core.get_global_option_list():; handled_locally = False; ghoc = core.has_global_option_changed(opt); opt_snapshot = {k: v[opt] for k, v in has_changed_snapshot.items() if opt in v}; for module, (lhoc, ohoc) in opt_snapshot.items():; if ohoc:; if lhoc:; key = module + '__' + opt; val = core.get_local_option(module, opt); else:; key = opt; val = core.get_global_option(opt); handled_locally = True; flat_options[key] = val. if ghoc and not handled_locally:; # some options are globals section (not level) so not in any module; flat_options[opt] = core.get_global_option(opt). # The normal machinery to forward plugin options to Psi goes through 'plugin_load'.; # Forte doesn't use this. Pending a larger options rewrite (move to a Python dictionary?),; # we need the following dirty hack. try:; import forte # Needed for Forte options to run.; except ImportError:; pass; else:; # Initialization tasks with Psi options; psi_options = core.get_options(); current_module = psi_options.get_current_module(); # Get the current Forte options from Forte; forte_options = forte.ForteOptions(); forte.register_forte_options(forte_options); psi_options.set_current_module(""FORTE""); try:; forte_options.get_options_from_psi4(psi_options); except RuntimeError:; # If we're in this case, Forte hasn't pushed its options to Psi.; pass; else:; # Load changed Forte options into `flat_options`; for name, metadata in forte_options.dict().items():; if metadata[""value""] != metadata[""default_value""]:; flat_options[f""forte__{name.lower()}""] = metadata[""value""]; finally:; # Restore current module; psi_options.set_current_module(current_module); return flat_options; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3010#issuecomment-1631488686
https://github.com/psi4/psi4/issues/3010#issuecomment-1631582263:24,Availability,down,down,24,"OK, thanks I tracked it down it was a stray copy of forte. Thanks for the replies, appreciate it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3010#issuecomment-1631582263
https://github.com/psi4/psi4/issues/3014#issuecomment-1636633947:75,Availability,robust,robust,75,"It works for me locally, but you're right that the `==` doesn't make for a robust test. I'll improve that -- thanks for the notice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3014#issuecomment-1636633947
https://github.com/psi4/psi4/issues/3014#issuecomment-1636633947:82,Testability,test,test,82,"It works for me locally, but you're right that the `==` doesn't make for a robust test. I'll improve that -- thanks for the notice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3014#issuecomment-1636633947
https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438:238,Deployability,patch,patch,238,"FindPythonLibsNew should be removed from the repo -- I guess we left it as a transition. Since https://github.com/psi4/psi4/pull/2048 for v1.4, it's been replaced by the cmake native detection. Is it feasible to apply that to v1.3.2 as a patch? If a fresh edit is easier, switching `find_package(3.7 PythonLibsNew)` for `find_package(Python 3.7 EXACT COMPONENTS Interpreter Development REQUIRED)` in two places (top-level CM and psi4/CM) and replacing all `PYTHON_` with `Python_` in CM files should do most of the trick. Good news is that there's no other active distutils in master, so there should be a workaround to anything else from 1.3.2 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438
https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438:183,Safety,detect,detection,183,"FindPythonLibsNew should be removed from the repo -- I guess we left it as a transition. Since https://github.com/psi4/psi4/pull/2048 for v1.4, it's been replaced by the cmake native detection. Is it feasible to apply that to v1.3.2 as a patch? If a fresh edit is easier, switching `find_package(3.7 PythonLibsNew)` for `find_package(Python 3.7 EXACT COMPONENTS Interpreter Development REQUIRED)` in two places (top-level CM and psi4/CM) and replacing all `PYTHON_` with `Python_` in CM files should do most of the trick. Good news is that there's no other active distutils in master, so there should be a workaround to anything else from 1.3.2 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438
https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:69,Availability,error,error,69,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491
https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:408,Availability,Error,Error,408,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491
https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:659,Availability,error,errors,659,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491
https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:687,Availability,error,errors,687,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491
https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:696,Availability,error,error,696,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491
https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:949,Availability,down,downstream,949,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491
https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:635,Modifiability,Config,Configuring,635,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491
https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:149,Performance,Perform,Performing,149,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491
https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:178,Performance,Perform,Performing,178,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491
https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:160,Testability,Test,Test,160,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491
https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:189,Testability,Test,Test,189,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491
https://github.com/psi4/psi4/issues/3020#issuecomment-1668338629:156,Availability,error,error,156,FindPythonModule is a home cooked file under cmake/ . I can investigate in a couple hours or you can see if there's any difference btwn it and master. That error looks like it might just need a cmake policy set.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668338629
https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213:151,Availability,error,error,151,"First, you've `s/PYTHON_EXECUTABLE/Python_EXECUTABLE/g cmake/FindPythonModule.cmake` already probably. maybe patch it with to get more info out of the error. ```; diff --git a/cmake/FindPythonModule.cmake b/cmake/FindPythonModule.cmake; index 2b6f93172..b2061b8a6 100644; --- a/cmake/FindPythonModule.cmake; +++ b/cmake/FindPythonModule.cmake; @@ -77,8 +77,10 @@ macro(find_python_module module); print(parse_version('${${module}_VERSION}') ${_op} parse_version('${${module}_tgtver}'))""; RESULT_VARIABLE _${module}_verenuf_status; OUTPUT_VARIABLE _${module}_verenuf; - ERROR_QUIET; + #ERROR_QUIET; OUTPUT_STRIP_TRAILING_WHITESPACE); + message(""_${module}_verenuf_status ${_${module}_verenuf_status}""); + message(""_${module}_verenuf ${_${module}_verenuf}""); if(NOT ${_${module}_verenuf_status}); if(${_${module}_verenuf} STREQUAL ""True""); set(_${module}_requested_version_found ""${Python_EXECUTABLE}""); ```. and kill off the `QUIET` in external/upstream/qcelemental/CM. ```; if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.24.0 QUIET); endif(); ```. But really, assuming you're detecting a qcel in path, the only part of external/upstream/qcelemental/CM that further cmake cares about is ` add_library(qcelemental_external INTERFACE) # dummy`, so you could set that and bypass the FindPythonModule.cmake entirely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213
https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213:109,Deployability,patch,patch,109,"First, you've `s/PYTHON_EXECUTABLE/Python_EXECUTABLE/g cmake/FindPythonModule.cmake` already probably. maybe patch it with to get more info out of the error. ```; diff --git a/cmake/FindPythonModule.cmake b/cmake/FindPythonModule.cmake; index 2b6f93172..b2061b8a6 100644; --- a/cmake/FindPythonModule.cmake; +++ b/cmake/FindPythonModule.cmake; @@ -77,8 +77,10 @@ macro(find_python_module module); print(parse_version('${${module}_VERSION}') ${_op} parse_version('${${module}_tgtver}'))""; RESULT_VARIABLE _${module}_verenuf_status; OUTPUT_VARIABLE _${module}_verenuf; - ERROR_QUIET; + #ERROR_QUIET; OUTPUT_STRIP_TRAILING_WHITESPACE); + message(""_${module}_verenuf_status ${_${module}_verenuf_status}""); + message(""_${module}_verenuf ${_${module}_verenuf}""); if(NOT ${_${module}_verenuf_status}); if(${_${module}_verenuf} STREQUAL ""True""); set(_${module}_requested_version_found ""${Python_EXECUTABLE}""); ```. and kill off the `QUIET` in external/upstream/qcelemental/CM. ```; if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.24.0 QUIET); endif(); ```. But really, assuming you're detecting a qcel in path, the only part of external/upstream/qcelemental/CM that further cmake cares about is ` add_library(qcelemental_external INTERFACE) # dummy`, so you could set that and bypass the FindPythonModule.cmake entirely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213
https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213:635,Integrability,message,message,635,"First, you've `s/PYTHON_EXECUTABLE/Python_EXECUTABLE/g cmake/FindPythonModule.cmake` already probably. maybe patch it with to get more info out of the error. ```; diff --git a/cmake/FindPythonModule.cmake b/cmake/FindPythonModule.cmake; index 2b6f93172..b2061b8a6 100644; --- a/cmake/FindPythonModule.cmake; +++ b/cmake/FindPythonModule.cmake; @@ -77,8 +77,10 @@ macro(find_python_module module); print(parse_version('${${module}_VERSION}') ${_op} parse_version('${${module}_tgtver}'))""; RESULT_VARIABLE _${module}_verenuf_status; OUTPUT_VARIABLE _${module}_verenuf; - ERROR_QUIET; + #ERROR_QUIET; OUTPUT_STRIP_TRAILING_WHITESPACE); + message(""_${module}_verenuf_status ${_${module}_verenuf_status}""); + message(""_${module}_verenuf ${_${module}_verenuf}""); if(NOT ${_${module}_verenuf_status}); if(${_${module}_verenuf} STREQUAL ""True""); set(_${module}_requested_version_found ""${Python_EXECUTABLE}""); ```. and kill off the `QUIET` in external/upstream/qcelemental/CM. ```; if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.24.0 QUIET); endif(); ```. But really, assuming you're detecting a qcel in path, the only part of external/upstream/qcelemental/CM that further cmake cares about is ` add_library(qcelemental_external INTERFACE) # dummy`, so you could set that and bypass the FindPythonModule.cmake entirely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213
https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213:704,Integrability,message,message,704,"First, you've `s/PYTHON_EXECUTABLE/Python_EXECUTABLE/g cmake/FindPythonModule.cmake` already probably. maybe patch it with to get more info out of the error. ```; diff --git a/cmake/FindPythonModule.cmake b/cmake/FindPythonModule.cmake; index 2b6f93172..b2061b8a6 100644; --- a/cmake/FindPythonModule.cmake; +++ b/cmake/FindPythonModule.cmake; @@ -77,8 +77,10 @@ macro(find_python_module module); print(parse_version('${${module}_VERSION}') ${_op} parse_version('${${module}_tgtver}'))""; RESULT_VARIABLE _${module}_verenuf_status; OUTPUT_VARIABLE _${module}_verenuf; - ERROR_QUIET; + #ERROR_QUIET; OUTPUT_STRIP_TRAILING_WHITESPACE); + message(""_${module}_verenuf_status ${_${module}_verenuf_status}""); + message(""_${module}_verenuf ${_${module}_verenuf}""); if(NOT ${_${module}_verenuf_status}); if(${_${module}_verenuf} STREQUAL ""True""); set(_${module}_requested_version_found ""${Python_EXECUTABLE}""); ```. and kill off the `QUIET` in external/upstream/qcelemental/CM. ```; if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.24.0 QUIET); endif(); ```. But really, assuming you're detecting a qcel in path, the only part of external/upstream/qcelemental/CM that further cmake cares about is ` add_library(qcelemental_external INTERFACE) # dummy`, so you could set that and bypass the FindPythonModule.cmake entirely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213
https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213:1295,Integrability,INTERFACE,INTERFACE,1295,"First, you've `s/PYTHON_EXECUTABLE/Python_EXECUTABLE/g cmake/FindPythonModule.cmake` already probably. maybe patch it with to get more info out of the error. ```; diff --git a/cmake/FindPythonModule.cmake b/cmake/FindPythonModule.cmake; index 2b6f93172..b2061b8a6 100644; --- a/cmake/FindPythonModule.cmake; +++ b/cmake/FindPythonModule.cmake; @@ -77,8 +77,10 @@ macro(find_python_module module); print(parse_version('${${module}_VERSION}') ${_op} parse_version('${${module}_tgtver}'))""; RESULT_VARIABLE _${module}_verenuf_status; OUTPUT_VARIABLE _${module}_verenuf; - ERROR_QUIET; + #ERROR_QUIET; OUTPUT_STRIP_TRAILING_WHITESPACE); + message(""_${module}_verenuf_status ${_${module}_verenuf_status}""); + message(""_${module}_verenuf ${_${module}_verenuf}""); if(NOT ${_${module}_verenuf_status}); if(${_${module}_verenuf} STREQUAL ""True""); set(_${module}_requested_version_found ""${Python_EXECUTABLE}""); ```. and kill off the `QUIET` in external/upstream/qcelemental/CM. ```; if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.24.0 QUIET); endif(); ```. But really, assuming you're detecting a qcel in path, the only part of external/upstream/qcelemental/CM that further cmake cares about is ` add_library(qcelemental_external INTERFACE) # dummy`, so you could set that and bypass the FindPythonModule.cmake entirely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213
https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213:1150,Safety,detect,detecting,1150,"First, you've `s/PYTHON_EXECUTABLE/Python_EXECUTABLE/g cmake/FindPythonModule.cmake` already probably. maybe patch it with to get more info out of the error. ```; diff --git a/cmake/FindPythonModule.cmake b/cmake/FindPythonModule.cmake; index 2b6f93172..b2061b8a6 100644; --- a/cmake/FindPythonModule.cmake; +++ b/cmake/FindPythonModule.cmake; @@ -77,8 +77,10 @@ macro(find_python_module module); print(parse_version('${${module}_VERSION}') ${_op} parse_version('${${module}_tgtver}'))""; RESULT_VARIABLE _${module}_verenuf_status; OUTPUT_VARIABLE _${module}_verenuf; - ERROR_QUIET; + #ERROR_QUIET; OUTPUT_STRIP_TRAILING_WHITESPACE); + message(""_${module}_verenuf_status ${_${module}_verenuf_status}""); + message(""_${module}_verenuf ${_${module}_verenuf}""); if(NOT ${_${module}_verenuf_status}); if(${_${module}_verenuf} STREQUAL ""True""); set(_${module}_requested_version_found ""${Python_EXECUTABLE}""); ```. and kill off the `QUIET` in external/upstream/qcelemental/CM. ```; if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); include(FindPythonModule); find_python_module(qcelemental ATLEAST 0.24.0 QUIET); endif(); ```. But really, assuming you're detecting a qcel in path, the only part of external/upstream/qcelemental/CM that further cmake cares about is ` add_library(qcelemental_external INTERFACE) # dummy`, so you could set that and bypass the FindPythonModule.cmake entirely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668622213
https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:93,Deployability,patch,patch,93,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967
https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:154,Deployability,patch,patch,154,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967
https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:1430,Deployability,install,install,1430,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967
https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:1505,Deployability,install,install-lib,1505,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967
https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:532,Integrability,message,message,532,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967
https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:681,Integrability,INTERFACE,INTERFACE,681,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967
https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:763,Integrability,message,message,763,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967
https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:900,Integrability,message,message,900,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967
https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:280,Modifiability,config,configured,280,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967
https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:317,Safety,detect,detected,317,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967
https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:37,Testability,log,log,37,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967
https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684:9,Availability,error,error,9,"So, next error; ```; CMake Warning (dev) at cmake/FindPythonLibsNew.cmake:59 (find_package):; Policy CMP0148 is not set: The FindPythonInterp and FindPythonLibs modules; are removed. Run ""cmake --help-policy CMP0148"" for policy details. Use; the cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); This warning is for project developers. Use -Wno-dev to suppress it.; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684
https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684:563,Availability,Error,Error,563,"So, next error; ```; CMake Warning (dev) at cmake/FindPythonLibsNew.cmake:59 (find_package):; Policy CMP0148 is not set: The FindPythonInterp and FindPythonLibs modules; are removed. Run ""cmake --help-policy CMP0148"" for policy details. Use; the cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); This warning is for project developers. Use -Wno-dev to suppress it.; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684
https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684:631,Availability,failure,failure,631,"So, next error; ```; CMake Warning (dev) at cmake/FindPythonLibsNew.cmake:59 (find_package):; Policy CMP0148 is not set: The FindPythonInterp and FindPythonLibs modules; are removed. Run ""cmake --help-policy CMP0148"" for policy details. Use; the cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); This warning is for project developers. Use -Wno-dev to suppress it.; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684
https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684:865,Availability,error,errors,865,"So, next error; ```; CMake Warning (dev) at cmake/FindPythonLibsNew.cmake:59 (find_package):; Policy CMP0148 is not set: The FindPythonInterp and FindPythonLibs modules; are removed. Run ""cmake --help-policy CMP0148"" for policy details. Use; the cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); This warning is for project developers. Use -Wno-dev to suppress it.; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684
https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684:606,Integrability,message,message,606,"So, next error; ```; CMake Warning (dev) at cmake/FindPythonLibsNew.cmake:59 (find_package):; Policy CMP0148 is not set: The FindPythonInterp and FindPythonLibs modules; are removed. Run ""cmake --help-policy CMP0148"" for policy details. Use; the cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); This warning is for project developers. Use -Wno-dev to suppress it.; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684
https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684:624,Modifiability,config,config,624,"So, next error; ```; CMake Warning (dev) at cmake/FindPythonLibsNew.cmake:59 (find_package):; Policy CMP0148 is not set: The FindPythonInterp and FindPythonLibs modules; are removed. Run ""cmake --help-policy CMP0148"" for policy details. Use; the cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); This warning is for project developers. Use -Wno-dev to suppress it.; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684
https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684:841,Modifiability,Config,Configuring,841,"So, next error; ```; CMake Warning (dev) at cmake/FindPythonLibsNew.cmake:59 (find_package):; Policy CMP0148 is not set: The FindPythonInterp and FindPythonLibs modules; are removed. Run ""cmake --help-policy CMP0148"" for policy details. Use; the cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); This warning is for project developers. Use -Wno-dev to suppress it.; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684
https://github.com/psi4/psi4/issues/3020#issuecomment-1676479960:231,Safety,detect,detection,231,FindPythonInterp/FindPythonLibs/FindPythonLibsNew should never be called after the switch in https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438 to `find_package(Python`. Can you determine what's still calling the old detection? One guess is that not just top-level/CM but top-level/psi4/CM needs the adjustment and the call has to come before pb11 detection https://github.com/psi4/psi4/blob/b0e621fc287b60010275fbe22f7e9337e855e1df/psi4/CMakeLists.txt#L60 .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676479960
https://github.com/psi4/psi4/issues/3020#issuecomment-1676479960:362,Safety,detect,detection,362,FindPythonInterp/FindPythonLibs/FindPythonLibsNew should never be called after the switch in https://github.com/psi4/psi4/issues/3020#issuecomment-1667105438 to `find_package(Python`. Can you determine what's still calling the old detection? One guess is that not just top-level/CM but top-level/psi4/CM needs the adjustment and the call has to come before pb11 detection https://github.com/psi4/psi4/blob/b0e621fc287b60010275fbe22f7e9337e855e1df/psi4/CMakeLists.txt#L60 .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676479960
https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705:11,Availability,Error,Error,11,"```; CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE) (Required is at; least version ""3.6""); Call Stack (most recent call first):; /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake/Modules/FindPythonInterp.cmake:182 (FIND_PACKAGE_HANDLE_STANDARD_ARGS); /usr/share/cmake/pybind11/FindPythonLibsNew.cmake:98 (find_package); /usr/share/cmake/pybind11/pybind11Tools.cmake:50 (find_package); /usr/share/cmake/pybind11/pybind11Common.cmake:188 (include); /usr/share/cmake/pybind11/pybind11Config.cmake:250 (include); CMakeLists.txt:60 (find_package); ```; Looks like the error originates from `psi4/CMakeLists.txt`; ```; find_package(pybind11 2.2.2 CONFIG REQUIRED); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705
https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705:723,Availability,error,error,723,"```; CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE) (Required is at; least version ""3.6""); Call Stack (most recent call first):; /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake/Modules/FindPythonInterp.cmake:182 (FIND_PACKAGE_HANDLE_STANDARD_ARGS); /usr/share/cmake/pybind11/FindPythonLibsNew.cmake:98 (find_package); /usr/share/cmake/pybind11/pybind11Tools.cmake:50 (find_package); /usr/share/cmake/pybind11/pybind11Common.cmake:188 (include); /usr/share/cmake/pybind11/pybind11Config.cmake:250 (include); CMakeLists.txt:60 (find_package); ```; Looks like the error originates from `psi4/CMakeLists.txt`; ```; find_package(pybind11 2.2.2 CONFIG REQUIRED); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705
https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705:86,Integrability,message,message,86,"```; CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE) (Required is at; least version ""3.6""); Call Stack (most recent call first):; /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake/Modules/FindPythonInterp.cmake:182 (FIND_PACKAGE_HANDLE_STANDARD_ARGS); /usr/share/cmake/pybind11/FindPythonLibsNew.cmake:98 (find_package); /usr/share/cmake/pybind11/pybind11Tools.cmake:50 (find_package); /usr/share/cmake/pybind11/pybind11Common.cmake:188 (include); /usr/share/cmake/pybind11/pybind11Config.cmake:250 (include); CMakeLists.txt:60 (find_package); ```; Looks like the error originates from `psi4/CMakeLists.txt`; ```; find_package(pybind11 2.2.2 CONFIG REQUIRED); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705
https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705:801,Modifiability,CONFIG,CONFIG,801,"```; CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find PythonInterp (missing: PYTHON_EXECUTABLE) (Required is at; least version ""3.6""); Call Stack (most recent call first):; /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake/Modules/FindPythonInterp.cmake:182 (FIND_PACKAGE_HANDLE_STANDARD_ARGS); /usr/share/cmake/pybind11/FindPythonLibsNew.cmake:98 (find_package); /usr/share/cmake/pybind11/pybind11Tools.cmake:50 (find_package); /usr/share/cmake/pybind11/pybind11Common.cmake:188 (include); /usr/share/cmake/pybind11/pybind11Config.cmake:250 (include); CMakeLists.txt:60 (find_package); ```; Looks like the error originates from `psi4/CMakeLists.txt`; ```; find_package(pybind11 2.2.2 CONFIG REQUIRED); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676487705
https://github.com/psi4/psi4/issues/3020#issuecomment-1676489557:41,Safety,detect,detection,41,"Likely the snag is that ""Classic"" Python detection where pb11 calls PythonLibsNew is getting triggered instead of ""New FindPython"" mode. https://pybind11.readthedocs.io/en/stable/cmake/index.html#new-findpython-mode Maybe in addition to `find_package(Python)` to `find_package(pybind11)`, you can set `PYBIND11_FINDPYTHON` to `ON`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676489557
https://github.com/psi4/psi4/issues/3020#issuecomment-1676494935:110,Availability,Error,Error,110,"That helped. Now; ```; gmake[5]: *** [CMakeFiles/update_version.dir/build.make:71: CMakeFiles/update_version] Error 127; gmake[4]: *** [CMakeFiles/Makefile2:977: CMakeFiles/update_version.dir/all] Error 2; gmake[4]: *** Waiting for unfinished jobs....; ```; Going through the log, I find; ```; cd /builddir/build/BUILD/psi4-1.3.2/psi4 && versioner.py --metaout /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/psi4-core-prefix/src/psi4-core-build/metadata.py --cmakeout /builddir/b; uild/BUILD/psi4-1.3.2/redhat-linux-build/psi4-core-prefix/src/psi4-core-build/metadata.cmake; /bin/sh: line 1: versioner.py: command not found; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676494935
https://github.com/psi4/psi4/issues/3020#issuecomment-1676494935:197,Availability,Error,Error,197,"That helped. Now; ```; gmake[5]: *** [CMakeFiles/update_version.dir/build.make:71: CMakeFiles/update_version] Error 127; gmake[4]: *** [CMakeFiles/Makefile2:977: CMakeFiles/update_version.dir/all] Error 2; gmake[4]: *** Waiting for unfinished jobs....; ```; Going through the log, I find; ```; cd /builddir/build/BUILD/psi4-1.3.2/psi4 && versioner.py --metaout /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/psi4-core-prefix/src/psi4-core-build/metadata.py --cmakeout /builddir/b; uild/BUILD/psi4-1.3.2/redhat-linux-build/psi4-core-prefix/src/psi4-core-build/metadata.cmake; /bin/sh: line 1: versioner.py: command not found; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676494935
https://github.com/psi4/psi4/issues/3020#issuecomment-1676494935:276,Testability,log,log,276,"That helped. Now; ```; gmake[5]: *** [CMakeFiles/update_version.dir/build.make:71: CMakeFiles/update_version] Error 127; gmake[4]: *** [CMakeFiles/Makefile2:977: CMakeFiles/update_version.dir/all] Error 2; gmake[4]: *** Waiting for unfinished jobs....; ```; Going through the log, I find; ```; cd /builddir/build/BUILD/psi4-1.3.2/psi4 && versioner.py --metaout /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/psi4-core-prefix/src/psi4-core-build/metadata.py --cmakeout /builddir/b; uild/BUILD/psi4-1.3.2/redhat-linux-build/psi4-core-prefix/src/psi4-core-build/metadata.cmake; /bin/sh: line 1: versioner.py: command not found; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676494935
https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482:192,Deployability,Release,Release,192,"Now I get; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; Could not find executable ; Looked in the following places:; Release/; Release/; Debug/; Debug/; MinSizeRel/; MinSizeRel/; RelWithDebInfo/; RelWithDebInfo/; Deployment/; Deployment/; Development/; Development/; 1/12 Test #7: casscf-sp ........................***Not Run 0.00 sec; ```; It did seem to install the executable, though.; https://koji.fedoraproject.org/koji/watchlogs?taskID=104800455",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482
https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482:202,Deployability,Release,Release,202,"Now I get; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; Could not find executable ; Looked in the following places:; Release/; Release/; Debug/; Debug/; MinSizeRel/; MinSizeRel/; RelWithDebInfo/; RelWithDebInfo/; Deployment/; Deployment/; Development/; Development/; 1/12 Test #7: casscf-sp ........................***Not Run 0.00 sec; ```; It did seem to install the executable, though.; https://koji.fedoraproject.org/koji/watchlogs?taskID=104800455",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482
https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482:288,Deployability,Deploy,Deployment,288,"Now I get; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; Could not find executable ; Looked in the following places:; Release/; Release/; Debug/; Debug/; MinSizeRel/; MinSizeRel/; RelWithDebInfo/; RelWithDebInfo/; Deployment/; Deployment/; Development/; Development/; 1/12 Test #7: casscf-sp ........................***Not Run 0.00 sec; ```; It did seem to install the executable, though.; https://koji.fedoraproject.org/koji/watchlogs?taskID=104800455",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482
https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482:301,Deployability,Deploy,Deployment,301,"Now I get; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; Could not find executable ; Looked in the following places:; Release/; Release/; Debug/; Debug/; MinSizeRel/; MinSizeRel/; RelWithDebInfo/; RelWithDebInfo/; Deployment/; Deployment/; Development/; Development/; 1/12 Test #7: casscf-sp ........................***Not Run 0.00 sec; ```; It did seem to install the executable, though.; https://koji.fedoraproject.org/koji/watchlogs?taskID=104800455",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482
https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482:431,Deployability,install,install,431,"Now I get; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; Could not find executable ; Looked in the following places:; Release/; Release/; Debug/; Debug/; MinSizeRel/; MinSizeRel/; RelWithDebInfo/; RelWithDebInfo/; Deployment/; Deployment/; Development/; Development/; 1/12 Test #7: casscf-sp ........................***Not Run 0.00 sec; ```; It did seem to install the executable, though.; https://koji.fedoraproject.org/koji/watchlogs?taskID=104800455",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482
https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482:39,Testability,Test,Test,39,"Now I get; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; Could not find executable ; Looked in the following places:; Release/; Release/; Debug/; Debug/; MinSizeRel/; MinSizeRel/; RelWithDebInfo/; RelWithDebInfo/; Deployment/; Deployment/; Development/; Development/; 1/12 Test #7: casscf-sp ........................***Not Run 0.00 sec; ```; It did seem to install the executable, though.; https://koji.fedoraproject.org/koji/watchlogs?taskID=104800455",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482
https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482:104,Testability,test,tests,104,"Now I get; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; Could not find executable ; Looked in the following places:; Release/; Release/; Debug/; Debug/; MinSizeRel/; MinSizeRel/; RelWithDebInfo/; RelWithDebInfo/; Deployment/; Deployment/; Development/; Development/; 1/12 Test #7: casscf-sp ........................***Not Run 0.00 sec; ```; It did seem to install the executable, though.; https://koji.fedoraproject.org/koji/watchlogs?taskID=104800455",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482
https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482:347,Testability,Test,Test,347,"Now I get; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; Could not find executable ; Looked in the following places:; Release/; Release/; Debug/; Debug/; MinSizeRel/; MinSizeRel/; RelWithDebInfo/; RelWithDebInfo/; Deployment/; Deployment/; Development/; Development/; 1/12 Test #7: casscf-sp ........................***Not Run 0.00 sec; ```; It did seem to install the executable, though.; https://koji.fedoraproject.org/koji/watchlogs?taskID=104800455",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676504482
https://github.com/psi4/psi4/issues/3020#issuecomment-1676509344:47,Testability,Test,TestingMacros,47,https://github.com/psi4/psi4/blob/master/cmake/TestingMacros.cmake#L45 might also need PYTHON_EXE -> Python_EXE,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676509344
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:2195,Availability,Error,Errors,2195,".... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:2242,Availability,error,error,2242,".... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:3388,Availability,error,error,3388,"); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/psi4', '/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-bu; ild/tests/casscf-sp/output.dat', '-l', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4'] execution failed: Exec format error; <end of output>; Test time = 0.21 sec; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:678,Energy Efficiency,energy,energy,678,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:710,Energy Efficiency,energy,energy,710,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:970,Energy Efficiency,energy,energy,970,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1002,Energy Efficiency,energy,energy,1002,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:2146,Energy Efficiency,energy,energy,2146,".... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:52,Testability,Test,Test,52,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:117,Testability,test,tests,117,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:149,Testability,Test,Test,149,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:232,Testability,Test,Test,232,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:321,Testability,Test,Test,321,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:411,Testability,Test,Test,411,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:499,Testability,Test,Test,499,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:594,Testability,Test,Test,594,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:691,Testability,Test,Test,691,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:787,Testability,Test,Test,787,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:889,Testability,Test,Test,889,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:984,Testability,Test,Test,984,"Yeah did that. Now got; ```; + ctest -L smoketests; Test project /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1088,Testability,Test,Test,1088,"BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	33",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1184,Testability,Test,Test,1184,"...............***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1253,Testability,test,tests,1253,"......***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1269,Testability,test,tests,1269,"......***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1339,Testability,test,test,1339," ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1370,Testability,test,tests,1370,"led 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1404,Testability,test,test,1404,"p; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1433,Testability,test,test,1433,".....................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1467,Testability,test,test,1467,"0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1496,Testability,test,test,1496,"2 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" """,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1528,Testability,test,test,1528,"..............***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1562,Testability,test,test,1562,"; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1593,Testability,test,test,1593,"st #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-bui",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1630,Testability,test,test,1630,".........***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1662,Testability,test,tests,1662,"372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1699,Testability,test,tests,1699," tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1733,Testability,test,test,1733,"**Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redh",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1772,Testability,test,tests,1772,"umpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/b",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1804,Testability,test,test,1804,"mpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1834,Testability,test,test,1834,"d 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/pyt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1873,Testability,test,tests,1873,"hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1909,Testability,test,test,1909,"numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1922,Testability,Test,Test,1922,"..... Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tes",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1966,Testability,test,tests,1966,".... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:2263,Testability,Test,Test,2263,".... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:2345,Testability,test,tests,2345,"= 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/psi4', '/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-bu; ild/tests/casscf-sp/output.dat', '-l', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:2397,Testability,test,tests,2397,"t); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/psi4', '/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-bu; ild/tests/casscf-sp/output.dat', '-l', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4'] execution failed: Exec format error; <end of outp",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:2479,Testability,test,testresults,2479,"); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/psi4', '/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-bu; ild/tests/casscf-sp/output.dat', '-l', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4'] execution failed: Exec format error; <end of output>; Test time = 0.21 sec; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:2491,Testability,log,log,2491,"); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/psi4', '/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-bu; ild/tests/casscf-sp/output.dat', '-l', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4'] execution failed: Exec format error; <end of output>; Test time = 0.21 sec; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:2600,Testability,test,tests,2600,"); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/psi4', '/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-bu; ild/tests/casscf-sp/output.dat', '-l', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4'] execution failed: Exec format error; <end of output>; Test time = 0.21 sec; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:2927,Testability,test,tests,2927,"); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/psi4', '/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-bu; ild/tests/casscf-sp/output.dat', '-l', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4'] execution failed: Exec format error; <end of output>; Test time = 0.21 sec; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:3168,Testability,test,tests,3168,"); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/psi4', '/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-bu; ild/tests/casscf-sp/output.dat', '-l', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4'] execution failed: Exec format error; <end of output>; Test time = 0.21 sec; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:3251,Testability,test,tests,3251,"); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/psi4', '/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-bu; ild/tests/casscf-sp/output.dat', '-l', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4'] execution failed: Exec format error; <end of output>; Test time = 0.21 sec; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:3412,Testability,Test,Test,3412,"); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/psi4', '/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-bu; ild/tests/casscf-sp/output.dat', '-l', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4'] execution failed: Exec format error; <end of output>; Test time = 0.21 sec; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680
https://github.com/psi4/psi4/issues/3025#issuecomment-1677835469:210,Integrability,message,message,210,"Not quite on the L2 conversion -- there's still https://github.com/psi4/psi4/pull/2473 awaiting bug diagnosis https://github.com/evaleev/libint/issues/242 . That said, #2473 isn't touching onebody.h/cc, so the message may indeed be defunct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3025#issuecomment-1677835469
https://github.com/psi4/psi4/issues/3028#issuecomment-1683136919:38,Deployability,release,release,38,"Have you pulled tags after the latest release? `git fetch upstream ""refs/tags/*:refs/tags/*""`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3028#issuecomment-1683136919
https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745:410,Availability,failure,failures,410,"I've got a branch that's only two days removed from master, and its smoke tests are clean. There is a problem with psi4 and qcng 0.28, but I'm sure you're on linux. After pulling tags, one does have to rebuild for the versioning to take effect. But if you're sure that's not it, go ahead and execute the results of `<objdir>/stage/bin/psi4 --psiapi`. It shouldn't be necessary for ctest, but considering those failures are those tests running the python command _and_ those that use qcengine, best to make sure of paths. Beyond that, see if `<objdir>/Testing/Temporary/LastTest.log` has some output clues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745
https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745:74,Testability,test,tests,74,"I've got a branch that's only two days removed from master, and its smoke tests are clean. There is a problem with psi4 and qcng 0.28, but I'm sure you're on linux. After pulling tags, one does have to rebuild for the versioning to take effect. But if you're sure that's not it, go ahead and execute the results of `<objdir>/stage/bin/psi4 --psiapi`. It shouldn't be necessary for ctest, but considering those failures are those tests running the python command _and_ those that use qcengine, best to make sure of paths. Beyond that, see if `<objdir>/Testing/Temporary/LastTest.log` has some output clues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745
https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745:429,Testability,test,tests,429,"I've got a branch that's only two days removed from master, and its smoke tests are clean. There is a problem with psi4 and qcng 0.28, but I'm sure you're on linux. After pulling tags, one does have to rebuild for the versioning to take effect. But if you're sure that's not it, go ahead and execute the results of `<objdir>/stage/bin/psi4 --psiapi`. It shouldn't be necessary for ctest, but considering those failures are those tests running the python command _and_ those that use qcengine, best to make sure of paths. Beyond that, see if `<objdir>/Testing/Temporary/LastTest.log` has some output clues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745
https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745:551,Testability,Test,Testing,551,"I've got a branch that's only two days removed from master, and its smoke tests are clean. There is a problem with psi4 and qcng 0.28, but I'm sure you're on linux. After pulling tags, one does have to rebuild for the versioning to take effect. But if you're sure that's not it, go ahead and execute the results of `<objdir>/stage/bin/psi4 --psiapi`. It shouldn't be necessary for ctest, but considering those failures are those tests running the python command _and_ those that use qcengine, best to make sure of paths. Beyond that, see if `<objdir>/Testing/Temporary/LastTest.log` has some output clues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745
https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745:578,Testability,log,log,578,"I've got a branch that's only two days removed from master, and its smoke tests are clean. There is a problem with psi4 and qcng 0.28, but I'm sure you're on linux. After pulling tags, one does have to rebuild for the versioning to take effect. But if you're sure that's not it, go ahead and execute the results of `<objdir>/stage/bin/psi4 --psiapi`. It shouldn't be necessary for ctest, but considering those failures are those tests running the python command _and_ those that use qcengine, best to make sure of paths. Beyond that, see if `<objdir>/Testing/Temporary/LastTest.log` has some output clues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745
https://github.com/psi4/psi4/issues/3028#issuecomment-1687167954:76,Testability,test,tests,76,"> I've got a branch that's only two days removed from master, and its smoke tests are clean. There is a problem with psi4 and qcng 0.28, but I'm sure you're on linux. Yeah but that's the point, I am not sure if this is related to the `std::vector` cleanups. Just wanted for someone to check whether master is still clean",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3028#issuecomment-1687167954
https://github.com/psi4/psi4/issues/3028#issuecomment-1687198931:27,Testability,test,tests,27,"Ok, yes, I just ran a full tests on today's master, and it's clean. (And the Windows issue is fixed, too.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3028#issuecomment-1687198931
https://github.com/psi4/psi4/issues/3031#issuecomment-1685413743:11,Deployability,release,releases,11,"Ah, recent releases are now on c-f, including through py311. please use ` conda install psi4 python=3.11 -c conda-forge/label/libint_dev -c conda-forge` from https://psicode.org/installs/v18/ with choices conda/3.11/stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3031#issuecomment-1685413743
https://github.com/psi4/psi4/issues/3031#issuecomment-1685413743:80,Deployability,install,install,80,"Ah, recent releases are now on c-f, including through py311. please use ` conda install psi4 python=3.11 -c conda-forge/label/libint_dev -c conda-forge` from https://psicode.org/installs/v18/ with choices conda/3.11/stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3031#issuecomment-1685413743
https://github.com/psi4/psi4/issues/3031#issuecomment-1685413743:178,Deployability,install,installs,178,"Ah, recent releases are now on c-f, including through py311. please use ` conda install psi4 python=3.11 -c conda-forge/label/libint_dev -c conda-forge` from https://psicode.org/installs/v18/ with choices conda/3.11/stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3031#issuecomment-1685413743
https://github.com/psi4/psi4/issues/3031#issuecomment-1685414098:47,Deployability,install,install,47,"@loriab: Ah, thanks so much! I didn't see that install page. Very helpful! I'll close this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3031#issuecomment-1685414098
https://github.com/psi4/psi4/issues/3031#issuecomment-1685426469:123,Deployability,install,install,123,"Great! If you're not already, adding `--solver libmamba` to the solve can improve the speed considerably. (You may need to install `conda-libmamba-solver` to base env https://conda.github.io/conda-libmamba-solver/getting-started/ .)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3031#issuecomment-1685426469
https://github.com/psi4/psi4/issues/3031#issuecomment-1685431494:47,Availability,down,down,47,That was magical. Thank you so much! It's back down to 3 minutes now 😄,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3031#issuecomment-1685431494
https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602:196,Availability,toler,tolerant,196,"This could be tidied up and merged for v1.9, but that would constrict pydantic to only v2. From https://github.com/MolSSI/QCElemental/issues/323, releases of qcfractal are only imminently even v2-tolerant. So I think it'd be safer to postpone and update the whole qca stack together. So not targeting v1.9. Any thoughts? @mattwthompson",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602
https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602:146,Deployability,release,releases,146,"This could be tidied up and merged for v1.9, but that would constrict pydantic to only v2. From https://github.com/MolSSI/QCElemental/issues/323, releases of qcfractal are only imminently even v2-tolerant. So I think it'd be safer to postpone and update the whole qca stack together. So not targeting v1.9. Any thoughts? @mattwthompson",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602
https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602:247,Deployability,update,update,247,"This could be tidied up and merged for v1.9, but that would constrict pydantic to only v2. From https://github.com/MolSSI/QCElemental/issues/323, releases of qcfractal are only imminently even v2-tolerant. So I think it'd be safer to postpone and update the whole qca stack together. So not targeting v1.9. Any thoughts? @mattwthompson",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602
https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602:225,Safety,safe,safer,225,"This could be tidied up and merged for v1.9, but that would constrict pydantic to only v2. From https://github.com/MolSSI/QCElemental/issues/323, releases of qcfractal are only imminently even v2-tolerant. So I think it'd be safer to postpone and update the whole qca stack together. So not targeting v1.9. Any thoughts? @mattwthompson",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809285602
https://github.com/psi4/psi4/pull/3034#issuecomment-1809334518:427,Deployability,install,installation,427,"My thoughts are; * I'm jealous you were able to pull this off, I gave up in a fit of rage the last time I tried to do this migration; * Having 1.9 drop with `pydantic =2` constrained everywhere would be a small problem (I think that's what the contents of this PR would require?). We'd be stuck on 1.8.something, which isn't the end of the world but also not preferred.; * Waiting until the QCArchive stack works with v1/v2 at installation time and then having the next-ish Psi4 release be `pydantic =2` sounds like a great idea (I think this is what you're suggesting?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809334518
https://github.com/psi4/psi4/pull/3034#issuecomment-1809334518:479,Deployability,release,release,479,"My thoughts are; * I'm jealous you were able to pull this off, I gave up in a fit of rage the last time I tried to do this migration; * Having 1.9 drop with `pydantic =2` constrained everywhere would be a small problem (I think that's what the contents of this PR would require?). We'd be stuck on 1.8.something, which isn't the end of the world but also not preferred.; * Waiting until the QCArchive stack works with v1/v2 at installation time and then having the next-ish Psi4 release be `pydantic =2` sounds like a great idea (I think this is what you're suggesting?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809334518
https://github.com/psi4/psi4/pull/3034#issuecomment-1809344855:909,Availability,down,downstream,909,"> * I'm jealous you were able to pull this off, I gave up in a fit of rage the last time I tried to do this migration. Yeah, there were some bizarre bits -- had to basically restructure the driver import structure in #3033 to unwind the circular import to let pydantic see the classes it demanded. Thankfully Levi did the really hard part for qcel. > * Having 1.9 drop with pydantic =2 constrained everywhere would be a small problem (I think that's what the contents of this PR would require?). We'd be stuck on 1.8.something, which isn't the end of the world but also not preferred.; > * Waiting until the QCArchive stack works with v1/v2 at installation time and then having the next-ish Psi4 release be pydantic =2 sounds like a great idea (I think this is what you're suggesting?). Ok, good. Yes, I was suggesting psi v1.10 in May 2024 be pydantic=2 only and let v1.9 stay v1/v2-compatible. I don't want downstream to get locked into too-narrow a slice of the stack to cope with other constraints. So long as psi4 as v1/v2 isn't holding openff back, I think this is the way to go. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809344855
https://github.com/psi4/psi4/pull/3034#issuecomment-1809344855:644,Deployability,install,installation,644,"> * I'm jealous you were able to pull this off, I gave up in a fit of rage the last time I tried to do this migration. Yeah, there were some bizarre bits -- had to basically restructure the driver import structure in #3033 to unwind the circular import to let pydantic see the classes it demanded. Thankfully Levi did the really hard part for qcel. > * Having 1.9 drop with pydantic =2 constrained everywhere would be a small problem (I think that's what the contents of this PR would require?). We'd be stuck on 1.8.something, which isn't the end of the world but also not preferred.; > * Waiting until the QCArchive stack works with v1/v2 at installation time and then having the next-ish Psi4 release be pydantic =2 sounds like a great idea (I think this is what you're suggesting?). Ok, good. Yes, I was suggesting psi v1.10 in May 2024 be pydantic=2 only and let v1.9 stay v1/v2-compatible. I don't want downstream to get locked into too-narrow a slice of the stack to cope with other constraints. So long as psi4 as v1/v2 isn't holding openff back, I think this is the way to go. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809344855
https://github.com/psi4/psi4/pull/3034#issuecomment-1809344855:696,Deployability,release,release,696,"> * I'm jealous you were able to pull this off, I gave up in a fit of rage the last time I tried to do this migration. Yeah, there were some bizarre bits -- had to basically restructure the driver import structure in #3033 to unwind the circular import to let pydantic see the classes it demanded. Thankfully Levi did the really hard part for qcel. > * Having 1.9 drop with pydantic =2 constrained everywhere would be a small problem (I think that's what the contents of this PR would require?). We'd be stuck on 1.8.something, which isn't the end of the world but also not preferred.; > * Waiting until the QCArchive stack works with v1/v2 at installation time and then having the next-ish Psi4 release be pydantic =2 sounds like a great idea (I think this is what you're suggesting?). Ok, good. Yes, I was suggesting psi v1.10 in May 2024 be pydantic=2 only and let v1.9 stay v1/v2-compatible. I don't want downstream to get locked into too-narrow a slice of the stack to cope with other constraints. So long as psi4 as v1/v2 isn't holding openff back, I think this is the way to go. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1809344855
https://github.com/psi4/psi4/pull/3034#issuecomment-1810454801:186,Deployability,release,release,186,That timeline will work for us - hopefully we're properly on v2 but at very least I'd expect us to be in the v1/v2 compatible state. (I hope this doesn't take much more than a QCFractal release and us putting the import guards in a couple of our packages.) Thanks for the heads-up!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3034#issuecomment-1810454801
https://github.com/psi4/psi4/pull/3037#issuecomment-1695975377:501,Deployability,update,update,501,"> Let me make sure I understand this:; > ; > The old behavior was that l2_shells_ was being populated at object construct time. This makes perfect sense if various fields used in constructing the libint2::shell were const, but they are not. Instead, we're migrating the libint2 construction to its own function so it can be called if these fields ever get changed, as #3036 does.; > ; > Is that all correct?. Yes. The point is that if you change data in BasisSet, the data in the Libint2 shells don't update, and one needs the ability to refresh that data as well based on the master data in BasisSet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3037#issuecomment-1695975377
https://github.com/psi4/psi4/pull/3043#issuecomment-1704340967:15,Deployability,patch,patch,15,"Thanks for the patch. The [Linux man page](https://man7.org/linux/man-pages/man2/gethostname.2.html) states that; > SUSv2 guarantees that ""Host names are limited to 255 bytes"". [On Windows the maximum length is 256 bytes](https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-gethostname). Also one can remove some of the hard-coding. I will file a PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3043#issuecomment-1704340967
https://github.com/psi4/psi4/pull/3043#issuecomment-1704340967:230,Usability,learn,learn,230,"Thanks for the patch. The [Linux man page](https://man7.org/linux/man-pages/man2/gethostname.2.html) states that; > SUSv2 guarantees that ""Host names are limited to 255 bytes"". [On Windows the maximum length is 256 bytes](https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-gethostname). Also one can remove some of the hard-coding. I will file a PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3043#issuecomment-1704340967
https://github.com/psi4/psi4/issues/3045#issuecomment-1706419961:653,Availability,down,down,653,"Actually, it sounds like there might be an issue in the code, although I am not sure if I fully understand stability analysis. > The instability analysis gave us the first two terms of the Taylor expansion, analytically. If you have minimized a second-order Taylor expansion, this means that you've solved the Newton-Raphson equations. Thus, in addition to having the *direction* of the instability vector, you should also have its **length**. That is, one should not have any user fed in length for the step!. Doing a line search in the direction of the instability is exactly what an orbital rotation optimizer can do. Unfortunately, I'm again pegged down by other projects...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706419961
https://github.com/psi4/psi4/issues/3045#issuecomment-1706419961:603,Performance,optimiz,optimizer,603,"Actually, it sounds like there might be an issue in the code, although I am not sure if I fully understand stability analysis. > The instability analysis gave us the first two terms of the Taylor expansion, analytically. If you have minimized a second-order Taylor expansion, this means that you've solved the Newton-Raphson equations. Thus, in addition to having the *direction* of the instability vector, you should also have its **length**. That is, one should not have any user fed in length for the step!. Doing a line search in the direction of the instability is exactly what an orbital rotation optimizer can do. Unfortunately, I'm again pegged down by other projects...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706419961
https://github.com/psi4/psi4/issues/3045#issuecomment-1706714963:468,Energy Efficiency,energy,energy,468,"I think you're confusing NR-root finding algorithms with instability following. Your answer makes sense only in the context of a different problem. In the instability following problem, we start at a saddle point and compute both a negative eigenvalue of the orbital Hessian and the corresponding eigenvector. The eigenvector gives us the search direction. In the search direction, an orbital instability analysis alone gives us a second-order Taylor expansion of the energy that is in the shape of a parabola. We are starting at its _maximum_ (because the eigenvalue is negative), and it possesses no minimum. The eigenvalue magnitude gives us the parabola steepness, but neither I nor Psi4 have any idea how to use that information to give us a step size. Hence the need for a user-supplied step length at present. The proposal here is that we use the energy and gradient information at another point along the line to fit the third and potentially fourth terms of the Taylor expansion, so we get a function that has a chance of having a minimum.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706714963
https://github.com/psi4/psi4/issues/3045#issuecomment-1706714963:854,Energy Efficiency,energy,energy,854,"I think you're confusing NR-root finding algorithms with instability following. Your answer makes sense only in the context of a different problem. In the instability following problem, we start at a saddle point and compute both a negative eigenvalue of the orbital Hessian and the corresponding eigenvector. The eigenvector gives us the search direction. In the search direction, an orbital instability analysis alone gives us a second-order Taylor expansion of the energy that is in the shape of a parabola. We are starting at its _maximum_ (because the eigenvalue is negative), and it possesses no minimum. The eigenvalue magnitude gives us the parabola steepness, but neither I nor Psi4 have any idea how to use that information to give us a step size. Hence the need for a user-supplied step length at present. The proposal here is that we use the energy and gradient information at another point along the line to fit the third and potentially fourth terms of the Taylor expansion, so we get a function that has a chance of having a minimum.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706714963
https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:390,Availability,toler,tolerance,390,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277
https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:557,Availability,down,downhill,557,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277
https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:1553,Availability,down,down,1553,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277
https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:227,Energy Efficiency,energy,energy,227,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277
https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:679,Energy Efficiency,energy,energy,679,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277
https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:830,Energy Efficiency,energy,energy,830,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277
https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:34,Performance,Perform,Perform,34,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277
https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:260,Safety,predict,prediction,260,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277
https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:331,Safety,predict,prediction,331,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277
https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:752,Safety,predict,prediction,752,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277
https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277:903,Safety,predict,prediction,903,"How about something like this:. - Perform SCF; - Check instability; - If unstable, rotate in the direction of the most unstable vector, according to some user-specified magnitude then...; - Compute the deviation of the new SCF energy from the 2nd order Taylor prediction, as well as the new SCF gradient; - If the 2nd order Taylor prediction was accurate enough (within some user-specified tolerance), and the magnitude of the gradient is within a comfortable range (another pair of parameters sadly...), then start SOSCF which should hopefully start going downhill.; - If the gradient is too low, increase the rotation magnitude, if too large decrease it. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, decrease rotation magnitude. Recompute the new SCF energy and gradient, repeat the checks above.; - If the 2nd order Taylor prediction was inaccurate, **and** the gradient is too low, accept the orbital rotation, recompute the orbital Hessian at the new location (which is no longer exactly a saddle point), and repeat the entire follow process, until we find a point we can start SOSCF from. This could of course get quite expensive if a lot of Hessian recomputes are required, and relies on SOSCF not climbing back up to the saddle point, but to me it sounds easier to implement. With that said, I cannot help but feel like we are trying to reinvent a wheel. Surely, one would think that other people have already spent a lot of time thinking about the best ways to climb down from saddle points.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706817277
https://github.com/psi4/psi4/issues/3045#issuecomment-1706844926:211,Availability,toler,tolerance,211,"1. I got this idea when talking to a graduate student who works on orbital solvers the other week. I can do a quick search for anything more ""standard,"" but I'm not expecting it to find anything.; 2. The energy tolerance is problematic in practice. A lot of the instabilities that I've seen are related to ghost atoms involving SAPT, which are prone to very small instabilities.; 3. I don't understand why your procedure is easier to implement. The fourth order could be tricky, but the third order is trivial. We have the first zero, first, and second order terms analytically from the original instability analysis, and we can fit the third order from the ""new SCF energy"" by a simple algebraic expression. Finding the stationary points is equivalent to factoring f'(x), and we already know (x-0) is one of the roots. It's an easy problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706844926
https://github.com/psi4/psi4/issues/3045#issuecomment-1706844926:204,Energy Efficiency,energy,energy,204,"1. I got this idea when talking to a graduate student who works on orbital solvers the other week. I can do a quick search for anything more ""standard,"" but I'm not expecting it to find anything.; 2. The energy tolerance is problematic in practice. A lot of the instabilities that I've seen are related to ghost atoms involving SAPT, which are prone to very small instabilities.; 3. I don't understand why your procedure is easier to implement. The fourth order could be tricky, but the third order is trivial. We have the first zero, first, and second order terms analytically from the original instability analysis, and we can fit the third order from the ""new SCF energy"" by a simple algebraic expression. Finding the stationary points is equivalent to factoring f'(x), and we already know (x-0) is one of the roots. It's an easy problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706844926
https://github.com/psi4/psi4/issues/3045#issuecomment-1706844926:667,Energy Efficiency,energy,energy,667,"1. I got this idea when talking to a graduate student who works on orbital solvers the other week. I can do a quick search for anything more ""standard,"" but I'm not expecting it to find anything.; 2. The energy tolerance is problematic in practice. A lot of the instabilities that I've seen are related to ghost atoms involving SAPT, which are prone to very small instabilities.; 3. I don't understand why your procedure is easier to implement. The fourth order could be tricky, but the third order is trivial. We have the first zero, first, and second order terms analytically from the original instability analysis, and we can fit the third order from the ""new SCF energy"" by a simple algebraic expression. Finding the stationary points is equivalent to factoring f'(x), and we already know (x-0) is one of the roots. It's an easy problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706844926
https://github.com/psi4/psi4/issues/3045#issuecomment-1706844926:680,Usability,simpl,simple,680,"1. I got this idea when talking to a graduate student who works on orbital solvers the other week. I can do a quick search for anything more ""standard,"" but I'm not expecting it to find anything.; 2. The energy tolerance is problematic in practice. A lot of the instabilities that I've seen are related to ghost atoms involving SAPT, which are prone to very small instabilities.; 3. I don't understand why your procedure is easier to implement. The fourth order could be tricky, but the third order is trivial. We have the first zero, first, and second order terms analytically from the original instability analysis, and we can fit the third order from the ""new SCF energy"" by a simple algebraic expression. Finding the stationary points is equivalent to factoring f'(x), and we already know (x-0) is one of the roots. It's an easy problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706844926
https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056:36,Performance,optimiz,optimization,36,"1. I was thinking about the broader optimization literature, not just SCF instabilities. The closest analogy to this problem may be where one is trying to start an IRC path from a saddle point, so the geometry optimization literature might have some ideas.; The machine learning folks have also been thinking about saddle point avoidance. [This paper](https://proceedings.neurips.cc/paper_files/paper/2014/file/17e23e50bedc63b4095e3d8204ce063b-Paper.pdf) discusses a generalized trust region method (they call it the ""saddle-free Newton""), which may be interesting, although it is more about not converging to saddle points, rather than starting out from them. 2. I was thinking about how trust region methods adjust their step size based on the mismatch between predicted and actual change in function value. I think in sufficiently flat regions numerical issues can hamstring any optimization method. 3. I think that is subjective to some extent, for me it sounded conceptually simpler. Amount of new code required is probably comparable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056
https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056:210,Performance,optimiz,optimization,210,"1. I was thinking about the broader optimization literature, not just SCF instabilities. The closest analogy to this problem may be where one is trying to start an IRC path from a saddle point, so the geometry optimization literature might have some ideas.; The machine learning folks have also been thinking about saddle point avoidance. [This paper](https://proceedings.neurips.cc/paper_files/paper/2014/file/17e23e50bedc63b4095e3d8204ce063b-Paper.pdf) discusses a generalized trust region method (they call it the ""saddle-free Newton""), which may be interesting, although it is more about not converging to saddle points, rather than starting out from them. 2. I was thinking about how trust region methods adjust their step size based on the mismatch between predicted and actual change in function value. I think in sufficiently flat regions numerical issues can hamstring any optimization method. 3. I think that is subjective to some extent, for me it sounded conceptually simpler. Amount of new code required is probably comparable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056
https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056:882,Performance,optimiz,optimization,882,"1. I was thinking about the broader optimization literature, not just SCF instabilities. The closest analogy to this problem may be where one is trying to start an IRC path from a saddle point, so the geometry optimization literature might have some ideas.; The machine learning folks have also been thinking about saddle point avoidance. [This paper](https://proceedings.neurips.cc/paper_files/paper/2014/file/17e23e50bedc63b4095e3d8204ce063b-Paper.pdf) discusses a generalized trust region method (they call it the ""saddle-free Newton""), which may be interesting, although it is more about not converging to saddle points, rather than starting out from them. 2. I was thinking about how trust region methods adjust their step size based on the mismatch between predicted and actual change in function value. I think in sufficiently flat regions numerical issues can hamstring any optimization method. 3. I think that is subjective to some extent, for me it sounded conceptually simpler. Amount of new code required is probably comparable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056
https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056:328,Safety,avoid,avoidance,328,"1. I was thinking about the broader optimization literature, not just SCF instabilities. The closest analogy to this problem may be where one is trying to start an IRC path from a saddle point, so the geometry optimization literature might have some ideas.; The machine learning folks have also been thinking about saddle point avoidance. [This paper](https://proceedings.neurips.cc/paper_files/paper/2014/file/17e23e50bedc63b4095e3d8204ce063b-Paper.pdf) discusses a generalized trust region method (they call it the ""saddle-free Newton""), which may be interesting, although it is more about not converging to saddle points, rather than starting out from them. 2. I was thinking about how trust region methods adjust their step size based on the mismatch between predicted and actual change in function value. I think in sufficiently flat regions numerical issues can hamstring any optimization method. 3. I think that is subjective to some extent, for me it sounded conceptually simpler. Amount of new code required is probably comparable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056
https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056:763,Safety,predict,predicted,763,"1. I was thinking about the broader optimization literature, not just SCF instabilities. The closest analogy to this problem may be where one is trying to start an IRC path from a saddle point, so the geometry optimization literature might have some ideas.; The machine learning folks have also been thinking about saddle point avoidance. [This paper](https://proceedings.neurips.cc/paper_files/paper/2014/file/17e23e50bedc63b4095e3d8204ce063b-Paper.pdf) discusses a generalized trust region method (they call it the ""saddle-free Newton""), which may be interesting, although it is more about not converging to saddle points, rather than starting out from them. 2. I was thinking about how trust region methods adjust their step size based on the mismatch between predicted and actual change in function value. I think in sufficiently flat regions numerical issues can hamstring any optimization method. 3. I think that is subjective to some extent, for me it sounded conceptually simpler. Amount of new code required is probably comparable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056
https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056:270,Usability,learn,learning,270,"1. I was thinking about the broader optimization literature, not just SCF instabilities. The closest analogy to this problem may be where one is trying to start an IRC path from a saddle point, so the geometry optimization literature might have some ideas.; The machine learning folks have also been thinking about saddle point avoidance. [This paper](https://proceedings.neurips.cc/paper_files/paper/2014/file/17e23e50bedc63b4095e3d8204ce063b-Paper.pdf) discusses a generalized trust region method (they call it the ""saddle-free Newton""), which may be interesting, although it is more about not converging to saddle points, rather than starting out from them. 2. I was thinking about how trust region methods adjust their step size based on the mismatch between predicted and actual change in function value. I think in sufficiently flat regions numerical issues can hamstring any optimization method. 3. I think that is subjective to some extent, for me it sounded conceptually simpler. Amount of new code required is probably comparable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056
https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056:980,Usability,simpl,simpler,980,"1. I was thinking about the broader optimization literature, not just SCF instabilities. The closest analogy to this problem may be where one is trying to start an IRC path from a saddle point, so the geometry optimization literature might have some ideas.; The machine learning folks have also been thinking about saddle point avoidance. [This paper](https://proceedings.neurips.cc/paper_files/paper/2014/file/17e23e50bedc63b4095e3d8204ce063b-Paper.pdf) discusses a generalized trust region method (they call it the ""saddle-free Newton""), which may be interesting, although it is more about not converging to saddle points, rather than starting out from them. 2. I was thinking about how trust region methods adjust their step size based on the mismatch between predicted and actual change in function value. I think in sufficiently flat regions numerical issues can hamstring any optimization method. 3. I think that is subjective to some extent, for me it sounded conceptually simpler. Amount of new code required is probably comparable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706963056
https://github.com/psi4/psi4/issues/3045#issuecomment-1706998523:162,Availability,robust,robust,162,"I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706998523
https://github.com/psi4/psi4/issues/3045#issuecomment-1706998523:237,Availability,robust,robust,237,"I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1706998523
https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:164,Availability,robust,robust,164,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470
https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:239,Availability,robust,robust,239,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470
https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:1328,Availability,robust,robust,1328,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470
https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:1488,Energy Efficiency,reduce,reduce,1488,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470
https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:1739,Energy Efficiency,energy,energy,1739,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470
https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:1091,Performance,optimiz,optimization,1091,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470
https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:1281,Safety,avoid,avoiding,1281,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470
https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:1718,Safety,predict,predicted,1718,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470
https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470:1145,Usability,learn,learning,1145,"> I honestly don't recognize what you're trying to contribute. Are you proposing a course of action? Are you listing potentially relevant considerations for a more robust solution? Are you trying to say that ""algorithms that are both more robust and harder to implement exist""?. I was trying to bounce some ideas off the community, in the hope that it would ultimately lead to a better solution. To some extent that included all three of the above. I am sorry if that was frustrating, will try to clarify. In my first post:; 1. I proposed an alternative algorithm, which I guess is a course of action.; 2. I highlighted two potential problems with my alternative algorithm.; 3. I suggested that looking for existing algorithms in the literature may lead to something better than any of the proposals here, mine included. In my second post:; 1. I interpreted your response as ""SCF instability literature is unlikely to have anything better"". So I tried to clarify that I meant that the broader literature might contain useful ideas, not just SCF instability literature, but also the geometry optimization literature and possibly even the machine learning literature.; 2. I suggested a particular paper and algorithm, which claims to be able to minimize functions effectively, while avoiding saddle points. This is the ""both more robust and harder to implement"" part. The idea that I should have explicitly written out, is that if it could be implemented as an SOSCF method, it may greatly reduce the chances of getting an unstable solution in the first place, which would make having smart SCF instability following less important.; 3. I was trying to explain what thought process has lead me to believe that using the predicted/actual SCF energy may be a good idea for checking the quality of the Taylor expansion. I hope no offense was caused.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707160470
https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955:872,Availability,down,down,872,"Right, I guess I was a bit tired. The Taylor expansion of the energy in the orbital rotation. $$ E(\boldsymbol{\theta})=E_{0}+\boldsymbol{\theta}\cdot\boldsymbol{g}+\frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} + \mathcal{O}(\boldsymbol{\theta}^3) $$. where . $$ \boldsymbol{g} = \nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital gradient and. $$ \boldsymbol{H} = \nabla_{\boldsymbol{\theta}}\nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital Hessian reduces to . $$ E(\boldsymbol{\theta}) \approx E_{0} + \frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} $$. around a SCF solution determined by $\boldsymbol{g}=\boldsymbol{0}$. Diagonalizing $\boldsymbol{H}$ only gives you directions $\boldsymbol{\theta}$ in which the energy goes up or down, and you need to conduct a line search to find the minimum along a direction of descent. The line search is pretty simple to carry out, though; you can use the quasiperiodicity of the orthogonal rotation matrix to determine a good trial step size, see e.g. our work on self-interaction corrected calculations in [J. Chem. Theory Comput. 12, 3195 (2016)](https://doi.org/10.1021/acs.jctc.6b00347). In my experience, a trial step of 1/5 of the shortest period of oscillation (see [Abrudan et al](https://doi.org/10.1016/j.sigpro.2009.03.015)) works well; this is slightly shorter than the theoretical value of 1/4: since you know that the function value is going down at zero step length (it is a descent direction), the minimum would be at pi/2 which is 1/4. Because of non-linear effects, the actual step should be shorter. Employing this trick is key to achieving robust convergence for orbital rotation techniques, and will be used throughout in my upcoming orbital optimizer library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955
https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955:1538,Availability,down,down,1538,"Right, I guess I was a bit tired. The Taylor expansion of the energy in the orbital rotation. $$ E(\boldsymbol{\theta})=E_{0}+\boldsymbol{\theta}\cdot\boldsymbol{g}+\frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} + \mathcal{O}(\boldsymbol{\theta}^3) $$. where . $$ \boldsymbol{g} = \nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital gradient and. $$ \boldsymbol{H} = \nabla_{\boldsymbol{\theta}}\nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital Hessian reduces to . $$ E(\boldsymbol{\theta}) \approx E_{0} + \frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} $$. around a SCF solution determined by $\boldsymbol{g}=\boldsymbol{0}$. Diagonalizing $\boldsymbol{H}$ only gives you directions $\boldsymbol{\theta}$ in which the energy goes up or down, and you need to conduct a line search to find the minimum along a direction of descent. The line search is pretty simple to carry out, though; you can use the quasiperiodicity of the orthogonal rotation matrix to determine a good trial step size, see e.g. our work on self-interaction corrected calculations in [J. Chem. Theory Comput. 12, 3195 (2016)](https://doi.org/10.1021/acs.jctc.6b00347). In my experience, a trial step of 1/5 of the shortest period of oscillation (see [Abrudan et al](https://doi.org/10.1016/j.sigpro.2009.03.015)) works well; this is slightly shorter than the theoretical value of 1/4: since you know that the function value is going down at zero step length (it is a descent direction), the minimum would be at pi/2 which is 1/4. Because of non-linear effects, the actual step should be shorter. Employing this trick is key to achieving robust convergence for orbital rotation techniques, and will be used throughout in my upcoming orbital optimizer library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955
https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955:1742,Availability,robust,robust,1742,"Right, I guess I was a bit tired. The Taylor expansion of the energy in the orbital rotation. $$ E(\boldsymbol{\theta})=E_{0}+\boldsymbol{\theta}\cdot\boldsymbol{g}+\frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} + \mathcal{O}(\boldsymbol{\theta}^3) $$. where . $$ \boldsymbol{g} = \nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital gradient and. $$ \boldsymbol{H} = \nabla_{\boldsymbol{\theta}}\nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital Hessian reduces to . $$ E(\boldsymbol{\theta}) \approx E_{0} + \frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} $$. around a SCF solution determined by $\boldsymbol{g}=\boldsymbol{0}$. Diagonalizing $\boldsymbol{H}$ only gives you directions $\boldsymbol{\theta}$ in which the energy goes up or down, and you need to conduct a line search to find the minimum along a direction of descent. The line search is pretty simple to carry out, though; you can use the quasiperiodicity of the orthogonal rotation matrix to determine a good trial step size, see e.g. our work on self-interaction corrected calculations in [J. Chem. Theory Comput. 12, 3195 (2016)](https://doi.org/10.1021/acs.jctc.6b00347). In my experience, a trial step of 1/5 of the shortest period of oscillation (see [Abrudan et al](https://doi.org/10.1016/j.sigpro.2009.03.015)) works well; this is slightly shorter than the theoretical value of 1/4: since you know that the function value is going down at zero step length (it is a descent direction), the minimum would be at pi/2 which is 1/4. Because of non-linear effects, the actual step should be shorter. Employing this trick is key to achieving robust convergence for orbital rotation techniques, and will be used throughout in my upcoming orbital optimizer library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955
https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955:62,Energy Efficiency,energy,energy,62,"Right, I guess I was a bit tired. The Taylor expansion of the energy in the orbital rotation. $$ E(\boldsymbol{\theta})=E_{0}+\boldsymbol{\theta}\cdot\boldsymbol{g}+\frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} + \mathcal{O}(\boldsymbol{\theta}^3) $$. where . $$ \boldsymbol{g} = \nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital gradient and. $$ \boldsymbol{H} = \nabla_{\boldsymbol{\theta}}\nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital Hessian reduces to . $$ E(\boldsymbol{\theta}) \approx E_{0} + \frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} $$. around a SCF solution determined by $\boldsymbol{g}=\boldsymbol{0}$. Diagonalizing $\boldsymbol{H}$ only gives you directions $\boldsymbol{\theta}$ in which the energy goes up or down, and you need to conduct a line search to find the minimum along a direction of descent. The line search is pretty simple to carry out, though; you can use the quasiperiodicity of the orthogonal rotation matrix to determine a good trial step size, see e.g. our work on self-interaction corrected calculations in [J. Chem. Theory Comput. 12, 3195 (2016)](https://doi.org/10.1021/acs.jctc.6b00347). In my experience, a trial step of 1/5 of the shortest period of oscillation (see [Abrudan et al](https://doi.org/10.1016/j.sigpro.2009.03.015)) works well; this is slightly shorter than the theoretical value of 1/4: since you know that the function value is going down at zero step length (it is a descent direction), the minimum would be at pi/2 which is 1/4. Because of non-linear effects, the actual step should be shorter. Employing this trick is key to achieving robust convergence for orbital rotation techniques, and will be used throughout in my upcoming orbital optimizer library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955
https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955:560,Energy Efficiency,reduce,reduces,560,"Right, I guess I was a bit tired. The Taylor expansion of the energy in the orbital rotation. $$ E(\boldsymbol{\theta})=E_{0}+\boldsymbol{\theta}\cdot\boldsymbol{g}+\frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} + \mathcal{O}(\boldsymbol{\theta}^3) $$. where . $$ \boldsymbol{g} = \nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital gradient and. $$ \boldsymbol{H} = \nabla_{\boldsymbol{\theta}}\nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital Hessian reduces to . $$ E(\boldsymbol{\theta}) \approx E_{0} + \frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} $$. around a SCF solution determined by $\boldsymbol{g}=\boldsymbol{0}$. Diagonalizing $\boldsymbol{H}$ only gives you directions $\boldsymbol{\theta}$ in which the energy goes up or down, and you need to conduct a line search to find the minimum along a direction of descent. The line search is pretty simple to carry out, though; you can use the quasiperiodicity of the orthogonal rotation matrix to determine a good trial step size, see e.g. our work on self-interaction corrected calculations in [J. Chem. Theory Comput. 12, 3195 (2016)](https://doi.org/10.1021/acs.jctc.6b00347). In my experience, a trial step of 1/5 of the shortest period of oscillation (see [Abrudan et al](https://doi.org/10.1016/j.sigpro.2009.03.015)) works well; this is slightly shorter than the theoretical value of 1/4: since you know that the function value is going down at zero step length (it is a descent direction), the minimum would be at pi/2 which is 1/4. Because of non-linear effects, the actual step should be shorter. Employing this trick is key to achieving robust convergence for orbital rotation techniques, and will be used throughout in my upcoming orbital optimizer library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955
https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955:854,Energy Efficiency,energy,energy,854,"Right, I guess I was a bit tired. The Taylor expansion of the energy in the orbital rotation. $$ E(\boldsymbol{\theta})=E_{0}+\boldsymbol{\theta}\cdot\boldsymbol{g}+\frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} + \mathcal{O}(\boldsymbol{\theta}^3) $$. where . $$ \boldsymbol{g} = \nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital gradient and. $$ \boldsymbol{H} = \nabla_{\boldsymbol{\theta}}\nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital Hessian reduces to . $$ E(\boldsymbol{\theta}) \approx E_{0} + \frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} $$. around a SCF solution determined by $\boldsymbol{g}=\boldsymbol{0}$. Diagonalizing $\boldsymbol{H}$ only gives you directions $\boldsymbol{\theta}$ in which the energy goes up or down, and you need to conduct a line search to find the minimum along a direction of descent. The line search is pretty simple to carry out, though; you can use the quasiperiodicity of the orthogonal rotation matrix to determine a good trial step size, see e.g. our work on self-interaction corrected calculations in [J. Chem. Theory Comput. 12, 3195 (2016)](https://doi.org/10.1021/acs.jctc.6b00347). In my experience, a trial step of 1/5 of the shortest period of oscillation (see [Abrudan et al](https://doi.org/10.1016/j.sigpro.2009.03.015)) works well; this is slightly shorter than the theoretical value of 1/4: since you know that the function value is going down at zero step length (it is a descent direction), the minimum would be at pi/2 which is 1/4. Because of non-linear effects, the actual step should be shorter. Employing this trick is key to achieving robust convergence for orbital rotation techniques, and will be used throughout in my upcoming orbital optimizer library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955
https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955:1845,Performance,optimiz,optimizer,1845,"Right, I guess I was a bit tired. The Taylor expansion of the energy in the orbital rotation. $$ E(\boldsymbol{\theta})=E_{0}+\boldsymbol{\theta}\cdot\boldsymbol{g}+\frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} + \mathcal{O}(\boldsymbol{\theta}^3) $$. where . $$ \boldsymbol{g} = \nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital gradient and. $$ \boldsymbol{H} = \nabla_{\boldsymbol{\theta}}\nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital Hessian reduces to . $$ E(\boldsymbol{\theta}) \approx E_{0} + \frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} $$. around a SCF solution determined by $\boldsymbol{g}=\boldsymbol{0}$. Diagonalizing $\boldsymbol{H}$ only gives you directions $\boldsymbol{\theta}$ in which the energy goes up or down, and you need to conduct a line search to find the minimum along a direction of descent. The line search is pretty simple to carry out, though; you can use the quasiperiodicity of the orthogonal rotation matrix to determine a good trial step size, see e.g. our work on self-interaction corrected calculations in [J. Chem. Theory Comput. 12, 3195 (2016)](https://doi.org/10.1021/acs.jctc.6b00347). In my experience, a trial step of 1/5 of the shortest period of oscillation (see [Abrudan et al](https://doi.org/10.1016/j.sigpro.2009.03.015)) works well; this is slightly shorter than the theoretical value of 1/4: since you know that the function value is going down at zero step length (it is a descent direction), the minimum would be at pi/2 which is 1/4. Because of non-linear effects, the actual step should be shorter. Employing this trick is key to achieving robust convergence for orbital rotation techniques, and will be used throughout in my upcoming orbital optimizer library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955
https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955:992,Usability,simpl,simple,992,"Right, I guess I was a bit tired. The Taylor expansion of the energy in the orbital rotation. $$ E(\boldsymbol{\theta})=E_{0}+\boldsymbol{\theta}\cdot\boldsymbol{g}+\frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} + \mathcal{O}(\boldsymbol{\theta}^3) $$. where . $$ \boldsymbol{g} = \nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital gradient and. $$ \boldsymbol{H} = \nabla_{\boldsymbol{\theta}}\nabla_{\boldsymbol{\theta}}E\Big|_{\boldsymbol{\theta}=\boldsymbol{0}} $$. is the orbital Hessian reduces to . $$ E(\boldsymbol{\theta}) \approx E_{0} + \frac{1}{2}\boldsymbol{\theta}\cdot\boldsymbol{H}\cdot\boldsymbol{\theta} $$. around a SCF solution determined by $\boldsymbol{g}=\boldsymbol{0}$. Diagonalizing $\boldsymbol{H}$ only gives you directions $\boldsymbol{\theta}$ in which the energy goes up or down, and you need to conduct a line search to find the minimum along a direction of descent. The line search is pretty simple to carry out, though; you can use the quasiperiodicity of the orthogonal rotation matrix to determine a good trial step size, see e.g. our work on self-interaction corrected calculations in [J. Chem. Theory Comput. 12, 3195 (2016)](https://doi.org/10.1021/acs.jctc.6b00347). In my experience, a trial step of 1/5 of the shortest period of oscillation (see [Abrudan et al](https://doi.org/10.1016/j.sigpro.2009.03.015)) works well; this is slightly shorter than the theoretical value of 1/4: since you know that the function value is going down at zero step length (it is a descent direction), the minimum would be at pi/2 which is 1/4. Because of non-linear effects, the actual step should be shorter. Employing this trick is key to achieving robust convergence for orbital rotation techniques, and will be used throughout in my upcoming orbital optimizer library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3045#issuecomment-1707919955
https://github.com/psi4/psi4/issues/3046#issuecomment-1706625052:32,Deployability,install,installing,32,I managed to solve the issue by installing psi4 **first** using only conda channels. `mamba install psi4 -c conda-forge/label/libint_dev -c conda-forge`. and then installing open-ff with. `mamba install -c conda-forge openff-toolkit`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3046#issuecomment-1706625052
https://github.com/psi4/psi4/issues/3046#issuecomment-1706625052:92,Deployability,install,install,92,I managed to solve the issue by installing psi4 **first** using only conda channels. `mamba install psi4 -c conda-forge/label/libint_dev -c conda-forge`. and then installing open-ff with. `mamba install -c conda-forge openff-toolkit`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3046#issuecomment-1706625052
https://github.com/psi4/psi4/issues/3046#issuecomment-1706625052:163,Deployability,install,installing,163,I managed to solve the issue by installing psi4 **first** using only conda channels. `mamba install psi4 -c conda-forge/label/libint_dev -c conda-forge`. and then installing open-ff with. `mamba install -c conda-forge openff-toolkit`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3046#issuecomment-1706625052
https://github.com/psi4/psi4/issues/3046#issuecomment-1706625052:195,Deployability,install,install,195,I managed to solve the issue by installing psi4 **first** using only conda channels. `mamba install psi4 -c conda-forge/label/libint_dev -c conda-forge`. and then installing open-ff with. `mamba install -c conda-forge openff-toolkit`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3046#issuecomment-1706625052
https://github.com/psi4/psi4/issues/3046#issuecomment-1706634544:178,Deployability,install,install,178,"Probably what's happening is that psi4 is packaged only with MKL (except for Apple Silicon) and OpenFF is flexible in BLAS, but conda-forge defaults to OpenBLAS. So one needs to install both together or install psi4 and then openff, as you worked out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3046#issuecomment-1706634544
https://github.com/psi4/psi4/issues/3046#issuecomment-1706634544:203,Deployability,install,install,203,"Probably what's happening is that psi4 is packaged only with MKL (except for Apple Silicon) and OpenFF is flexible in BLAS, but conda-forge defaults to OpenBLAS. So one needs to install both together or install psi4 and then openff, as you worked out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3046#issuecomment-1706634544
https://github.com/psi4/psi4/issues/3046#issuecomment-1706634544:106,Modifiability,flexible,flexible,106,"Probably what's happening is that psi4 is packaged only with MKL (except for Apple Silicon) and OpenFF is flexible in BLAS, but conda-forge defaults to OpenBLAS. So one needs to install both together or install psi4 and then openff, as you worked out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3046#issuecomment-1706634544
https://github.com/psi4/psi4/issues/3046#issuecomment-1706690051:6,Deployability,install,installing,6,"+1 to installing both at the same time, ideally just at environment creation",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3046#issuecomment-1706690051
https://github.com/psi4/psi4/issues/3051#issuecomment-1736077565:290,Energy Efficiency,energy,energy,290,"It also might be an issue with the functional. In my experience with finite element calculations, the B97 functionals are not very well-behaved numerically. I would not be surprised if this was also a case where the functional is so un-smooth that it produces a Fock matrix that causes the energy to blow up. You can try adding damping or switching to another functional. You might have better success by preconverging the orbitals with something else like HF or a simpler density functional.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1736077565
https://github.com/psi4/psi4/issues/3051#issuecomment-1736077565:465,Usability,simpl,simpler,465,"It also might be an issue with the functional. In my experience with finite element calculations, the B97 functionals are not very well-behaved numerically. I would not be surprised if this was also a case where the functional is so un-smooth that it produces a Fock matrix that causes the energy to blow up. You can try adding damping or switching to another functional. You might have better success by preconverging the orbitals with something else like HF or a simpler density functional.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1736077565
https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430:553,Availability,fault,fault,553,"Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your patience. Between some life changes and issues compiling Psi4, I haven't been able to look at this issue previously. 1. Following Susi's suggestion, B3LYP converges straightforwardly. The SCF iterations takes one bad step early on, but this happens whether ADIIS is on or off.; 2. If I disable ADIIS completely using your original functional, it _still_ fails. Once the energy gets to around 284 Eh, it doesn't become negative again. **Contrary to the topic title, ADIIS is not at fault**.; 3. The title suggests that you've had previous ADIIS issues previously. If so, please send me specific examples. My experience has been that ADIIS itself is fine, but can break when other parts of the code are badly behaved. I'll do some digging to see if I can suggest an alternate protocol that will actually converge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430
https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430:442,Energy Efficiency,energy,energy,442,"Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your patience. Between some life changes and issues compiling Psi4, I haven't been able to look at this issue previously. 1. Following Susi's suggestion, B3LYP converges straightforwardly. The SCF iterations takes one bad step early on, but this happens whether ADIIS is on or off.; 2. If I disable ADIIS completely using your original functional, it _still_ fails. Once the energy gets to around 284 Eh, it doesn't become negative again. **Contrary to the topic title, ADIIS is not at fault**.; 3. The title suggests that you've had previous ADIIS issues previously. If so, please send me specific examples. My experience has been that ADIIS itself is fine, but can break when other parts of the code are badly behaved. I'll do some digging to see if I can suggest an alternate protocol that will actually converge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430
https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430:846,Integrability,protocol,protocol,846,"Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your patience. Between some life changes and issues compiling Psi4, I haven't been able to look at this issue previously. 1. Following Susi's suggestion, B3LYP converges straightforwardly. The SCF iterations takes one bad step early on, but this happens whether ADIIS is on or off.; 2. If I disable ADIIS completely using your original functional, it _still_ fails. Once the energy gets to around 284 Eh, it doesn't become negative again. **Contrary to the topic title, ADIIS is not at fault**.; 3. The title suggests that you've had previous ADIIS issues previously. If so, please send me specific examples. My experience has been that ADIIS itself is fine, but can break when other parts of the code are badly behaved. I'll do some digging to see if I can suggest an alternate protocol that will actually converge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430
https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476:870,Availability,failure,failure,870,"Sorry, for (3), I meant how the code specifically tells you to file an; ADIIS bug if you get this, and looking through the history there's been a; number of (unrelated) bugs that also hit ADIIS issues (and, as you've; pointed out, often because something *else* went haywire). (2) seems reasonable to me. I'll play with some other settings, seeing if; turning off density-fitting or changing the grid prods things. I've run the; same calc in Orca which seems to go alright; both use LibXC for wb97M-V,; though Orca has its own VV10 impl. I'll see if non-self-consistent VV10; hits the same issue; if not, I'll play with the VV10 grid settings, too. I do have some other calculations in this dataset with perfectly reasonable; geometries which failed due to ""ADIIS"", which I'd like to sort out. I; suspect they may have a common cause in whatever *actually* caused this; failure, and I'll see what I can dig up. On Thu, Oct 5, 2023 at 9:44 AM Jonathon Misiewicz ***@***.***>; wrote:. > Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your; > patience. Between some life changes and issues compiling Psi4, I haven't; > been able to look at this issue previously.; >; > 1. Following Susi's suggestion, B3LYP converges straightforwardly. The; > SCF iterations takes one bad step early on, but this happens whether ADIIS; > is on or off.; > 2. If I disable ADIIS completely using your original functional, it; > *still* fails. Once the energy gets to around 284 Eh, it doesn't; > become negative again. *Contrary to the topic title, ADIIS is not at; > fault*.; > 3. The title suggests that you've had previous ADIIS issues; > previously. If so, please send me specific examples. My experience has been; > that ADIIS itself is fine, but can break when other parts of the code are; > badly behaved.; >; > I'll do some digging to see if I can suggest an alternate protocol that; > will actually converge.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476
https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476:1566,Availability,fault,fault,1566," some other settings, seeing if; turning off density-fitting or changing the grid prods things. I've run the; same calc in Orca which seems to go alright; both use LibXC for wb97M-V,; though Orca has its own VV10 impl. I'll see if non-self-consistent VV10; hits the same issue; if not, I'll play with the VV10 grid settings, too. I do have some other calculations in this dataset with perfectly reasonable; geometries which failed due to ""ADIIS"", which I'd like to sort out. I; suspect they may have a common cause in whatever *actually* caused this; failure, and I'll see what I can dig up. On Thu, Oct 5, 2023 at 9:44 AM Jonathon Misiewicz ***@***.***>; wrote:. > Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your; > patience. Between some life changes and issues compiling Psi4, I haven't; > been able to look at this issue previously.; >; > 1. Following Susi's suggestion, B3LYP converges straightforwardly. The; > SCF iterations takes one bad step early on, but this happens whether ADIIS; > is on or off.; > 2. If I disable ADIIS completely using your original functional, it; > *still* fails. Once the energy gets to around 284 Eh, it doesn't; > become negative again. *Contrary to the topic title, ADIIS is not at; > fault*.; > 3. The title suggests that you've had previous ADIIS issues; > previously. If so, please send me specific examples. My experience has been; > that ADIIS itself is fine, but can break when other parts of the code are; > badly behaved.; >; > I'll do some digging to see if I can suggest an alternate protocol that; > will actually converge.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABTN7JEC2WPIX354RHZG4ZTX522TPAVCNFSM6AAAAAA5H47C7WVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTONBYHEZTCNBTGA>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476
https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476:1450,Energy Efficiency,energy,energy,1450," some other settings, seeing if; turning off density-fitting or changing the grid prods things. I've run the; same calc in Orca which seems to go alright; both use LibXC for wb97M-V,; though Orca has its own VV10 impl. I'll see if non-self-consistent VV10; hits the same issue; if not, I'll play with the VV10 grid settings, too. I do have some other calculations in this dataset with perfectly reasonable; geometries which failed due to ""ADIIS"", which I'd like to sort out. I; suspect they may have a common cause in whatever *actually* caused this; failure, and I'll see what I can dig up. On Thu, Oct 5, 2023 at 9:44 AM Jonathon Misiewicz ***@***.***>; wrote:. > Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your; > patience. Between some life changes and issues compiling Psi4, I haven't; > been able to look at this issue previously.; >; > 1. Following Susi's suggestion, B3LYP converges straightforwardly. The; > SCF iterations takes one bad step early on, but this happens whether ADIIS; > is on or off.; > 2. If I disable ADIIS completely using your original functional, it; > *still* fails. Once the energy gets to around 284 Eh, it doesn't; > become negative again. *Contrary to the topic title, ADIIS is not at; > fault*.; > 3. The title suggests that you've had previous ADIIS issues; > previously. If so, please send me specific examples. My experience has been; > that ADIIS itself is fine, but can break when other parts of the code are; > badly behaved.; >; > I'll do some digging to see if I can suggest an alternate protocol that; > will actually converge.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABTN7JEC2WPIX354RHZG4ZTX522TPAVCNFSM6AAAAAA5H47C7WVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTONBYHEZTCNBTGA>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476
https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476:1875,Integrability,protocol,protocol,1875," some other settings, seeing if; turning off density-fitting or changing the grid prods things. I've run the; same calc in Orca which seems to go alright; both use LibXC for wb97M-V,; though Orca has its own VV10 impl. I'll see if non-self-consistent VV10; hits the same issue; if not, I'll play with the VV10 grid settings, too. I do have some other calculations in this dataset with perfectly reasonable; geometries which failed due to ""ADIIS"", which I'd like to sort out. I; suspect they may have a common cause in whatever *actually* caused this; failure, and I'll see what I can dig up. On Thu, Oct 5, 2023 at 9:44 AM Jonathon Misiewicz ***@***.***>; wrote:. > Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your; > patience. Between some life changes and issues compiling Psi4, I haven't; > been able to look at this issue previously.; >; > 1. Following Susi's suggestion, B3LYP converges straightforwardly. The; > SCF iterations takes one bad step early on, but this happens whether ADIIS; > is on or off.; > 2. If I disable ADIIS completely using your original functional, it; > *still* fails. Once the energy gets to around 284 Eh, it doesn't; > become negative again. *Contrary to the topic title, ADIIS is not at; > fault*.; > 3. The title suggests that you've had previous ADIIS issues; > previously. If so, please send me specific examples. My experience has been; > that ADIIS itself is fine, but can break when other parts of the code are; > badly behaved.; >; > I'll do some digging to see if I can suggest an alternate protocol that; > will actually converge.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABTN7JEC2WPIX354RHZG4ZTX522TPAVCNFSM6AAAAAA5H47C7WVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTONBYHEZTCNBTGA>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476
https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476:2289,Integrability,Message,Message,2289," some other settings, seeing if; turning off density-fitting or changing the grid prods things. I've run the; same calc in Orca which seems to go alright; both use LibXC for wb97M-V,; though Orca has its own VV10 impl. I'll see if non-self-consistent VV10; hits the same issue; if not, I'll play with the VV10 grid settings, too. I do have some other calculations in this dataset with perfectly reasonable; geometries which failed due to ""ADIIS"", which I'd like to sort out. I; suspect they may have a common cause in whatever *actually* caused this; failure, and I'll see what I can dig up. On Thu, Oct 5, 2023 at 9:44 AM Jonathon Misiewicz ***@***.***>; wrote:. > Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your; > patience. Between some life changes and issues compiling Psi4, I haven't; > been able to look at this issue previously.; >; > 1. Following Susi's suggestion, B3LYP converges straightforwardly. The; > SCF iterations takes one bad step early on, but this happens whether ADIIS; > is on or off.; > 2. If I disable ADIIS completely using your original functional, it; > *still* fails. Once the energy gets to around 284 Eh, it doesn't; > become negative again. *Contrary to the topic title, ADIIS is not at; > fault*.; > 3. The title suggests that you've had previous ADIIS issues; > previously. If so, please send me specific examples. My experience has been; > that ADIIS itself is fine, but can break when other parts of the code are; > badly behaved.; >; > I'll do some digging to see if I can suggest an alternate protocol that; > will actually converge.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABTN7JEC2WPIX354RHZG4ZTX522TPAVCNFSM6AAAAAA5H47C7WVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTONBYHEZTCNBTGA>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476
https://github.com/psi4/psi4/issues/3051#issuecomment-1748955323:231,Availability,error,error,231,"Sounds good! @susilehtola's diagnosis of a badly behaved numerical functional sounds viable to me. He's more knowledgeable about how to treat such situations than I am. And yes, I'm starting to think I should amend the ADIIS/EDIIS error message to explicitly mention that something else is the usual culprit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748955323
https://github.com/psi4/psi4/issues/3051#issuecomment-1748955323:237,Integrability,message,message,237,"Sounds good! @susilehtola's diagnosis of a badly behaved numerical functional sounds viable to me. He's more knowledgeable about how to treat such situations than I am. And yes, I'm starting to think I should amend the ADIIS/EDIIS error message to explicitly mention that something else is the usual culprit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748955323
https://github.com/psi4/psi4/issues/3057#issuecomment-1769298953:120,Availability,down,downstream,120,"Currently, I have been looking at featurizing frontier orbitals and electron densities in their 3d coordinate space for downstream processing in the context of small molecule binding. There was a function to do this in pyscf that was fairly straightforward, but I didn't find an in memory solution in psi4. The cube files work great, but I was just curious if there was a solution that could be done in memory, due to the io costs at scale.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3057#issuecomment-1769298953
https://github.com/psi4/psi4/pull/3060#issuecomment-2165562096:896,Testability,log,logic,896,"> I agree with all your PR headmatter text, but (1) I'm not quite following how the screening=None case is different in the code. If screening!=None, setup_sieve is calling c_s_p_i() (create_sieve_pair_info no args) which in turn calls c_s_p_i(bs) or throws. If screening==None, setup_sieve isn't calling any c_s_p_i in the parent class, but the frontmatter text suggests c_s_p_i() is getting called in the initialize_sieve() fn in the derived L2 class for the screening=None. If that's right, is the difference in the timing of the calls and whether some cutoff or threshold member data has been set? Or more likely I'm entirely missing something. The big difference is that the code associated with `c_s_p_i()` is called _at all_ when `ScreeningType::None` is used in the current PR, where it is _not_ in the current iteration of Psi4. . In both versions of the code, you are right in that the logic associated with `c_s_p_i()` isn't called within `setup_sieve()` in either this PR or current Psi4 when `ScreeningType::None` is used. However, because `c_s_p_i()` is only ever called within `setup_sieve()` currently, this means that the logic associated with `c_s_p_i()` is _never_ called when `ScreeningType::None` is used. This leaves a lot of values that are uninitialized because they are initialized by the `c_s_p_i()` logic; and these values are commonly needed in the various JK objects. This leads to a lot of breakage. . The `initialize_sieve()` function fixes this problem by adding a second point at which the logic for `c_s_p_i()` can be called. Now, the logic for `c_s_p_i()` can actually be executed at all with `ScreeningType::None`, given that `initialize_sieve()` is also called.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165562096
https://github.com/psi4/psi4/pull/3060#issuecomment-2165562096:1139,Testability,log,logic,1139,"> I agree with all your PR headmatter text, but (1) I'm not quite following how the screening=None case is different in the code. If screening!=None, setup_sieve is calling c_s_p_i() (create_sieve_pair_info no args) which in turn calls c_s_p_i(bs) or throws. If screening==None, setup_sieve isn't calling any c_s_p_i in the parent class, but the frontmatter text suggests c_s_p_i() is getting called in the initialize_sieve() fn in the derived L2 class for the screening=None. If that's right, is the difference in the timing of the calls and whether some cutoff or threshold member data has been set? Or more likely I'm entirely missing something. The big difference is that the code associated with `c_s_p_i()` is called _at all_ when `ScreeningType::None` is used in the current PR, where it is _not_ in the current iteration of Psi4. . In both versions of the code, you are right in that the logic associated with `c_s_p_i()` isn't called within `setup_sieve()` in either this PR or current Psi4 when `ScreeningType::None` is used. However, because `c_s_p_i()` is only ever called within `setup_sieve()` currently, this means that the logic associated with `c_s_p_i()` is _never_ called when `ScreeningType::None` is used. This leaves a lot of values that are uninitialized because they are initialized by the `c_s_p_i()` logic; and these values are commonly needed in the various JK objects. This leads to a lot of breakage. . The `initialize_sieve()` function fixes this problem by adding a second point at which the logic for `c_s_p_i()` can be called. Now, the logic for `c_s_p_i()` can actually be executed at all with `ScreeningType::None`, given that `initialize_sieve()` is also called.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165562096
https://github.com/psi4/psi4/pull/3060#issuecomment-2165562096:1326,Testability,log,logic,1326,"> I agree with all your PR headmatter text, but (1) I'm not quite following how the screening=None case is different in the code. If screening!=None, setup_sieve is calling c_s_p_i() (create_sieve_pair_info no args) which in turn calls c_s_p_i(bs) or throws. If screening==None, setup_sieve isn't calling any c_s_p_i in the parent class, but the frontmatter text suggests c_s_p_i() is getting called in the initialize_sieve() fn in the derived L2 class for the screening=None. If that's right, is the difference in the timing of the calls and whether some cutoff or threshold member data has been set? Or more likely I'm entirely missing something. The big difference is that the code associated with `c_s_p_i()` is called _at all_ when `ScreeningType::None` is used in the current PR, where it is _not_ in the current iteration of Psi4. . In both versions of the code, you are right in that the logic associated with `c_s_p_i()` isn't called within `setup_sieve()` in either this PR or current Psi4 when `ScreeningType::None` is used. However, because `c_s_p_i()` is only ever called within `setup_sieve()` currently, this means that the logic associated with `c_s_p_i()` is _never_ called when `ScreeningType::None` is used. This leaves a lot of values that are uninitialized because they are initialized by the `c_s_p_i()` logic; and these values are commonly needed in the various JK objects. This leads to a lot of breakage. . The `initialize_sieve()` function fixes this problem by adding a second point at which the logic for `c_s_p_i()` can be called. Now, the logic for `c_s_p_i()` can actually be executed at all with `ScreeningType::None`, given that `initialize_sieve()` is also called.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165562096
https://github.com/psi4/psi4/pull/3060#issuecomment-2165562096:1523,Testability,log,logic,1523,"> I agree with all your PR headmatter text, but (1) I'm not quite following how the screening=None case is different in the code. If screening!=None, setup_sieve is calling c_s_p_i() (create_sieve_pair_info no args) which in turn calls c_s_p_i(bs) or throws. If screening==None, setup_sieve isn't calling any c_s_p_i in the parent class, but the frontmatter text suggests c_s_p_i() is getting called in the initialize_sieve() fn in the derived L2 class for the screening=None. If that's right, is the difference in the timing of the calls and whether some cutoff or threshold member data has been set? Or more likely I'm entirely missing something. The big difference is that the code associated with `c_s_p_i()` is called _at all_ when `ScreeningType::None` is used in the current PR, where it is _not_ in the current iteration of Psi4. . In both versions of the code, you are right in that the logic associated with `c_s_p_i()` isn't called within `setup_sieve()` in either this PR or current Psi4 when `ScreeningType::None` is used. However, because `c_s_p_i()` is only ever called within `setup_sieve()` currently, this means that the logic associated with `c_s_p_i()` is _never_ called when `ScreeningType::None` is used. This leaves a lot of values that are uninitialized because they are initialized by the `c_s_p_i()` logic; and these values are commonly needed in the various JK objects. This leads to a lot of breakage. . The `initialize_sieve()` function fixes this problem by adding a second point at which the logic for `c_s_p_i()` can be called. Now, the logic for `c_s_p_i()` can actually be executed at all with `ScreeningType::None`, given that `initialize_sieve()` is also called.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165562096
https://github.com/psi4/psi4/pull/3060#issuecomment-2165562096:1569,Testability,log,logic,1569,"> I agree with all your PR headmatter text, but (1) I'm not quite following how the screening=None case is different in the code. If screening!=None, setup_sieve is calling c_s_p_i() (create_sieve_pair_info no args) which in turn calls c_s_p_i(bs) or throws. If screening==None, setup_sieve isn't calling any c_s_p_i in the parent class, but the frontmatter text suggests c_s_p_i() is getting called in the initialize_sieve() fn in the derived L2 class for the screening=None. If that's right, is the difference in the timing of the calls and whether some cutoff or threshold member data has been set? Or more likely I'm entirely missing something. The big difference is that the code associated with `c_s_p_i()` is called _at all_ when `ScreeningType::None` is used in the current PR, where it is _not_ in the current iteration of Psi4. . In both versions of the code, you are right in that the logic associated with `c_s_p_i()` isn't called within `setup_sieve()` in either this PR or current Psi4 when `ScreeningType::None` is used. However, because `c_s_p_i()` is only ever called within `setup_sieve()` currently, this means that the logic associated with `c_s_p_i()` is _never_ called when `ScreeningType::None` is used. This leaves a lot of values that are uninitialized because they are initialized by the `c_s_p_i()` logic; and these values are commonly needed in the various JK objects. This leads to a lot of breakage. . The `initialize_sieve()` function fixes this problem by adding a second point at which the logic for `c_s_p_i()` can be called. Now, the logic for `c_s_p_i()` can actually be executed at all with `ScreeningType::None`, given that `initialize_sieve()` is also called.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165562096
https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826:297,Modifiability,variab,variable,297,">(2) The creation of a c_s_p_i() signature whose purpose is to perform various logic and then to call the existing c_s_p_i(bs) signature seems a little weird to me.` . `c_s_p_i()` encapsulates the logic that was previously performed in `setup_sieve`, after the initialization of the `sieve_impl_` variable, into its own function. This makes it easier to call the logic both from `initialize_sieve()` (when `ScreeningType::None` is used) and `setup_sieve()` (when `ScreeningType::None` is not used). Perhaps this could be refactored in a more elegant way, however. >Then there's initialize_sieve() whose whole purpose is to call c_s_p_i() but whose names aren't related? I've diagrammed the old (left) and new (right) setups below as I see them. Sorry for the scratch paper.`. No worries! Tehnically, `Libint2TwoElectronInt::initialize_sieve()` does things aside from calling `c_s_p_i()` (basically everything in `Libint2TwoElectronInt::common_init()` after `setup_sieve()` is called as well), but again, I'm open to better ways to implement this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826
https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826:521,Modifiability,refactor,refactored,521,">(2) The creation of a c_s_p_i() signature whose purpose is to perform various logic and then to call the existing c_s_p_i(bs) signature seems a little weird to me.` . `c_s_p_i()` encapsulates the logic that was previously performed in `setup_sieve`, after the initialization of the `sieve_impl_` variable, into its own function. This makes it easier to call the logic both from `initialize_sieve()` (when `ScreeningType::None` is used) and `setup_sieve()` (when `ScreeningType::None` is not used). Perhaps this could be refactored in a more elegant way, however. >Then there's initialize_sieve() whose whole purpose is to call c_s_p_i() but whose names aren't related? I've diagrammed the old (left) and new (right) setups below as I see them. Sorry for the scratch paper.`. No worries! Tehnically, `Libint2TwoElectronInt::initialize_sieve()` does things aside from calling `c_s_p_i()` (basically everything in `Libint2TwoElectronInt::common_init()` after `setup_sieve()` is called as well), but again, I'm open to better ways to implement this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826
https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826:63,Performance,perform,perform,63,">(2) The creation of a c_s_p_i() signature whose purpose is to perform various logic and then to call the existing c_s_p_i(bs) signature seems a little weird to me.` . `c_s_p_i()` encapsulates the logic that was previously performed in `setup_sieve`, after the initialization of the `sieve_impl_` variable, into its own function. This makes it easier to call the logic both from `initialize_sieve()` (when `ScreeningType::None` is used) and `setup_sieve()` (when `ScreeningType::None` is not used). Perhaps this could be refactored in a more elegant way, however. >Then there's initialize_sieve() whose whole purpose is to call c_s_p_i() but whose names aren't related? I've diagrammed the old (left) and new (right) setups below as I see them. Sorry for the scratch paper.`. No worries! Tehnically, `Libint2TwoElectronInt::initialize_sieve()` does things aside from calling `c_s_p_i()` (basically everything in `Libint2TwoElectronInt::common_init()` after `setup_sieve()` is called as well), but again, I'm open to better ways to implement this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826
https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826:223,Performance,perform,performed,223,">(2) The creation of a c_s_p_i() signature whose purpose is to perform various logic and then to call the existing c_s_p_i(bs) signature seems a little weird to me.` . `c_s_p_i()` encapsulates the logic that was previously performed in `setup_sieve`, after the initialization of the `sieve_impl_` variable, into its own function. This makes it easier to call the logic both from `initialize_sieve()` (when `ScreeningType::None` is used) and `setup_sieve()` (when `ScreeningType::None` is not used). Perhaps this could be refactored in a more elegant way, however. >Then there's initialize_sieve() whose whole purpose is to call c_s_p_i() but whose names aren't related? I've diagrammed the old (left) and new (right) setups below as I see them. Sorry for the scratch paper.`. No worries! Tehnically, `Libint2TwoElectronInt::initialize_sieve()` does things aside from calling `c_s_p_i()` (basically everything in `Libint2TwoElectronInt::common_init()` after `setup_sieve()` is called as well), but again, I'm open to better ways to implement this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826
https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826:79,Testability,log,logic,79,">(2) The creation of a c_s_p_i() signature whose purpose is to perform various logic and then to call the existing c_s_p_i(bs) signature seems a little weird to me.` . `c_s_p_i()` encapsulates the logic that was previously performed in `setup_sieve`, after the initialization of the `sieve_impl_` variable, into its own function. This makes it easier to call the logic both from `initialize_sieve()` (when `ScreeningType::None` is used) and `setup_sieve()` (when `ScreeningType::None` is not used). Perhaps this could be refactored in a more elegant way, however. >Then there's initialize_sieve() whose whole purpose is to call c_s_p_i() but whose names aren't related? I've diagrammed the old (left) and new (right) setups below as I see them. Sorry for the scratch paper.`. No worries! Tehnically, `Libint2TwoElectronInt::initialize_sieve()` does things aside from calling `c_s_p_i()` (basically everything in `Libint2TwoElectronInt::common_init()` after `setup_sieve()` is called as well), but again, I'm open to better ways to implement this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826
https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826:197,Testability,log,logic,197,">(2) The creation of a c_s_p_i() signature whose purpose is to perform various logic and then to call the existing c_s_p_i(bs) signature seems a little weird to me.` . `c_s_p_i()` encapsulates the logic that was previously performed in `setup_sieve`, after the initialization of the `sieve_impl_` variable, into its own function. This makes it easier to call the logic both from `initialize_sieve()` (when `ScreeningType::None` is used) and `setup_sieve()` (when `ScreeningType::None` is not used). Perhaps this could be refactored in a more elegant way, however. >Then there's initialize_sieve() whose whole purpose is to call c_s_p_i() but whose names aren't related? I've diagrammed the old (left) and new (right) setups below as I see them. Sorry for the scratch paper.`. No worries! Tehnically, `Libint2TwoElectronInt::initialize_sieve()` does things aside from calling `c_s_p_i()` (basically everything in `Libint2TwoElectronInt::common_init()` after `setup_sieve()` is called as well), but again, I'm open to better ways to implement this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826
https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826:363,Testability,log,logic,363,">(2) The creation of a c_s_p_i() signature whose purpose is to perform various logic and then to call the existing c_s_p_i(bs) signature seems a little weird to me.` . `c_s_p_i()` encapsulates the logic that was previously performed in `setup_sieve`, after the initialization of the `sieve_impl_` variable, into its own function. This makes it easier to call the logic both from `initialize_sieve()` (when `ScreeningType::None` is used) and `setup_sieve()` (when `ScreeningType::None` is not used). Perhaps this could be refactored in a more elegant way, however. >Then there's initialize_sieve() whose whole purpose is to call c_s_p_i() but whose names aren't related? I've diagrammed the old (left) and new (right) setups below as I see them. Sorry for the scratch paper.`. No worries! Tehnically, `Libint2TwoElectronInt::initialize_sieve()` does things aside from calling `c_s_p_i()` (basically everything in `Libint2TwoElectronInt::common_init()` after `setup_sieve()` is called as well), but again, I'm open to better ways to implement this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826
https://github.com/psi4/psi4/pull/3060#issuecomment-2331738677:1225,Usability,undo,undoubtedly,1225,"So there is something that has long bothered me about this PR, and I want to bring it up because I consider it rather important, and I am unsure of how to best address it. And that is the interaction between the `SCREENING=NONE` keyword option and the CompositeJK methods. Currently, the composite Psi4 methods are in this weird limbo where integral screening occurs both within the `TwoBodyAOInt` object, and within the composite method itself. This is, presumably, undesirable. And here, it opens the question of how to best handle how composite methods behave when `SCREENING=NONE` is set. There are two options:. 1. `SCREENING=NONE` disables integral screening only within `TwoBodyAOInt`, while composite method-side screening can be disabled by setting the corresponding `INTS_TOLERANCE` value to 0.0. This is very unintuitive, and something I could easily see throwing someone off in the future (because `SCREENING=NONE` could technically still do integral screening in composite methods). But this at least allows for composite methods to be run without integral screening via `TwoBodyAOInt` easily.; 2. `SCREENING=NONE` disables integral screening both within `TwoBodyAOInt` and within the composite methods. This is undoubtedly the most intuitive behavior, but doesn't address the aforementioned issue where integral screening occurs both in `TwoBodyAOInt` and composite methods. What do you all think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2331738677
https://github.com/psi4/psi4/pull/3060#issuecomment-2331738677:1246,Usability,intuit,intuitive,1246,"So there is something that has long bothered me about this PR, and I want to bring it up because I consider it rather important, and I am unsure of how to best address it. And that is the interaction between the `SCREENING=NONE` keyword option and the CompositeJK methods. Currently, the composite Psi4 methods are in this weird limbo where integral screening occurs both within the `TwoBodyAOInt` object, and within the composite method itself. This is, presumably, undesirable. And here, it opens the question of how to best handle how composite methods behave when `SCREENING=NONE` is set. There are two options:. 1. `SCREENING=NONE` disables integral screening only within `TwoBodyAOInt`, while composite method-side screening can be disabled by setting the corresponding `INTS_TOLERANCE` value to 0.0. This is very unintuitive, and something I could easily see throwing someone off in the future (because `SCREENING=NONE` could technically still do integral screening in composite methods). But this at least allows for composite methods to be run without integral screening via `TwoBodyAOInt` easily.; 2. `SCREENING=NONE` disables integral screening both within `TwoBodyAOInt` and within the composite methods. This is undoubtedly the most intuitive behavior, but doesn't address the aforementioned issue where integral screening occurs both in `TwoBodyAOInt` and composite methods. What do you all think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2331738677
https://github.com/psi4/psi4/issues/3062#issuecomment-1767169966:96,Deployability,update,update,96,"Yes, please aim for typing_extensions=4.5 https://github.com/pydantic/pydantic/issues/5821 . Or update pydantic; iirc they did an extra v1 release to resolve this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767169966
https://github.com/psi4/psi4/issues/3062#issuecomment-1767169966:139,Deployability,release,release,139,"Yes, please aim for typing_extensions=4.5 https://github.com/pydantic/pydantic/issues/5821 . Or update pydantic; iirc they did an extra v1 release to resolve this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767169966
https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:3814,Energy Efficiency,green,greenlet,3814,0.8.3 pyhd8ed1ab_0 conda-forge; expat 2.5.0 hb7217d7_1 conda-forge; fftw 3.3.10 nompi_h2e33b67_103 conda-forge; flask 2.1.3 pyhd8ed1ab_0 conda-forge; flask-jwt-extended 4.5.2 pyhd8ed1ab_0 conda-forge; flit-core 3.7.1 pyhd8ed1ab_0 conda-forge; font-ttf-dejavu-sans-mono 2.37 hab24e00_0 conda-forge; font-ttf-inconsolata 3.000 h77eed37_0 conda-forge; font-ttf-source-code-pro 2.038 h77eed37_0 conda-forge; font-ttf-ubuntu 0.83 hab24e00_0 conda-forge; fontconfig 2.14.2 h82840c6_0 conda-forge; fonts-conda-ecosystem 1 0 conda-forge; fonts-conda-forge 1 0 conda-forge; fonttools 4.33.3 py39h9eb174b_0 conda-forge; freetype 2.12.1 hd633e50_1 conda-forge; frozenlist 1.4.0 py39h0f82c59_1 conda-forge; gau2grid 2.0.7 h1a8c8d9_2 conda-forge; geoip2 4.7.0 pyhd8ed1ab_0 conda-forge; geometric 1.0 pyhd8ed1ab_1 conda-forge; gettext 0.21.1 h0186832_0 conda-forge; gflags 2.2.2 hc88da5d_1004 conda-forge; giflib 5.2.1 h27ca646_2 conda-forge; globus-sdk 3.28.0 pyhd8ed1ab_0 conda-forge; glog 0.6.0 h6da1cb0_0 conda-forge; greenlet 1.1.2 py39h0ef5a74_2 conda-forge; grpc-cpp 1.51.1 h44b9a77_1 conda-forge; gtest 1.14.0 h1995070_1 conda-forge; gunicorn 21.2.0 py39h2804cbe_0 conda-forge; h5py 3.9.0 nompi_py39he9c2634_101 conda-forge; hdf4 4.2.15 h1a38d6a_5 conda-forge; hdf5 1.14.1 nompi_h3aba7b3_100 conda-forge; icu 72.1 he12128b_0 conda-forge; idna 3.3 pyhd8ed1ab_0 conda-forge; importlib-metadata 4.11.2 py39h2804cbe_0 conda-forge; importlib_metadata 4.11.2 hd8ed1ab_0 conda-forge; importlib_resources 5.4.0 pyhd8ed1ab_0 conda-forge; ipykernel 6.9.1 py39h32adebf_0 conda-forge; ipython 8.0.1 py39h2804cbe_2 conda-forge; ipython_genutils 0.2.0 py_1 conda-forge; ipywidgets 7.6.5 pyhd8ed1ab_0 conda-forge; itsdangerous 2.1.2 pyhd8ed1ab_0 conda-forge; jedi 0.18.1 py39h2804cbe_0 conda-forge; jinja2 3.0.3 pyhd8ed1ab_0 conda-forge; joblib 1.3.0 pyhd8ed1ab_1 conda-forge; jpeg 9e h1c322ee_1 conda-forge; jsonschema 4.4.0 pyhd8ed1ab_0 conda-forge; jupyter_client 7.1.2 pyhd8ed1ab_0 conda-forge; jupyter_core 4.9.2 py39,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306
https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:2966,Modifiability,extend,extended,2966,d8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; cachetools 5.3.0 pyhd8ed1ab_0 conda-forge; cairo 1.16.0 h1e71087_1016 conda-forge; certifi 2023.7.22 pyhd8ed1ab_0 conda-forge; cffi 1.15.0 py39h52b1de0_0 conda-forge; charset-normalizer 2.0.12 pyhd8ed1ab_0 conda-forge; click 8.0.4 py39h2804cbe_0 conda-forge; colorama 0.4.4 pyh9f0ad1d_0 conda-forge; cryptography 39.0.2 py39he2a39a8_0 conda-forge; cycler 0.11.0 pyhd8ed1ab_0 conda-forge; cython 0.29.36 py39hb198ff7_0 conda-forge; dataclasses 0.8 pyhc8e2a94_3 conda-forge; debugpy 1.5.1 py39hfb83b0d_0 conda-forge; decorator 5.1.1 pyhd8ed1ab_0 conda-forge; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd4 3.5.0 h4f5cce7_0 conda-forge; dill 0.3.7 pyhd8ed1ab_0 conda-forge; dkh 1.2 h587b571_0 conda-forge; edgembar 0.2 pypi_0 pypi; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; executing 0.8.3 pyhd8ed1ab_0 conda-forge; expat 2.5.0 hb7217d7_1 conda-forge; fftw 3.3.10 nompi_h2e33b67_103 conda-forge; flask 2.1.3 pyhd8ed1ab_0 conda-forge; flask-jwt-extended 4.5.2 pyhd8ed1ab_0 conda-forge; flit-core 3.7.1 pyhd8ed1ab_0 conda-forge; font-ttf-dejavu-sans-mono 2.37 hab24e00_0 conda-forge; font-ttf-inconsolata 3.000 h77eed37_0 conda-forge; font-ttf-source-code-pro 2.038 h77eed37_0 conda-forge; font-ttf-ubuntu 0.83 hab24e00_0 conda-forge; fontconfig 2.14.2 h82840c6_0 conda-forge; fonts-conda-ecosystem 1 0 conda-forge; fonts-conda-forge 1 0 conda-forge; fonttools 4.33.3 py39h9eb174b_0 conda-forge; freetype 2.12.1 hd633e50_1 conda-forge; frozenlist 1.4.0 py39h0f82c59_1 conda-forge; gau2grid 2.0.7 h1a8c8d9_2 conda-forge; geoip2 4.7.0 pyhd8ed1ab_0 conda-forge; geometric 1.0 pyhd8ed1ab_1 conda-forge; gettext 0.21.1 h0186832_0 conda-forge; gflags 2.2.2 hc88da5d_1004 conda-forge; giflib 5.2.1 h27ca646_2 conda-forge; globus-sdk 3.28.0 pyhd8ed1ab_0 conda-forge; glog 0.6.0 h6da1cb0_0 conda-forge; greenlet 1.1.2 py39h0ef5a74_2 conda-forge; grpc-cpp 1.51.1 h44b9a77_1 conda-forge; gtest 1.14.0 h1995070_1 conda-forge; gunicorn 21.2.0 py3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306
https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:1929,Performance,cache,cached-property,1929,8_2 conda-forge; aws-c-io 0.13.17 h323b671_2 conda-forge; aws-c-mqtt 0.8.6 hdc0f556_6 conda-forge; aws-c-s3 0.2.4 hbb4c6b3_3 conda-forge; aws-c-sdkutils 0.1.7 h7334ab6_3 conda-forge; aws-checksums 0.1.14 h7334ab6_3 conda-forge; aws-crt-cpp 0.19.7 h6f6c549_7 conda-forge; aws-sdk-cpp 1.10.57 hbe10753_4 conda-forge; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; bcrypt 4.0.1 py39haff01fd_1 conda-forge; black 22.1.0 pyhd8ed1ab_0 conda-forge; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; blosc 1.21.4 hc338f07_0 conda-forge; boost 1.78.0 py39h99de9ae_4 conda-forge; boost-cpp 1.78.0 h9ed8d21_3 conda-forge; brotli 1.0.9 h3422bc3_6 conda-forge; brotli-bin 1.0.9 h3422bc3_6 conda-forge; brotlipy 0.7.0 py39h5161555_1003 conda-forge; bson 0.5.9 py_0 conda-forge; bzip2 1.0.8 h3422bc3_4 conda-forge; c-ares 1.18.1 h3422bc3_0 conda-forge; c-blosc2 2.10.0 h068da5f_0 conda-forge; ca-certificates 2023.7.22 hf0a4a13_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; cachetools 5.3.0 pyhd8ed1ab_0 conda-forge; cairo 1.16.0 h1e71087_1016 conda-forge; certifi 2023.7.22 pyhd8ed1ab_0 conda-forge; cffi 1.15.0 py39h52b1de0_0 conda-forge; charset-normalizer 2.0.12 pyhd8ed1ab_0 conda-forge; click 8.0.4 py39h2804cbe_0 conda-forge; colorama 0.4.4 pyh9f0ad1d_0 conda-forge; cryptography 39.0.2 py39he2a39a8_0 conda-forge; cycler 0.11.0 pyhd8ed1ab_0 conda-forge; cython 0.29.36 py39hb198ff7_0 conda-forge; dataclasses 0.8 pyhc8e2a94_3 conda-forge; debugpy 1.5.1 py39hfb83b0d_0 conda-forge; decorator 5.1.1 pyhd8ed1ab_0 conda-forge; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd4 3.5.0 h4f5cce7_0 conda-forge; dill 0.3.7 pyhd8ed1ab_0 conda-forge; dkh 1.2 h587b571_0 conda-forge; edgembar 0.2 pypi_0 pypi; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; executing 0.8.3 pyhd8ed1ab_0 conda-forge; expat 2.5.0 hb7217d7_1 conda-forge; fftw 3.3.10 nompi_h2e33b67_103 conda-forge; flask 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306
https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:2023,Performance,cache,cachetools,2023,-forge; aws-c-s3 0.2.4 hbb4c6b3_3 conda-forge; aws-c-sdkutils 0.1.7 h7334ab6_3 conda-forge; aws-checksums 0.1.14 h7334ab6_3 conda-forge; aws-crt-cpp 0.19.7 h6f6c549_7 conda-forge; aws-sdk-cpp 1.10.57 hbe10753_4 conda-forge; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; bcrypt 4.0.1 py39haff01fd_1 conda-forge; black 22.1.0 pyhd8ed1ab_0 conda-forge; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; blosc 1.21.4 hc338f07_0 conda-forge; boost 1.78.0 py39h99de9ae_4 conda-forge; boost-cpp 1.78.0 h9ed8d21_3 conda-forge; brotli 1.0.9 h3422bc3_6 conda-forge; brotli-bin 1.0.9 h3422bc3_6 conda-forge; brotlipy 0.7.0 py39h5161555_1003 conda-forge; bson 0.5.9 py_0 conda-forge; bzip2 1.0.8 h3422bc3_4 conda-forge; c-ares 1.18.1 h3422bc3_0 conda-forge; c-blosc2 2.10.0 h068da5f_0 conda-forge; ca-certificates 2023.7.22 hf0a4a13_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; cachetools 5.3.0 pyhd8ed1ab_0 conda-forge; cairo 1.16.0 h1e71087_1016 conda-forge; certifi 2023.7.22 pyhd8ed1ab_0 conda-forge; cffi 1.15.0 py39h52b1de0_0 conda-forge; charset-normalizer 2.0.12 pyhd8ed1ab_0 conda-forge; click 8.0.4 py39h2804cbe_0 conda-forge; colorama 0.4.4 pyh9f0ad1d_0 conda-forge; cryptography 39.0.2 py39he2a39a8_0 conda-forge; cycler 0.11.0 pyhd8ed1ab_0 conda-forge; cython 0.29.36 py39hb198ff7_0 conda-forge; dataclasses 0.8 pyhc8e2a94_3 conda-forge; debugpy 1.5.1 py39hfb83b0d_0 conda-forge; decorator 5.1.1 pyhd8ed1ab_0 conda-forge; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd4 3.5.0 h4f5cce7_0 conda-forge; dill 0.3.7 pyhd8ed1ab_0 conda-forge; dkh 1.2 h587b571_0 conda-forge; edgembar 0.2 pypi_0 pypi; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; executing 0.8.3 pyhd8ed1ab_0 conda-forge; expat 2.5.0 hb7217d7_1 conda-forge; fftw 3.3.10 nompi_h2e33b67_103 conda-forge; flask 2.1.3 pyhd8ed1ab_0 conda-forge; flask-jwt-extended 4.5.2 pyhd8ed1ab_0 conda-forge; flit-core,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306
https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:4953,Performance,load,loader,4953,unicorn 21.2.0 py39h2804cbe_0 conda-forge; h5py 3.9.0 nompi_py39he9c2634_101 conda-forge; hdf4 4.2.15 h1a38d6a_5 conda-forge; hdf5 1.14.1 nompi_h3aba7b3_100 conda-forge; icu 72.1 he12128b_0 conda-forge; idna 3.3 pyhd8ed1ab_0 conda-forge; importlib-metadata 4.11.2 py39h2804cbe_0 conda-forge; importlib_metadata 4.11.2 hd8ed1ab_0 conda-forge; importlib_resources 5.4.0 pyhd8ed1ab_0 conda-forge; ipykernel 6.9.1 py39h32adebf_0 conda-forge; ipython 8.0.1 py39h2804cbe_2 conda-forge; ipython_genutils 0.2.0 py_1 conda-forge; ipywidgets 7.6.5 pyhd8ed1ab_0 conda-forge; itsdangerous 2.1.2 pyhd8ed1ab_0 conda-forge; jedi 0.18.1 py39h2804cbe_0 conda-forge; jinja2 3.0.3 pyhd8ed1ab_0 conda-forge; joblib 1.3.0 pyhd8ed1ab_1 conda-forge; jpeg 9e h1c322ee_1 conda-forge; jsonschema 4.4.0 pyhd8ed1ab_0 conda-forge; jupyter_client 7.1.2 pyhd8ed1ab_0 conda-forge; jupyter_core 4.9.2 py39h2804cbe_0 conda-forge; jupyterlab_pygments 0.1.2 pyh9f0ad1d_0 conda-forge; jupyterlab_widgets 1.0.2 pyhd8ed1ab_0 conda-forge; khronos-opencl-icd-loader 2022.09.30 h1a8c8d9_2 conda-forge; kiwisolver 1.4.2 py39h2c803a9_1 conda-forge; krb5 1.21.2 h92f50d5_0 conda-forge; lcms2 2.12 had6a04f_0 conda-forge; lerc 3.0 hbdafb3b_0 conda-forge; libabseil 20220623.0 cxx17_h28b99d4_6 conda-forge; libaec 1.0.6 hb7217d7_1 conda-forge; libarrow 11.0.0 h0b9b5d1_5_cpu conda-forge; libblas 3.9.0 13_osxarm64_openblas conda-forge; libbrotlicommon 1.0.9 h3422bc3_6 conda-forge; libbrotlidec 1.0.9 h3422bc3_6 conda-forge; libbrotlienc 1.0.9 h3422bc3_6 conda-forge; libcblas 3.9.0 13_osxarm64_openblas conda-forge; libcrc32c 1.1.2 hbdafb3b_0 conda-forge; libcurl 8.3.0 hc52a3a8_0 conda-forge; libcxx 15.0.7 h75e25f2_0 conda-forge; libdeflate 1.10 h3422bc3_0 conda-forge; libecpint 1.0.7 habece42_9 conda-forge; libedit 3.1.20191231 hc8eb9b7_2 conda-forge; libev 4.33 h642e427_1 conda-forge; libevent 2.1.10 h7673551_4 conda-forge; libexpat 2.5.0 hb7217d7_1 conda-forge; libffi 3.4.2 h3422bc3_5 conda-forge; libgfortran 5.0.0 12_2_0_hd922786_31 co,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306
https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:595,Safety,timeout,timeout,595,```; # Name Version Build Channel; abseil-cpp 20220623.0 he4e09e4_6 conda-forge; aiohttp 3.8.5 py39h0f82c59_0 conda-forge; aiosignal 1.3.1 pyhd8ed1ab_0 conda-forge; alembic 1.12.0 pyhd8ed1ab_0 conda-forge; ambertools 23.3 py39hdb62838_1 conda-forge; amberutils 21.0 pypi_0 pypi; appnope 0.1.2 py39h2804cbe_2 conda-forge; argon2-cffi 21.3.0 pyhd8ed1ab_0 conda-forge; argon2-cffi-bindings 21.2.0 py39h5161555_1 conda-forge; arpack 3.7.0 h58ebc17_2 conda-forge; arrow-cpp 11.0.0 hce30654_5_cpu conda-forge; asttokens 2.0.5 pyhd8ed1ab_0 conda-forge; astunparse 1.6.3 pyhd8ed1ab_0 conda-forge; async-timeout 4.0.3 pyhd8ed1ab_0 conda-forge; attrs 21.4.0 pyhd8ed1ab_0 conda-forge; aws-c-auth 0.6.24 he8f13b4_5 conda-forge; aws-c-cal 0.5.20 h9571af1_6 conda-forge; aws-c-common 0.8.11 h1a8c8d9_0 conda-forge; aws-c-compression 0.2.16 h7334ab6_3 conda-forge; aws-c-event-stream 0.2.18 ha663d55_6 conda-forge; aws-c-http 0.7.4 h49dec38_2 conda-forge; aws-c-io 0.13.17 h323b671_2 conda-forge; aws-c-mqtt 0.8.6 hdc0f556_6 conda-forge; aws-c-s3 0.2.4 hbb4c6b3_3 conda-forge; aws-c-sdkutils 0.1.7 h7334ab6_3 conda-forge; aws-checksums 0.1.14 h7334ab6_3 conda-forge; aws-crt-cpp 0.19.7 h6f6c549_7 conda-forge; aws-sdk-cpp 1.10.57 hbe10753_4 conda-forge; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; bcrypt 4.0.1 py39haff01fd_1 conda-forge; black 22.1.0 pyhd8ed1ab_0 conda-forge; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; blosc 1.21.4 hc338f07_0 conda-forge; boost 1.78.0 py39h99de9ae_4 conda-forge; boost-cpp 1.78.0 h9ed8d21_3 conda-forge; brotli 1.0.9 h3422bc3_6 conda-forge; brotli-bin 1.0.9 h3422bc3_6 conda-forge; brotlipy 0.7.0 py39h5161555_1003 conda-forge; bson 0.5.9 py_0 conda-forge; bzip2 1.0.8 h3422bc3_4 conda-forge; c-ares 1.18.1 h3422bc3_0 conda-forge; c-blosc2 2.10.0 h068da5f_0 conda-forge; ca-certificates 2023.7.22 hf0a4a13_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306
https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:1111,Security,checksum,checksums,1111,82c59_0 conda-forge; aiosignal 1.3.1 pyhd8ed1ab_0 conda-forge; alembic 1.12.0 pyhd8ed1ab_0 conda-forge; ambertools 23.3 py39hdb62838_1 conda-forge; amberutils 21.0 pypi_0 pypi; appnope 0.1.2 py39h2804cbe_2 conda-forge; argon2-cffi 21.3.0 pyhd8ed1ab_0 conda-forge; argon2-cffi-bindings 21.2.0 py39h5161555_1 conda-forge; arpack 3.7.0 h58ebc17_2 conda-forge; arrow-cpp 11.0.0 hce30654_5_cpu conda-forge; asttokens 2.0.5 pyhd8ed1ab_0 conda-forge; astunparse 1.6.3 pyhd8ed1ab_0 conda-forge; async-timeout 4.0.3 pyhd8ed1ab_0 conda-forge; attrs 21.4.0 pyhd8ed1ab_0 conda-forge; aws-c-auth 0.6.24 he8f13b4_5 conda-forge; aws-c-cal 0.5.20 h9571af1_6 conda-forge; aws-c-common 0.8.11 h1a8c8d9_0 conda-forge; aws-c-compression 0.2.16 h7334ab6_3 conda-forge; aws-c-event-stream 0.2.18 ha663d55_6 conda-forge; aws-c-http 0.7.4 h49dec38_2 conda-forge; aws-c-io 0.13.17 h323b671_2 conda-forge; aws-c-mqtt 0.8.6 hdc0f556_6 conda-forge; aws-c-s3 0.2.4 hbb4c6b3_3 conda-forge; aws-c-sdkutils 0.1.7 h7334ab6_3 conda-forge; aws-checksums 0.1.14 h7334ab6_3 conda-forge; aws-crt-cpp 0.19.7 h6f6c549_7 conda-forge; aws-sdk-cpp 1.10.57 hbe10753_4 conda-forge; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; bcrypt 4.0.1 py39haff01fd_1 conda-forge; black 22.1.0 pyhd8ed1ab_0 conda-forge; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; blosc 1.21.4 hc338f07_0 conda-forge; boost 1.78.0 py39h99de9ae_4 conda-forge; boost-cpp 1.78.0 h9ed8d21_3 conda-forge; brotli 1.0.9 h3422bc3_6 conda-forge; brotli-bin 1.0.9 h3422bc3_6 conda-forge; brotlipy 0.7.0 py39h5161555_1003 conda-forge; bson 0.5.9 py_0 conda-forge; bzip2 1.0.8 h3422bc3_4 conda-forge; c-ares 1.18.1 h3422bc3_0 conda-forge; c-blosc2 2.10.0 h068da5f_0 conda-forge; ca-certificates 2023.7.22 hf0a4a13_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; cachetools 5.3.0 pyhd8ed1ab_0 conda-forge; cairo 1.16.0 h1e71087_1016 conda-for,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306
https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:1882,Security,certificate,certificates,1882,ha663d55_6 conda-forge; aws-c-http 0.7.4 h49dec38_2 conda-forge; aws-c-io 0.13.17 h323b671_2 conda-forge; aws-c-mqtt 0.8.6 hdc0f556_6 conda-forge; aws-c-s3 0.2.4 hbb4c6b3_3 conda-forge; aws-c-sdkutils 0.1.7 h7334ab6_3 conda-forge; aws-checksums 0.1.14 h7334ab6_3 conda-forge; aws-crt-cpp 0.19.7 h6f6c549_7 conda-forge; aws-sdk-cpp 1.10.57 hbe10753_4 conda-forge; backcall 0.2.0 pyh9f0ad1d_0 conda-forge; backports 1.0 py_2 conda-forge; backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0 conda-forge; bcrypt 4.0.1 py39haff01fd_1 conda-forge; black 22.1.0 pyhd8ed1ab_0 conda-forge; bleach 4.1.0 pyhd8ed1ab_0 conda-forge; blosc 1.21.4 hc338f07_0 conda-forge; boost 1.78.0 py39h99de9ae_4 conda-forge; boost-cpp 1.78.0 h9ed8d21_3 conda-forge; brotli 1.0.9 h3422bc3_6 conda-forge; brotli-bin 1.0.9 h3422bc3_6 conda-forge; brotlipy 0.7.0 py39h5161555_1003 conda-forge; bson 0.5.9 py_0 conda-forge; bzip2 1.0.8 h3422bc3_4 conda-forge; c-ares 1.18.1 h3422bc3_0 conda-forge; c-blosc2 2.10.0 h068da5f_0 conda-forge; ca-certificates 2023.7.22 hf0a4a13_0 conda-forge; cached-property 1.5.2 hd8ed1ab_1 conda-forge; cached_property 1.5.2 pyha770c72_1 conda-forge; cachetools 5.3.0 pyhd8ed1ab_0 conda-forge; cairo 1.16.0 h1e71087_1016 conda-forge; certifi 2023.7.22 pyhd8ed1ab_0 conda-forge; cffi 1.15.0 py39h52b1de0_0 conda-forge; charset-normalizer 2.0.12 pyhd8ed1ab_0 conda-forge; click 8.0.4 py39h2804cbe_0 conda-forge; colorama 0.4.4 pyh9f0ad1d_0 conda-forge; cryptography 39.0.2 py39he2a39a8_0 conda-forge; cycler 0.11.0 pyhd8ed1ab_0 conda-forge; cython 0.29.36 py39hb198ff7_0 conda-forge; dataclasses 0.8 pyhc8e2a94_3 conda-forge; debugpy 1.5.1 py39hfb83b0d_0 conda-forge; decorator 5.1.1 pyhd8ed1ab_0 conda-forge; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd4 3.5.0 h4f5cce7_0 conda-forge; dill 0.3.7 pyhd8ed1ab_0 conda-forge; dkh 1.2 h587b571_0 conda-forge; edgembar 0.2 pypi_0 pypi; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; executing 0.8.3 pyhd8ed1ab_0 conda-forge; expat 2.5.0 hb7217d7_1 conda-forge; fft,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306
https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:10379,Testability,stub,stubs,10379,h23fbdae_0 conda-forge; parquet-cpp 1.5.1 2 conda-forge; parsl 2023.9.11 pyhd8ed1ab_0 conda-forge; parso 0.8.3 pyhd8ed1ab_0 conda-forge; pathspec 0.9.0 pyhd8ed1ab_0 conda-forge; pbr 5.11.1 pyhd8ed1ab_0 conda-forge; pcmsolver 1.2.3 py_4 conda-forge; pcre 8.45 hbdafb3b_0 conda-forge; pcre2 10.40 hb34f9b4_0 conda-forge; pdb4amber 22.0 pypi_0 pypi; pdbfixer 1.9 pyh1a96a4e_0 conda-forge; perl 5.32.1 3_hf2054a2_perl5 conda-forge; pexpect 4.8.0 pyh9f0ad1d_2 conda-forge; pickleshare 0.7.5 py_1003 conda-forge; pillow 8.4.0 py39ha74c66e_0 conda-forge; pint 0.20.1 pyhd8ed1ab_0 conda-forge; pip 22.0.3 pyhd8ed1ab_0 conda-forge; pixman 0.40.0 h27ca646_0 conda-forge; platformdirs 2.5.1 pyhd8ed1ab_0 conda-forge; plotly 5.6.0 pyhd8ed1ab_0 conda-forge; postgresql 15.4 h00cd704_0 conda-forge; prometheus_client 0.13.1 pyhd8ed1ab_0 conda-forge; prompt-toolkit 3.0.27 pyha770c72_0 conda-forge; psi4 1.8.2 py39h9c1326d_0 conda-forge; psutil 5.9.5 py39h0f82c59_1 conda-forge; psycopg2 2.9.6 py39heac0328_0 conda-forge; pthread-stubs 0.4 h27ca646_1001 conda-forge; ptyprocess 0.7.0 pyhd3deb0d_0 conda-forge; pugixml 1.13 h13dd4ca_1 conda-forge; pure_eval 0.2.2 pyhd8ed1ab_0 conda-forge; py-cpuinfo 9.0.0 pyhd8ed1ab_0 conda-forge; pyarrow 11.0.0 py39hfdcab31_5_cpu conda-forge; pybind11-abi 4 hd8ed1ab_3 conda-forge; pycairo 1.21.0 py39h9e65f43_1 conda-forge; pycparser 2.21 pyhd8ed1ab_0 conda-forge; pydantic 1.9.0 py39h5161555_0 conda-forge; pyedr 0.7.1 pyhd8ed1ab_0 conda-forge; pygments 2.11.2 pyhd8ed1ab_0 conda-forge; pyjwt 2.8.0 pyhd8ed1ab_0 conda-forge; pymsmt 22.0 pypi_0 pypi; pynacl 1.5.0 py39h02fc5c5_2 conda-forge; pyopenssl 23.2.0 pyhd8ed1ab_1 conda-forge; pyparsing 3.0.7 pyhd8ed1ab_0 conda-forge; pyrsistent 0.18.1 py39h5161555_0 conda-forge; pysocks 1.7.1 py39h2804cbe_4 conda-forge; pytables 3.8.0 py39h0da393b_2 conda-forge; python 3.9.10 h38ef502_2_cpython conda-forge; python-constraint 1.4.0 py_0 conda-forge; python-dateutil 2.8.2 pyhd8ed1ab_0 conda-forge; python_abi 3.9 2_cp39 conda-forge;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306
https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:12629,Testability,test,testpath,12629,25_0 conda-forge; qcfractalcompute 0.50 pyhd8ed1ab_0 conda-forge; qcportal 0.50 pyh7448d05_0 conda-forge; rdkit 2023.03.1 py39hcba3512_0 conda-forge; re2 2023.02.01 hb7217d7_0 conda-forge; readline 8.2 h92ec313_1 conda-forge; reportlab 3.5.68 py39h3fc2f6e_1 conda-forge; requests 2.27.1 pyhd8ed1ab_0 conda-forge; sander 22.0 pypi_0 pypi; scipy 1.9.0 py39h14896cb_0 conda-forge; send2trash 1.8.0 pyhd8ed1ab_0 conda-forge; setproctitle 1.3.2 py39h02fc5c5_1 conda-forge; setuptools 60.9.3 py39h2804cbe_0 conda-forge; simple-dftd3 0.7.0 h702fe85_2 conda-forge; six 1.16.0 pyh6c4a22f_0 conda-forge; smirnoff99frosst 1.1.0 pyh44b312d_0 conda-forge; snappy 1.1.10 h17c5cce_0 conda-forge; sqlalchemy 2.0.21 py39h0f82c59_0 conda-forge; sqlite 3.37.0 h72a2b83_0 conda-forge; stack_data 0.2.0 pyhd8ed1ab_0 conda-forge; tabulate 0.9.0 pyhd8ed1ab_1 conda-forge; tblib 2.0.0 pyhd8ed1ab_0 conda-forge; tblite 0.3.0 h4f5cce7_0 conda-forge; tenacity 8.0.1 pyhd8ed1ab_0 conda-forge; terminado 0.13.1 py39h2804cbe_0 conda-forge; testpath 0.6.0 pyhd8ed1ab_0 conda-forge; tk 8.6.12 he1e0b03_0 conda-forge; toml-f 0.3.1 he18974e_0 conda-forge; tomli 2.0.1 pyhd8ed1ab_0 conda-forge; tornado 6.1 py39h5161555_2 conda-forge; torsiondrive 1.1.0 pyhd8ed1ab_0 conda-forge; tqdm 4.63.0 pyhd8ed1ab_0 conda-forge; traitlets 5.1.1 pyhd8ed1ab_0 conda-forge; typed-ast 1.5.2 py39h5161555_0 conda-forge; typeguard 2.13.3 pyhd8ed1ab_0 conda-forge; typing-extensions 4.8.0 hd8ed1ab_0 conda-forge; typing_extensions 4.8.0 pyha770c72_0 conda-forge; tzcode 2023c h1a8c8d9_0 conda-forge; tzdata 2021e he74cb21_0 conda-forge; unicodedata2 14.0.0 py39hb18efdd_1 conda-forge; urllib3 1.26.8 pyhd8ed1ab_1 conda-forge; wcwidth 0.2.5 pyh9f0ad1d_2 conda-forge; webencodings 0.5.1 py_1 conda-forge; werkzeug 2.1.2 pyhd8ed1ab_1 conda-forge; wheel 0.37.1 pyhd8ed1ab_0 conda-forge; widgetsnbextension 3.5.2 py39h2804cbe_1 conda-forge; xmltodict 0.13.0 pyhd8ed1ab_0 conda-forge; xorg-kbproto 1.0.7 h27ca646_1002 conda-forge; xorg-libice 1.0.10 h27ca646_0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306
https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306:12133,Usability,simpl,simple-,12133,39h2804cbe_4 conda-forge; pytables 3.8.0 py39h0da393b_2 conda-forge; python 3.9.10 h38ef502_2_cpython conda-forge; python-constraint 1.4.0 py_0 conda-forge; python-dateutil 2.8.2 pyhd8ed1ab_0 conda-forge; python_abi 3.9 2_cp39 conda-forge; pytraj 2.0.6 pypi_0 pypi; pytz 2021.3 pyhd8ed1ab_0 conda-forge; pyyaml 6.0 py39h5161555_3 conda-forge; pyzmq 22.3.0 py39h02c6a76_1 conda-forge; qcelemental 0.26.0 pyhd8ed1ab_0 conda-forge; qcengine 0.28.1 pyhd8ed1ab_0 conda-forge; qcfractal 0.50 pyh707e725_0 conda-forge; qcfractalcompute 0.50 pyhd8ed1ab_0 conda-forge; qcportal 0.50 pyh7448d05_0 conda-forge; rdkit 2023.03.1 py39hcba3512_0 conda-forge; re2 2023.02.01 hb7217d7_0 conda-forge; readline 8.2 h92ec313_1 conda-forge; reportlab 3.5.68 py39h3fc2f6e_1 conda-forge; requests 2.27.1 pyhd8ed1ab_0 conda-forge; sander 22.0 pypi_0 pypi; scipy 1.9.0 py39h14896cb_0 conda-forge; send2trash 1.8.0 pyhd8ed1ab_0 conda-forge; setproctitle 1.3.2 py39h02fc5c5_1 conda-forge; setuptools 60.9.3 py39h2804cbe_0 conda-forge; simple-dftd3 0.7.0 h702fe85_2 conda-forge; six 1.16.0 pyh6c4a22f_0 conda-forge; smirnoff99frosst 1.1.0 pyh44b312d_0 conda-forge; snappy 1.1.10 h17c5cce_0 conda-forge; sqlalchemy 2.0.21 py39h0f82c59_0 conda-forge; sqlite 3.37.0 h72a2b83_0 conda-forge; stack_data 0.2.0 pyhd8ed1ab_0 conda-forge; tabulate 0.9.0 pyhd8ed1ab_1 conda-forge; tblib 2.0.0 pyhd8ed1ab_0 conda-forge; tblite 0.3.0 h4f5cce7_0 conda-forge; tenacity 8.0.1 pyhd8ed1ab_0 conda-forge; terminado 0.13.1 py39h2804cbe_0 conda-forge; testpath 0.6.0 pyhd8ed1ab_0 conda-forge; tk 8.6.12 he1e0b03_0 conda-forge; toml-f 0.3.1 he18974e_0 conda-forge; tomli 2.0.1 pyhd8ed1ab_0 conda-forge; tornado 6.1 py39h5161555_2 conda-forge; torsiondrive 1.1.0 pyhd8ed1ab_0 conda-forge; tqdm 4.63.0 pyhd8ed1ab_0 conda-forge; traitlets 5.1.1 pyhd8ed1ab_0 conda-forge; typed-ast 1.5.2 py39h5161555_0 conda-forge; typeguard 2.13.3 pyhd8ed1ab_0 conda-forge; typing-extensions 4.8.0 hd8ed1ab_0 conda-forge; typing_extensions 4.8.0 pyha770c72_0 conda-forg,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767172306
https://github.com/psi4/psi4/issues/3062#issuecomment-1767177402:38,Availability,down,downgrading,38,I'd try updating pydantic to v1.10 or downgrading typing_extensions to 4.5.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1767177402
https://github.com/psi4/psi4/issues/3062#issuecomment-1768540106:46,Deployability,update,update,46,@loriab Is there any reason we shouldn't just update the conda install instructions to have `pydantic >= 1.10` and then close issue?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1768540106
https://github.com/psi4/psi4/issues/3062#issuecomment-1768540106:63,Deployability,install,install,63,@loriab Is there any reason we shouldn't just update the conda install instructions to have `pydantic >= 1.10` and then close issue?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3062#issuecomment-1768540106
https://github.com/psi4/psi4/issues/3065#issuecomment-1782890955:609,Deployability,update,update,609,"There are multiple issues here, and the first one is to make sure that we're using the same definitions. Your vocabulary makes me suspect that you're more used to plane wave methods. In Psi4, SCF works by having an initial density matrix, constructing a Fock matrix, modifying the Fock matrix using optional DIIS (default, and we also blend this with ADIIS and EDIIS methods) and level shift (not default), solving the generalized eigenvalue problem to get new orbitals, constructing a new density matrix from those orbitals (normally aufbau), and then mixing that with the previous density (optional, called update damping). None of this applies to our second-order algorithms, which I assume are irrelevant in your context. How _exactly_ do you want to define `D_in` and `D_out`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1782890955
https://github.com/psi4/psi4/issues/3065#issuecomment-1783272230:159,Deployability,update,update,159,"I'm still confused. You say that `D_in` is the density matrix ""after mixing"". What exactly is ""mixing""? My best guess is that this is related to what we call ""update damping"", but I don't know. I'm only vaguely familiar with plane wave methods, so I'm not qualified to explain what exactly the differences are. What I meant was that ""ten minutes of Google reading has me convinced that the approach to mixing there is very different from quantum chemistry.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1783272230
https://github.com/psi4/psi4/issues/3065#issuecomment-1783287520:283,Deployability,update,update,283,"Thank you! I see the confusion. In plane wave methods and DFT textbooks, the DIIS (also known as density mixing) is performed on electron density for faster convergence. But it seems that in quantum chemistry the DIIS is performed on the Hamiltonian, and thus the density mixing (or update damping you mentioned) becomes optional?. In this case, my definition makes little sense, and I might need some reconsideration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1783287520
https://github.com/psi4/psi4/issues/3065#issuecomment-1783287520:116,Performance,perform,performed,116,"Thank you! I see the confusion. In plane wave methods and DFT textbooks, the DIIS (also known as density mixing) is performed on electron density for faster convergence. But it seems that in quantum chemistry the DIIS is performed on the Hamiltonian, and thus the density mixing (or update damping you mentioned) becomes optional?. In this case, my definition makes little sense, and I might need some reconsideration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1783287520
https://github.com/psi4/psi4/issues/3065#issuecomment-1783287520:221,Performance,perform,performed,221,"Thank you! I see the confusion. In plane wave methods and DFT textbooks, the DIIS (also known as density mixing) is performed on electron density for faster convergence. But it seems that in quantum chemistry the DIIS is performed on the Hamiltonian, and thus the density mixing (or update damping you mentioned) becomes optional?. In this case, my definition makes little sense, and I might need some reconsideration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1783287520
https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073:332,Deployability,configurat,configuration,332,"The big difference between AO and plane wave methods is that plane-wave bases are **verbose**. The reason why plane-wave methods don't accelerate convergence using the Fock matrix is that **it is typically never built** since it could not be stored. Instead, it is always contracted right away with trial vectors, as in traditional configuration interaction approaches, for example. The acceleration based on Fock matrix extrapolation is much more efficient than one based on the electron density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073
https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073:448,Energy Efficiency,efficient,efficient,448,"The big difference between AO and plane wave methods is that plane-wave bases are **verbose**. The reason why plane-wave methods don't accelerate convergence using the Fock matrix is that **it is typically never built** since it could not be stored. Instead, it is always contracted right away with trial vectors, as in traditional configuration interaction approaches, for example. The acceleration based on Fock matrix extrapolation is much more efficient than one based on the electron density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073
https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073:272,Integrability,contract,contracted,272,"The big difference between AO and plane wave methods is that plane-wave bases are **verbose**. The reason why plane-wave methods don't accelerate convergence using the Fock matrix is that **it is typically never built** since it could not be stored. Instead, it is always contracted right away with trial vectors, as in traditional configuration interaction approaches, for example. The acceleration based on Fock matrix extrapolation is much more efficient than one based on the electron density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073
https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073:332,Modifiability,config,configuration,332,"The big difference between AO and plane wave methods is that plane-wave bases are **verbose**. The reason why plane-wave methods don't accelerate convergence using the Fock matrix is that **it is typically never built** since it could not be stored. Instead, it is always contracted right away with trial vectors, as in traditional configuration interaction approaches, for example. The acceleration based on Fock matrix extrapolation is much more efficient than one based on the electron density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073
https://github.com/psi4/psi4/issues/3066#issuecomment-1783692419:89,Availability,error,error,89,"Why do you think the key point here is that this is DFT? I was able to observe a similar error in gradients using the same system and Hartree-Fock. I'd need to do more tests to know for sure, but my working hypothesis is that the error (which is genuine) has rather to do with the effective core potential. The ECP contribution to the gradient is a separate term in the gradient computation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783692419
https://github.com/psi4/psi4/issues/3066#issuecomment-1783692419:230,Availability,error,error,230,"Why do you think the key point here is that this is DFT? I was able to observe a similar error in gradients using the same system and Hartree-Fock. I'd need to do more tests to know for sure, but my working hypothesis is that the error (which is genuine) has rather to do with the effective core potential. The ECP contribution to the gradient is a separate term in the gradient computation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783692419
https://github.com/psi4/psi4/issues/3066#issuecomment-1783692419:168,Testability,test,tests,168,"Why do you think the key point here is that this is DFT? I was able to observe a similar error in gradients using the same system and Hartree-Fock. I'd need to do more tests to know for sure, but my working hypothesis is that the error (which is genuine) has rather to do with the effective core potential. The ECP contribution to the gradient is a separate term in the gradient computation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783692419
https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:60,Availability,error,error,60,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909
https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:952,Availability,error,error,952,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909
https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:1044,Energy Efficiency,energy,energy,1044,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909
https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:184,Performance,optimiz,optimizations,184,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909
https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:258,Performance,optimiz,optimization,258,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909
https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:316,Performance,optimiz,optimization,316,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909
https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:426,Performance,optimiz,optimizations,426,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909
https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:629,Performance,optimiz,optimization,629,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909
https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:873,Performance,optimiz,optimizations,873,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909
https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:608,Testability,test,tested,608,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909
https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909:745,Testability,test,test,745,"Thanks for the reply - I have suspected the existence of an error in DFT gradients for more than a year because I have previously seen unexpected behavior in geomeTRIC / Psi4 geometry optimizations of organic molecules using DFT (B3LYP-D3/DZVP) in which the optimization fails to converge and the structure from the optimization trajectory appears to be tumbling (see attached movie). The behavior is more common when running optimizations with constraints. I suspected the DFT contribution because there is some literature on the lack of rotational invariance in DFT energies due to the grid, but I had not tested a constrained optimization on the same system using HF. I haven't made an issue report for this problem because I felt I lacked a test case that was compelling enough. . I thought the current issue had the same root cause as the organic molecule constrained optimizations, but I might be wrong about that. If you are seeing the gradient error in HF then I agree the current issue is not likely due to the DFT contribution to the energy. . https://github.com/psi4/psi4/assets/1441560/80f2b42d-fed2-4667-809d-f3a2550603fb",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1783717909
https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672:38,Availability,error,errors,38,"The following input file demonstrates errors in the second decimal place:; ```; molecule {; La 1 -0.5 0; La 1 0.5 0; O 0 -1 0; O 0 0 0; O 0 1 0; }. set {; basis def2-svp; scf_type df; df_basis_sad def2-universal-jkfit; df_basis_scf def2-universal-jkfit; points 5; }. func = 'hf'; anal = gradient('scf', dft_functional=func, dertype=1); fndf = gradient('scf', dft_functional=func, dertype=0); anal.print_out(); fndf.print_out(); ```. The counterpart where La is replaced with B agrees to six decimal places. This is _strongly_ suggestive of an error in ECPs. Let's keep all discussion on this issue focused on this error. DFT integration is irrelevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672
https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672:543,Availability,error,error,543,"The following input file demonstrates errors in the second decimal place:; ```; molecule {; La 1 -0.5 0; La 1 0.5 0; O 0 -1 0; O 0 0 0; O 0 1 0; }. set {; basis def2-svp; scf_type df; df_basis_sad def2-universal-jkfit; df_basis_scf def2-universal-jkfit; points 5; }. func = 'hf'; anal = gradient('scf', dft_functional=func, dertype=1); fndf = gradient('scf', dft_functional=func, dertype=0); anal.print_out(); fndf.print_out(); ```. The counterpart where La is replaced with B agrees to six decimal places. This is _strongly_ suggestive of an error in ECPs. Let's keep all discussion on this issue focused on this error. DFT integration is irrelevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672
https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672:614,Availability,error,error,614,"The following input file demonstrates errors in the second decimal place:; ```; molecule {; La 1 -0.5 0; La 1 0.5 0; O 0 -1 0; O 0 0 0; O 0 1 0; }. set {; basis def2-svp; scf_type df; df_basis_sad def2-universal-jkfit; df_basis_scf def2-universal-jkfit; points 5; }. func = 'hf'; anal = gradient('scf', dft_functional=func, dertype=1); fndf = gradient('scf', dft_functional=func, dertype=0); anal.print_out(); fndf.print_out(); ```. The counterpart where La is replaced with B agrees to six decimal places. This is _strongly_ suggestive of an error in ECPs. Let's keep all discussion on this issue focused on this error. DFT integration is irrelevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672
https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672:625,Deployability,integrat,integration,625,"The following input file demonstrates errors in the second decimal place:; ```; molecule {; La 1 -0.5 0; La 1 0.5 0; O 0 -1 0; O 0 0 0; O 0 1 0; }. set {; basis def2-svp; scf_type df; df_basis_sad def2-universal-jkfit; df_basis_scf def2-universal-jkfit; points 5; }. func = 'hf'; anal = gradient('scf', dft_functional=func, dertype=1); fndf = gradient('scf', dft_functional=func, dertype=0); anal.print_out(); fndf.print_out(); ```. The counterpart where La is replaced with B agrees to six decimal places. This is _strongly_ suggestive of an error in ECPs. Let's keep all discussion on this issue focused on this error. DFT integration is irrelevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672
https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672:625,Integrability,integrat,integration,625,"The following input file demonstrates errors in the second decimal place:; ```; molecule {; La 1 -0.5 0; La 1 0.5 0; O 0 -1 0; O 0 0 0; O 0 1 0; }. set {; basis def2-svp; scf_type df; df_basis_sad def2-universal-jkfit; df_basis_scf def2-universal-jkfit; points 5; }. func = 'hf'; anal = gradient('scf', dft_functional=func, dertype=1); fndf = gradient('scf', dft_functional=func, dertype=0); anal.print_out(); fndf.print_out(); ```. The counterpart where La is replaced with B agrees to six decimal places. This is _strongly_ suggestive of an error in ECPs. Let's keep all discussion on this issue focused on this error. DFT integration is irrelevant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3066#issuecomment-1784370672
https://github.com/psi4/psi4/issues/3068#issuecomment-1786385522:42,Availability,error,error,42,"We should use a more informative/tailored error message. But the reason it can't drop a wfn file is because non-Hartree--Fock Hessians are computed by finite difference, so there's at most a dummy wfn with mol, basis, qcvariables, etc. No goodies like MO coefficients or occupations. What piece of data were you seeking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1786385522
https://github.com/psi4/psi4/issues/3068#issuecomment-1786385522:48,Integrability,message,message,48,"We should use a more informative/tailored error message. But the reason it can't drop a wfn file is because non-Hartree--Fock Hessians are computed by finite difference, so there's at most a dummy wfn with mol, basis, qcvariables, etc. No goodies like MO coefficients or occupations. What piece of data were you seeking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1786385522
https://github.com/psi4/psi4/issues/3068#issuecomment-1786389664:44,Availability,error,error,44,"> We should use a more informative/tailored error message.; > ; > But the reason it can't drop a wfn file is because non-Hartree--Fock Hessians are computed by finite difference, so there's at most a dummy wfn with mol, basis, qcvariables, etc. No goodies like MO coefficients or occupations. What piece of data were you seeking?. Ach so, I just found a method to calculate without this wfn,thanks!; btw,I'm looking forward to calculate analytical hessian with DFT for long time, having any plan?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1786389664
https://github.com/psi4/psi4/issues/3068#issuecomment-1786389664:50,Integrability,message,message,50,"> We should use a more informative/tailored error message.; > ; > But the reason it can't drop a wfn file is because non-Hartree--Fock Hessians are computed by finite difference, so there's at most a dummy wfn with mol, basis, qcvariables, etc. No goodies like MO coefficients or occupations. What piece of data were you seeking?. Ach so, I just found a method to calculate without this wfn,thanks!; btw,I'm looking forward to calculate analytical hessian with DFT for long time, having any plan?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1786389664
https://github.com/psi4/psi4/issues/3068#issuecomment-1787026243:131,Availability,down,down,131,"I'd love to have RKS GGA hessians for the 1.10 release next May (and I'd probably be the one who codes it). I'm currently tracking down some errors in integrals, which is higher priority.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1787026243
https://github.com/psi4/psi4/issues/3068#issuecomment-1787026243:141,Availability,error,errors,141,"I'd love to have RKS GGA hessians for the 1.10 release next May (and I'd probably be the one who codes it). I'm currently tracking down some errors in integrals, which is higher priority.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1787026243
https://github.com/psi4/psi4/issues/3068#issuecomment-1787026243:47,Deployability,release,release,47,"I'd love to have RKS GGA hessians for the 1.10 release next May (and I'd probably be the one who codes it). I'm currently tracking down some errors in integrals, which is higher priority.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1787026243
https://github.com/psi4/psi4/issues/3070#issuecomment-1791042158:335,Integrability,inject,inject,335,"This fundamentally isn't how Psi4 works. Psi uses a AO density matrix representation wherever it can, switching to a real space for evaluation of DFT functionals but nowhere else. Maybe you can use Psi4 functions to write your own HF code with this functionality (I'd need to think harder to know if that's even doable), but you can't inject such a density into Psi4's existing HF algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3070#issuecomment-1791042158
https://github.com/psi4/psi4/issues/3070#issuecomment-1791042158:335,Security,inject,inject,335,"This fundamentally isn't how Psi4 works. Psi uses a AO density matrix representation wherever it can, switching to a real space for evaluation of DFT functionals but nowhere else. Maybe you can use Psi4 functions to write your own HF code with this functionality (I'd need to think harder to know if that's even doable), but you can't inject such a density into Psi4's existing HF algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3070#issuecomment-1791042158
https://github.com/psi4/psi4/issues/3071#issuecomment-1802567966:104,Performance,multi-thread,multi-thread,104,"The MintsHelper function `ao_eri` returns through an internal function `ao_helper`, which does not have multi-thread support currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3071#issuecomment-1802567966
https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687:278,Energy Efficiency,energy,energy,278,"Hi,; Sorry about the accidental break of features. I can fix this next week but for now trajectory information can be accessed like this. `E, history = psi4.optimize('hf/6-31G', molecule=h2o_suboptimal, return_history=True)`. This is what history looks like; ```; history = {; 'energy': [step.E for step in opt_object.history.steps],; 'gradient': [step.cart_grad for step in opt_object.history.steps],; 'coordinates': [step.geom for step in opt_object.history.steps],; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687
https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687:157,Performance,optimiz,optimize,157,"Hi,; Sorry about the accidental break of features. I can fix this next week but for now trajectory information can be accessed like this. `E, history = psi4.optimize('hf/6-31G', molecule=h2o_suboptimal, return_history=True)`. This is what history looks like; ```; history = {; 'energy': [step.E for step in opt_object.history.steps],; 'gradient': [step.cart_grad for step in opt_object.history.steps],; 'coordinates': [step.geom for step in opt_object.history.steps],; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687
https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687:118,Security,access,accessed,118,"Hi,; Sorry about the accidental break of features. I can fix this next week but for now trajectory information can be accessed like this. `E, history = psi4.optimize('hf/6-31G', molecule=h2o_suboptimal, return_history=True)`. This is what history looks like; ```; history = {; 'energy': [step.E for step in opt_object.history.steps],; 'gradient': [step.cart_grad for step in opt_object.history.steps],; 'coordinates': [step.geom for step in opt_object.history.steps],; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3074#issuecomment-1806363687
https://github.com/psi4/psi4/issues/3077#issuecomment-1812895975:315,Energy Efficiency,energy,energy,315,"This question would probably be better asked on the [Matter Modeling sackexchange site](https://mattermodeling.stackexchange.com/), or maybe the Psi4 forum. But not as a Github issue. Make sure you are accounting for the fact that your cyclic molecule has 4 fewer hydrogen atoms! If you want to compute any kind of energy difference between those two molecules, those hydrogens need to go somewhere, your reaction needs to be balanced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3077#issuecomment-1812895975
https://github.com/psi4/psi4/pull/3078#issuecomment-1814856120:74,Availability,down,down,74,Don't worry about the Docs fail. I think intersphinx for scipy & numpy is down.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3078#issuecomment-1814856120
https://github.com/psi4/psi4/pull/3086#issuecomment-1828455794:5,Testability,test,tested,5,">You tested the input in #3085 with this change?. Yes, I did test with the input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3086#issuecomment-1828455794
https://github.com/psi4/psi4/pull/3086#issuecomment-1828455794:61,Testability,test,test,61,">You tested the input in #3085 with this change?. Yes, I did test with the input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3086#issuecomment-1828455794
https://github.com/psi4/psi4/pull/3087#issuecomment-1831252908:32,Availability,error,error,32,Don't worry about the Eco/Linux error -- it's https://github.com/psi4/psi4/pull/3088#issuecomment-1831177563,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1831252908
https://github.com/psi4/psi4/pull/3087#issuecomment-1832345656:3,Testability,test,test,3,"To test this feature, I have been comparing the `gradient_on_charges` with the `gradient_on_atoms`, since they should sum up to zero along each coordinate. It's not currently possible to get the `gradient_on_atoms` directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the `wfn` (SCF in the presence of an ExternalPotential) with the ExternalPotential set to `None` from the gradient of the `wfn` with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1832345656
https://github.com/psi4/psi4/pull/3087#issuecomment-1832345656:267,Testability,test,testing,267,"To test this feature, I have been comparing the `gradient_on_charges` with the `gradient_on_atoms`, since they should sum up to zero along each coordinate. It's not currently possible to get the `gradient_on_atoms` directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the `wfn` (SCF in the presence of an ExternalPotential) with the ExternalPotential set to `None` from the gradient of the `wfn` with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1832345656
https://github.com/psi4/psi4/pull/3087#issuecomment-1832345656:494,Testability,test,test,494,"To test this feature, I have been comparing the `gradient_on_charges` with the `gradient_on_atoms`, since they should sum up to zero along each coordinate. It's not currently possible to get the `gradient_on_atoms` directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the `wfn` (SCF in the presence of an ExternalPotential) with the ExternalPotential set to `None` from the gradient of the `wfn` with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1832345656
https://github.com/psi4/psi4/pull/3087#issuecomment-1832345656:506,Testability,test,test,506,"To test this feature, I have been comparing the `gradient_on_charges` with the `gradient_on_atoms`, since they should sum up to zero along each coordinate. It's not currently possible to get the `gradient_on_atoms` directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the `wfn` (SCF in the presence of an ExternalPotential) with the ExternalPotential set to `None` from the gradient of the `wfn` with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1832345656
https://github.com/psi4/psi4/pull/3087#issuecomment-1832345656:552,Testability,test,test,552,"To test this feature, I have been comparing the `gradient_on_charges` with the `gradient_on_atoms`, since they should sum up to zero along each coordinate. It's not currently possible to get the `gradient_on_atoms` directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the `wfn` (SCF in the presence of an ExternalPotential) with the ExternalPotential set to `None` from the gradient of the `wfn` with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1832345656
https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188:5,Testability,test,test,5,"> To test this feature, I have been comparing the gradient_on_charges with the gradient_on_atoms, since they should sum up to zero along each coordinate. It's not currently possible to get the gradient_on_atoms directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the wfn (SCF in the presence of an ExternalPotential) with the ExternalPotential set to None from the gradient of the wfn with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?. I see what you mean -- you'd need `SCFDeriv::gradients_` to be exported to get at the `gradient_on_atoms` array. If that'd be generally useful, we could do it. But if it's just for testing, your procedure sounds good. Either way on new test or adding that extra computation and check to an existing extern* test. If you have a different molecule (we're stuck on water and N2), it might be nice to have a new test for variety. If you do do a new test, the procedure is to make a new dir in `tests/`, copy over the CMakeLists.txt, test_input.py, and input.dat from an existing extern test. Edit the name and the input.dat contents, and register the test in `tests/CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188
https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188:263,Testability,test,testing,263,"> To test this feature, I have been comparing the gradient_on_charges with the gradient_on_atoms, since they should sum up to zero along each coordinate. It's not currently possible to get the gradient_on_atoms directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the wfn (SCF in the presence of an ExternalPotential) with the ExternalPotential set to None from the gradient of the wfn with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?. I see what you mean -- you'd need `SCFDeriv::gradients_` to be exported to get at the `gradient_on_atoms` array. If that'd be generally useful, we could do it. But if it's just for testing, your procedure sounds good. Either way on new test or adding that extra computation and check to an existing extern* test. If you have a different molecule (we're stuck on water and N2), it might be nice to have a new test for variety. If you do do a new test, the procedure is to make a new dir in `tests/`, copy over the CMakeLists.txt, test_input.py, and input.dat from an existing extern test. Edit the name and the input.dat contents, and register the test in `tests/CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188
https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188:484,Testability,test,test,484,"> To test this feature, I have been comparing the gradient_on_charges with the gradient_on_atoms, since they should sum up to zero along each coordinate. It's not currently possible to get the gradient_on_atoms directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the wfn (SCF in the presence of an ExternalPotential) with the ExternalPotential set to None from the gradient of the wfn with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?. I see what you mean -- you'd need `SCFDeriv::gradients_` to be exported to get at the `gradient_on_atoms` array. If that'd be generally useful, we could do it. But if it's just for testing, your procedure sounds good. Either way on new test or adding that extra computation and check to an existing extern* test. If you have a different molecule (we're stuck on water and N2), it might be nice to have a new test for variety. If you do do a new test, the procedure is to make a new dir in `tests/`, copy over the CMakeLists.txt, test_input.py, and input.dat from an existing extern test. Edit the name and the input.dat contents, and register the test in `tests/CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188
https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188:496,Testability,test,test,496,"> To test this feature, I have been comparing the gradient_on_charges with the gradient_on_atoms, since they should sum up to zero along each coordinate. It's not currently possible to get the gradient_on_atoms directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the wfn (SCF in the presence of an ExternalPotential) with the ExternalPotential set to None from the gradient of the wfn with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?. I see what you mean -- you'd need `SCFDeriv::gradients_` to be exported to get at the `gradient_on_atoms` array. If that'd be generally useful, we could do it. But if it's just for testing, your procedure sounds good. Either way on new test or adding that extra computation and check to an existing extern* test. If you have a different molecule (we're stuck on water and N2), it might be nice to have a new test for variety. If you do do a new test, the procedure is to make a new dir in `tests/`, copy over the CMakeLists.txt, test_input.py, and input.dat from an existing extern test. Edit the name and the input.dat contents, and register the test in `tests/CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188
https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188:542,Testability,test,test,542,"> To test this feature, I have been comparing the gradient_on_charges with the gradient_on_atoms, since they should sum up to zero along each coordinate. It's not currently possible to get the gradient_on_atoms directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the wfn (SCF in the presence of an ExternalPotential) with the ExternalPotential set to None from the gradient of the wfn with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?. I see what you mean -- you'd need `SCFDeriv::gradients_` to be exported to get at the `gradient_on_atoms` array. If that'd be generally useful, we could do it. But if it's just for testing, your procedure sounds good. Either way on new test or adding that extra computation and check to an existing extern* test. If you have a different molecule (we're stuck on water and N2), it might be nice to have a new test for variety. If you do do a new test, the procedure is to make a new dir in `tests/`, copy over the CMakeLists.txt, test_input.py, and input.dat from an existing extern test. Edit the name and the input.dat contents, and register the test in `tests/CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188
https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188:759,Testability,test,testing,759,"> To test this feature, I have been comparing the gradient_on_charges with the gradient_on_atoms, since they should sum up to zero along each coordinate. It's not currently possible to get the gradient_on_atoms directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the wfn (SCF in the presence of an ExternalPotential) with the ExternalPotential set to None from the gradient of the wfn with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?. I see what you mean -- you'd need `SCFDeriv::gradients_` to be exported to get at the `gradient_on_atoms` array. If that'd be generally useful, we could do it. But if it's just for testing, your procedure sounds good. Either way on new test or adding that extra computation and check to an existing extern* test. If you have a different molecule (we're stuck on water and N2), it might be nice to have a new test for variety. If you do do a new test, the procedure is to make a new dir in `tests/`, copy over the CMakeLists.txt, test_input.py, and input.dat from an existing extern test. Edit the name and the input.dat contents, and register the test in `tests/CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188
https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188:814,Testability,test,test,814,"> To test this feature, I have been comparing the gradient_on_charges with the gradient_on_atoms, since they should sum up to zero along each coordinate. It's not currently possible to get the gradient_on_atoms directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the wfn (SCF in the presence of an ExternalPotential) with the ExternalPotential set to None from the gradient of the wfn with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?. I see what you mean -- you'd need `SCFDeriv::gradients_` to be exported to get at the `gradient_on_atoms` array. If that'd be generally useful, we could do it. But if it's just for testing, your procedure sounds good. Either way on new test or adding that extra computation and check to an existing extern* test. If you have a different molecule (we're stuck on water and N2), it might be nice to have a new test for variety. If you do do a new test, the procedure is to make a new dir in `tests/`, copy over the CMakeLists.txt, test_input.py, and input.dat from an existing extern test. Edit the name and the input.dat contents, and register the test in `tests/CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188
https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188:885,Testability,test,test,885,"> To test this feature, I have been comparing the gradient_on_charges with the gradient_on_atoms, since they should sum up to zero along each coordinate. It's not currently possible to get the gradient_on_atoms directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the wfn (SCF in the presence of an ExternalPotential) with the ExternalPotential set to None from the gradient of the wfn with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?. I see what you mean -- you'd need `SCFDeriv::gradients_` to be exported to get at the `gradient_on_atoms` array. If that'd be generally useful, we could do it. But if it's just for testing, your procedure sounds good. Either way on new test or adding that extra computation and check to an existing extern* test. If you have a different molecule (we're stuck on water and N2), it might be nice to have a new test for variety. If you do do a new test, the procedure is to make a new dir in `tests/`, copy over the CMakeLists.txt, test_input.py, and input.dat from an existing extern test. Edit the name and the input.dat contents, and register the test in `tests/CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188
https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188:986,Testability,test,test,986,"> To test this feature, I have been comparing the gradient_on_charges with the gradient_on_atoms, since they should sum up to zero along each coordinate. It's not currently possible to get the gradient_on_atoms directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the wfn (SCF in the presence of an ExternalPotential) with the ExternalPotential set to None from the gradient of the wfn with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?. I see what you mean -- you'd need `SCFDeriv::gradients_` to be exported to get at the `gradient_on_atoms` array. If that'd be generally useful, we could do it. But if it's just for testing, your procedure sounds good. Either way on new test or adding that extra computation and check to an existing extern* test. If you have a different molecule (we're stuck on water and N2), it might be nice to have a new test for variety. If you do do a new test, the procedure is to make a new dir in `tests/`, copy over the CMakeLists.txt, test_input.py, and input.dat from an existing extern test. Edit the name and the input.dat contents, and register the test in `tests/CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188
https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188:1023,Testability,test,test,1023,"> To test this feature, I have been comparing the gradient_on_charges with the gradient_on_atoms, since they should sum up to zero along each coordinate. It's not currently possible to get the gradient_on_atoms directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the wfn (SCF in the presence of an ExternalPotential) with the ExternalPotential set to None from the gradient of the wfn with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?. I see what you mean -- you'd need `SCFDeriv::gradients_` to be exported to get at the `gradient_on_atoms` array. If that'd be generally useful, we could do it. But if it's just for testing, your procedure sounds good. Either way on new test or adding that extra computation and check to an existing extern* test. If you have a different molecule (we're stuck on water and N2), it might be nice to have a new test for variety. If you do do a new test, the procedure is to make a new dir in `tests/`, copy over the CMakeLists.txt, test_input.py, and input.dat from an existing extern test. Edit the name and the input.dat contents, and register the test in `tests/CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188
https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188:1068,Testability,test,tests,1068,"> To test this feature, I have been comparing the gradient_on_charges with the gradient_on_atoms, since they should sum up to zero along each coordinate. It's not currently possible to get the gradient_on_atoms directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the wfn (SCF in the presence of an ExternalPotential) with the ExternalPotential set to None from the gradient of the wfn with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?. I see what you mean -- you'd need `SCFDeriv::gradients_` to be exported to get at the `gradient_on_atoms` array. If that'd be generally useful, we could do it. But if it's just for testing, your procedure sounds good. Either way on new test or adding that extra computation and check to an existing extern* test. If you have a different molecule (we're stuck on water and N2), it might be nice to have a new test for variety. If you do do a new test, the procedure is to make a new dir in `tests/`, copy over the CMakeLists.txt, test_input.py, and input.dat from an existing extern test. Edit the name and the input.dat contents, and register the test in `tests/CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188
https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188:1160,Testability,test,test,1160,"> To test this feature, I have been comparing the gradient_on_charges with the gradient_on_atoms, since they should sum up to zero along each coordinate. It's not currently possible to get the gradient_on_atoms directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the wfn (SCF in the presence of an ExternalPotential) with the ExternalPotential set to None from the gradient of the wfn with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?. I see what you mean -- you'd need `SCFDeriv::gradients_` to be exported to get at the `gradient_on_atoms` array. If that'd be generally useful, we could do it. But if it's just for testing, your procedure sounds good. Either way on new test or adding that extra computation and check to an existing extern* test. If you have a different molecule (we're stuck on water and N2), it might be nice to have a new test for variety. If you do do a new test, the procedure is to make a new dir in `tests/`, copy over the CMakeLists.txt, test_input.py, and input.dat from an existing extern test. Edit the name and the input.dat contents, and register the test in `tests/CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188
https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188:1225,Testability,test,test,1225,"> To test this feature, I have been comparing the gradient_on_charges with the gradient_on_atoms, since they should sum up to zero along each coordinate. It's not currently possible to get the gradient_on_atoms directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the wfn (SCF in the presence of an ExternalPotential) with the ExternalPotential set to None from the gradient of the wfn with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?. I see what you mean -- you'd need `SCFDeriv::gradients_` to be exported to get at the `gradient_on_atoms` array. If that'd be generally useful, we could do it. But if it's just for testing, your procedure sounds good. Either way on new test or adding that extra computation and check to an existing extern* test. If you have a different molecule (we're stuck on water and N2), it might be nice to have a new test for variety. If you do do a new test, the procedure is to make a new dir in `tests/`, copy over the CMakeLists.txt, test_input.py, and input.dat from an existing extern test. Edit the name and the input.dat contents, and register the test in `tests/CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188
https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188:1234,Testability,test,tests,1234,"> To test this feature, I have been comparing the gradient_on_charges with the gradient_on_atoms, since they should sum up to zero along each coordinate. It's not currently possible to get the gradient_on_atoms directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the wfn (SCF in the presence of an ExternalPotential) with the ExternalPotential set to None from the gradient of the wfn with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?. I see what you mean -- you'd need `SCFDeriv::gradients_` to be exported to get at the `gradient_on_atoms` array. If that'd be generally useful, we could do it. But if it's just for testing, your procedure sounds good. Either way on new test or adding that extra computation and check to an existing extern* test. If you have a different molecule (we're stuck on water and N2), it might be nice to have a new test for variety. If you do do a new test, the procedure is to make a new dir in `tests/`, copy over the CMakeLists.txt, test_input.py, and input.dat from an existing extern test. Edit the name and the input.dat contents, and register the test in `tests/CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188
https://github.com/psi4/psi4/pull/3087#issuecomment-1836755775:140,Testability,test,test,140,"Exporting `SCFDeriv::gradients_` might be a useful feature to decompose the gradient (and force) contributions on the QM atoms, but for the test on `gradient_on_charges`, I have opted to use existing machinery in Psi4 in a new test directory, `extern4`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1836755775
https://github.com/psi4/psi4/pull/3087#issuecomment-1836755775:227,Testability,test,test,227,"Exporting `SCFDeriv::gradients_` might be a useful feature to decompose the gradient (and force) contributions on the QM atoms, but for the test on `gradient_on_charges`, I have opted to use existing machinery in Psi4 in a new test directory, `extern4`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1836755775
https://github.com/psi4/psi4/pull/3088#issuecomment-1831177563:8,Availability,error,error,8,"Ok, the error is a combination of utc & snowflake. Nothing to worry about, I think. Python 3.12 changed some things and Ben replaced some utc commands in the last couple of days. _But_ there was a snowflake bug that he also fixed, and we're grabbing inconsistent qcportal and fractal pieces: https://github.com/psi4/psi4/blob/master/.github/workflows/ecosystem.yml#L234 @bennybp's doing a v0.52 release in the next couple days that should fix all this. Fine to merge with these errors until then. ```; E --> snowflake = FractalSnowflake(); E client = snowflake.client(); E h2o = geometry(""""""; E O; E H 1 1.0; E H 1 1.0 2 104.5; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! cannot import name 'now_at_utc' from 'qcportal.utils' !; E ! (/usr/share/miniconda3/envs/p4build/lib/python3.12/site- !; E ! packages/qcportal/utils.py) !; E ! !; E !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3088#issuecomment-1831177563
https://github.com/psi4/psi4/pull/3088#issuecomment-1831177563:478,Availability,error,errors,478,"Ok, the error is a combination of utc & snowflake. Nothing to worry about, I think. Python 3.12 changed some things and Ben replaced some utc commands in the last couple of days. _But_ there was a snowflake bug that he also fixed, and we're grabbing inconsistent qcportal and fractal pieces: https://github.com/psi4/psi4/blob/master/.github/workflows/ecosystem.yml#L234 @bennybp's doing a v0.52 release in the next couple days that should fix all this. Fine to merge with these errors until then. ```; E --> snowflake = FractalSnowflake(); E client = snowflake.client(); E h2o = geometry(""""""; E O; E H 1 1.0; E H 1 1.0 2 104.5; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! cannot import name 'now_at_utc' from 'qcportal.utils' !; E ! (/usr/share/miniconda3/envs/p4build/lib/python3.12/site- !; E ! packages/qcportal/utils.py) !; E ! !; E !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3088#issuecomment-1831177563
https://github.com/psi4/psi4/pull/3088#issuecomment-1831177563:395,Deployability,release,release,395,"Ok, the error is a combination of utc & snowflake. Nothing to worry about, I think. Python 3.12 changed some things and Ben replaced some utc commands in the last couple of days. _But_ there was a snowflake bug that he also fixed, and we're grabbing inconsistent qcportal and fractal pieces: https://github.com/psi4/psi4/blob/master/.github/workflows/ecosystem.yml#L234 @bennybp's doing a v0.52 release in the next couple days that should fix all this. Fine to merge with these errors until then. ```; E --> snowflake = FractalSnowflake(); E client = snowflake.client(); E h2o = geometry(""""""; E O; E H 1 1.0; E H 1 1.0 2 104.5; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! cannot import name 'now_at_utc' from 'qcportal.utils' !; E ! (/usr/share/miniconda3/envs/p4build/lib/python3.12/site- !; E ! packages/qcportal/utils.py) !; E ! !; E !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3088#issuecomment-1831177563
https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035:156,Availability,down,download,156,"Thanks for the inquiry. My impression has been that distributing a Py/C++ package through pypi was a bad idea b/c (1) if pip decided to compile rather than download, it'd take hours to build all the deps; (2) unless we vendor 1GB libraries, we'd have to maintain Libint2, gau2grid, Libxc all on pypi, all of which are C/C++; (3) no control of LAPACK implementations and no MKL, so unreliable performance. That said, I really haven't reassessed since the advent of wheels. Would your environment enable you to download the installer (an executable bash script like the Miniconda one)? Download, bash it, and psi4 is preinstalled. Or are docker or singularity images workable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035
https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035:509,Availability,down,download,509,"Thanks for the inquiry. My impression has been that distributing a Py/C++ package through pypi was a bad idea b/c (1) if pip decided to compile rather than download, it'd take hours to build all the deps; (2) unless we vendor 1GB libraries, we'd have to maintain Libint2, gau2grid, Libxc all on pypi, all of which are C/C++; (3) no control of LAPACK implementations and no MKL, so unreliable performance. That said, I really haven't reassessed since the advent of wheels. Would your environment enable you to download the installer (an executable bash script like the Miniconda one)? Download, bash it, and psi4 is preinstalled. Or are docker or singularity images workable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035
https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035:584,Availability,Down,Download,584,"Thanks for the inquiry. My impression has been that distributing a Py/C++ package through pypi was a bad idea b/c (1) if pip decided to compile rather than download, it'd take hours to build all the deps; (2) unless we vendor 1GB libraries, we'd have to maintain Libint2, gau2grid, Libxc all on pypi, all of which are C/C++; (3) no control of LAPACK implementations and no MKL, so unreliable performance. That said, I really haven't reassessed since the advent of wheels. Would your environment enable you to download the installer (an executable bash script like the Miniconda one)? Download, bash it, and psi4 is preinstalled. Or are docker or singularity images workable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035
https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035:522,Deployability,install,installer,522,"Thanks for the inquiry. My impression has been that distributing a Py/C++ package through pypi was a bad idea b/c (1) if pip decided to compile rather than download, it'd take hours to build all the deps; (2) unless we vendor 1GB libraries, we'd have to maintain Libint2, gau2grid, Libxc all on pypi, all of which are C/C++; (3) no control of LAPACK implementations and no MKL, so unreliable performance. That said, I really haven't reassessed since the advent of wheels. Would your environment enable you to download the installer (an executable bash script like the Miniconda one)? Download, bash it, and psi4 is preinstalled. Or are docker or singularity images workable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035
https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035:392,Performance,perform,performance,392,"Thanks for the inquiry. My impression has been that distributing a Py/C++ package through pypi was a bad idea b/c (1) if pip decided to compile rather than download, it'd take hours to build all the deps; (2) unless we vendor 1GB libraries, we'd have to maintain Libint2, gau2grid, Libxc all on pypi, all of which are C/C++; (3) no control of LAPACK implementations and no MKL, so unreliable performance. That said, I really haven't reassessed since the advent of wheels. Would your environment enable you to download the installer (an executable bash script like the Miniconda one)? Download, bash it, and psi4 is preinstalled. Or are docker or singularity images workable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3091#issuecomment-1834765035
https://github.com/psi4/psi4/issues/3092#issuecomment-1836312308:231,Deployability,patch,patched,231,"Sorry, I should have read your post more carefully. I didn't notice the 3.27.7 bit. I still don't actually understand it b/c [CMP0144](https://cmake.org/cmake/help/v3.27/policy/CMP0144.html) was introduced in 3.27.0 . Maybe Fedora patched it out b/c it could be disruptive? Anyway, I guess FAE's is the safer approach in #3089",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3092#issuecomment-1836312308
https://github.com/psi4/psi4/issues/3092#issuecomment-1836312308:303,Safety,safe,safer,303,"Sorry, I should have read your post more carefully. I didn't notice the 3.27.7 bit. I still don't actually understand it b/c [CMP0144](https://cmake.org/cmake/help/v3.27/policy/CMP0144.html) was introduced in 3.27.0 . Maybe Fedora patched it out b/c it could be disruptive? Anyway, I guess FAE's is the safer approach in #3089",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3092#issuecomment-1836312308
https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087:615,Availability,avail,available,615,"It depends on which ones you're targeting and how you're getting psi4. If you're building from src, you'd `-D ENABLE_<addon>=ON` as described here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L69-L108 . (Note that ""addon""s is what you'd want to search; ""plugins"" are different in psi4.). If you're using the conda binary, it varies by the nature of the addon. Addons that have to be enabled/disabled at psi4-build-time tend to be already in the psi4 binary. Unfortunately CheMPS2 is one that hasn't been transitioned to conda-forge yet due to license issues. You could grab psi4 v1.7 to use it. Ambit is available to install from c-f. Other addons that psi4 doesn't need to know about at compile time, like cppe or dftd3, can be conda installed at any time. That's the general picture. I can probably help on specifics if you run into difficulties.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087
https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087:628,Deployability,install,install,628,"It depends on which ones you're targeting and how you're getting psi4. If you're building from src, you'd `-D ENABLE_<addon>=ON` as described here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L69-L108 . (Note that ""addon""s is what you'd want to search; ""plugins"" are different in psi4.). If you're using the conda binary, it varies by the nature of the addon. Addons that have to be enabled/disabled at psi4-build-time tend to be already in the psi4 binary. Unfortunately CheMPS2 is one that hasn't been transitioned to conda-forge yet due to license issues. You could grab psi4 v1.7 to use it. Ambit is available to install from c-f. Other addons that psi4 doesn't need to know about at compile time, like cppe or dftd3, can be conda installed at any time. That's the general picture. I can probably help on specifics if you run into difficulties.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087
https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087:746,Deployability,install,installed,746,"It depends on which ones you're targeting and how you're getting psi4. If you're building from src, you'd `-D ENABLE_<addon>=ON` as described here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L69-L108 . (Note that ""addon""s is what you'd want to search; ""plugins"" are different in psi4.). If you're using the conda binary, it varies by the nature of the addon. Addons that have to be enabled/disabled at psi4-build-time tend to be already in the psi4 binary. Unfortunately CheMPS2 is one that hasn't been transitioned to conda-forge yet due to license issues. You could grab psi4 v1.7 to use it. Ambit is available to install from c-f. Other addons that psi4 doesn't need to know about at compile time, like cppe or dftd3, can be conda installed at any time. That's the general picture. I can probably help on specifics if you run into difficulties.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087
https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087:3,Integrability,depend,depends,3,"It depends on which ones you're targeting and how you're getting psi4. If you're building from src, you'd `-D ENABLE_<addon>=ON` as described here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L69-L108 . (Note that ""addon""s is what you'd want to search; ""plugins"" are different in psi4.). If you're using the conda binary, it varies by the nature of the addon. Addons that have to be enabled/disabled at psi4-build-time tend to be already in the psi4 binary. Unfortunately CheMPS2 is one that hasn't been transitioned to conda-forge yet due to license issues. You could grab psi4 v1.7 to use it. Ambit is available to install from c-f. Other addons that psi4 doesn't need to know about at compile time, like cppe or dftd3, can be conda installed at any time. That's the general picture. I can probably help on specifics if you run into difficulties.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087
https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087:265,Modifiability,plugin,plugins,265,"It depends on which ones you're targeting and how you're getting psi4. If you're building from src, you'd `-D ENABLE_<addon>=ON` as described here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L69-L108 . (Note that ""addon""s is what you'd want to search; ""plugins"" are different in psi4.). If you're using the conda binary, it varies by the nature of the addon. Addons that have to be enabled/disabled at psi4-build-time tend to be already in the psi4 binary. Unfortunately CheMPS2 is one that hasn't been transitioned to conda-forge yet due to license issues. You could grab psi4 v1.7 to use it. Ambit is available to install from c-f. Other addons that psi4 doesn't need to know about at compile time, like cppe or dftd3, can be conda installed at any time. That's the general picture. I can probably help on specifics if you run into difficulties.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087
https://github.com/psi4/psi4/issues/3094#issuecomment-1837045236:41,Deployability,install,install,41,Thank you loriab! I am mainly looking to install ambit so that I can compile forte. On the way I found CheMSP2 to be potentially useful. Is there a way I could independently install CheMSP2 in the same conda environment as Psi4?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1837045236
https://github.com/psi4/psi4/issues/3094#issuecomment-1837045236:174,Deployability,install,install,174,Thank you loriab! I am mainly looking to install ambit so that I can compile forte. On the way I found CheMSP2 to be potentially useful. Is there a way I could independently install CheMSP2 in the same conda environment as Psi4?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1837045236
https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854:21,Deployability,install,install,21,"Ambit's easy, `conda install pyambit -c conda-forge`. There's nothing in psi that actually links to it, so it's fine to simply install psi4 binary and ambit binary into the same env. For CheMPS2, are you wanting to run chemps2 through psi4? That's easy to enable if you're building psi4 from src. But there isn't a good sol'n for using psi4 binary. I'd suggest compiling chemps2 from src if you want chemps2 w/o psi4 linkage. Or wait until we finally re-plugin-ize it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854
https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854:127,Deployability,install,install,127,"Ambit's easy, `conda install pyambit -c conda-forge`. There's nothing in psi that actually links to it, so it's fine to simply install psi4 binary and ambit binary into the same env. For CheMPS2, are you wanting to run chemps2 through psi4? That's easy to enable if you're building psi4 from src. But there isn't a good sol'n for using psi4 binary. I'd suggest compiling chemps2 from src if you want chemps2 w/o psi4 linkage. Or wait until we finally re-plugin-ize it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854
https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854:454,Modifiability,plugin,plugin-ize,454,"Ambit's easy, `conda install pyambit -c conda-forge`. There's nothing in psi that actually links to it, so it's fine to simply install psi4 binary and ambit binary into the same env. For CheMPS2, are you wanting to run chemps2 through psi4? That's easy to enable if you're building psi4 from src. But there isn't a good sol'n for using psi4 binary. I'd suggest compiling chemps2 from src if you want chemps2 w/o psi4 linkage. Or wait until we finally re-plugin-ize it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854
https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854:120,Usability,simpl,simply,120,"Ambit's easy, `conda install pyambit -c conda-forge`. There's nothing in psi that actually links to it, so it's fine to simply install psi4 binary and ambit binary into the same env. For CheMPS2, are you wanting to run chemps2 through psi4? That's easy to enable if you're building psi4 from src. But there isn't a good sol'n for using psi4 binary. I'd suggest compiling chemps2 from src if you want chemps2 w/o psi4 linkage. Or wait until we finally re-plugin-ize it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854
https://github.com/psi4/psi4/issues/3094#issuecomment-1837151573:11,Availability,ping,ping,11,Obligatory ping to @fevangelista on things Forte.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1837151573
https://github.com/psi4/psi4/issues/3096#issuecomment-1840889085:303,Availability,failure,failure,303,"No idea what is causing DSYEV to fail, but before I implemented the new wrapper this would have gone undetected, so if anyone tried to `git bisect` it crash/no crash would not be a good indicator. The old wrapper ignored the info value from LAPACK and let execution continue despite the diagonalization failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3096#issuecomment-1840889085
https://github.com/psi4/psi4/issues/3096#issuecomment-1840889085:72,Integrability,wrap,wrapper,72,"No idea what is causing DSYEV to fail, but before I implemented the new wrapper this would have gone undetected, so if anyone tried to `git bisect` it crash/no crash would not be a good indicator. The old wrapper ignored the info value from LAPACK and let execution continue despite the diagonalization failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3096#issuecomment-1840889085
https://github.com/psi4/psi4/issues/3096#issuecomment-1840889085:205,Integrability,wrap,wrapper,205,"No idea what is causing DSYEV to fail, but before I implemented the new wrapper this would have gone undetected, so if anyone tried to `git bisect` it crash/no crash would not be a good indicator. The old wrapper ignored the info value from LAPACK and let execution continue despite the diagonalization failure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3096#issuecomment-1840889085
https://github.com/psi4/psi4/pull/3097#issuecomment-1845027994:34,Deployability,release,release,34,Sorry I could not make it for 1.9 release :-D,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3097#issuecomment-1845027994
https://github.com/psi4/psi4/issues/3099#issuecomment-1848328400:5,Availability,error,errors,5,"Most errors appear to be related to formatting, which is likely caused by a mismatch of formatters used by Psi4 upstream and FreeBSD. The latter could have an older version, for example. There are errors related to missing functionals in Libxc. Looks like FreeBSD only has Libxc 6.0.0 released over a year ago. E.g. HYB_GGA_XC_R2SCAN0 was only added in Libxc 6.1.0. Is the version check in Psi4 not stringent enough or was it disabled in the FreeBSD build?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3099#issuecomment-1848328400
https://github.com/psi4/psi4/issues/3099#issuecomment-1848328400:197,Availability,error,errors,197,"Most errors appear to be related to formatting, which is likely caused by a mismatch of formatters used by Psi4 upstream and FreeBSD. The latter could have an older version, for example. There are errors related to missing functionals in Libxc. Looks like FreeBSD only has Libxc 6.0.0 released over a year ago. E.g. HYB_GGA_XC_R2SCAN0 was only added in Libxc 6.1.0. Is the version check in Psi4 not stringent enough or was it disabled in the FreeBSD build?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3099#issuecomment-1848328400
https://github.com/psi4/psi4/issues/3099#issuecomment-1848328400:285,Deployability,release,released,285,"Most errors appear to be related to formatting, which is likely caused by a mismatch of formatters used by Psi4 upstream and FreeBSD. The latter could have an older version, for example. There are errors related to missing functionals in Libxc. Looks like FreeBSD only has Libxc 6.0.0 released over a year ago. E.g. HYB_GGA_XC_R2SCAN0 was only added in Libxc 6.1.0. Is the version check in Psi4 not stringent enough or was it disabled in the FreeBSD build?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3099#issuecomment-1848328400
https://github.com/psi4/psi4/issues/3099#issuecomment-1848408260:148,Availability,avail,available,148,"I haven't had a chance to look into it, but yes, I suspect the version check isn't tight enough for libxc. We only recently added some that weren't available in v5. I've been using v6.2 fwiw. I'll figure out the right min pin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3099#issuecomment-1848408260
https://github.com/psi4/psi4/issues/3099#issuecomment-1848505594:0,Deployability,Update,Update,0,Update to libxc-6.2.2 is pending maintainer's approval in FreeBSD. As for formatting - should formatting tests really be part of the test suite?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3099#issuecomment-1848505594
https://github.com/psi4/psi4/issues/3099#issuecomment-1848505594:105,Testability,test,tests,105,Update to libxc-6.2.2 is pending maintainer's approval in FreeBSD. As for formatting - should formatting tests really be part of the test suite?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3099#issuecomment-1848505594
https://github.com/psi4/psi4/issues/3099#issuecomment-1848505594:133,Testability,test,test,133,Update to libxc-6.2.2 is pending maintainer's approval in FreeBSD. As for formatting - should formatting tests really be part of the test suite?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3099#issuecomment-1848505594
https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635:79,Availability,avail,available,79,"Hi @kzinovjev great job adding this. . @loriab It would be great to have these available via the qcengine interface so we could store them in QCArchive when MBIS charges are requested on a calculation, can you adviseif any other changes would be needed to be made to make this possible?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635
https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635:162,Energy Efficiency,charge,charges,162,"Hi @kzinovjev great job adding this. . @loriab It would be great to have these available via the qcengine interface so we could store them in QCArchive when MBIS charges are requested on a calculation, can you adviseif any other changes would be needed to be made to make this possible?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635
https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635:106,Integrability,interface,interface,106,"Hi @kzinovjev great job adding this. . @loriab It would be great to have these available via the qcengine interface so we could store them in QCArchive when MBIS charges are requested on a calculation, can you adviseif any other changes would be needed to be made to make this possible?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3102#issuecomment-1860206635
https://github.com/psi4/psi4/pull/3102#issuecomment-1919813943:588,Deployability,patch,patch,588,"> Hi @kzinovjev just checking over this again and noticed that the [populations](https://github.com/psi4/psi4/blob/e105cc2346fba36ccacb77bf8944a3dcf6c097f2/psi4/src/psi4/libmints/oeprop.cc#L2099-L2104) and [widths](https://github.com/psi4/psi4/blob/e105cc2346fba36ccacb77bf8944a3dcf6c097f2/psi4/src/psi4/libmints/oeprop.cc#L2182-L2188) might already be printed can you check they match what you are printing?. Hi @jthorton, currently only the atomic charges (so, the sum of populations of all the shells) and the widths of the last shell for each atom are printed. In contrast, with this patch the full result of MBIS density fitting is printed, so populations and widths of all the shells. This is helpful if one wants to split the atomic charges into core/valence shells, as in [MEDFF](http://dx.doi.org/10.1021/acs.jctc.6b00969), [IPML](https://doi.org/10.1063/1.5009502) or [EMLE](https://doi.org/10.1021/acs.jctc.2c00914) methods.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3102#issuecomment-1919813943
https://github.com/psi4/psi4/pull/3102#issuecomment-1919813943:450,Energy Efficiency,charge,charges,450,"> Hi @kzinovjev just checking over this again and noticed that the [populations](https://github.com/psi4/psi4/blob/e105cc2346fba36ccacb77bf8944a3dcf6c097f2/psi4/src/psi4/libmints/oeprop.cc#L2099-L2104) and [widths](https://github.com/psi4/psi4/blob/e105cc2346fba36ccacb77bf8944a3dcf6c097f2/psi4/src/psi4/libmints/oeprop.cc#L2182-L2188) might already be printed can you check they match what you are printing?. Hi @jthorton, currently only the atomic charges (so, the sum of populations of all the shells) and the widths of the last shell for each atom are printed. In contrast, with this patch the full result of MBIS density fitting is printed, so populations and widths of all the shells. This is helpful if one wants to split the atomic charges into core/valence shells, as in [MEDFF](http://dx.doi.org/10.1021/acs.jctc.6b00969), [IPML](https://doi.org/10.1063/1.5009502) or [EMLE](https://doi.org/10.1021/acs.jctc.2c00914) methods.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3102#issuecomment-1919813943
https://github.com/psi4/psi4/pull/3102#issuecomment-1919813943:740,Energy Efficiency,charge,charges,740,"> Hi @kzinovjev just checking over this again and noticed that the [populations](https://github.com/psi4/psi4/blob/e105cc2346fba36ccacb77bf8944a3dcf6c097f2/psi4/src/psi4/libmints/oeprop.cc#L2099-L2104) and [widths](https://github.com/psi4/psi4/blob/e105cc2346fba36ccacb77bf8944a3dcf6c097f2/psi4/src/psi4/libmints/oeprop.cc#L2182-L2188) might already be printed can you check they match what you are printing?. Hi @jthorton, currently only the atomic charges (so, the sum of populations of all the shells) and the widths of the last shell for each atom are printed. In contrast, with this patch the full result of MBIS density fitting is printed, so populations and widths of all the shells. This is helpful if one wants to split the atomic charges into core/valence shells, as in [MEDFF](http://dx.doi.org/10.1021/acs.jctc.6b00969), [IPML](https://doi.org/10.1063/1.5009502) or [EMLE](https://doi.org/10.1021/acs.jctc.2c00914) methods.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3102#issuecomment-1919813943
https://github.com/psi4/psi4/pull/3104#issuecomment-1854509312:130,Testability,test,tests,130,"Had to swap the order of `[[nodiscard]]` and `PSI_API`, GCC is lenient about this but Clang is not.; GHA Eco (Linux and MacOS) CI tests are still broken for some reason unrelated to this PR.; Otherwise this should now be ready for merge, when convenient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3104#issuecomment-1854509312
https://github.com/psi4/psi4/pull/3105#issuecomment-1859232261:193,Integrability,message,message,193,"Right, Ed's SAPT's CPHF still prints E but no longer considers deltaE for convergence. (There's a few more notes on the Google Doc.) Austin's away -- I'll get this compiling. Was there another message (appears in my email) that got deleted on GH?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3105#issuecomment-1859232261
https://github.com/psi4/psi4/pull/3105#issuecomment-1859232802:20,Integrability,message,message,20,"> Was there another message (appears in my email) that got deleted on GH?. Yes, I deleted it when I realized my criticism was totally false. I apologize for the confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3105#issuecomment-1859232802
https://github.com/psi4/psi4/pull/3105#issuecomment-1859233247:21,Integrability,message,message,21,">> Was there another message (appears in my email) that got deleted on GH?. > Yes, I deleted it when I realized my criticism was totally false. I apologize for the confusion. Ok, no problem, thanks. I just keep losing things in email, and I remembered the suggetion sounded likely. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3105#issuecomment-1859233247
https://github.com/psi4/psi4/issues/3106#issuecomment-1856814920:3,Performance,optimiz,optimization,3,"TS optimization is possible, and following an excited state is possible. The main difficulty is psi4 is lacking cheap excited state methods with analytic gradients. So no CIS, and TDDFT would use finite-difference gradients. If it's EOM-CC2 or EOM-CCSD (or a well-characterized by docc/socc SCF), Psi can help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3106#issuecomment-1856814920
https://github.com/psi4/psi4/issues/3106#issuecomment-1856865567:109,Availability,error,error,109,Can you give me an example of TDDFT using finite difference gradients? I have the vague memory that I got an error the last time I tried that.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3106#issuecomment-1856865567
https://github.com/psi4/psi4/issues/3109#issuecomment-1856788141:20,Security,access,access,20,I don't know how to access this to show you. It stopped working around 11 am today,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3109#issuecomment-1856788141
https://github.com/psi4/psi4/issues/3109#issuecomment-1856789682:71,Availability,error,error,71,"Just try typing `conda list` on the command line. If that gives you an error, show us the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3109#issuecomment-1856789682
https://github.com/psi4/psi4/issues/3109#issuecomment-1856789682:90,Availability,error,error,90,"Just try typing `conda list` on the command line. If that gives you an error, show us the error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3109#issuecomment-1856789682
https://github.com/psi4/psi4/issues/3109#issuecomment-1856808647:316,Security,certificate,certificates,316,Thanks guys. Here is the list:. # packages in environment at /usr/local:; #; ```; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 2_gnu conda-forge; brotlipy 0.7.0 py310h5764c6d_1005 conda-forge; bzip2 1.0.8 h7f98852_4 conda-forge; c-ares 1.18.1 h7f98852_0 conda-forge; ca-certificates 2022.12.7 ha878542_0 conda-forge; certifi 2022.12.7 pyhd8ed1ab_0 conda-forge; cffi 1.15.1 py310h255011f_3 conda-forge; charset-normalizer 3.1.0 pyhd8ed1ab_0 conda-forge; colorama 0.4.6 pyhd8ed1ab_0 conda-forge; conda 23.1.0 py310hff52083_0 conda-forge; conda-package-handling 2.0.2 pyh38be061_0 conda-forge; conda-package-streaming 0.7.0 pyhd8ed1ab_1 conda-forge; condacolab 0.1.7 pypi_0 pypi; cryptography 40.0.1 py310h34c0648_0 conda-forge; fmt 9.1.0 h924138e_0 conda-forge; icu 72.1 hcb278e6_0 conda-forge; idna 3.4 pyhd8ed1ab_0 conda-forge; keyutils 1.6.1 h166bdaf_0 conda-forge; krb5 1.20.1 h81ceb04_0 conda-forge; ld_impl_linux-64 2.40 h41732ed_0 conda-forge; libarchive 3.6.2 h3d51595_0 conda-forge; libcurl 7.88.1 hdc1c0ab_1 conda-forge; libedit 3.1.20191231 he28a2e2_2 conda-forge; libev 4.33 h516909a_1 conda-forge; libffi 3.4.2 h7f98852_5 conda-forge; libgcc-ng 12.2.0 h65d4601_19 conda-forge; libgomp 12.2.0 h65d4601_19 conda-forge; libiconv 1.17 h166bdaf_0 conda-forge; libmamba 1.4.1 hcea66bb_0 conda-forge; libmambapy 1.4.1 py310h1428755_0 conda-forge; libnghttp2 1.52.0 h61bc06f_0 conda-forge; libnsl 2.0.0 h7f98852_0 conda-forge; libsolv 0.7.23 h3eb15da_0 conda-forge; libsqlite 3.40.0 h753d276_0 conda-forge; libssh2 1.10.0 hf14f497_3 conda-forge; libstdcxx-ng 12.2.0 h46fd767_19 conda-forge; libuuid 2.38.1 h0b41bf4_0 conda-forge; libxml2 2.10.3 hfdac1af_6 conda-forge; libzlib 1.2.13 h166bdaf_4 conda-forge; lz4-c 1.9.4 hcb278e6_0 conda-forge; lzo 2.10 h516909a_1000 conda-forge; mamba 1.4.1 py310h51d5547_0 conda-forge; ncurses 6.3 h27087fc_1 conda-forge; openssl 3.1.0 h0b41bf4_0 conda-forge; pip 23.0.1 pyhd8ed1ab_0 conda-forge; pluggy 1.0.0 pyhd8ed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3109#issuecomment-1856808647
https://github.com/psi4/psi4/issues/3109#issuecomment-1856857465:185,Deployability,install,installed,185,"There's no particular reason your environment shouldn't work. I think I'd fire up a fresh colab and then add packages one-by-one, checking with `conda list` (or `mamba list`) that they installed as expected. that is, something like:. ```; conda install psi4 -c conda-forge/label/libint_dev -c conda-forge; conda list; import psi4; conda install ase nglview -c conda-forge; conda list; conda install psi4::resp; conda list; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3109#issuecomment-1856857465
https://github.com/psi4/psi4/issues/3109#issuecomment-1856857465:245,Deployability,install,install,245,"There's no particular reason your environment shouldn't work. I think I'd fire up a fresh colab and then add packages one-by-one, checking with `conda list` (or `mamba list`) that they installed as expected. that is, something like:. ```; conda install psi4 -c conda-forge/label/libint_dev -c conda-forge; conda list; import psi4; conda install ase nglview -c conda-forge; conda list; conda install psi4::resp; conda list; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3109#issuecomment-1856857465
https://github.com/psi4/psi4/issues/3109#issuecomment-1856857465:337,Deployability,install,install,337,"There's no particular reason your environment shouldn't work. I think I'd fire up a fresh colab and then add packages one-by-one, checking with `conda list` (or `mamba list`) that they installed as expected. that is, something like:. ```; conda install psi4 -c conda-forge/label/libint_dev -c conda-forge; conda list; import psi4; conda install ase nglview -c conda-forge; conda list; conda install psi4::resp; conda list; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3109#issuecomment-1856857465
https://github.com/psi4/psi4/issues/3109#issuecomment-1856857465:391,Deployability,install,install,391,"There's no particular reason your environment shouldn't work. I think I'd fire up a fresh colab and then add packages one-by-one, checking with `conda list` (or `mamba list`) that they installed as expected. that is, something like:. ```; conda install psi4 -c conda-forge/label/libint_dev -c conda-forge; conda list; import psi4; conda install ase nglview -c conda-forge; conda list; conda install psi4::resp; conda list; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3109#issuecomment-1856857465
https://github.com/psi4/psi4/pull/3110#issuecomment-1862153818:219,Integrability,depend,dependency,219,"Thanks for the PR, Erica! I pushed some lines to the Azure CI so that einsums is enabled and your code has a chance of running :-) . It won't always be this ugly -- ultimately Einsums will be req'd. There's also a blas dependency detail (mkl=2022 vs. 2023) I need to work out to get rid of that openblas pkg.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-1862153818
https://github.com/psi4/psi4/pull/3110#issuecomment-1865207636:530,Deployability,install,installed,530,"This might be something dumb on my part, but I cannot get this build to run on our Linux system:; ```; >>> import psi4; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/mmfs1/home/kjp0013/psi4_erika/psi4/objdir_p4d19/stage/lib/psi4/__init__.py"", line 71, in <module>; from . import core; ImportError: /mmfs1/home/kjp0013/psi4_erika/psi4/objdir_p4d19/stage/lib/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: _ZN3psi6mp2f126mp2f12ESt10shared_ptrINS_12WavefunctionEERNS_7OptionsE; ```. I installed einsums from conda-forge. What else do I need to do?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-1865207636
https://github.com/psi4/psi4/pull/3110#issuecomment-1865219125:56,Deployability,toggle,toggle,56,"@konpat you may need to `-D ENABLE_Einsums=ON`. You can toggle the value in objdir/CMakeCache.txt, then rebuild.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-1865219125
https://github.com/psi4/psi4/pull/3110#issuecomment-1941533669:230,Energy Efficiency,energy,energy,230,"Fantastic job on this PR, @EricaCMitchell! It took me a while (I apologize), but I finally translated @mkodrycka 's dispersion-F12 code to an MP2-F12 one and, after some tweaking, was able to reproduce your DF-MP2-F12 correlation energy exactly. . I learned quite a bit in the process: initially, our implementations (both based on the formulas from the same Werner-Adler-Manby paper) gave minimally different results, and I found out that our programmed expressions differ by several terms that vanish in the GBC approximation. This approximation is pretty good but neither one of us makes it explicitly in the implementation (no elements of the Fock matrix are zeroed). I think this is completely OK. One avenue to possibly speed up the code is fully exploiting the fact that our F12 amplitudes are diagonal and we don't need to compute off-diagonal elements of some matrices. For example, out of the entire B matrix, we only use terms of the form `B(i,j,i,j)` and `B(i,j,j,i)`. I know computing just the diagonal elements is easier said than done, but I think there is room for speedup there. Finally, I know this was not directly a part of this PR, but do you happen to know the source of the 6-Gaussian fit of the Slater correlation factor? Here's what Psi4 uses for `GEM_BETA == 1.0`:. https://github.com/psi4/psi4/blob/f20a7c61ca0f4939885aa28f96d7d88058a71816/psi4/src/psi4/libmints/mintshelper.cc#L930-L933. and this is what Molpro 2012.1 prints out (I don't have a newer version):; ` Alpha: 0.19532 0.81920 2.85917 9.50073 35.69989 197.79328`; ` Coeff: 0.27070 0.30552 0.18297 0.10986 0.06810 0.04224`. This discrepancy, if not removed, does lead to small differences in the final results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-1941533669
https://github.com/psi4/psi4/pull/3110#issuecomment-1941533669:250,Usability,learn,learned,250,"Fantastic job on this PR, @EricaCMitchell! It took me a while (I apologize), but I finally translated @mkodrycka 's dispersion-F12 code to an MP2-F12 one and, after some tweaking, was able to reproduce your DF-MP2-F12 correlation energy exactly. . I learned quite a bit in the process: initially, our implementations (both based on the formulas from the same Werner-Adler-Manby paper) gave minimally different results, and I found out that our programmed expressions differ by several terms that vanish in the GBC approximation. This approximation is pretty good but neither one of us makes it explicitly in the implementation (no elements of the Fock matrix are zeroed). I think this is completely OK. One avenue to possibly speed up the code is fully exploiting the fact that our F12 amplitudes are diagonal and we don't need to compute off-diagonal elements of some matrices. For example, out of the entire B matrix, we only use terms of the form `B(i,j,i,j)` and `B(i,j,j,i)`. I know computing just the diagonal elements is easier said than done, but I think there is room for speedup there. Finally, I know this was not directly a part of this PR, but do you happen to know the source of the 6-Gaussian fit of the Slater correlation factor? Here's what Psi4 uses for `GEM_BETA == 1.0`:. https://github.com/psi4/psi4/blob/f20a7c61ca0f4939885aa28f96d7d88058a71816/psi4/src/psi4/libmints/mintshelper.cc#L930-L933. and this is what Molpro 2012.1 prints out (I don't have a newer version):; ` Alpha: 0.19532 0.81920 2.85917 9.50073 35.69989 197.79328`; ` Coeff: 0.27070 0.30552 0.18297 0.10986 0.06810 0.04224`. This discrepancy, if not removed, does lead to small differences in the final results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-1941533669
https://github.com/psi4/psi4/pull/3110#issuecomment-2018655214:39,Availability,failure,failure,39,"Thanks @loriab for looking into the CI failure!; I'll include all these edits in my next commits and I am also working on making some ctests as well. I haven't had a lot of time to to focus on computing just the diagonal elements of the F12 intermediates, so that's on the backburner.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2018655214
https://github.com/psi4/psi4/pull/3110#issuecomment-2182761619:3,Availability,failure,failures,3,"CI failures are caused by Einsums v0.5. Once v0.6 goes up @jturney , hopefully, the CI checks pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2182761619
https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938:36,Deployability,integrat,integration,36,"@jturney What are the plans for the integration of Einsums into Psi4? Given that the base of this PR is Einsums, it would be good to know where it is heading, especially since other groups may be using Psi4/Einsums for their plug-ins. Also @loriab the speed of this PR is hindered by the integrals, until we can figure out how Psi4 is going to accommodate Einsums, it seems a bit much to write a whole separate JK builder just for the F12 right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938
https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938:36,Integrability,integrat,integration,36,"@jturney What are the plans for the integration of Einsums into Psi4? Given that the base of this PR is Einsums, it would be good to know where it is heading, especially since other groups may be using Psi4/Einsums for their plug-ins. Also @loriab the speed of this PR is hindered by the integrals, until we can figure out how Psi4 is going to accommodate Einsums, it seems a bit much to write a whole separate JK builder just for the F12 right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938
https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938:225,Modifiability,plug-in,plug-ins,225,"@jturney What are the plans for the integration of Einsums into Psi4? Given that the base of this PR is Einsums, it would be good to know where it is heading, especially since other groups may be using Psi4/Einsums for their plug-ins. Also @loriab the speed of this PR is hindered by the integrals, until we can figure out how Psi4 is going to accommodate Einsums, it seems a bit much to write a whole separate JK builder just for the F12 right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938
https://github.com/psi4/psi4/pull/3110#issuecomment-2414129359:50,Integrability,depend,dependency,50,"Einsums is currently going to be made an optional dependency; and therefore, MP2-F12 will be made optional. There are some condo compiler issues we're not ready to tackle just yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2414129359
https://github.com/psi4/psi4/pull/3111#issuecomment-1863016457:187,Modifiability,coupling,coupling,187,"Thank you for this PR! I greatly appreciate it!. The cleanup is quite nice, and pretty necessary honestly. Aside from a few small doc wording suggestions, my biggest thought is regarding coupling the regeneration of the reference matrices to construction of the full Fock matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3111#issuecomment-1863016457
https://github.com/psi4/psi4/pull/3114#issuecomment-1867890605:15,Testability,test,testing,15,"I deleted some testing L2 packages yesterday to make way for a bigAM one, and it looks like CI was using them. If you want CI to work now, you can make some of the edits in #3107 . Sorry for the trouble. Or we can solve it after that gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3114#issuecomment-1867890605
https://github.com/psi4/psi4/pull/3114#issuecomment-1867908294:17,Testability,test,testing,17,"> I deleted some testing L2 packages yesterday to make way for a bigAM one, and it looks like CI was using them. If you want CI to work now, you can make some of the edits in #3107 . Sorry for the trouble. Or we can solve it after that gets merged. Thanks for the heads up, it is no trouble at all, I think this build would fail anyways because I broke something in the DPD init. Very much a ""let's see if something breaks"" experiment, not ready for merge, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3114#issuecomment-1867908294
https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092:116,Availability,error,error,116,"> Great change. However, I would propose eliminating the old print statements, since the same information is in the error message. I have considered doing that, but I am not entirely comfortable with it because `throw PSIEXCEPTION` is not perfectly reliable when it comes to delivering the error message to the user. For example see https://github.com/psi4/psi4/pull/2997. Until a reliable solution is found for the error messages getting swallowed up on some platforms, I am reluctant to remove the traditional error messages. But in principle I agree completely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092
https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092:249,Availability,reliab,reliable,249,"> Great change. However, I would propose eliminating the old print statements, since the same information is in the error message. I have considered doing that, but I am not entirely comfortable with it because `throw PSIEXCEPTION` is not perfectly reliable when it comes to delivering the error message to the user. For example see https://github.com/psi4/psi4/pull/2997. Until a reliable solution is found for the error messages getting swallowed up on some platforms, I am reluctant to remove the traditional error messages. But in principle I agree completely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092
https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092:290,Availability,error,error,290,"> Great change. However, I would propose eliminating the old print statements, since the same information is in the error message. I have considered doing that, but I am not entirely comfortable with it because `throw PSIEXCEPTION` is not perfectly reliable when it comes to delivering the error message to the user. For example see https://github.com/psi4/psi4/pull/2997. Until a reliable solution is found for the error messages getting swallowed up on some platforms, I am reluctant to remove the traditional error messages. But in principle I agree completely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092
https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092:381,Availability,reliab,reliable,381,"> Great change. However, I would propose eliminating the old print statements, since the same information is in the error message. I have considered doing that, but I am not entirely comfortable with it because `throw PSIEXCEPTION` is not perfectly reliable when it comes to delivering the error message to the user. For example see https://github.com/psi4/psi4/pull/2997. Until a reliable solution is found for the error messages getting swallowed up on some platforms, I am reluctant to remove the traditional error messages. But in principle I agree completely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092
https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092:416,Availability,error,error,416,"> Great change. However, I would propose eliminating the old print statements, since the same information is in the error message. I have considered doing that, but I am not entirely comfortable with it because `throw PSIEXCEPTION` is not perfectly reliable when it comes to delivering the error message to the user. For example see https://github.com/psi4/psi4/pull/2997. Until a reliable solution is found for the error messages getting swallowed up on some platforms, I am reluctant to remove the traditional error messages. But in principle I agree completely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092
https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092:512,Availability,error,error,512,"> Great change. However, I would propose eliminating the old print statements, since the same information is in the error message. I have considered doing that, but I am not entirely comfortable with it because `throw PSIEXCEPTION` is not perfectly reliable when it comes to delivering the error message to the user. For example see https://github.com/psi4/psi4/pull/2997. Until a reliable solution is found for the error messages getting swallowed up on some platforms, I am reluctant to remove the traditional error messages. But in principle I agree completely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092
https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092:122,Integrability,message,message,122,"> Great change. However, I would propose eliminating the old print statements, since the same information is in the error message. I have considered doing that, but I am not entirely comfortable with it because `throw PSIEXCEPTION` is not perfectly reliable when it comes to delivering the error message to the user. For example see https://github.com/psi4/psi4/pull/2997. Until a reliable solution is found for the error messages getting swallowed up on some platforms, I am reluctant to remove the traditional error messages. But in principle I agree completely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092
https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092:296,Integrability,message,message,296,"> Great change. However, I would propose eliminating the old print statements, since the same information is in the error message. I have considered doing that, but I am not entirely comfortable with it because `throw PSIEXCEPTION` is not perfectly reliable when it comes to delivering the error message to the user. For example see https://github.com/psi4/psi4/pull/2997. Until a reliable solution is found for the error messages getting swallowed up on some platforms, I am reluctant to remove the traditional error messages. But in principle I agree completely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092
https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092:422,Integrability,message,messages,422,"> Great change. However, I would propose eliminating the old print statements, since the same information is in the error message. I have considered doing that, but I am not entirely comfortable with it because `throw PSIEXCEPTION` is not perfectly reliable when it comes to delivering the error message to the user. For example see https://github.com/psi4/psi4/pull/2997. Until a reliable solution is found for the error messages getting swallowed up on some platforms, I am reluctant to remove the traditional error messages. But in principle I agree completely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092
https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092:518,Integrability,message,messages,518,"> Great change. However, I would propose eliminating the old print statements, since the same information is in the error message. I have considered doing that, but I am not entirely comfortable with it because `throw PSIEXCEPTION` is not perfectly reliable when it comes to delivering the error message to the user. For example see https://github.com/psi4/psi4/pull/2997. Until a reliable solution is found for the error messages getting swallowed up on some platforms, I am reluctant to remove the traditional error messages. But in principle I agree completely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092
https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785:78,Availability,error,errors,78,"PS: In #2997 I added the band-aid workaround of printing to `stderr` for PSIO errors, since those are quite common due to disks getting full and whatnot, but doing that globally in `PSIEXCEPTION` itself seems inelegant.; Users who are not affected by the missing error message would get the entire stack trace, etc. twice, which would make the already quite noisy error exits worse.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785
https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785:263,Availability,error,error,263,"PS: In #2997 I added the band-aid workaround of printing to `stderr` for PSIO errors, since those are quite common due to disks getting full and whatnot, but doing that globally in `PSIEXCEPTION` itself seems inelegant.; Users who are not affected by the missing error message would get the entire stack trace, etc. twice, which would make the already quite noisy error exits worse.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785
https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785:364,Availability,error,error,364,"PS: In #2997 I added the band-aid workaround of printing to `stderr` for PSIO errors, since those are quite common due to disks getting full and whatnot, but doing that globally in `PSIEXCEPTION` itself seems inelegant.; Users who are not affected by the missing error message would get the entire stack trace, etc. twice, which would make the already quite noisy error exits worse.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785
https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785:269,Integrability,message,message,269,"PS: In #2997 I added the band-aid workaround of printing to `stderr` for PSIO errors, since those are quite common due to disks getting full and whatnot, but doing that globally in `PSIEXCEPTION` itself seems inelegant.; Users who are not affected by the missing error message would get the entire stack trace, etc. twice, which would make the already quite noisy error exits worse.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876924785
https://github.com/psi4/psi4/pull/3117#issuecomment-1877048909:21,Availability,error,error,21,The cause of missing error messages is likely the improper use of `exit()`. I have prepared a companion pull request to this one to get rid of them.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1877048909
https://github.com/psi4/psi4/pull/3117#issuecomment-1877048909:27,Integrability,message,messages,27,The cause of missing error messages is likely the improper use of `exit()`. I have prepared a companion pull request to this one to get rid of them.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1877048909
https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432:23,Availability,error,error,23,"> The cause of missing error messages is likely the improper use of `exit()`. I have prepared a companion pull request to this one to get rid of them. I think there are two separate issues here. One is the improper use of `exit()` scattered around the codebase, but I still think that there is a separate issue here where not even `throw PSIEXCEPTION(...)` is delivering the error message, in certain environments. I think that would still be a problem even if every instance of `exit()` were to be eradicated from the repo. In https://github.com/psi4/psi4/issues/2970, the part of PSIO that was raising the error was already using `throw PSIEXCEPTION(...)`, it was not calling `exit()`. Unless removing all of the `exit()` calls elsewhere from the codebase magically changes how `PSIEXCEPTION` works, I cannot see how that would fix that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432
https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432:375,Availability,error,error,375,"> The cause of missing error messages is likely the improper use of `exit()`. I have prepared a companion pull request to this one to get rid of them. I think there are two separate issues here. One is the improper use of `exit()` scattered around the codebase, but I still think that there is a separate issue here where not even `throw PSIEXCEPTION(...)` is delivering the error message, in certain environments. I think that would still be a problem even if every instance of `exit()` were to be eradicated from the repo. In https://github.com/psi4/psi4/issues/2970, the part of PSIO that was raising the error was already using `throw PSIEXCEPTION(...)`, it was not calling `exit()`. Unless removing all of the `exit()` calls elsewhere from the codebase magically changes how `PSIEXCEPTION` works, I cannot see how that would fix that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432
https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432:608,Availability,error,error,608,"> The cause of missing error messages is likely the improper use of `exit()`. I have prepared a companion pull request to this one to get rid of them. I think there are two separate issues here. One is the improper use of `exit()` scattered around the codebase, but I still think that there is a separate issue here where not even `throw PSIEXCEPTION(...)` is delivering the error message, in certain environments. I think that would still be a problem even if every instance of `exit()` were to be eradicated from the repo. In https://github.com/psi4/psi4/issues/2970, the part of PSIO that was raising the error was already using `throw PSIEXCEPTION(...)`, it was not calling `exit()`. Unless removing all of the `exit()` calls elsewhere from the codebase magically changes how `PSIEXCEPTION` works, I cannot see how that would fix that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432
https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432:29,Integrability,message,messages,29,"> The cause of missing error messages is likely the improper use of `exit()`. I have prepared a companion pull request to this one to get rid of them. I think there are two separate issues here. One is the improper use of `exit()` scattered around the codebase, but I still think that there is a separate issue here where not even `throw PSIEXCEPTION(...)` is delivering the error message, in certain environments. I think that would still be a problem even if every instance of `exit()` were to be eradicated from the repo. In https://github.com/psi4/psi4/issues/2970, the part of PSIO that was raising the error was already using `throw PSIEXCEPTION(...)`, it was not calling `exit()`. Unless removing all of the `exit()` calls elsewhere from the codebase magically changes how `PSIEXCEPTION` works, I cannot see how that would fix that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432
https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432:381,Integrability,message,message,381,"> The cause of missing error messages is likely the improper use of `exit()`. I have prepared a companion pull request to this one to get rid of them. I think there are two separate issues here. One is the improper use of `exit()` scattered around the codebase, but I still think that there is a separate issue here where not even `throw PSIEXCEPTION(...)` is delivering the error message, in certain environments. I think that would still be a problem even if every instance of `exit()` were to be eradicated from the repo. In https://github.com/psi4/psi4/issues/2970, the part of PSIO that was raising the error was already using `throw PSIEXCEPTION(...)`, it was not calling `exit()`. Unless removing all of the `exit()` calls elsewhere from the codebase magically changes how `PSIEXCEPTION` works, I cannot see how that would fix that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432
https://github.com/psi4/psi4/issues/3119#issuecomment-1898080393:520,Testability,test,tests,520,"Thanks for reaching out. > According to the manual, DDX_SOLVENT is ignored if DDX_SOLVENT_EPSILON is supplied. Initially I took this as meaning one could just supply the DDX_SOLVENT_EPSILON value directly. This is indeed the intended behaviour and I am indeed surprised why our implementation does not reach this result. From my understanding this is what should happen in the current implementation due to the `has_option_changed`. Also this behaviour (changing epsilon without providing a solvent) is used in the unit tests, so I'm surprised they don't fail. Maybe somebody else has an idea ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3119#issuecomment-1898080393
https://github.com/psi4/psi4/issues/3119#issuecomment-1898203578:31,Availability,error,error,31,"This could potentially be user error. However, hopefully through my minimal example you can replicate the behaviour I've been getting.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3119#issuecomment-1898203578
https://github.com/psi4/psi4/issues/3119#issuecomment-1906149071:155,Availability,error,error,155,"I just had a look at the tests, I realise I had been using a string as the input for the solvent, but it should be float/int type! So this was indeed user error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3119#issuecomment-1906149071
https://github.com/psi4/psi4/issues/3119#issuecomment-1906149071:25,Testability,test,tests,25,"I just had a look at the tests, I realise I had been using a string as the input for the solvent, but it should be float/int type! So this was indeed user error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3119#issuecomment-1906149071
https://github.com/psi4/psi4/pull/3123#issuecomment-1899179342:3,Availability,failure,failure,3,CI failure seems to be unrelated error in compiling Psi4? The docs do build successfully on my machine.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899179342
https://github.com/psi4/psi4/pull/3123#issuecomment-1899179342:33,Availability,error,error,33,CI failure seems to be unrelated error in compiling Psi4? The docs do build successfully on my machine.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899179342
https://github.com/psi4/psi4/pull/3123#issuecomment-1899214338:5,Availability,failure,failure,5,"> CI failure seems to be unrelated error in compiling Psi4? The docs do build successfully on my machine. The docs CI seems to be flaky at the moment, no idea why",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899214338
https://github.com/psi4/psi4/pull/3123#issuecomment-1899214338:35,Availability,error,error,35,"> CI failure seems to be unrelated error in compiling Psi4? The docs do build successfully on my machine. The docs CI seems to be flaky at the moment, no idea why",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899214338
https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634:269,Availability,avail,available,269,"It looks like I forgot to add `CMAKE_BUILD_PARALLEL_LEVEL=2` to the docs CI. I learned that when a Ninja build of Psi4 gives up in the early 200s of 1200 files, it's because it's out of memory on CI nodes when compiling libmints. Ninja automatically oversubscribes the available cores, so throttling down to allocated cores helps. Docs were recently converted to Ninja CMake generator (from Makefiles CMake generator).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634
https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634:300,Availability,down,down,300,"It looks like I forgot to add `CMAKE_BUILD_PARALLEL_LEVEL=2` to the docs CI. I learned that when a Ninja build of Psi4 gives up in the early 200s of 1200 files, it's because it's out of memory on CI nodes when compiling libmints. Ninja automatically oversubscribes the available cores, so throttling down to allocated cores helps. Docs were recently converted to Ninja CMake generator (from Makefiles CMake generator).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634
https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634:308,Energy Efficiency,allocate,allocated,308,"It looks like I forgot to add `CMAKE_BUILD_PARALLEL_LEVEL=2` to the docs CI. I learned that when a Ninja build of Psi4 gives up in the early 200s of 1200 files, it's because it's out of memory on CI nodes when compiling libmints. Ninja automatically oversubscribes the available cores, so throttling down to allocated cores helps. Docs were recently converted to Ninja CMake generator (from Makefiles CMake generator).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634
https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634:79,Usability,learn,learned,79,"It looks like I forgot to add `CMAKE_BUILD_PARALLEL_LEVEL=2` to the docs CI. I learned that when a Ninja build of Psi4 gives up in the early 200s of 1200 files, it's because it's out of memory on CI nodes when compiling libmints. Ninja automatically oversubscribes the available cores, so throttling down to allocated cores helps. Docs were recently converted to Ninja CMake generator (from Makefiles CMake generator).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/pull/3123#issuecomment-1899318634
https://github.com/psi4/psi4/issues/3124#issuecomment-1912263189:164,Deployability,update,update,164,"@PhillCli thank you very much for your detailed answer. The material you pointed me to is exactly what I needed and it's leading to good results. I will provide an update with the details of my implementation for anyone who might find it useful later, but I will close the issue for now. Thanks again from a new grad student!. Best, . hypefolder",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3124#issuecomment-1912263189
https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936:866,Deployability,Update,Update,866,"That was me playing around, trying to figure out when to use the different dertypes. The level of theory I will be using is w97X-D DFT perhaps in the future but with Hartree-Fock I wanted to test the code that I obtain something back. . I've always used the default before when calculating single point energy scans so when to apply to which different level of theory is a little lost on me. . ```python. dertype='energy'; dertype'gradient'. ```. How would I get around this issue? In my mind. **Option 1**. Give it more juice (like CPU). If i have nodes on a cluster how do I distribute the job between the nodes perhaps. . **Option 2**. Play around with option parameters and maybe obtain orbitals from previous geometry? Is that faster?. https://psicode.org/psi4manual/master/autodir_options_c/scf__guess.html. Should I be changing into the `guess` parameter?. **Update 1** . I was playing around a bit more:. ```; Module time:; 	user time = 221.38 seconds = 3.69 minutes; 	system time = 8.88 seconds = 0.15 minutes; 	total time = 38 seconds = 0.63 minutes; ```. The time decreased when I set the configurations to ` 'g_convergence': 'gau_loose'` I think from `gau_tight`? `dertype` is still `gradient`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936
https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936:1100,Deployability,configurat,configurations,1100,"That was me playing around, trying to figure out when to use the different dertypes. The level of theory I will be using is w97X-D DFT perhaps in the future but with Hartree-Fock I wanted to test the code that I obtain something back. . I've always used the default before when calculating single point energy scans so when to apply to which different level of theory is a little lost on me. . ```python. dertype='energy'; dertype'gradient'. ```. How would I get around this issue? In my mind. **Option 1**. Give it more juice (like CPU). If i have nodes on a cluster how do I distribute the job between the nodes perhaps. . **Option 2**. Play around with option parameters and maybe obtain orbitals from previous geometry? Is that faster?. https://psicode.org/psi4manual/master/autodir_options_c/scf__guess.html. Should I be changing into the `guess` parameter?. **Update 1** . I was playing around a bit more:. ```; Module time:; 	user time = 221.38 seconds = 3.69 minutes; 	system time = 8.88 seconds = 0.15 minutes; 	total time = 38 seconds = 0.63 minutes; ```. The time decreased when I set the configurations to ` 'g_convergence': 'gau_loose'` I think from `gau_tight`? `dertype` is still `gradient`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936
https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936:303,Energy Efficiency,energy,energy,303,"That was me playing around, trying to figure out when to use the different dertypes. The level of theory I will be using is w97X-D DFT perhaps in the future but with Hartree-Fock I wanted to test the code that I obtain something back. . I've always used the default before when calculating single point energy scans so when to apply to which different level of theory is a little lost on me. . ```python. dertype='energy'; dertype'gradient'. ```. How would I get around this issue? In my mind. **Option 1**. Give it more juice (like CPU). If i have nodes on a cluster how do I distribute the job between the nodes perhaps. . **Option 2**. Play around with option parameters and maybe obtain orbitals from previous geometry? Is that faster?. https://psicode.org/psi4manual/master/autodir_options_c/scf__guess.html. Should I be changing into the `guess` parameter?. **Update 1** . I was playing around a bit more:. ```; Module time:; 	user time = 221.38 seconds = 3.69 minutes; 	system time = 8.88 seconds = 0.15 minutes; 	total time = 38 seconds = 0.63 minutes; ```. The time decreased when I set the configurations to ` 'g_convergence': 'gau_loose'` I think from `gau_tight`? `dertype` is still `gradient`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936
https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936:414,Energy Efficiency,energy,energy,414,"That was me playing around, trying to figure out when to use the different dertypes. The level of theory I will be using is w97X-D DFT perhaps in the future but with Hartree-Fock I wanted to test the code that I obtain something back. . I've always used the default before when calculating single point energy scans so when to apply to which different level of theory is a little lost on me. . ```python. dertype='energy'; dertype'gradient'. ```. How would I get around this issue? In my mind. **Option 1**. Give it more juice (like CPU). If i have nodes on a cluster how do I distribute the job between the nodes perhaps. . **Option 2**. Play around with option parameters and maybe obtain orbitals from previous geometry? Is that faster?. https://psicode.org/psi4manual/master/autodir_options_c/scf__guess.html. Should I be changing into the `guess` parameter?. **Update 1** . I was playing around a bit more:. ```; Module time:; 	user time = 221.38 seconds = 3.69 minutes; 	system time = 8.88 seconds = 0.15 minutes; 	total time = 38 seconds = 0.63 minutes; ```. The time decreased when I set the configurations to ` 'g_convergence': 'gau_loose'` I think from `gau_tight`? `dertype` is still `gradient`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936
