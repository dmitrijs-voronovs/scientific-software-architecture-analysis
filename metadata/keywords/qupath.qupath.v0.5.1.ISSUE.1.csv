id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/qupath/qupath/pull/498:33,Safety,detect,detection,33,* 'Show TMA measurements' showed detection measurements instead; * Added more filters for *Create thresholder*,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/498
https://github.com/qupath/qupath/issues/499:157,Performance,load,loading,157,"When we have Annotations with user generated names, we need to press N to hide the names. This setting is not saved within QuPath. . So reopening QuPath and loading the image will always display the names of the Annotations",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/499
https://github.com/qupath/qupath/issues/500:244,Deployability,Install,Installed,244,"**To Reproduce**; Steps to reproduce the behavior:; 1. Make a directory and add a QuPath Extension; 2. Within Edit > Preferences > QuPath user Directory and set it to your created directory above.; 2. Close QuPath And Reopen; 3. **Go to Help > Installed Extensions, the extension is not there.**; 4. Drag and Drop extension into QuPath; 5. QuPath says ""No Extensions Directory is set"" (So it is not the user directory?) and offers to create it at C:\Users\username; 6. Set the Extension directory to where it was created in step 1; 7. Now Extension is loaded but inside an 'extensions' directory. **Expected behavior**; When the `User Directory` is set (Which I guess used to be called `Extensions Directory`, which is no longer in preferences), and restarting QuPath, all extensions from that directory should be loaded.; Moreover the location of the Extension Directory should be accessible somewhere in the preferences.; We would expect the Extensions directory be independent from the User Directory. This seems like a non-braking change as there is no documentation on how to load extensions in QuPath 0.2.0 in readthedocs and most people are not using extensions (Except us). **Additional Remarks**; As a core facility, Extensions make little sense on a 'per user' basis, especially given how complex and supposedly independent they are from each other, or from the individual user's needs. For us they are more suitably used like in ImageJ: All extensions (or plugins) are loaded by ImageJ/Fiji regardless of the currently logged in user. This ensures a streamlined experience for all our users without intervention on our side. We see that we can load or save preferences, so we can do this for each user as needed, but it makes it more tedious for us to distribute and debug issues when such settings are per-user. **Desktop (please complete the following information):**; - Windows 10 x64; - QuPath Version .2.0-m12. Thank you for your time.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/500
https://github.com/qupath/qupath/issues/500:1467,Modifiability,plugin,plugins,1467,"**To Reproduce**; Steps to reproduce the behavior:; 1. Make a directory and add a QuPath Extension; 2. Within Edit > Preferences > QuPath user Directory and set it to your created directory above.; 2. Close QuPath And Reopen; 3. **Go to Help > Installed Extensions, the extension is not there.**; 4. Drag and Drop extension into QuPath; 5. QuPath says ""No Extensions Directory is set"" (So it is not the user directory?) and offers to create it at C:\Users\username; 6. Set the Extension directory to where it was created in step 1; 7. Now Extension is loaded but inside an 'extensions' directory. **Expected behavior**; When the `User Directory` is set (Which I guess used to be called `Extensions Directory`, which is no longer in preferences), and restarting QuPath, all extensions from that directory should be loaded.; Moreover the location of the Extension Directory should be accessible somewhere in the preferences.; We would expect the Extensions directory be independent from the User Directory. This seems like a non-braking change as there is no documentation on how to load extensions in QuPath 0.2.0 in readthedocs and most people are not using extensions (Except us). **Additional Remarks**; As a core facility, Extensions make little sense on a 'per user' basis, especially given how complex and supposedly independent they are from each other, or from the individual user's needs. For us they are more suitably used like in ImageJ: All extensions (or plugins) are loaded by ImageJ/Fiji regardless of the currently logged in user. This ensures a streamlined experience for all our users without intervention on our side. We see that we can load or save preferences, so we can do this for each user as needed, but it makes it more tedious for us to distribute and debug issues when such settings are per-user. **Desktop (please complete the following information):**; - Windows 10 x64; - QuPath Version .2.0-m12. Thank you for your time.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/500
https://github.com/qupath/qupath/issues/500:552,Performance,load,loaded,552,"**To Reproduce**; Steps to reproduce the behavior:; 1. Make a directory and add a QuPath Extension; 2. Within Edit > Preferences > QuPath user Directory and set it to your created directory above.; 2. Close QuPath And Reopen; 3. **Go to Help > Installed Extensions, the extension is not there.**; 4. Drag and Drop extension into QuPath; 5. QuPath says ""No Extensions Directory is set"" (So it is not the user directory?) and offers to create it at C:\Users\username; 6. Set the Extension directory to where it was created in step 1; 7. Now Extension is loaded but inside an 'extensions' directory. **Expected behavior**; When the `User Directory` is set (Which I guess used to be called `Extensions Directory`, which is no longer in preferences), and restarting QuPath, all extensions from that directory should be loaded.; Moreover the location of the Extension Directory should be accessible somewhere in the preferences.; We would expect the Extensions directory be independent from the User Directory. This seems like a non-braking change as there is no documentation on how to load extensions in QuPath 0.2.0 in readthedocs and most people are not using extensions (Except us). **Additional Remarks**; As a core facility, Extensions make little sense on a 'per user' basis, especially given how complex and supposedly independent they are from each other, or from the individual user's needs. For us they are more suitably used like in ImageJ: All extensions (or plugins) are loaded by ImageJ/Fiji regardless of the currently logged in user. This ensures a streamlined experience for all our users without intervention on our side. We see that we can load or save preferences, so we can do this for each user as needed, but it makes it more tedious for us to distribute and debug issues when such settings are per-user. **Desktop (please complete the following information):**; - Windows 10 x64; - QuPath Version .2.0-m12. Thank you for your time.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/500
https://github.com/qupath/qupath/issues/500:814,Performance,load,loaded,814,"**To Reproduce**; Steps to reproduce the behavior:; 1. Make a directory and add a QuPath Extension; 2. Within Edit > Preferences > QuPath user Directory and set it to your created directory above.; 2. Close QuPath And Reopen; 3. **Go to Help > Installed Extensions, the extension is not there.**; 4. Drag and Drop extension into QuPath; 5. QuPath says ""No Extensions Directory is set"" (So it is not the user directory?) and offers to create it at C:\Users\username; 6. Set the Extension directory to where it was created in step 1; 7. Now Extension is loaded but inside an 'extensions' directory. **Expected behavior**; When the `User Directory` is set (Which I guess used to be called `Extensions Directory`, which is no longer in preferences), and restarting QuPath, all extensions from that directory should be loaded.; Moreover the location of the Extension Directory should be accessible somewhere in the preferences.; We would expect the Extensions directory be independent from the User Directory. This seems like a non-braking change as there is no documentation on how to load extensions in QuPath 0.2.0 in readthedocs and most people are not using extensions (Except us). **Additional Remarks**; As a core facility, Extensions make little sense on a 'per user' basis, especially given how complex and supposedly independent they are from each other, or from the individual user's needs. For us they are more suitably used like in ImageJ: All extensions (or plugins) are loaded by ImageJ/Fiji regardless of the currently logged in user. This ensures a streamlined experience for all our users without intervention on our side. We see that we can load or save preferences, so we can do this for each user as needed, but it makes it more tedious for us to distribute and debug issues when such settings are per-user. **Desktop (please complete the following information):**; - Windows 10 x64; - QuPath Version .2.0-m12. Thank you for your time.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/500
https://github.com/qupath/qupath/issues/500:1081,Performance,load,load,1081,"**To Reproduce**; Steps to reproduce the behavior:; 1. Make a directory and add a QuPath Extension; 2. Within Edit > Preferences > QuPath user Directory and set it to your created directory above.; 2. Close QuPath And Reopen; 3. **Go to Help > Installed Extensions, the extension is not there.**; 4. Drag and Drop extension into QuPath; 5. QuPath says ""No Extensions Directory is set"" (So it is not the user directory?) and offers to create it at C:\Users\username; 6. Set the Extension directory to where it was created in step 1; 7. Now Extension is loaded but inside an 'extensions' directory. **Expected behavior**; When the `User Directory` is set (Which I guess used to be called `Extensions Directory`, which is no longer in preferences), and restarting QuPath, all extensions from that directory should be loaded.; Moreover the location of the Extension Directory should be accessible somewhere in the preferences.; We would expect the Extensions directory be independent from the User Directory. This seems like a non-braking change as there is no documentation on how to load extensions in QuPath 0.2.0 in readthedocs and most people are not using extensions (Except us). **Additional Remarks**; As a core facility, Extensions make little sense on a 'per user' basis, especially given how complex and supposedly independent they are from each other, or from the individual user's needs. For us they are more suitably used like in ImageJ: All extensions (or plugins) are loaded by ImageJ/Fiji regardless of the currently logged in user. This ensures a streamlined experience for all our users without intervention on our side. We see that we can load or save preferences, so we can do this for each user as needed, but it makes it more tedious for us to distribute and debug issues when such settings are per-user. **Desktop (please complete the following information):**; - Windows 10 x64; - QuPath Version .2.0-m12. Thank you for your time.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/500
https://github.com/qupath/qupath/issues/500:1480,Performance,load,loaded,1480,"**To Reproduce**; Steps to reproduce the behavior:; 1. Make a directory and add a QuPath Extension; 2. Within Edit > Preferences > QuPath user Directory and set it to your created directory above.; 2. Close QuPath And Reopen; 3. **Go to Help > Installed Extensions, the extension is not there.**; 4. Drag and Drop extension into QuPath; 5. QuPath says ""No Extensions Directory is set"" (So it is not the user directory?) and offers to create it at C:\Users\username; 6. Set the Extension directory to where it was created in step 1; 7. Now Extension is loaded but inside an 'extensions' directory. **Expected behavior**; When the `User Directory` is set (Which I guess used to be called `Extensions Directory`, which is no longer in preferences), and restarting QuPath, all extensions from that directory should be loaded.; Moreover the location of the Extension Directory should be accessible somewhere in the preferences.; We would expect the Extensions directory be independent from the User Directory. This seems like a non-braking change as there is no documentation on how to load extensions in QuPath 0.2.0 in readthedocs and most people are not using extensions (Except us). **Additional Remarks**; As a core facility, Extensions make little sense on a 'per user' basis, especially given how complex and supposedly independent they are from each other, or from the individual user's needs. For us they are more suitably used like in ImageJ: All extensions (or plugins) are loaded by ImageJ/Fiji regardless of the currently logged in user. This ensures a streamlined experience for all our users without intervention on our side. We see that we can load or save preferences, so we can do this for each user as needed, but it makes it more tedious for us to distribute and debug issues when such settings are per-user. **Desktop (please complete the following information):**; - Windows 10 x64; - QuPath Version .2.0-m12. Thank you for your time.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/500
https://github.com/qupath/qupath/issues/500:1655,Performance,load,load,1655,"**To Reproduce**; Steps to reproduce the behavior:; 1. Make a directory and add a QuPath Extension; 2. Within Edit > Preferences > QuPath user Directory and set it to your created directory above.; 2. Close QuPath And Reopen; 3. **Go to Help > Installed Extensions, the extension is not there.**; 4. Drag and Drop extension into QuPath; 5. QuPath says ""No Extensions Directory is set"" (So it is not the user directory?) and offers to create it at C:\Users\username; 6. Set the Extension directory to where it was created in step 1; 7. Now Extension is loaded but inside an 'extensions' directory. **Expected behavior**; When the `User Directory` is set (Which I guess used to be called `Extensions Directory`, which is no longer in preferences), and restarting QuPath, all extensions from that directory should be loaded.; Moreover the location of the Extension Directory should be accessible somewhere in the preferences.; We would expect the Extensions directory be independent from the User Directory. This seems like a non-braking change as there is no documentation on how to load extensions in QuPath 0.2.0 in readthedocs and most people are not using extensions (Except us). **Additional Remarks**; As a core facility, Extensions make little sense on a 'per user' basis, especially given how complex and supposedly independent they are from each other, or from the individual user's needs. For us they are more suitably used like in ImageJ: All extensions (or plugins) are loaded by ImageJ/Fiji regardless of the currently logged in user. This ensures a streamlined experience for all our users without intervention on our side. We see that we can load or save preferences, so we can do this for each user as needed, but it makes it more tedious for us to distribute and debug issues when such settings are per-user. **Desktop (please complete the following information):**; - Windows 10 x64; - QuPath Version .2.0-m12. Thank you for your time.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/500
https://github.com/qupath/qupath/issues/500:882,Security,access,accessible,882,"**To Reproduce**; Steps to reproduce the behavior:; 1. Make a directory and add a QuPath Extension; 2. Within Edit > Preferences > QuPath user Directory and set it to your created directory above.; 2. Close QuPath And Reopen; 3. **Go to Help > Installed Extensions, the extension is not there.**; 4. Drag and Drop extension into QuPath; 5. QuPath says ""No Extensions Directory is set"" (So it is not the user directory?) and offers to create it at C:\Users\username; 6. Set the Extension directory to where it was created in step 1; 7. Now Extension is loaded but inside an 'extensions' directory. **Expected behavior**; When the `User Directory` is set (Which I guess used to be called `Extensions Directory`, which is no longer in preferences), and restarting QuPath, all extensions from that directory should be loaded.; Moreover the location of the Extension Directory should be accessible somewhere in the preferences.; We would expect the Extensions directory be independent from the User Directory. This seems like a non-braking change as there is no documentation on how to load extensions in QuPath 0.2.0 in readthedocs and most people are not using extensions (Except us). **Additional Remarks**; As a core facility, Extensions make little sense on a 'per user' basis, especially given how complex and supposedly independent they are from each other, or from the individual user's needs. For us they are more suitably used like in ImageJ: All extensions (or plugins) are loaded by ImageJ/Fiji regardless of the currently logged in user. This ensures a streamlined experience for all our users without intervention on our side. We see that we can load or save preferences, so we can do this for each user as needed, but it makes it more tedious for us to distribute and debug issues when such settings are per-user. **Desktop (please complete the following information):**; - Windows 10 x64; - QuPath Version .2.0-m12. Thank you for your time.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/500
https://github.com/qupath/qupath/issues/500:1530,Testability,log,logged,1530,"**To Reproduce**; Steps to reproduce the behavior:; 1. Make a directory and add a QuPath Extension; 2. Within Edit > Preferences > QuPath user Directory and set it to your created directory above.; 2. Close QuPath And Reopen; 3. **Go to Help > Installed Extensions, the extension is not there.**; 4. Drag and Drop extension into QuPath; 5. QuPath says ""No Extensions Directory is set"" (So it is not the user directory?) and offers to create it at C:\Users\username; 6. Set the Extension directory to where it was created in step 1; 7. Now Extension is loaded but inside an 'extensions' directory. **Expected behavior**; When the `User Directory` is set (Which I guess used to be called `Extensions Directory`, which is no longer in preferences), and restarting QuPath, all extensions from that directory should be loaded.; Moreover the location of the Extension Directory should be accessible somewhere in the preferences.; We would expect the Extensions directory be independent from the User Directory. This seems like a non-braking change as there is no documentation on how to load extensions in QuPath 0.2.0 in readthedocs and most people are not using extensions (Except us). **Additional Remarks**; As a core facility, Extensions make little sense on a 'per user' basis, especially given how complex and supposedly independent they are from each other, or from the individual user's needs. For us they are more suitably used like in ImageJ: All extensions (or plugins) are loaded by ImageJ/Fiji regardless of the currently logged in user. This ensures a streamlined experience for all our users without intervention on our side. We see that we can load or save preferences, so we can do this for each user as needed, but it makes it more tedious for us to distribute and debug issues when such settings are per-user. **Desktop (please complete the following information):**; - Windows 10 x64; - QuPath Version .2.0-m12. Thank you for your time.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/500
https://github.com/qupath/qupath/issues/502:106,Deployability,update,updated,106,"Hi,. In previous versions, selecting an annotation on the Annotations panel made the displayed view to be updated (at any given zoom level) so the selected annotation was visible, which is very useful to quickly review them. This is (mostly) not happening in m12. Best regards,; Carlos",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/502
https://github.com/qupath/qupath/issues/503:125,Availability,error,error,125,"Hi,. It occurred that after being working with pixel classifiers and closed the project, when quitting QuPath one or several error dialogs appear briefly in the bottom right corner of QuPath window (as in screenshot). ![image](https://user-images.githubusercontent.com/6029017/82741310-18ab1b00-9d51-11ea-876b-c0a653d28279.png). Best regards,; Carlos",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/503
https://github.com/qupath/qupath/issues/507:752,Availability,down,down,752,"(Yes, did search for this bug before entering this issue.). ## Bug report. **Describe the bug**; When pasting in or typing in class names that include a colon in the text, QuPath adds a spce after the colon and this is also the resulting label in the class json file. ; ; **To Reproduce**; Steps to reproduce the behavior:; 1. Add a new class and a name that includes a colon without a trailing space. For example `myID:1234` . 2. After adding the class, simply look at the resulting class name. In my insance there is now a space between the `myID:` and the `1234` to get `myID: 1234`. **Expected behavior**; I expect the pasted or typed text to be exactly the same in the resulting class label. The goal for us is to use these tags for parsing links down the road. In our case we are entering anatomy IDs from ontologies. **Screenshots**; ![Screenshot 2020-05-29 19 57 29](https://user-images.githubusercontent.com/8427219/83314085-c3ef2080-a1e6-11ea-90be-811622ed6c86.png). **Desktop (please complete the following information):**; - OS: macOS Catalina 10.15.5 (19F96); - QuPath Version : QuPath-0.2.0-m12.app. **Additional context**; Eventually we would want to get the classes assigned to various annotations exported so it is important to get the IDs correctly formatted if possible.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/507
https://github.com/qupath/qupath/issues/507:455,Usability,simpl,simply,455,"(Yes, did search for this bug before entering this issue.). ## Bug report. **Describe the bug**; When pasting in or typing in class names that include a colon in the text, QuPath adds a spce after the colon and this is also the resulting label in the class json file. ; ; **To Reproduce**; Steps to reproduce the behavior:; 1. Add a new class and a name that includes a colon without a trailing space. For example `myID:1234` . 2. After adding the class, simply look at the resulting class name. In my insance there is now a space between the `myID:` and the `1234` to get `myID: 1234`. **Expected behavior**; I expect the pasted or typed text to be exactly the same in the resulting class label. The goal for us is to use these tags for parsing links down the road. In our case we are entering anatomy IDs from ontologies. **Screenshots**; ![Screenshot 2020-05-29 19 57 29](https://user-images.githubusercontent.com/8427219/83314085-c3ef2080-a1e6-11ea-90be-811622ed6c86.png). **Desktop (please complete the following information):**; - OS: macOS Catalina 10.15.5 (19F96); - QuPath Version : QuPath-0.2.0-m12.app. **Additional context**; Eventually we would want to get the classes assigned to various annotations exported so it is important to get the IDs correctly formatted if possible.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/507
https://github.com/qupath/qupath/pull/508:64,Integrability,message,message,64,Handle cases where memory cannot be set with a more informative message.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/508
https://github.com/qupath/qupath/issues/510:44,Performance,load,loading,44,"## Bug report. **Describe the bug**; NPE if loading a project if `classes.json` is missing for a project; images are not displayed. **Expected behavior**; Project loads, and a default classification list is used. **Additional context**; It would be desirable to load a project from minimal information, e.g. only the `project.qpproj` file.; `classes.json` definitely should not be essential.; Ideally, there would also be a mechanism to generate thumbnails for projects as well after initial import - this would make the `data` directory unnecessary as well.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/510
https://github.com/qupath/qupath/issues/510:163,Performance,load,loads,163,"## Bug report. **Describe the bug**; NPE if loading a project if `classes.json` is missing for a project; images are not displayed. **Expected behavior**; Project loads, and a default classification list is used. **Additional context**; It would be desirable to load a project from minimal information, e.g. only the `project.qpproj` file.; `classes.json` definitely should not be essential.; Ideally, there would also be a mechanism to generate thumbnails for projects as well after initial import - this would make the `data` directory unnecessary as well.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/510
https://github.com/qupath/qupath/issues/510:262,Performance,load,load,262,"## Bug report. **Describe the bug**; NPE if loading a project if `classes.json` is missing for a project; images are not displayed. **Expected behavior**; Project loads, and a default classification list is used. **Additional context**; It would be desirable to load a project from minimal information, e.g. only the `project.qpproj` file.; `classes.json` definitely should not be essential.; Ideally, there would also be a mechanism to generate thumbnails for projects as well after initial import - this would make the `data` directory unnecessary as well.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/510
https://github.com/qupath/qupath/issues/511:1481,Availability,error,error,1481," In versions after 0.2.0-m10, including the 0.2.0 release, I am trying to use the command ""QuPath-0.2.0 -i=myimage script myscript.groovy"", but this fails with NullPointerException related to a null returned by ""getCurrentImageData()"". The exact same script works just fine using the script editor in all versions. . I am possibly using the new command line interface incorrectly. . **To Reproduce**; Steps to reproduce the behavior:; 1. Create any script that needs to reference the current image, without using a project. The following script ""myscript.groovy"" demonstrates the issue:; ```; import static qupath.lib.gui.scripting.QPEx.*. def imageData = getCurrentImageData(). if(imageData == null) {; println ""imageData == Null""; } else {; println ""imageData != Null""; }. def server = imageData.getServer(); ```; 2. Run the script referencing an image on the command line: ; ```; ./QuPath-0.2.0 -i=myimage.svs script myscript.groovy; ```; 3. See error:; imageData == Null; NullPointerException at line 11: Cannot invoke method getServer() on null object. **Expected behavior**; I would expect that if the command line arguments were changed to the new format the script processing would work the same as 0.2.0-m9 and earlier. The script editor seems to work just fine. Example working output from 0.2.0-m9 is shown below: . 10:23:10.593 [main] [INFO ] qupath.QuPath - Launching QuPath with args: -image, myimage.svs, -script, myscript.groovy; 10:23:11.387 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /var/folders/9_/b0xrdp2d1bsbzlmwp3xff2g00000gn/T/qupath-memo-8955966830564346412; 10:23:11.388 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 10:23:11.563 [main] [WARN ] q.l.i.s.ImageServerMetadata$ImageResolutionLevel - Calculated downsample values differ for x & y for level 4: x=70.0 and y=70.10548523206751 - will use value 7",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/511
https://github.com/qupath/qupath/issues/511:2436,Availability,down,downsample,2436," ```; ./QuPath-0.2.0 -i=myimage.svs script myscript.groovy; ```; 3. See error:; imageData == Null; NullPointerException at line 11: Cannot invoke method getServer() on null object. **Expected behavior**; I would expect that if the command line arguments were changed to the new format the script processing would work the same as 0.2.0-m9 and earlier. The script editor seems to work just fine. Example working output from 0.2.0-m9 is shown below: . 10:23:10.593 [main] [INFO ] qupath.QuPath - Launching QuPath with args: -image, myimage.svs, -script, myscript.groovy; 10:23:11.387 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /var/folders/9_/b0xrdp2d1bsbzlmwp3xff2g00000gn/T/qupath-memo-8955966830564346412; 10:23:11.388 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 10:23:11.563 [main] [WARN ] q.l.i.s.ImageServerMetadata$ImageResolutionLevel - Calculated downsample values differ for x & y for level 4: x=70.0 and y=70.10548523206751 - will use value 70.05274261603375; 10:23:11.573 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; WARNING: An illegal reflective access operation has occurred; WARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/Applications/QuPath-0.2.0-m9.app/Contents/app/groovy-2.5.9.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int); WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations; WARNING: All illegal access operations will be denied in a future release; imageData != Null. **Desktop (please complete the following information):**; - OS: [macOS]; - QuPath Version [0.2.0-m10 and greater]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/511
https://github.com/qupath/qupath/issues/511:582,Deployability,release,release,582,"**Describe the bug**; Starting with m10, when the new command line was introduced, the ""getCurrentImageData()"" function returns NULL. Prior to 0.2.0-m10 (m4 -> m9 confirmed working) the following command could be used to run a script on the (MacOS) command line ""QuPath-0.2.0-m9 -image myimage.svs -script myscript.groovy"". The arguments ""-image"" identifited the image and ""-script"" identified the script. On execution you would see QuPath output (e.g. qupath.QuPath - Launching QuPath with args), then the script would be executed. In versions after 0.2.0-m10, including the 0.2.0 release, I am trying to use the command ""QuPath-0.2.0 -i=myimage script myscript.groovy"", but this fails with NullPointerException related to a null returned by ""getCurrentImageData()"". The exact same script works just fine using the script editor in all versions. . I am possibly using the new command line interface incorrectly. . **To Reproduce**; Steps to reproduce the behavior:; 1. Create any script that needs to reference the current image, without using a project. The following script ""myscript.groovy"" demonstrates the issue:; ```; import static qupath.lib.gui.scripting.QPEx.*. def imageData = getCurrentImageData(). if(imageData == null) {; println ""imageData == Null""; } else {; println ""imageData != Null""; }. def server = imageData.getServer(); ```; 2. Run the script referencing an image on the command line: ; ```; ./QuPath-0.2.0 -i=myimage.svs script myscript.groovy; ```; 3. See error:; imageData == Null; NullPointerException at line 11: Cannot invoke method getServer() on null object. **Expected behavior**; I would expect that if the command line arguments were changed to the new format the script processing would work the same as 0.2.0-m9 and earlier. The script editor seems to work just fine. Example working output from 0.2.0-m9 is shown below: . 10:23:10.593 [main] [INFO ] qupath.QuPath - Launching QuPath with args: -image, myimage.svs, -script, myscript.groovy; 10:23:11.387 [main] [WA",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/511
https://github.com/qupath/qupath/issues/511:3197,Deployability,release,release,3197," ```; ./QuPath-0.2.0 -i=myimage.svs script myscript.groovy; ```; 3. See error:; imageData == Null; NullPointerException at line 11: Cannot invoke method getServer() on null object. **Expected behavior**; I would expect that if the command line arguments were changed to the new format the script processing would work the same as 0.2.0-m9 and earlier. The script editor seems to work just fine. Example working output from 0.2.0-m9 is shown below: . 10:23:10.593 [main] [INFO ] qupath.QuPath - Launching QuPath with args: -image, myimage.svs, -script, myscript.groovy; 10:23:11.387 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /var/folders/9_/b0xrdp2d1bsbzlmwp3xff2g00000gn/T/qupath-memo-8955966830564346412; 10:23:11.388 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 10:23:11.563 [main] [WARN ] q.l.i.s.ImageServerMetadata$ImageResolutionLevel - Calculated downsample values differ for x & y for level 4: x=70.0 and y=70.10548523206751 - will use value 70.05274261603375; 10:23:11.573 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; WARNING: An illegal reflective access operation has occurred; WARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/Applications/QuPath-0.2.0-m9.app/Contents/app/groovy-2.5.9.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int); WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations; WARNING: All illegal access operations will be denied in a future release; imageData != Null. **Desktop (please complete the following information):**; - OS: [macOS]; - QuPath Version [0.2.0-m10 and greater]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/511
https://github.com/qupath/qupath/issues/511:890,Integrability,interface,interface,890,"**Describe the bug**; Starting with m10, when the new command line was introduced, the ""getCurrentImageData()"" function returns NULL. Prior to 0.2.0-m10 (m4 -> m9 confirmed working) the following command could be used to run a script on the (MacOS) command line ""QuPath-0.2.0-m9 -image myimage.svs -script myscript.groovy"". The arguments ""-image"" identifited the image and ""-script"" identified the script. On execution you would see QuPath output (e.g. qupath.QuPath - Launching QuPath with args), then the script would be executed. In versions after 0.2.0-m10, including the 0.2.0 release, I am trying to use the command ""QuPath-0.2.0 -i=myimage script myscript.groovy"", but this fails with NullPointerException related to a null returned by ""getCurrentImageData()"". The exact same script works just fine using the script editor in all versions. . I am possibly using the new command line interface incorrectly. . **To Reproduce**; Steps to reproduce the behavior:; 1. Create any script that needs to reference the current image, without using a project. The following script ""myscript.groovy"" demonstrates the issue:; ```; import static qupath.lib.gui.scripting.QPEx.*. def imageData = getCurrentImageData(). if(imageData == null) {; println ""imageData == Null""; } else {; println ""imageData != Null""; }. def server = imageData.getServer(); ```; 2. Run the script referencing an image on the command line: ; ```; ./QuPath-0.2.0 -i=myimage.svs script myscript.groovy; ```; 3. See error:; imageData == Null; NullPointerException at line 11: Cannot invoke method getServer() on null object. **Expected behavior**; I would expect that if the command line arguments were changed to the new format the script processing would work the same as 0.2.0-m9 and earlier. The script editor seems to work just fine. Example working output from 0.2.0-m9 is shown below: . 10:23:10.593 [main] [INFO ] qupath.QuPath - Launching QuPath with args: -image, myimage.svs, -script, myscript.groovy; 10:23:11.387 [main] [WA",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/511
https://github.com/qupath/qupath/issues/511:2237,Safety,avoid,avoid,2237,"rintln ""imageData != Null""; }. def server = imageData.getServer(); ```; 2. Run the script referencing an image on the command line: ; ```; ./QuPath-0.2.0 -i=myimage.svs script myscript.groovy; ```; 3. See error:; imageData == Null; NullPointerException at line 11: Cannot invoke method getServer() on null object. **Expected behavior**; I would expect that if the command line arguments were changed to the new format the script processing would work the same as 0.2.0-m9 and earlier. The script editor seems to work just fine. Example working output from 0.2.0-m9 is shown below: . 10:23:10.593 [main] [INFO ] qupath.QuPath - Launching QuPath with args: -image, myimage.svs, -script, myscript.groovy; 10:23:11.387 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /var/folders/9_/b0xrdp2d1bsbzlmwp3xff2g00000gn/T/qupath-memo-8955966830564346412; 10:23:11.388 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 10:23:11.563 [main] [WARN ] q.l.i.s.ImageServerMetadata$ImageResolutionLevel - Calculated downsample values differ for x & y for level 4: x=70.0 and y=70.10548523206751 - will use value 70.05274261603375; 10:23:11.573 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; WARNING: An illegal reflective access operation has occurred; WARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/Applications/QuPath-0.2.0-m9.app/Contents/app/groovy-2.5.9.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int); WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations; WARNING: All illegal access operations will be denied in a future release; imageData != Null. **Desktop (please complete the following information",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/511
https://github.com/qupath/qupath/issues/511:2670,Security,access,access,2670," ```; ./QuPath-0.2.0 -i=myimage.svs script myscript.groovy; ```; 3. See error:; imageData == Null; NullPointerException at line 11: Cannot invoke method getServer() on null object. **Expected behavior**; I would expect that if the command line arguments were changed to the new format the script processing would work the same as 0.2.0-m9 and earlier. The script editor seems to work just fine. Example working output from 0.2.0-m9 is shown below: . 10:23:10.593 [main] [INFO ] qupath.QuPath - Launching QuPath with args: -image, myimage.svs, -script, myscript.groovy; 10:23:11.387 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /var/folders/9_/b0xrdp2d1bsbzlmwp3xff2g00000gn/T/qupath-memo-8955966830564346412; 10:23:11.388 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 10:23:11.563 [main] [WARN ] q.l.i.s.ImageServerMetadata$ImageResolutionLevel - Calculated downsample values differ for x & y for level 4: x=70.0 and y=70.10548523206751 - will use value 70.05274261603375; 10:23:11.573 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; WARNING: An illegal reflective access operation has occurred; WARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/Applications/QuPath-0.2.0-m9.app/Contents/app/groovy-2.5.9.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int); WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations; WARNING: All illegal access operations will be denied in a future release; imageData != Null. **Desktop (please complete the following information):**; - OS: [macOS]; - QuPath Version [0.2.0-m10 and greater]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/511
https://github.com/qupath/qupath/issues/511:2729,Security,access,access,2729," ```; ./QuPath-0.2.0 -i=myimage.svs script myscript.groovy; ```; 3. See error:; imageData == Null; NullPointerException at line 11: Cannot invoke method getServer() on null object. **Expected behavior**; I would expect that if the command line arguments were changed to the new format the script processing would work the same as 0.2.0-m9 and earlier. The script editor seems to work just fine. Example working output from 0.2.0-m9 is shown below: . 10:23:10.593 [main] [INFO ] qupath.QuPath - Launching QuPath with args: -image, myimage.svs, -script, myscript.groovy; 10:23:11.387 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /var/folders/9_/b0xrdp2d1bsbzlmwp3xff2g00000gn/T/qupath-memo-8955966830564346412; 10:23:11.388 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 10:23:11.563 [main] [WARN ] q.l.i.s.ImageServerMetadata$ImageResolutionLevel - Calculated downsample values differ for x & y for level 4: x=70.0 and y=70.10548523206751 - will use value 70.05274261603375; 10:23:11.573 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; WARNING: An illegal reflective access operation has occurred; WARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/Applications/QuPath-0.2.0-m9.app/Contents/app/groovy-2.5.9.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int); WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations; WARNING: All illegal access operations will be denied in a future release; imageData != Null. **Desktop (please complete the following information):**; - OS: [macOS]; - QuPath Version [0.2.0-m10 and greater]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/511
https://github.com/qupath/qupath/issues/511:3051,Security,access,access,3051," ```; ./QuPath-0.2.0 -i=myimage.svs script myscript.groovy; ```; 3. See error:; imageData == Null; NullPointerException at line 11: Cannot invoke method getServer() on null object. **Expected behavior**; I would expect that if the command line arguments were changed to the new format the script processing would work the same as 0.2.0-m9 and earlier. The script editor seems to work just fine. Example working output from 0.2.0-m9 is shown below: . 10:23:10.593 [main] [INFO ] qupath.QuPath - Launching QuPath with args: -image, myimage.svs, -script, myscript.groovy; 10:23:11.387 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /var/folders/9_/b0xrdp2d1bsbzlmwp3xff2g00000gn/T/qupath-memo-8955966830564346412; 10:23:11.388 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 10:23:11.563 [main] [WARN ] q.l.i.s.ImageServerMetadata$ImageResolutionLevel - Calculated downsample values differ for x & y for level 4: x=70.0 and y=70.10548523206751 - will use value 70.05274261603375; 10:23:11.573 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; WARNING: An illegal reflective access operation has occurred; WARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/Applications/QuPath-0.2.0-m9.app/Contents/app/groovy-2.5.9.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int); WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations; WARNING: All illegal access operations will be denied in a future release; imageData != Null. **Desktop (please complete the following information):**; - OS: [macOS]; - QuPath Version [0.2.0-m10 and greater]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/511
https://github.com/qupath/qupath/issues/511:3112,Security,access,access,3112," ```; ./QuPath-0.2.0 -i=myimage.svs script myscript.groovy; ```; 3. See error:; imageData == Null; NullPointerException at line 11: Cannot invoke method getServer() on null object. **Expected behavior**; I would expect that if the command line arguments were changed to the new format the script processing would work the same as 0.2.0-m9 and earlier. The script editor seems to work just fine. Example working output from 0.2.0-m9 is shown below: . 10:23:10.593 [main] [INFO ] qupath.QuPath - Launching QuPath with args: -image, myimage.svs, -script, myscript.groovy; 10:23:11.387 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /var/folders/9_/b0xrdp2d1bsbzlmwp3xff2g00000gn/T/qupath-memo-8955966830564346412; 10:23:11.388 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 10:23:11.563 [main] [WARN ] q.l.i.s.ImageServerMetadata$ImageResolutionLevel - Calculated downsample values differ for x & y for level 4: x=70.0 and y=70.10548523206751 - will use value 70.05274261603375; 10:23:11.573 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; WARNING: An illegal reflective access operation has occurred; WARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/Applications/QuPath-0.2.0-m9.app/Contents/app/groovy-2.5.9.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int); WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations; WARNING: All illegal access operations will be denied in a future release; imageData != Null. **Desktop (please complete the following information):**; - OS: [macOS]; - QuPath Version [0.2.0-m10 and greater]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/511
https://github.com/qupath/qupath/issues/511:3152,Security,access,access,3152," ```; ./QuPath-0.2.0 -i=myimage.svs script myscript.groovy; ```; 3. See error:; imageData == Null; NullPointerException at line 11: Cannot invoke method getServer() on null object. **Expected behavior**; I would expect that if the command line arguments were changed to the new format the script processing would work the same as 0.2.0-m9 and earlier. The script editor seems to work just fine. Example working output from 0.2.0-m9 is shown below: . 10:23:10.593 [main] [INFO ] qupath.QuPath - Launching QuPath with args: -image, myimage.svs, -script, myscript.groovy; 10:23:11.387 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /var/folders/9_/b0xrdp2d1bsbzlmwp3xff2g00000gn/T/qupath-memo-8955966830564346412; 10:23:11.388 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 10:23:11.563 [main] [WARN ] q.l.i.s.ImageServerMetadata$ImageResolutionLevel - Calculated downsample values differ for x & y for level 4: x=70.0 and y=70.10548523206751 - will use value 70.05274261603375; 10:23:11.573 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; WARNING: An illegal reflective access operation has occurred; WARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/Applications/QuPath-0.2.0-m9.app/Contents/app/groovy-2.5.9.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int); WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1; WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations; WARNING: All illegal access operations will be denied in a future release; imageData != Null. **Desktop (please complete the following information):**; - OS: [macOS]; - QuPath Version [0.2.0-m10 and greater]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/511
https://github.com/qupath/qupath/issues/512:371,Availability,error,error,371,"## Bug report. **Describe the bug**; When working in a project and the computer or software crashes, you can later not access the file anymore that you were working on in the project. Meaning you loose all annotations and such. . **To Reproduce**; Steps to reproduce the behavior:; 1. Use your project with multiple files; 2. turn off your pc without saving or something error related; 3. Open the project again; 4. Try to open the image you were working in; 5. See error. ![image](https://user-images.githubusercontent.com/66477655/83880620-b46c5c00-a73f-11ea-9f5e-5c9c0ce802d0.png). **Expected behavior**; That the image is still accesible from an old version of the project. **Screenshots**. ![image](https://user-images.githubusercontent.com/66477655/83880655-c0f0b480-a73f-11ea-94ce-c4b19533e37d.png). **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version 0.2.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/512
https://github.com/qupath/qupath/issues/512:466,Availability,error,error,466,"## Bug report. **Describe the bug**; When working in a project and the computer or software crashes, you can later not access the file anymore that you were working on in the project. Meaning you loose all annotations and such. . **To Reproduce**; Steps to reproduce the behavior:; 1. Use your project with multiple files; 2. turn off your pc without saving or something error related; 3. Open the project again; 4. Try to open the image you were working in; 5. See error. ![image](https://user-images.githubusercontent.com/66477655/83880620-b46c5c00-a73f-11ea-9f5e-5c9c0ce802d0.png). **Expected behavior**; That the image is still accesible from an old version of the project. **Screenshots**. ![image](https://user-images.githubusercontent.com/66477655/83880655-c0f0b480-a73f-11ea-94ce-c4b19533e37d.png). **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version 0.2.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/512
https://github.com/qupath/qupath/issues/512:119,Security,access,access,119,"## Bug report. **Describe the bug**; When working in a project and the computer or software crashes, you can later not access the file anymore that you were working on in the project. Meaning you loose all annotations and such. . **To Reproduce**; Steps to reproduce the behavior:; 1. Use your project with multiple files; 2. turn off your pc without saving or something error related; 3. Open the project again; 4. Try to open the image you were working in; 5. See error. ![image](https://user-images.githubusercontent.com/66477655/83880620-b46c5c00-a73f-11ea-9f5e-5c9c0ce802d0.png). **Expected behavior**; That the image is still accesible from an old version of the project. **Screenshots**. ![image](https://user-images.githubusercontent.com/66477655/83880655-c0f0b480-a73f-11ea-94ce-c4b19533e37d.png). **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version 0.2.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/512
https://github.com/qupath/qupath/issues/513:31,Performance,load,load,31,"I can't seem to get the CLI to load an image. I am trying this:. /Applications/QuPath-0.2.0.app/Contents/MacOS/QuPath-0.2.0 --image=/fullpath_to_image/image.svs script /fullpath_to_script/run.groovy. run.groovy only contains:; import qupath.lib.scripting.QP; import qupath.lib.gui.scripting.QPEx; print QP.getCurrentImageData(). The script only prints ""null"" and any further scripting, such as loading a pixel classifier, does not initiate,. If I take out everything starting at script QuPath successfully loads the image in the GUI so there are no clear issues with the path or the image itself. Any advice would be appreciated!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/513
https://github.com/qupath/qupath/issues/513:394,Performance,load,loading,394,"I can't seem to get the CLI to load an image. I am trying this:. /Applications/QuPath-0.2.0.app/Contents/MacOS/QuPath-0.2.0 --image=/fullpath_to_image/image.svs script /fullpath_to_script/run.groovy. run.groovy only contains:; import qupath.lib.scripting.QP; import qupath.lib.gui.scripting.QPEx; print QP.getCurrentImageData(). The script only prints ""null"" and any further scripting, such as loading a pixel classifier, does not initiate,. If I take out everything starting at script QuPath successfully loads the image in the GUI so there are no clear issues with the path or the image itself. Any advice would be appreciated!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/513
https://github.com/qupath/qupath/issues/513:506,Performance,load,loads,506,"I can't seem to get the CLI to load an image. I am trying this:. /Applications/QuPath-0.2.0.app/Contents/MacOS/QuPath-0.2.0 --image=/fullpath_to_image/image.svs script /fullpath_to_script/run.groovy. run.groovy only contains:; import qupath.lib.scripting.QP; import qupath.lib.gui.scripting.QPEx; print QP.getCurrentImageData(). The script only prints ""null"" and any further scripting, such as loading a pixel classifier, does not initiate,. If I take out everything starting at script QuPath successfully loads the image in the GUI so there are no clear issues with the path or the image itself. Any advice would be appreciated!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/513
https://github.com/qupath/qupath/issues/513:549,Usability,clear,clear,549,"I can't seem to get the CLI to load an image. I am trying this:. /Applications/QuPath-0.2.0.app/Contents/MacOS/QuPath-0.2.0 --image=/fullpath_to_image/image.svs script /fullpath_to_script/run.groovy. run.groovy only contains:; import qupath.lib.scripting.QP; import qupath.lib.gui.scripting.QPEx; print QP.getCurrentImageData(). The script only prints ""null"" and any further scripting, such as loading a pixel classifier, does not initiate,. If I take out everything starting at script QuPath successfully loads the image in the GUI so there are no clear issues with the path or the image itself. Any advice would be appreciated!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/513
https://github.com/qupath/qupath/issues/514:23,Integrability,Interface,Interface,23,"**Describe the bug**; `Interface can't be instantiated!` exceptions occur when running some scripts from the command line, even though these work fine when run through the script editor. See https://forum.image.sc/t/cli-pixel-classifier/38679. **Expected behavior**; Scripts that run through the GUI also work when run from the command line. **Additional context**; TypeAdapters need to be registered before `GsonTools` is able to deserialize core objects (including any `PixelClassifier`). This usually happens during initialization of the GUI, whenever extensions are created. But when calling from the command line, extensions are not loaded in the same way. Consequently, anything that relies upon timely extension-loading may fail.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/514
https://github.com/qupath/qupath/issues/514:638,Performance,load,loaded,638,"**Describe the bug**; `Interface can't be instantiated!` exceptions occur when running some scripts from the command line, even though these work fine when run through the script editor. See https://forum.image.sc/t/cli-pixel-classifier/38679. **Expected behavior**; Scripts that run through the GUI also work when run from the command line. **Additional context**; TypeAdapters need to be registered before `GsonTools` is able to deserialize core objects (including any `PixelClassifier`). This usually happens during initialization of the GUI, whenever extensions are created. But when calling from the command line, extensions are not loaded in the same way. Consequently, anything that relies upon timely extension-loading may fail.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/514
https://github.com/qupath/qupath/issues/514:719,Performance,load,loading,719,"**Describe the bug**; `Interface can't be instantiated!` exceptions occur when running some scripts from the command line, even though these work fine when run through the script editor. See https://forum.image.sc/t/cli-pixel-classifier/38679. **Expected behavior**; Scripts that run through the GUI also work when run from the command line. **Additional context**; TypeAdapters need to be registered before `GsonTools` is able to deserialize core objects (including any `PixelClassifier`). This usually happens during initialization of the GUI, whenever extensions are created. But when calling from the command line, extensions are not loaded in the same way. Consequently, anything that relies upon timely extension-loading may fail.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/514
https://github.com/qupath/qupath/issues/515:373,Availability,Down,Download,373,"## Bug report. **Describe the bug**; When using the File > Project > Import Images from QuPath 0.1.2, projects containing multi-series files are not imported correctly. . This is the case when the user imports a VSI file into QuPath (Which can contain several series) but deletes one or several series from the project. . **To Reproduce** ; See provided zip containing:; [ Download Zip File (239MB) ](https://drive.switch.ch/index.php/s/fCOEPp2DIQD8qv1); QuPath 0.1.2 Original Project; QuPath 0.2.0 Imported Project; QuPath 0.2.0 Created from scratch, with images deleted to match QuPath 0.1.2 Original Project; (Notice differences in 'data' folder of both QuPath 0.2.0 projects). **Steps to reproduce the behavior:**; 1. Create a QuPath 0.1.2 Project with a VSI file that has multiple series; 2. After importing delete one image (not the last image or you will not see the effect); 3. Save the project; 4. Create a new Project in QuPath 0.2.0; 5. Use File > Project > Import Images from QuPath 0.1.2; 6. After import, notice how QuPath 0.2.0 loads the wrong images. **Expected behavior**; QuPath Projects that are re-imported from multi-series file should be consistent even if the user did not keep all files in the project. **Screenshots**; ![Side-by-side](https://user-images.githubusercontent.com/319932/84012181-75285000-a977-11ea-84b2-b10688ecdbcb.jpg); Left: QuPath 0.1.2; Right: QuPath 0.2.0; The thumbnail for both images is the same and it opens the same image twice. **Desktop (please complete the following information):**; - OS: Windows 10 x64; - QuPath Version 0.2.0. **Additional context**; When replicating what the user did from scratch in QuPath 0.2.0, we end up with the following the structure in 'data' is not the same as from the Import Images from QuPath 0.1.2 command.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/515
https://github.com/qupath/qupath/issues/515:1043,Performance,load,loads,1043,"## Bug report. **Describe the bug**; When using the File > Project > Import Images from QuPath 0.1.2, projects containing multi-series files are not imported correctly. . This is the case when the user imports a VSI file into QuPath (Which can contain several series) but deletes one or several series from the project. . **To Reproduce** ; See provided zip containing:; [ Download Zip File (239MB) ](https://drive.switch.ch/index.php/s/fCOEPp2DIQD8qv1); QuPath 0.1.2 Original Project; QuPath 0.2.0 Imported Project; QuPath 0.2.0 Created from scratch, with images deleted to match QuPath 0.1.2 Original Project; (Notice differences in 'data' folder of both QuPath 0.2.0 projects). **Steps to reproduce the behavior:**; 1. Create a QuPath 0.1.2 Project with a VSI file that has multiple series; 2. After importing delete one image (not the last image or you will not see the effect); 3. Save the project; 4. Create a new Project in QuPath 0.2.0; 5. Use File > Project > Import Images from QuPath 0.1.2; 6. After import, notice how QuPath 0.2.0 loads the wrong images. **Expected behavior**; QuPath Projects that are re-imported from multi-series file should be consistent even if the user did not keep all files in the project. **Screenshots**; ![Side-by-side](https://user-images.githubusercontent.com/319932/84012181-75285000-a977-11ea-84b2-b10688ecdbcb.jpg); Left: QuPath 0.1.2; Right: QuPath 0.2.0; The thumbnail for both images is the same and it opens the same image twice. **Desktop (please complete the following information):**; - OS: Windows 10 x64; - QuPath Version 0.2.0. **Additional context**; When replicating what the user did from scratch in QuPath 0.2.0, we end up with the following the structure in 'data' is not the same as from the Import Images from QuPath 0.1.2 command.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/515
https://github.com/qupath/qupath/issues/517:360,Deployability,update,updates,360,"## Bug report. **Describe the bug**; Repeated calls to ""Create thresholder"" results in a larger dialog box each time, and progressively slower startup. **Expected behavior**; Dialog opens at the same size each time. **Additional context**; The slower startup likely comes from repeatedly adding listeners to the same UI components, and because the measurement updates are fired without the `isChanging` property. It may be possible to avoid reinitializing the Stage and not firing the measurement change event at all.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/517
https://github.com/qupath/qupath/issues/517:435,Safety,avoid,avoid,435,"## Bug report. **Describe the bug**; Repeated calls to ""Create thresholder"" results in a larger dialog box each time, and progressively slower startup. **Expected behavior**; Dialog opens at the same size each time. **Additional context**; The slower startup likely comes from repeatedly adding listeners to the same UI components, and because the measurement updates are fired without the `isChanging` property. It may be possible to avoid reinitializing the Stage and not firing the measurement change event at all.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/517
https://github.com/qupath/qupath/pull/520:212,Deployability,release,release,212,"See https://github.com/qupath/qupath/issues/514; This is a bit of a hack to ensure that type adapters are registered for scripts run from the command line, without making any substantial API changes to the point release.; It remains the case that QP must be initialized somewhere.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/520
https://github.com/qupath/qupath/pull/520:93,Energy Efficiency,adapt,adapters,93,"See https://github.com/qupath/qupath/issues/514; This is a bit of a hack to ensure that type adapters are registered for scripts run from the command line, without making any substantial API changes to the point release.; It remains the case that QP must be initialized somewhere.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/520
https://github.com/qupath/qupath/pull/520:93,Integrability,adapter,adapters,93,"See https://github.com/qupath/qupath/issues/514; This is a bit of a hack to ensure that type adapters are registered for scripts run from the command line, without making any substantial API changes to the point release.; It remains the case that QP must be initialized somewhere.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/520
https://github.com/qupath/qupath/pull/520:93,Modifiability,adapt,adapters,93,"See https://github.com/qupath/qupath/issues/514; This is a bit of a hack to ensure that type adapters are registered for scripts run from the command line, without making any substantial API changes to the point release.; It remains the case that QP must be initialized somewhere.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/520
https://github.com/qupath/qupath/issues/521:334,Availability,error,error,334,"## Bug report. **Describe the bug**; Attempting to add images via a past list fails sometimes when it should not... specifically, when it can't construct a URI. This might be because of a space or other unescaped character. See https://forum.image.sc/t/qupath-update-urls-issue/38613/6. Second issue: if no valid path is provided, an error dialog is shown but without a proper parent window set - which causes some extra confusion. **Expected behavior**; * Absolute file paths can be used for import (with or without spaces); * Error dialogs don't cause trouble. **Additional context**; This may also be relevant: https://forum.image.sc/t/qupath-update-urls-issue/38613",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/521
https://github.com/qupath/qupath/issues/521:528,Availability,Error,Error,528,"## Bug report. **Describe the bug**; Attempting to add images via a past list fails sometimes when it should not... specifically, when it can't construct a URI. This might be because of a space or other unescaped character. See https://forum.image.sc/t/qupath-update-urls-issue/38613/6. Second issue: if no valid path is provided, an error dialog is shown but without a proper parent window set - which causes some extra confusion. **Expected behavior**; * Absolute file paths can be used for import (with or without spaces); * Error dialogs don't cause trouble. **Additional context**; This may also be relevant: https://forum.image.sc/t/qupath-update-urls-issue/38613",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/521
https://github.com/qupath/qupath/issues/521:260,Deployability,update,update-urls-issue,260,"## Bug report. **Describe the bug**; Attempting to add images via a past list fails sometimes when it should not... specifically, when it can't construct a URI. This might be because of a space or other unescaped character. See https://forum.image.sc/t/qupath-update-urls-issue/38613/6. Second issue: if no valid path is provided, an error dialog is shown but without a proper parent window set - which causes some extra confusion. **Expected behavior**; * Absolute file paths can be used for import (with or without spaces); * Error dialogs don't cause trouble. **Additional context**; This may also be relevant: https://forum.image.sc/t/qupath-update-urls-issue/38613",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/521
https://github.com/qupath/qupath/issues/521:646,Deployability,update,update-urls-issue,646,"## Bug report. **Describe the bug**; Attempting to add images via a past list fails sometimes when it should not... specifically, when it can't construct a URI. This might be because of a space or other unescaped character. See https://forum.image.sc/t/qupath-update-urls-issue/38613/6. Second issue: if no valid path is provided, an error dialog is shown but without a proper parent window set - which causes some extra confusion. **Expected behavior**; * Absolute file paths can be used for import (with or without spaces); * Error dialogs don't cause trouble. **Additional context**; This may also be relevant: https://forum.image.sc/t/qupath-update-urls-issue/38613",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/521
https://github.com/qupath/qupath/issues/522:361,Deployability,update,update,361,## Bug report. **Describe the bug**; See https://forum.image.sc/t/calculate-more-shape-descriptors-using-qupath/38900/3; Very reproducible... when doing the specified action of clicking/double-clicking on a list cell. **Expected behavior**; No NPE. **Additional context**; Seems to be a known controlsfx bug. Need to find a workaround (or wait for a controlsfx update).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/522
https://github.com/qupath/qupath/issues/527:854,Energy Efficiency,reduce,reduce,854,"## Bug report. **Describe the bug**; Complex ROIs generated from JTS Geometry objects may not necessarily be valid. If they are not valid, this can cause numerous problems, including:; * Weird visual behavior; * Inability to modify the geometry; * Wrong results (e.g. area or length). Most, if not all, geometries created through normal use in v0.2.0 should be valid - since invalidity is typically caught earlier in the process, before ROIs are created. However, it remains possible that geometries are created by a more obscure process/via scripting. The user should be protected from this as far as possible. **Expected behavior**; Invalid geometries either cannot be converted to ROIs, or at least provide an indication of their invalidity (e.g. by not showing measurements). **Additional context**; Some improvements introduced in v0.2.0-m9 greatly reduce the changes of generating an invalid geometry with the brush/wand tool (the most recent invalid geometry I have seen was generated in m8). There is already a mechanism to perform a validity check when creating a `GeometryROI`, but it is not currently used: https://github.com/qupath/qupath/blob/a03756328188999c0b7f12c290cda0589c50bd4b/qupath-core/src/main/java/qupath/lib/roi/GeometryROI.java#L90. The reason for this is that checking `isValid` can be *very* slow for large or complex geometries - which can problematic in some cases (e.g. when using the brush/wand). The validity check *only* impacts the display of measurements; the geometry is otherwise permitted. Proposed change is to perform validity checks whenever GeometryROIs are created in most circumstances, except for:; * When interactively drawing with the brush or wand; * When performing a simple operation (e.g. translation) that ought not to have any validity implications. Other cases that need consideration are:; * When deserializing an existing geometry (which ought to have been checked upon creation); * When attempting to create a ROI from a heterogeneous `Geomet",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/527
https://github.com/qupath/qupath/issues/527:1032,Performance,perform,perform,1032,"ated from JTS Geometry objects may not necessarily be valid. If they are not valid, this can cause numerous problems, including:; * Weird visual behavior; * Inability to modify the geometry; * Wrong results (e.g. area or length). Most, if not all, geometries created through normal use in v0.2.0 should be valid - since invalidity is typically caught earlier in the process, before ROIs are created. However, it remains possible that geometries are created by a more obscure process/via scripting. The user should be protected from this as far as possible. **Expected behavior**; Invalid geometries either cannot be converted to ROIs, or at least provide an indication of their invalidity (e.g. by not showing measurements). **Additional context**; Some improvements introduced in v0.2.0-m9 greatly reduce the changes of generating an invalid geometry with the brush/wand tool (the most recent invalid geometry I have seen was generated in m8). There is already a mechanism to perform a validity check when creating a `GeometryROI`, but it is not currently used: https://github.com/qupath/qupath/blob/a03756328188999c0b7f12c290cda0589c50bd4b/qupath-core/src/main/java/qupath/lib/roi/GeometryROI.java#L90. The reason for this is that checking `isValid` can be *very* slow for large or complex geometries - which can problematic in some cases (e.g. when using the brush/wand). The validity check *only* impacts the display of measurements; the geometry is otherwise permitted. Proposed change is to perform validity checks whenever GeometryROIs are created in most circumstances, except for:; * When interactively drawing with the brush or wand; * When performing a simple operation (e.g. translation) that ought not to have any validity implications. Other cases that need consideration are:; * When deserializing an existing geometry (which ought to have been checked upon creation); * When attempting to create a ROI from a heterogeneous `GeometryCollection` (e.g. combination of polygons and lines)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/527
https://github.com/qupath/qupath/issues/527:1552,Performance,perform,perform,1552,"ated from JTS Geometry objects may not necessarily be valid. If they are not valid, this can cause numerous problems, including:; * Weird visual behavior; * Inability to modify the geometry; * Wrong results (e.g. area or length). Most, if not all, geometries created through normal use in v0.2.0 should be valid - since invalidity is typically caught earlier in the process, before ROIs are created. However, it remains possible that geometries are created by a more obscure process/via scripting. The user should be protected from this as far as possible. **Expected behavior**; Invalid geometries either cannot be converted to ROIs, or at least provide an indication of their invalidity (e.g. by not showing measurements). **Additional context**; Some improvements introduced in v0.2.0-m9 greatly reduce the changes of generating an invalid geometry with the brush/wand tool (the most recent invalid geometry I have seen was generated in m8). There is already a mechanism to perform a validity check when creating a `GeometryROI`, but it is not currently used: https://github.com/qupath/qupath/blob/a03756328188999c0b7f12c290cda0589c50bd4b/qupath-core/src/main/java/qupath/lib/roi/GeometryROI.java#L90. The reason for this is that checking `isValid` can be *very* slow for large or complex geometries - which can problematic in some cases (e.g. when using the brush/wand). The validity check *only* impacts the display of measurements; the geometry is otherwise permitted. Proposed change is to perform validity checks whenever GeometryROIs are created in most circumstances, except for:; * When interactively drawing with the brush or wand; * When performing a simple operation (e.g. translation) that ought not to have any validity implications. Other cases that need consideration are:; * When deserializing an existing geometry (which ought to have been checked upon creation); * When attempting to create a ROI from a heterogeneous `GeometryCollection` (e.g. combination of polygons and lines)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/527
https://github.com/qupath/qupath/issues/527:1706,Performance,perform,performing,1706,"ated from JTS Geometry objects may not necessarily be valid. If they are not valid, this can cause numerous problems, including:; * Weird visual behavior; * Inability to modify the geometry; * Wrong results (e.g. area or length). Most, if not all, geometries created through normal use in v0.2.0 should be valid - since invalidity is typically caught earlier in the process, before ROIs are created. However, it remains possible that geometries are created by a more obscure process/via scripting. The user should be protected from this as far as possible. **Expected behavior**; Invalid geometries either cannot be converted to ROIs, or at least provide an indication of their invalidity (e.g. by not showing measurements). **Additional context**; Some improvements introduced in v0.2.0-m9 greatly reduce the changes of generating an invalid geometry with the brush/wand tool (the most recent invalid geometry I have seen was generated in m8). There is already a mechanism to perform a validity check when creating a `GeometryROI`, but it is not currently used: https://github.com/qupath/qupath/blob/a03756328188999c0b7f12c290cda0589c50bd4b/qupath-core/src/main/java/qupath/lib/roi/GeometryROI.java#L90. The reason for this is that checking `isValid` can be *very* slow for large or complex geometries - which can problematic in some cases (e.g. when using the brush/wand). The validity check *only* impacts the display of measurements; the geometry is otherwise permitted. Proposed change is to perform validity checks whenever GeometryROIs are created in most circumstances, except for:; * When interactively drawing with the brush or wand; * When performing a simple operation (e.g. translation) that ought not to have any validity implications. Other cases that need consideration are:; * When deserializing an existing geometry (which ought to have been checked upon creation); * When attempting to create a ROI from a heterogeneous `GeometryCollection` (e.g. combination of polygons and lines)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/527
https://github.com/qupath/qupath/issues/527:1719,Usability,simpl,simple,1719,"ated from JTS Geometry objects may not necessarily be valid. If they are not valid, this can cause numerous problems, including:; * Weird visual behavior; * Inability to modify the geometry; * Wrong results (e.g. area or length). Most, if not all, geometries created through normal use in v0.2.0 should be valid - since invalidity is typically caught earlier in the process, before ROIs are created. However, it remains possible that geometries are created by a more obscure process/via scripting. The user should be protected from this as far as possible. **Expected behavior**; Invalid geometries either cannot be converted to ROIs, or at least provide an indication of their invalidity (e.g. by not showing measurements). **Additional context**; Some improvements introduced in v0.2.0-m9 greatly reduce the changes of generating an invalid geometry with the brush/wand tool (the most recent invalid geometry I have seen was generated in m8). There is already a mechanism to perform a validity check when creating a `GeometryROI`, but it is not currently used: https://github.com/qupath/qupath/blob/a03756328188999c0b7f12c290cda0589c50bd4b/qupath-core/src/main/java/qupath/lib/roi/GeometryROI.java#L90. The reason for this is that checking `isValid` can be *very* slow for large or complex geometries - which can problematic in some cases (e.g. when using the brush/wand). The validity check *only* impacts the display of measurements; the geometry is otherwise permitted. Proposed change is to perform validity checks whenever GeometryROIs are created in most circumstances, except for:; * When interactively drawing with the brush or wand; * When performing a simple operation (e.g. translation) that ought not to have any validity implications. Other cases that need consideration are:; * When deserializing an existing geometry (which ought to have been checked upon creation); * When attempting to create a ROI from a heterogeneous `GeometryCollection` (e.g. combination of polygons and lines)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/527
https://github.com/qupath/qupath/issues/528:155,Deployability,update,updated,155,"## Bug report. **Describe the bug**; If a `TransformedServerBuilder` is used to apply an affine transform to an image, the pixel size is not automatically updated. **To Reproduce**; See https://gist.github.com/petebankhead/6d3a220074a1cb99caf6dc92ab71bfed. **Expected behavior**; The pixel size incorporates the affine transform information if possible. If the pixel size has not been set, this is not changed. **Additional context**; This might potentially cause confusion when concatenating images along the channel dimension - but it remains the case that the metadata from the 'main' image will be used. The issue is most evident if using a script to write a single transformed image.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/528
https://github.com/qupath/qupath/issues/531:195,Availability,down,downsample,195,"## Bug report. **Describe the bug**; When training a pixel classifier, the input resolution must be specified.; This is *usually* in µm per pixel. However, for an uncalibrated image it will be a downsample value. This is (as far as I know) internally consistent: if you apply only to calibrated or uncalibrated images, everything should work. However, if you train a pixel classifier on an uncalibrated image and then apply it to calibrated image then the downsample value may be different from what is expected - because the resolution is based upon the known pixel size, irrespective of the units. For example, suppose I train a classifier on an uncalibrated image with downsample = 2.; * If I apply it to an uncalibrated image (where the pixel size is 1 pixel), the downsample will be calculated as 2 / 1 = 2.; If I apply it to a calibrated image where the pixel size is 0.5 µm, the downsample will be calculated as 2 / 0.5 = 4. **Expected behavior**; The downsample factor should be 2 in both the above cases. **Additional context**; QuPath really only supports uncalibrated images, and pixel sizes in µm.; No effort is made currently to handle pixel sizes in other units.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/531
https://github.com/qupath/qupath/issues/531:456,Availability,down,downsample,456,"## Bug report. **Describe the bug**; When training a pixel classifier, the input resolution must be specified.; This is *usually* in µm per pixel. However, for an uncalibrated image it will be a downsample value. This is (as far as I know) internally consistent: if you apply only to calibrated or uncalibrated images, everything should work. However, if you train a pixel classifier on an uncalibrated image and then apply it to calibrated image then the downsample value may be different from what is expected - because the resolution is based upon the known pixel size, irrespective of the units. For example, suppose I train a classifier on an uncalibrated image with downsample = 2.; * If I apply it to an uncalibrated image (where the pixel size is 1 pixel), the downsample will be calculated as 2 / 1 = 2.; If I apply it to a calibrated image where the pixel size is 0.5 µm, the downsample will be calculated as 2 / 0.5 = 4. **Expected behavior**; The downsample factor should be 2 in both the above cases. **Additional context**; QuPath really only supports uncalibrated images, and pixel sizes in µm.; No effort is made currently to handle pixel sizes in other units.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/531
https://github.com/qupath/qupath/issues/531:672,Availability,down,downsample,672,"## Bug report. **Describe the bug**; When training a pixel classifier, the input resolution must be specified.; This is *usually* in µm per pixel. However, for an uncalibrated image it will be a downsample value. This is (as far as I know) internally consistent: if you apply only to calibrated or uncalibrated images, everything should work. However, if you train a pixel classifier on an uncalibrated image and then apply it to calibrated image then the downsample value may be different from what is expected - because the resolution is based upon the known pixel size, irrespective of the units. For example, suppose I train a classifier on an uncalibrated image with downsample = 2.; * If I apply it to an uncalibrated image (where the pixel size is 1 pixel), the downsample will be calculated as 2 / 1 = 2.; If I apply it to a calibrated image where the pixel size is 0.5 µm, the downsample will be calculated as 2 / 0.5 = 4. **Expected behavior**; The downsample factor should be 2 in both the above cases. **Additional context**; QuPath really only supports uncalibrated images, and pixel sizes in µm.; No effort is made currently to handle pixel sizes in other units.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/531
https://github.com/qupath/qupath/issues/531:769,Availability,down,downsample,769,"## Bug report. **Describe the bug**; When training a pixel classifier, the input resolution must be specified.; This is *usually* in µm per pixel. However, for an uncalibrated image it will be a downsample value. This is (as far as I know) internally consistent: if you apply only to calibrated or uncalibrated images, everything should work. However, if you train a pixel classifier on an uncalibrated image and then apply it to calibrated image then the downsample value may be different from what is expected - because the resolution is based upon the known pixel size, irrespective of the units. For example, suppose I train a classifier on an uncalibrated image with downsample = 2.; * If I apply it to an uncalibrated image (where the pixel size is 1 pixel), the downsample will be calculated as 2 / 1 = 2.; If I apply it to a calibrated image where the pixel size is 0.5 µm, the downsample will be calculated as 2 / 0.5 = 4. **Expected behavior**; The downsample factor should be 2 in both the above cases. **Additional context**; QuPath really only supports uncalibrated images, and pixel sizes in µm.; No effort is made currently to handle pixel sizes in other units.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/531
https://github.com/qupath/qupath/issues/531:886,Availability,down,downsample,886,"## Bug report. **Describe the bug**; When training a pixel classifier, the input resolution must be specified.; This is *usually* in µm per pixel. However, for an uncalibrated image it will be a downsample value. This is (as far as I know) internally consistent: if you apply only to calibrated or uncalibrated images, everything should work. However, if you train a pixel classifier on an uncalibrated image and then apply it to calibrated image then the downsample value may be different from what is expected - because the resolution is based upon the known pixel size, irrespective of the units. For example, suppose I train a classifier on an uncalibrated image with downsample = 2.; * If I apply it to an uncalibrated image (where the pixel size is 1 pixel), the downsample will be calculated as 2 / 1 = 2.; If I apply it to a calibrated image where the pixel size is 0.5 µm, the downsample will be calculated as 2 / 0.5 = 4. **Expected behavior**; The downsample factor should be 2 in both the above cases. **Additional context**; QuPath really only supports uncalibrated images, and pixel sizes in µm.; No effort is made currently to handle pixel sizes in other units.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/531
https://github.com/qupath/qupath/issues/531:959,Availability,down,downsample,959,"## Bug report. **Describe the bug**; When training a pixel classifier, the input resolution must be specified.; This is *usually* in µm per pixel. However, for an uncalibrated image it will be a downsample value. This is (as far as I know) internally consistent: if you apply only to calibrated or uncalibrated images, everything should work. However, if you train a pixel classifier on an uncalibrated image and then apply it to calibrated image then the downsample value may be different from what is expected - because the resolution is based upon the known pixel size, irrespective of the units. For example, suppose I train a classifier on an uncalibrated image with downsample = 2.; * If I apply it to an uncalibrated image (where the pixel size is 1 pixel), the downsample will be calculated as 2 / 1 = 2.; If I apply it to a calibrated image where the pixel size is 0.5 µm, the downsample will be calculated as 2 / 0.5 = 4. **Expected behavior**; The downsample factor should be 2 in both the above cases. **Additional context**; QuPath really only supports uncalibrated images, and pixel sizes in µm.; No effort is made currently to handle pixel sizes in other units.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/531
https://github.com/qupath/qupath/pull/536:388,Testability,test,tests,388,See https://github.com/qupath/qupath/issues/320; This attempts a very limited character encoding fix to command line arguments corresponding to paths if:; - running on Windows; - the argument does not contain ASCII characters only; - no file corresponding to the originally-encoded path exists; - switching from the default encoding to UTF8 identifies a file that does exist; - any other tests (e.g. file extensions) pass,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/536
https://github.com/qupath/qupath/pull/537:116,Safety,Unsafe,UnsafeReflectionAccessor,116,Gson-related method was previously emitted:; WARNING: Illegal reflective access by com.google.gson.internal.reflect.UnsafeReflectionAccessor caused by AffineTransform,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/537
https://github.com/qupath/qupath/pull/537:73,Security,access,access,73,Gson-related method was previously emitted:; WARNING: Illegal reflective access by com.google.gson.internal.reflect.UnsafeReflectionAccessor caused by AffineTransform,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/537
https://github.com/qupath/qupath/issues/538:166,Availability,mask,mask,166,"Hi! . First of all thanks so much for the amazing QuPath project, and for all of the documentation online.; I have however a question. I am trying to export a binary mask of my image (where I have segmented glomeruli), but the following script, only export saves in the masks image the tiles where the segmentations are but not the actual entire image binarized as shown here: . https://petebankhead.github.io/qupath/scripting/2018/03/13/script-export-import-binary-masks.html. Could you help me out with this? ; Thanks . Giovanna",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/538
https://github.com/qupath/qupath/issues/538:270,Availability,mask,masks,270,"Hi! . First of all thanks so much for the amazing QuPath project, and for all of the documentation online.; I have however a question. I am trying to export a binary mask of my image (where I have segmented glomeruli), but the following script, only export saves in the masks image the tiles where the segmentations are but not the actual entire image binarized as shown here: . https://petebankhead.github.io/qupath/scripting/2018/03/13/script-export-import-binary-masks.html. Could you help me out with this? ; Thanks . Giovanna",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/538
https://github.com/qupath/qupath/issues/538:466,Availability,mask,masks,466,"Hi! . First of all thanks so much for the amazing QuPath project, and for all of the documentation online.; I have however a question. I am trying to export a binary mask of my image (where I have segmented glomeruli), but the following script, only export saves in the masks image the tiles where the segmentations are but not the actual entire image binarized as shown here: . https://petebankhead.github.io/qupath/scripting/2018/03/13/script-export-import-binary-masks.html. Could you help me out with this? ; Thanks . Giovanna",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/538
https://github.com/qupath/qupath/issues/540:720,Performance,perform,performance-in-tmas,720,"## Bug report. **Describe the bug**; *Resolve hierarchy* does not work correctly when applied to images containing both TMA cores and detections. **To Reproduce**; Steps to reproduce the behavior:; 1. Open and dearray a TMA image; 2. Create an annotation inside a core; 3. Detect cells within the annotation; 4. Call *Resolve hierarchy*. The detections are now 'orphaned'; no longer under the parent annotation (but rather under the root object). **Expected behavior**; Detection objects remain under their parent annotation, which should now be correctly assigned below the corresponding TMA core. **Additional context**; First noticed when exploring https://forum.image.sc/t/spatial-analysis-distance-to-annotation-2d-performance-in-tmas/39288",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/540
https://github.com/qupath/qupath/issues/540:134,Safety,detect,detections,134,"## Bug report. **Describe the bug**; *Resolve hierarchy* does not work correctly when applied to images containing both TMA cores and detections. **To Reproduce**; Steps to reproduce the behavior:; 1. Open and dearray a TMA image; 2. Create an annotation inside a core; 3. Detect cells within the annotation; 4. Call *Resolve hierarchy*. The detections are now 'orphaned'; no longer under the parent annotation (but rather under the root object). **Expected behavior**; Detection objects remain under their parent annotation, which should now be correctly assigned below the corresponding TMA core. **Additional context**; First noticed when exploring https://forum.image.sc/t/spatial-analysis-distance-to-annotation-2d-performance-in-tmas/39288",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/540
https://github.com/qupath/qupath/issues/540:273,Safety,Detect,Detect,273,"## Bug report. **Describe the bug**; *Resolve hierarchy* does not work correctly when applied to images containing both TMA cores and detections. **To Reproduce**; Steps to reproduce the behavior:; 1. Open and dearray a TMA image; 2. Create an annotation inside a core; 3. Detect cells within the annotation; 4. Call *Resolve hierarchy*. The detections are now 'orphaned'; no longer under the parent annotation (but rather under the root object). **Expected behavior**; Detection objects remain under their parent annotation, which should now be correctly assigned below the corresponding TMA core. **Additional context**; First noticed when exploring https://forum.image.sc/t/spatial-analysis-distance-to-annotation-2d-performance-in-tmas/39288",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/540
https://github.com/qupath/qupath/issues/540:342,Safety,detect,detections,342,"## Bug report. **Describe the bug**; *Resolve hierarchy* does not work correctly when applied to images containing both TMA cores and detections. **To Reproduce**; Steps to reproduce the behavior:; 1. Open and dearray a TMA image; 2. Create an annotation inside a core; 3. Detect cells within the annotation; 4. Call *Resolve hierarchy*. The detections are now 'orphaned'; no longer under the parent annotation (but rather under the root object). **Expected behavior**; Detection objects remain under their parent annotation, which should now be correctly assigned below the corresponding TMA core. **Additional context**; First noticed when exploring https://forum.image.sc/t/spatial-analysis-distance-to-annotation-2d-performance-in-tmas/39288",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/540
https://github.com/qupath/qupath/issues/540:470,Safety,Detect,Detection,470,"## Bug report. **Describe the bug**; *Resolve hierarchy* does not work correctly when applied to images containing both TMA cores and detections. **To Reproduce**; Steps to reproduce the behavior:; 1. Open and dearray a TMA image; 2. Create an annotation inside a core; 3. Detect cells within the annotation; 4. Call *Resolve hierarchy*. The detections are now 'orphaned'; no longer under the parent annotation (but rather under the root object). **Expected behavior**; Detection objects remain under their parent annotation, which should now be correctly assigned below the corresponding TMA core. **Additional context**; First noticed when exploring https://forum.image.sc/t/spatial-analysis-distance-to-annotation-2d-performance-in-tmas/39288",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/540
https://github.com/qupath/qupath/issues/543:596,Deployability,Update,Update,596,"## Bug report. **Describe the bug**; When moving a folder (under Windows) that includes a project folder and an image to a different hard drive, QuPath does not find a suitable Replacement URI for the image when opening the project. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a QuPath project and include an optical image in the same folder structure, e.g.:; ```; G:\QPB; │ testdata.svs; │; └───Annotations; │ project.qpproj; │ project.qpproj.backup; │; ```. 2. Move the parent folder to a different hard drive. E.g. to E:\QPB. 3. Open the project in the new location.; 4. The Update URI dialog doesn't show a suggested replacement URI, although the relative path of the image to the project hasn't changed. **Expected behavior**; The replacement URI field should be pre-populated with the path to the image at its new location. **Screenshots**; After folder is moved to different drive:; ![screenshot_project_moved_to different_folder](https://user-images.githubusercontent.com/44832494/85672373-1c6ced00-b6c3-11ea-9795-5078d0b595e4.png). **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.2.1. **Additional context**; The problem only occurs if moving the folder to a different hard drive. Moving the folder to a different location on the same hard drive shows the expected behavior of suggesting the correct replacement URI.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/543
https://github.com/qupath/qupath/issues/543:393,Testability,test,testdata,393,"## Bug report. **Describe the bug**; When moving a folder (under Windows) that includes a project folder and an image to a different hard drive, QuPath does not find a suitable Replacement URI for the image when opening the project. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a QuPath project and include an optical image in the same folder structure, e.g.:; ```; G:\QPB; │ testdata.svs; │; └───Annotations; │ project.qpproj; │ project.qpproj.backup; │; ```. 2. Move the parent folder to a different hard drive. E.g. to E:\QPB. 3. Open the project in the new location.; 4. The Update URI dialog doesn't show a suggested replacement URI, although the relative path of the image to the project hasn't changed. **Expected behavior**; The replacement URI field should be pre-populated with the path to the image at its new location. **Screenshots**; After folder is moved to different drive:; ![screenshot_project_moved_to different_folder](https://user-images.githubusercontent.com/44832494/85672373-1c6ced00-b6c3-11ea-9795-5078d0b595e4.png). **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.2.1. **Additional context**; The problem only occurs if moving the folder to a different hard drive. Moving the folder to a different location on the same hard drive shows the expected behavior of suggesting the correct replacement URI.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/543
https://github.com/qupath/qupath/issues/544:367,Safety,detect,detection,367,"## Bug report. **Describe the bug**; If I create objects using a pixel classifier, but set the minimum size to larger than any object that would be created, it creates a phantom polyline object. This does not appear on the image, and has a centroid position of NaN, but is listed in the hierarchy. It happens for either type of pixel classifier and for annotation or detection objects. If I create objects inside a collection of parent annotations, the regions that have valid new detection work fine, but the ones that don't each get a polyline. . **To Reproduce**; Steps to reproduce the behavior:; 1. Train a pixel classifier.; 2. Create objects (detection or annotation). Set the minimum size to be larger than whatever region this classifier is selecting. ; 3. A surprise polyline object appears in the hierarchy. . **Expected behavior**; No object should be created at all. **Screenshots**; Set up:; ![image](https://user-images.githubusercontent.com/29264310/85805453-34fbf800-b701-11ea-95ae-3b2463227743.png). Invisible Polyline:; ![image](https://user-images.githubusercontent.com/29264310/85805506-5f4db580-b701-11ea-9265-bc5dae3f29db.png). **Desktop (please complete the following information):**; Windows 10. ; QuPath 0.2.1 (tensorflow-cpu build).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/544
https://github.com/qupath/qupath/issues/544:481,Safety,detect,detection,481,"## Bug report. **Describe the bug**; If I create objects using a pixel classifier, but set the minimum size to larger than any object that would be created, it creates a phantom polyline object. This does not appear on the image, and has a centroid position of NaN, but is listed in the hierarchy. It happens for either type of pixel classifier and for annotation or detection objects. If I create objects inside a collection of parent annotations, the regions that have valid new detection work fine, but the ones that don't each get a polyline. . **To Reproduce**; Steps to reproduce the behavior:; 1. Train a pixel classifier.; 2. Create objects (detection or annotation). Set the minimum size to be larger than whatever region this classifier is selecting. ; 3. A surprise polyline object appears in the hierarchy. . **Expected behavior**; No object should be created at all. **Screenshots**; Set up:; ![image](https://user-images.githubusercontent.com/29264310/85805453-34fbf800-b701-11ea-95ae-3b2463227743.png). Invisible Polyline:; ![image](https://user-images.githubusercontent.com/29264310/85805506-5f4db580-b701-11ea-9265-bc5dae3f29db.png). **Desktop (please complete the following information):**; Windows 10. ; QuPath 0.2.1 (tensorflow-cpu build).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/544
https://github.com/qupath/qupath/issues/544:650,Safety,detect,detection,650,"## Bug report. **Describe the bug**; If I create objects using a pixel classifier, but set the minimum size to larger than any object that would be created, it creates a phantom polyline object. This does not appear on the image, and has a centroid position of NaN, but is listed in the hierarchy. It happens for either type of pixel classifier and for annotation or detection objects. If I create objects inside a collection of parent annotations, the regions that have valid new detection work fine, but the ones that don't each get a polyline. . **To Reproduce**; Steps to reproduce the behavior:; 1. Train a pixel classifier.; 2. Create objects (detection or annotation). Set the minimum size to be larger than whatever region this classifier is selecting. ; 3. A surprise polyline object appears in the hierarchy. . **Expected behavior**; No object should be created at all. **Screenshots**; Set up:; ![image](https://user-images.githubusercontent.com/29264310/85805453-34fbf800-b701-11ea-95ae-3b2463227743.png). Invisible Polyline:; ![image](https://user-images.githubusercontent.com/29264310/85805506-5f4db580-b701-11ea-9265-bc5dae3f29db.png). **Desktop (please complete the following information):**; Windows 10. ; QuPath 0.2.1 (tensorflow-cpu build).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/544
https://github.com/qupath/qupath/issues/546:159,Availability,down,downloading,159,"Hi,. I have trouble installing qupath 0.2.1 on ubuntu 20.04. I extracted the file to /Home but what do I have to do next? - I tried it several times also with downloading other packages in the past, but I forgot the steps, but I was not successful whatsoever. And I am new to Ubuntu. I was hoping there is just some ""make install"" command?. Best,; Sophia",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/546
https://github.com/qupath/qupath/issues/546:20,Deployability,install,installing,20,"Hi,. I have trouble installing qupath 0.2.1 on ubuntu 20.04. I extracted the file to /Home but what do I have to do next? - I tried it several times also with downloading other packages in the past, but I forgot the steps, but I was not successful whatsoever. And I am new to Ubuntu. I was hoping there is just some ""make install"" command?. Best,; Sophia",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/546
https://github.com/qupath/qupath/issues/546:322,Deployability,install,install,322,"Hi,. I have trouble installing qupath 0.2.1 on ubuntu 20.04. I extracted the file to /Home but what do I have to do next? - I tried it several times also with downloading other packages in the past, but I forgot the steps, but I was not successful whatsoever. And I am new to Ubuntu. I was hoping there is just some ""make install"" command?. Best,; Sophia",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/546
https://github.com/qupath/qupath/issues/549:81,Integrability,protocol,protocol,81,"## Possible bug report. **Describe the bug**. Serialization to geoJSON following protocol described in docs does not add annotation names, but only annotation class. Re-importing this geoJSON, the annotation name is lost. This may be intended behavior or a geoJSON limitation. **To Reproduce**; create annotation of arbitrary class, and add a custom name like in image below:; ![image](https://user-images.githubusercontent.com/17855764/86157253-1f0d7f00-bad5-11ea-9e65-152499d0b98e.png). Export with this script (not a java/groovy expert here..); ```groovy; import qupath.lib.gui.dialogs.Dialogs;. // Get current image data; def imageData = getCurrentImageData();; def server = imageData.getServer();. // output dir will be prompted; String out_dir = Dialogs.promptForDirectory(null). // get image name as file path; String fp = server.getURIs();; fp = fp.replace(""[file:"",""""); fp = fp[fp.lastIndexOf('/')+1..-1];; fp = fp.take(fp.lastIndexOf('.'));. fp = out_dir + '\\' + fp +'_annotations.json';. // grab annotations; def annotations = getAnnotationObjects();; boolean prettyPrint = true;. // prepare json writer; def gson = GsonTools.getInstance(prettyPrint);; String json = gson.toJson(annotations);; FileWriter writer = new FileWriter(fp);. // write to file; writer.write(json);; writer.close();; ```; produces a json like this, where proprties only contains ""Classification -> Name : test"".; ```json; [; {; ""type"": ""Feature"",; ""id"": ""PathAnnotationObject"",; ""geometry"": {; ""type"": ""Polygon"",; ""coordinates"": [; [; [1254, 4069],; [1239, 4075],; [1239, 4078],; [1236, 4078],; [1006, 4536],; [1009, 4542],; [1470, 5144],; [1473, 5138],; [1966, 5198],; [2047, 4770],; [1892, 4270],; [1889, 4267],; [1883, 4261],; [1880, 4258],; [1272, 4069],; [1254, 4069]; ]; ]; },; ""properties"": {; ""classification"": {; ""name"": ""test"",; ""colorRGB"": -8245601; },; ""isLocked"": false,; ""measurements"": []; }; }; ]; ```. Re-import annotation using like so:; ```groovy; // import libraries; import qupath.lib.io.GsonTo",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/549
https://github.com/qupath/qupath/issues/549:1391,Testability,test,test,1391,"stom name like in image below:; ![image](https://user-images.githubusercontent.com/17855764/86157253-1f0d7f00-bad5-11ea-9e65-152499d0b98e.png). Export with this script (not a java/groovy expert here..); ```groovy; import qupath.lib.gui.dialogs.Dialogs;. // Get current image data; def imageData = getCurrentImageData();; def server = imageData.getServer();. // output dir will be prompted; String out_dir = Dialogs.promptForDirectory(null). // get image name as file path; String fp = server.getURIs();; fp = fp.replace(""[file:"",""""); fp = fp[fp.lastIndexOf('/')+1..-1];; fp = fp.take(fp.lastIndexOf('.'));. fp = out_dir + '\\' + fp +'_annotations.json';. // grab annotations; def annotations = getAnnotationObjects();; boolean prettyPrint = true;. // prepare json writer; def gson = GsonTools.getInstance(prettyPrint);; String json = gson.toJson(annotations);; FileWriter writer = new FileWriter(fp);. // write to file; writer.write(json);; writer.close();; ```; produces a json like this, where proprties only contains ""Classification -> Name : test"".; ```json; [; {; ""type"": ""Feature"",; ""id"": ""PathAnnotationObject"",; ""geometry"": {; ""type"": ""Polygon"",; ""coordinates"": [; [; [1254, 4069],; [1239, 4075],; [1239, 4078],; [1236, 4078],; [1006, 4536],; [1009, 4542],; [1470, 5144],; [1473, 5138],; [1966, 5198],; [2047, 4770],; [1892, 4270],; [1889, 4267],; [1883, 4261],; [1880, 4258],; [1272, 4069],; [1254, 4069]; ]; ]; },; ""properties"": {; ""classification"": {; ""name"": ""test"",; ""colorRGB"": -8245601; },; ""isLocked"": false,; ""measurements"": []; }; }; ]; ```. Re-import annotation using like so:; ```groovy; // import libraries; import qupath.lib.io.GsonTools. // instantiate tools; def gson=GsonTools.getInstance(true);; // prepare template; def type = new com.google.gson.reflect.TypeToken<List<qupath.lib.objects.PathObject>>() {}.getType();. def json_fp = promptForFile(null); // read annotations; bufferedReader = new BufferedReader(new FileReader(json_fp));; deserializedAnnotations = gson.from",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/549
https://github.com/qupath/qupath/issues/549:1817,Testability,test,test,1817,"ntImageData();; def server = imageData.getServer();. // output dir will be prompted; String out_dir = Dialogs.promptForDirectory(null). // get image name as file path; String fp = server.getURIs();; fp = fp.replace(""[file:"",""""); fp = fp[fp.lastIndexOf('/')+1..-1];; fp = fp.take(fp.lastIndexOf('.'));. fp = out_dir + '\\' + fp +'_annotations.json';. // grab annotations; def annotations = getAnnotationObjects();; boolean prettyPrint = true;. // prepare json writer; def gson = GsonTools.getInstance(prettyPrint);; String json = gson.toJson(annotations);; FileWriter writer = new FileWriter(fp);. // write to file; writer.write(json);; writer.close();; ```; produces a json like this, where proprties only contains ""Classification -> Name : test"".; ```json; [; {; ""type"": ""Feature"",; ""id"": ""PathAnnotationObject"",; ""geometry"": {; ""type"": ""Polygon"",; ""coordinates"": [; [; [1254, 4069],; [1239, 4075],; [1239, 4078],; [1236, 4078],; [1006, 4536],; [1009, 4542],; [1470, 5144],; [1473, 5138],; [1966, 5198],; [2047, 4770],; [1892, 4270],; [1889, 4267],; [1883, 4261],; [1880, 4258],; [1272, 4069],; [1254, 4069]; ]; ]; },; ""properties"": {; ""classification"": {; ""name"": ""test"",; ""colorRGB"": -8245601; },; ""isLocked"": false,; ""measurements"": []; }; }; ]; ```. Re-import annotation using like so:; ```groovy; // import libraries; import qupath.lib.io.GsonTools. // instantiate tools; def gson=GsonTools.getInstance(true);; // prepare template; def type = new com.google.gson.reflect.TypeToken<List<qupath.lib.objects.PathObject>>() {}.getType();. def json_fp = promptForFile(null); // read annotations; bufferedReader = new BufferedReader(new FileReader(json_fp));; deserializedAnnotations = gson.fromJson(bufferedReader.text, type); . // add to dataset; addObjects(deserializedAnnotations);; ```. After removing the test annotation (to see underlying annotation)...; ![image](https://user-images.githubusercontent.com/17855764/86157573-9ba05d80-bad5-11ea-8d87-ca215b14eb4b.png). **Expected behavior**; Anno",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/549
https://github.com/qupath/qupath/issues/549:2461,Testability,test,test,2461," server.getURIs();; fp = fp.replace(""[file:"",""""); fp = fp[fp.lastIndexOf('/')+1..-1];; fp = fp.take(fp.lastIndexOf('.'));. fp = out_dir + '\\' + fp +'_annotations.json';. // grab annotations; def annotations = getAnnotationObjects();; boolean prettyPrint = true;. // prepare json writer; def gson = GsonTools.getInstance(prettyPrint);; String json = gson.toJson(annotations);; FileWriter writer = new FileWriter(fp);. // write to file; writer.write(json);; writer.close();; ```; produces a json like this, where proprties only contains ""Classification -> Name : test"".; ```json; [; {; ""type"": ""Feature"",; ""id"": ""PathAnnotationObject"",; ""geometry"": {; ""type"": ""Polygon"",; ""coordinates"": [; [; [1254, 4069],; [1239, 4075],; [1239, 4078],; [1236, 4078],; [1006, 4536],; [1009, 4542],; [1470, 5144],; [1473, 5138],; [1966, 5198],; [2047, 4770],; [1892, 4270],; [1889, 4267],; [1883, 4261],; [1880, 4258],; [1272, 4069],; [1254, 4069]; ]; ]; },; ""properties"": {; ""classification"": {; ""name"": ""test"",; ""colorRGB"": -8245601; },; ""isLocked"": false,; ""measurements"": []; }; }; ]; ```. Re-import annotation using like so:; ```groovy; // import libraries; import qupath.lib.io.GsonTools. // instantiate tools; def gson=GsonTools.getInstance(true);; // prepare template; def type = new com.google.gson.reflect.TypeToken<List<qupath.lib.objects.PathObject>>() {}.getType();. def json_fp = promptForFile(null); // read annotations; bufferedReader = new BufferedReader(new FileReader(json_fp));; deserializedAnnotations = gson.fromJson(bufferedReader.text, type); . // add to dataset; addObjects(deserializedAnnotations);; ```. After removing the test annotation (to see underlying annotation)...; ![image](https://user-images.githubusercontent.com/17855764/86157573-9ba05d80-bad5-11ea-8d87-ca215b14eb4b.png). **Expected behavior**; Annotation name is embedded/readable from geoJSON. **Screenshots**; See description. **Desktop (please complete the following information):**; - OS: Windows10; - QuPath Version 0.2.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/549
https://github.com/qupath/qupath/issues/551:86,Performance,load,load,86,"I use Qupath to export a .scn file as tiles of imageplus object and save as jpg, then load them into html pyramid browser.; ![43254234](https://user-images.githubusercontent.com/22294036/86387026-272c1100-bcc5-11ea-9aad-87823e3ed9d2.png). ```; imp = IJTools.convertToImagePlus(server, request).getImage(); IJ.save(imp, filepath)); ```. When I deal with RGB slide, it works fine.; However, when I deal with 4-channel fluorescent image, it seems that each jpg tile has its own different brightness/contrast when saving, making the whole image looks like mosaic when merged in html.; Especially in corner background, the black background was augmented to high noise. Is there something wrong, or how can I prevent it from auto-adjusting the image?. Thanks. ![152432434](https://user-images.githubusercontent.com/22294036/86386975-14194100-bcc5-11ea-8c98-bb025ab28bd4.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/551
https://github.com/qupath/qupath/issues/552:238,Security,access,access,238,"## Bug report. **Describe the bug**; Cluster features added using *Delaunay cluster features 2D* can be wrong whenever the measurement lists differ amongst objects. This happens because the measurement index (rather than name) is used to access measurements. **To Reproduce**; See https://forum.image.sc/t/cluster-mean-centroids-incorrect-in-qupath-0-2-1/40064 for details. **Expected behavior**; Cluster measurements are correct even if objects contain different measurement lists. **Additional context**; The Delaunay command is likely to be rewritten in a future version, but a short-term fix is still required.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/552
https://github.com/qupath/qupath/issues/553:469,Deployability,release,released,469,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/brush-tool-becomes-slow-after-increasing-ram-from-9-to-22gb/39979/12. **To Reproduce**; Start drawing a polygon with an enthusiastic swipe, but do not (intentionally) press and drag the mouse to activate freehand mode. You may (sometimes) find that that clicking a single point results in the polygon being ended early, rather than adding a single point, which matches what would happen if the mouse is released in freehand mode. **Expected behavior**; If freehand is not initiated by clicking and dragging the mouse from the beginning of drawing the polygon, releasing the mouse button should result only in a clicked point being added - not the completion of the annotation.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/553
https://github.com/qupath/qupath/issues/561:438,Performance,cache,cache,438,**Describe the bug**; Running (some) scripts from the command line can be substantially slower than running the same scripts from the QuPath script editor. **To Reproduce**; See https://forum.image.sc/t/cell-detection-from-command-line-script-slower-than-when-using-gui/40636. **Expected behavior**; Running a command line script is as fast/faster when compared to running the same script through the UI. **Additional context**; The tile cache is usually initialized with the GUI; tiles are not cached when running from the command line. Therefore I suspect that the lack of a tile cache may be the cause of/a contributor to the performance difference - but initial tests of this were inconclusive. It appears that avoiding the jpackage-generated launcher and instead using `java -jar qupath-0.2.1.jar ...` substantially improves performance (for reasons as yet unknown).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/561
https://github.com/qupath/qupath/issues/561:495,Performance,cache,cached,495,**Describe the bug**; Running (some) scripts from the command line can be substantially slower than running the same scripts from the QuPath script editor. **To Reproduce**; See https://forum.image.sc/t/cell-detection-from-command-line-script-slower-than-when-using-gui/40636. **Expected behavior**; Running a command line script is as fast/faster when compared to running the same script through the UI. **Additional context**; The tile cache is usually initialized with the GUI; tiles are not cached when running from the command line. Therefore I suspect that the lack of a tile cache may be the cause of/a contributor to the performance difference - but initial tests of this were inconclusive. It appears that avoiding the jpackage-generated launcher and instead using `java -jar qupath-0.2.1.jar ...` substantially improves performance (for reasons as yet unknown).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/561
https://github.com/qupath/qupath/issues/561:582,Performance,cache,cache,582,**Describe the bug**; Running (some) scripts from the command line can be substantially slower than running the same scripts from the QuPath script editor. **To Reproduce**; See https://forum.image.sc/t/cell-detection-from-command-line-script-slower-than-when-using-gui/40636. **Expected behavior**; Running a command line script is as fast/faster when compared to running the same script through the UI. **Additional context**; The tile cache is usually initialized with the GUI; tiles are not cached when running from the command line. Therefore I suspect that the lack of a tile cache may be the cause of/a contributor to the performance difference - but initial tests of this were inconclusive. It appears that avoiding the jpackage-generated launcher and instead using `java -jar qupath-0.2.1.jar ...` substantially improves performance (for reasons as yet unknown).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/561
https://github.com/qupath/qupath/issues/561:629,Performance,perform,performance,629,**Describe the bug**; Running (some) scripts from the command line can be substantially slower than running the same scripts from the QuPath script editor. **To Reproduce**; See https://forum.image.sc/t/cell-detection-from-command-line-script-slower-than-when-using-gui/40636. **Expected behavior**; Running a command line script is as fast/faster when compared to running the same script through the UI. **Additional context**; The tile cache is usually initialized with the GUI; tiles are not cached when running from the command line. Therefore I suspect that the lack of a tile cache may be the cause of/a contributor to the performance difference - but initial tests of this were inconclusive. It appears that avoiding the jpackage-generated launcher and instead using `java -jar qupath-0.2.1.jar ...` substantially improves performance (for reasons as yet unknown).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/561
https://github.com/qupath/qupath/issues/561:830,Performance,perform,performance,830,**Describe the bug**; Running (some) scripts from the command line can be substantially slower than running the same scripts from the QuPath script editor. **To Reproduce**; See https://forum.image.sc/t/cell-detection-from-command-line-script-slower-than-when-using-gui/40636. **Expected behavior**; Running a command line script is as fast/faster when compared to running the same script through the UI. **Additional context**; The tile cache is usually initialized with the GUI; tiles are not cached when running from the command line. Therefore I suspect that the lack of a tile cache may be the cause of/a contributor to the performance difference - but initial tests of this were inconclusive. It appears that avoiding the jpackage-generated launcher and instead using `java -jar qupath-0.2.1.jar ...` substantially improves performance (for reasons as yet unknown).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/561
https://github.com/qupath/qupath/issues/561:208,Safety,detect,detection-from-command-line-script-slower-than-when-using-gui,208,**Describe the bug**; Running (some) scripts from the command line can be substantially slower than running the same scripts from the QuPath script editor. **To Reproduce**; See https://forum.image.sc/t/cell-detection-from-command-line-script-slower-than-when-using-gui/40636. **Expected behavior**; Running a command line script is as fast/faster when compared to running the same script through the UI. **Additional context**; The tile cache is usually initialized with the GUI; tiles are not cached when running from the command line. Therefore I suspect that the lack of a tile cache may be the cause of/a contributor to the performance difference - but initial tests of this were inconclusive. It appears that avoiding the jpackage-generated launcher and instead using `java -jar qupath-0.2.1.jar ...` substantially improves performance (for reasons as yet unknown).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/561
https://github.com/qupath/qupath/issues/561:715,Safety,avoid,avoiding,715,**Describe the bug**; Running (some) scripts from the command line can be substantially slower than running the same scripts from the QuPath script editor. **To Reproduce**; See https://forum.image.sc/t/cell-detection-from-command-line-script-slower-than-when-using-gui/40636. **Expected behavior**; Running a command line script is as fast/faster when compared to running the same script through the UI. **Additional context**; The tile cache is usually initialized with the GUI; tiles are not cached when running from the command line. Therefore I suspect that the lack of a tile cache may be the cause of/a contributor to the performance difference - but initial tests of this were inconclusive. It appears that avoiding the jpackage-generated launcher and instead using `java -jar qupath-0.2.1.jar ...` substantially improves performance (for reasons as yet unknown).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/561
https://github.com/qupath/qupath/issues/561:666,Testability,test,tests,666,**Describe the bug**; Running (some) scripts from the command line can be substantially slower than running the same scripts from the QuPath script editor. **To Reproduce**; See https://forum.image.sc/t/cell-detection-from-command-line-script-slower-than-when-using-gui/40636. **Expected behavior**; Running a command line script is as fast/faster when compared to running the same script through the UI. **Additional context**; The tile cache is usually initialized with the GUI; tiles are not cached when running from the command line. Therefore I suspect that the lack of a tile cache may be the cause of/a contributor to the performance difference - but initial tests of this were inconclusive. It appears that avoiding the jpackage-generated launcher and instead using `java -jar qupath-0.2.1.jar ...` substantially improves performance (for reasons as yet unknown).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/561
https://github.com/qupath/qupath/pull/563:83,Performance,cache,cache,83,Support specifying an image name and a project for script subcommand.; Create tile cache when running a script.; See; * https://github.com/qupath/qupath/issues/560; * https://github.com/qupath/qupath/issues/561. (Remains to be seen whether this resolves performance issues or not...),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/563
https://github.com/qupath/qupath/pull/563:254,Performance,perform,performance,254,Support specifying an image name and a project for script subcommand.; Create tile cache when running a script.; See; * https://github.com/qupath/qupath/issues/560; * https://github.com/qupath/qupath/issues/561. (Remains to be seen whether this resolves performance issues or not...),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/563
https://github.com/qupath/qupath/issues/564:210,Performance,perform,performance,210,"## Bug report. **Describe the bug**; Calling `resolveHierarchy()` for some images with both TMA cores and detections can be extremely, unusably slow.; See https://forum.image.sc/t/resolve-hierarchy-improve-tma-performance/40705 where a time > 4 hours is reported. **To Reproduce**; Steps to reproduce the behavior:; 1. Apply dearraying to a TMA image; 2. Detect cells in the image; 3. Add annotations within cores, but not for the *full* core (i.e. allow detections inside cores but outside annotations); 4. Call *Resolve hierarchy*. It may be necessary to call *Resolve hierarchy* twice to see the issue. **Expected behavior**; The hierarchy is resolved in seconds / no more than a few minutes. **Affected version**; v0.2.1. **Additional context**; The time is spent in `ensureCacheCreated()`.; Ultimately, the performance problem occurs if 'parentless' detections need to be added [here](https://github.com/qupath/qupath/blob/c417905851de2c778573ebebff60c33b284ba82d/qupath-core/src/main/java/qupath/lib/objects/hierarchy/PathObjectHierarchy.java#L279). The cache is reset for every detection that must be added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/564
https://github.com/qupath/qupath/issues/564:812,Performance,perform,performance,812,"## Bug report. **Describe the bug**; Calling `resolveHierarchy()` for some images with both TMA cores and detections can be extremely, unusably slow.; See https://forum.image.sc/t/resolve-hierarchy-improve-tma-performance/40705 where a time > 4 hours is reported. **To Reproduce**; Steps to reproduce the behavior:; 1. Apply dearraying to a TMA image; 2. Detect cells in the image; 3. Add annotations within cores, but not for the *full* core (i.e. allow detections inside cores but outside annotations); 4. Call *Resolve hierarchy*. It may be necessary to call *Resolve hierarchy* twice to see the issue. **Expected behavior**; The hierarchy is resolved in seconds / no more than a few minutes. **Affected version**; v0.2.1. **Additional context**; The time is spent in `ensureCacheCreated()`.; Ultimately, the performance problem occurs if 'parentless' detections need to be added [here](https://github.com/qupath/qupath/blob/c417905851de2c778573ebebff60c33b284ba82d/qupath-core/src/main/java/qupath/lib/objects/hierarchy/PathObjectHierarchy.java#L279). The cache is reset for every detection that must be added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/564
https://github.com/qupath/qupath/issues/564:1060,Performance,cache,cache,1060,"## Bug report. **Describe the bug**; Calling `resolveHierarchy()` for some images with both TMA cores and detections can be extremely, unusably slow.; See https://forum.image.sc/t/resolve-hierarchy-improve-tma-performance/40705 where a time > 4 hours is reported. **To Reproduce**; Steps to reproduce the behavior:; 1. Apply dearraying to a TMA image; 2. Detect cells in the image; 3. Add annotations within cores, but not for the *full* core (i.e. allow detections inside cores but outside annotations); 4. Call *Resolve hierarchy*. It may be necessary to call *Resolve hierarchy* twice to see the issue. **Expected behavior**; The hierarchy is resolved in seconds / no more than a few minutes. **Affected version**; v0.2.1. **Additional context**; The time is spent in `ensureCacheCreated()`.; Ultimately, the performance problem occurs if 'parentless' detections need to be added [here](https://github.com/qupath/qupath/blob/c417905851de2c778573ebebff60c33b284ba82d/qupath-core/src/main/java/qupath/lib/objects/hierarchy/PathObjectHierarchy.java#L279). The cache is reset for every detection that must be added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/564
https://github.com/qupath/qupath/issues/564:106,Safety,detect,detections,106,"## Bug report. **Describe the bug**; Calling `resolveHierarchy()` for some images with both TMA cores and detections can be extremely, unusably slow.; See https://forum.image.sc/t/resolve-hierarchy-improve-tma-performance/40705 where a time > 4 hours is reported. **To Reproduce**; Steps to reproduce the behavior:; 1. Apply dearraying to a TMA image; 2. Detect cells in the image; 3. Add annotations within cores, but not for the *full* core (i.e. allow detections inside cores but outside annotations); 4. Call *Resolve hierarchy*. It may be necessary to call *Resolve hierarchy* twice to see the issue. **Expected behavior**; The hierarchy is resolved in seconds / no more than a few minutes. **Affected version**; v0.2.1. **Additional context**; The time is spent in `ensureCacheCreated()`.; Ultimately, the performance problem occurs if 'parentless' detections need to be added [here](https://github.com/qupath/qupath/blob/c417905851de2c778573ebebff60c33b284ba82d/qupath-core/src/main/java/qupath/lib/objects/hierarchy/PathObjectHierarchy.java#L279). The cache is reset for every detection that must be added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/564
https://github.com/qupath/qupath/issues/564:355,Safety,Detect,Detect,355,"## Bug report. **Describe the bug**; Calling `resolveHierarchy()` for some images with both TMA cores and detections can be extremely, unusably slow.; See https://forum.image.sc/t/resolve-hierarchy-improve-tma-performance/40705 where a time > 4 hours is reported. **To Reproduce**; Steps to reproduce the behavior:; 1. Apply dearraying to a TMA image; 2. Detect cells in the image; 3. Add annotations within cores, but not for the *full* core (i.e. allow detections inside cores but outside annotations); 4. Call *Resolve hierarchy*. It may be necessary to call *Resolve hierarchy* twice to see the issue. **Expected behavior**; The hierarchy is resolved in seconds / no more than a few minutes. **Affected version**; v0.2.1. **Additional context**; The time is spent in `ensureCacheCreated()`.; Ultimately, the performance problem occurs if 'parentless' detections need to be added [here](https://github.com/qupath/qupath/blob/c417905851de2c778573ebebff60c33b284ba82d/qupath-core/src/main/java/qupath/lib/objects/hierarchy/PathObjectHierarchy.java#L279). The cache is reset for every detection that must be added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/564
https://github.com/qupath/qupath/issues/564:455,Safety,detect,detections,455,"## Bug report. **Describe the bug**; Calling `resolveHierarchy()` for some images with both TMA cores and detections can be extremely, unusably slow.; See https://forum.image.sc/t/resolve-hierarchy-improve-tma-performance/40705 where a time > 4 hours is reported. **To Reproduce**; Steps to reproduce the behavior:; 1. Apply dearraying to a TMA image; 2. Detect cells in the image; 3. Add annotations within cores, but not for the *full* core (i.e. allow detections inside cores but outside annotations); 4. Call *Resolve hierarchy*. It may be necessary to call *Resolve hierarchy* twice to see the issue. **Expected behavior**; The hierarchy is resolved in seconds / no more than a few minutes. **Affected version**; v0.2.1. **Additional context**; The time is spent in `ensureCacheCreated()`.; Ultimately, the performance problem occurs if 'parentless' detections need to be added [here](https://github.com/qupath/qupath/blob/c417905851de2c778573ebebff60c33b284ba82d/qupath-core/src/main/java/qupath/lib/objects/hierarchy/PathObjectHierarchy.java#L279). The cache is reset for every detection that must be added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/564
https://github.com/qupath/qupath/issues/564:855,Safety,detect,detections,855,"## Bug report. **Describe the bug**; Calling `resolveHierarchy()` for some images with both TMA cores and detections can be extremely, unusably slow.; See https://forum.image.sc/t/resolve-hierarchy-improve-tma-performance/40705 where a time > 4 hours is reported. **To Reproduce**; Steps to reproduce the behavior:; 1. Apply dearraying to a TMA image; 2. Detect cells in the image; 3. Add annotations within cores, but not for the *full* core (i.e. allow detections inside cores but outside annotations); 4. Call *Resolve hierarchy*. It may be necessary to call *Resolve hierarchy* twice to see the issue. **Expected behavior**; The hierarchy is resolved in seconds / no more than a few minutes. **Affected version**; v0.2.1. **Additional context**; The time is spent in `ensureCacheCreated()`.; Ultimately, the performance problem occurs if 'parentless' detections need to be added [here](https://github.com/qupath/qupath/blob/c417905851de2c778573ebebff60c33b284ba82d/qupath-core/src/main/java/qupath/lib/objects/hierarchy/PathObjectHierarchy.java#L279). The cache is reset for every detection that must be added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/564
https://github.com/qupath/qupath/issues/564:1085,Safety,detect,detection,1085,"## Bug report. **Describe the bug**; Calling `resolveHierarchy()` for some images with both TMA cores and detections can be extremely, unusably slow.; See https://forum.image.sc/t/resolve-hierarchy-improve-tma-performance/40705 where a time > 4 hours is reported. **To Reproduce**; Steps to reproduce the behavior:; 1. Apply dearraying to a TMA image; 2. Detect cells in the image; 3. Add annotations within cores, but not for the *full* core (i.e. allow detections inside cores but outside annotations); 4. Call *Resolve hierarchy*. It may be necessary to call *Resolve hierarchy* twice to see the issue. **Expected behavior**; The hierarchy is resolved in seconds / no more than a few minutes. **Affected version**; v0.2.1. **Additional context**; The time is spent in `ensureCacheCreated()`.; Ultimately, the performance problem occurs if 'parentless' detections need to be added [here](https://github.com/qupath/qupath/blob/c417905851de2c778573ebebff60c33b284ba82d/qupath-core/src/main/java/qupath/lib/objects/hierarchy/PathObjectHierarchy.java#L279). The cache is reset for every detection that must be added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/564
https://github.com/qupath/qupath/pull/565:119,Performance,perform,performance,119,See https://github.com/qupath/qupath/issues/564; More detail at https://forum.image.sc/t/resolve-hierarchy-improve-tma-performance/40705,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/565
https://github.com/qupath/qupath/issues/567:426,Performance,Load,Load,426,"## Bug report. **Describe the bug**; Reloading a legacy RTrees classifier can give different results each time:; https://forum.image.sc/t/random-trees-detection-classifier-v-0-2-1-and-v-0-20/40795. **To Reproduce**; Steps to reproduce the behavior:; 1. Interactively train a legacy object classifier with *Create detection classifier*; 2. Save the classifier; 3. Run the classifier several times, either from a script or via *Load detection classifier* (if the latter, the file needs to be reloaded to see differences). Results of the classification will generally differ. **Expected behavior**; The classifier gives the same results each time. **Desktop (please complete the following information):**; - QuPath Version v0.2.0 and v0.2.1. **Additional context**; This is caused by a change in OpenCV: https://github.com/opencv/opencv/commit/8aebef2459af9544dc1e51bf84231bca1724738f; It is problematic because of the need to retrain classifiers in v0.1.2 because of another OpenCV bug with Java bindings at the time: https://github.com/qupath/qupath/issues/343. It can be remedied in QuPath by setting the RNG in OpenCV explicitly during training, but this doesn't guarantee the same results as were obtained when interactively classifiers in older v0.2.x versions - since the global RNG state at the time is unknown.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/567
https://github.com/qupath/qupath/issues/567:151,Safety,detect,detection-classifier-v-,151,"## Bug report. **Describe the bug**; Reloading a legacy RTrees classifier can give different results each time:; https://forum.image.sc/t/random-trees-detection-classifier-v-0-2-1-and-v-0-20/40795. **To Reproduce**; Steps to reproduce the behavior:; 1. Interactively train a legacy object classifier with *Create detection classifier*; 2. Save the classifier; 3. Run the classifier several times, either from a script or via *Load detection classifier* (if the latter, the file needs to be reloaded to see differences). Results of the classification will generally differ. **Expected behavior**; The classifier gives the same results each time. **Desktop (please complete the following information):**; - QuPath Version v0.2.0 and v0.2.1. **Additional context**; This is caused by a change in OpenCV: https://github.com/opencv/opencv/commit/8aebef2459af9544dc1e51bf84231bca1724738f; It is problematic because of the need to retrain classifiers in v0.1.2 because of another OpenCV bug with Java bindings at the time: https://github.com/qupath/qupath/issues/343. It can be remedied in QuPath by setting the RNG in OpenCV explicitly during training, but this doesn't guarantee the same results as were obtained when interactively classifiers in older v0.2.x versions - since the global RNG state at the time is unknown.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/567
https://github.com/qupath/qupath/issues/567:313,Safety,detect,detection,313,"## Bug report. **Describe the bug**; Reloading a legacy RTrees classifier can give different results each time:; https://forum.image.sc/t/random-trees-detection-classifier-v-0-2-1-and-v-0-20/40795. **To Reproduce**; Steps to reproduce the behavior:; 1. Interactively train a legacy object classifier with *Create detection classifier*; 2. Save the classifier; 3. Run the classifier several times, either from a script or via *Load detection classifier* (if the latter, the file needs to be reloaded to see differences). Results of the classification will generally differ. **Expected behavior**; The classifier gives the same results each time. **Desktop (please complete the following information):**; - QuPath Version v0.2.0 and v0.2.1. **Additional context**; This is caused by a change in OpenCV: https://github.com/opencv/opencv/commit/8aebef2459af9544dc1e51bf84231bca1724738f; It is problematic because of the need to retrain classifiers in v0.1.2 because of another OpenCV bug with Java bindings at the time: https://github.com/qupath/qupath/issues/343. It can be remedied in QuPath by setting the RNG in OpenCV explicitly during training, but this doesn't guarantee the same results as were obtained when interactively classifiers in older v0.2.x versions - since the global RNG state at the time is unknown.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/567
https://github.com/qupath/qupath/issues/567:431,Safety,detect,detection,431,"## Bug report. **Describe the bug**; Reloading a legacy RTrees classifier can give different results each time:; https://forum.image.sc/t/random-trees-detection-classifier-v-0-2-1-and-v-0-20/40795. **To Reproduce**; Steps to reproduce the behavior:; 1. Interactively train a legacy object classifier with *Create detection classifier*; 2. Save the classifier; 3. Run the classifier several times, either from a script or via *Load detection classifier* (if the latter, the file needs to be reloaded to see differences). Results of the classification will generally differ. **Expected behavior**; The classifier gives the same results each time. **Desktop (please complete the following information):**; - QuPath Version v0.2.0 and v0.2.1. **Additional context**; This is caused by a change in OpenCV: https://github.com/opencv/opencv/commit/8aebef2459af9544dc1e51bf84231bca1724738f; It is problematic because of the need to retrain classifiers in v0.1.2 because of another OpenCV bug with Java bindings at the time: https://github.com/qupath/qupath/issues/343. It can be remedied in QuPath by setting the RNG in OpenCV explicitly during training, but this doesn't guarantee the same results as were obtained when interactively classifiers in older v0.2.x versions - since the global RNG state at the time is unknown.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/567
https://github.com/qupath/qupath/issues/573:61,Safety,detect,detection,61,"## Bug report. **Describe the bug**; ""Copy to Clipboard"" for detection results fails due to NUL-Byte in text. **To Reproduce**; Steps to reproduce the behavior:; 1. Create some annotation; 2. Run cell detection; 3. Open ""Show detection measurements""; 4. Select one or multiple measurements; 5. Click on ""Copy to Clipboard""; 6. Paste into text editor; 7. Result: Headers are copied, data terminates after the content of the ""Image"" field for the first entry. In contrast: Export to file via ""Save"" works and shows that a NUL-byte is present in the ""Image"" fields - which probably interferes with the clipboard functionality. **Expected behavior**; Content in the clipboard should be identical to the one that can be obtained by saving to text via ""Save"". **Screenshots**; Copy-paste result:; ![copy-paste](https://user-images.githubusercontent.com/4951046/88553507-a6430980-d025-11ea-810f-da10d831f57e.png). Save to file result, showing NUL bytes in the Image field:; ![save-to-file](https://user-images.githubusercontent.com/4951046/88553625-c4a90500-d025-11ea-9a4d-30cb18899a44.PNG). **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.2.1. Thank you & best regards,; Simon",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/573
https://github.com/qupath/qupath/issues/573:201,Safety,detect,detection,201,"## Bug report. **Describe the bug**; ""Copy to Clipboard"" for detection results fails due to NUL-Byte in text. **To Reproduce**; Steps to reproduce the behavior:; 1. Create some annotation; 2. Run cell detection; 3. Open ""Show detection measurements""; 4. Select one or multiple measurements; 5. Click on ""Copy to Clipboard""; 6. Paste into text editor; 7. Result: Headers are copied, data terminates after the content of the ""Image"" field for the first entry. In contrast: Export to file via ""Save"" works and shows that a NUL-byte is present in the ""Image"" fields - which probably interferes with the clipboard functionality. **Expected behavior**; Content in the clipboard should be identical to the one that can be obtained by saving to text via ""Save"". **Screenshots**; Copy-paste result:; ![copy-paste](https://user-images.githubusercontent.com/4951046/88553507-a6430980-d025-11ea-810f-da10d831f57e.png). Save to file result, showing NUL bytes in the Image field:; ![save-to-file](https://user-images.githubusercontent.com/4951046/88553625-c4a90500-d025-11ea-9a4d-30cb18899a44.PNG). **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.2.1. Thank you & best regards,; Simon",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/573
https://github.com/qupath/qupath/issues/573:226,Safety,detect,detection,226,"## Bug report. **Describe the bug**; ""Copy to Clipboard"" for detection results fails due to NUL-Byte in text. **To Reproduce**; Steps to reproduce the behavior:; 1. Create some annotation; 2. Run cell detection; 3. Open ""Show detection measurements""; 4. Select one or multiple measurements; 5. Click on ""Copy to Clipboard""; 6. Paste into text editor; 7. Result: Headers are copied, data terminates after the content of the ""Image"" field for the first entry. In contrast: Export to file via ""Save"" works and shows that a NUL-byte is present in the ""Image"" fields - which probably interferes with the clipboard functionality. **Expected behavior**; Content in the clipboard should be identical to the one that can be obtained by saving to text via ""Save"". **Screenshots**; Copy-paste result:; ![copy-paste](https://user-images.githubusercontent.com/4951046/88553507-a6430980-d025-11ea-810f-da10d831f57e.png). Save to file result, showing NUL bytes in the Image field:; ![save-to-file](https://user-images.githubusercontent.com/4951046/88553625-c4a90500-d025-11ea-9a4d-30cb18899a44.PNG). **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.2.1. Thank you & best regards,; Simon",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/573
https://github.com/qupath/qupath/pull/580:115,Modifiability,extend,extend,115,"Switch to using libtensorflow rather than JavaCPP version, which somewhat simplifies the code to make it easier to extend in the future.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/580
https://github.com/qupath/qupath/pull/580:74,Usability,simpl,simplifies,74,"Switch to using libtensorflow rather than JavaCPP version, which somewhat simplifies the code to make it easier to extend in the future.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/580
https://github.com/qupath/qupath/pull/581:115,Modifiability,extend,extend,115,"Switch to using libtensorflow rather than JavaCPP version, which somewhat simplifies the code to make it easier to extend in the future.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/581
https://github.com/qupath/qupath/pull/581:74,Usability,simpl,simplifies,74,"Switch to using libtensorflow rather than JavaCPP version, which somewhat simplifies the code to make it easier to extend in the future.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/581
https://github.com/qupath/qupath/issues/582:440,Deployability,install,install,440,"**Describe the bug**; In QuPath 0.2.2, the maximum memory setting (Help > Show Setup Options > Maximum Memory) does not save/recall my input. It goes back to half my ram every time, no matter what I type. It loses it after a restart, or even if I open that menu again immediately after hitting Apply. . **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.2.2, tested on both the .zip and the .msi install",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/582
https://github.com/qupath/qupath/issues/582:403,Testability,test,tested,403,"**Describe the bug**; In QuPath 0.2.2, the maximum memory setting (Help > Show Setup Options > Maximum Memory) does not save/recall my input. It goes back to half my ram every time, no matter what I type. It loses it after a restart, or even if I open that menu again immediately after hitting Apply. . **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.2.2, tested on both the .zip and the .msi install",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/582
https://github.com/qupath/qupath/pull/586:188,Availability,error,errors,188,See https://github.com/locationtech/jts/issues/571; This manifest itself in *sometimes* failing on the ObservableMeasurementTableDataTest due to incorrect object counts being returned. No errors could be reproduced if the locator was initialized before any parallel stream.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/586
https://github.com/qupath/qupath/issues/587:177,Availability,error,error-message,177,"## Bug report. **Describe the bug**; Cell expansion (including nucleus size constraint) can fail due to a TopologyException. See:; * https://forum.image.sc/t/stardist-in-qupath-error-message/41242; * https://forum.image.sc/t/topologyexception-found-non-noded-intersection-between-linestring/38549. **To Reproduce**; Hard to reproduce... but depends upon running StarDist cell detection in QuPath v0.2.2 with cell expansion set. Fails intermittently. **Expected behavior**; A single cell failure doesn't cause everything to break down. **Additional context**; Adding in validity checks along the way risks having a substantial performance impact in the majority of cases that *do* work fine, so a more graceful recovery from errors may be sufficient.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/587
https://github.com/qupath/qupath/issues/587:487,Availability,failure,failure,487,"## Bug report. **Describe the bug**; Cell expansion (including nucleus size constraint) can fail due to a TopologyException. See:; * https://forum.image.sc/t/stardist-in-qupath-error-message/41242; * https://forum.image.sc/t/topologyexception-found-non-noded-intersection-between-linestring/38549. **To Reproduce**; Hard to reproduce... but depends upon running StarDist cell detection in QuPath v0.2.2 with cell expansion set. Fails intermittently. **Expected behavior**; A single cell failure doesn't cause everything to break down. **Additional context**; Adding in validity checks along the way risks having a substantial performance impact in the majority of cases that *do* work fine, so a more graceful recovery from errors may be sufficient.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/587
https://github.com/qupath/qupath/issues/587:529,Availability,down,down,529,"## Bug report. **Describe the bug**; Cell expansion (including nucleus size constraint) can fail due to a TopologyException. See:; * https://forum.image.sc/t/stardist-in-qupath-error-message/41242; * https://forum.image.sc/t/topologyexception-found-non-noded-intersection-between-linestring/38549. **To Reproduce**; Hard to reproduce... but depends upon running StarDist cell detection in QuPath v0.2.2 with cell expansion set. Fails intermittently. **Expected behavior**; A single cell failure doesn't cause everything to break down. **Additional context**; Adding in validity checks along the way risks having a substantial performance impact in the majority of cases that *do* work fine, so a more graceful recovery from errors may be sufficient.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/587
https://github.com/qupath/qupath/issues/587:710,Availability,recover,recovery,710,"## Bug report. **Describe the bug**; Cell expansion (including nucleus size constraint) can fail due to a TopologyException. See:; * https://forum.image.sc/t/stardist-in-qupath-error-message/41242; * https://forum.image.sc/t/topologyexception-found-non-noded-intersection-between-linestring/38549. **To Reproduce**; Hard to reproduce... but depends upon running StarDist cell detection in QuPath v0.2.2 with cell expansion set. Fails intermittently. **Expected behavior**; A single cell failure doesn't cause everything to break down. **Additional context**; Adding in validity checks along the way risks having a substantial performance impact in the majority of cases that *do* work fine, so a more graceful recovery from errors may be sufficient.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/587
https://github.com/qupath/qupath/issues/587:724,Availability,error,errors,724,"## Bug report. **Describe the bug**; Cell expansion (including nucleus size constraint) can fail due to a TopologyException. See:; * https://forum.image.sc/t/stardist-in-qupath-error-message/41242; * https://forum.image.sc/t/topologyexception-found-non-noded-intersection-between-linestring/38549. **To Reproduce**; Hard to reproduce... but depends upon running StarDist cell detection in QuPath v0.2.2 with cell expansion set. Fails intermittently. **Expected behavior**; A single cell failure doesn't cause everything to break down. **Additional context**; Adding in validity checks along the way risks having a substantial performance impact in the majority of cases that *do* work fine, so a more graceful recovery from errors may be sufficient.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/587
https://github.com/qupath/qupath/issues/587:183,Integrability,message,message,183,"## Bug report. **Describe the bug**; Cell expansion (including nucleus size constraint) can fail due to a TopologyException. See:; * https://forum.image.sc/t/stardist-in-qupath-error-message/41242; * https://forum.image.sc/t/topologyexception-found-non-noded-intersection-between-linestring/38549. **To Reproduce**; Hard to reproduce... but depends upon running StarDist cell detection in QuPath v0.2.2 with cell expansion set. Fails intermittently. **Expected behavior**; A single cell failure doesn't cause everything to break down. **Additional context**; Adding in validity checks along the way risks having a substantial performance impact in the majority of cases that *do* work fine, so a more graceful recovery from errors may be sufficient.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/587
https://github.com/qupath/qupath/issues/587:341,Integrability,depend,depends,341,"## Bug report. **Describe the bug**; Cell expansion (including nucleus size constraint) can fail due to a TopologyException. See:; * https://forum.image.sc/t/stardist-in-qupath-error-message/41242; * https://forum.image.sc/t/topologyexception-found-non-noded-intersection-between-linestring/38549. **To Reproduce**; Hard to reproduce... but depends upon running StarDist cell detection in QuPath v0.2.2 with cell expansion set. Fails intermittently. **Expected behavior**; A single cell failure doesn't cause everything to break down. **Additional context**; Adding in validity checks along the way risks having a substantial performance impact in the majority of cases that *do* work fine, so a more graceful recovery from errors may be sufficient.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/587
https://github.com/qupath/qupath/issues/587:626,Performance,perform,performance,626,"## Bug report. **Describe the bug**; Cell expansion (including nucleus size constraint) can fail due to a TopologyException. See:; * https://forum.image.sc/t/stardist-in-qupath-error-message/41242; * https://forum.image.sc/t/topologyexception-found-non-noded-intersection-between-linestring/38549. **To Reproduce**; Hard to reproduce... but depends upon running StarDist cell detection in QuPath v0.2.2 with cell expansion set. Fails intermittently. **Expected behavior**; A single cell failure doesn't cause everything to break down. **Additional context**; Adding in validity checks along the way risks having a substantial performance impact in the majority of cases that *do* work fine, so a more graceful recovery from errors may be sufficient.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/587
https://github.com/qupath/qupath/issues/587:376,Safety,detect,detection,376,"## Bug report. **Describe the bug**; Cell expansion (including nucleus size constraint) can fail due to a TopologyException. See:; * https://forum.image.sc/t/stardist-in-qupath-error-message/41242; * https://forum.image.sc/t/topologyexception-found-non-noded-intersection-between-linestring/38549. **To Reproduce**; Hard to reproduce... but depends upon running StarDist cell detection in QuPath v0.2.2 with cell expansion set. Fails intermittently. **Expected behavior**; A single cell failure doesn't cause everything to break down. **Additional context**; Adding in validity checks along the way risks having a substantial performance impact in the majority of cases that *do* work fine, so a more graceful recovery from errors may be sufficient.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/587
https://github.com/qupath/qupath/issues/587:599,Safety,risk,risks,599,"## Bug report. **Describe the bug**; Cell expansion (including nucleus size constraint) can fail due to a TopologyException. See:; * https://forum.image.sc/t/stardist-in-qupath-error-message/41242; * https://forum.image.sc/t/topologyexception-found-non-noded-intersection-between-linestring/38549. **To Reproduce**; Hard to reproduce... but depends upon running StarDist cell detection in QuPath v0.2.2 with cell expansion set. Fails intermittently. **Expected behavior**; A single cell failure doesn't cause everything to break down. **Additional context**; Adding in validity checks along the way risks having a substantial performance impact in the majority of cases that *do* work fine, so a more graceful recovery from errors may be sufficient.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/587
https://github.com/qupath/qupath/issues/587:710,Safety,recover,recovery,710,"## Bug report. **Describe the bug**; Cell expansion (including nucleus size constraint) can fail due to a TopologyException. See:; * https://forum.image.sc/t/stardist-in-qupath-error-message/41242; * https://forum.image.sc/t/topologyexception-found-non-noded-intersection-between-linestring/38549. **To Reproduce**; Hard to reproduce... but depends upon running StarDist cell detection in QuPath v0.2.2 with cell expansion set. Fails intermittently. **Expected behavior**; A single cell failure doesn't cause everything to break down. **Additional context**; Adding in validity checks along the way risks having a substantial performance impact in the majority of cases that *do* work fine, so a more graceful recovery from errors may be sufficient.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/587
https://github.com/qupath/qupath/pull/588:145,Availability,recover,recover,145,"See https://github.com/qupath/qupath/issues/587; These changes don't correct cells that 'go wrong' (with TopologyExceptions), but instead try to recover more gracefully - so that *all* cells are not lost.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/588
https://github.com/qupath/qupath/pull/588:145,Safety,recover,recover,145,"See https://github.com/qupath/qupath/issues/587; These changes don't correct cells that 'go wrong' (with TopologyExceptions), but instead try to recover more gracefully - so that *all* cells are not lost.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/588
https://github.com/qupath/qupath/pull/590:56,Testability,log,logic,56,"Introduces new ContourTracing class, which removed some logic from PixelClassifierTools so that it may be used more easily in other contexts.; Revised how areas are converted to geometries to use Polygonizer rather than a custom attempt to resolve polygons and holes, and added new tests.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/590
https://github.com/qupath/qupath/pull/590:282,Testability,test,tests,282,"Introduces new ContourTracing class, which removed some logic from PixelClassifierTools so that it may be used more easily in other contexts.; Revised how areas are converted to geometries to use Polygonizer rather than a custom attempt to resolve polygons and holes, and added new tests.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/590
https://github.com/qupath/qupath/issues/591:1659,Availability,down,downsample,1659,"image tab is stored. . **To Reproduce**; Steps to reproduce the behavior:; 1. Load any png or jpg; 2. Change the pixel size in the image tab to a number; 3. Run this code: . ```; import qupath.lib.images.servers.ImageServer; import qupath.lib.objects.classes.PathClassFactory. import java.awt.image.BufferedImage. import static qupath.lib.gui.scripting.QPEx.*. def imageData=getCurrentImageData(); Map<PathClass, Integer> labels = new LinkedHashMap<>();; int label = 1; labels.put(PathClassFactory.getPathClassUnclassified(), label++);; for (def annotation : imageData.getHierarchy().getAnnotationObjects()) {; def pathClass = annotation.getPathClass();; if (pathClass != null && !labels.containsKey(pathClass)); labels.put(pathClass, label++);; }. for (def annotation : imageData.getHierarchy().getAnnotationObjects()) {; def pathClass = annotation.getPathClass();; if (pathClass != null && !labels.containsKey(pathClass)); labels.put(pathClass, label++);; }. double downsample=1; ImageServer<BufferedImage> server = new LabeledImageServer.Builder(imageData); .backgroundLabel(0); .addLabels(labels); .downsample(downsample); .build();. print('Original Image Server'); print(imageData.getServer().getPixelCalibration().getAveragedPixelSize()); print(imageData.getServer().getPixelCalibration().getPixelWidthUnit()); print(imageData.getServer().getPixelCalibration().getAveragedPixelSizeMicrons()). print('Labeled Image Server'); print(server.getPixelCalibration().getAveragedPixelSize()); print(server.getPixelCalibration().getPixelWidthUnit()); print(server.getPixelCalibration().getAveragedPixelSizeMicrons()); ```. **Expected behavior**; The labeled image server should know the pixel calibration input in the image tab. . **Screenshots**; If applicable, add screenshots to help explain your problem.; ![image](https://user-images.githubusercontent.com/29264310/90062797-16e05c00-dc9d-11ea-978b-4c321ce7dffb.png). **Desktop (please complete the following information):**; - Windows 10; - QuPath 0.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/591
https://github.com/qupath/qupath/issues/591:1794,Availability,down,downsample,1794,"1. Load any png or jpg; 2. Change the pixel size in the image tab to a number; 3. Run this code: . ```; import qupath.lib.images.servers.ImageServer; import qupath.lib.objects.classes.PathClassFactory. import java.awt.image.BufferedImage. import static qupath.lib.gui.scripting.QPEx.*. def imageData=getCurrentImageData(); Map<PathClass, Integer> labels = new LinkedHashMap<>();; int label = 1; labels.put(PathClassFactory.getPathClassUnclassified(), label++);; for (def annotation : imageData.getHierarchy().getAnnotationObjects()) {; def pathClass = annotation.getPathClass();; if (pathClass != null && !labels.containsKey(pathClass)); labels.put(pathClass, label++);; }. for (def annotation : imageData.getHierarchy().getAnnotationObjects()) {; def pathClass = annotation.getPathClass();; if (pathClass != null && !labels.containsKey(pathClass)); labels.put(pathClass, label++);; }. double downsample=1; ImageServer<BufferedImage> server = new LabeledImageServer.Builder(imageData); .backgroundLabel(0); .addLabels(labels); .downsample(downsample); .build();. print('Original Image Server'); print(imageData.getServer().getPixelCalibration().getAveragedPixelSize()); print(imageData.getServer().getPixelCalibration().getPixelWidthUnit()); print(imageData.getServer().getPixelCalibration().getAveragedPixelSizeMicrons()). print('Labeled Image Server'); print(server.getPixelCalibration().getAveragedPixelSize()); print(server.getPixelCalibration().getPixelWidthUnit()); print(server.getPixelCalibration().getAveragedPixelSizeMicrons()); ```. **Expected behavior**; The labeled image server should know the pixel calibration input in the image tab. . **Screenshots**; If applicable, add screenshots to help explain your problem.; ![image](https://user-images.githubusercontent.com/29264310/90062797-16e05c00-dc9d-11ea-978b-4c321ce7dffb.png). **Desktop (please complete the following information):**; - Windows 10; - QuPath 0.2.2. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/591
https://github.com/qupath/qupath/issues/591:1805,Availability,down,downsample,1805,"1. Load any png or jpg; 2. Change the pixel size in the image tab to a number; 3. Run this code: . ```; import qupath.lib.images.servers.ImageServer; import qupath.lib.objects.classes.PathClassFactory. import java.awt.image.BufferedImage. import static qupath.lib.gui.scripting.QPEx.*. def imageData=getCurrentImageData(); Map<PathClass, Integer> labels = new LinkedHashMap<>();; int label = 1; labels.put(PathClassFactory.getPathClassUnclassified(), label++);; for (def annotation : imageData.getHierarchy().getAnnotationObjects()) {; def pathClass = annotation.getPathClass();; if (pathClass != null && !labels.containsKey(pathClass)); labels.put(pathClass, label++);; }. for (def annotation : imageData.getHierarchy().getAnnotationObjects()) {; def pathClass = annotation.getPathClass();; if (pathClass != null && !labels.containsKey(pathClass)); labels.put(pathClass, label++);; }. double downsample=1; ImageServer<BufferedImage> server = new LabeledImageServer.Builder(imageData); .backgroundLabel(0); .addLabels(labels); .downsample(downsample); .build();. print('Original Image Server'); print(imageData.getServer().getPixelCalibration().getAveragedPixelSize()); print(imageData.getServer().getPixelCalibration().getPixelWidthUnit()); print(imageData.getServer().getPixelCalibration().getAveragedPixelSizeMicrons()). print('Labeled Image Server'); print(server.getPixelCalibration().getAveragedPixelSize()); print(server.getPixelCalibration().getPixelWidthUnit()); print(server.getPixelCalibration().getAveragedPixelSizeMicrons()); ```. **Expected behavior**; The labeled image server should know the pixel calibration input in the image tab. . **Screenshots**; If applicable, add screenshots to help explain your problem.; ![image](https://user-images.githubusercontent.com/29264310/90062797-16e05c00-dc9d-11ea-978b-4c321ce7dffb.png). **Desktop (please complete the following information):**; - Windows 10; - QuPath 0.2.2. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/591
https://github.com/qupath/qupath/issues/591:769,Performance,Load,Load,769,"**Describe the bug**; I'm working with PNG images that do not store pixel size in their metadata. I manually input the correct pixel size (50 um) into the Image tab. If I call the pixel calibration from the image server, it returns the correct value. But, when I build a LabeledImageServer, it loses the pixel size and units, and instead returns that the calibration equal 1px. I've also tried overwriting the pixel calibration of a tiff file that has it stored in the metadata, and the Labeled Image Server continues to return the original pixel size. It seems that somewhere along the way, the labeled image server builder calls the real file metadata, not wherever the information in the image tab is stored. . **To Reproduce**; Steps to reproduce the behavior:; 1. Load any png or jpg; 2. Change the pixel size in the image tab to a number; 3. Run this code: . ```; import qupath.lib.images.servers.ImageServer; import qupath.lib.objects.classes.PathClassFactory. import java.awt.image.BufferedImage. import static qupath.lib.gui.scripting.QPEx.*. def imageData=getCurrentImageData(); Map<PathClass, Integer> labels = new LinkedHashMap<>();; int label = 1; labels.put(PathClassFactory.getPathClassUnclassified(), label++);; for (def annotation : imageData.getHierarchy().getAnnotationObjects()) {; def pathClass = annotation.getPathClass();; if (pathClass != null && !labels.containsKey(pathClass)); labels.put(pathClass, label++);; }. for (def annotation : imageData.getHierarchy().getAnnotationObjects()) {; def pathClass = annotation.getPathClass();; if (pathClass != null && !labels.containsKey(pathClass)); labels.put(pathClass, label++);; }. double downsample=1; ImageServer<BufferedImage> server = new LabeledImageServer.Builder(imageData); .backgroundLabel(0); .addLabels(labels); .downsample(downsample); .build();. print('Original Image Server'); print(imageData.getServer().getPixelCalibration().getAveragedPixelSize()); print(imageData.getServer().getPixelCalibration().getPixelWidthUn",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/591
https://github.com/qupath/qupath/issues/592:518,Performance,load,load,518,"## Bug report. **Describe the bug**; Adding an existing .qpdata file to project is a difficult, confusing and buggy process. Basically, it doesn't really work because by default QuPath saves to the path stored in the `ImageData` rather than to the path required for saving the data in the project. See https://forum.image.sc/t/qpdata-file-in-a-project/41520. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project; 2. Add an *existing* .qpdata file from some other source. The data and objects should load as normal.; 3. Open another image; 4. Return to the original image. The data and objects are lost. **Expected behavior**; No surprises. Either the data is retained, or the operation is not permitted.; Ideally, the data would be copied to the project. **Desktop (please complete the following information):**; - QuPath v0.2.2 and earlier. **Additional context**; I've written a gist to help resolve this for now: https://gist.github.com/petebankhead/c9f6aed95b38996b2380b09134f2251b",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/592
https://github.com/qupath/qupath/issues/593:1036,Deployability,update,updated,1036,"## Bug report. **Describe the bug**; When using *Export measurements*, the image name from the server metadata is used - not from the project.; This is unexpected from a user perspective, and can make measurements harder to decipher. See https://forum.image.sc/t/pyramindal-scn-files-disarranged-when-opened/41613. **To Reproduce**; Steps to reproduce the behavior:; 1. Change the name of an image in a project; 2. Use *Export measurements* to export measurements; 3. Check the output file... the first column contains the original image name, not the one changed in the project. **Expected behavior**; Image names are consistent, and it is possible for users to control which image name is export in measurement tables. **Desktop (please complete the following information):**; - QuPath v0.2.x. **Additional context**; I've written a gist as a potential (temporary) workaround: https://gist.github.com/petebankhead/d5a2ed5e6b40ffbe9817db19300eca5d. At this point, it's not 100% clear to me whether the server metadata should always be updated to match the project image name, or if rather the export should be updated to get the name from the entry. But in any case, the current behavior should change in a future version.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/593
https://github.com/qupath/qupath/issues/593:1111,Deployability,update,updated,1111,"## Bug report. **Describe the bug**; When using *Export measurements*, the image name from the server metadata is used - not from the project.; This is unexpected from a user perspective, and can make measurements harder to decipher. See https://forum.image.sc/t/pyramindal-scn-files-disarranged-when-opened/41613. **To Reproduce**; Steps to reproduce the behavior:; 1. Change the name of an image in a project; 2. Use *Export measurements* to export measurements; 3. Check the output file... the first column contains the original image name, not the one changed in the project. **Expected behavior**; Image names are consistent, and it is possible for users to control which image name is export in measurement tables. **Desktop (please complete the following information):**; - QuPath v0.2.x. **Additional context**; I've written a gist as a potential (temporary) workaround: https://gist.github.com/petebankhead/d5a2ed5e6b40ffbe9817db19300eca5d. At this point, it's not 100% clear to me whether the server metadata should always be updated to match the project image name, or if rather the export should be updated to get the name from the entry. But in any case, the current behavior should change in a future version.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/593
https://github.com/qupath/qupath/issues/593:979,Usability,clear,clear,979,"## Bug report. **Describe the bug**; When using *Export measurements*, the image name from the server metadata is used - not from the project.; This is unexpected from a user perspective, and can make measurements harder to decipher. See https://forum.image.sc/t/pyramindal-scn-files-disarranged-when-opened/41613. **To Reproduce**; Steps to reproduce the behavior:; 1. Change the name of an image in a project; 2. Use *Export measurements* to export measurements; 3. Check the output file... the first column contains the original image name, not the one changed in the project. **Expected behavior**; Image names are consistent, and it is possible for users to control which image name is export in measurement tables. **Desktop (please complete the following information):**; - QuPath v0.2.x. **Additional context**; I've written a gist as a potential (temporary) workaround: https://gist.github.com/petebankhead/d5a2ed5e6b40ffbe9817db19300eca5d. At this point, it's not 100% clear to me whether the server metadata should always be updated to match the project image name, or if rather the export should be updated to get the name from the entry. But in any case, the current behavior should change in a future version.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/593
https://github.com/qupath/qupath/issues/594:619,Availability,error,error-too-many-open-files,619,"## Bug report. **Describe the bug**. The following code in `FileResourceManager` leaves an open connection to the directory:; ```java; return Files.list(path); 	.filter(p -> Files.isRegularFile(p) && p.toString().endsWith(ext)); 	.collect(Collectors.toMap(p -> nameWithoutExtension(p, ext), p -> p));; ```. It was expected that the `collect` terminal operation would close the connection... it it [seems it does not](https://stackoverflow.com/questions/27381329/do-terminal-operations-on-streams-close-the-source). This causes real-world problems when running scripts for many images, e.g. see https://forum.image.sc/t/error-too-many-open-files/41628. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a pixel or object classifier; 2. Run a script using `loadPixelClassifier('Anything')`; 3. Check for open files... on macOS this can be through `Activity monitor` or `lsof`. Each time the script is called, the directory containing the pixel classifiers is left open. **Expected behavior**; Directories aren't left open unnecessarily. **Desktop (please complete the following information):**; - QuPath v0.2 -- most problematic on Linux, where the number of open files is limited. **Additional context**; The error can be easily fixed by using the following code instead:; ```java; try (var stream = Files.list(path)) {; 	return stream.filter(p -> Files.isRegularFile(p) && p.toString().endsWith(ext)); 		.collect(Collectors.toMap(p -> nameWithoutExtension(p, ext), p -> p));; }; ```; However, the code should be checked for other instances of this pattern. Also, `DefaultProject` should perhaps cache resource managers rather than creating them anew on each request.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/594
https://github.com/qupath/qupath/issues/594:1220,Availability,error,error,1220,"## Bug report. **Describe the bug**. The following code in `FileResourceManager` leaves an open connection to the directory:; ```java; return Files.list(path); 	.filter(p -> Files.isRegularFile(p) && p.toString().endsWith(ext)); 	.collect(Collectors.toMap(p -> nameWithoutExtension(p, ext), p -> p));; ```. It was expected that the `collect` terminal operation would close the connection... it it [seems it does not](https://stackoverflow.com/questions/27381329/do-terminal-operations-on-streams-close-the-source). This causes real-world problems when running scripts for many images, e.g. see https://forum.image.sc/t/error-too-many-open-files/41628. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a pixel or object classifier; 2. Run a script using `loadPixelClassifier('Anything')`; 3. Check for open files... on macOS this can be through `Activity monitor` or `lsof`. Each time the script is called, the directory containing the pixel classifiers is left open. **Expected behavior**; Directories aren't left open unnecessarily. **Desktop (please complete the following information):**; - QuPath v0.2 -- most problematic on Linux, where the number of open files is limited. **Additional context**; The error can be easily fixed by using the following code instead:; ```java; try (var stream = Files.list(path)) {; 	return stream.filter(p -> Files.isRegularFile(p) && p.toString().endsWith(ext)); 		.collect(Collectors.toMap(p -> nameWithoutExtension(p, ext), p -> p));; }; ```; However, the code should be checked for other instances of this pattern. Also, `DefaultProject` should perhaps cache resource managers rather than creating them anew on each request.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/594
https://github.com/qupath/qupath/issues/594:867,Energy Efficiency,monitor,monitor,867,"## Bug report. **Describe the bug**. The following code in `FileResourceManager` leaves an open connection to the directory:; ```java; return Files.list(path); 	.filter(p -> Files.isRegularFile(p) && p.toString().endsWith(ext)); 	.collect(Collectors.toMap(p -> nameWithoutExtension(p, ext), p -> p));; ```. It was expected that the `collect` terminal operation would close the connection... it it [seems it does not](https://stackoverflow.com/questions/27381329/do-terminal-operations-on-streams-close-the-source). This causes real-world problems when running scripts for many images, e.g. see https://forum.image.sc/t/error-too-many-open-files/41628. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a pixel or object classifier; 2. Run a script using `loadPixelClassifier('Anything')`; 3. Check for open files... on macOS this can be through `Activity monitor` or `lsof`. Each time the script is called, the directory containing the pixel classifiers is left open. **Expected behavior**; Directories aren't left open unnecessarily. **Desktop (please complete the following information):**; - QuPath v0.2 -- most problematic on Linux, where the number of open files is limited. **Additional context**; The error can be easily fixed by using the following code instead:; ```java; try (var stream = Files.list(path)) {; 	return stream.filter(p -> Files.isRegularFile(p) && p.toString().endsWith(ext)); 		.collect(Collectors.toMap(p -> nameWithoutExtension(p, ext), p -> p));; }; ```; However, the code should be checked for other instances of this pattern. Also, `DefaultProject` should perhaps cache resource managers rather than creating them anew on each request.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/594
https://github.com/qupath/qupath/issues/594:767,Performance,load,loadPixelClassifier,767,"## Bug report. **Describe the bug**. The following code in `FileResourceManager` leaves an open connection to the directory:; ```java; return Files.list(path); 	.filter(p -> Files.isRegularFile(p) && p.toString().endsWith(ext)); 	.collect(Collectors.toMap(p -> nameWithoutExtension(p, ext), p -> p));; ```. It was expected that the `collect` terminal operation would close the connection... it it [seems it does not](https://stackoverflow.com/questions/27381329/do-terminal-operations-on-streams-close-the-source). This causes real-world problems when running scripts for many images, e.g. see https://forum.image.sc/t/error-too-many-open-files/41628. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a pixel or object classifier; 2. Run a script using `loadPixelClassifier('Anything')`; 3. Check for open files... on macOS this can be through `Activity monitor` or `lsof`. Each time the script is called, the directory containing the pixel classifiers is left open. **Expected behavior**; Directories aren't left open unnecessarily. **Desktop (please complete the following information):**; - QuPath v0.2 -- most problematic on Linux, where the number of open files is limited. **Additional context**; The error can be easily fixed by using the following code instead:; ```java; try (var stream = Files.list(path)) {; 	return stream.filter(p -> Files.isRegularFile(p) && p.toString().endsWith(ext)); 		.collect(Collectors.toMap(p -> nameWithoutExtension(p, ext), p -> p));; }; ```; However, the code should be checked for other instances of this pattern. Also, `DefaultProject` should perhaps cache resource managers rather than creating them anew on each request.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/594
https://github.com/qupath/qupath/issues/594:1607,Performance,cache,cache,1607,"## Bug report. **Describe the bug**. The following code in `FileResourceManager` leaves an open connection to the directory:; ```java; return Files.list(path); 	.filter(p -> Files.isRegularFile(p) && p.toString().endsWith(ext)); 	.collect(Collectors.toMap(p -> nameWithoutExtension(p, ext), p -> p));; ```. It was expected that the `collect` terminal operation would close the connection... it it [seems it does not](https://stackoverflow.com/questions/27381329/do-terminal-operations-on-streams-close-the-source). This causes real-world problems when running scripts for many images, e.g. see https://forum.image.sc/t/error-too-many-open-files/41628. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a pixel or object classifier; 2. Run a script using `loadPixelClassifier('Anything')`; 3. Check for open files... on macOS this can be through `Activity monitor` or `lsof`. Each time the script is called, the directory containing the pixel classifiers is left open. **Expected behavior**; Directories aren't left open unnecessarily. **Desktop (please complete the following information):**; - QuPath v0.2 -- most problematic on Linux, where the number of open files is limited. **Additional context**; The error can be easily fixed by using the following code instead:; ```java; try (var stream = Files.list(path)) {; 	return stream.filter(p -> Files.isRegularFile(p) && p.toString().endsWith(ext)); 		.collect(Collectors.toMap(p -> nameWithoutExtension(p, ext), p -> p));; }; ```; However, the code should be checked for other instances of this pattern. Also, `DefaultProject` should perhaps cache resource managers rather than creating them anew on each request.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/594
https://github.com/qupath/qupath/issues/595:37,Availability,Error,Error,37,"## Bug report. **Describe the bug**; Error message with 'Locked status cannot be set!' when trying to add pixel classifier measurements to a full image (rather than annotations or detections). **To Reproduce**; Steps to reproduce the behavior:; 1. Create and save pixel classifier or thresholder; 2. Request adding measurements everywhere. **Expected behavior**; No attempt is made to lock the 'Image' (root) object, and no error is shown. **Desktop (please complete the following information):**; - QuPath v.0.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/595
https://github.com/qupath/qupath/issues/595:424,Availability,error,error,424,"## Bug report. **Describe the bug**; Error message with 'Locked status cannot be set!' when trying to add pixel classifier measurements to a full image (rather than annotations or detections). **To Reproduce**; Steps to reproduce the behavior:; 1. Create and save pixel classifier or thresholder; 2. Request adding measurements everywhere. **Expected behavior**; No attempt is made to lock the 'Image' (root) object, and no error is shown. **Desktop (please complete the following information):**; - QuPath v.0.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/595
https://github.com/qupath/qupath/issues/595:43,Integrability,message,message,43,"## Bug report. **Describe the bug**; Error message with 'Locked status cannot be set!' when trying to add pixel classifier measurements to a full image (rather than annotations or detections). **To Reproduce**; Steps to reproduce the behavior:; 1. Create and save pixel classifier or thresholder; 2. Request adding measurements everywhere. **Expected behavior**; No attempt is made to lock the 'Image' (root) object, and no error is shown. **Desktop (please complete the following information):**; - QuPath v.0.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/595
https://github.com/qupath/qupath/issues/595:180,Safety,detect,detections,180,"## Bug report. **Describe the bug**; Error message with 'Locked status cannot be set!' when trying to add pixel classifier measurements to a full image (rather than annotations or detections). **To Reproduce**; Steps to reproduce the behavior:; 1. Create and save pixel classifier or thresholder; 2. Request adding measurements everywhere. **Expected behavior**; No attempt is made to lock the 'Image' (root) object, and no error is shown. **Desktop (please complete the following information):**; - QuPath v.0.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/595
https://github.com/qupath/qupath/issues/598:1149,Availability,redundant,redundant,1149,"## Bug report. **Describe the bug**; .qpdata files corresponding to OMERO images cannot be opened directly, but rather *only* via a project. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image hosted via OMERO (e.g. through IDR) *without* using a QuPath project; 2. Draw an annotation and save a .qpdata file; 3. Restart QuPath (or open another image) and then try opening the .qpdata file... this gives a NPE. **Expected behavior**; Images can be reloaded from .qpdata files, without necessarily occurring inside projects. **Desktop (please complete the following information):**; - QuPath v0.2.2 and earlier. **Additional context**; This happens because; 1. .qpdata files store only the basic file path / URI (since that's what they did in v0.1.2), and *not* the full information needed to build the server; 2. the path alone isn't parsed [here](https://github.com/qupath/qupath/blob/master/qupath-extension-omero/src/main/java/qupath/lib/images/servers/omero/OmeroWebImageServerBuilder.java#L264). I think the 'best' solution is to store the JSON representation of the `ServerBuilder` inside the `.qpdata` file. Although this is redundant when inside a project, it is needed elsewhere. However, backwards compatibility should be maintained so that older .qpdata files can be read. For the same reasons, other more complex servers cannot be reconstructed from `.qpdata` files alone, e.g. rotated servers. This makes it *essential* to use a project in many cases. An alternative (short-term) approach *to resolve the OMERO problem only* would be to update the `getURIs(URI, String...)` method to parse the path. That would work around issues in v0.2 for OMERO, but doesn't resolve the bigger problem.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/598
https://github.com/qupath/qupath/issues/598:1567,Deployability,update,update,1567,"## Bug report. **Describe the bug**; .qpdata files corresponding to OMERO images cannot be opened directly, but rather *only* via a project. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image hosted via OMERO (e.g. through IDR) *without* using a QuPath project; 2. Draw an annotation and save a .qpdata file; 3. Restart QuPath (or open another image) and then try opening the .qpdata file... this gives a NPE. **Expected behavior**; Images can be reloaded from .qpdata files, without necessarily occurring inside projects. **Desktop (please complete the following information):**; - QuPath v0.2.2 and earlier. **Additional context**; This happens because; 1. .qpdata files store only the basic file path / URI (since that's what they did in v0.1.2), and *not* the full information needed to build the server; 2. the path alone isn't parsed [here](https://github.com/qupath/qupath/blob/master/qupath-extension-omero/src/main/java/qupath/lib/images/servers/omero/OmeroWebImageServerBuilder.java#L264). I think the 'best' solution is to store the JSON representation of the `ServerBuilder` inside the `.qpdata` file. Although this is redundant when inside a project, it is needed elsewhere. However, backwards compatibility should be maintained so that older .qpdata files can be read. For the same reasons, other more complex servers cannot be reconstructed from `.qpdata` files alone, e.g. rotated servers. This makes it *essential* to use a project in many cases. An alternative (short-term) approach *to resolve the OMERO problem only* would be to update the `getURIs(URI, String...)` method to parse the path. That would work around issues in v0.2 for OMERO, but doesn't resolve the bigger problem.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/598
https://github.com/qupath/qupath/issues/598:1149,Safety,redund,redundant,1149,"## Bug report. **Describe the bug**; .qpdata files corresponding to OMERO images cannot be opened directly, but rather *only* via a project. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image hosted via OMERO (e.g. through IDR) *without* using a QuPath project; 2. Draw an annotation and save a .qpdata file; 3. Restart QuPath (or open another image) and then try opening the .qpdata file... this gives a NPE. **Expected behavior**; Images can be reloaded from .qpdata files, without necessarily occurring inside projects. **Desktop (please complete the following information):**; - QuPath v0.2.2 and earlier. **Additional context**; This happens because; 1. .qpdata files store only the basic file path / URI (since that's what they did in v0.1.2), and *not* the full information needed to build the server; 2. the path alone isn't parsed [here](https://github.com/qupath/qupath/blob/master/qupath-extension-omero/src/main/java/qupath/lib/images/servers/omero/OmeroWebImageServerBuilder.java#L264). I think the 'best' solution is to store the JSON representation of the `ServerBuilder` inside the `.qpdata` file. Although this is redundant when inside a project, it is needed elsewhere. However, backwards compatibility should be maintained so that older .qpdata files can be read. For the same reasons, other more complex servers cannot be reconstructed from `.qpdata` files alone, e.g. rotated servers. This makes it *essential* to use a project in many cases. An alternative (short-term) approach *to resolve the OMERO problem only* would be to update the `getURIs(URI, String...)` method to parse the path. That would work around issues in v0.2 for OMERO, but doesn't resolve the bigger problem.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/598
https://github.com/qupath/qupath/issues/601:654,Performance,load,load,654,"Before submitting your bug report, please check the following:; Searched for ""keep settings multiviewer"" . ## Bug report. **Describe the bug**; When ""Keep settings"" in the brightness and contrast dialog is checked, each image opened in the project will have the same display settings, and so they will be comparable by eye. When opening multiple images with the multiviewer, they open with the default settings calculated by QuPath. **To Reproduce**; Steps to reproduce the behavior:; Cycle through a group of fluorescent images in the main viewer, with Keep settings checked. They will each open with comparable display settings.; Open two viewers, and load a second image (of the same type and number of channels) into the second viewer. It will not keep the same display settings as the primary image. . **Expected behavior**; Images opened in the multiview will be comparable to each other, as they are when opened sequentially in a single viewer with Keep settings checked. Currently, something like a negative control will be ramped up in brightness due to QuPath's auto-balance. **Screenshots**; ![Capture](https://user-images.githubusercontent.com/23145209/92514285-7e1efc80-f1c6-11ea-8924-2d33b4ff7bda.JPG); Right side: two individual QuPath instances, showing how two images look when cycling through the list of images one at a time with ""Keep settings""; Left side: Attempting to compare two images side by side using multiviewer, but the settings are not kept between viewers. When comparing 8 samples, it gets a little bit tedious adjusting all of the channels (though it could probably be done by script).; Horizontally, the images are the same. **Desktop (please complete the following information):**; - OS: [Windows]; - QuPath Version [e.g. 0.2.2]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/601
https://github.com/qupath/qupath/issues/603:402,Integrability,depend,depending,402,"## Bug report. **Describe the bug**; The little-known `QuPathGUI.launchQuPath()` method implicitly assumes that it is being launched from an AWT/Swing application. In some other cases, its behavior can be rather suboptimal, including:; * blocking the calling thread (particularly on macOS); * launching a version of QuPath that can be closed once... and never reopened. **To Reproduce**; Rather varied depending upon how QuPath is launched, but see https://forum.image.sc/t/paquo-read-write-qupath-projects-from-python/41892/14. Consider also the following Groovy script from Fiji (with JDK 11+):; ```groovy; def cl = getClass().getClassLoader() as GroovyClassLoader; def path = '/path/to/qupath-0.2.2.jar'; cl.addClasspath(path); Class.forName('qupath.lib.gui.QuPathGUI').getMethod('launchQuPath').invoke(null, (Object[])null); ```. **Expected behavior**; It should be possible to launch QuPath in as many different environments as possible... **Desktop (please complete the following information):**; - QuPath v0.2.0-v0.2.2. **Additional context**; There are a few related issues:; * There are some peculiar macOS-specific issues with threading and event loops: https://forum.image.sc/t/displaying-imagej-and-napari-ui-simultaneously/32187; * Sometimes, checking is using the EDT can cause everything to hang; * Calling `Platform.setImplicitExit(false)` can be required if a JavaFX application needs to be restarted later; * System menubars aren't always possible when launching in a non-standard way",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/603
https://github.com/qupath/qupath/pull/604:75,Testability,test,test,75,"See https://github.com/qupath/qupath/issues/603. Main changes are:; * make test for EDT optional (i.e. don't always assume we're using JavaFX or AWT/Swing); * Enable Platform.startup when AWT/Swing isn't required; * Use Platform.setImplicitExit(false) when starting with AWT/Swing - so that QuPath may be merrily closed and reopened. These changes are mostly needed for macOS, but may help other operating systems too.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/604
https://github.com/qupath/qupath/issues/607:22,Availability,Error,Error,22,"**Describe the bug**; Error opening image (NDPI File, uncompressed size 23.6GB), with superpixels added to it. This problem occurred with 2 from the 48 images in the project. . **To Reproduce**; Steps to reproduce the behavior:; 1. Open QuPath Project; 2. Open Image; 3. Error: . java.lang.NullPointerException; ERROR: Load ImageData; at qupath.lib.objects.hierarchy.PathObjectHierarchy.setHierarchy(PathObjectHierarchy.java:769); at qupath.lib.io.PathIO.readImageDataSerialized(PathIO.java:203); at qupath.lib.io.PathIO.readImageData(PathIO.java:278); at qupath.lib.projects.DefaultProject$DefaultProjectImageEntry.readImageData(DefaultProject.java:723); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2652); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:190); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(Bas",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/607
https://github.com/qupath/qupath/issues/607:271,Availability,Error,Error,271,"**Describe the bug**; Error opening image (NDPI File, uncompressed size 23.6GB), with superpixels added to it. This problem occurred with 2 from the 48 images in the project. . **To Reproduce**; Steps to reproduce the behavior:; 1. Open QuPath Project; 2. Open Image; 3. Error: . java.lang.NullPointerException; ERROR: Load ImageData; at qupath.lib.objects.hierarchy.PathObjectHierarchy.setHierarchy(PathObjectHierarchy.java:769); at qupath.lib.io.PathIO.readImageDataSerialized(PathIO.java:203); at qupath.lib.io.PathIO.readImageData(PathIO.java:278); at qupath.lib.projects.DefaultProject$DefaultProjectImageEntry.readImageData(DefaultProject.java:723); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2652); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:190); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(Bas",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/607
https://github.com/qupath/qupath/issues/607:312,Availability,ERROR,ERROR,312,"**Describe the bug**; Error opening image (NDPI File, uncompressed size 23.6GB), with superpixels added to it. This problem occurred with 2 from the 48 images in the project. . **To Reproduce**; Steps to reproduce the behavior:; 1. Open QuPath Project; 2. Open Image; 3. Error: . java.lang.NullPointerException; ERROR: Load ImageData; at qupath.lib.objects.hierarchy.PathObjectHierarchy.setHierarchy(PathObjectHierarchy.java:769); at qupath.lib.io.PathIO.readImageDataSerialized(PathIO.java:203); at qupath.lib.io.PathIO.readImageData(PathIO.java:278); at qupath.lib.projects.DefaultProject$DefaultProjectImageEntry.readImageData(DefaultProject.java:723); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2652); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:190); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(Bas",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/607
https://github.com/qupath/qupath/issues/607:319,Performance,Load,Load,319,"**Describe the bug**; Error opening image (NDPI File, uncompressed size 23.6GB), with superpixels added to it. This problem occurred with 2 from the 48 images in the project. . **To Reproduce**; Steps to reproduce the behavior:; 1. Open QuPath Project; 2. Open Image; 3. Error: . java.lang.NullPointerException; ERROR: Load ImageData; at qupath.lib.objects.hierarchy.PathObjectHierarchy.setHierarchy(PathObjectHierarchy.java:769); at qupath.lib.io.PathIO.readImageDataSerialized(PathIO.java:203); at qupath.lib.io.PathIO.readImageData(PathIO.java:278); at qupath.lib.projects.DefaultProject$DefaultProjectImageEntry.readImageData(DefaultProject.java:723); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2652); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:190); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(Bas",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/607
https://github.com/qupath/qupath/issues/607:3540,Security,secur,security,3540,t com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$ClickGenerator.postProcess(Scene.java:3597); at javafx.scene.Scene$MouseHandler.process(Scene.java:3899); at javafx.scene.Scene.processMouseEvent(Scene.java:1885); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2618); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source). **Screenshots**. ![BugQuPath_ErrorLoadImageData](https://user-images.githubusercontent.com/70638715/93310186-60701980-f7fc-11ea-9442-ae0d49fefe5a.png). **Desktop (please complete the following information):**; OS: Windows; Processor: Intel Xenon CPU E5620; RAM 48GB ; QuPath Version: 0.2.2,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/607
https://github.com/qupath/qupath/issues/607:3549,Security,Access,AccessController,3549,t com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$ClickGenerator.postProcess(Scene.java:3597); at javafx.scene.Scene$MouseHandler.process(Scene.java:3899); at javafx.scene.Scene.processMouseEvent(Scene.java:1885); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2618); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:409); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:299); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:447); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:412); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:446); at com.sun.glass.ui.View.handleMouseEvent(View.java:556); at com.sun.glass.ui.View.notifyMouse(View.java:942); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:174); at java.base/java.lang.Thread.run(Unknown Source). **Screenshots**. ![BugQuPath_ErrorLoadImageData](https://user-images.githubusercontent.com/70638715/93310186-60701980-f7fc-11ea-9442-ae0d49fefe5a.png). **Desktop (please complete the following information):**; OS: Windows; Processor: Intel Xenon CPU E5620; RAM 48GB ; QuPath Version: 0.2.2,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/607
https://github.com/qupath/qupath/issues/609:272,Integrability,message,message,272,"## Bug report. **Describe the bug**; When using the `script` command in the CLI, the `-i` parameter is used to match an [entry's name](https://github.com/qupath/qupath/blob/43aad4ecda893a7eb03c30774e64da5b9547bc86/src/main/java/qupath/QuPath.java#L290), when the `--help` message indicates that the user must specified a path (`-i, --image=image: Path to an image file.`). **To Reproduce**; Steps to reproduce the behavior:; 1. Run the `script` command from the CLI with path (e.g. `QuPath.exe script -p path/to/project.qpproj -i path/to/image.tif path/to/script.groovy`) -> won't run the script on the specified image; 2. Run the `script` command from the CLI with image name(e.g. `QuPath.exe script -p path/to/project.qpproj -i image-name path/to/script.groovy`) -> runs the script on the specified image. **Expected behavior**; Matching description and behaviour. **Additional context**; The description ([here](https://github.com/qupath/qupath/blob/43aad4ecda893a7eb03c30774e64da5b9547bc86/src/main/java/qupath/QuPath.java#L257)) needs to change.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/609
https://github.com/qupath/qupath/issues/611:320,Availability,down,downample,320,Is it expected that running a positive pixel count on a larger area of interest (28824679 um^2) give the program troubles and essentially freeze up/crash the program? I am running it with an Intel i7 8 core 3GHx processor with 64GB ram. Is there something I need to modify in the pixel count settings (eg. adjusting the downample factor)? Or is it just the nature of the request/analysis?. Thanks!. Chris,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/611
https://github.com/qupath/qupath/issues/613:328,Availability,error,error,328,"All of a sudden, a project that I am currently working on will not open in QuPath via different methods. I am running Windows 10, and when I:. - When I try to double click on the project file in file explorer, nothing happens. - When I try to open the project within QuPath, I get a ""Could not read project from project.qpproj"" error. - When I try to drag the project file from file explorer to the QuPath window (I'm not sure if this is even a valid way to open a project?), I get a ""java.lang.NullPointerException"" error. Thanks in advance!!. Chris",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/613
https://github.com/qupath/qupath/issues/613:517,Availability,error,error,517,"All of a sudden, a project that I am currently working on will not open in QuPath via different methods. I am running Windows 10, and when I:. - When I try to double click on the project file in file explorer, nothing happens. - When I try to open the project within QuPath, I get a ""Could not read project from project.qpproj"" error. - When I try to drag the project file from file explorer to the QuPath window (I'm not sure if this is even a valid way to open a project?), I get a ""java.lang.NullPointerException"" error. Thanks in advance!!. Chris",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/613
https://github.com/qupath/qupath/issues/614:239,Availability,down,download,239,"## Bug report. **Describe the bug**; If the stable release folder *QuPath-0.2.3/* is placed behind a *bin* folder, QuPath will not run. **To Reproduce**; Steps to reproduce the behavior:; 1. `wget https://github.com/qupath/qupath/releases/download/v0.2.3/QuPath-0.2.3-Linux.tar.xz`; 2. `tar -xvf QuPath-0.2.3-Linux.tar.xz`; 3. `cd QuPath-0.2.3/bin/`; 4. `./QuPath-0.2.3`. **Behavior**. If QuPath runs, is dependent under which path it is installed. + `/home/elmar/QuPath-0.2.3/bin` this works; + `/home/elmar/abc/QuPath-0.2.3/bin` this works; + `/home/elmar/bin/QuPath-0.2.3/bin` this will **not** work!. This is the error I receive: ; ```; elmar@computer ~/bin/QuPath-0.2.3/bin $ ./QuPath-0.2.3; Error: could not find libjava.so; Error: Could not find Java SE Runtime Environment.; ``` . **Desktop (please complete the following information):**; - OS: Ubuntu; - QuPath Version 0.2.3 stable release",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/614
https://github.com/qupath/qupath/issues/614:617,Availability,error,error,617,"## Bug report. **Describe the bug**; If the stable release folder *QuPath-0.2.3/* is placed behind a *bin* folder, QuPath will not run. **To Reproduce**; Steps to reproduce the behavior:; 1. `wget https://github.com/qupath/qupath/releases/download/v0.2.3/QuPath-0.2.3-Linux.tar.xz`; 2. `tar -xvf QuPath-0.2.3-Linux.tar.xz`; 3. `cd QuPath-0.2.3/bin/`; 4. `./QuPath-0.2.3`. **Behavior**. If QuPath runs, is dependent under which path it is installed. + `/home/elmar/QuPath-0.2.3/bin` this works; + `/home/elmar/abc/QuPath-0.2.3/bin` this works; + `/home/elmar/bin/QuPath-0.2.3/bin` this will **not** work!. This is the error I receive: ; ```; elmar@computer ~/bin/QuPath-0.2.3/bin $ ./QuPath-0.2.3; Error: could not find libjava.so; Error: Could not find Java SE Runtime Environment.; ``` . **Desktop (please complete the following information):**; - OS: Ubuntu; - QuPath Version 0.2.3 stable release",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/614
https://github.com/qupath/qupath/issues/614:697,Availability,Error,Error,697,"## Bug report. **Describe the bug**; If the stable release folder *QuPath-0.2.3/* is placed behind a *bin* folder, QuPath will not run. **To Reproduce**; Steps to reproduce the behavior:; 1. `wget https://github.com/qupath/qupath/releases/download/v0.2.3/QuPath-0.2.3-Linux.tar.xz`; 2. `tar -xvf QuPath-0.2.3-Linux.tar.xz`; 3. `cd QuPath-0.2.3/bin/`; 4. `./QuPath-0.2.3`. **Behavior**. If QuPath runs, is dependent under which path it is installed. + `/home/elmar/QuPath-0.2.3/bin` this works; + `/home/elmar/abc/QuPath-0.2.3/bin` this works; + `/home/elmar/bin/QuPath-0.2.3/bin` this will **not** work!. This is the error I receive: ; ```; elmar@computer ~/bin/QuPath-0.2.3/bin $ ./QuPath-0.2.3; Error: could not find libjava.so; Error: Could not find Java SE Runtime Environment.; ``` . **Desktop (please complete the following information):**; - OS: Ubuntu; - QuPath Version 0.2.3 stable release",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/614
https://github.com/qupath/qupath/issues/614:731,Availability,Error,Error,731,"## Bug report. **Describe the bug**; If the stable release folder *QuPath-0.2.3/* is placed behind a *bin* folder, QuPath will not run. **To Reproduce**; Steps to reproduce the behavior:; 1. `wget https://github.com/qupath/qupath/releases/download/v0.2.3/QuPath-0.2.3-Linux.tar.xz`; 2. `tar -xvf QuPath-0.2.3-Linux.tar.xz`; 3. `cd QuPath-0.2.3/bin/`; 4. `./QuPath-0.2.3`. **Behavior**. If QuPath runs, is dependent under which path it is installed. + `/home/elmar/QuPath-0.2.3/bin` this works; + `/home/elmar/abc/QuPath-0.2.3/bin` this works; + `/home/elmar/bin/QuPath-0.2.3/bin` this will **not** work!. This is the error I receive: ; ```; elmar@computer ~/bin/QuPath-0.2.3/bin $ ./QuPath-0.2.3; Error: could not find libjava.so; Error: Could not find Java SE Runtime Environment.; ``` . **Desktop (please complete the following information):**; - OS: Ubuntu; - QuPath Version 0.2.3 stable release",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/614
https://github.com/qupath/qupath/issues/614:51,Deployability,release,release,51,"## Bug report. **Describe the bug**; If the stable release folder *QuPath-0.2.3/* is placed behind a *bin* folder, QuPath will not run. **To Reproduce**; Steps to reproduce the behavior:; 1. `wget https://github.com/qupath/qupath/releases/download/v0.2.3/QuPath-0.2.3-Linux.tar.xz`; 2. `tar -xvf QuPath-0.2.3-Linux.tar.xz`; 3. `cd QuPath-0.2.3/bin/`; 4. `./QuPath-0.2.3`. **Behavior**. If QuPath runs, is dependent under which path it is installed. + `/home/elmar/QuPath-0.2.3/bin` this works; + `/home/elmar/abc/QuPath-0.2.3/bin` this works; + `/home/elmar/bin/QuPath-0.2.3/bin` this will **not** work!. This is the error I receive: ; ```; elmar@computer ~/bin/QuPath-0.2.3/bin $ ./QuPath-0.2.3; Error: could not find libjava.so; Error: Could not find Java SE Runtime Environment.; ``` . **Desktop (please complete the following information):**; - OS: Ubuntu; - QuPath Version 0.2.3 stable release",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/614
https://github.com/qupath/qupath/issues/614:230,Deployability,release,releases,230,"## Bug report. **Describe the bug**; If the stable release folder *QuPath-0.2.3/* is placed behind a *bin* folder, QuPath will not run. **To Reproduce**; Steps to reproduce the behavior:; 1. `wget https://github.com/qupath/qupath/releases/download/v0.2.3/QuPath-0.2.3-Linux.tar.xz`; 2. `tar -xvf QuPath-0.2.3-Linux.tar.xz`; 3. `cd QuPath-0.2.3/bin/`; 4. `./QuPath-0.2.3`. **Behavior**. If QuPath runs, is dependent under which path it is installed. + `/home/elmar/QuPath-0.2.3/bin` this works; + `/home/elmar/abc/QuPath-0.2.3/bin` this works; + `/home/elmar/bin/QuPath-0.2.3/bin` this will **not** work!. This is the error I receive: ; ```; elmar@computer ~/bin/QuPath-0.2.3/bin $ ./QuPath-0.2.3; Error: could not find libjava.so; Error: Could not find Java SE Runtime Environment.; ``` . **Desktop (please complete the following information):**; - OS: Ubuntu; - QuPath Version 0.2.3 stable release",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/614
https://github.com/qupath/qupath/issues/614:438,Deployability,install,installed,438,"## Bug report. **Describe the bug**; If the stable release folder *QuPath-0.2.3/* is placed behind a *bin* folder, QuPath will not run. **To Reproduce**; Steps to reproduce the behavior:; 1. `wget https://github.com/qupath/qupath/releases/download/v0.2.3/QuPath-0.2.3-Linux.tar.xz`; 2. `tar -xvf QuPath-0.2.3-Linux.tar.xz`; 3. `cd QuPath-0.2.3/bin/`; 4. `./QuPath-0.2.3`. **Behavior**. If QuPath runs, is dependent under which path it is installed. + `/home/elmar/QuPath-0.2.3/bin` this works; + `/home/elmar/abc/QuPath-0.2.3/bin` this works; + `/home/elmar/bin/QuPath-0.2.3/bin` this will **not** work!. This is the error I receive: ; ```; elmar@computer ~/bin/QuPath-0.2.3/bin $ ./QuPath-0.2.3; Error: could not find libjava.so; Error: Could not find Java SE Runtime Environment.; ``` . **Desktop (please complete the following information):**; - OS: Ubuntu; - QuPath Version 0.2.3 stable release",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/614
https://github.com/qupath/qupath/issues/614:891,Deployability,release,release,891,"## Bug report. **Describe the bug**; If the stable release folder *QuPath-0.2.3/* is placed behind a *bin* folder, QuPath will not run. **To Reproduce**; Steps to reproduce the behavior:; 1. `wget https://github.com/qupath/qupath/releases/download/v0.2.3/QuPath-0.2.3-Linux.tar.xz`; 2. `tar -xvf QuPath-0.2.3-Linux.tar.xz`; 3. `cd QuPath-0.2.3/bin/`; 4. `./QuPath-0.2.3`. **Behavior**. If QuPath runs, is dependent under which path it is installed. + `/home/elmar/QuPath-0.2.3/bin` this works; + `/home/elmar/abc/QuPath-0.2.3/bin` this works; + `/home/elmar/bin/QuPath-0.2.3/bin` this will **not** work!. This is the error I receive: ; ```; elmar@computer ~/bin/QuPath-0.2.3/bin $ ./QuPath-0.2.3; Error: could not find libjava.so; Error: Could not find Java SE Runtime Environment.; ``` . **Desktop (please complete the following information):**; - OS: Ubuntu; - QuPath Version 0.2.3 stable release",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/614
https://github.com/qupath/qupath/issues/614:405,Integrability,depend,dependent,405,"## Bug report. **Describe the bug**; If the stable release folder *QuPath-0.2.3/* is placed behind a *bin* folder, QuPath will not run. **To Reproduce**; Steps to reproduce the behavior:; 1. `wget https://github.com/qupath/qupath/releases/download/v0.2.3/QuPath-0.2.3-Linux.tar.xz`; 2. `tar -xvf QuPath-0.2.3-Linux.tar.xz`; 3. `cd QuPath-0.2.3/bin/`; 4. `./QuPath-0.2.3`. **Behavior**. If QuPath runs, is dependent under which path it is installed. + `/home/elmar/QuPath-0.2.3/bin` this works; + `/home/elmar/abc/QuPath-0.2.3/bin` this works; + `/home/elmar/bin/QuPath-0.2.3/bin` this will **not** work!. This is the error I receive: ; ```; elmar@computer ~/bin/QuPath-0.2.3/bin $ ./QuPath-0.2.3; Error: could not find libjava.so; Error: Could not find Java SE Runtime Environment.; ``` . **Desktop (please complete the following information):**; - OS: Ubuntu; - QuPath Version 0.2.3 stable release",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/614
https://github.com/qupath/qupath/pull/616:128,Availability,down,down,128,"- Added diagonal navigation (e.g. `UP` + `LEFT` keys); - Navigation speed can be modified; - Acceleration effects (e.g. slowing down when releasing keys) can be turned off; - Can turn on `ignore missing TMA cores` which will 'jump over' missing TMA cores when navigating a TMA grid with arrow keys ; - Preference options were added for `acceleration effects`, `navigation speed` and `ignore missing TMA cores`",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/616
https://github.com/qupath/qupath/issues/624:380,Safety,detect,detect,380,"The cell recognition does not work for WatershedCellMembraneDetection via script. It executes it, but recognizes 0 cells or rarely times 1 cell. If you replace WatershedCellMembraneDetection with WatershedCellDetection, everything works fine. When called from the GUI, WatershedCellMembraneDetection also works fine. I have tried it under version 0.2.3. `runPlugin('qupath.imagej.detect.cells.WatershedCellMembraneDetection', '{""detectionImageBrightfield"": ""Hematoxylin"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}');`",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/624
https://github.com/qupath/qupath/issues/624:429,Safety,detect,detectionImageBrightfield,429,"The cell recognition does not work for WatershedCellMembraneDetection via script. It executes it, but recognizes 0 cells or rarely times 1 cell. If you replace WatershedCellMembraneDetection with WatershedCellDetection, everything works fine. When called from the GUI, WatershedCellMembraneDetection also works fine. I have tried it under version 0.2.3. `runPlugin('qupath.imagej.detect.cells.WatershedCellMembraneDetection', '{""detectionImageBrightfield"": ""Hematoxylin"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.5, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5, ""includeNuclei"": true, ""smoothBoundaries"": true, ""makeMeasurements"": true}');`",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/624
https://github.com/qupath/qupath/issues/626:78,Availability,avail,available,78,"## Bug report. **Describe the bug**; QuPath has major problems if the list of available classifications is too long. See https://forum.image.sc/t/extremely-long-class-list-prevents-exiting-qupath/44381 for details. **Expected behavior**; QuPath closes elegantly, and retrieves the class list when restarted. **Additional context**; Presumably we hit the [8192 character limit of what can be stored in preferences](https://docs.oracle.com/javase/8/docs/api/java/util/prefs/Preferences.html#MAX_VALUE_LENGTH). Note that this also impacts byte arrays (since they use Base64 encoding). Options include:; * Use the user directory instead (but this might not be set); * Encode the preferences in a different way, e.g. across multiple entries if needed",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/626
https://github.com/qupath/qupath/issues/627:803,Availability,Down,Download,803,"* [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**. On macOS 10.15.4, QuPath 0.2.3, compressed, tiled tiff images do not load correctly: only the top-left corner tile appears, the rest of the image is black. macOS Preview shows the same incorrect behaviour. Perhaps QuPath on macOS is using the platform libtiff rather than bundling its own?. **To Reproduce**. Download this image: . http://www.rollthepotato.net/~john/tiled-jpeg-tiff-pyramid.tif. Start QuPath 0.2.3 on macOS Catalina. Select File / Open .... Select the image and press OK. Only a small white tile in the top-left appears. I tried a few more things:. - If you use homebrew's tiffcp to transform the image to uncompressed tiled, it works (`tiffcp -c none x.tif y.tif`, then open `y.tif` in QuPath); - macOS Preview shows the same behaviour (just displays one tile); - the same image loads fine into `eog` on Ubuntu 20.04, image preview on win10, gimp on ubuntu. **Desktop (please complete the following information):**; - macOS 10.15.7; - QuPath 0.2.3. **Additional context**. Some more notes in this issue:. https://github.com/libvips/libvips/issues/1862",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/627
https://github.com/qupath/qupath/issues/627:177,Deployability,release,release,177,"* [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**. On macOS 10.15.4, QuPath 0.2.3, compressed, tiled tiff images do not load correctly: only the top-left corner tile appears, the rest of the image is black. macOS Preview shows the same incorrect behaviour. Perhaps QuPath on macOS is using the platform libtiff rather than bundling its own?. **To Reproduce**. Download this image: . http://www.rollthepotato.net/~john/tiled-jpeg-tiff-pyramid.tif. Start QuPath 0.2.3 on macOS Catalina. Select File / Open .... Select the image and press OK. Only a small white tile in the top-left appears. I tried a few more things:. - If you use homebrew's tiffcp to transform the image to uncompressed tiled, it works (`tiffcp -c none x.tif y.tif`, then open `y.tif` in QuPath); - macOS Preview shows the same behaviour (just displays one tile); - the same image loads fine into `eog` on Ubuntu 20.04, image preview on win10, gimp on ubuntu. **Desktop (please complete the following information):**; - macOS 10.15.7; - QuPath 0.2.3. **Additional context**. Some more notes in this issue:. https://github.com/libvips/libvips/issues/1862",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/627
https://github.com/qupath/qupath/issues/627:373,Deployability,release,release,373,"* [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**. On macOS 10.15.4, QuPath 0.2.3, compressed, tiled tiff images do not load correctly: only the top-left corner tile appears, the rest of the image is black. macOS Preview shows the same incorrect behaviour. Perhaps QuPath on macOS is using the platform libtiff rather than bundling its own?. **To Reproduce**. Download this image: . http://www.rollthepotato.net/~john/tiled-jpeg-tiff-pyramid.tif. Start QuPath 0.2.3 on macOS Catalina. Select File / Open .... Select the image and press OK. Only a small white tile in the top-left appears. I tried a few more things:. - If you use homebrew's tiffcp to transform the image to uncompressed tiled, it works (`tiffcp -c none x.tif y.tif`, then open `y.tif` in QuPath); - macOS Preview shows the same behaviour (just displays one tile); - the same image loads fine into `eog` on Ubuntu 20.04, image preview on win10, gimp on ubuntu. **Desktop (please complete the following information):**; - macOS 10.15.7; - QuPath 0.2.3. **Additional context**. Some more notes in this issue:. https://github.com/libvips/libvips/issues/1862",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/627
https://github.com/qupath/qupath/issues/627:563,Performance,load,load,563,"* [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**. On macOS 10.15.4, QuPath 0.2.3, compressed, tiled tiff images do not load correctly: only the top-left corner tile appears, the rest of the image is black. macOS Preview shows the same incorrect behaviour. Perhaps QuPath on macOS is using the platform libtiff rather than bundling its own?. **To Reproduce**. Download this image: . http://www.rollthepotato.net/~john/tiled-jpeg-tiff-pyramid.tif. Start QuPath 0.2.3 on macOS Catalina. Select File / Open .... Select the image and press OK. Only a small white tile in the top-left appears. I tried a few more things:. - If you use homebrew's tiffcp to transform the image to uncompressed tiled, it works (`tiffcp -c none x.tif y.tif`, then open `y.tif` in QuPath); - macOS Preview shows the same behaviour (just displays one tile); - the same image loads fine into `eog` on Ubuntu 20.04, image preview on win10, gimp on ubuntu. **Desktop (please complete the following information):**; - macOS 10.15.7; - QuPath 0.2.3. **Additional context**. Some more notes in this issue:. https://github.com/libvips/libvips/issues/1862",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/627
https://github.com/qupath/qupath/issues/627:1291,Performance,load,loads,1291,"* [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**. On macOS 10.15.4, QuPath 0.2.3, compressed, tiled tiff images do not load correctly: only the top-left corner tile appears, the rest of the image is black. macOS Preview shows the same incorrect behaviour. Perhaps QuPath on macOS is using the platform libtiff rather than bundling its own?. **To Reproduce**. Download this image: . http://www.rollthepotato.net/~john/tiled-jpeg-tiff-pyramid.tif. Start QuPath 0.2.3 on macOS Catalina. Select File / Open .... Select the image and press OK. Only a small white tile in the top-left appears. I tried a few more things:. - If you use homebrew's tiffcp to transform the image to uncompressed tiled, it works (`tiffcp -c none x.tif y.tif`, then open `y.tif` in QuPath); - macOS Preview shows the same behaviour (just displays one tile); - the same image loads fine into `eog` on Ubuntu 20.04, image preview on win10, gimp on ubuntu. **Desktop (please complete the following information):**; - macOS 10.15.7; - QuPath 0.2.3. **Additional context**. Some more notes in this issue:. https://github.com/libvips/libvips/issues/1862",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/627
https://github.com/qupath/qupath/issues/628:144,Availability,Down,Download,144,## Bug report. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Steps to reproduce the behavior:; 1. Download release 0.2.3 on Ubuntu 20.04; 2. Extract archive; 3. Run qupath from bin directory; 4. Open project and import mirax slide. **Expected behavior**; Slide without weird artifacts. **Screenshots**; ![Screenshot from 2020-10-25 15-29-30](https://user-images.githubusercontent.com/6561496/97109997-e96d5100-16d6-11eb-9c68-d20863276593.png). **Desktop (please complete the following information):**; - OS: Ubuntu 20.04; - QuPath Version 0.2.3 (also doesn't work on 0.2.1),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/628
https://github.com/qupath/qupath/issues/628:153,Deployability,release,release,153,## Bug report. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Steps to reproduce the behavior:; 1. Download release 0.2.3 on Ubuntu 20.04; 2. Extract archive; 3. Run qupath from bin directory; 4. Open project and import mirax slide. **Expected behavior**; Slide without weird artifacts. **Screenshots**; ![Screenshot from 2020-10-25 15-29-30](https://user-images.githubusercontent.com/6561496/97109997-e96d5100-16d6-11eb-9c68-d20863276593.png). **Desktop (please complete the following information):**; - OS: Ubuntu 20.04; - QuPath Version 0.2.3 (also doesn't work on 0.2.1),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/628
https://github.com/qupath/qupath/issues/628:39,Usability,clear,clear,39,## Bug report. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Steps to reproduce the behavior:; 1. Download release 0.2.3 on Ubuntu 20.04; 2. Extract archive; 3. Run qupath from bin directory; 4. Open project and import mirax slide. **Expected behavior**; Slide without weird artifacts. **Screenshots**; ![Screenshot from 2020-10-25 15-29-30](https://user-images.githubusercontent.com/6561496/97109997-e96d5100-16d6-11eb-9c68-d20863276593.png). **Desktop (please complete the following information):**; - OS: Ubuntu 20.04; - QuPath Version 0.2.3 (also doesn't work on 0.2.1),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/628
https://github.com/qupath/qupath/issues/629:336,Deployability,update,updated,336,"QuPath supports reading whole slide images using two open source libraries: [Bio-Formats](https://www.openmicroscopy.org/bio-formats/) and [OpenSlide](http://openslide.org). Of these, Bio-Formats is much more extensive and actively-maintained; OpenSlide only really supports single-plane, 8-bit RGB images and has not been meaningfully updated for a couple of years. Nevertheless, OpenSlide remains important to QuPath users because; * A few common file formats (e.g. .mrxs) are *only* supported by OpenSlide; * Where a format is supported by both Bio-Formats and OpenSlide, OpenSlide is generally much faster at reading image tiles (although may provide less metadata); * OpenSlide offers alpha information that is relevant if regions are unscanned. The trouble is that OpenSlide is a C library, and getting it to work properly with QuPath is a challenge we haven't managed to solve... thanks to the complexities of how native dependencies - and, more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://gi",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/629
https://github.com/qupath/qupath/issues/629:1231,Deployability,update,updates,1231,"d actively-maintained; OpenSlide only really supports single-plane, 8-bit RGB images and has not been meaningfully updated for a couple of years. Nevertheless, OpenSlide remains important to QuPath users because; * A few common file formats (e.g. .mrxs) are *only* supported by OpenSlide; * Where a format is supported by both Bio-Formats and OpenSlide, OpenSlide is generally much faster at reading image tiles (although may provide less metadata); * OpenSlide offers alpha information that is relevant if regions are unscanned. The trouble is that OpenSlide is a C library, and getting it to work properly with QuPath is a challenge we haven't managed to solve... thanks to the complexities of how native dependencies - and, more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://github.com/bytedeco/gradle-javacpp). *Ideally* all dependencies would be packaged into a single .jar file and accessed either with JavaCPP / [native-lib-loader](https://github.com/scijava/native-lib-loader). An alternative ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/629
https://github.com/qupath/qupath/issues/629:2300,Deployability,install,installation,2300,"more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://github.com/bytedeco/gradle-javacpp). *Ideally* all dependencies would be packaged into a single .jar file and accessed either with JavaCPP / [native-lib-loader](https://github.com/scijava/native-lib-loader). An alternative might be to try outsourcing OpenSlide support on macOS and Linux, *requiring* installation with a package manager (?) and only providing the 'official' pre-built binaries on Windows. In considering this, it is worth asking whether we should be linking to OpenSlide only anyway.; **libvips** (https://github.com/libvips/libvips) is a much more extensive library, is actively maintained, and can also be built with OpenSlide support. Among its many features, libvips has the ability to write pyramidal images extremely fast.... which is a feature we would very much like to have, supplementing our ability to write [pyramidal OME-TIFFs using Bio-Formats](https://qupath.readthedocs.io/en/latest/docs/advanced/command_line.html).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/629
https://github.com/qupath/qupath/issues/629:928,Integrability,depend,dependencies,928,"QuPath supports reading whole slide images using two open source libraries: [Bio-Formats](https://www.openmicroscopy.org/bio-formats/) and [OpenSlide](http://openslide.org). Of these, Bio-Formats is much more extensive and actively-maintained; OpenSlide only really supports single-plane, 8-bit RGB images and has not been meaningfully updated for a couple of years. Nevertheless, OpenSlide remains important to QuPath users because; * A few common file formats (e.g. .mrxs) are *only* supported by OpenSlide; * Where a format is supported by both Bio-Formats and OpenSlide, OpenSlide is generally much faster at reading image tiles (although may provide less metadata); * OpenSlide offers alpha information that is relevant if regions are unscanned. The trouble is that OpenSlide is a C library, and getting it to work properly with QuPath is a challenge we haven't managed to solve... thanks to the complexities of how native dependencies - and, more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://gi",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/629
https://github.com/qupath/qupath/issues/629:976,Integrability,depend,dependencies,976,"QuPath supports reading whole slide images using two open source libraries: [Bio-Formats](https://www.openmicroscopy.org/bio-formats/) and [OpenSlide](http://openslide.org). Of these, Bio-Formats is much more extensive and actively-maintained; OpenSlide only really supports single-plane, 8-bit RGB images and has not been meaningfully updated for a couple of years. Nevertheless, OpenSlide remains important to QuPath users because; * A few common file formats (e.g. .mrxs) are *only* supported by OpenSlide; * Where a format is supported by both Bio-Formats and OpenSlide, OpenSlide is generally much faster at reading image tiles (although may provide less metadata); * OpenSlide offers alpha information that is relevant if regions are unscanned. The trouble is that OpenSlide is a C library, and getting it to work properly with QuPath is a challenge we haven't managed to solve... thanks to the complexities of how native dependencies - and, more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://gi",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/629
https://github.com/qupath/qupath/issues/629:1364,Integrability,depend,dependencies,1364,"meaningfully updated for a couple of years. Nevertheless, OpenSlide remains important to QuPath users because; * A few common file formats (e.g. .mrxs) are *only* supported by OpenSlide; * Where a format is supported by both Bio-Formats and OpenSlide, OpenSlide is generally much faster at reading image tiles (although may provide less metadata); * OpenSlide offers alpha information that is relevant if regions are unscanned. The trouble is that OpenSlide is a C library, and getting it to work properly with QuPath is a challenge we haven't managed to solve... thanks to the complexities of how native dependencies - and, more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://github.com/bytedeco/gradle-javacpp). *Ideally* all dependencies would be packaged into a single .jar file and accessed either with JavaCPP / [native-lib-loader](https://github.com/scijava/native-lib-loader). An alternative might be to try outsourcing OpenSlide support on macOS and Linux, *requiring* installation with a pac",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/629
https://github.com/qupath/qupath/issues/629:2050,Integrability,depend,dependencies,2050,"more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://github.com/bytedeco/gradle-javacpp). *Ideally* all dependencies would be packaged into a single .jar file and accessed either with JavaCPP / [native-lib-loader](https://github.com/scijava/native-lib-loader). An alternative might be to try outsourcing OpenSlide support on macOS and Linux, *requiring* installation with a package manager (?) and only providing the 'official' pre-built binaries on Windows. In considering this, it is worth asking whether we should be linking to OpenSlide only anyway.; **libvips** (https://github.com/libvips/libvips) is a much more extensive library, is actively maintained, and can also be built with OpenSlide support. Among its many features, libvips has the ability to write pyramidal images extremely fast.... which is a feature we would very much like to have, supplementing our ability to write [pyramidal OME-TIFFs using Bio-Formats](https://qupath.readthedocs.io/en/latest/docs/advanced/command_line.html).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/629
https://github.com/qupath/qupath/issues/629:1431,Modifiability,maintainab,maintainable,1431," (e.g. .mrxs) are *only* supported by OpenSlide; * Where a format is supported by both Bio-Formats and OpenSlide, OpenSlide is generally much faster at reading image tiles (although may provide less metadata); * OpenSlide offers alpha information that is relevant if regions are unscanned. The trouble is that OpenSlide is a C library, and getting it to work properly with QuPath is a challenge we haven't managed to solve... thanks to the complexities of how native dependencies - and, more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://github.com/bytedeco/gradle-javacpp). *Ideally* all dependencies would be packaged into a single .jar file and accessed either with JavaCPP / [native-lib-loader](https://github.com/scijava/native-lib-loader). An alternative might be to try outsourcing OpenSlide support on macOS and Linux, *requiring* installation with a package manager (?) and only providing the 'official' pre-built binaries on Windows. In considering this, it is worth asking whether we shoul",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/629
https://github.com/qupath/qupath/issues/629:1821,Modifiability,portab,portable,1821,"rly with QuPath is a challenge we haven't managed to solve... thanks to the complexities of how native dependencies - and, more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://github.com/bytedeco/gradle-javacpp). *Ideally* all dependencies would be packaged into a single .jar file and accessed either with JavaCPP / [native-lib-loader](https://github.com/scijava/native-lib-loader). An alternative might be to try outsourcing OpenSlide support on macOS and Linux, *requiring* installation with a package manager (?) and only providing the 'official' pre-built binaries on Windows. In considering this, it is worth asking whether we should be linking to OpenSlide only anyway.; **libvips** (https://github.com/libvips/libvips) is a much more extensive library, is actively maintained, and can also be built with OpenSlide support. Among its many features, libvips has the ability to write pyramidal images extremely fast.... which is a feature we would very much like to have, supplementing our ability ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/629
https://github.com/qupath/qupath/issues/629:2152,Performance,load,loader,2152,"more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://github.com/bytedeco/gradle-javacpp). *Ideally* all dependencies would be packaged into a single .jar file and accessed either with JavaCPP / [native-lib-loader](https://github.com/scijava/native-lib-loader). An alternative might be to try outsourcing OpenSlide support on macOS and Linux, *requiring* installation with a package manager (?) and only providing the 'official' pre-built binaries on Windows. In considering this, it is worth asking whether we should be linking to OpenSlide only anyway.; **libvips** (https://github.com/libvips/libvips) is a much more extensive library, is actively maintained, and can also be built with OpenSlide support. Among its many features, libvips has the ability to write pyramidal images extremely fast.... which is a feature we would very much like to have, supplementing our ability to write [pyramidal OME-TIFFs using Bio-Formats](https://qupath.readthedocs.io/en/latest/docs/advanced/command_line.html).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/629
https://github.com/qupath/qupath/issues/629:2198,Performance,load,loader,2198,"more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://github.com/bytedeco/gradle-javacpp). *Ideally* all dependencies would be packaged into a single .jar file and accessed either with JavaCPP / [native-lib-loader](https://github.com/scijava/native-lib-loader). An alternative might be to try outsourcing OpenSlide support on macOS and Linux, *requiring* installation with a package manager (?) and only providing the 'official' pre-built binaries on Windows. In considering this, it is worth asking whether we should be linking to OpenSlide only anyway.; **libvips** (https://github.com/libvips/libvips) is a much more extensive library, is actively maintained, and can also be built with OpenSlide support. Among its many features, libvips has the ability to write pyramidal images extremely fast.... which is a feature we would very much like to have, supplementing our ability to write [pyramidal OME-TIFFs using Bio-Formats](https://qupath.readthedocs.io/en/latest/docs/advanced/command_line.html).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/629
https://github.com/qupath/qupath/issues/629:2109,Security,access,accessed,2109,"more importantly, their sub-dependencies - are handled on different platforms. Bug reports such as; * https://github.com/qupath/qupath/issues/355; * https://github.com/qupath/qupath/issues/628; * https://github.com/qupath/qupath/issues/627. along with breakages caused by `jpackage` updates (https://github.com/qupath/qupath/issues/615) show that the (largely manual) process initially used to try to package up the dependencies hasn't worked. For these reasons, **we need a new and maintainable approach to include OpenSlide in QuPath in the future, or else drop support entirely**. Alas, I'm sadly one of those developers who is quite helpless when attempting to build any native libraries with even moderate complexity... spoiled by Java and Python, I haven't been able to figure out a solution. Hence this issue and cry for help. The biggest problem is getting a truly portable way to build OpenSlide on each platform. If we have that, we can potentially use JNI directly or JavaCPP (https://github.com/bytedeco/javacpp) / Gradle JavaCPP (https://github.com/bytedeco/gradle-javacpp). *Ideally* all dependencies would be packaged into a single .jar file and accessed either with JavaCPP / [native-lib-loader](https://github.com/scijava/native-lib-loader). An alternative might be to try outsourcing OpenSlide support on macOS and Linux, *requiring* installation with a package manager (?) and only providing the 'official' pre-built binaries on Windows. In considering this, it is worth asking whether we should be linking to OpenSlide only anyway.; **libvips** (https://github.com/libvips/libvips) is a much more extensive library, is actively maintained, and can also be built with OpenSlide support. Among its many features, libvips has the ability to write pyramidal images extremely fast.... which is a feature we would very much like to have, supplementing our ability to write [pyramidal OME-TIFFs using Bio-Formats](https://qupath.readthedocs.io/en/latest/docs/advanced/command_line.html).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/629
https://github.com/qupath/qupath/issues/631:96,Performance,load,load,96,"**Describe the bug**; The GUI element for 'Automate' is not responsive, takes very long time to load sub-elements. All other elements of the other GUI elements show instantly (e.g. File, Edit etc.). **To Reproduce**; Steps to reproduce the behavior:; 1. Open QuPath 0.2.3; 2. Hover over Automate. **Expected behavior**; Faster elements showing when hovering over Automate. **Desktop (please complete the following information):**; - OS: Ubuntu 20.04; - QuPath Version 0.2.3",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/631
https://github.com/qupath/qupath/issues/631:60,Usability,responsiv,responsive,60,"**Describe the bug**; The GUI element for 'Automate' is not responsive, takes very long time to load sub-elements. All other elements of the other GUI elements show instantly (e.g. File, Edit etc.). **To Reproduce**; Steps to reproduce the behavior:; 1. Open QuPath 0.2.3; 2. Hover over Automate. **Expected behavior**; Faster elements showing when hovering over Automate. **Desktop (please complete the following information):**; - OS: Ubuntu 20.04; - QuPath Version 0.2.3",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/631
https://github.com/qupath/qupath/issues/632:195,Usability,learn,learn,195,QuPath's main branch has been renamed from `master` to `main`. Here's a useful link to explain this (and what changes might be needed for anyone working with the repo): https://www.git-tower.com/learn/git/faq/git-rename-master-to-main/. (This issue just exists so anyone watching the project will be notified.),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/632
https://github.com/qupath/qupath/pull/636:220,Availability,error,error,220,"Left quotes have been known to lead to unexpected behaviours when running scripts.; Now, if a script throws an Exception, QuPath checks whether there is at least one left (single/double) quote and notify the user in the error message.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/636
https://github.com/qupath/qupath/pull/636:226,Integrability,message,message,226,"Left quotes have been known to lead to unexpected behaviours when running scripts.; Now, if a script throws an Exception, QuPath checks whether there is at least one left (single/double) quote and notify the user in the error message.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/636
https://github.com/qupath/qupath/pull/637:160,Safety,detect,detected,160,"- Added tooltip in Pixel classifier UI to notify users that classifiers can't be saved if not working inside a project (tooltip only appears when no project is detected).; - Added ability to Drag & Drop classifier(s) onto the _Load object classifier_ pane to add a classifier from a different source (e.g. a different project).; - Added ability to add classifier(s) to the `comboBox` in _Load pixel classifier_ pane to add a classifier from a different source. (e.g. a different project). Note (and possibly `TODO`): when adding a `PixelClassifier`, no check is made to ensure that the classifier is valid.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/637
https://github.com/qupath/qupath/issues/638:642,Availability,avail,available,642,"## Bug report. **Describe the bug**; There's no way accelerator for *Selection mode*... which isn't itself a bug, until you look at the code and see that there *should* be, it is just the same was the one used to synchronize viewers. See https://forum.image.sc/t/feature-request-keyboard-shortcut-for-selection-mode/45154/3. **Expected behavior**; Accelerator for *Selection mode* works as intended. **Desktop (please complete the following information):**; - QuPath v0.2. **Additional context**. A few things should probably be done:; * Set *Shift + S* as an accelerator (need to check this isn't used elsewhere...); * Make *Selection mode* available in a menu (so its accelerator is displayed); * Log a warning if an accelerator is defined multiple times (within `QuPathGUI.registerAccelerator`); * Optional: Make it easier to define custom accelerators for actions through `QuPathGUI` (see workaround script posted on the forum)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/638
https://github.com/qupath/qupath/issues/638:213,Integrability,synchroniz,synchronize,213,"## Bug report. **Describe the bug**; There's no way accelerator for *Selection mode*... which isn't itself a bug, until you look at the code and see that there *should* be, it is just the same was the one used to synchronize viewers. See https://forum.image.sc/t/feature-request-keyboard-shortcut-for-selection-mode/45154/3. **Expected behavior**; Accelerator for *Selection mode* works as intended. **Desktop (please complete the following information):**; - QuPath v0.2. **Additional context**. A few things should probably be done:; * Set *Shift + S* as an accelerator (need to check this isn't used elsewhere...); * Make *Selection mode* available in a menu (so its accelerator is displayed); * Log a warning if an accelerator is defined multiple times (within `QuPathGUI.registerAccelerator`); * Optional: Make it easier to define custom accelerators for actions through `QuPathGUI` (see workaround script posted on the forum)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/638
https://github.com/qupath/qupath/issues/638:699,Testability,Log,Log,699,"## Bug report. **Describe the bug**; There's no way accelerator for *Selection mode*... which isn't itself a bug, until you look at the code and see that there *should* be, it is just the same was the one used to synchronize viewers. See https://forum.image.sc/t/feature-request-keyboard-shortcut-for-selection-mode/45154/3. **Expected behavior**; Accelerator for *Selection mode* works as intended. **Desktop (please complete the following information):**; - QuPath v0.2. **Additional context**. A few things should probably be done:; * Set *Shift + S* as an accelerator (need to check this isn't used elsewhere...); * Make *Selection mode* available in a menu (so its accelerator is displayed); * Log a warning if an accelerator is defined multiple times (within `QuPathGUI.registerAccelerator`); * Optional: Make it easier to define custom accelerators for actions through `QuPathGUI` (see workaround script posted on the forum)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/638
https://github.com/qupath/qupath/pull/639:708,Availability,ping,ping,708,"Hello,; Great work on the QuPath, really nice tool!. We are working on implementing a plugin for QuPath that will provide importing slides from the PMA.Core/PMA.Start/My Pathomation servers (https://www.pathomation.com/). We are trying to achieve that by integrating our web-based tool PMA.UI (https://host.pathomation.com/sdk/pma.ui.documentation/) that provides all sort of menus and interfaces for interacting with PMA products. Unfortunately, the current build of QuPath does not contain ""jdk.jsobject"" module which is required for interaction with the WebView component. . In this PR I have introduced an adding of that ""jdk.jsobject"" to the build process and looking forward to PR being merged. Please ping me back if you have any questions/concerns. Kind Regards,; Egor",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/639
https://github.com/qupath/qupath/pull/639:255,Deployability,integrat,integrating,255,"Hello,; Great work on the QuPath, really nice tool!. We are working on implementing a plugin for QuPath that will provide importing slides from the PMA.Core/PMA.Start/My Pathomation servers (https://www.pathomation.com/). We are trying to achieve that by integrating our web-based tool PMA.UI (https://host.pathomation.com/sdk/pma.ui.documentation/) that provides all sort of menus and interfaces for interacting with PMA products. Unfortunately, the current build of QuPath does not contain ""jdk.jsobject"" module which is required for interaction with the WebView component. . In this PR I have introduced an adding of that ""jdk.jsobject"" to the build process and looking forward to PR being merged. Please ping me back if you have any questions/concerns. Kind Regards,; Egor",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/639
https://github.com/qupath/qupath/pull/639:255,Integrability,integrat,integrating,255,"Hello,; Great work on the QuPath, really nice tool!. We are working on implementing a plugin for QuPath that will provide importing slides from the PMA.Core/PMA.Start/My Pathomation servers (https://www.pathomation.com/). We are trying to achieve that by integrating our web-based tool PMA.UI (https://host.pathomation.com/sdk/pma.ui.documentation/) that provides all sort of menus and interfaces for interacting with PMA products. Unfortunately, the current build of QuPath does not contain ""jdk.jsobject"" module which is required for interaction with the WebView component. . In this PR I have introduced an adding of that ""jdk.jsobject"" to the build process and looking forward to PR being merged. Please ping me back if you have any questions/concerns. Kind Regards,; Egor",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/639
https://github.com/qupath/qupath/pull/639:386,Integrability,interface,interfaces,386,"Hello,; Great work on the QuPath, really nice tool!. We are working on implementing a plugin for QuPath that will provide importing slides from the PMA.Core/PMA.Start/My Pathomation servers (https://www.pathomation.com/). We are trying to achieve that by integrating our web-based tool PMA.UI (https://host.pathomation.com/sdk/pma.ui.documentation/) that provides all sort of menus and interfaces for interacting with PMA products. Unfortunately, the current build of QuPath does not contain ""jdk.jsobject"" module which is required for interaction with the WebView component. . In this PR I have introduced an adding of that ""jdk.jsobject"" to the build process and looking forward to PR being merged. Please ping me back if you have any questions/concerns. Kind Regards,; Egor",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/639
https://github.com/qupath/qupath/pull/639:86,Modifiability,plugin,plugin,86,"Hello,; Great work on the QuPath, really nice tool!. We are working on implementing a plugin for QuPath that will provide importing slides from the PMA.Core/PMA.Start/My Pathomation servers (https://www.pathomation.com/). We are trying to achieve that by integrating our web-based tool PMA.UI (https://host.pathomation.com/sdk/pma.ui.documentation/) that provides all sort of menus and interfaces for interacting with PMA products. Unfortunately, the current build of QuPath does not contain ""jdk.jsobject"" module which is required for interaction with the WebView component. . In this PR I have introduced an adding of that ""jdk.jsobject"" to the build process and looking forward to PR being merged. Please ping me back if you have any questions/concerns. Kind Regards,; Egor",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/639
https://github.com/qupath/qupath/pull/642:226,Performance,Load,Load,226,"- Added tooltip in Pixel classifier UI to notify users that classifiers can't be saved if not working inside a project (tooltip only appears when no project is detected).; - Added ability to Drag & Drop classifier(s) onto the Load object classifier pane to add a classifier from a different source (e.g. a different project).; - Added ability to add classifier(s) to the `comboBox` in Load pixel classifier pane to add a classifier from a different source. (e.g. a different project). Note (and possibly `TODO`): when adding a `PixelClassifier`, no check is made to ensure that the classifier is valid.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/642
https://github.com/qupath/qupath/pull/642:385,Performance,Load,Load,385,"- Added tooltip in Pixel classifier UI to notify users that classifiers can't be saved if not working inside a project (tooltip only appears when no project is detected).; - Added ability to Drag & Drop classifier(s) onto the Load object classifier pane to add a classifier from a different source (e.g. a different project).; - Added ability to add classifier(s) to the `comboBox` in Load pixel classifier pane to add a classifier from a different source. (e.g. a different project). Note (and possibly `TODO`): when adding a `PixelClassifier`, no check is made to ensure that the classifier is valid.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/642
https://github.com/qupath/qupath/pull/642:160,Safety,detect,detected,160,"- Added tooltip in Pixel classifier UI to notify users that classifiers can't be saved if not working inside a project (tooltip only appears when no project is detected).; - Added ability to Drag & Drop classifier(s) onto the Load object classifier pane to add a classifier from a different source (e.g. a different project).; - Added ability to add classifier(s) to the `comboBox` in Load pixel classifier pane to add a classifier from a different source. (e.g. a different project). Note (and possibly `TODO`): when adding a `PixelClassifier`, no check is made to ensure that the classifier is valid.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/642
https://github.com/qupath/qupath/issues/643:1078,Availability,error,error,1078,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; The slide label does not show when selecting View > Slide Label: the image is empty. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'View'; 2. Click on 'Show Slide Label'; 3. See error. **Expected behavior**; A window opens displaying the slide label. It worked find in 0.1.2 using the same SVS file, but for some reason no longer shows the slide label image in 0.2.3. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: MacOS 10.15.7; - QuPath Version 0.2.3. **Additional context**; images as in SVS format and I know the slide labelled was scanned as it is visible in version 0.1.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/643
https://github.com/qupath/qupath/issues/643:566,Deployability,release,release,566,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; The slide label does not show when selecting View > Slide Label: the image is empty. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'View'; 2. Click on 'Show Slide Label'; 3. See error. **Expected behavior**; A window opens displaying the slide label. It worked find in 0.1.2 using the same SVS file, but for some reason no longer shows the slide label image in 0.2.3. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: MacOS 10.15.7; - QuPath Version 0.2.3. **Additional context**; images as in SVS format and I know the slide labelled was scanned as it is visible in version 0.1.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/643
https://github.com/qupath/qupath/issues/643:763,Deployability,release,release,763,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; The slide label does not show when selecting View > Slide Label: the image is empty. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'View'; 2. Click on 'Show Slide Label'; 3. See error. **Expected behavior**; A window opens displaying the slide label. It worked find in 0.1.2 using the same SVS file, but for some reason no longer shows the slide label image in 0.2.3. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: MacOS 10.15.7; - QuPath Version 0.2.3. **Additional context**; images as in SVS format and I know the slide labelled was scanned as it is visible in version 0.1.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/643
https://github.com/qupath/qupath/pull/644:17,Deployability,Update,Updated,17,- Fixed #638.; - Updated the `Wand tool` name for consistency.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/644
https://github.com/qupath/qupath/issues/646:564,Deployability,release,release,564,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; If a TMA grid has been assigned using the TMA dearrayer and the TMA grid is removed later, it will remove all regions along with it, regardless of whether they have been placed n the hierachy or not. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a TMA image; 2. Draw some regions in the TMA cores; 3. Run the TMA de-arrayer; 4. Delete the TMA-grid; 5. All manually drawn regions are gone. **Expected behavior**; The TMA grid should be removed and the other regions should be kept. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version 0.2.3. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/646
https://github.com/qupath/qupath/issues/646:760,Deployability,release,release,760,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; If a TMA grid has been assigned using the TMA dearrayer and the TMA grid is removed later, it will remove all regions along with it, regardless of whether they have been placed n the hierachy or not. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a TMA image; 2. Draw some regions in the TMA cores; 3. Run the TMA de-arrayer; 4. Delete the TMA-grid; 5. All manually drawn regions are gone. **Expected behavior**; The TMA grid should be removed and the other regions should be kept. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version 0.2.3. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/646
https://github.com/qupath/qupath/pull/647:494,Deployability,integrat,integrated,494,"This pull request lets a user pass not only a Groovy script name via the qupath-console command line arguments, but also the script's arguments via a `-a` or `--args` option followed by quoted string. This string is then split on whitespace into a list of strings (unless a block is surrounded by \\"" \\"" escaped quotes) and passed to the Groovy interpreter as the global variable args. When no arguments are passed to a script, the global variable args is an empty list. With this change, the integrated script editor / interpreter also gets an empty, global args variable. I explained in https://forum.image.sc/t/using-command-line-parameters-with-a-groovy-script-in-qupath/45949/4 why this is desirable. Feel free to merge this pull request, or to adapt the idea, *any way you wish*.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/647
https://github.com/qupath/qupath/pull/647:751,Energy Efficiency,adapt,adapt,751,"This pull request lets a user pass not only a Groovy script name via the qupath-console command line arguments, but also the script's arguments via a `-a` or `--args` option followed by quoted string. This string is then split on whitespace into a list of strings (unless a block is surrounded by \\"" \\"" escaped quotes) and passed to the Groovy interpreter as the global variable args. When no arguments are passed to a script, the global variable args is an empty list. With this change, the integrated script editor / interpreter also gets an empty, global args variable. I explained in https://forum.image.sc/t/using-command-line-parameters-with-a-groovy-script-in-qupath/45949/4 why this is desirable. Feel free to merge this pull request, or to adapt the idea, *any way you wish*.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/647
https://github.com/qupath/qupath/pull/647:494,Integrability,integrat,integrated,494,"This pull request lets a user pass not only a Groovy script name via the qupath-console command line arguments, but also the script's arguments via a `-a` or `--args` option followed by quoted string. This string is then split on whitespace into a list of strings (unless a block is surrounded by \\"" \\"" escaped quotes) and passed to the Groovy interpreter as the global variable args. When no arguments are passed to a script, the global variable args is an empty list. With this change, the integrated script editor / interpreter also gets an empty, global args variable. I explained in https://forum.image.sc/t/using-command-line-parameters-with-a-groovy-script-in-qupath/45949/4 why this is desirable. Feel free to merge this pull request, or to adapt the idea, *any way you wish*.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/647
https://github.com/qupath/qupath/pull/647:372,Modifiability,variab,variable,372,"This pull request lets a user pass not only a Groovy script name via the qupath-console command line arguments, but also the script's arguments via a `-a` or `--args` option followed by quoted string. This string is then split on whitespace into a list of strings (unless a block is surrounded by \\"" \\"" escaped quotes) and passed to the Groovy interpreter as the global variable args. When no arguments are passed to a script, the global variable args is an empty list. With this change, the integrated script editor / interpreter also gets an empty, global args variable. I explained in https://forum.image.sc/t/using-command-line-parameters-with-a-groovy-script-in-qupath/45949/4 why this is desirable. Feel free to merge this pull request, or to adapt the idea, *any way you wish*.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/647
https://github.com/qupath/qupath/pull/647:440,Modifiability,variab,variable,440,"This pull request lets a user pass not only a Groovy script name via the qupath-console command line arguments, but also the script's arguments via a `-a` or `--args` option followed by quoted string. This string is then split on whitespace into a list of strings (unless a block is surrounded by \\"" \\"" escaped quotes) and passed to the Groovy interpreter as the global variable args. When no arguments are passed to a script, the global variable args is an empty list. With this change, the integrated script editor / interpreter also gets an empty, global args variable. I explained in https://forum.image.sc/t/using-command-line-parameters-with-a-groovy-script-in-qupath/45949/4 why this is desirable. Feel free to merge this pull request, or to adapt the idea, *any way you wish*.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/647
https://github.com/qupath/qupath/pull/647:565,Modifiability,variab,variable,565,"This pull request lets a user pass not only a Groovy script name via the qupath-console command line arguments, but also the script's arguments via a `-a` or `--args` option followed by quoted string. This string is then split on whitespace into a list of strings (unless a block is surrounded by \\"" \\"" escaped quotes) and passed to the Groovy interpreter as the global variable args. When no arguments are passed to a script, the global variable args is an empty list. With this change, the integrated script editor / interpreter also gets an empty, global args variable. I explained in https://forum.image.sc/t/using-command-line-parameters-with-a-groovy-script-in-qupath/45949/4 why this is desirable. Feel free to merge this pull request, or to adapt the idea, *any way you wish*.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/647
https://github.com/qupath/qupath/pull/647:751,Modifiability,adapt,adapt,751,"This pull request lets a user pass not only a Groovy script name via the qupath-console command line arguments, but also the script's arguments via a `-a` or `--args` option followed by quoted string. This string is then split on whitespace into a list of strings (unless a block is surrounded by \\"" \\"" escaped quotes) and passed to the Groovy interpreter as the global variable args. When no arguments are passed to a script, the global variable args is an empty list. With this change, the integrated script editor / interpreter also gets an empty, global args variable. I explained in https://forum.image.sc/t/using-command-line-parameters-with-a-groovy-script-in-qupath/45949/4 why this is desirable. Feel free to merge this pull request, or to adapt the idea, *any way you wish*.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/647
https://github.com/qupath/qupath/issues/648:271,Availability,down,downsample,271,"In the file `qupath-core/src/main/java/qupath/lib/images/writers/TileExporter.java` the definition of the `requestedPixelSize` method has the fraction the wrong way up; it should instead read:. ```java; 	public TileExporter requestedPixelSize(double pixelSize) {; 		this.downsample = pixelSize / server.getPixelCalibration().getAveragedPixelSize().doubleValue();; 		return this;; 	}; ```. Otherwise, if the requested pixel size is 5.0, say, and the average pixel size is 0.25, the downsample value is set to 1/20 instead of the correct 20. This affects the current GitHub version of QuPath (at commit 3ca92f9026c9c32bcfb28de419673d2beac49c4a).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/648
https://github.com/qupath/qupath/issues/648:481,Availability,down,downsample,481,"In the file `qupath-core/src/main/java/qupath/lib/images/writers/TileExporter.java` the definition of the `requestedPixelSize` method has the fraction the wrong way up; it should instead read:. ```java; 	public TileExporter requestedPixelSize(double pixelSize) {; 		this.downsample = pixelSize / server.getPixelCalibration().getAveragedPixelSize().doubleValue();; 		return this;; 	}; ```. Otherwise, if the requested pixel size is 5.0, say, and the average pixel size is 0.25, the downsample value is set to 1/20 instead of the correct 20. This affects the current GitHub version of QuPath (at commit 3ca92f9026c9c32bcfb28de419673d2beac49c4a).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/648
https://github.com/qupath/qupath/issues/649:57,Availability,down,downscaled,57,"In `splitRegionRequests`, the working coordinates are in downscaled pixels, and stored in `maxX` and `maxY`. However, the two nested `for` loops over `x` and `y` have incorrect initialisers: for `y` it is `int y = request.getY()` instead of `int y = (int)(request.getMinY() / downsample)`. It probably doesn't matter much, though, as presumably `request.getY()` and `request.getMinY()` both return 0 in normal situations.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/649
https://github.com/qupath/qupath/issues/649:276,Availability,down,downsample,276,"In `splitRegionRequests`, the working coordinates are in downscaled pixels, and stored in `maxX` and `maxY`. However, the two nested `for` loops over `x` and `y` have incorrect initialisers: for `y` it is `int y = request.getY()` instead of `int y = (int)(request.getMinY() / downsample)`. It probably doesn't matter much, though, as presumably `request.getY()` and `request.getMinY()` both return 0 in normal situations.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/649
https://github.com/qupath/qupath/pull/651:18,Deployability,patch,patches,18,"This set of three patches fixes #648, fixes #649 and fixes #650.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/651
https://github.com/qupath/qupath/pull/652:15,Deployability,patch,patches,15,"A clean set of patches this time that fixes #648, fixes #649, fixes #650",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/652
https://github.com/qupath/qupath/issues/654:354,Availability,error,error,354,"With QuPath-0.2.3, I ran a broken script like this:; ```; QuPath-0.2.3 script -i /path/to/image.tif brokenscript; ```; where `brokenscript` gave a Java exception. Unfortunately, QuPath then exited with status 0 (EXIT_SUCCESS), meaning that my calling script cannot easily test whether the script worked or not. It would be great if QuPath exited with an error status if the script exits with an error. Best wishes, Julian",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/654
https://github.com/qupath/qupath/issues/654:395,Availability,error,error,395,"With QuPath-0.2.3, I ran a broken script like this:; ```; QuPath-0.2.3 script -i /path/to/image.tif brokenscript; ```; where `brokenscript` gave a Java exception. Unfortunately, QuPath then exited with status 0 (EXIT_SUCCESS), meaning that my calling script cannot easily test whether the script worked or not. It would be great if QuPath exited with an error status if the script exits with an error. Best wishes, Julian",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/654
https://github.com/qupath/qupath/issues/654:272,Testability,test,test,272,"With QuPath-0.2.3, I ran a broken script like this:; ```; QuPath-0.2.3 script -i /path/to/image.tif brokenscript; ```; where `brokenscript` gave a Java exception. Unfortunately, QuPath then exited with status 0 (EXIT_SUCCESS), meaning that my calling script cannot easily test whether the script worked or not. It would be great if QuPath exited with an error status if the script exits with an error. Best wishes, Julian",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/654
https://github.com/qupath/qupath/issues/655:44,Deployability,install,installed,44,"Hi all,; I have an issue on QuPath recently installed on a MacBook Pro (15-inch, 2016).; When I upload an image, in the dashboard the name displayed does not correspond to the name of the file I uploaded.; <img width=""402"" alt=""Screenshot 2020-12-12 at 18 25 57"" src=""https://user-images.githubusercontent.com/66163009/101990545-bb07fd00-3ca7-11eb-9209-e9d5e8d1732a.png"">; On the contrary I do not have this issue when I open the same version of QuPath on a PC.; My version of QuPath is the following: **version 0.2.3**",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/655
https://github.com/qupath/qupath/pull/656:24,Availability,down,downloads,24,"Add badge for number of downloads (all releases), downloads for latest release and DOI link.; ![image](https://user-images.githubusercontent.com/10900214/103023501-15ad1e80-451c-11eb-970f-87409de3e9df.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/656
https://github.com/qupath/qupath/pull/656:50,Availability,down,downloads,50,"Add badge for number of downloads (all releases), downloads for latest release and DOI link.; ![image](https://user-images.githubusercontent.com/10900214/103023501-15ad1e80-451c-11eb-970f-87409de3e9df.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/656
https://github.com/qupath/qupath/pull/656:39,Deployability,release,releases,39,"Add badge for number of downloads (all releases), downloads for latest release and DOI link.; ![image](https://user-images.githubusercontent.com/10900214/103023501-15ad1e80-451c-11eb-970f-87409de3e9df.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/656
https://github.com/qupath/qupath/pull/656:71,Deployability,release,release,71,"Add badge for number of downloads (all releases), downloads for latest release and DOI link.; ![image](https://user-images.githubusercontent.com/10900214/103023501-15ad1e80-451c-11eb-970f-87409de3e9df.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/656
https://github.com/qupath/qupath/issues/657:205,Deployability,integrat,integrate,205,"Hello,. I have tried tissue detection using the ""Simple Tissue Detection (deprecated)"" and ""Create Thresholder"" commands. The main problem here are often missing parts of adipose tissue. Is it possible to integrate another algorithm using structure information? Described for example in ; Bug, Daniel, Friedrich Feuerhake, und Dorit Merhof. „Foreground Extraction for Histopathological Whole Slide Imaging“. In Bildverarbeitung für die Medizin 2015, 419–424. Springer, 2015. http://link.springer.com/chapter/10.1007/978-3-662-46224-9_72. I have added some lines of code for testing to ""SimpleTissueDetection2.java"". The Laplacian operator was replaced with the Canny edge detector and the floodFill steps by findContours/fillPoly using the OpenCV bindings. ; [patch-tissue-extraction.zip](https://github.com/qupath/qupath/files/5761754/patch-tissue-extraction.zip). Best regards,. Kai",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/657
https://github.com/qupath/qupath/issues/657:760,Deployability,patch,patch-tissue-extraction,760,"Hello,. I have tried tissue detection using the ""Simple Tissue Detection (deprecated)"" and ""Create Thresholder"" commands. The main problem here are often missing parts of adipose tissue. Is it possible to integrate another algorithm using structure information? Described for example in ; Bug, Daniel, Friedrich Feuerhake, und Dorit Merhof. „Foreground Extraction for Histopathological Whole Slide Imaging“. In Bildverarbeitung für die Medizin 2015, 419–424. Springer, 2015. http://link.springer.com/chapter/10.1007/978-3-662-46224-9_72. I have added some lines of code for testing to ""SimpleTissueDetection2.java"". The Laplacian operator was replaced with the Canny edge detector and the floodFill steps by findContours/fillPoly using the OpenCV bindings. ; [patch-tissue-extraction.zip](https://github.com/qupath/qupath/files/5761754/patch-tissue-extraction.zip). Best regards,. Kai",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/657
https://github.com/qupath/qupath/issues/657:836,Deployability,patch,patch-tissue-extraction,836,"Hello,. I have tried tissue detection using the ""Simple Tissue Detection (deprecated)"" and ""Create Thresholder"" commands. The main problem here are often missing parts of adipose tissue. Is it possible to integrate another algorithm using structure information? Described for example in ; Bug, Daniel, Friedrich Feuerhake, und Dorit Merhof. „Foreground Extraction for Histopathological Whole Slide Imaging“. In Bildverarbeitung für die Medizin 2015, 419–424. Springer, 2015. http://link.springer.com/chapter/10.1007/978-3-662-46224-9_72. I have added some lines of code for testing to ""SimpleTissueDetection2.java"". The Laplacian operator was replaced with the Canny edge detector and the floodFill steps by findContours/fillPoly using the OpenCV bindings. ; [patch-tissue-extraction.zip](https://github.com/qupath/qupath/files/5761754/patch-tissue-extraction.zip). Best regards,. Kai",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/657
https://github.com/qupath/qupath/issues/657:205,Integrability,integrat,integrate,205,"Hello,. I have tried tissue detection using the ""Simple Tissue Detection (deprecated)"" and ""Create Thresholder"" commands. The main problem here are often missing parts of adipose tissue. Is it possible to integrate another algorithm using structure information? Described for example in ; Bug, Daniel, Friedrich Feuerhake, und Dorit Merhof. „Foreground Extraction for Histopathological Whole Slide Imaging“. In Bildverarbeitung für die Medizin 2015, 419–424. Springer, 2015. http://link.springer.com/chapter/10.1007/978-3-662-46224-9_72. I have added some lines of code for testing to ""SimpleTissueDetection2.java"". The Laplacian operator was replaced with the Canny edge detector and the floodFill steps by findContours/fillPoly using the OpenCV bindings. ; [patch-tissue-extraction.zip](https://github.com/qupath/qupath/files/5761754/patch-tissue-extraction.zip). Best regards,. Kai",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/657
https://github.com/qupath/qupath/issues/657:28,Safety,detect,detection,28,"Hello,. I have tried tissue detection using the ""Simple Tissue Detection (deprecated)"" and ""Create Thresholder"" commands. The main problem here are often missing parts of adipose tissue. Is it possible to integrate another algorithm using structure information? Described for example in ; Bug, Daniel, Friedrich Feuerhake, und Dorit Merhof. „Foreground Extraction for Histopathological Whole Slide Imaging“. In Bildverarbeitung für die Medizin 2015, 419–424. Springer, 2015. http://link.springer.com/chapter/10.1007/978-3-662-46224-9_72. I have added some lines of code for testing to ""SimpleTissueDetection2.java"". The Laplacian operator was replaced with the Canny edge detector and the floodFill steps by findContours/fillPoly using the OpenCV bindings. ; [patch-tissue-extraction.zip](https://github.com/qupath/qupath/files/5761754/patch-tissue-extraction.zip). Best regards,. Kai",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/657
https://github.com/qupath/qupath/issues/657:63,Safety,Detect,Detection,63,"Hello,. I have tried tissue detection using the ""Simple Tissue Detection (deprecated)"" and ""Create Thresholder"" commands. The main problem here are often missing parts of adipose tissue. Is it possible to integrate another algorithm using structure information? Described for example in ; Bug, Daniel, Friedrich Feuerhake, und Dorit Merhof. „Foreground Extraction for Histopathological Whole Slide Imaging“. In Bildverarbeitung für die Medizin 2015, 419–424. Springer, 2015. http://link.springer.com/chapter/10.1007/978-3-662-46224-9_72. I have added some lines of code for testing to ""SimpleTissueDetection2.java"". The Laplacian operator was replaced with the Canny edge detector and the floodFill steps by findContours/fillPoly using the OpenCV bindings. ; [patch-tissue-extraction.zip](https://github.com/qupath/qupath/files/5761754/patch-tissue-extraction.zip). Best regards,. Kai",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/657
https://github.com/qupath/qupath/issues/657:672,Safety,detect,detector,672,"Hello,. I have tried tissue detection using the ""Simple Tissue Detection (deprecated)"" and ""Create Thresholder"" commands. The main problem here are often missing parts of adipose tissue. Is it possible to integrate another algorithm using structure information? Described for example in ; Bug, Daniel, Friedrich Feuerhake, und Dorit Merhof. „Foreground Extraction for Histopathological Whole Slide Imaging“. In Bildverarbeitung für die Medizin 2015, 419–424. Springer, 2015. http://link.springer.com/chapter/10.1007/978-3-662-46224-9_72. I have added some lines of code for testing to ""SimpleTissueDetection2.java"". The Laplacian operator was replaced with the Canny edge detector and the floodFill steps by findContours/fillPoly using the OpenCV bindings. ; [patch-tissue-extraction.zip](https://github.com/qupath/qupath/files/5761754/patch-tissue-extraction.zip). Best regards,. Kai",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/657
https://github.com/qupath/qupath/issues/657:574,Testability,test,testing,574,"Hello,. I have tried tissue detection using the ""Simple Tissue Detection (deprecated)"" and ""Create Thresholder"" commands. The main problem here are often missing parts of adipose tissue. Is it possible to integrate another algorithm using structure information? Described for example in ; Bug, Daniel, Friedrich Feuerhake, und Dorit Merhof. „Foreground Extraction for Histopathological Whole Slide Imaging“. In Bildverarbeitung für die Medizin 2015, 419–424. Springer, 2015. http://link.springer.com/chapter/10.1007/978-3-662-46224-9_72. I have added some lines of code for testing to ""SimpleTissueDetection2.java"". The Laplacian operator was replaced with the Canny edge detector and the floodFill steps by findContours/fillPoly using the OpenCV bindings. ; [patch-tissue-extraction.zip](https://github.com/qupath/qupath/files/5761754/patch-tissue-extraction.zip). Best regards,. Kai",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/657
https://github.com/qupath/qupath/issues/657:49,Usability,Simpl,Simple,49,"Hello,. I have tried tissue detection using the ""Simple Tissue Detection (deprecated)"" and ""Create Thresholder"" commands. The main problem here are often missing parts of adipose tissue. Is it possible to integrate another algorithm using structure information? Described for example in ; Bug, Daniel, Friedrich Feuerhake, und Dorit Merhof. „Foreground Extraction for Histopathological Whole Slide Imaging“. In Bildverarbeitung für die Medizin 2015, 419–424. Springer, 2015. http://link.springer.com/chapter/10.1007/978-3-662-46224-9_72. I have added some lines of code for testing to ""SimpleTissueDetection2.java"". The Laplacian operator was replaced with the Canny edge detector and the floodFill steps by findContours/fillPoly using the OpenCV bindings. ; [patch-tissue-extraction.zip](https://github.com/qupath/qupath/files/5761754/patch-tissue-extraction.zip). Best regards,. Kai",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/657
https://github.com/qupath/qupath/issues/658:1084,Availability,down,downsampled,1084,"ory: Warning, Unknown field with tag 34677 (0x8775) encountered.`. I have specifically instructed QuPath to open the image using the BioFormats library, which knows how to handle this tag. Here is the script:. ```groovy; import qupath.lib.scripting.QP. // We want to specify the image server so that we get replicable results; // https://forum.image.sc/t/specifying-the-imageserver-image-provider-server-type>. // Get the URI of the image under consideration; we need to pass this; // to the new server. The image is specified as a commandline parameter; // in the QuPath call.; def currentServer = getCurrentServer(); def uri = currentServer.getURIs()[0]. def server = new qupath.lib.images.servers.bioformats.BioFormatsServerBuilder().buildServer(uri). // Get the current image and image name; def imageData = new ImageData(server); def name = server.getMetadata().getName(). def save_path = ""thumbnail_dir/"" + name + "".png"". def scale_factor = 8.0. // Save the entire image downsampled by a factor of scale_factor; def requestFull = RegionRequest.createInstance(server, scale_factor); writeImageRegion(server, requestFull, save_path); ```. I run it using the command line: . ```; qupath script -i ""31629 HE.bif"" image_thumbnail.groovy; ```. and the output is as follows:. ```; 11:36:08.817 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8030.00 MB (25.0% max memory); 11:36:09.171 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /tmp/qupath-memo-14642445523855977691; 11:36:09.172 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 11:36:09.363 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; TIFFReadDirectory: Warning, Unknown field with tag 34677 (0x8775) encountered.; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-width' not av",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/658
https://github.com/qupath/qupath/issues/658:2106,Availability,avail,available,2106,"ver(uri). // Get the current image and image name; def imageData = new ImageData(server); def name = server.getMetadata().getName(). def save_path = ""thumbnail_dir/"" + name + "".png"". def scale_factor = 8.0. // Save the entire image downsampled by a factor of scale_factor; def requestFull = RegionRequest.createInstance(server, scale_factor); writeImageRegion(server, requestFull, save_path); ```. I run it using the command line: . ```; qupath script -i ""31629 HE.bif"" image_thumbnail.groovy; ```. and the output is as follows:. ```; 11:36:08.817 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8030.00 MB (25.0% max memory); 11:36:09.171 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /tmp/qupath-memo-14642445523855977691; 11:36:09.172 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 11:36:09.363 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; TIFFReadDirectory: Warning, Unknown field with tag 34677 (0x8775) encountered.; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-width' not available, will return default value 256.0; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-height' not available, will return default value 256.0; 11:36:09.999 [main] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; ```. Note the `TIFFReadDirectory` warning message in the middle of this. This strongly suggests that the OpenslideServer is actually being used rather than the BioFormats server, despite the explicit commands in the script to use BioFormats. **Expected behavior**; The BioFormats server should be used to open and read the image, as instructed. **Desktop (please complete the following information):**; - OS: Debian GNU/Linux; - QuPath Version 0.2.3. Thanks!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/658
https://github.com/qupath/qupath/issues/658:2268,Availability,avail,available,2268,"ver(uri). // Get the current image and image name; def imageData = new ImageData(server); def name = server.getMetadata().getName(). def save_path = ""thumbnail_dir/"" + name + "".png"". def scale_factor = 8.0. // Save the entire image downsampled by a factor of scale_factor; def requestFull = RegionRequest.createInstance(server, scale_factor); writeImageRegion(server, requestFull, save_path); ```. I run it using the command line: . ```; qupath script -i ""31629 HE.bif"" image_thumbnail.groovy; ```. and the output is as follows:. ```; 11:36:08.817 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8030.00 MB (25.0% max memory); 11:36:09.171 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /tmp/qupath-memo-14642445523855977691; 11:36:09.172 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 11:36:09.363 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; TIFFReadDirectory: Warning, Unknown field with tag 34677 (0x8775) encountered.; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-width' not available, will return default value 256.0; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-height' not available, will return default value 256.0; 11:36:09.999 [main] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; ```. Note the `TIFFReadDirectory` warning message in the middle of this. This strongly suggests that the OpenslideServer is actually being used rather than the BioFormats server, despite the explicit commands in the script to use BioFormats. **Expected behavior**; The BioFormats server should be used to open and read the image, as instructed. **Desktop (please complete the following information):**; - OS: Debian GNU/Linux; - QuPath Version 0.2.3. Thanks!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/658
https://github.com/qupath/qupath/issues/658:2384,Energy Efficiency,adapt,adapters,2384,"ver(uri). // Get the current image and image name; def imageData = new ImageData(server); def name = server.getMetadata().getName(). def save_path = ""thumbnail_dir/"" + name + "".png"". def scale_factor = 8.0. // Save the entire image downsampled by a factor of scale_factor; def requestFull = RegionRequest.createInstance(server, scale_factor); writeImageRegion(server, requestFull, save_path); ```. I run it using the command line: . ```; qupath script -i ""31629 HE.bif"" image_thumbnail.groovy; ```. and the output is as follows:. ```; 11:36:08.817 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8030.00 MB (25.0% max memory); 11:36:09.171 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /tmp/qupath-memo-14642445523855977691; 11:36:09.172 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 11:36:09.363 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; TIFFReadDirectory: Warning, Unknown field with tag 34677 (0x8775) encountered.; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-width' not available, will return default value 256.0; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-height' not available, will return default value 256.0; 11:36:09.999 [main] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; ```. Note the `TIFFReadDirectory` warning message in the middle of this. This strongly suggests that the OpenslideServer is actually being used rather than the BioFormats server, despite the explicit commands in the script to use BioFormats. **Expected behavior**; The BioFormats server should be used to open and read the image, as instructed. **Desktop (please complete the following information):**; - OS: Debian GNU/Linux; - QuPath Version 0.2.3. Thanks!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/658
https://github.com/qupath/qupath/issues/658:82,Integrability,message,message,82,"**Describe the bug/To Reproduce**. On some Ventana BIF images, there is a warning message:; `TIFFReadDirectory: Warning, Unknown field with tag 34677 (0x8775) encountered.`. I have specifically instructed QuPath to open the image using the BioFormats library, which knows how to handle this tag. Here is the script:. ```groovy; import qupath.lib.scripting.QP. // We want to specify the image server so that we get replicable results; // https://forum.image.sc/t/specifying-the-imageserver-image-provider-server-type>. // Get the URI of the image under consideration; we need to pass this; // to the new server. The image is specified as a commandline parameter; // in the QuPath call.; def currentServer = getCurrentServer(); def uri = currentServer.getURIs()[0]. def server = new qupath.lib.images.servers.bioformats.BioFormatsServerBuilder().buildServer(uri). // Get the current image and image name; def imageData = new ImageData(server); def name = server.getMetadata().getName(). def save_path = ""thumbnail_dir/"" + name + "".png"". def scale_factor = 8.0. // Save the entire image downsampled by a factor of scale_factor; def requestFull = RegionRequest.createInstance(server, scale_factor); writeImageRegion(server, requestFull, save_path); ```. I run it using the command line: . ```; qupath script -i ""31629 HE.bif"" image_thumbnail.groovy; ```. and the output is as follows:. ```; 11:36:08.817 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8030.00 MB (25.0% max memory); 11:36:09.171 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /tmp/qupath-memo-14642445523855977691; 11:36:09.172 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 11:36:09.363 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; TIFFReadDirectory: Warning, Unknown field with tag 34677 (0x8775) encountered.; 11:36:09.429",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/658
https://github.com/qupath/qupath/issues/658:2384,Integrability,adapter,adapters,2384,"ver(uri). // Get the current image and image name; def imageData = new ImageData(server); def name = server.getMetadata().getName(). def save_path = ""thumbnail_dir/"" + name + "".png"". def scale_factor = 8.0. // Save the entire image downsampled by a factor of scale_factor; def requestFull = RegionRequest.createInstance(server, scale_factor); writeImageRegion(server, requestFull, save_path); ```. I run it using the command line: . ```; qupath script -i ""31629 HE.bif"" image_thumbnail.groovy; ```. and the output is as follows:. ```; 11:36:08.817 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8030.00 MB (25.0% max memory); 11:36:09.171 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /tmp/qupath-memo-14642445523855977691; 11:36:09.172 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 11:36:09.363 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; TIFFReadDirectory: Warning, Unknown field with tag 34677 (0x8775) encountered.; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-width' not available, will return default value 256.0; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-height' not available, will return default value 256.0; 11:36:09.999 [main] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; ```. Note the `TIFFReadDirectory` warning message in the middle of this. This strongly suggests that the OpenslideServer is actually being used rather than the BioFormats server, despite the explicit commands in the script to use BioFormats. **Expected behavior**; The BioFormats server should be used to open and read the image, as instructed. **Desktop (please complete the following information):**; - OS: Debian GNU/Linux; - QuPath Version 0.2.3. Thanks!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/658
https://github.com/qupath/qupath/issues/658:2436,Integrability,message,message,2436,"ver(uri). // Get the current image and image name; def imageData = new ImageData(server); def name = server.getMetadata().getName(). def save_path = ""thumbnail_dir/"" + name + "".png"". def scale_factor = 8.0. // Save the entire image downsampled by a factor of scale_factor; def requestFull = RegionRequest.createInstance(server, scale_factor); writeImageRegion(server, requestFull, save_path); ```. I run it using the command line: . ```; qupath script -i ""31629 HE.bif"" image_thumbnail.groovy; ```. and the output is as follows:. ```; 11:36:08.817 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8030.00 MB (25.0% max memory); 11:36:09.171 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /tmp/qupath-memo-14642445523855977691; 11:36:09.172 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 11:36:09.363 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; TIFFReadDirectory: Warning, Unknown field with tag 34677 (0x8775) encountered.; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-width' not available, will return default value 256.0; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-height' not available, will return default value 256.0; 11:36:09.999 [main] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; ```. Note the `TIFFReadDirectory` warning message in the middle of this. This strongly suggests that the OpenslideServer is actually being used rather than the BioFormats server, despite the explicit commands in the script to use BioFormats. **Expected behavior**; The BioFormats server should be used to open and read the image, as instructed. **Desktop (please complete the following information):**; - OS: Debian GNU/Linux; - QuPath Version 0.2.3. Thanks!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/658
https://github.com/qupath/qupath/issues/658:2384,Modifiability,adapt,adapters,2384,"ver(uri). // Get the current image and image name; def imageData = new ImageData(server); def name = server.getMetadata().getName(). def save_path = ""thumbnail_dir/"" + name + "".png"". def scale_factor = 8.0. // Save the entire image downsampled by a factor of scale_factor; def requestFull = RegionRequest.createInstance(server, scale_factor); writeImageRegion(server, requestFull, save_path); ```. I run it using the command line: . ```; qupath script -i ""31629 HE.bif"" image_thumbnail.groovy; ```. and the output is as follows:. ```; 11:36:08.817 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8030.00 MB (25.0% max memory); 11:36:09.171 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /tmp/qupath-memo-14642445523855977691; 11:36:09.172 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 11:36:09.363 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; TIFFReadDirectory: Warning, Unknown field with tag 34677 (0x8775) encountered.; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-width' not available, will return default value 256.0; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-height' not available, will return default value 256.0; 11:36:09.999 [main] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; ```. Note the `TIFFReadDirectory` warning message in the middle of this. This strongly suggests that the OpenslideServer is actually being used rather than the BioFormats server, despite the explicit commands in the script to use BioFormats. **Expected behavior**; The BioFormats server should be used to open and read the image, as instructed. **Desktop (please complete the following information):**; - OS: Debian GNU/Linux; - QuPath Version 0.2.3. Thanks!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/658
https://github.com/qupath/qupath/issues/658:1451,Performance,cache,cache,1451,"orum.image.sc/t/specifying-the-imageserver-image-provider-server-type>. // Get the URI of the image under consideration; we need to pass this; // to the new server. The image is specified as a commandline parameter; // in the QuPath call.; def currentServer = getCurrentServer(); def uri = currentServer.getURIs()[0]. def server = new qupath.lib.images.servers.bioformats.BioFormatsServerBuilder().buildServer(uri). // Get the current image and image name; def imageData = new ImageData(server); def name = server.getMetadata().getName(). def save_path = ""thumbnail_dir/"" + name + "".png"". def scale_factor = 8.0. // Save the entire image downsampled by a factor of scale_factor; def requestFull = RegionRequest.createInstance(server, scale_factor); writeImageRegion(server, requestFull, save_path); ```. I run it using the command line: . ```; qupath script -i ""31629 HE.bif"" image_thumbnail.groovy; ```. and the output is as follows:. ```; 11:36:08.817 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8030.00 MB (25.0% max memory); 11:36:09.171 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /tmp/qupath-memo-14642445523855977691; 11:36:09.172 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 11:36:09.363 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; TIFFReadDirectory: Warning, Unknown field with tag 34677 (0x8775) encountered.; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-width' not available, will return default value 256.0; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-height' not available, will return default value 256.0; 11:36:09.999 [main] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; ```. Note the `TIFFReadDirectory` warning message in",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/658
https://github.com/qupath/qupath/issues/658:1712,Safety,avoid,avoid,1712,"etURIs()[0]. def server = new qupath.lib.images.servers.bioformats.BioFormatsServerBuilder().buildServer(uri). // Get the current image and image name; def imageData = new ImageData(server); def name = server.getMetadata().getName(). def save_path = ""thumbnail_dir/"" + name + "".png"". def scale_factor = 8.0. // Save the entire image downsampled by a factor of scale_factor; def requestFull = RegionRequest.createInstance(server, scale_factor); writeImageRegion(server, requestFull, save_path); ```. I run it using the command line: . ```; qupath script -i ""31629 HE.bif"" image_thumbnail.groovy; ```. and the output is as follows:. ```; 11:36:08.817 [main] [INFO ] qupath.ScriptCommand - Setting tile cache size to 8030.00 MB (25.0% max memory); 11:36:09.171 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - Temp memoization directory created at /tmp/qupath-memo-14642445523855977691; 11:36:09.172 [main] [WARN ] q.l.i.s.b.BioFormatsImageServer - If you want to avoid this warning, either disable Bio-Formats memoization in the preferences or specify a directory to use; 11:36:09.363 [main] [INFO ] q.l.i.s.o.OpenslideServerBuilder - OpenSlide version 3.4.1; TIFFReadDirectory: Warning, Unknown field with tag 34677 (0x8775) encountered.; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-width' not available, will return default value 256.0; 11:36:09.429 [main] [WARN ] q.l.i.s.o.OpenslideImageServer - Openslide: Property 'openslide.level[0].tile-height' not available, will return default value 256.0; 11:36:09.999 [main] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; ```. Note the `TIFFReadDirectory` warning message in the middle of this. This strongly suggests that the OpenslideServer is actually being used rather than the BioFormats server, despite the explicit commands in the script to use BioFormats. **Expected behavior**; The BioFormats server should be used to open and read the image, as instructed. **Desktop (pl",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/658
https://github.com/qupath/qupath/issues/661:820,Usability,clear,clear-annotation-description-in-qupath,820,"## Bug report. **Describe the bug**; In v0.2 it isn't possible to set an annotation description, then reset it (by removing the text). **To Reproduce**; Steps to reproduce the behavior:; 1. Create an annotation; 2. Change the description in the properties and apply the change; 3. Delete the description and (try to) apply the change. Alternatively use this script:. ```groovy; def roi = ROIs.createRectangleROI(0, 0, 100, 100, ImagePlane.getDefaultPlane()); def annotation = PathObjects.createAnnotationObject(roi); annotation.setDescription(""something""); annotation.setDescription(null); ```. **Expected behavior**; Setting description to null or an empty string removes it. **Desktop (please complete the following information):**; - QuPath Version 0.2. **Additional context**; See https://forum.image.sc/t/unable-to-clear-annotation-description-in-qupath/47741. Should be quite straightforward to fix, but subtleties take a bit of thought.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/661
https://github.com/qupath/qupath/issues/664:369,Availability,recover,recovers,369,"## Bug report. **Describe the bug**; QuPath throws an exception when attempting to show the extensions in the UI when the manifest is `null`. **To Reproduce**; See https://forum.image.sc/t/qupath-script-debugging-in-eclipse/47699/4?u=petebankhead; Issue is reproducible with the provided jar (even though it *does* contain a manifest...). **Expected behavior**; QuPath recovers from the `null` and continues with its best-guess at a version. **Additional context**; Problem method is at https://github.com/qupath/qupath/blob/43aad4ecda893a7eb03c30774e64da5b9547bc86/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/ShowInstalledExtensionsCommand.java#L228-L240. This works around the issue:; ```java; if (stream != null) {; Manifest manifest = stream.getManifest();; if (manifest != null) {; Attributes mainAttributes = manifest.getMainAttributes();; return mainAttributes.getValue(""Implementation-Version"");						; }; }; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/664
https://github.com/qupath/qupath/issues/664:369,Safety,recover,recovers,369,"## Bug report. **Describe the bug**; QuPath throws an exception when attempting to show the extensions in the UI when the manifest is `null`. **To Reproduce**; See https://forum.image.sc/t/qupath-script-debugging-in-eclipse/47699/4?u=petebankhead; Issue is reproducible with the provided jar (even though it *does* contain a manifest...). **Expected behavior**; QuPath recovers from the `null` and continues with its best-guess at a version. **Additional context**; Problem method is at https://github.com/qupath/qupath/blob/43aad4ecda893a7eb03c30774e64da5b9547bc86/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/ShowInstalledExtensionsCommand.java#L228-L240. This works around the issue:; ```java; if (stream != null) {; Manifest manifest = stream.getManifest();; if (manifest != null) {; Attributes mainAttributes = manifest.getMainAttributes();; return mainAttributes.getValue(""Implementation-Version"");						; }; }; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/664
https://github.com/qupath/qupath/pull/665:61,Availability,Down,Download,61,"Used for deep learning optimization (StarDist algorithm); 1. Download model in OpenVINO Intermediate Representation format:; [dsb2018_heavy_augment.zip](https://mega.nz/file/IY92FbjK#ppzuYyjdxp9lPLZ2J6BnN6bCUFeZkRgbbolT4cSMI6w); [he_heavy_augment.zip](https://mega.nz/file/1U1wmTYR#HFLXGNjoAS3WR3E64-g7K3QT58cBxbrAJci2iD0EMkE); INT8: [he_heavy_augment_int8.zip](https://mega.nz/file/NMsgzJgZ#JseSxOTcOeqQbG2X9p3W2e-CXgJ6KjC8n1cs4QS49mY); INT8: [dsb2018_heavy_augment_int8.zip](https://mega.nz/file/oAkFDKBA#ZjVP4f2Il_tcjsc0iywpVRXLLvh8lBkkAD3wJ7rDdmQ). Performance:. | Intel(R) Core(TM) i7-6700K | **Test image**: OS-3.ndpi<br>**Model**: he_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 2183 | **Test image**: LuCa-7color_Scan1.qptiff<br>**Model**: dsb2018_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 936 |; |---|---|---|; | TensorFlow backend | 23:05 minutes | 14:20 minutes; | OpenVINO backend | 15:28 minutes (x1.5) | 10:39 minutes (x1.36); | OpenVINO backend (INT8) | 12:29 minutes (x1.87) | 8:43 (x1.68); | OpenVINO backend (INT8) + NormalizePercentileOp | 11:55 minutes (x1.99) | 8:27 minutes (x1.7). Build with OpenVINO:; ```; ./gradlew clean build createPackage -Puse_openvino=true; ```. Use `build` argument to enable OpenVINO backend:; ```groovy; def stardist = StarDist2D.builder(pathModel); .threshold(0.5) // Prediction threshold; .normalizePercentiles(1, 99) // Percentile normalization; .pixelSize(0.5) // Resolution for detection; .build(""openvino"") // or ""tensorflow"" to use TensorFlow backend. If empty, use any available backend; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/665
https://github.com/qupath/qupath/pull/665:1572,Availability,avail,available,1572,"Used for deep learning optimization (StarDist algorithm); 1. Download model in OpenVINO Intermediate Representation format:; [dsb2018_heavy_augment.zip](https://mega.nz/file/IY92FbjK#ppzuYyjdxp9lPLZ2J6BnN6bCUFeZkRgbbolT4cSMI6w); [he_heavy_augment.zip](https://mega.nz/file/1U1wmTYR#HFLXGNjoAS3WR3E64-g7K3QT58cBxbrAJci2iD0EMkE); INT8: [he_heavy_augment_int8.zip](https://mega.nz/file/NMsgzJgZ#JseSxOTcOeqQbG2X9p3W2e-CXgJ6KjC8n1cs4QS49mY); INT8: [dsb2018_heavy_augment_int8.zip](https://mega.nz/file/oAkFDKBA#ZjVP4f2Il_tcjsc0iywpVRXLLvh8lBkkAD3wJ7rDdmQ). Performance:. | Intel(R) Core(TM) i7-6700K | **Test image**: OS-3.ndpi<br>**Model**: he_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 2183 | **Test image**: LuCa-7color_Scan1.qptiff<br>**Model**: dsb2018_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 936 |; |---|---|---|; | TensorFlow backend | 23:05 minutes | 14:20 minutes; | OpenVINO backend | 15:28 minutes (x1.5) | 10:39 minutes (x1.36); | OpenVINO backend (INT8) | 12:29 minutes (x1.87) | 8:43 (x1.68); | OpenVINO backend (INT8) + NormalizePercentileOp | 11:55 minutes (x1.99) | 8:27 minutes (x1.7). Build with OpenVINO:; ```; ./gradlew clean build createPackage -Puse_openvino=true; ```. Use `build` argument to enable OpenVINO backend:; ```groovy; def stardist = StarDist2D.builder(pathModel); .threshold(0.5) // Prediction threshold; .normalizePercentiles(1, 99) // Percentile normalization; .pixelSize(0.5) // Resolution for detection; .build(""openvino"") // or ""tensorflow"" to use TensorFlow backend. If empty, use any available backend; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/665
https://github.com/qupath/qupath/pull/665:23,Performance,optimiz,optimization,23,"Used for deep learning optimization (StarDist algorithm); 1. Download model in OpenVINO Intermediate Representation format:; [dsb2018_heavy_augment.zip](https://mega.nz/file/IY92FbjK#ppzuYyjdxp9lPLZ2J6BnN6bCUFeZkRgbbolT4cSMI6w); [he_heavy_augment.zip](https://mega.nz/file/1U1wmTYR#HFLXGNjoAS3WR3E64-g7K3QT58cBxbrAJci2iD0EMkE); INT8: [he_heavy_augment_int8.zip](https://mega.nz/file/NMsgzJgZ#JseSxOTcOeqQbG2X9p3W2e-CXgJ6KjC8n1cs4QS49mY); INT8: [dsb2018_heavy_augment_int8.zip](https://mega.nz/file/oAkFDKBA#ZjVP4f2Il_tcjsc0iywpVRXLLvh8lBkkAD3wJ7rDdmQ). Performance:. | Intel(R) Core(TM) i7-6700K | **Test image**: OS-3.ndpi<br>**Model**: he_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 2183 | **Test image**: LuCa-7color_Scan1.qptiff<br>**Model**: dsb2018_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 936 |; |---|---|---|; | TensorFlow backend | 23:05 minutes | 14:20 minutes; | OpenVINO backend | 15:28 minutes (x1.5) | 10:39 minutes (x1.36); | OpenVINO backend (INT8) | 12:29 minutes (x1.87) | 8:43 (x1.68); | OpenVINO backend (INT8) + NormalizePercentileOp | 11:55 minutes (x1.99) | 8:27 minutes (x1.7). Build with OpenVINO:; ```; ./gradlew clean build createPackage -Puse_openvino=true; ```. Use `build` argument to enable OpenVINO backend:; ```groovy; def stardist = StarDist2D.builder(pathModel); .threshold(0.5) // Prediction threshold; .normalizePercentiles(1, 99) // Percentile normalization; .pixelSize(0.5) // Resolution for detection; .build(""openvino"") // or ""tensorflow"" to use TensorFlow backend. If empty, use any available backend; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/665
https://github.com/qupath/qupath/pull/665:553,Performance,Perform,Performance,553,"Used for deep learning optimization (StarDist algorithm); 1. Download model in OpenVINO Intermediate Representation format:; [dsb2018_heavy_augment.zip](https://mega.nz/file/IY92FbjK#ppzuYyjdxp9lPLZ2J6BnN6bCUFeZkRgbbolT4cSMI6w); [he_heavy_augment.zip](https://mega.nz/file/1U1wmTYR#HFLXGNjoAS3WR3E64-g7K3QT58cBxbrAJci2iD0EMkE); INT8: [he_heavy_augment_int8.zip](https://mega.nz/file/NMsgzJgZ#JseSxOTcOeqQbG2X9p3W2e-CXgJ6KjC8n1cs4QS49mY); INT8: [dsb2018_heavy_augment_int8.zip](https://mega.nz/file/oAkFDKBA#ZjVP4f2Il_tcjsc0iywpVRXLLvh8lBkkAD3wJ7rDdmQ). Performance:. | Intel(R) Core(TM) i7-6700K | **Test image**: OS-3.ndpi<br>**Model**: he_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 2183 | **Test image**: LuCa-7color_Scan1.qptiff<br>**Model**: dsb2018_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 936 |; |---|---|---|; | TensorFlow backend | 23:05 minutes | 14:20 minutes; | OpenVINO backend | 15:28 minutes (x1.5) | 10:39 minutes (x1.36); | OpenVINO backend (INT8) | 12:29 minutes (x1.87) | 8:43 (x1.68); | OpenVINO backend (INT8) + NormalizePercentileOp | 11:55 minutes (x1.99) | 8:27 minutes (x1.7). Build with OpenVINO:; ```; ./gradlew clean build createPackage -Puse_openvino=true; ```. Use `build` argument to enable OpenVINO backend:; ```groovy; def stardist = StarDist2D.builder(pathModel); .threshold(0.5) // Prediction threshold; .normalizePercentiles(1, 99) // Percentile normalization; .pixelSize(0.5) // Resolution for detection; .build(""openvino"") // or ""tensorflow"" to use TensorFlow backend. If empty, use any available backend; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/665
https://github.com/qupath/qupath/pull/665:1364,Safety,Predict,Prediction,1364,"Used for deep learning optimization (StarDist algorithm); 1. Download model in OpenVINO Intermediate Representation format:; [dsb2018_heavy_augment.zip](https://mega.nz/file/IY92FbjK#ppzuYyjdxp9lPLZ2J6BnN6bCUFeZkRgbbolT4cSMI6w); [he_heavy_augment.zip](https://mega.nz/file/1U1wmTYR#HFLXGNjoAS3WR3E64-g7K3QT58cBxbrAJci2iD0EMkE); INT8: [he_heavy_augment_int8.zip](https://mega.nz/file/NMsgzJgZ#JseSxOTcOeqQbG2X9p3W2e-CXgJ6KjC8n1cs4QS49mY); INT8: [dsb2018_heavy_augment_int8.zip](https://mega.nz/file/oAkFDKBA#ZjVP4f2Il_tcjsc0iywpVRXLLvh8lBkkAD3wJ7rDdmQ). Performance:. | Intel(R) Core(TM) i7-6700K | **Test image**: OS-3.ndpi<br>**Model**: he_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 2183 | **Test image**: LuCa-7color_Scan1.qptiff<br>**Model**: dsb2018_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 936 |; |---|---|---|; | TensorFlow backend | 23:05 minutes | 14:20 minutes; | OpenVINO backend | 15:28 minutes (x1.5) | 10:39 minutes (x1.36); | OpenVINO backend (INT8) | 12:29 minutes (x1.87) | 8:43 (x1.68); | OpenVINO backend (INT8) + NormalizePercentileOp | 11:55 minutes (x1.99) | 8:27 minutes (x1.7). Build with OpenVINO:; ```; ./gradlew clean build createPackage -Puse_openvino=true; ```. Use `build` argument to enable OpenVINO backend:; ```groovy; def stardist = StarDist2D.builder(pathModel); .threshold(0.5) // Prediction threshold; .normalizePercentiles(1, 99) // Percentile normalization; .pixelSize(0.5) // Resolution for detection; .build(""openvino"") // or ""tensorflow"" to use TensorFlow backend. If empty, use any available backend; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/665
https://github.com/qupath/qupath/pull/665:1478,Safety,detect,detection,1478,"Used for deep learning optimization (StarDist algorithm); 1. Download model in OpenVINO Intermediate Representation format:; [dsb2018_heavy_augment.zip](https://mega.nz/file/IY92FbjK#ppzuYyjdxp9lPLZ2J6BnN6bCUFeZkRgbbolT4cSMI6w); [he_heavy_augment.zip](https://mega.nz/file/1U1wmTYR#HFLXGNjoAS3WR3E64-g7K3QT58cBxbrAJci2iD0EMkE); INT8: [he_heavy_augment_int8.zip](https://mega.nz/file/NMsgzJgZ#JseSxOTcOeqQbG2X9p3W2e-CXgJ6KjC8n1cs4QS49mY); INT8: [dsb2018_heavy_augment_int8.zip](https://mega.nz/file/oAkFDKBA#ZjVP4f2Il_tcjsc0iywpVRXLLvh8lBkkAD3wJ7rDdmQ). Performance:. | Intel(R) Core(TM) i7-6700K | **Test image**: OS-3.ndpi<br>**Model**: he_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 2183 | **Test image**: LuCa-7color_Scan1.qptiff<br>**Model**: dsb2018_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 936 |; |---|---|---|; | TensorFlow backend | 23:05 minutes | 14:20 minutes; | OpenVINO backend | 15:28 minutes (x1.5) | 10:39 minutes (x1.36); | OpenVINO backend (INT8) | 12:29 minutes (x1.87) | 8:43 (x1.68); | OpenVINO backend (INT8) + NormalizePercentileOp | 11:55 minutes (x1.99) | 8:27 minutes (x1.7). Build with OpenVINO:; ```; ./gradlew clean build createPackage -Puse_openvino=true; ```. Use `build` argument to enable OpenVINO backend:; ```groovy; def stardist = StarDist2D.builder(pathModel); .threshold(0.5) // Prediction threshold; .normalizePercentiles(1, 99) // Percentile normalization; .pixelSize(0.5) // Resolution for detection; .build(""openvino"") // or ""tensorflow"" to use TensorFlow backend. If empty, use any available backend; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/665
https://github.com/qupath/qupath/pull/665:600,Testability,Test,Test,600,"Used for deep learning optimization (StarDist algorithm); 1. Download model in OpenVINO Intermediate Representation format:; [dsb2018_heavy_augment.zip](https://mega.nz/file/IY92FbjK#ppzuYyjdxp9lPLZ2J6BnN6bCUFeZkRgbbolT4cSMI6w); [he_heavy_augment.zip](https://mega.nz/file/1U1wmTYR#HFLXGNjoAS3WR3E64-g7K3QT58cBxbrAJci2iD0EMkE); INT8: [he_heavy_augment_int8.zip](https://mega.nz/file/NMsgzJgZ#JseSxOTcOeqQbG2X9p3W2e-CXgJ6KjC8n1cs4QS49mY); INT8: [dsb2018_heavy_augment_int8.zip](https://mega.nz/file/oAkFDKBA#ZjVP4f2Il_tcjsc0iywpVRXLLvh8lBkkAD3wJ7rDdmQ). Performance:. | Intel(R) Core(TM) i7-6700K | **Test image**: OS-3.ndpi<br>**Model**: he_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 2183 | **Test image**: LuCa-7color_Scan1.qptiff<br>**Model**: dsb2018_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 936 |; |---|---|---|; | TensorFlow backend | 23:05 minutes | 14:20 minutes; | OpenVINO backend | 15:28 minutes (x1.5) | 10:39 minutes (x1.36); | OpenVINO backend (INT8) | 12:29 minutes (x1.87) | 8:43 (x1.68); | OpenVINO backend (INT8) + NormalizePercentileOp | 11:55 minutes (x1.99) | 8:27 minutes (x1.7). Build with OpenVINO:; ```; ./gradlew clean build createPackage -Puse_openvino=true; ```. Use `build` argument to enable OpenVINO backend:; ```groovy; def stardist = StarDist2D.builder(pathModel); .threshold(0.5) // Prediction threshold; .normalizePercentiles(1, 99) // Percentile normalization; .pixelSize(0.5) // Resolution for detection; .build(""openvino"") // or ""tensorflow"" to use TensorFlow backend. If empty, use any available backend; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/665
https://github.com/qupath/qupath/pull/665:716,Testability,Test,Test,716,"Used for deep learning optimization (StarDist algorithm); 1. Download model in OpenVINO Intermediate Representation format:; [dsb2018_heavy_augment.zip](https://mega.nz/file/IY92FbjK#ppzuYyjdxp9lPLZ2J6BnN6bCUFeZkRgbbolT4cSMI6w); [he_heavy_augment.zip](https://mega.nz/file/1U1wmTYR#HFLXGNjoAS3WR3E64-g7K3QT58cBxbrAJci2iD0EMkE); INT8: [he_heavy_augment_int8.zip](https://mega.nz/file/NMsgzJgZ#JseSxOTcOeqQbG2X9p3W2e-CXgJ6KjC8n1cs4QS49mY); INT8: [dsb2018_heavy_augment_int8.zip](https://mega.nz/file/oAkFDKBA#ZjVP4f2Il_tcjsc0iywpVRXLLvh8lBkkAD3wJ7rDdmQ). Performance:. | Intel(R) Core(TM) i7-6700K | **Test image**: OS-3.ndpi<br>**Model**: he_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 2183 | **Test image**: LuCa-7color_Scan1.qptiff<br>**Model**: dsb2018_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 936 |; |---|---|---|; | TensorFlow backend | 23:05 minutes | 14:20 minutes; | OpenVINO backend | 15:28 minutes (x1.5) | 10:39 minutes (x1.36); | OpenVINO backend (INT8) | 12:29 minutes (x1.87) | 8:43 (x1.68); | OpenVINO backend (INT8) + NormalizePercentileOp | 11:55 minutes (x1.99) | 8:27 minutes (x1.7). Build with OpenVINO:; ```; ./gradlew clean build createPackage -Puse_openvino=true; ```. Use `build` argument to enable OpenVINO backend:; ```groovy; def stardist = StarDist2D.builder(pathModel); .threshold(0.5) // Prediction threshold; .normalizePercentiles(1, 99) // Percentile normalization; .pixelSize(0.5) // Resolution for detection; .build(""openvino"") // or ""tensorflow"" to use TensorFlow backend. If empty, use any available backend; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/665
https://github.com/qupath/qupath/pull/665:14,Usability,learn,learning,14,"Used for deep learning optimization (StarDist algorithm); 1. Download model in OpenVINO Intermediate Representation format:; [dsb2018_heavy_augment.zip](https://mega.nz/file/IY92FbjK#ppzuYyjdxp9lPLZ2J6BnN6bCUFeZkRgbbolT4cSMI6w); [he_heavy_augment.zip](https://mega.nz/file/1U1wmTYR#HFLXGNjoAS3WR3E64-g7K3QT58cBxbrAJci2iD0EMkE); INT8: [he_heavy_augment_int8.zip](https://mega.nz/file/NMsgzJgZ#JseSxOTcOeqQbG2X9p3W2e-CXgJ6KjC8n1cs4QS49mY); INT8: [dsb2018_heavy_augment_int8.zip](https://mega.nz/file/oAkFDKBA#ZjVP4f2Il_tcjsc0iywpVRXLLvh8lBkkAD3wJ7rDdmQ). Performance:. | Intel(R) Core(TM) i7-6700K | **Test image**: OS-3.ndpi<br>**Model**: he_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 2183 | **Test image**: LuCa-7color_Scan1.qptiff<br>**Model**: dsb2018_heavy_augment<br>**Tile size**: 1024x1024<br>**Number of tiles**: 936 |; |---|---|---|; | TensorFlow backend | 23:05 minutes | 14:20 minutes; | OpenVINO backend | 15:28 minutes (x1.5) | 10:39 minutes (x1.36); | OpenVINO backend (INT8) | 12:29 minutes (x1.87) | 8:43 (x1.68); | OpenVINO backend (INT8) + NormalizePercentileOp | 11:55 minutes (x1.99) | 8:27 minutes (x1.7). Build with OpenVINO:; ```; ./gradlew clean build createPackage -Puse_openvino=true; ```. Use `build` argument to enable OpenVINO backend:; ```groovy; def stardist = StarDist2D.builder(pathModel); .threshold(0.5) // Prediction threshold; .normalizePercentiles(1, 99) // Percentile normalization; .pixelSize(0.5) // Resolution for detection; .build(""openvino"") // or ""tensorflow"" to use TensorFlow backend. If empty, use any available backend; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/665
https://github.com/qupath/qupath/pull/668:33,Availability,down,downsample,33,"- When setting the magnification/downsample for an image, the `TextField` is now directly in focus.; - Fix #667: All the dialogs requesting for a numeric input (such as the one above) are now restricted to digits and decimal separator only (e.g. ""1.20"" is permitted, while ""1.2f0"" is not). N.B.: Scientific notation is accepted only on copy/paste, as the filter will reject any intermediate representation of scientific notation (i.e. 1.23E4 **is** fine whereas 1.23E is **not**).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/668
https://github.com/qupath/qupath/pull/671:223,Testability,test,tests,223,"- Added transformObjects(..) in PathObjectTools, which recursively transform a PathObject and all its descendants, 'transforming all the parents-children relationships' along with the newly-created objects.; - TODO: Create tests",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/671
https://github.com/qupath/qupath/pull/674:91,Availability,Error,Error,91,"Bug fixes for:; * Resetting annotation name https://github.com/qupath/qupath/issues/661; * Error when manifest missing https://github.com/qupath/qupath/issues/664; * Errors when setting invalid magnifications, referred to at https://github.com/qupath/qupath/pull/668#issuecomment-791565911",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/674
https://github.com/qupath/qupath/pull/674:166,Availability,Error,Errors,166,"Bug fixes for:; * Resetting annotation name https://github.com/qupath/qupath/issues/661; * Error when manifest missing https://github.com/qupath/qupath/issues/664; * Errors when setting invalid magnifications, referred to at https://github.com/qupath/qupath/pull/668#issuecomment-791565911",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/674
https://github.com/qupath/qupath/pull/675:0,Deployability,Update,Update,0,Update to latest OpenCV version using JavaCPP Presets.; Note change of OpenCV open source license.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/675
https://github.com/qupath/qupath/pull/676:373,Availability,recover,recover,373,"Proposed fix for https://github.com/qupath/qupath/issues/654. Note that from the command line the exit code should be 0 if a script succeeded or 1 if an exception was thrown. Note that this applies to running the `script` subcommand for a single image. If an exception is thrown when attempting to apply the script to *multiple* images in a project, QuPath will attempt to recover and continue processing the next image. The exit code will then be 0.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/676
https://github.com/qupath/qupath/pull/676:373,Safety,recover,recover,373,"Proposed fix for https://github.com/qupath/qupath/issues/654. Note that from the command line the exit code should be 0 if a script succeeded or 1 if an exception was thrown. Note that this applies to running the `script` subcommand for a single image. If an exception is thrown when attempting to apply the script to *multiple* images in a project, QuPath will attempt to recover and continue processing the next image. The exit code will then be 0.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/676
https://github.com/qupath/qupath/pull/680:15,Deployability,patch,patches,15,"A clean set of patches this time that fixes #648, fixes #649, fixes #650; This time, I have told GitHub that this patch is against the dev-0.3 branch.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/680
https://github.com/qupath/qupath/pull/680:114,Deployability,patch,patch,114,"A clean set of patches this time that fixes #648, fixes #649, fixes #650; This time, I have told GitHub that this patch is against the dev-0.3 branch.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/680
https://github.com/qupath/qupath/pull/681:23,Deployability,update,updates,23,* JavaFX 16; * Include updates from main (readme); * Update license display; * Change readFromString methods to use UTF-8,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/681
https://github.com/qupath/qupath/pull/681:53,Deployability,Update,Update,53,* JavaFX 16; * Include updates from main (readme); * Update license display; * Change readFromString methods to use UTF-8,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/681
https://github.com/qupath/qupath/pull/685:275,Availability,avail,available,275,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/685
https://github.com/qupath/qupath/pull/685:298,Availability,down,download,298,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/685
https://github.com/qupath/qupath/pull/685:403,Availability,failure,failures,403,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/685
https://github.com/qupath/qupath/pull/685:531,Deployability,install,installed,531,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/685
https://github.com/qupath/qupath/pull/685:599,Deployability,install,installations,599,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/685
https://github.com/qupath/qupath/pull/685:1161,Deployability,Update,Update,1161,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/685
https://github.com/qupath/qupath/pull/685:1262,Deployability,update,updated,1262,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/685
https://github.com/qupath/qupath/pull/685:1295,Deployability,update,updated,1295,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/685
https://github.com/qupath/qupath/pull/685:1223,Integrability,depend,dependency,1223,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/685
https://github.com/qupath/qupath/pull/685:1205,Modifiability,plugin,plugin,1205,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/685
https://github.com/qupath/qupath/pull/685:1288,Modifiability,plugin,plugin,1288,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/685
https://github.com/qupath/qupath/pull/685:706,Performance,load,load,706,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/685
https://github.com/qupath/qupath/pull/685:389,Safety,avoid,avoid,389,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/685
https://github.com/qupath/qupath/pull/685:898,Safety,Avoid,Avoid,898,"This involves several changes:; - Use toolchain rather than target version.; - This is required because Gradle can't currently be run using Java 16, and so the build script needs to be called using a different Java version than the one used to build QuPath. If Java 16 isn't available, Gradle will download it.; - Strip the version number from the application name.; - This is required to avoid package failures due to the .cfg file name being different. *Unfortunately, this may cause problems for users wanting multiple versions installed simultaneously.* The workaround is to rename/use the .zip installations on Windows.; - Explicitly specify the java.library.path to be $APPDIR; - This is required to load OpenSlide/JPen. The library path was previously set automatically by jpackage in Java 14 (but not 15).; - Explicitly use java-options in the cfg file when changing the memory settings; - Avoid setting the version on macOS; - Sadly, we cannot start a version number with 0. These changes should also address the issues that arose when building QuPath v0.2 with Java 14: https://github.com/qupath/qupath/issues/615. Several other changes were made:; - Update gradlew; - JavaCPP now uses platform plugin for better dependency management; - Guava version updated; - License report plugin updated; - include jdk.jsobject",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/685
https://github.com/qupath/qupath/issues/686:396,Energy Efficiency,green,green,396,"## Bug report. **Describe the bug**; I compiled QuPath with Stardist as described in the docs. The detection of nuclei on the blue channel works fine (although the cell expansion value is ignored). The Measurements are however not correct! I get only values for the red channel of a RGB image (see attachment) and they are incorrect (negative values, see screenshot). There are no values for the green channel. **To Reproduce**; The script (I have it in a subfolder of the QuPath executable 'ScriptStardist', it finds the model then automatically.; [ScriptStardist.zip](https://github.com/qupath/qupath/files/6183384/ScriptStardist.zip). The image (ImageJ Tiff file); [CTRL-01.zip](https://github.com/qupath/qupath/files/6183389/CTRL-01.zip). **Expected behavior**; Measurements like the 'Cell Detection' command. **Screenshots**; Screenshot of the negative values.; ![ss-negative-values](https://user-images.githubusercontent.com/46439648/112015678-5244e200-8b2c-11eb-9654-41fcd2c50c4f.png). **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version 0.2.3 and 0.3.0 Snapshot 22/3/2021",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/686
https://github.com/qupath/qupath/issues/686:99,Safety,detect,detection,99,"## Bug report. **Describe the bug**; I compiled QuPath with Stardist as described in the docs. The detection of nuclei on the blue channel works fine (although the cell expansion value is ignored). The Measurements are however not correct! I get only values for the red channel of a RGB image (see attachment) and they are incorrect (negative values, see screenshot). There are no values for the green channel. **To Reproduce**; The script (I have it in a subfolder of the QuPath executable 'ScriptStardist', it finds the model then automatically.; [ScriptStardist.zip](https://github.com/qupath/qupath/files/6183384/ScriptStardist.zip). The image (ImageJ Tiff file); [CTRL-01.zip](https://github.com/qupath/qupath/files/6183389/CTRL-01.zip). **Expected behavior**; Measurements like the 'Cell Detection' command. **Screenshots**; Screenshot of the negative values.; ![ss-negative-values](https://user-images.githubusercontent.com/46439648/112015678-5244e200-8b2c-11eb-9654-41fcd2c50c4f.png). **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version 0.2.3 and 0.3.0 Snapshot 22/3/2021",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/686
https://github.com/qupath/qupath/issues/686:794,Safety,Detect,Detection,794,"## Bug report. **Describe the bug**; I compiled QuPath with Stardist as described in the docs. The detection of nuclei on the blue channel works fine (although the cell expansion value is ignored). The Measurements are however not correct! I get only values for the red channel of a RGB image (see attachment) and they are incorrect (negative values, see screenshot). There are no values for the green channel. **To Reproduce**; The script (I have it in a subfolder of the QuPath executable 'ScriptStardist', it finds the model then automatically.; [ScriptStardist.zip](https://github.com/qupath/qupath/files/6183384/ScriptStardist.zip). The image (ImageJ Tiff file); [CTRL-01.zip](https://github.com/qupath/qupath/files/6183389/CTRL-01.zip). **Expected behavior**; Measurements like the 'Cell Detection' command. **Screenshots**; Screenshot of the negative values.; ![ss-negative-values](https://user-images.githubusercontent.com/46439648/112015678-5244e200-8b2c-11eb-9654-41fcd2c50c4f.png). **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version 0.2.3 and 0.3.0 Snapshot 22/3/2021",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/686
https://github.com/qupath/qupath/pull/687:1429,Performance,perform,perform,1429,"s.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppressed default constructor for non-instantiability.; 	2. Made class final.; - GeneralTools; 	1. Suppressed default constructor for non-instantiability.; 	2. Made class final.; 	3. Added some tests to existing tests.; 	4. Fixed blankString(...), which did not use the 'trim' param and was always trimming the input String.; 	5. Fixed isMultipartExtension(...) to account for String of length == 1.;",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:1584,Safety,avoid,avoid,1584,"tTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppressed default constructor for non-instantiability.; 	2. Made class final.; - GeneralTools; 	1. Suppressed default constructor for non-instantiability.; 	2. Made class final.; 	3. Added some tests to existing tests.; 	4. Fixed blankString(...), which did not use the 'trim' param and was always trimming the input String.; 	5. Fixed isMultipartExtension(...) to account for String of length == 1.; 	6. almostTheSame(...) now relies on Apache common's equalsWithRelativeTolerance() method.; 	7. toURI(...) called with an empty String would return a path leading to QuPath's core module.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:70,Testability,test,tests,70,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:77,Testability,Test,TestSimpleImages,77,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:171,Testability,test,tests,171,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:178,Testability,Test,TestArrayWrappers,178,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:233,Testability,test,tests,233,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:240,Testability,Test,TestHistogram,240,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:372,Testability,test,tests,372,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:480,Testability,test,tests,480,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:487,Testability,Test,TestKaplanMeierData,487,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:570,Testability,test,tests,570,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:577,Testability,Test,TestAwtTools,577,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:691,Testability,test,tests,691,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:698,Testability,Test,TestBufferedImageTools,698,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:914,Testability,test,tests,914,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:921,Testability,Test,TestCompositeClassifier,921,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:2189,Testability,test,tests,2189,"tensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppressed default constructor for non-instantiability.; 	2. Made class final.; - GeneralTools; 	1. Suppressed default constructor for non-instantiability.; 	2. Made class final.; 	3. Added some tests to existing tests.; 	4. Fixed blankString(...), which did not use the 'trim' param and was always trimming the input String.; 	5. Fixed isMultipartExtension(...) to account for String of length == 1.; 	6. almostTheSame(...) now relies on Apache common's equalsWithRelativeTolerance() method.; 	7. toURI(...) called with an empty String would return a path leading to QuPath's core module. Now returns an empty URI.; 	8. arrayToString(...) always used a space as a delimiter. Now uses the delimiter param instead.; 	9. arrayToString(...) always added a delimiter after last element. Now fixed.; 	10. Changed arrayToString(Object[], ..)'s javadocs from 'separator' to 'delimiter' to match other methods; 	11. generateDistinctName(...) now returns the input string if it is empty (instead of unexpected behaviour if list also had an empty String). <h1>qupath.lib.object.classes</h1>. - PathClassTools; 	1. Created tests (TestPathClassTools.java); 	2. Rephrased part of javadocs for getNonIntensityAncest",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:2207,Testability,test,tests,2207,"tensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppressed default constructor for non-instantiability.; 	2. Made class final.; - GeneralTools; 	1. Suppressed default constructor for non-instantiability.; 	2. Made class final.; 	3. Added some tests to existing tests.; 	4. Fixed blankString(...), which did not use the 'trim' param and was always trimming the input String.; 	5. Fixed isMultipartExtension(...) to account for String of length == 1.; 	6. almostTheSame(...) now relies on Apache common's equalsWithRelativeTolerance() method.; 	7. toURI(...) called with an empty String would return a path leading to QuPath's core module. Now returns an empty URI.; 	8. arrayToString(...) always used a space as a delimiter. Now uses the delimiter param instead.; 	9. arrayToString(...) always added a delimiter after last element. Now fixed.; 	10. Changed arrayToString(Object[], ..)'s javadocs from 'separator' to 'delimiter' to match other methods; 	11. generateDistinctName(...) now returns the input string if it is empty (instead of unexpected behaviour if list also had an empty String). <h1>qupath.lib.object.classes</h1>. - PathClassTools; 	1. Created tests (TestPathClassTools.java); 	2. Rephrased part of javadocs for getNonIntensityAncest",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:3106,Testability,test,tests,3106,"ements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppressed default constructor for non-instantiability.; 	2. Made class final.; - GeneralTools; 	1. Suppressed default constructor for non-instantiability.; 	2. Made class final.; 	3. Added some tests to existing tests.; 	4. Fixed blankString(...), which did not use the 'trim' param and was always trimming the input String.; 	5. Fixed isMultipartExtension(...) to account for String of length == 1.; 	6. almostTheSame(...) now relies on Apache common's equalsWithRelativeTolerance() method.; 	7. toURI(...) called with an empty String would return a path leading to QuPath's core module. Now returns an empty URI.; 	8. arrayToString(...) always used a space as a delimiter. Now uses the delimiter param instead.; 	9. arrayToString(...) always added a delimiter after last element. Now fixed.; 	10. Changed arrayToString(Object[], ..)'s javadocs from 'separator' to 'delimiter' to match other methods; 	11. generateDistinctName(...) now returns the input string if it is empty (instead of unexpected behaviour if list also had an empty String). <h1>qupath.lib.object.classes</h1>. - PathClassTools; 	1. Created tests (TestPathClassTools.java); 	2. Rephrased part of javadocs for getNonIntensityAncestorClass(); 	3. Replace verbose OR operator in if statement with static method in isPositiveOrGradedIntensityClass(); 	4. Remove 'distinct' from splitNames()'s javadocs, as the returned list can contain duplicates; 	5. Added TODO: Consider moving this to ColorToolsAwt? for averageColors() as it is static and could be repurposed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:3113,Testability,Test,TestPathClassTools,3113,"ements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppressed default constructor for non-instantiability.; 	2. Made class final.; - GeneralTools; 	1. Suppressed default constructor for non-instantiability.; 	2. Made class final.; 	3. Added some tests to existing tests.; 	4. Fixed blankString(...), which did not use the 'trim' param and was always trimming the input String.; 	5. Fixed isMultipartExtension(...) to account for String of length == 1.; 	6. almostTheSame(...) now relies on Apache common's equalsWithRelativeTolerance() method.; 	7. toURI(...) called with an empty String would return a path leading to QuPath's core module. Now returns an empty URI.; 	8. arrayToString(...) always used a space as a delimiter. Now uses the delimiter param instead.; 	9. arrayToString(...) always added a delimiter after last element. Now fixed.; 	10. Changed arrayToString(Object[], ..)'s javadocs from 'separator' to 'delimiter' to match other methods; 	11. generateDistinctName(...) now returns the input string if it is empty (instead of unexpected behaviour if list also had an empty String). <h1>qupath.lib.object.classes</h1>. - PathClassTools; 	1. Created tests (TestPathClassTools.java); 	2. Rephrased part of javadocs for getNonIntensityAncestorClass(); 	3. Replace verbose OR operator in if statement with static method in isPositiveOrGradedIntensityClass(); 	4. Remove 'distinct' from splitNames()'s javadocs, as the returned list can contain duplicates; 	5. Added TODO: Consider moving this to ColorToolsAwt? for averageColors() as it is static and could be repurposed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/687:39,Usability,Simpl,SimpleImages,39,"<h1>qupath.lib.analysis.images</h1>. - SimpleImages.java; 	1. Created tests (TestSimpleImages.java). <h1>qupath.lib.analysis.stats</h1>. - ArrayWrappers.java; 	1. Created tests (TestArrayWrappers.java); - Histogram.java; 	1. Created tests (TestHistogram.java); 	2. Changed bin calculation in buildHistogram() to use getBinIndexForValue(); - RunningStatistics; 	1. Created tests (RunningStatistics.java). <h1>qupath.lib.analysis.stats.survival</h1>. - KaplanMeierData; 	1. Created tests (TestKaplanMeierData.java). <h1>qupath.lib.awt.common</h1>. - AwtTools; 	1. Created tests (TestAwtTools.java); 	2. Suppressed default constructor for non-instantiability; - BufferedImageTools; 	1. Created tests (TestBufferedImageTools.java); 	2. Suppressed default constructor for non-instantiability; 	3. Added 'breaks' to switch statement in setValues(...). <h1>qupath.lib.classifiers</h1>. - CompositeClassifier. 	1. Created tests (TestCompositeClassifier.java); 	2. Added comment in classifyPathObjects() to clarify the value of the returned int; - PathClassifierTools; 	1. Suppressed default constructor for non-instantiability; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now reset the PathClass to the non intensity ancestor class of the current object's one.; 	3. Throws an Exception if supplying an empty or null measurement name in setIntensityClassification(), as it can't perform classification without a measurement.; - PathIntensityClassifier; 	1. getRequiredMeasurements() with null measurement now returns an empty list to avoid NPE when calling getRequiredMeasurements() in CompositeClassifier; 	2. Fixed bug that did not handle missing measurement values (NaN) in setIntensityClassification(...). Now it does not change the class of the object if measurement is missing. Why? Because if we run a CompositeClassifier, one classifier's classification shouldn't be reset by the next one. <h1>qupath.lib.common</h1>. - ColorTools; 	1. Suppres",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/687
https://github.com/qupath/qupath/pull/689:543,Availability,avail,available,543,"Greatly improved the OMERO extension to allow (amongst other things) the user to:; - Log in/off OMERO servers with different credentials.; - View the connection types of different OMERO servers and their status (public/private - connected/not connected).; - Browse any OMERO servers from within QuPath and open any project/dataset/image from the browser.; - Retrieve OMERO project/dataset/image metadata (`More info..`).; - Advanced OMERO server search.; - Import/send ROIs from/to the original image hosted on OMERO.; - .. Most new panes are available under the 'OMERO' menu, located inside the 'Extensions' menu.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/689
https://github.com/qupath/qupath/pull/689:85,Testability,Log,Log,85,"Greatly improved the OMERO extension to allow (amongst other things) the user to:; - Log in/off OMERO servers with different credentials.; - View the connection types of different OMERO servers and their status (public/private - connected/not connected).; - Browse any OMERO servers from within QuPath and open any project/dataset/image from the browser.; - Retrieve OMERO project/dataset/image metadata (`More info..`).; - Advanced OMERO server search.; - Import/send ROIs from/to the original image hosted on OMERO.; - .. Most new panes are available under the 'OMERO' menu, located inside the 'Extensions' menu.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/689
https://github.com/qupath/qupath/issues/691:432,Testability,test,test,432,"## Bug report. **Describe the bug**; `setIntensityClassification(..)` in `PathClassifierTools` does not ignore 'ignored classes'. It only ignores the `Ignore*` class, as defined in `PathClassFactory.StandardPathClasses.IGNORE`, but not custom 'ignored' classes, as defined in `PathClassTools.isIgnoredClass()`. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a `PathObject`.; 2. Create an 'ignored' `PathClass` (e.g. `test*`) and create relevant measurements.; 3. Set the `PathObject` class to the newly created `PathClass` (e.g. `pathObject.setPathClass(getPathClass(""test*""))`); 3. Run `setIntensityClassification(..)` with the created `PathClass`.; 4. The 'ignored' `PathClass` will be 'intensity classified', even though it should be ignored. **Expected behavior**; The method does **not** classify the object if it belongs to an 'ignored' class (e.g. `test*`). **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.2.3. **Additional context**; An additional `isNullClass()` companion method should be added to filter out which `PathObject`s should not be classified.; This is because the method should still be able to 'intensity classify' `null` `PathClass`es (e.g. `null` would be classified as `Positive`/`Negative`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/691
https://github.com/qupath/qupath/issues/691:583,Testability,test,test,583,"## Bug report. **Describe the bug**; `setIntensityClassification(..)` in `PathClassifierTools` does not ignore 'ignored classes'. It only ignores the `Ignore*` class, as defined in `PathClassFactory.StandardPathClasses.IGNORE`, but not custom 'ignored' classes, as defined in `PathClassTools.isIgnoredClass()`. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a `PathObject`.; 2. Create an 'ignored' `PathClass` (e.g. `test*`) and create relevant measurements.; 3. Set the `PathObject` class to the newly created `PathClass` (e.g. `pathObject.setPathClass(getPathClass(""test*""))`); 3. Run `setIntensityClassification(..)` with the created `PathClass`.; 4. The 'ignored' `PathClass` will be 'intensity classified', even though it should be ignored. **Expected behavior**; The method does **not** classify the object if it belongs to an 'ignored' class (e.g. `test*`). **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.2.3. **Additional context**; An additional `isNullClass()` companion method should be added to filter out which `PathObject`s should not be classified.; This is because the method should still be able to 'intensity classify' `null` `PathClass`es (e.g. `null` would be classified as `Positive`/`Negative`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/691
https://github.com/qupath/qupath/issues/691:871,Testability,test,test,871,"## Bug report. **Describe the bug**; `setIntensityClassification(..)` in `PathClassifierTools` does not ignore 'ignored classes'. It only ignores the `Ignore*` class, as defined in `PathClassFactory.StandardPathClasses.IGNORE`, but not custom 'ignored' classes, as defined in `PathClassTools.isIgnoredClass()`. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a `PathObject`.; 2. Create an 'ignored' `PathClass` (e.g. `test*`) and create relevant measurements.; 3. Set the `PathObject` class to the newly created `PathClass` (e.g. `pathObject.setPathClass(getPathClass(""test*""))`); 3. Run `setIntensityClassification(..)` with the created `PathClass`.; 4. The 'ignored' `PathClass` will be 'intensity classified', even though it should be ignored. **Expected behavior**; The method does **not** classify the object if it belongs to an 'ignored' class (e.g. `test*`). **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.2.3. **Additional context**; An additional `isNullClass()` companion method should be added to filter out which `PathObject`s should not be classified.; This is because the method should still be able to 'intensity classify' `null` `PathClass`es (e.g. `null` would be classified as `Positive`/`Negative`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/691
https://github.com/qupath/qupath/issues/693:398,Security,access,access,398,"Hello, we are using it on a Windows machine and Macs (with Big Sur, Catalina and Mojave OS). When sharing screen on Teams from windows, it is great. When sharing screen on teams (or Zoom) from Mac, the main view is shared, but the ""box"" that shows the adjustments as they are being made (brightness etc) is not shared with any of the three Macs (with different OS) we tried. I have given full disk access etc as much as I could figure it, but maybe there are settings I haven't identified. It will be great if we can solve this; thanks,; christos",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/693
https://github.com/qupath/qupath/issues/696:38,Safety,Detect,Detect,38,"## Bug report. **Describe the bug**; *Detect centroid distances 2D* doesn't calculate distances for different planes of a z-stack; only the default plane is supported. Relatedly, *Convert detections to points* under the counting tool adds points to the default plane - not the plane on which the detections were originally. **To Reproduce**; See https://forum.image.sc/t/cannot-detect-centroid-distances-in-2d-when-i-have-multiple-planes-in-my-images/50958. **Expected behavior**; 2D distance operations work on planes of an image. They are not expected to work across planes, but should return distances within each plane. *Convert detections to points* works as expected for z-stacks/time series. **Desktop (please complete the following information):**; - OS: All platforms; - QuPath Version v0.2.x. **Additional context**; The underlying problem is that [`PathObjectTools.convertToPoints(Collection<PathObject> pathObjects, boolean preferNucleus)`](https://github.com/qupath/qupath/blob/43aad4ecda893a7eb03c30774e64da5b9547bc86/qupath-core/src/main/java/qupath/lib/objects/PathObjectTools.java#L469) always uses the default plane.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/696
https://github.com/qupath/qupath/issues/696:188,Safety,detect,detections,188,"## Bug report. **Describe the bug**; *Detect centroid distances 2D* doesn't calculate distances for different planes of a z-stack; only the default plane is supported. Relatedly, *Convert detections to points* under the counting tool adds points to the default plane - not the plane on which the detections were originally. **To Reproduce**; See https://forum.image.sc/t/cannot-detect-centroid-distances-in-2d-when-i-have-multiple-planes-in-my-images/50958. **Expected behavior**; 2D distance operations work on planes of an image. They are not expected to work across planes, but should return distances within each plane. *Convert detections to points* works as expected for z-stacks/time series. **Desktop (please complete the following information):**; - OS: All platforms; - QuPath Version v0.2.x. **Additional context**; The underlying problem is that [`PathObjectTools.convertToPoints(Collection<PathObject> pathObjects, boolean preferNucleus)`](https://github.com/qupath/qupath/blob/43aad4ecda893a7eb03c30774e64da5b9547bc86/qupath-core/src/main/java/qupath/lib/objects/PathObjectTools.java#L469) always uses the default plane.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/696
https://github.com/qupath/qupath/issues/696:296,Safety,detect,detections,296,"## Bug report. **Describe the bug**; *Detect centroid distances 2D* doesn't calculate distances for different planes of a z-stack; only the default plane is supported. Relatedly, *Convert detections to points* under the counting tool adds points to the default plane - not the plane on which the detections were originally. **To Reproduce**; See https://forum.image.sc/t/cannot-detect-centroid-distances-in-2d-when-i-have-multiple-planes-in-my-images/50958. **Expected behavior**; 2D distance operations work on planes of an image. They are not expected to work across planes, but should return distances within each plane. *Convert detections to points* works as expected for z-stacks/time series. **Desktop (please complete the following information):**; - OS: All platforms; - QuPath Version v0.2.x. **Additional context**; The underlying problem is that [`PathObjectTools.convertToPoints(Collection<PathObject> pathObjects, boolean preferNucleus)`](https://github.com/qupath/qupath/blob/43aad4ecda893a7eb03c30774e64da5b9547bc86/qupath-core/src/main/java/qupath/lib/objects/PathObjectTools.java#L469) always uses the default plane.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/696
https://github.com/qupath/qupath/issues/696:378,Safety,detect,detect-centroid-distances-in-,378,"## Bug report. **Describe the bug**; *Detect centroid distances 2D* doesn't calculate distances for different planes of a z-stack; only the default plane is supported. Relatedly, *Convert detections to points* under the counting tool adds points to the default plane - not the plane on which the detections were originally. **To Reproduce**; See https://forum.image.sc/t/cannot-detect-centroid-distances-in-2d-when-i-have-multiple-planes-in-my-images/50958. **Expected behavior**; 2D distance operations work on planes of an image. They are not expected to work across planes, but should return distances within each plane. *Convert detections to points* works as expected for z-stacks/time series. **Desktop (please complete the following information):**; - OS: All platforms; - QuPath Version v0.2.x. **Additional context**; The underlying problem is that [`PathObjectTools.convertToPoints(Collection<PathObject> pathObjects, boolean preferNucleus)`](https://github.com/qupath/qupath/blob/43aad4ecda893a7eb03c30774e64da5b9547bc86/qupath-core/src/main/java/qupath/lib/objects/PathObjectTools.java#L469) always uses the default plane.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/696
https://github.com/qupath/qupath/issues/696:633,Safety,detect,detections,633,"## Bug report. **Describe the bug**; *Detect centroid distances 2D* doesn't calculate distances for different planes of a z-stack; only the default plane is supported. Relatedly, *Convert detections to points* under the counting tool adds points to the default plane - not the plane on which the detections were originally. **To Reproduce**; See https://forum.image.sc/t/cannot-detect-centroid-distances-in-2d-when-i-have-multiple-planes-in-my-images/50958. **Expected behavior**; 2D distance operations work on planes of an image. They are not expected to work across planes, but should return distances within each plane. *Convert detections to points* works as expected for z-stacks/time series. **Desktop (please complete the following information):**; - OS: All platforms; - QuPath Version v0.2.x. **Additional context**; The underlying problem is that [`PathObjectTools.convertToPoints(Collection<PathObject> pathObjects, boolean preferNucleus)`](https://github.com/qupath/qupath/blob/43aad4ecda893a7eb03c30774e64da5b9547bc86/qupath-core/src/main/java/qupath/lib/objects/PathObjectTools.java#L469) always uses the default plane.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/696
https://github.com/qupath/qupath/pull/697:105,Availability,Error,Error,105,* showConfirmDialog method never uses its title parameter https://github.com/qupath/qupath/issues/662; * Error in Measurement with StarDist script with RGB fluorescence images https://github.com/qupath/qupath/issues/686; * Detect centroid distances 2D doesn't work on different planes of a z-stack https://github.com/qupath/qupath/issues/696,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/697
https://github.com/qupath/qupath/pull/697:223,Safety,Detect,Detect,223,* showConfirmDialog method never uses its title parameter https://github.com/qupath/qupath/issues/662; * Error in Measurement with StarDist script with RGB fluorescence images https://github.com/qupath/qupath/issues/686; * Detect centroid distances 2D doesn't work on different planes of a z-stack https://github.com/qupath/qupath/issues/696,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/697
https://github.com/qupath/qupath/pull/698:347,Safety,detect,detection,347,"* Import/export objects as GeoJSON without scripting, via 'File -> Object data... -> ...'; * Import objects from .json, .geojson & .qpdata files via via 'File -> Object data... -> Import objects' or with drag & drop; * GeoJSON features now use ""properties>object_type"" rather than ""id"" property to map to a QuPath object type (e.g. ""annotation"", ""detection"", ""cell""); * 'id' is likely to be used as a unique identifier in a later QuPath version",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/698
https://github.com/qupath/qupath/pull/699:76,Usability,simpl,simply,76,This provides a mechanism to suppress 'save' dialogs if QuPath is being run simply as a viewer but without the ability to save changes to any image. Note that this minimal implementation is for feedback; it may need to be changed in a future version if it proves insufficient in practice.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/699
https://github.com/qupath/qupath/pull/699:194,Usability,feedback,feedback,194,This provides a mechanism to suppress 'save' dialogs if QuPath is being run simply as a viewer but without the ability to save changes to any image. Note that this minimal implementation is for feedback; it may need to be changed in a future version if it proves insufficient in practice.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/699
https://github.com/qupath/qupath/issues/701:386,Availability,avail,available,386,"## Bug report. **Describe the bug**; Subcellular detections don't work with z-stacks on anything other than the default slice. See https://forum.image.sc/t/problem-detecting-subcellular-object-from-nd2-files/51111. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a z-stack; 2. Detect cells on multiple slices; 3. Run the subcellular detection command. If no pixel sizes are available in µm, nothing will be detected. Otherwise, all detections will be shown on the first slice. **Expected behavior**; Subcellular detections are shown in the correct cells; a meaningful warning is displayed if pixel sizes are unavailable. **Desktop (please complete the following information):**; - OS: All; - QuPath Version v.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/701
https://github.com/qupath/qupath/issues/701:49,Safety,detect,detections,49,"## Bug report. **Describe the bug**; Subcellular detections don't work with z-stacks on anything other than the default slice. See https://forum.image.sc/t/problem-detecting-subcellular-object-from-nd2-files/51111. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a z-stack; 2. Detect cells on multiple slices; 3. Run the subcellular detection command. If no pixel sizes are available in µm, nothing will be detected. Otherwise, all detections will be shown on the first slice. **Expected behavior**; Subcellular detections are shown in the correct cells; a meaningful warning is displayed if pixel sizes are unavailable. **Desktop (please complete the following information):**; - OS: All; - QuPath Version v.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/701
https://github.com/qupath/qupath/issues/701:164,Safety,detect,detecting-subcellular-object-from-,164,"## Bug report. **Describe the bug**; Subcellular detections don't work with z-stacks on anything other than the default slice. See https://forum.image.sc/t/problem-detecting-subcellular-object-from-nd2-files/51111. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a z-stack; 2. Detect cells on multiple slices; 3. Run the subcellular detection command. If no pixel sizes are available in µm, nothing will be detected. Otherwise, all detections will be shown on the first slice. **Expected behavior**; Subcellular detections are shown in the correct cells; a meaningful warning is displayed if pixel sizes are unavailable. **Desktop (please complete the following information):**; - OS: All; - QuPath Version v.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/701
https://github.com/qupath/qupath/issues/701:289,Safety,Detect,Detect,289,"## Bug report. **Describe the bug**; Subcellular detections don't work with z-stacks on anything other than the default slice. See https://forum.image.sc/t/problem-detecting-subcellular-object-from-nd2-files/51111. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a z-stack; 2. Detect cells on multiple slices; 3. Run the subcellular detection command. If no pixel sizes are available in µm, nothing will be detected. Otherwise, all detections will be shown on the first slice. **Expected behavior**; Subcellular detections are shown in the correct cells; a meaningful warning is displayed if pixel sizes are unavailable. **Desktop (please complete the following information):**; - OS: All; - QuPath Version v.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/701
https://github.com/qupath/qupath/issues/701:345,Safety,detect,detection,345,"## Bug report. **Describe the bug**; Subcellular detections don't work with z-stacks on anything other than the default slice. See https://forum.image.sc/t/problem-detecting-subcellular-object-from-nd2-files/51111. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a z-stack; 2. Detect cells on multiple slices; 3. Run the subcellular detection command. If no pixel sizes are available in µm, nothing will be detected. Otherwise, all detections will be shown on the first slice. **Expected behavior**; Subcellular detections are shown in the correct cells; a meaningful warning is displayed if pixel sizes are unavailable. **Desktop (please complete the following information):**; - OS: All; - QuPath Version v.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/701
https://github.com/qupath/qupath/issues/701:419,Safety,detect,detected,419,"## Bug report. **Describe the bug**; Subcellular detections don't work with z-stacks on anything other than the default slice. See https://forum.image.sc/t/problem-detecting-subcellular-object-from-nd2-files/51111. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a z-stack; 2. Detect cells on multiple slices; 3. Run the subcellular detection command. If no pixel sizes are available in µm, nothing will be detected. Otherwise, all detections will be shown on the first slice. **Expected behavior**; Subcellular detections are shown in the correct cells; a meaningful warning is displayed if pixel sizes are unavailable. **Desktop (please complete the following information):**; - OS: All; - QuPath Version v.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/701
https://github.com/qupath/qupath/issues/701:444,Safety,detect,detections,444,"## Bug report. **Describe the bug**; Subcellular detections don't work with z-stacks on anything other than the default slice. See https://forum.image.sc/t/problem-detecting-subcellular-object-from-nd2-files/51111. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a z-stack; 2. Detect cells on multiple slices; 3. Run the subcellular detection command. If no pixel sizes are available in µm, nothing will be detected. Otherwise, all detections will be shown on the first slice. **Expected behavior**; Subcellular detections are shown in the correct cells; a meaningful warning is displayed if pixel sizes are unavailable. **Desktop (please complete the following information):**; - OS: All; - QuPath Version v.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/701
https://github.com/qupath/qupath/issues/701:524,Safety,detect,detections,524,"## Bug report. **Describe the bug**; Subcellular detections don't work with z-stacks on anything other than the default slice. See https://forum.image.sc/t/problem-detecting-subcellular-object-from-nd2-files/51111. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a z-stack; 2. Detect cells on multiple slices; 3. Run the subcellular detection command. If no pixel sizes are available in µm, nothing will be detected. Otherwise, all detections will be shown on the first slice. **Expected behavior**; Subcellular detections are shown in the correct cells; a meaningful warning is displayed if pixel sizes are unavailable. **Desktop (please complete the following information):**; - OS: All; - QuPath Version v.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/701
https://github.com/qupath/qupath/issues/702:14,Performance,load,load,14,"I'm trying to load large files (at least 3GB in size) in QuPath. ; Information about the images: (i) Single channel (ii) unsigned 16 bit integers (iii) saved using libtiff (iv) at least 3GB in size; Issues with QuPath: (i) QuPath either loads them as 8-bit RGB images or (ii) warns me that they are not pyramid tiffs and asks me if I want to generate a pyramid tiff from the input image. ; I have verified that I can read these images using libtiff. HALO (www.indicalab.com) can load these images properly too. I just have trouble loading them in QuPath. ; Can you please help me? If it helps, I can upload a couple images to a cloud server and share the location.; Thanks in advance. P.S. My issue seems similar to #690 but mine are not nd2 images.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/702
https://github.com/qupath/qupath/issues/702:237,Performance,load,loads,237,"I'm trying to load large files (at least 3GB in size) in QuPath. ; Information about the images: (i) Single channel (ii) unsigned 16 bit integers (iii) saved using libtiff (iv) at least 3GB in size; Issues with QuPath: (i) QuPath either loads them as 8-bit RGB images or (ii) warns me that they are not pyramid tiffs and asks me if I want to generate a pyramid tiff from the input image. ; I have verified that I can read these images using libtiff. HALO (www.indicalab.com) can load these images properly too. I just have trouble loading them in QuPath. ; Can you please help me? If it helps, I can upload a couple images to a cloud server and share the location.; Thanks in advance. P.S. My issue seems similar to #690 but mine are not nd2 images.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/702
https://github.com/qupath/qupath/issues/702:479,Performance,load,load,479,"I'm trying to load large files (at least 3GB in size) in QuPath. ; Information about the images: (i) Single channel (ii) unsigned 16 bit integers (iii) saved using libtiff (iv) at least 3GB in size; Issues with QuPath: (i) QuPath either loads them as 8-bit RGB images or (ii) warns me that they are not pyramid tiffs and asks me if I want to generate a pyramid tiff from the input image. ; I have verified that I can read these images using libtiff. HALO (www.indicalab.com) can load these images properly too. I just have trouble loading them in QuPath. ; Can you please help me? If it helps, I can upload a couple images to a cloud server and share the location.; Thanks in advance. P.S. My issue seems similar to #690 but mine are not nd2 images.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/702
https://github.com/qupath/qupath/issues/702:531,Performance,load,loading,531,"I'm trying to load large files (at least 3GB in size) in QuPath. ; Information about the images: (i) Single channel (ii) unsigned 16 bit integers (iii) saved using libtiff (iv) at least 3GB in size; Issues with QuPath: (i) QuPath either loads them as 8-bit RGB images or (ii) warns me that they are not pyramid tiffs and asks me if I want to generate a pyramid tiff from the input image. ; I have verified that I can read these images using libtiff. HALO (www.indicalab.com) can load these images properly too. I just have trouble loading them in QuPath. ; Can you please help me? If it helps, I can upload a couple images to a cloud server and share the location.; Thanks in advance. P.S. My issue seems similar to #690 but mine are not nd2 images.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/702
https://github.com/qupath/qupath/issues/704:1177,Availability,down,downsampleFactor,1177,"/github.com/qupath/qupath/issues/359. My OS is Windows 10 and I am using the 0.2.3 version. This is the system info:; Version: 0.2.3; Build time: 2020-09-11, 12:59; Latest commit tag: '43aad4ec'. Java version:		14.0.2; Java vendor: 		AdoptOpenJDK - https://adoptopenjdk.net/; Java home: 		C:\Users\lafore01\AppData\Local\QuPath-0.2.3\runtime. Operating system:		Windows 10 - 10.0; Architecture: 		amd64. What I have done so far: on a brightfield image, I first create DoG superpixels, calculate the intensity features, then load an object classifier to separate them into two classes: tumour and adipose. Finally, I use the tile classification to annotation feature. While all this works well when done manually, the following script (obtained by using the workflow to script feature) produces the same problem described previously when it reaches the tile classification to annotation line. See attached screenshot. `selectAnnotations();; runPlugin('qupath.imagej.superpixels.DoGSuperpixelsPlugin', '{""downsampleFactor"": 4.0, ""sigmaMicrons"": 10.0, ""minThreshold"": 10.0, ""maxThreshold"": 230.0, ""noiseThreshold"": 1.0}');; selectDetections();; runPlugin('qupath.lib.algorithms.IntensityFeaturesPlugin', '{""pixelSizeMicrons"": 2.0, ""region"": ""ROI"", ""tileSizeMicrons"": 25.0, ""colorOD"": true, ""colorStain1"": true, ""colorStain2"": false, ""colorStain3"": true, ""colorRed"": false, ""colorGreen"": false, ""colorBlue"": false, ""colorHue"": false, ""colorSaturation"": false, ""colorBrightness"": false, ""doMean"": true, ""doStdDev"": true, ""doMinMax"": true, ""doMedian"": false, ""doHaralick"": false, ""haralickDistance"": 1, ""haralickBins"": 32}');; runObjectClassifier(""TumAd_superpixel"");; runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": true, ""clearAnnotations"": false, ""splitAnnotations"": false}');; `; . ![TileClasstoAnnotation](https://user-images.githubusercontent.com/82104756/114074358-336c7c80-989c-11eb-8379-3d364a48ec7c.PNG). As you can see i",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/704
https://github.com/qupath/qupath/issues/704:1859,Modifiability,plugin,plugins,1859,"ell when done manually, the following script (obtained by using the workflow to script feature) produces the same problem described previously when it reaches the tile classification to annotation line. See attached screenshot. `selectAnnotations();; runPlugin('qupath.imagej.superpixels.DoGSuperpixelsPlugin', '{""downsampleFactor"": 4.0, ""sigmaMicrons"": 10.0, ""minThreshold"": 10.0, ""maxThreshold"": 230.0, ""noiseThreshold"": 1.0}');; selectDetections();; runPlugin('qupath.lib.algorithms.IntensityFeaturesPlugin', '{""pixelSizeMicrons"": 2.0, ""region"": ""ROI"", ""tileSizeMicrons"": 25.0, ""colorOD"": true, ""colorStain1"": true, ""colorStain2"": false, ""colorStain3"": true, ""colorRed"": false, ""colorGreen"": false, ""colorBlue"": false, ""colorHue"": false, ""colorSaturation"": false, ""colorBrightness"": false, ""doMean"": true, ""doStdDev"": true, ""doMinMax"": true, ""doMedian"": false, ""doHaralick"": false, ""haralickDistance"": 1, ""haralickBins"": 32}');; runObjectClassifier(""TumAd_superpixel"");; runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": true, ""clearAnnotations"": false, ""splitAnnotations"": false}');; `; . ![TileClasstoAnnotation](https://user-images.githubusercontent.com/82104756/114074358-336c7c80-989c-11eb-8379-3d364a48ec7c.PNG). As you can see it does nothing but successfully: no annotations are created. This only happens when I run this feature as a script. Manually it works perfectly. I have tried running all the script except the last line. This works well: it produced superpixels classified into tumour and adipose. But when I want to merge those superpixels to obtain two annotations (tumour and adipose), the line below on its own produces the same results as when run within the whole script: no annotation created. `runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": true, ""clearAnnotations"": false, ""splitAnnotations"": false}');; `. I understand ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/704
https://github.com/qupath/qupath/issues/704:2681,Modifiability,plugin,plugins,2681,"'qupath.imagej.superpixels.DoGSuperpixelsPlugin', '{""downsampleFactor"": 4.0, ""sigmaMicrons"": 10.0, ""minThreshold"": 10.0, ""maxThreshold"": 230.0, ""noiseThreshold"": 1.0}');; selectDetections();; runPlugin('qupath.lib.algorithms.IntensityFeaturesPlugin', '{""pixelSizeMicrons"": 2.0, ""region"": ""ROI"", ""tileSizeMicrons"": 25.0, ""colorOD"": true, ""colorStain1"": true, ""colorStain2"": false, ""colorStain3"": true, ""colorRed"": false, ""colorGreen"": false, ""colorBlue"": false, ""colorHue"": false, ""colorSaturation"": false, ""colorBrightness"": false, ""doMean"": true, ""doStdDev"": true, ""doMinMax"": true, ""doMedian"": false, ""doHaralick"": false, ""haralickDistance"": 1, ""haralickBins"": 32}');; runObjectClassifier(""TumAd_superpixel"");; runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": true, ""clearAnnotations"": false, ""splitAnnotations"": false}');; `; . ![TileClasstoAnnotation](https://user-images.githubusercontent.com/82104756/114074358-336c7c80-989c-11eb-8379-3d364a48ec7c.PNG). As you can see it does nothing but successfully: no annotations are created. This only happens when I run this feature as a script. Manually it works perfectly. I have tried running all the script except the last line. This works well: it produced superpixels classified into tumour and adipose. But when I want to merge those superpixels to obtain two annotations (tumour and adipose), the line below on its own produces the same results as when run within the whole script: no annotation created. `runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": true, ""clearAnnotations"": false, ""splitAnnotations"": false}');; `. I understand that I am using a newer version than the one in use when this problem was first brought up. It is therefore likely this was fixed. So maybe it's just that I am doing something wrong, but I thought that is should probably reported, in case it's a bug. Best,. Flo",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/704
https://github.com/qupath/qupath/issues/704:698,Performance,load,load,698,"Hello,. I am unsure whether reporting this here is the proper way to bring this up but I seem to be having a very similar issue as the one previously brought up here: https://github.com/qupath/qupath/issues/359. My OS is Windows 10 and I am using the 0.2.3 version. This is the system info:; Version: 0.2.3; Build time: 2020-09-11, 12:59; Latest commit tag: '43aad4ec'. Java version:		14.0.2; Java vendor: 		AdoptOpenJDK - https://adoptopenjdk.net/; Java home: 		C:\Users\lafore01\AppData\Local\QuPath-0.2.3\runtime. Operating system:		Windows 10 - 10.0; Architecture: 		amd64. What I have done so far: on a brightfield image, I first create DoG superpixels, calculate the intensity features, then load an object classifier to separate them into two classes: tumour and adipose. Finally, I use the tile classification to annotation feature. While all this works well when done manually, the following script (obtained by using the workflow to script feature) produces the same problem described previously when it reaches the tile classification to annotation line. See attached screenshot. `selectAnnotations();; runPlugin('qupath.imagej.superpixels.DoGSuperpixelsPlugin', '{""downsampleFactor"": 4.0, ""sigmaMicrons"": 10.0, ""minThreshold"": 10.0, ""maxThreshold"": 230.0, ""noiseThreshold"": 1.0}');; selectDetections();; runPlugin('qupath.lib.algorithms.IntensityFeaturesPlugin', '{""pixelSizeMicrons"": 2.0, ""region"": ""ROI"", ""tileSizeMicrons"": 25.0, ""colorOD"": true, ""colorStain1"": true, ""colorStain2"": false, ""colorStain3"": true, ""colorRed"": false, ""colorGreen"": false, ""colorBlue"": false, ""colorHue"": false, ""colorSaturation"": false, ""colorBrightness"": false, ""doMean"": true, ""doStdDev"": true, ""doMinMax"": true, ""doMedian"": false, ""doHaralick"": false, ""haralickDistance"": 1, ""haralickBins"": 32}');; runObjectClassifier(""TumAd_superpixel"");; runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": true, ""clearAnnotations"": false, ""splitA",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/704
https://github.com/qupath/qupath/issues/704:1968,Usability,clear,clearAnnotations,1968,"ature) produces the same problem described previously when it reaches the tile classification to annotation line. See attached screenshot. `selectAnnotations();; runPlugin('qupath.imagej.superpixels.DoGSuperpixelsPlugin', '{""downsampleFactor"": 4.0, ""sigmaMicrons"": 10.0, ""minThreshold"": 10.0, ""maxThreshold"": 230.0, ""noiseThreshold"": 1.0}');; selectDetections();; runPlugin('qupath.lib.algorithms.IntensityFeaturesPlugin', '{""pixelSizeMicrons"": 2.0, ""region"": ""ROI"", ""tileSizeMicrons"": 25.0, ""colorOD"": true, ""colorStain1"": true, ""colorStain2"": false, ""colorStain3"": true, ""colorRed"": false, ""colorGreen"": false, ""colorBlue"": false, ""colorHue"": false, ""colorSaturation"": false, ""colorBrightness"": false, ""doMean"": true, ""doStdDev"": true, ""doMinMax"": true, ""doMedian"": false, ""doHaralick"": false, ""haralickDistance"": 1, ""haralickBins"": 32}');; runObjectClassifier(""TumAd_superpixel"");; runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": true, ""clearAnnotations"": false, ""splitAnnotations"": false}');; `; . ![TileClasstoAnnotation](https://user-images.githubusercontent.com/82104756/114074358-336c7c80-989c-11eb-8379-3d364a48ec7c.PNG). As you can see it does nothing but successfully: no annotations are created. This only happens when I run this feature as a script. Manually it works perfectly. I have tried running all the script except the last line. This works well: it produced superpixels classified into tumour and adipose. But when I want to merge those superpixels to obtain two annotations (tumour and adipose), the line below on its own produces the same results as when run within the whole script: no annotation created. `runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": true, ""clearAnnotations"": false, ""splitAnnotations"": false}');; `. I understand that I am using a newer version than the one in use when this problem was first brought u",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/704
https://github.com/qupath/qupath/issues/704:2790,Usability,clear,clearAnnotations,2790,"'qupath.imagej.superpixels.DoGSuperpixelsPlugin', '{""downsampleFactor"": 4.0, ""sigmaMicrons"": 10.0, ""minThreshold"": 10.0, ""maxThreshold"": 230.0, ""noiseThreshold"": 1.0}');; selectDetections();; runPlugin('qupath.lib.algorithms.IntensityFeaturesPlugin', '{""pixelSizeMicrons"": 2.0, ""region"": ""ROI"", ""tileSizeMicrons"": 25.0, ""colorOD"": true, ""colorStain1"": true, ""colorStain2"": false, ""colorStain3"": true, ""colorRed"": false, ""colorGreen"": false, ""colorBlue"": false, ""colorHue"": false, ""colorSaturation"": false, ""colorBrightness"": false, ""doMean"": true, ""doStdDev"": true, ""doMinMax"": true, ""doMedian"": false, ""doHaralick"": false, ""haralickDistance"": 1, ""haralickBins"": 32}');; runObjectClassifier(""TumAd_superpixel"");; runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": true, ""clearAnnotations"": false, ""splitAnnotations"": false}');; `; . ![TileClasstoAnnotation](https://user-images.githubusercontent.com/82104756/114074358-336c7c80-989c-11eb-8379-3d364a48ec7c.PNG). As you can see it does nothing but successfully: no annotations are created. This only happens when I run this feature as a script. Manually it works perfectly. I have tried running all the script except the last line. This works well: it produced superpixels classified into tumour and adipose. But when I want to merge those superpixels to obtain two annotations (tumour and adipose), the line below on its own produces the same results as when run within the whole script: no annotation created. `runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": true, ""clearAnnotations"": false, ""splitAnnotations"": false}');; `. I understand that I am using a newer version than the one in use when this problem was first brought up. It is therefore likely this was fixed. So maybe it's just that I am doing something wrong, but I thought that is should probably reported, in case it's a bug. Best,. Flo",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/704
https://github.com/qupath/qupath/pull/705:68,Safety,predict,predictability,68,* Replace makeRGB(A) with pack(A)RGB methods to improve consistency/predictability; * Enable 'Rotate annotation' to work with point annotations; * Fix behavior of RotatedImageServer with empty tiles https://github.com/qupath/qupath/issues/641,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/705
https://github.com/qupath/qupath/pull/706:229,Availability,avail,available,229,"Notable changes:; * Translucent overlay for live prediction (useful to identify if a tile has been processed when at least one class is transparent); * New 2D/3D thinning & interpolation classes (experimental, not yet used - but available now for scripts); * Many internal improvements, particularly around OpenCV/ImageOps",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/706
https://github.com/qupath/qupath/pull/706:49,Safety,predict,prediction,49,"Notable changes:; * Translucent overlay for live prediction (useful to identify if a tile has been processed when at least one class is transparent); * New 2D/3D thinning & interpolation classes (experimental, not yet used - but available now for scripts); * Many internal improvements, particularly around OpenCV/ImageOps",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/706
https://github.com/qupath/qupath/pull/707:6,Testability,test,tests,6,Added tests:; - TestPathClass,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/707
https://github.com/qupath/qupath/pull/707:16,Testability,Test,TestPathClass,16,Added tests:; - TestPathClass,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/707
https://github.com/qupath/qupath/pull/708:160,Availability,error,error,160,"- QuPath now checks for the validity of OMERO image entries when opening projects/datasets through the OMERO browser (so the user is not stuck getting a lot of error messages when opening a dataset with loads of invalid images).; - Restrict the objects sent back to OMERO through the GUI to annotations only. Sending detections is still possible but only throught scripting.; - Running 'Send selected annotations to OMERO' with no selection will prompt the user with a dialog that asks if the command should be ran with all the annotations present in the current image.; - Removed '(s)'; - Added TMACoreObject serialization. This means that it is technically possible to run 'Send selected annotations to OMERO' for a selected TMA core. It will then behave as expected (N.B. on OMERO, it will still appear as a normal 'OMERO ROI')",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/708
https://github.com/qupath/qupath/pull/708:166,Integrability,message,messages,166,"- QuPath now checks for the validity of OMERO image entries when opening projects/datasets through the OMERO browser (so the user is not stuck getting a lot of error messages when opening a dataset with loads of invalid images).; - Restrict the objects sent back to OMERO through the GUI to annotations only. Sending detections is still possible but only throught scripting.; - Running 'Send selected annotations to OMERO' with no selection will prompt the user with a dialog that asks if the command should be ran with all the annotations present in the current image.; - Removed '(s)'; - Added TMACoreObject serialization. This means that it is technically possible to run 'Send selected annotations to OMERO' for a selected TMA core. It will then behave as expected (N.B. on OMERO, it will still appear as a normal 'OMERO ROI')",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/708
https://github.com/qupath/qupath/pull/708:203,Performance,load,loads,203,"- QuPath now checks for the validity of OMERO image entries when opening projects/datasets through the OMERO browser (so the user is not stuck getting a lot of error messages when opening a dataset with loads of invalid images).; - Restrict the objects sent back to OMERO through the GUI to annotations only. Sending detections is still possible but only throught scripting.; - Running 'Send selected annotations to OMERO' with no selection will prompt the user with a dialog that asks if the command should be ran with all the annotations present in the current image.; - Removed '(s)'; - Added TMACoreObject serialization. This means that it is technically possible to run 'Send selected annotations to OMERO' for a selected TMA core. It will then behave as expected (N.B. on OMERO, it will still appear as a normal 'OMERO ROI')",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/708
https://github.com/qupath/qupath/pull/708:317,Safety,detect,detections,317,"- QuPath now checks for the validity of OMERO image entries when opening projects/datasets through the OMERO browser (so the user is not stuck getting a lot of error messages when opening a dataset with loads of invalid images).; - Restrict the objects sent back to OMERO through the GUI to annotations only. Sending detections is still possible but only throught scripting.; - Running 'Send selected annotations to OMERO' with no selection will prompt the user with a dialog that asks if the command should be ran with all the annotations present in the current image.; - Removed '(s)'; - Added TMACoreObject serialization. This means that it is technically possible to run 'Send selected annotations to OMERO' for a selected TMA core. It will then behave as expected (N.B. on OMERO, it will still appear as a normal 'OMERO ROI')",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/708
https://github.com/qupath/qupath/pull/709:26,Integrability,depend,dependency,26,"* Include missing commons dependency; * Support changing image quality in the args array; * Make sure passwords don't filter through to server args (doesn't seem possible anyway, but add an extra check)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/709
https://github.com/qupath/qupath/pull/709:102,Security,password,passwords,102,"* Include missing commons dependency; * Support changing image quality in the args array; * Make sure passwords don't filter through to server args (doesn't seem possible anyway, but add an extra check)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/709
https://github.com/qupath/qupath/pull/711:8,Testability,test,tests,8,- Added tests for PathClassFactory.; - Made class final and restricted its constructor.; - Added a TODO about PathClass validity,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/711
https://github.com/qupath/qupath/pull/713:365,Modifiability,Refactor,Refactoring,365,- Fixed a bug preventing OMERO images from opening when using 'Import OMERO image to QuPath'; - Users can now browse OMERO servers without a project.; - Users can now open an OMERO image (but not multiple images simultaneously) without a project.; - OMERO images that are not supported by the JSON API will show in the entry's tooltip *why* it is not supported.; - Refactoring,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/713
https://github.com/qupath/qupath/pull/714:5,Integrability,message,message,5,from message in image.sc:; ... images can be aligned based on specific channels. e.g. brightfield images can be aligned based on the DAB channel or the ODsum …,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/714
https://github.com/qupath/qupath/pull/716:96,Safety,detect,detection-for-bigger-annotations,96,Addresses problems raised on the forum:; * https://forum.image.sc/t/stardist-qupath-3-0-snaphot-detection-for-bigger-annotations/51978; * https://forum.image.sc/t/resaving-xlef-file-creates-non-functional-lif-tif-file/51802,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/716
https://github.com/qupath/qupath/issues/717:772,Availability,error,error,772,"Hi, . I know there was such as issue described here already: https://github.com/qupath/qupath/issues/287. But I wanted to point out that with the latest 0.3.0-SNAPSHOT, the memoization file got saved in ; `C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata`. This mimmics the architecture I have where the actual file is stored:; `L:\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata`. But in previous versions the memo files were in the same location as the original file. Is this new behavior intended?. And as it was the case in the other issue, this file fails to get deleted by BioFormats after considering it ""invalid"". This error message showed up in a script that I ran after reopening a project I created in QuPath 0.3.0-SNAPSHOT. ```; WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ERROR: temp file rename returned false: C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\valentina.scabia_UPBRI\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo5671337359207729134; ERROR: deleting invalid memo file: C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\valentina.scabia_UPBRI\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; at loci.formats.in.JPEGReader$DefaultJPEGReaderConstructorAccess.newInstance(Unknown Source); at com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$1.newInstance(Kryo.java:1275); at com.esotericsoftware.kryo.Kryo.newInstance(Kryo.java:1139); at com.esotericsoftware.kryo.serializers.FieldSerializer.create(FieldSerializer.java:562); at com.esotericsoftware.kryo.serializers.FieldSerialize",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:1109,Availability,ERROR,ERROR,1109,"ile got saved in ; `C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata`. This mimmics the architecture I have where the actual file is stored:; `L:\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata`. But in previous versions the memo files were in the same location as the original file. Is this new behavior intended?. And as it was the case in the other issue, this file fails to get deleted by BioFormats after considering it ""invalid"". This error message showed up in a script that I ran after reopening a project I created in QuPath 0.3.0-SNAPSHOT. ```; WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ERROR: temp file rename returned false: C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\valentina.scabia_UPBRI\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo5671337359207729134; ERROR: deleting invalid memo file: C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\valentina.scabia_UPBRI\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; at loci.formats.in.JPEGReader$DefaultJPEGReaderConstructorAccess.newInstance(Unknown Source); at com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$1.newInstance(Kryo.java:1275); at com.esotericsoftware.kryo.Kryo.newInstance(Kryo.java:1139); at com.esotericsoftware.kryo.serializers.FieldSerializer.create(FieldSerializer.java:562); at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:538); at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731); at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125); at com.es",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:1369,Availability,ERROR,ERROR,1369,"`L:\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata`. But in previous versions the memo files were in the same location as the original file. Is this new behavior intended?. And as it was the case in the other issue, this file fails to get deleted by BioFormats after considering it ""invalid"". This error message showed up in a script that I ran after reopening a project I created in QuPath 0.3.0-SNAPSHOT. ```; WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ERROR: temp file rename returned false: C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\valentina.scabia_UPBRI\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo5671337359207729134; ERROR: deleting invalid memo file: C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\valentina.scabia_UPBRI\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; at loci.formats.in.JPEGReader$DefaultJPEGReaderConstructorAccess.newInstance(Unknown Source); at com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$1.newInstance(Kryo.java:1275); at com.esotericsoftware.kryo.Kryo.newInstance(Kryo.java:1139); at com.esotericsoftware.kryo.serializers.FieldSerializer.create(FieldSerializer.java:562); at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:538); at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731); at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125); at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543); at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731); at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.read(DefaultArraySer",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:5901,Energy Efficiency,Reduce,ReduceOps,5901,"images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:275); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.images.servers.ServerTools.getPaddedRequest(ServerTools.java:231); at qupath.opencv.ops.ImageOps$DefaultImageDataOp.apply(ImageOps.java:256); at qupath.tensorflow.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:807); at qupath.tensorflow.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:687); at java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.AbstractTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. On Windows, create a new Project and add an Image that will use BioFormats; 2. Display the",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:5911,Energy Efficiency,Reduce,ReduceTask,5911,"images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:275); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.images.servers.ServerTools.getPaddedRequest(ServerTools.java:231); at qupath.opencv.ops.ImageOps$DefaultImageDataOp.apply(ImageOps.java:256); at qupath.tensorflow.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:807); at qupath.tensorflow.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:687); at java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.AbstractTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. On Windows, create a new Project and add an Image that will use BioFormats; 2. Display the",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:5976,Energy Efficiency,Reduce,ReduceOps,5976,"ver.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:275); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.images.servers.ServerTools.getPaddedRequest(ServerTools.java:231); at qupath.opencv.ops.ImageOps$DefaultImageDataOp.apply(ImageOps.java:256); at qupath.tensorflow.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:807); at qupath.tensorflow.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:687); at java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.AbstractTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. On Windows, create a new Project and add an Image that will use BioFormats; 2. Display the image in the Viewer at least once; 3. Close QuPath and restart; 4. Reopen ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:5986,Energy Efficiency,Reduce,ReduceTask,5986,"ver.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:275); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.images.servers.ServerTools.getPaddedRequest(ServerTools.java:231); at qupath.opencv.ops.ImageOps$DefaultImageDataOp.apply(ImageOps.java:256); at qupath.tensorflow.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:807); at qupath.tensorflow.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:687); at java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.AbstractTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. On Windows, create a new Project and add an Image that will use BioFormats; 2. Display the image in the Viewer at least once; 3. Close QuPath and restart; 4. Reopen ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:778,Integrability,message,message,778,"Hi, . I know there was such as issue described here already: https://github.com/qupath/qupath/issues/287. But I wanted to point out that with the latest 0.3.0-SNAPSHOT, the memoization file got saved in ; `C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata`. This mimmics the architecture I have where the actual file is stored:; `L:\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata`. But in previous versions the memo files were in the same location as the original file. Is this new behavior intended?. And as it was the case in the other issue, this file fails to get deleted by BioFormats after considering it ""invalid"". This error message showed up in a script that I ran after reopening a project I created in QuPath 0.3.0-SNAPSHOT. ```; WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ERROR: temp file rename returned false: C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\valentina.scabia_UPBRI\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo5671337359207729134; ERROR: deleting invalid memo file: C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\valentina.scabia_UPBRI\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; at loci.formats.in.JPEGReader$DefaultJPEGReaderConstructorAccess.newInstance(Unknown Source); at com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy$1.newInstance(Kryo.java:1275); at com.esotericsoftware.kryo.Kryo.newInstance(Kryo.java:1139); at com.esotericsoftware.kryo.serializers.FieldSerializer.create(FieldSerializer.java:562); at com.esotericsoftware.kryo.serializers.FieldSerialize",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:5838,Integrability,wrap,wrapAndCopyInto,5838,"dTile(BioFormatsImageServer.java:848); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:275); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.images.servers.ServerTools.getPaddedRequest(ServerTools.java:231); at qupath.opencv.ops.ImageOps$DefaultImageDataOp.apply(ImageOps.java:256); at qupath.tensorflow.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:807); at qupath.tensorflow.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:687); at java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.AbstractTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. On Windows, create a new Project and ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:4147,Performance,load,loadReader,4147,read(ObjectField.java:125); at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543); at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731); at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125); at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543); at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731); at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.read(DefaultArraySerializers.java:391); at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.read(DefaultArraySerializers.java:302); at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731); at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125); at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543); at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:709); at loci.formats.Memoizer$KryoDeser.loadReader(Memoizer.java:163); at loci.formats.Memoizer.loadMemo(Memoizer.java:888); at loci.formats.Memoizer.setId(Memoizer.java:666); at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.createReader(BioFormatsImageServer.java:1360); at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.createReader(BioFormatsImageServer.java:1265); at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.getReaderForThread(BioFormatsImageServer.java:1191); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.getReader(BioFormatsImageServer.java:815); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:848); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:275); at qupath.lib.images.servers.AbstractTilea,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:4203,Performance,load,loadMemo,4203,o.serializers.FieldSerializer.read(FieldSerializer.java:543); at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731); at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125); at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543); at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731); at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.read(DefaultArraySerializers.java:391); at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.read(DefaultArraySerializers.java:302); at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731); at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125); at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543); at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:709); at loci.formats.Memoizer$KryoDeser.loadReader(Memoizer.java:163); at loci.formats.Memoizer.loadMemo(Memoizer.java:888); at loci.formats.Memoizer.setId(Memoizer.java:666); at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.createReader(BioFormatsImageServer.java:1360); at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.createReader(BioFormatsImageServer.java:1265); at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.getReaderForThread(BioFormatsImageServer.java:1191); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.getReader(BioFormatsImageServer.java:815); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:848); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:275); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageS,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:6112,Performance,concurren,concurrent,6112," qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.images.servers.ServerTools.getPaddedRequest(ServerTools.java:231); at qupath.opencv.ops.ImageOps$DefaultImageDataOp.apply(ImageOps.java:256); at qupath.tensorflow.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:807); at qupath.tensorflow.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:687); at java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.AbstractTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. On Windows, create a new Project and add an Image that will use BioFormats; 2. Display the image in the Viewer at least once; 3. Close QuPath and restart; 4. Reopen the file; 5. Start a script and run it. **Desktop (please complete the following information):**; - OS: Windows 10 build 20H2; - Qu",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:6185,Performance,concurren,concurrent,6185,"er.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.images.servers.ServerTools.getPaddedRequest(ServerTools.java:231); at qupath.opencv.ops.ImageOps$DefaultImageDataOp.apply(ImageOps.java:256); at qupath.tensorflow.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:807); at qupath.tensorflow.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:687); at java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.AbstractTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. On Windows, create a new Project and add an Image that will use BioFormats; 2. Display the image in the Viewer at least once; 3. Close QuPath and restart; 4. Reopen the file; 5. Start a script and run it. **Desktop (please complete the following information):**; - OS: Windows 10 build 20H2; - QuPath Version 0.3.0 SNAPSHOT. Best regards,. Olivier",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:6256,Performance,concurren,concurrent,6256,"er.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.images.servers.ServerTools.getPaddedRequest(ServerTools.java:231); at qupath.opencv.ops.ImageOps$DefaultImageDataOp.apply(ImageOps.java:256); at qupath.tensorflow.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:807); at qupath.tensorflow.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:687); at java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.AbstractTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. On Windows, create a new Project and add an Image that will use BioFormats; 2. Display the image in the Viewer at least once; 3. Close QuPath and restart; 4. Reopen the file; 5. Start a script and run it. **Desktop (please complete the following information):**; - OS: Windows 10 build 20H2; - QuPath Version 0.3.0 SNAPSHOT. Best regards,. Olivier",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:6343,Performance,concurren,concurrent,6343,"er.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.images.servers.ServerTools.getPaddedRequest(ServerTools.java:231); at qupath.opencv.ops.ImageOps$DefaultImageDataOp.apply(ImageOps.java:256); at qupath.tensorflow.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:807); at qupath.tensorflow.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:687); at java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.AbstractTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. On Windows, create a new Project and add an Image that will use BioFormats; 2. Display the image in the Viewer at least once; 3. Close QuPath and restart; 4. Reopen the file; 5. Start a script and run it. **Desktop (please complete the following information):**; - OS: Windows 10 build 20H2; - QuPath Version 0.3.0 SNAPSHOT. Best regards,. Olivier",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:6412,Performance,concurren,concurrent,6412,"er.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.images.servers.ServerTools.getPaddedRequest(ServerTools.java:231); at qupath.opencv.ops.ImageOps$DefaultImageDataOp.apply(ImageOps.java:256); at qupath.tensorflow.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:807); at qupath.tensorflow.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:687); at java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.AbstractTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. On Windows, create a new Project and add an Image that will use BioFormats; 2. Display the image in the Viewer at least once; 3. Close QuPath and restart; 4. Reopen the file; 5. Start a script and run it. **Desktop (please complete the following information):**; - OS: Windows 10 build 20H2; - QuPath Version 0.3.0 SNAPSHOT. Best regards,. Olivier",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:6486,Performance,concurren,concurrent,6486,"er.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.images.servers.ServerTools.getPaddedRequest(ServerTools.java:231); at qupath.opencv.ops.ImageOps$DefaultImageDataOp.apply(ImageOps.java:256); at qupath.tensorflow.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:807); at qupath.tensorflow.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:687); at java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.AbstractTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source); WARN: file deletion failed C:\Users\oburri\AppData\Local\Temp\qupath-memo-15327719930616011555\biop\Image_Processing\User_Projects\Olivier\USERNAME_REDACTED\Sample images - metadata\.MCF7_hPR_OVX_3rd_M6-10_Ki67.vsi.bfmemo; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. On Windows, create a new Project and add an Image that will use BioFormats; 2. Display the image in the Viewer at least once; 3. Close QuPath and restart; 4. Reopen the file; 5. Start a script and run it. **Desktop (please complete the following information):**; - OS: Windows 10 build 20H2; - QuPath Version 0.3.0 SNAPSHOT. Best regards,. Olivier",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:5425,Safety,detect,detectObjectsForTile,5425,ers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.createReader(BioFormatsImageServer.java:1265); at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.getReaderForThread(BioFormatsImageServer.java:1191); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.getReader(BioFormatsImageServer.java:815); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:848); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:275); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.images.servers.ServerTools.getPaddedRequest(ServerTools.java:231); at qupath.opencv.ops.ImageOps$DefaultImageDataOp.apply(ImageOps.java:256); at qupath.tensorflow.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:807); at qupath.tensorflow.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:687); at java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.AbstractTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.runWo,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/issues/717:5516,Safety,detect,detectObjects,5516,mageServer.java:1265); at qupath.lib.images.servers.bioformats.BioFormatsImageServer$BioFormatsReaderManager.getReaderForThread(BioFormatsImageServer.java:1191); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.getReader(BioFormatsImageServer.java:815); at qupath.lib.images.servers.bioformats.BioFormatsImageServer.readTile(BioFormatsImageServer.java:848); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:275); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.images.servers.ServerTools.getPaddedRequest(ServerTools.java:231); at qupath.opencv.ops.ImageOps$DefaultImageDataOp.apply(ImageOps.java:256); at qupath.tensorflow.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:807); at qupath.tensorflow.stardist.StarDist2D.lambda$detectObjects$5(StarDist2D.java:687); at java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); at java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); at java.base/java.util.stream.AbstractTask.compute(Unknown Source); at java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); at java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); at java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); at java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unkn,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/717
https://github.com/qupath/qupath/pull/718:170,Testability,log,logic,170,"- Created rotation property in `QuPathViewer`.; - Made the `rotationProperty` of the `CircularSlider` in radians, while keeping the displayed values in degrees.; - Moved logic of 'Rotate image' command into its own class (to restrict the creation of the pane to a single instance).; - Bound viewer's rotation property to the `Circular Slider` from 'Rotate image' command.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/718
https://github.com/qupath/qupath/pull/719:148,Energy Efficiency,efficient,efficient,148,"There are now 2 versions of the same method:; - `getBinIndexForValue(double, double)`, which makes the assumption that all bins are of equal width (efficient).; - `getBinIndexForValue(double)`, which does not make assumptions regarding bin width and performs further checks (not efficient). Histograms now use the former method, as the latter one proved dramatically slower for opening some images (e.g. `CMU-1.svs`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/719
https://github.com/qupath/qupath/pull/719:279,Energy Efficiency,efficient,efficient,279,"There are now 2 versions of the same method:; - `getBinIndexForValue(double, double)`, which makes the assumption that all bins are of equal width (efficient).; - `getBinIndexForValue(double)`, which does not make assumptions regarding bin width and performs further checks (not efficient). Histograms now use the former method, as the latter one proved dramatically slower for opening some images (e.g. `CMU-1.svs`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/719
https://github.com/qupath/qupath/pull/719:250,Performance,perform,performs,250,"There are now 2 versions of the same method:; - `getBinIndexForValue(double, double)`, which makes the assumption that all bins are of equal width (efficient).; - `getBinIndexForValue(double)`, which does not make assumptions regarding bin width and performs further checks (not efficient). Histograms now use the former method, as the latter one proved dramatically slower for opening some images (e.g. `CMU-1.svs`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/719
https://github.com/qupath/qupath/pull/721:199,Safety,Avoid,Avoid,199,"* Add `--illegal-access=permit` Java option, intended to work around bugs such as https://github.com/qupath/qupath/issues/717 (and the inability to set project entry metadata, spotted by @Svidro); * Avoid using paragraph folding, new in RichTextFX 0.10.6, which could result in script editor exceptions (thanks to @melvingelbard for spotting that)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/721
https://github.com/qupath/qupath/pull/721:17,Security,access,access,17,"* Add `--illegal-access=permit` Java option, intended to work around bugs such as https://github.com/qupath/qupath/issues/717 (and the inability to set project entry metadata, spotted by @Svidro); * Avoid using paragraph folding, new in RichTextFX 0.10.6, which could result in script editor exceptions (thanks to @melvingelbard for spotting that)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/721
https://github.com/qupath/qupath/pull/722:1307,Safety,Detect,Detection,1307,The script editor now has a new 'Insert' tab with the following commands:. Insert >; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Symbols >; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;µ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Imports >; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;QP; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;QPEx; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;All default; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Classifiers >; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Pixel classifiers _(This insert all pixel classifier names from the currently opened project in the script editor)_; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Object classifiers _(This insert all object classifier names from the currently opened project in the script editor)_; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Measurements >; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Detection _(This import all detection measurement names from the currently opened project in the script editor)_,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/722
https://github.com/qupath/qupath/pull/722:1335,Safety,detect,detection,1335,The script editor now has a new 'Insert' tab with the following commands:. Insert >; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Symbols >; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;µ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Imports >; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;QP; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;QPEx; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;All default; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Classifiers >; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Pixel classifiers _(This insert all pixel classifier names from the currently opened project in the script editor)_; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Object classifiers _(This insert all object classifier names from the currently opened project in the script editor)_; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Measurements >; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;Detection _(This import all detection measurement names from the currently opened project in the script editor)_,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/722
https://github.com/qupath/qupath/pull/723:393,Availability,down,downsample,393,"New additions to `ImageOps` and `OpenCVTools` intended to make scripting with OpenCV a lot more straightforward. An example:. ```groovy; import ij.*; import ij.gui.Roi; import ij.process.ImageProcessor; import qupath.lib.images.servers.PixelType; import org.bytedeco.opencv.global.opencv_core; import org.bytedeco.opencv.opencv_core.*. // Request a region and convert to an OpenCV Mat; double downsample = 1.0; def roi = getSelectedROI(); def server = getCurrentServer(); def region = RegionRequest.createInstance(server.getPath(), downsample, roi). def img = server.readBufferedImage(region); def mat = OpenCVTools.imageToMat(img). // Define a list of operations to apply sequentially; // Here, convert to 32-bit and then apply a Difference of Gaussian filter; def opList = [; ImageOps.Core.ensureType(PixelType.FLOAT32),; ImageOps.Core.splitSubtract(; ImageOps.Filters.gaussianBlur(2.0),; ImageOps.Filters.gaussianBlur(5.0); ); ]; def op = ImageOps.Core.sequential(opList). // Apply the op to the image, handling any necessary padding; mat = ImageOps.padAndApply(op, mat). // Print some stats, per channel and across all channels; println 'Output channel mean: ' + OpenCVTools.channelMean(mat); println 'Output channel std dev: ' + OpenCVTools.channelStdDev(mat); println 'Output global mean: ' + OpenCVTools.mean(mat); println 'Output globalel std dev: ' + OpenCVTools.stdDev(mat). // Show result using ImageJ; def imp = OpenCVTools.matToImagePlus(""Result"", mat); imp.show(); ```. Additionally added `GroovyCV` to provide more assistance through Groovy categories and operator overloading. This is a *lot* more experimental, but here's a script:; ```groovy; import ij.*; import ij.gui.Roi; import ij.process.ImageProcessor; import org.bytedeco.opencv.global.opencv_core; import org.bytedeco.opencv.opencv_core.*. double downsample = 1.0; def roi = getSelectedROI(); def server = getCurrentServer(); def region = RegionRequest.createInstance(server.getPath(), downsample, roi). /**; * We can do fun ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/723
https://github.com/qupath/qupath/pull/723:532,Availability,down,downsample,532,"New additions to `ImageOps` and `OpenCVTools` intended to make scripting with OpenCV a lot more straightforward. An example:. ```groovy; import ij.*; import ij.gui.Roi; import ij.process.ImageProcessor; import qupath.lib.images.servers.PixelType; import org.bytedeco.opencv.global.opencv_core; import org.bytedeco.opencv.opencv_core.*. // Request a region and convert to an OpenCV Mat; double downsample = 1.0; def roi = getSelectedROI(); def server = getCurrentServer(); def region = RegionRequest.createInstance(server.getPath(), downsample, roi). def img = server.readBufferedImage(region); def mat = OpenCVTools.imageToMat(img). // Define a list of operations to apply sequentially; // Here, convert to 32-bit and then apply a Difference of Gaussian filter; def opList = [; ImageOps.Core.ensureType(PixelType.FLOAT32),; ImageOps.Core.splitSubtract(; ImageOps.Filters.gaussianBlur(2.0),; ImageOps.Filters.gaussianBlur(5.0); ); ]; def op = ImageOps.Core.sequential(opList). // Apply the op to the image, handling any necessary padding; mat = ImageOps.padAndApply(op, mat). // Print some stats, per channel and across all channels; println 'Output channel mean: ' + OpenCVTools.channelMean(mat); println 'Output channel std dev: ' + OpenCVTools.channelStdDev(mat); println 'Output global mean: ' + OpenCVTools.mean(mat); println 'Output globalel std dev: ' + OpenCVTools.stdDev(mat). // Show result using ImageJ; def imp = OpenCVTools.matToImagePlus(""Result"", mat); imp.show(); ```. Additionally added `GroovyCV` to provide more assistance through Groovy categories and operator overloading. This is a *lot* more experimental, but here's a script:; ```groovy; import ij.*; import ij.gui.Roi; import ij.process.ImageProcessor; import org.bytedeco.opencv.global.opencv_core; import org.bytedeco.opencv.opencv_core.*. double downsample = 1.0; def roi = getSelectedROI(); def server = getCurrentServer(); def region = RegionRequest.createInstance(server.getPath(), downsample, roi). /**; * We can do fun ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/723
https://github.com/qupath/qupath/pull/723:1823,Availability,down,downsample,1823,"2),; ImageOps.Core.splitSubtract(; ImageOps.Filters.gaussianBlur(2.0),; ImageOps.Filters.gaussianBlur(5.0); ); ]; def op = ImageOps.Core.sequential(opList). // Apply the op to the image, handling any necessary padding; mat = ImageOps.padAndApply(op, mat). // Print some stats, per channel and across all channels; println 'Output channel mean: ' + OpenCVTools.channelMean(mat); println 'Output channel std dev: ' + OpenCVTools.channelStdDev(mat); println 'Output global mean: ' + OpenCVTools.mean(mat); println 'Output globalel std dev: ' + OpenCVTools.stdDev(mat). // Show result using ImageJ; def imp = OpenCVTools.matToImagePlus(""Result"", mat); imp.show(); ```. Additionally added `GroovyCV` to provide more assistance through Groovy categories and operator overloading. This is a *lot* more experimental, but here's a script:; ```groovy; import ij.*; import ij.gui.Roi; import ij.process.ImageProcessor; import org.bytedeco.opencv.global.opencv_core; import org.bytedeco.opencv.opencv_core.*. double downsample = 1.0; def roi = getSelectedROI(); def server = getCurrentServer(); def region = RegionRequest.createInstance(server.getPath(), downsample, roi). /**; * We can do fun stuff in here; */; use (GroovyCV) {. def img = server.readBufferedImage(region). // Let's start with OpenCV and average the channels; def mat = img as Mat; mat.convertTo(mat, opencv_core.CV_32F); mat = mat.splitChannels().average(). // Compute difference of Gaussians; def mat2 = mat.clone(); OpenCVTools.gaussianFilter(mat, 2.0) ; OpenCVTools.gaussianFilter(mat2, 5.0); mat = mat - mat2; ; // Compute a threshold using absolute values; mat2 = mat.abs(); double madStd = OpenCVTools.median(mat2) * 1.4826; mat = mat / madStd; def matBinary = mat.gt(3.0). // Switch to ImageJ for display; def impOrig = img as ImagePlus; impOrig.show(); def imp = mat as ImagePlus; imp.show(). // Create a ROI from the binary image, instead of showing it; def impBinary = matBinary as ImagePlus; impOrig.setRoi(impBinary as Roi); }; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/723
https://github.com/qupath/qupath/pull/723:1962,Availability,down,downsample,1962,"2),; ImageOps.Core.splitSubtract(; ImageOps.Filters.gaussianBlur(2.0),; ImageOps.Filters.gaussianBlur(5.0); ); ]; def op = ImageOps.Core.sequential(opList). // Apply the op to the image, handling any necessary padding; mat = ImageOps.padAndApply(op, mat). // Print some stats, per channel and across all channels; println 'Output channel mean: ' + OpenCVTools.channelMean(mat); println 'Output channel std dev: ' + OpenCVTools.channelStdDev(mat); println 'Output global mean: ' + OpenCVTools.mean(mat); println 'Output globalel std dev: ' + OpenCVTools.stdDev(mat). // Show result using ImageJ; def imp = OpenCVTools.matToImagePlus(""Result"", mat); imp.show(); ```. Additionally added `GroovyCV` to provide more assistance through Groovy categories and operator overloading. This is a *lot* more experimental, but here's a script:; ```groovy; import ij.*; import ij.gui.Roi; import ij.process.ImageProcessor; import org.bytedeco.opencv.global.opencv_core; import org.bytedeco.opencv.opencv_core.*. double downsample = 1.0; def roi = getSelectedROI(); def server = getCurrentServer(); def region = RegionRequest.createInstance(server.getPath(), downsample, roi). /**; * We can do fun stuff in here; */; use (GroovyCV) {. def img = server.readBufferedImage(region). // Let's start with OpenCV and average the channels; def mat = img as Mat; mat.convertTo(mat, opencv_core.CV_32F); mat = mat.splitChannels().average(). // Compute difference of Gaussians; def mat2 = mat.clone(); OpenCVTools.gaussianFilter(mat, 2.0) ; OpenCVTools.gaussianFilter(mat2, 5.0); mat = mat - mat2; ; // Compute a threshold using absolute values; mat2 = mat.abs(); double madStd = OpenCVTools.median(mat2) * 1.4826; mat = mat / madStd; def matBinary = mat.gt(3.0). // Switch to ImageJ for display; def impOrig = img as ImagePlus; impOrig.show(); def imp = mat as ImagePlus; imp.show(). // Create a ROI from the binary image, instead of showing it; def impBinary = matBinary as ImagePlus; impOrig.setRoi(impBinary as Roi); }; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/723
https://github.com/qupath/qupath/pull/724:169,Availability,error,errors,169,"Bump dependencies and attempt to avoid ConcurrentModificationExceptions when clearing the waitingMap.; These could occur (rarely) when using Measurement maps. Since the errors were hard to reproduce, it's not entirely clear if they are solved.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/724
https://github.com/qupath/qupath/pull/724:5,Integrability,depend,dependencies,5,"Bump dependencies and attempt to avoid ConcurrentModificationExceptions when clearing the waitingMap.; These could occur (rarely) when using Measurement maps. Since the errors were hard to reproduce, it's not entirely clear if they are solved.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/724
https://github.com/qupath/qupath/pull/724:39,Performance,Concurren,ConcurrentModificationExceptions,39,"Bump dependencies and attempt to avoid ConcurrentModificationExceptions when clearing the waitingMap.; These could occur (rarely) when using Measurement maps. Since the errors were hard to reproduce, it's not entirely clear if they are solved.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/724
https://github.com/qupath/qupath/pull/724:33,Safety,avoid,avoid,33,"Bump dependencies and attempt to avoid ConcurrentModificationExceptions when clearing the waitingMap.; These could occur (rarely) when using Measurement maps. Since the errors were hard to reproduce, it's not entirely clear if they are solved.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/724
https://github.com/qupath/qupath/pull/724:77,Usability,clear,clearing,77,"Bump dependencies and attempt to avoid ConcurrentModificationExceptions when clearing the waitingMap.; These could occur (rarely) when using Measurement maps. Since the errors were hard to reproduce, it's not entirely clear if they are solved.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/724
https://github.com/qupath/qupath/pull/724:218,Usability,clear,clear,218,"Bump dependencies and attempt to avoid ConcurrentModificationExceptions when clearing the waitingMap.; These could occur (rarely) when using Measurement maps. Since the errors were hard to reproduce, it's not entirely clear if they are solved.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/724
https://github.com/qupath/qupath/issues/726:347,Availability,failure,failures,347,"## Bug report. **Describe the bug**; [`OMEPyramidSeries`](https://github.com/qupath/qupath/blob/v0.2.3/qupath-extension-bioformats/src/main/java/qupath/lib/images/writers/ome/OMEPyramidWriter.java#L303) is not public. This is problematic, because it is returned by the associated builder and required in input arguments. This can cause unexpected failures. **To Reproduce**; Compare the following two Groovy scripts:. ```groovy; import qupath.lib.images.writers.ome.OMEPyramidWriter; var server = getCurrentServer(); var builder = new OMEPyramidWriter.Builder(server); OMEPyramidWriter.OMEPyramidSeries series = builder.build(); println series; ```. ```groovy; import qupath.lib.images.writers.ome.OMEPyramidWriter; var server = getCurrentServer(); var builder = new OMEPyramidWriter.Builder(server); var series = builder.build(); println series; ```. The first fails - with no error logged. The second should succeed. **Expected behavior**; Both should succeed. **Desktop (please complete the following information):**; - QuPath v0.2.x. **Additional context**; See https://forum.image.sc/t/create-more-than-series-using-qupath/52849",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/726
https://github.com/qupath/qupath/issues/726:878,Availability,error,error,878,"## Bug report. **Describe the bug**; [`OMEPyramidSeries`](https://github.com/qupath/qupath/blob/v0.2.3/qupath-extension-bioformats/src/main/java/qupath/lib/images/writers/ome/OMEPyramidWriter.java#L303) is not public. This is problematic, because it is returned by the associated builder and required in input arguments. This can cause unexpected failures. **To Reproduce**; Compare the following two Groovy scripts:. ```groovy; import qupath.lib.images.writers.ome.OMEPyramidWriter; var server = getCurrentServer(); var builder = new OMEPyramidWriter.Builder(server); OMEPyramidWriter.OMEPyramidSeries series = builder.build(); println series; ```. ```groovy; import qupath.lib.images.writers.ome.OMEPyramidWriter; var server = getCurrentServer(); var builder = new OMEPyramidWriter.Builder(server); var series = builder.build(); println series; ```. The first fails - with no error logged. The second should succeed. **Expected behavior**; Both should succeed. **Desktop (please complete the following information):**; - QuPath v0.2.x. **Additional context**; See https://forum.image.sc/t/create-more-than-series-using-qupath/52849",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/726
https://github.com/qupath/qupath/issues/726:884,Testability,log,logged,884,"## Bug report. **Describe the bug**; [`OMEPyramidSeries`](https://github.com/qupath/qupath/blob/v0.2.3/qupath-extension-bioformats/src/main/java/qupath/lib/images/writers/ome/OMEPyramidWriter.java#L303) is not public. This is problematic, because it is returned by the associated builder and required in input arguments. This can cause unexpected failures. **To Reproduce**; Compare the following two Groovy scripts:. ```groovy; import qupath.lib.images.writers.ome.OMEPyramidWriter; var server = getCurrentServer(); var builder = new OMEPyramidWriter.Builder(server); OMEPyramidWriter.OMEPyramidSeries series = builder.build(); println series; ```. ```groovy; import qupath.lib.images.writers.ome.OMEPyramidWriter; var server = getCurrentServer(); var builder = new OMEPyramidWriter.Builder(server); var series = builder.build(); println series; ```. The first fails - with no error logged. The second should succeed. **Expected behavior**; Both should succeed. **Desktop (please complete the following information):**; - QuPath v0.2.x. **Additional context**; See https://forum.image.sc/t/create-more-than-series-using-qupath/52849",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/726
https://github.com/qupath/qupath/pull/728:101,Safety,avoid,avoids,101,"This is useful for cases when StarDist is used to bootstrap a nucleus annotation project, because it avoids any need for converting detections later.; If cell expansion is applied, the nucleus is added as a separate annotation below the expanded cell.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/728
https://github.com/qupath/qupath/pull/728:132,Safety,detect,detections,132,"This is useful for cases when StarDist is used to bootstrap a nucleus annotation project, because it avoids any need for converting detections later.; If cell expansion is applied, the nucleus is added as a separate annotation below the expanded cell.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/728
https://github.com/qupath/qupath/pull/729:242,Availability,avail,available,242,"Relax the requirements that any image has to be a local file to work with Bio-Formats. For example, https://qupath.github.io/images/qupath-banner-web-logo.jpg can now be opened directly. This may become more important if Zarr support becomes available through Bio-Formats. One risk with this is that it will make adding an OMERO (or similar) image very slow, as Bio-Formats tries and fails to read it. To mitigate the problem, the image is tested based upon its URI path only - if no potentially-compatible reader is found then the image read won't be attempted. The option to read other URLs is turned off by default through the preferences.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/729
https://github.com/qupath/qupath/pull/729:277,Safety,risk,risk,277,"Relax the requirements that any image has to be a local file to work with Bio-Formats. For example, https://qupath.github.io/images/qupath-banner-web-logo.jpg can now be opened directly. This may become more important if Zarr support becomes available through Bio-Formats. One risk with this is that it will make adding an OMERO (or similar) image very slow, as Bio-Formats tries and fails to read it. To mitigate the problem, the image is tested based upon its URI path only - if no potentially-compatible reader is found then the image read won't be attempted. The option to read other URLs is turned off by default through the preferences.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/729
https://github.com/qupath/qupath/pull/729:150,Testability,log,logo,150,"Relax the requirements that any image has to be a local file to work with Bio-Formats. For example, https://qupath.github.io/images/qupath-banner-web-logo.jpg can now be opened directly. This may become more important if Zarr support becomes available through Bio-Formats. One risk with this is that it will make adding an OMERO (or similar) image very slow, as Bio-Formats tries and fails to read it. To mitigate the problem, the image is tested based upon its URI path only - if no potentially-compatible reader is found then the image read won't be attempted. The option to read other URLs is turned off by default through the preferences.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/729
https://github.com/qupath/qupath/pull/729:440,Testability,test,tested,440,"Relax the requirements that any image has to be a local file to work with Bio-Formats. For example, https://qupath.github.io/images/qupath-banner-web-logo.jpg can now be opened directly. This may become more important if Zarr support becomes available through Bio-Formats. One risk with this is that it will make adding an OMERO (or similar) image very slow, as Bio-Formats tries and fails to read it. To mitigate the problem, the image is tested based upon its URI path only - if no potentially-compatible reader is found then the image read won't be attempted. The option to read other URLs is turned off by default through the preferences.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/729
https://github.com/qupath/qupath/pull/730:200,Performance,load,load,200,"This is for cases where something terrible happens in a script, and currently the user gets less info than if something minor had gone wrong. An example is the silence that greets a doomed attempt to load a native library.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/730
https://github.com/qupath/qupath/pull/731:108,Testability,test,tests,108,Make it harder to generate invalid PathClasses accidentally by removing or modifying constructors. Simplify tests and add a stronger validity check for names.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/731
https://github.com/qupath/qupath/pull/731:99,Usability,Simpl,Simplify,99,Make it harder to generate invalid PathClasses accidentally by removing or modifying constructors. Simplify tests and add a stronger validity check for names.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/731
https://github.com/qupath/qupath/pull/732:200,Performance,load,load,200,"This is for cases where something terrible happens in a script, and currently the user gets less info than if something minor had gone wrong. An example is the silence that greets a doomed attempt to load a native library.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/732
https://github.com/qupath/qupath/pull/734:147,Testability,test,tests,147,"Create workflow for CI.; Note that this is only expected to work with v0.3+ because of the use of Java 16, and because of failing headless-related tests in v0.2.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/734
https://github.com/qupath/qupath/pull/736:1379,Availability,avail,available,1379,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/736
https://github.com/qupath/qupath/pull/736:1433,Availability,reliab,reliable,1433,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/736
https://github.com/qupath/qupath/pull/736:1789,Availability,recover,recover,1789,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/736
https://github.com/qupath/qupath/pull/736:419,Deployability,install,installer,419,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/736
https://github.com/qupath/qupath/pull/736:482,Deployability,install,installer,482,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/736
https://github.com/qupath/qupath/pull/736:529,Deployability,install,installer,529,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/736
https://github.com/qupath/qupath/pull/736:637,Deployability,install,installer,637,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/736
https://github.com/qupath/qupath/pull/736:1606,Deployability,update,updated,1606,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/736
https://github.com/qupath/qupath/pull/736:519,Integrability,depend,dependent,519,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/736
https://github.com/qupath/qupath/pull/736:1447,Integrability,depend,depending,1447,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/736
https://github.com/qupath/qupath/pull/736:9,Modifiability,rewrite,rewrite,9,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/736
https://github.com/qupath/qupath/pull/736:1789,Safety,recover,recover,1789,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/736
https://github.com/qupath/qupath/pull/736:212,Testability,log,logic,212,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/736
https://github.com/qupath/qupath/pull/736:1591,Testability,log,logic,1591,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/736
https://github.com/qupath/qupath/pull/736:493,Usability,simpl,simply,493,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. Native libraries are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/736
https://github.com/qupath/qupath/pull/737:46,Deployability,release,release,46,"**Many** improvements, in preparation for the release of v0.3.0. See the changelog for more details, but the biggest changes are:; * New OMERO web support; * Use of CI with GitHub actions; * Easier object export/import with GeoJSON; * Storage of `ServerBuilder` JSON within .qpdata files (rather than a path only); * *Many* bug-fixes, quality improvements & additional methods (useful for scripts). Note that this is **not** complete. Further changes and tests are required before v0.3.0 can be released later this month, including a completely revised use of Gradle for building. However, GitHub Actions appear to have some branch troubles that merging with main will hopefully resolve.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/737
https://github.com/qupath/qupath/pull/737:495,Deployability,release,released,495,"**Many** improvements, in preparation for the release of v0.3.0. See the changelog for more details, but the biggest changes are:; * New OMERO web support; * Use of CI with GitHub actions; * Easier object export/import with GeoJSON; * Storage of `ServerBuilder` JSON within .qpdata files (rather than a path only); * *Many* bug-fixes, quality improvements & additional methods (useful for scripts). Note that this is **not** complete. Further changes and tests are required before v0.3.0 can be released later this month, including a completely revised use of Gradle for building. However, GitHub Actions appear to have some branch troubles that merging with main will hopefully resolve.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/737
https://github.com/qupath/qupath/pull/737:455,Testability,test,tests,455,"**Many** improvements, in preparation for the release of v0.3.0. See the changelog for more details, but the biggest changes are:; * New OMERO web support; * Use of CI with GitHub actions; * Easier object export/import with GeoJSON; * Storage of `ServerBuilder` JSON within .qpdata files (rather than a path only); * *Many* bug-fixes, quality improvements & additional methods (useful for scripts). Note that this is **not** complete. Further changes and tests are required before v0.3.0 can be released later this month, including a completely revised use of Gradle for building. However, GitHub Actions appear to have some branch troubles that merging with main will hopefully resolve.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/737
https://github.com/qupath/qupath/pull/738:1383,Availability,avail,available,1383,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/738
https://github.com/qupath/qupath/pull/738:1437,Availability,reliab,reliable,1437,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/738
https://github.com/qupath/qupath/pull/738:1793,Availability,recover,recover,1793,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/738
https://github.com/qupath/qupath/pull/738:419,Deployability,install,installer,419,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/738
https://github.com/qupath/qupath/pull/738:482,Deployability,install,installer,482,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/738
https://github.com/qupath/qupath/pull/738:529,Deployability,install,installer,529,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/738
https://github.com/qupath/qupath/pull/738:637,Deployability,install,installer,637,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/738
https://github.com/qupath/qupath/pull/738:1610,Deployability,update,updated,1610,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/738
https://github.com/qupath/qupath/pull/738:519,Integrability,depend,dependent,519,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/738
https://github.com/qupath/qupath/pull/738:1451,Integrability,depend,depending,1451,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/738
https://github.com/qupath/qupath/pull/738:9,Modifiability,rewrite,rewrite,9,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/738
https://github.com/qupath/qupath/pull/738:1793,Safety,recover,recover,1793,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/738
https://github.com/qupath/qupath/pull/738:212,Testability,log,logic,212,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/738
https://github.com/qupath/qupath/pull/738:1595,Testability,log,logic,1595,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/738
https://github.com/qupath/qupath/pull/738:493,Usability,simpl,simply,493,"Complete rewrite of `build.gradle` in the hope of something that less resembles an explosion in a a curly brackets factory. Now uses `buildSrc` directory to isolate shared conventions, with most of the packaging logic moved to a new `qupath-app` subproject. For basic use to create an image; ```bash; ./gradlew clean jpackage`; ```. The type of package can be specified as one of `[image, msi, exe, dmg, pkg, deb, rpm, installer, all]`. Not all are supported on all platforms, and `installer` simply selects a platform-dependent installer (although this may fail for Linux...). The syntax is; ```bash; gradlew jpackage -P qupath.package=installer -P git-commit=true; ```; where `git-commit` requests that the last git commit is included in jar files for reference. The improved structure means that more tasks work as they should, so that; ```bash; ./gradlew tasks; ```; finally becomes meaningful. **Native libraries** are extracted at an early stage, and put into `build/natives`, which means that this is a good choice as a working directory when running from an IDE. It is also used by `gradlew run`. Several other small changes were made to ensure Java 11 compatibility (change to a use of `FileSystems`) and to remove `&` from Javadocs. ## Important. The QuPath version is now set in `settings.gradle`, and this is added to the `resources` of `qupath-core` - thereby making it available through `GeneralTools`. This should be more reliable than depending upon a `VERSION` file in the main repo, particularly when launching QuPath with different working directories. Relatedly, the project logic has been updated; previously it would fail completely if no version was found within a project JSON file, in the assumption it originated from v0.1.2 or earlier. Now it will make an effort to recover.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/738
https://github.com/qupath/qupath/pull/740:88,Availability,avail,available,88,"Use GitHub Packages to make `qupath-core`, `qupath-core-processing` and `qupath-gui-fx` available via Maven. These are the main three modules that are useful as dependencies. Others may be included in the future, but may also be moved to different repositories. With that in mind, `settings.gradle` has been updated to remove `qupath-extension-pen`, `qupath-extension-omero`, `qupath-extension-experimental` and `qupath-extension-tensorflow` in preparation for these to become extensions with their own repos.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/740
https://github.com/qupath/qupath/pull/740:308,Deployability,update,updated,308,"Use GitHub Packages to make `qupath-core`, `qupath-core-processing` and `qupath-gui-fx` available via Maven. These are the main three modules that are useful as dependencies. Others may be included in the future, but may also be moved to different repositories. With that in mind, `settings.gradle` has been updated to remove `qupath-extension-pen`, `qupath-extension-omero`, `qupath-extension-experimental` and `qupath-extension-tensorflow` in preparation for these to become extensions with their own repos.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/740
https://github.com/qupath/qupath/pull/740:161,Integrability,depend,dependencies,161,"Use GitHub Packages to make `qupath-core`, `qupath-core-processing` and `qupath-gui-fx` available via Maven. These are the main three modules that are useful as dependencies. Others may be included in the future, but may also be moved to different repositories. With that in mind, `settings.gradle` has been updated to remove `qupath-extension-pen`, `qupath-extension-omero`, `qupath-extension-experimental` and `qupath-extension-tensorflow` in preparation for these to become extensions with their own repos.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/740
https://github.com/qupath/qupath/pull/742:138,Deployability,install,installation,138,"Enable mechanism for extensions to report the version of QuPath for which they were designed, and then to log this upon (possibly failed) installation.; New public comparators to make comparing semantic versions easier.; Updated build script to reinstate '--bind-services' option.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/742
https://github.com/qupath/qupath/pull/742:221,Deployability,Update,Updated,221,"Enable mechanism for extensions to report the version of QuPath for which they were designed, and then to log this upon (possibly failed) installation.; New public comparators to make comparing semantic versions easier.; Updated build script to reinstate '--bind-services' option.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/742
https://github.com/qupath/qupath/pull/742:106,Testability,log,log,106,"Enable mechanism for extensions to report the version of QuPath for which they were designed, and then to log this upon (possibly failed) installation.; New public comparators to make comparing semantic versions easier.; Updated build script to reinstate '--bind-services' option.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/742
https://github.com/qupath/qupath/issues/744:65,Availability,error,errors-when-adding-removing-objects,65,"Copy and paste from: https://forum.image.sc/t/semi-random-script-errors-when-adding-removing-objects/53617. I am using a script to demonstrate both removing and adding objects, ideally for new coders (dun dun dunnn). The setting is a small rectangular annotation with cells generated inside of it, which is also divided into tumor/stroma annotations.; image. The purpose of the script is to remove the cells in one area, run an analysis that adds measurements based only on the cells in the second area, and then restore the cells that were removed. ```; //Load the LuCa object data before running!; resolveHierarchy() //let's make sure all of the cells are child objects of their annotations!; tumorAnnos = getAnnotationObjects().findAll{it.getPathClass() == getPathClass(""Tumor"")}; tumorCells = getCellObjects().findAll{it.getParent().getPathClass() == getPathClass(""Tumor"")}. //Remove the tumor annotations and their cells; removeObjects(tumorAnnos,false); removeObjects(tumorCells,false); //Analyze->Spatial analysis->Detect centroid distances 2D. detectionCentroidDistances(true); //Add everything back, and make sure the hierarchy is resolved!; addObjects(tumorAnnos); addObjects(tumorCells); resolveHierarchy(); ```. The code works most of the time. Probably 70%? I lack my usual variety of computers to test out whether it is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" b",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:1411,Availability,avail,available,1411,"ons.; image. The purpose of the script is to remove the cells in one area, run an analysis that adds measurements based only on the cells in the second area, and then restore the cells that were removed. ```; //Load the LuCa object data before running!; resolveHierarchy() //let's make sure all of the cells are child objects of their annotations!; tumorAnnos = getAnnotationObjects().findAll{it.getPathClass() == getPathClass(""Tumor"")}; tumorCells = getCellObjects().findAll{it.getParent().getPathClass() == getPathClass(""Tumor"")}. //Remove the tumor annotations and their cells; removeObjects(tumorAnnos,false); removeObjects(tumorCells,false); //Analyze->Spatial analysis->Detect centroid distances 2D. detectionCentroidDistances(true); //Add everything back, and make sure the hierarchy is resolved!; addObjects(tumorAnnos); addObjects(tumorCells); resolveHierarchy(); ```. The code works most of the time. Probably 70%? I lack my usual variety of computers to test out whether it is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" because ""child"" is null; at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.getChildren(PathObjectHierarchyView.java:516); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.isLeaf(PathObjectHierarchyView.java:544); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateDisclosureNode(Unknown Source); at ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:1438,Availability,Error,Errors,1438," on the cells in the second area, and then restore the cells that were removed. ```; //Load the LuCa object data before running!; resolveHierarchy() //let's make sure all of the cells are child objects of their annotations!; tumorAnnos = getAnnotationObjects().findAll{it.getPathClass() == getPathClass(""Tumor"")}; tumorCells = getCellObjects().findAll{it.getParent().getPathClass() == getPathClass(""Tumor"")}. //Remove the tumor annotations and their cells; removeObjects(tumorAnnos,false); removeObjects(tumorCells,false); //Analyze->Spatial analysis->Detect centroid distances 2D. detectionCentroidDistances(true); //Add everything back, and make sure the hierarchy is resolved!; addObjects(tumorAnnos); addObjects(tumorCells); resolveHierarchy(); ```. The code works most of the time. Probably 70%? I lack my usual variety of computers to test out whether it is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" because ""child"" is null; at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.getChildren(PathObjectHierarchyView.java:516); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.isLeaf(PathObjectHierarchyView.java:544); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateDisclosureNode(Unknown Source); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateChildren(Unknown Source); at javafx.controls/javafx.scene.cont",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:1654,Availability,ERROR,ERROR,1654,"ls are child objects of their annotations!; tumorAnnos = getAnnotationObjects().findAll{it.getPathClass() == getPathClass(""Tumor"")}; tumorCells = getCellObjects().findAll{it.getParent().getPathClass() == getPathClass(""Tumor"")}. //Remove the tumor annotations and their cells; removeObjects(tumorAnnos,false); removeObjects(tumorCells,false); //Analyze->Spatial analysis->Detect centroid distances 2D. detectionCentroidDistances(true); //Add everything back, and make sure the hierarchy is resolved!; addObjects(tumorAnnos); addObjects(tumorCells); resolveHierarchy(); ```. The code works most of the time. Probably 70%? I lack my usual variety of computers to test out whether it is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" because ""child"" is null; at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.getChildren(PathObjectHierarchyView.java:516); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.isLeaf(PathObjectHierarchyView.java:544); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateDisclosureNode(Unknown Source); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateChildren(Unknown Source); at javafx.controls/javafx.scene.control.skin.LabeledSkinBase.lambda$new$5(Unknown Source); at javafx.controls/com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler.lambda$new$1(Unknown Source); at j",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:1905,Availability,error,error,1905,"e the tumor annotations and their cells; removeObjects(tumorAnnos,false); removeObjects(tumorCells,false); //Analyze->Spatial analysis->Detect centroid distances 2D. detectionCentroidDistances(true); //Add everything back, and make sure the hierarchy is resolved!; addObjects(tumorAnnos); addObjects(tumorCells); resolveHierarchy(); ```. The code works most of the time. Probably 70%? I lack my usual variety of computers to test out whether it is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" because ""child"" is null; at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.getChildren(PathObjectHierarchyView.java:516); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.isLeaf(PathObjectHierarchyView.java:544); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateDisclosureNode(Unknown Source); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateChildren(Unknown Source); at javafx.controls/javafx.scene.control.skin.LabeledSkinBase.lambda$new$5(Unknown Source); at javafx.controls/com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler.lambda$new$1(Unknown Source); at javafx.base/javafx.beans.value.WeakChangeListener.changed(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:1917,Availability,ERROR,ERROR,1917,"cts(tumorAnnos,false); removeObjects(tumorCells,false); //Analyze->Spatial analysis->Detect centroid distances 2D. detectionCentroidDistances(true); //Add everything back, and make sure the hierarchy is resolved!; addObjects(tumorAnnos); addObjects(tumorCells); resolveHierarchy(); ```. The code works most of the time. Probably 70%? I lack my usual variety of computers to test out whether it is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" because ""child"" is null; at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.getChildren(PathObjectHierarchyView.java:516); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.isLeaf(PathObjectHierarchyView.java:544); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateDisclosureNode(Unknown Source); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateChildren(Unknown Source); at javafx.controls/javafx.scene.control.skin.LabeledSkinBase.lambda$new$5(Unknown Source); at javafx.controls/com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler.lambda$new$1(Unknown Source); at javafx.base/javafx.beans.value.WeakChangeListener.changed(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(Unknown Source); at javafx.ba",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:5212,Availability,error,error,5212,.property.ObjectPropertyBase.markInvalid(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.set(Unknown Source); at javafx.controls/javafx.scene.control.TreeView.setRoot(Unknown Source); at qupath.lib.gui.panes.PathObjectHierarchyView.hierarchyChanged(PathObjectHierarchyView.java:563); at qupath.lib.gui.panes.PathObjectHierarchyView.lambda$hierarchyChanged$11(PathObjectHierarchyView.java:559); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$10(Unknown Source); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$11(Unknown Source); at javafx.graphics/com.sun.glass.ui.InvokeLaterDispatcher$Future.run(Unknown Source); at javafx.graphics/com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at javafx.graphics/com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```; Still other times I see another error:. ```; ERROR: QuPath exception; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(Unknown Source); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(Unknown Source); at qupath.lib.objects.PathObject.nDescendants(PathObject.java:475); at qupath.lib.objects.PathObjectTools.countDescendants(PathObjectTools.java:200); at qupath.lib.objects.PathObject.objectCountPostfix(PathObject.java:190); at qupath.lib.objects.PathObject.toString(PathObject.java:224); at qupath.lib.gui.panes.PathObjectListCell.updateItem(PathObjectListCell.java:66); at qupath.lib.gui.panes.PathObjectListCell.updateItem(PathObjectListCell.java:36); at javafx.controls/javafx.scene.control.ListCell.updateItem(Unknown Source); at javafx.controls/javafx.scene.control.ListCell.lambda$new$2(Unknown Source); at javafx.base/javafx.collections.WeakListChangeListener.onChanged(Unknown Source); at javafx.base/com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChange,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:5225,Availability,ERROR,ERROR,5225,rce); at javafx.base/javafx.beans.property.ObjectPropertyBase.set(Unknown Source); at javafx.controls/javafx.scene.control.TreeView.setRoot(Unknown Source); at qupath.lib.gui.panes.PathObjectHierarchyView.hierarchyChanged(PathObjectHierarchyView.java:563); at qupath.lib.gui.panes.PathObjectHierarchyView.lambda$hierarchyChanged$11(PathObjectHierarchyView.java:559); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$10(Unknown Source); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$11(Unknown Source); at javafx.graphics/com.sun.glass.ui.InvokeLaterDispatcher$Future.run(Unknown Source); at javafx.graphics/com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at javafx.graphics/com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```; Still other times I see another error:. ```; ERROR: QuPath exception; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(Unknown Source); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(Unknown Source); at qupath.lib.objects.PathObject.nDescendants(PathObject.java:475); at qupath.lib.objects.PathObjectTools.countDescendants(PathObjectTools.java:200); at qupath.lib.objects.PathObject.objectCountPostfix(PathObject.java:190); at qupath.lib.objects.PathObject.toString(PathObject.java:224); at qupath.lib.gui.panes.PathObjectListCell.updateItem(PathObjectListCell.java:66); at qupath.lib.gui.panes.PathObjectListCell.updateItem(PathObjectListCell.java:36); at javafx.controls/javafx.scene.control.ListCell.updateItem(Unknown Source); at javafx.controls/javafx.scene.control.ListCell.lambda$new$2(Unknown Source); at javafx.base/javafx.collections.WeakListChangeListener.onChanged(Unknown Source); at javafx.base/com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javaf,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:7529,Availability,error,errors,7529,"n.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.collections.ObservableListBase.fireChange(Unknown Source); at javafx.base/javafx.collections.ListChangeBuilder.commit(Unknown Source); at javafx.base/javafx.collections.ListChangeBuilder.endChange(Unknown Source); at javafx.base/javafx.collections.ObservableListBase.endChange(Unknown Source); at javafx.base/javafx.collections.ModifiableObservableListBase.setAll(Unknown Source); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:382); at qupath.lib.gui.panes.AnnotationPane.lambda$hierarchyChanged$7(AnnotationPane.java:352); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$10(Unknown Source); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$11(Unknown Source); at javafx.graphics/com.sun.glass.ui.InvokeLaterDispatcher$Future.run(Unknown Source); at javafx.graphics/com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at javafx.graphics/com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```; I am at a loss. The script never seems to actual fail, despite the errors. No objects end up missing, the measurements are created in the correct cells. Sometimes it will run 7 times in a row. Sometimes it will fail 3 times in a row with the same error.; The region itself is small and shouldn’t cause any problems for my computer.; image; Just the upper left corner of the LuCa FoV image. I have tried adding fireHierarchyUpdates() everywhere I can think or, and tried Thread.sleep(1000) along with setting the number of CPU cores to 1, as well, with no change to the behavior. As recommended on the forum, `guiscript=true` is a viable workaround for the issue.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:7709,Availability,error,error,7709,"n.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.collections.ObservableListBase.fireChange(Unknown Source); at javafx.base/javafx.collections.ListChangeBuilder.commit(Unknown Source); at javafx.base/javafx.collections.ListChangeBuilder.endChange(Unknown Source); at javafx.base/javafx.collections.ObservableListBase.endChange(Unknown Source); at javafx.base/javafx.collections.ModifiableObservableListBase.setAll(Unknown Source); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:382); at qupath.lib.gui.panes.AnnotationPane.lambda$hierarchyChanged$7(AnnotationPane.java:352); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$10(Unknown Source); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$11(Unknown Source); at javafx.graphics/com.sun.glass.ui.InvokeLaterDispatcher$Future.run(Unknown Source); at javafx.graphics/com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at javafx.graphics/com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```; I am at a loss. The script never seems to actual fail, despite the errors. No objects end up missing, the measurements are created in the correct cells. Sometimes it will run 7 times in a row. Sometimes it will fail 3 times in a row with the same error.; The region itself is small and shouldn’t cause any problems for my computer.; image; Just the upper left corner of the LuCa FoV image. I have tried adding fireHierarchyUpdates() everywhere I can think or, and tried Thread.sleep(1000) along with setting the number of CPU cores to 1, as well, with no change to the behavior. As recommended on the forum, `guiscript=true` is a viable workaround for the issue.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:2306,Deployability,update,updateDisclosureNode,2306," is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" because ""child"" is null; at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.getChildren(PathObjectHierarchyView.java:516); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.isLeaf(PathObjectHierarchyView.java:544); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateDisclosureNode(Unknown Source); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateChildren(Unknown Source); at javafx.controls/javafx.scene.control.skin.LabeledSkinBase.lambda$new$5(Unknown Source); at javafx.controls/com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler.lambda$new$1(Unknown Source); at javafx.base/javafx.beans.value.WeakChangeListener.changed(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.markInvalid(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.set(Unknown Source); at javafx.graphics/javafx.css.StyleableObjectProperty.set(Unknown Source); at javafx.base/javafx.beans.property.ObjectProperty.setValue(Unknown Sou",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:2402,Deployability,update,updateChildren,2402," run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" because ""child"" is null; at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.getChildren(PathObjectHierarchyView.java:516); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.isLeaf(PathObjectHierarchyView.java:544); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateDisclosureNode(Unknown Source); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateChildren(Unknown Source); at javafx.controls/javafx.scene.control.skin.LabeledSkinBase.lambda$new$5(Unknown Source); at javafx.controls/com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler.lambda$new$1(Unknown Source); at javafx.base/javafx.beans.value.WeakChangeListener.changed(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.markInvalid(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.set(Unknown Source); at javafx.graphics/javafx.css.StyleableObjectProperty.set(Unknown Source); at javafx.base/javafx.beans.property.ObjectProperty.setValue(Unknown Source); at javafx.controls/javafx.scene.control.Labeled.setGraphic(Unknown Source); at qupath.l",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:3475,Deployability,update,updateItem,3475,se.lambda$new$5(Unknown Source); at javafx.controls/com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler.lambda$new$1(Unknown Source); at javafx.base/javafx.beans.value.WeakChangeListener.changed(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.markInvalid(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.set(Unknown Source); at javafx.graphics/javafx.css.StyleableObjectProperty.set(Unknown Source); at javafx.base/javafx.beans.property.ObjectProperty.setValue(Unknown Source); at javafx.controls/javafx.scene.control.Labeled.setGraphic(Unknown Source); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectCell.updateItem(PathObjectHierarchyView.java:423); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectCell.updateItem(PathObjectHierarchyView.java:413); at javafx.controls/javafx.scene.control.TreeCell.updateItem(Unknown Source); at javafx.controls/javafx.scene.control.TreeCell.lambda$new$3(Unknown Source); at javafx.base/javafx.beans.WeakInvalidationListener.invalidated(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.markInvalid(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.set(Unknown Source); at javafx.controls/javafx.scene.control.TreeView.setRoot(Unknown Source); at qupath.lib.gui.panes.PathObjectHierarchyView.hierarchyChanged(PathObjectHierarchyView.java:563),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:3584,Deployability,update,updateItem,3584,ListenerHandler.lambda$new$1(Unknown Source); at javafx.base/javafx.beans.value.WeakChangeListener.changed(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.markInvalid(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.set(Unknown Source); at javafx.graphics/javafx.css.StyleableObjectProperty.set(Unknown Source); at javafx.base/javafx.beans.property.ObjectProperty.setValue(Unknown Source); at javafx.controls/javafx.scene.control.Labeled.setGraphic(Unknown Source); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectCell.updateItem(PathObjectHierarchyView.java:423); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectCell.updateItem(PathObjectHierarchyView.java:413); at javafx.controls/javafx.scene.control.TreeCell.updateItem(Unknown Source); at javafx.controls/javafx.scene.control.TreeCell.lambda$new$3(Unknown Source); at javafx.base/javafx.beans.WeakInvalidationListener.invalidated(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.markInvalid(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.set(Unknown Source); at javafx.controls/javafx.scene.control.TreeView.setRoot(Unknown Source); at qupath.lib.gui.panes.PathObjectHierarchyView.hierarchyChanged(PathObjectHierarchyView.java:563); at qupath.lib.gui.panes.PathObjectHierarchyView.lambda$hierarchyChanged$11(PathObjectHierarchyView.java:559,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:3679,Deployability,update,updateItem,3679,r.changed(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.markInvalid(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.set(Unknown Source); at javafx.graphics/javafx.css.StyleableObjectProperty.set(Unknown Source); at javafx.base/javafx.beans.property.ObjectProperty.setValue(Unknown Source); at javafx.controls/javafx.scene.control.Labeled.setGraphic(Unknown Source); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectCell.updateItem(PathObjectHierarchyView.java:423); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectCell.updateItem(PathObjectHierarchyView.java:413); at javafx.controls/javafx.scene.control.TreeCell.updateItem(Unknown Source); at javafx.controls/javafx.scene.control.TreeCell.lambda$new$3(Unknown Source); at javafx.base/javafx.beans.WeakInvalidationListener.invalidated(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.markInvalid(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.set(Unknown Source); at javafx.controls/javafx.scene.control.TreeView.setRoot(Unknown Source); at qupath.lib.gui.panes.PathObjectHierarchyView.hierarchyChanged(PathObjectHierarchyView.java:563); at qupath.lib.gui.panes.PathObjectHierarchyView.lambda$hierarchyChanged$11(PathObjectHierarchyView.java:559); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$10(Unknown Source),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:5740,Deployability,update,updateItem,5740,d(Unknown Source); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$11(Unknown Source); at javafx.graphics/com.sun.glass.ui.InvokeLaterDispatcher$Future.run(Unknown Source); at javafx.graphics/com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at javafx.graphics/com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```; Still other times I see another error:. ```; ERROR: QuPath exception; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(Unknown Source); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(Unknown Source); at qupath.lib.objects.PathObject.nDescendants(PathObject.java:475); at qupath.lib.objects.PathObjectTools.countDescendants(PathObjectTools.java:200); at qupath.lib.objects.PathObject.objectCountPostfix(PathObject.java:190); at qupath.lib.objects.PathObject.toString(PathObject.java:224); at qupath.lib.gui.panes.PathObjectListCell.updateItem(PathObjectListCell.java:66); at qupath.lib.gui.panes.PathObjectListCell.updateItem(PathObjectListCell.java:36); at javafx.controls/javafx.scene.control.ListCell.updateItem(Unknown Source); at javafx.controls/javafx.scene.control.ListCell.lambda$new$2(Unknown Source); at javafx.base/javafx.collections.WeakListChangeListener.onChanged(Unknown Source); at javafx.base/com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.collections.ObservableListBase.fireChange(Unknown Source); at javafx.base/javafx.collections.ListChangeBuilder.commit(Unknown Source); at javafx.base/javafx.collections.ListChangeBuilder.endChange(Unknown Source); at javafx.base/javafx.collections.ObservableListBase.endChange(Unknown Source); at javafx.base/javafx.collections.ModifiableObservableListBase.setAll(Unknown Source); at qupath.lib.gui.panes.AnnotationPane.hi,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:5823,Deployability,update,updateItem,5823,a$runLater$11(Unknown Source); at javafx.graphics/com.sun.glass.ui.InvokeLaterDispatcher$Future.run(Unknown Source); at javafx.graphics/com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at javafx.graphics/com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```; Still other times I see another error:. ```; ERROR: QuPath exception; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(Unknown Source); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(Unknown Source); at qupath.lib.objects.PathObject.nDescendants(PathObject.java:475); at qupath.lib.objects.PathObjectTools.countDescendants(PathObjectTools.java:200); at qupath.lib.objects.PathObject.objectCountPostfix(PathObject.java:190); at qupath.lib.objects.PathObject.toString(PathObject.java:224); at qupath.lib.gui.panes.PathObjectListCell.updateItem(PathObjectListCell.java:66); at qupath.lib.gui.panes.PathObjectListCell.updateItem(PathObjectListCell.java:36); at javafx.controls/javafx.scene.control.ListCell.updateItem(Unknown Source); at javafx.controls/javafx.scene.control.ListCell.lambda$new$2(Unknown Source); at javafx.base/javafx.collections.WeakListChangeListener.onChanged(Unknown Source); at javafx.base/com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.collections.ObservableListBase.fireChange(Unknown Source); at javafx.base/javafx.collections.ListChangeBuilder.commit(Unknown Source); at javafx.base/javafx.collections.ListChangeBuilder.endChange(Unknown Source); at javafx.base/javafx.collections.ObservableListBase.endChange(Unknown Source); at javafx.base/javafx.collections.ModifiableObservableListBase.setAll(Unknown Source); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:382); at qupath.lib.gui.panes.AnnotationPane.lam,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:5912,Deployability,update,updateItem,5912,re.run(Unknown Source); at javafx.graphics/com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at javafx.graphics/com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```; Still other times I see another error:. ```; ERROR: QuPath exception; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(Unknown Source); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(Unknown Source); at qupath.lib.objects.PathObject.nDescendants(PathObject.java:475); at qupath.lib.objects.PathObjectTools.countDescendants(PathObjectTools.java:200); at qupath.lib.objects.PathObject.objectCountPostfix(PathObject.java:190); at qupath.lib.objects.PathObject.toString(PathObject.java:224); at qupath.lib.gui.panes.PathObjectListCell.updateItem(PathObjectListCell.java:66); at qupath.lib.gui.panes.PathObjectListCell.updateItem(PathObjectListCell.java:36); at javafx.controls/javafx.scene.control.ListCell.updateItem(Unknown Source); at javafx.controls/javafx.scene.control.ListCell.lambda$new$2(Unknown Source); at javafx.base/javafx.collections.WeakListChangeListener.onChanged(Unknown Source); at javafx.base/com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.collections.ObservableListBase.fireChange(Unknown Source); at javafx.base/javafx.collections.ListChangeBuilder.commit(Unknown Source); at javafx.base/javafx.collections.ListChangeBuilder.endChange(Unknown Source); at javafx.base/javafx.collections.ObservableListBase.endChange(Unknown Source); at javafx.base/javafx.collections.ModifiableObservableListBase.setAll(Unknown Source); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:382); at qupath.lib.gui.panes.AnnotationPane.lambda$hierarchyChanged$7(AnnotationPane.java:352); at javafx.graphics/com.sun.javafx.applicatio,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:557,Performance,Load,Load,557,"Copy and paste from: https://forum.image.sc/t/semi-random-script-errors-when-adding-removing-objects/53617. I am using a script to demonstrate both removing and adding objects, ideally for new coders (dun dun dunnn). The setting is a small rectangular annotation with cells generated inside of it, which is also divided into tumor/stroma annotations.; image. The purpose of the script is to remove the cells in one area, run an analysis that adds measurements based only on the cells in the second area, and then restore the cells that were removed. ```; //Load the LuCa object data before running!; resolveHierarchy() //let's make sure all of the cells are child objects of their annotations!; tumorAnnos = getAnnotationObjects().findAll{it.getPathClass() == getPathClass(""Tumor"")}; tumorCells = getCellObjects().findAll{it.getParent().getPathClass() == getPathClass(""Tumor"")}. //Remove the tumor annotations and their cells; removeObjects(tumorAnnos,false); removeObjects(tumorCells,false); //Analyze->Spatial analysis->Detect centroid distances 2D. detectionCentroidDistances(true); //Add everything back, and make sure the hierarchy is resolved!; addObjects(tumorAnnos); addObjects(tumorCells); resolveHierarchy(); ```. The code works most of the time. Probably 70%? I lack my usual variety of computers to test out whether it is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" b",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:1022,Safety,Detect,Detect,1022,"Copy and paste from: https://forum.image.sc/t/semi-random-script-errors-when-adding-removing-objects/53617. I am using a script to demonstrate both removing and adding objects, ideally for new coders (dun dun dunnn). The setting is a small rectangular annotation with cells generated inside of it, which is also divided into tumor/stroma annotations.; image. The purpose of the script is to remove the cells in one area, run an analysis that adds measurements based only on the cells in the second area, and then restore the cells that were removed. ```; //Load the LuCa object data before running!; resolveHierarchy() //let's make sure all of the cells are child objects of their annotations!; tumorAnnos = getAnnotationObjects().findAll{it.getPathClass() == getPathClass(""Tumor"")}; tumorCells = getCellObjects().findAll{it.getParent().getPathClass() == getPathClass(""Tumor"")}. //Remove the tumor annotations and their cells; removeObjects(tumorAnnos,false); removeObjects(tumorCells,false); //Analyze->Spatial analysis->Detect centroid distances 2D. detectionCentroidDistances(true); //Add everything back, and make sure the hierarchy is resolved!; addObjects(tumorAnnos); addObjects(tumorCells); resolveHierarchy(); ```. The code works most of the time. Probably 70%? I lack my usual variety of computers to test out whether it is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" b",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:1052,Safety,detect,detectionCentroidDistances,1052,"trate both removing and adding objects, ideally for new coders (dun dun dunnn). The setting is a small rectangular annotation with cells generated inside of it, which is also divided into tumor/stroma annotations.; image. The purpose of the script is to remove the cells in one area, run an analysis that adds measurements based only on the cells in the second area, and then restore the cells that were removed. ```; //Load the LuCa object data before running!; resolveHierarchy() //let's make sure all of the cells are child objects of their annotations!; tumorAnnos = getAnnotationObjects().findAll{it.getPathClass() == getPathClass(""Tumor"")}; tumorCells = getCellObjects().findAll{it.getParent().getPathClass() == getPathClass(""Tumor"")}. //Remove the tumor annotations and their cells; removeObjects(tumorAnnos,false); removeObjects(tumorCells,false); //Analyze->Spatial analysis->Detect centroid distances 2D. detectionCentroidDistances(true); //Add everything back, and make sure the hierarchy is resolved!; addObjects(tumorAnnos); addObjects(tumorCells); resolveHierarchy(); ```. The code works most of the time. Probably 70%? I lack my usual variety of computers to test out whether it is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" because ""child"" is null; at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.getChildren(PathObjectHierarchyView.java:516)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:1622,Safety,detect,detections,1622,"ls are child objects of their annotations!; tumorAnnos = getAnnotationObjects().findAll{it.getPathClass() == getPathClass(""Tumor"")}; tumorCells = getCellObjects().findAll{it.getParent().getPathClass() == getPathClass(""Tumor"")}. //Remove the tumor annotations and their cells; removeObjects(tumorAnnos,false); removeObjects(tumorCells,false); //Analyze->Spatial analysis->Detect centroid distances 2D. detectionCentroidDistances(true); //Add everything back, and make sure the hierarchy is resolved!; addObjects(tumorAnnos); addObjects(tumorCells); resolveHierarchy(); ```. The code works most of the time. Probably 70%? I lack my usual variety of computers to test out whether it is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" because ""child"" is null; at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.getChildren(PathObjectHierarchyView.java:516); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.isLeaf(PathObjectHierarchyView.java:544); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateDisclosureNode(Unknown Source); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateChildren(Unknown Source); at javafx.controls/javafx.scene.control.skin.LabeledSkinBase.lambda$new$5(Unknown Source); at javafx.controls/com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler.lambda$new$1(Unknown Source); at j",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:1742,Safety,detect,detections,1742,"ls are child objects of their annotations!; tumorAnnos = getAnnotationObjects().findAll{it.getPathClass() == getPathClass(""Tumor"")}; tumorCells = getCellObjects().findAll{it.getParent().getPathClass() == getPathClass(""Tumor"")}. //Remove the tumor annotations and their cells; removeObjects(tumorAnnos,false); removeObjects(tumorCells,false); //Analyze->Spatial analysis->Detect centroid distances 2D. detectionCentroidDistances(true); //Add everything back, and make sure the hierarchy is resolved!; addObjects(tumorAnnos); addObjects(tumorCells); resolveHierarchy(); ```. The code works most of the time. Probably 70%? I lack my usual variety of computers to test out whether it is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" because ""child"" is null; at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.getChildren(PathObjectHierarchyView.java:516); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.isLeaf(PathObjectHierarchyView.java:544); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateDisclosureNode(Unknown Source); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateChildren(Unknown Source); at javafx.controls/javafx.scene.control.skin.LabeledSkinBase.lambda$new$5(Unknown Source); at javafx.controls/com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler.lambda$new$1(Unknown Source); at j",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:4718,Security,secur,security,4718,ols/javafx.scene.control.TreeCell.lambda$new$3(Unknown Source); at javafx.base/javafx.beans.WeakInvalidationListener.invalidated(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.markInvalid(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.set(Unknown Source); at javafx.controls/javafx.scene.control.TreeView.setRoot(Unknown Source); at qupath.lib.gui.panes.PathObjectHierarchyView.hierarchyChanged(PathObjectHierarchyView.java:563); at qupath.lib.gui.panes.PathObjectHierarchyView.lambda$hierarchyChanged$11(PathObjectHierarchyView.java:559); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$10(Unknown Source); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$11(Unknown Source); at javafx.graphics/com.sun.glass.ui.InvokeLaterDispatcher$Future.run(Unknown Source); at javafx.graphics/com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at javafx.graphics/com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```; Still other times I see another error:. ```; ERROR: QuPath exception; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(Unknown Source); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(Unknown Source); at qupath.lib.objects.PathObject.nDescendants(PathObject.java:475); at qupath.lib.objects.PathObjectTools.countDescendants(PathObjectTools.java:200); at qupath.lib.objects.PathObject.objectCountPostfix(PathObject.java:190); at qupath.lib.objects.PathObject.toString(PathObject.java:224); at qupath.lib.gui.panes.Pa,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:4727,Security,Access,AccessController,4727,ene.control.TreeCell.lambda$new$3(Unknown Source); at javafx.base/javafx.beans.WeakInvalidationListener.invalidated(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.markInvalid(Unknown Source); at javafx.base/javafx.beans.property.ObjectPropertyBase.set(Unknown Source); at javafx.controls/javafx.scene.control.TreeView.setRoot(Unknown Source); at qupath.lib.gui.panes.PathObjectHierarchyView.hierarchyChanged(PathObjectHierarchyView.java:563); at qupath.lib.gui.panes.PathObjectHierarchyView.lambda$hierarchyChanged$11(PathObjectHierarchyView.java:559); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$10(Unknown Source); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$11(Unknown Source); at javafx.graphics/com.sun.glass.ui.InvokeLaterDispatcher$Future.run(Unknown Source); at javafx.graphics/com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at javafx.graphics/com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```; Still other times I see another error:. ```; ERROR: QuPath exception; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(Unknown Source); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(Unknown Source); at qupath.lib.objects.PathObject.nDescendants(PathObject.java:475); at qupath.lib.objects.PathObjectTools.countDescendants(PathObjectTools.java:200); at qupath.lib.objects.PathObject.objectCountPostfix(PathObject.java:190); at qupath.lib.objects.PathObject.toString(PathObject.java:224); at qupath.lib.gui.panes.PathObjectListC,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:7000,Security,secur,security,7000,"known Source); at javafx.base/javafx.collections.WeakListChangeListener.onChanged(Unknown Source); at javafx.base/com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.collections.ObservableListBase.fireChange(Unknown Source); at javafx.base/javafx.collections.ListChangeBuilder.commit(Unknown Source); at javafx.base/javafx.collections.ListChangeBuilder.endChange(Unknown Source); at javafx.base/javafx.collections.ObservableListBase.endChange(Unknown Source); at javafx.base/javafx.collections.ModifiableObservableListBase.setAll(Unknown Source); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:382); at qupath.lib.gui.panes.AnnotationPane.lambda$hierarchyChanged$7(AnnotationPane.java:352); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$10(Unknown Source); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$11(Unknown Source); at javafx.graphics/com.sun.glass.ui.InvokeLaterDispatcher$Future.run(Unknown Source); at javafx.graphics/com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at javafx.graphics/com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```; I am at a loss. The script never seems to actual fail, despite the errors. No objects end up missing, the measurements are created in the correct cells. Sometimes it will run 7 times in a row. Sometimes it will fail 3 times in a row with the same error.; The region itself is small and shouldn’t cause any problems for my computer.; image; Just the upper left corner of the LuCa FoV image. I have tried adding fireHierarchyUpdates() everywhere I can think or, and tried Thread.sleep(1000) along with setting the number of CPU cores to 1, as we",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:7009,Security,Access,AccessController,7009,"; at javafx.base/javafx.collections.WeakListChangeListener.onChanged(Unknown Source); at javafx.base/com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(Unknown Source); at javafx.base/com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(Unknown Source); at javafx.base/javafx.collections.ObservableListBase.fireChange(Unknown Source); at javafx.base/javafx.collections.ListChangeBuilder.commit(Unknown Source); at javafx.base/javafx.collections.ListChangeBuilder.endChange(Unknown Source); at javafx.base/javafx.collections.ObservableListBase.endChange(Unknown Source); at javafx.base/javafx.collections.ModifiableObservableListBase.setAll(Unknown Source); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:382); at qupath.lib.gui.panes.AnnotationPane.lambda$hierarchyChanged$7(AnnotationPane.java:352); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$10(Unknown Source); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at javafx.graphics/com.sun.javafx.application.PlatformImpl.lambda$runLater$11(Unknown Source); at javafx.graphics/com.sun.glass.ui.InvokeLaterDispatcher$Future.run(Unknown Source); at javafx.graphics/com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at javafx.graphics/com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```; I am at a loss. The script never seems to actual fail, despite the errors. No objects end up missing, the measurements are created in the correct cells. Sometimes it will run 7 times in a row. Sometimes it will fail 3 times in a row with the same error.; The region itself is small and shouldn’t cause any problems for my computer.; image; Just the upper left corner of the LuCa FoV image. I have tried adding fireHierarchyUpdates() everywhere I can think or, and tried Thread.sleep(1000) along with setting the number of CPU cores to 1, as well, with no c",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:1311,Testability,test,test,1311,"ons.; image. The purpose of the script is to remove the cells in one area, run an analysis that adds measurements based only on the cells in the second area, and then restore the cells that were removed. ```; //Load the LuCa object data before running!; resolveHierarchy() //let's make sure all of the cells are child objects of their annotations!; tumorAnnos = getAnnotationObjects().findAll{it.getPathClass() == getPathClass(""Tumor"")}; tumorCells = getCellObjects().findAll{it.getParent().getPathClass() == getPathClass(""Tumor"")}. //Remove the tumor annotations and their cells; removeObjects(tumorAnnos,false); removeObjects(tumorCells,false); //Analyze->Spatial analysis->Detect centroid distances 2D. detectionCentroidDistances(true); //Add everything back, and make sure the hierarchy is resolved!; addObjects(tumorAnnos); addObjects(tumorCells); resolveHierarchy(); ```. The code works most of the time. Probably 70%? I lack my usual variety of computers to test out whether it is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" because ""child"" is null; at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.getChildren(PathObjectHierarchyView.java:516); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.isLeaf(PathObjectHierarchyView.java:544); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateDisclosureNode(Unknown Source); at ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:1432,Testability,test,test,1432,"ons.; image. The purpose of the script is to remove the cells in one area, run an analysis that adds measurements based only on the cells in the second area, and then restore the cells that were removed. ```; //Load the LuCa object data before running!; resolveHierarchy() //let's make sure all of the cells are child objects of their annotations!; tumorAnnos = getAnnotationObjects().findAll{it.getPathClass() == getPathClass(""Tumor"")}; tumorCells = getCellObjects().findAll{it.getParent().getPathClass() == getPathClass(""Tumor"")}. //Remove the tumor annotations and their cells; removeObjects(tumorAnnos,false); removeObjects(tumorCells,false); //Analyze->Spatial analysis->Detect centroid distances 2D. detectionCentroidDistances(true); //Add everything back, and make sure the hierarchy is resolved!; addObjects(tumorAnnos); addObjects(tumorCells); resolveHierarchy(); ```. The code works most of the time. Probably 70%? I lack my usual variety of computers to test out whether it is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" because ""child"" is null; at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.getChildren(PathObjectHierarchyView.java:516); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.isLeaf(PathObjectHierarchyView.java:544); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateDisclosureNode(Unknown Source); at ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/744:1815,Testability,log,log,1815,"rent().getPathClass() == getPathClass(""Tumor"")}. //Remove the tumor annotations and their cells; removeObjects(tumorAnnos,false); removeObjects(tumorCells,false); //Analyze->Spatial analysis->Detect centroid distances 2D. detectionCentroidDistances(true); //Add everything back, and make sure the hierarchy is resolved!; addObjects(tumorAnnos); addObjects(tumorCells); resolveHierarchy(); ```. The code works most of the time. Probably 70%? I lack my usual variety of computers to test out whether it is based on my computer - but I do have a project file hosted online I can make available to run the test. Errors include: Null pointer exception popup in the lower right,. INFO: Starting script at Sat Jun 05 20:54:28 CDT 2021; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; ERROR: QuPath exception; WARN: Resolving hierarchy that contains 3 annotations and 1236 detections - this may be slow!; INFO: Script run time: 0.25 seconds; The log file is not hugely informative on that one. Alternatively, I sometimes see a TMA core error. ```; ERROR: QuPath exception: Cannot invoke ""qupath.lib.objects.PathObject.isTMACore()"" because ""child"" is null; at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.getChildren(PathObjectHierarchyView.java:516); at qupath.lib.gui.panes.PathObjectHierarchyView$PathObjectTreeItem.isLeaf(PathObjectHierarchyView.java:544); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateDisclosureNode(Unknown Source); at javafx.controls/javafx.scene.control.skin.TreeCellSkin.updateChildren(Unknown Source); at javafx.controls/javafx.scene.control.skin.LabeledSkinBase.lambda$new$5(Unknown Source); at javafx.controls/com.sun.javafx.scene.control.LambdaMultiplePropertyChangeListenerHandler.lambda$new$1(Unknown Source); at javafx.base/javafx.beans.value.WeakChangeListener.changed(Unknown Source); at javafx.base/com.sun.javafx.binding.ExpressionHelper$SingleChange.fireValueChangedEvent(Unknown Source);",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/744
https://github.com/qupath/qupath/issues/745:0,Availability,error,error,0,"error showing; java.long.NullpointException; I tired Reset preferences, but did not work; could you help?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/745
https://github.com/qupath/qupath/issues/746:1652,Modifiability,variab,variable,1652,"## Bug report. **Describe the bug**; The visible region rectangle drawn on the `ImageOverview` (top right of the viewer) does not exactly match the currently visible region in the viewer. This is a problem that arises when we look at an image that has an very low width/height ratio (i.e. an image with a large height and small/average width). This bug was first reported in [this thread](https://forum.image.sc/t/tiny-bug-in-slide-overview-navigator/53492) from image.sc. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image with extreme dimensions (E.g. `width` = 30000 px and `height` = 200,000 px).; 2. Play around with the `ImageOverview` on the top right of the viewer.; 3. Check if the region clicked on the `ImageOverview` matches the currently visible region in the viewer. **Expected behavior**; The `ImageOverview` and the 'visible-region rectangle' match the currently visible region in the viewer. **Screenshots**; See the [original post on image.sc](https://forum.image.sc/t/tiny-bug-in-slide-overview-navigator/53492). **Desktop (please complete the following information):**; - OS: All; - QuPath v0.2.3 (and prior). **Additional context**; It seems that [this line](https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/ImageOverview.java#L122) is the culprit. I.e. The scale is calculated according to the `preferredWidth`, regardless of what the actual width of `imgPreview` ended up being. In the sample image from the image.sc's thread, the original height is 196,416px. The scale is calculated from the `preferredWidth` (150) instead of the `ImageOverview`'s width (138) (the variable is `imgPreview`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/746
https://github.com/qupath/qupath/issues/748:589,Availability,mask,mask-annotation-from-time-lapse-of-images-using-qupath,589,"## Bug report. **Describe the bug**; The right arrow can be used to advance one frame of a time series, but the left arrow just jumps to the end. **To Reproduce**; Steps to reproduce the behavior:; 1. Read the ImageJ sample image 'Mitosis.tif'; 2. Press the right arrow to advance; 3. Press the left arrow to... unexpectedly jump to the end. **Expected behavior**; Left arrow goes back one timepoint. **Desktop (please complete the following information):**; - OS: all (almost certainly), Mac (definitely); - QuPath Version v0.2. **Additional context**; See https://forum.image.sc/t/image-mask-annotation-from-time-lapse-of-images-using-qupath/54090",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/748
https://github.com/qupath/qupath/pull/749:104,Usability,intuit,intuitive,104,Fixes https://github.com/qupath/qupath/issues/748; Also uses PathPrefs.invertZSliderProperty() for more intuitive behavior with z-stacks.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/749
https://github.com/qupath/qupath/pull/750:824,Availability,robust,robust,824,"Attempt to resolve https://github.com/qupath/qupath/issues/744. The underlying problem is that concurrent modification exceptions occurred whenever nDescendants() was called by the UI thread while another thread was adding/removing objects. Adding *more* synchronization to try to overcome this resulted in deadlocks. This commit tries to resolve the issue in two ways:; - Making the childList a synchronized collection (actually a Set); - Reducing synchronization on the PathObject itself, and synchonizing more sparingly on the childList. This is hopefully sufficient to avoid simply counting objects in one thread interfering with adding/removing objects in another. Since most adding/removing access is via a PathObjectHierarchy, counting is (I think...) the main concurrency risk, and the resulting code should be more robust. Along the way, the childList was also given a better default capacity.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/750
https://github.com/qupath/qupath/pull/750:255,Integrability,synchroniz,synchronization,255,"Attempt to resolve https://github.com/qupath/qupath/issues/744. The underlying problem is that concurrent modification exceptions occurred whenever nDescendants() was called by the UI thread while another thread was adding/removing objects. Adding *more* synchronization to try to overcome this resulted in deadlocks. This commit tries to resolve the issue in two ways:; - Making the childList a synchronized collection (actually a Set); - Reducing synchronization on the PathObject itself, and synchonizing more sparingly on the childList. This is hopefully sufficient to avoid simply counting objects in one thread interfering with adding/removing objects in another. Since most adding/removing access is via a PathObjectHierarchy, counting is (I think...) the main concurrency risk, and the resulting code should be more robust. Along the way, the childList was also given a better default capacity.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/750
https://github.com/qupath/qupath/pull/750:396,Integrability,synchroniz,synchronized,396,"Attempt to resolve https://github.com/qupath/qupath/issues/744. The underlying problem is that concurrent modification exceptions occurred whenever nDescendants() was called by the UI thread while another thread was adding/removing objects. Adding *more* synchronization to try to overcome this resulted in deadlocks. This commit tries to resolve the issue in two ways:; - Making the childList a synchronized collection (actually a Set); - Reducing synchronization on the PathObject itself, and synchonizing more sparingly on the childList. This is hopefully sufficient to avoid simply counting objects in one thread interfering with adding/removing objects in another. Since most adding/removing access is via a PathObjectHierarchy, counting is (I think...) the main concurrency risk, and the resulting code should be more robust. Along the way, the childList was also given a better default capacity.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/750
https://github.com/qupath/qupath/pull/750:449,Integrability,synchroniz,synchronization,449,"Attempt to resolve https://github.com/qupath/qupath/issues/744. The underlying problem is that concurrent modification exceptions occurred whenever nDescendants() was called by the UI thread while another thread was adding/removing objects. Adding *more* synchronization to try to overcome this resulted in deadlocks. This commit tries to resolve the issue in two ways:; - Making the childList a synchronized collection (actually a Set); - Reducing synchronization on the PathObject itself, and synchonizing more sparingly on the childList. This is hopefully sufficient to avoid simply counting objects in one thread interfering with adding/removing objects in another. Since most adding/removing access is via a PathObjectHierarchy, counting is (I think...) the main concurrency risk, and the resulting code should be more robust. Along the way, the childList was also given a better default capacity.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/750
https://github.com/qupath/qupath/pull/750:95,Performance,concurren,concurrent,95,"Attempt to resolve https://github.com/qupath/qupath/issues/744. The underlying problem is that concurrent modification exceptions occurred whenever nDescendants() was called by the UI thread while another thread was adding/removing objects. Adding *more* synchronization to try to overcome this resulted in deadlocks. This commit tries to resolve the issue in two ways:; - Making the childList a synchronized collection (actually a Set); - Reducing synchronization on the PathObject itself, and synchonizing more sparingly on the childList. This is hopefully sufficient to avoid simply counting objects in one thread interfering with adding/removing objects in another. Since most adding/removing access is via a PathObjectHierarchy, counting is (I think...) the main concurrency risk, and the resulting code should be more robust. Along the way, the childList was also given a better default capacity.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/750
https://github.com/qupath/qupath/pull/750:768,Performance,concurren,concurrency,768,"Attempt to resolve https://github.com/qupath/qupath/issues/744. The underlying problem is that concurrent modification exceptions occurred whenever nDescendants() was called by the UI thread while another thread was adding/removing objects. Adding *more* synchronization to try to overcome this resulted in deadlocks. This commit tries to resolve the issue in two ways:; - Making the childList a synchronized collection (actually a Set); - Reducing synchronization on the PathObject itself, and synchonizing more sparingly on the childList. This is hopefully sufficient to avoid simply counting objects in one thread interfering with adding/removing objects in another. Since most adding/removing access is via a PathObjectHierarchy, counting is (I think...) the main concurrency risk, and the resulting code should be more robust. Along the way, the childList was also given a better default capacity.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/750
https://github.com/qupath/qupath/pull/750:573,Safety,avoid,avoid,573,"Attempt to resolve https://github.com/qupath/qupath/issues/744. The underlying problem is that concurrent modification exceptions occurred whenever nDescendants() was called by the UI thread while another thread was adding/removing objects. Adding *more* synchronization to try to overcome this resulted in deadlocks. This commit tries to resolve the issue in two ways:; - Making the childList a synchronized collection (actually a Set); - Reducing synchronization on the PathObject itself, and synchonizing more sparingly on the childList. This is hopefully sufficient to avoid simply counting objects in one thread interfering with adding/removing objects in another. Since most adding/removing access is via a PathObjectHierarchy, counting is (I think...) the main concurrency risk, and the resulting code should be more robust. Along the way, the childList was also given a better default capacity.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/750
https://github.com/qupath/qupath/pull/750:780,Safety,risk,risk,780,"Attempt to resolve https://github.com/qupath/qupath/issues/744. The underlying problem is that concurrent modification exceptions occurred whenever nDescendants() was called by the UI thread while another thread was adding/removing objects. Adding *more* synchronization to try to overcome this resulted in deadlocks. This commit tries to resolve the issue in two ways:; - Making the childList a synchronized collection (actually a Set); - Reducing synchronization on the PathObject itself, and synchonizing more sparingly on the childList. This is hopefully sufficient to avoid simply counting objects in one thread interfering with adding/removing objects in another. Since most adding/removing access is via a PathObjectHierarchy, counting is (I think...) the main concurrency risk, and the resulting code should be more robust. Along the way, the childList was also given a better default capacity.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/750
https://github.com/qupath/qupath/pull/750:697,Security,access,access,697,"Attempt to resolve https://github.com/qupath/qupath/issues/744. The underlying problem is that concurrent modification exceptions occurred whenever nDescendants() was called by the UI thread while another thread was adding/removing objects. Adding *more* synchronization to try to overcome this resulted in deadlocks. This commit tries to resolve the issue in two ways:; - Making the childList a synchronized collection (actually a Set); - Reducing synchronization on the PathObject itself, and synchonizing more sparingly on the childList. This is hopefully sufficient to avoid simply counting objects in one thread interfering with adding/removing objects in another. Since most adding/removing access is via a PathObjectHierarchy, counting is (I think...) the main concurrency risk, and the resulting code should be more robust. Along the way, the childList was also given a better default capacity.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/750
https://github.com/qupath/qupath/pull/750:579,Usability,simpl,simply,579,"Attempt to resolve https://github.com/qupath/qupath/issues/744. The underlying problem is that concurrent modification exceptions occurred whenever nDescendants() was called by the UI thread while another thread was adding/removing objects. Adding *more* synchronization to try to overcome this resulted in deadlocks. This commit tries to resolve the issue in two ways:; - Making the childList a synchronized collection (actually a Set); - Reducing synchronization on the PathObject itself, and synchonizing more sparingly on the childList. This is hopefully sufficient to avoid simply counting objects in one thread interfering with adding/removing objects in another. Since most adding/removing access is via a PathObjectHierarchy, counting is (I think...) the main concurrency risk, and the resulting code should be more robust. Along the way, the childList was also given a better default capacity.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/750
https://github.com/qupath/qupath/issues/752:299,Availability,error,error,299,"## Bug report. **Describe the bug**; Trying to reload a saved KNN object or pixel classifier fails with the exception; ```; java.lang.RuntimeException: OpenCV(4.5.1) /Users/runner/work/javacpp-presets/javacpp-presets/opencv/cppbuild/macosx-x86_64/opencv-4.5.1/modules/core/src/persistence.cpp:1737: error: (-215:Assertion failed) nameofs < str_hash_data.size() in function 'getName'; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create and annotate some cells to train an object classifier within a project; 2. Select 'K nearest neighbor' as the classifier type; 3. Save the classifier in the project; 4. Try to reload and apply the classifier with *Load object classifier*. The problem exists also for pixel classifiers. **Expected behavior**; KNN classifier should reload. If it cannot be reloaded, the option to create (and save) a KNN classifier shouldn't be provided. **Desktop (please complete the following information):**; - OS: macOS (possibly others?); - QuPath Version v0.2.3. **Additional context**; See https://forum.image.sc/t/knn-error-opencv-4-3-0-c-projects-javacpp/54234; It isn't clear if this can be resolved within QuPath, or the problem is too deep in OpenCV.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/752
https://github.com/qupath/qupath/issues/752:1060,Availability,error,error-opencv-,1060,"## Bug report. **Describe the bug**; Trying to reload a saved KNN object or pixel classifier fails with the exception; ```; java.lang.RuntimeException: OpenCV(4.5.1) /Users/runner/work/javacpp-presets/javacpp-presets/opencv/cppbuild/macosx-x86_64/opencv-4.5.1/modules/core/src/persistence.cpp:1737: error: (-215:Assertion failed) nameofs < str_hash_data.size() in function 'getName'; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create and annotate some cells to train an object classifier within a project; 2. Select 'K nearest neighbor' as the classifier type; 3. Save the classifier in the project; 4. Try to reload and apply the classifier with *Load object classifier*. The problem exists also for pixel classifiers. **Expected behavior**; KNN classifier should reload. If it cannot be reloaded, the option to create (and save) a KNN classifier shouldn't be provided. **Desktop (please complete the following information):**; - OS: macOS (possibly others?); - QuPath Version v0.2.3. **Additional context**; See https://forum.image.sc/t/knn-error-opencv-4-3-0-c-projects-javacpp/54234; It isn't clear if this can be resolved within QuPath, or the problem is too deep in OpenCV.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/752
https://github.com/qupath/qupath/issues/752:665,Performance,Load,Load,665,"## Bug report. **Describe the bug**; Trying to reload a saved KNN object or pixel classifier fails with the exception; ```; java.lang.RuntimeException: OpenCV(4.5.1) /Users/runner/work/javacpp-presets/javacpp-presets/opencv/cppbuild/macosx-x86_64/opencv-4.5.1/modules/core/src/persistence.cpp:1737: error: (-215:Assertion failed) nameofs < str_hash_data.size() in function 'getName'; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create and annotate some cells to train an object classifier within a project; 2. Select 'K nearest neighbor' as the classifier type; 3. Save the classifier in the project; 4. Try to reload and apply the classifier with *Load object classifier*. The problem exists also for pixel classifiers. **Expected behavior**; KNN classifier should reload. If it cannot be reloaded, the option to create (and save) a KNN classifier shouldn't be provided. **Desktop (please complete the following information):**; - OS: macOS (possibly others?); - QuPath Version v0.2.3. **Additional context**; See https://forum.image.sc/t/knn-error-opencv-4-3-0-c-projects-javacpp/54234; It isn't clear if this can be resolved within QuPath, or the problem is too deep in OpenCV.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/752
https://github.com/qupath/qupath/issues/752:312,Testability,Assert,Assertion,312,"## Bug report. **Describe the bug**; Trying to reload a saved KNN object or pixel classifier fails with the exception; ```; java.lang.RuntimeException: OpenCV(4.5.1) /Users/runner/work/javacpp-presets/javacpp-presets/opencv/cppbuild/macosx-x86_64/opencv-4.5.1/modules/core/src/persistence.cpp:1737: error: (-215:Assertion failed) nameofs < str_hash_data.size() in function 'getName'; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create and annotate some cells to train an object classifier within a project; 2. Select 'K nearest neighbor' as the classifier type; 3. Save the classifier in the project; 4. Try to reload and apply the classifier with *Load object classifier*. The problem exists also for pixel classifiers. **Expected behavior**; KNN classifier should reload. If it cannot be reloaded, the option to create (and save) a KNN classifier shouldn't be provided. **Desktop (please complete the following information):**; - OS: macOS (possibly others?); - QuPath Version v0.2.3. **Additional context**; See https://forum.image.sc/t/knn-error-opencv-4-3-0-c-projects-javacpp/54234; It isn't clear if this can be resolved within QuPath, or the problem is too deep in OpenCV.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/752
https://github.com/qupath/qupath/issues/752:1114,Usability,clear,clear,1114,"## Bug report. **Describe the bug**; Trying to reload a saved KNN object or pixel classifier fails with the exception; ```; java.lang.RuntimeException: OpenCV(4.5.1) /Users/runner/work/javacpp-presets/javacpp-presets/opencv/cppbuild/macosx-x86_64/opencv-4.5.1/modules/core/src/persistence.cpp:1737: error: (-215:Assertion failed) nameofs < str_hash_data.size() in function 'getName'; ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create and annotate some cells to train an object classifier within a project; 2. Select 'K nearest neighbor' as the classifier type; 3. Save the classifier in the project; 4. Try to reload and apply the classifier with *Load object classifier*. The problem exists also for pixel classifiers. **Expected behavior**; KNN classifier should reload. If it cannot be reloaded, the option to create (and save) a KNN classifier shouldn't be provided. **Desktop (please complete the following information):**; - OS: macOS (possibly others?); - QuPath Version v0.2.3. **Additional context**; See https://forum.image.sc/t/knn-error-opencv-4-3-0-c-projects-javacpp/54234; It isn't clear if this can be resolved within QuPath, or the problem is too deep in OpenCV.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/752
https://github.com/qupath/qupath/issues/753:811,Deployability,release,release,811,"## Bug report. **Describe the bug**; There have been reports of excessive memory use during pixel classification, most recently https://forum.image.sc/t/qupath-not-adhering-to-maxium-memory-use/54265. These can be hard to reproduce, since they tend to occur when pushing QuPath to its limits - but problems certainly seem to be more frequent than they should be. My guess is that at least part of the issue lies in [OpenCVPixelClassifier.java](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/opencv/ml/pixel/OpenCVPixelClassifier.java#L93). Specifically, the classification should be wrapped in a `try (var scope = PointerScope) {...}` block to ensure cleanup. Furthermore, it looks like `mat.close()` should be called rather than `mat.release()`. There may well be other examples of this in the code that should be checked. **To Reproduce**; Steps to reproduce the behavior:; 1. Set `-Xmx2G` and `-Xms2G` when starting QuPath; 2. Open OS-2.ndpi and create several training annotations; 3. Train a pixel classifier at a high resolution (I used a pixel size of ~1.8µm). When I did this, QuPath would fail to complete the classification. A thread dump suggested it was stuck in `Pointer.deallocate()` when trying to initialize a new `Mat`. If I switched to use `PointerScope` the problem went away. (Note that I had some cells on the image too that might have been pushing my memory requirements harder; other memory settings/resolutions could be needed to reproduce the problem). **Expected behavior**; Pixel classification succeeds (or fails) consistently. **Desktop (please complete the following information):**; - OS: testing on macOS, user reports for Windows; - QuPath v0.2.3 (probably all v0.2). **Additional context**; Memory use seems to go beyond `-Xmx` by design with JavaCPP. The following startup options warrant some exploration:; ```; -Dorg.bytedeco.javacpp.maxbytes=5G; -Dorg.bytedeco.javacpp.maxphysicalbytes=5",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/753
https://github.com/qupath/qupath/issues/753:659,Integrability,wrap,wrapped,659,"## Bug report. **Describe the bug**; There have been reports of excessive memory use during pixel classification, most recently https://forum.image.sc/t/qupath-not-adhering-to-maxium-memory-use/54265. These can be hard to reproduce, since they tend to occur when pushing QuPath to its limits - but problems certainly seem to be more frequent than they should be. My guess is that at least part of the issue lies in [OpenCVPixelClassifier.java](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/opencv/ml/pixel/OpenCVPixelClassifier.java#L93). Specifically, the classification should be wrapped in a `try (var scope = PointerScope) {...}` block to ensure cleanup. Furthermore, it looks like `mat.close()` should be called rather than `mat.release()`. There may well be other examples of this in the code that should be checked. **To Reproduce**; Steps to reproduce the behavior:; 1. Set `-Xmx2G` and `-Xms2G` when starting QuPath; 2. Open OS-2.ndpi and create several training annotations; 3. Train a pixel classifier at a high resolution (I used a pixel size of ~1.8µm). When I did this, QuPath would fail to complete the classification. A thread dump suggested it was stuck in `Pointer.deallocate()` when trying to initialize a new `Mat`. If I switched to use `PointerScope` the problem went away. (Note that I had some cells on the image too that might have been pushing my memory requirements harder; other memory settings/resolutions could be needed to reproduce the problem). **Expected behavior**; Pixel classification succeeds (or fails) consistently. **Desktop (please complete the following information):**; - OS: testing on macOS, user reports for Windows; - QuPath v0.2.3 (probably all v0.2). **Additional context**; Memory use seems to go beyond `-Xmx` by design with JavaCPP. The following startup options warrant some exploration:; ```; -Dorg.bytedeco.javacpp.maxbytes=5G; -Dorg.bytedeco.javacpp.maxphysicalbytes=5",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/753
https://github.com/qupath/qupath/issues/753:1696,Testability,test,testing,1696,"report. **Describe the bug**; There have been reports of excessive memory use during pixel classification, most recently https://forum.image.sc/t/qupath-not-adhering-to-maxium-memory-use/54265. These can be hard to reproduce, since they tend to occur when pushing QuPath to its limits - but problems certainly seem to be more frequent than they should be. My guess is that at least part of the issue lies in [OpenCVPixelClassifier.java](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/opencv/ml/pixel/OpenCVPixelClassifier.java#L93). Specifically, the classification should be wrapped in a `try (var scope = PointerScope) {...}` block to ensure cleanup. Furthermore, it looks like `mat.close()` should be called rather than `mat.release()`. There may well be other examples of this in the code that should be checked. **To Reproduce**; Steps to reproduce the behavior:; 1. Set `-Xmx2G` and `-Xms2G` when starting QuPath; 2. Open OS-2.ndpi and create several training annotations; 3. Train a pixel classifier at a high resolution (I used a pixel size of ~1.8µm). When I did this, QuPath would fail to complete the classification. A thread dump suggested it was stuck in `Pointer.deallocate()` when trying to initialize a new `Mat`. If I switched to use `PointerScope` the problem went away. (Note that I had some cells on the image too that might have been pushing my memory requirements harder; other memory settings/resolutions could be needed to reproduce the problem). **Expected behavior**; Pixel classification succeeds (or fails) consistently. **Desktop (please complete the following information):**; - OS: testing on macOS, user reports for Windows; - QuPath v0.2.3 (probably all v0.2). **Additional context**; Memory use seems to go beyond `-Xmx` by design with JavaCPP. The following startup options warrant some exploration:; ```; -Dorg.bytedeco.javacpp.maxbytes=5G; -Dorg.bytedeco.javacpp.maxphysicalbytes=5G; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/753
https://github.com/qupath/qupath/pull/754:68,Deployability,release,release,68,"Aims to fix https://github.com/qupath/qupath/issues/753. Use of Mat.release() seems to be a misunderstanding of how deallocation is handled in JavaCPP/OpenCV (or a throwback to the pre-JavaCPP days). It seems that Indexer.release() is valid, but Mat.release() is unhelpful. Probably most meaningful change is the use of PointerScope in OpenCVPixelClassifier, since this could result in particularly high memory use.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/754
https://github.com/qupath/qupath/pull/754:222,Deployability,release,release,222,"Aims to fix https://github.com/qupath/qupath/issues/753. Use of Mat.release() seems to be a misunderstanding of how deallocation is handled in JavaCPP/OpenCV (or a throwback to the pre-JavaCPP days). It seems that Indexer.release() is valid, but Mat.release() is unhelpful. Probably most meaningful change is the use of PointerScope in OpenCVPixelClassifier, since this could result in particularly high memory use.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/754
https://github.com/qupath/qupath/pull/754:250,Deployability,release,release,250,"Aims to fix https://github.com/qupath/qupath/issues/753. Use of Mat.release() seems to be a misunderstanding of how deallocation is handled in JavaCPP/OpenCV (or a throwback to the pre-JavaCPP days). It seems that Indexer.release() is valid, but Mat.release() is unhelpful. Probably most meaningful change is the use of PointerScope in OpenCVPixelClassifier, since this could result in particularly high memory use.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/754
https://github.com/qupath/qupath/pull/755:28,Availability,error,error,28,Fixed region boundary check error and made local copies of variables in getTiledRegionRequests(),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/755
https://github.com/qupath/qupath/pull/755:59,Modifiability,variab,variables,59,Fixed region boundary check error and made local copies of variables in getTiledRegionRequests(),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/755
https://github.com/qupath/qupath/pull/756:34,Performance,perform,performed,34,This happens when the caching was performed under a PointerScope.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/756
https://github.com/qupath/qupath/issues/757:658,Integrability,depend,depending,658,"This proposal involves substantially revising how scripting works in QuPath, so it is included here for discussion. ## The problem. Making new commands scriptable in QuPath is currently *very* awkward. Calling them is awkward too. Usually, it involves adding to the (already fairly huge) [`QP`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/lib/scripting/QP.java) or [`QPEx`](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/QPEx.java) classes, and usually with various versions of the same method depending upon whether an `ImageData` or `PathObjectHierarchy` should be specified or not. These are then added to `imageData.getHistoryWorkflow()` as new steps. In some cases (where `PathPlugin` is used), the script is standardized to call `runPlugin(String className, String args)` - which has to squeeze all the parameters into a `String`. This 'works', but feels brittle and awkward - not least because by default single quotes are used around the `args`, which thwarts [string interpolation](https://groovy-lang.org/syntax.html#_string_interpolation) as an easy way to adjust values. We need a better way to; 1. make new commands scriptable, even if this requires many parameters (some of which may be optional), without requiring a load most custom code; 2. call scriptable commands from Groovy intuitively, including with changes to parameters, without needing to learn or lookup long parameter lists for overloaded methods. ## The proposal. There are two ideas, which could be considered separately. ### Use named parameters. Groovy supports [names parameters](http://docs.groovy-lang.org/latest/html/documentation/#_named_parameters) by using a `Map` as the first argument. This would allow syntax such as; ```groovy; doSomething(threshold: 0.5, channel: 2); ```; which is at least fairly Python-like, except for the `:` instead of `=",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/757
https://github.com/qupath/qupath/issues/757:4057,Modifiability,plugin,plugins,4057,"for developers to create a class corresponding to the necessary parameters. However, this could *possibly* be used in the future to more easily generate basic dialogs from the parameter class with the help of annotations. ### Handle imports explicitly. QuPath scripts usually rely upon a default static import. ```groovy; import static qupath.lib.scripting.QP.*; ```; This clears things up for the users, turning Groovy scripting into something more resembling a macro language with simple commands like; ```groovy; selectAnnotations(); ```. However, by hiding the complexity it is also more confusing when something breaks or an import is missing. An idea to deal with this would be to base scripting upon *any* class (not relying primarily on `QP`/`QPEx`), but within the history workflow step store a reference to any classes that need to be import for that step to work. Then, when calling [`Workflow.createScript()`](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core/src/main/java/qupath/lib/plugins/workflow/Workflow.java#L197) these imports would be gathered into a set and included at the top (or bottom) of the script. This has the advantage of making scripts self-contained and no longer rely upon default imports. There is also no need for developers to pile every new command into `QP`/`QPEx`: rather, scripting commands can be grouped much more logically elsewhere. On the other hand, this has the disadvantage of making scripts longer, with `import` statements that won't make much sense to some users. ## Implications. These changes likely represent a commitment to Groovy as the *only* scripting language QuPath supports. In theory, QuPath still *could* support different scripting languages via JSR 223, but in practice it doesn't. While Groovy isn't universally popular, the main alternative requested is Python - which isn't an option, unless via Jython, which remains limited to Python 2.7 syntax. Personally, I think that really good Groov",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/757
https://github.com/qupath/qupath/issues/757:1396,Performance,load,load,1396,"5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/lib/scripting/QP.java) or [`QPEx`](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/QPEx.java) classes, and usually with various versions of the same method depending upon whether an `ImageData` or `PathObjectHierarchy` should be specified or not. These are then added to `imageData.getHistoryWorkflow()` as new steps. In some cases (where `PathPlugin` is used), the script is standardized to call `runPlugin(String className, String args)` - which has to squeeze all the parameters into a `String`. This 'works', but feels brittle and awkward - not least because by default single quotes are used around the `args`, which thwarts [string interpolation](https://groovy-lang.org/syntax.html#_string_interpolation) as an easy way to adjust values. We need a better way to; 1. make new commands scriptable, even if this requires many parameters (some of which may be optional), without requiring a load most custom code; 2. call scriptable commands from Groovy intuitively, including with changes to parameters, without needing to learn or lookup long parameter lists for overloaded methods. ## The proposal. There are two ideas, which could be considered separately. ### Use named parameters. Groovy supports [names parameters](http://docs.groovy-lang.org/latest/html/documentation/#_named_parameters) by using a `Map` as the first argument. This would allow syntax such as; ```groovy; doSomething(threshold: 0.5, channel: 2); ```; which is at least fairly Python-like, except for the `:` instead of `=`. This would call Java methods defined something like this:; ```java. // Main implementation; custom parameter class handles any default/optional args; static void doSomething(ImageData<BufferedImage> imageData, CustomParams params) {; // Do something with the custom parameters; }. // kwargs version with current image; static void doSomething(M",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/757
https://github.com/qupath/qupath/issues/757:4418,Testability,log,logically,4418,".lib.scripting.QP.*; ```; This clears things up for the users, turning Groovy scripting into something more resembling a macro language with simple commands like; ```groovy; selectAnnotations(); ```. However, by hiding the complexity it is also more confusing when something breaks or an import is missing. An idea to deal with this would be to base scripting upon *any* class (not relying primarily on `QP`/`QPEx`), but within the history workflow step store a reference to any classes that need to be import for that step to work. Then, when calling [`Workflow.createScript()`](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core/src/main/java/qupath/lib/plugins/workflow/Workflow.java#L197) these imports would be gathered into a set and included at the top (or bottom) of the script. This has the advantage of making scripts self-contained and no longer rely upon default imports. There is also no need for developers to pile every new command into `QP`/`QPEx`: rather, scripting commands can be grouped much more logically elsewhere. On the other hand, this has the disadvantage of making scripts longer, with `import` statements that won't make much sense to some users. ## Implications. These changes likely represent a commitment to Groovy as the *only* scripting language QuPath supports. In theory, QuPath still *could* support different scripting languages via JSR 223, but in practice it doesn't. While Groovy isn't universally popular, the main alternative requested is Python - which isn't an option, unless via Jython, which remains limited to Python 2.7 syntax. Personally, I think that really good Groovy support is better than poor support for multiple scripting languages. ## Other scripting considerations. Other ways scripting could/should be improved include:; * Support imports from other scripts / Groovy classes; * Support compiling scripts / reading from Jars; * Support running scripts without seeing the script editor (so they look l",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/757
https://github.com/qupath/qupath/issues/757:1459,Usability,intuit,intuitively,1459,"5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/QPEx.java) classes, and usually with various versions of the same method depending upon whether an `ImageData` or `PathObjectHierarchy` should be specified or not. These are then added to `imageData.getHistoryWorkflow()` as new steps. In some cases (where `PathPlugin` is used), the script is standardized to call `runPlugin(String className, String args)` - which has to squeeze all the parameters into a `String`. This 'works', but feels brittle and awkward - not least because by default single quotes are used around the `args`, which thwarts [string interpolation](https://groovy-lang.org/syntax.html#_string_interpolation) as an easy way to adjust values. We need a better way to; 1. make new commands scriptable, even if this requires many parameters (some of which may be optional), without requiring a load most custom code; 2. call scriptable commands from Groovy intuitively, including with changes to parameters, without needing to learn or lookup long parameter lists for overloaded methods. ## The proposal. There are two ideas, which could be considered separately. ### Use named parameters. Groovy supports [names parameters](http://docs.groovy-lang.org/latest/html/documentation/#_named_parameters) by using a `Map` as the first argument. This would allow syntax such as; ```groovy; doSomething(threshold: 0.5, channel: 2); ```; which is at least fairly Python-like, except for the `:` instead of `=`. This would call Java methods defined something like this:; ```java. // Main implementation; custom parameter class handles any default/optional args; static void doSomething(ImageData<BufferedImage> imageData, CustomParams params) {; // Do something with the custom parameters; }. // kwargs version with current image; static void doSomething(Map<?, ?> params) {; doSomething(params, getCurrentImageData());; }. // kwargs version with specified image; static void doSomething(Map<?, ?> params, ImageDa",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/757
https://github.com/qupath/qupath/issues/757:1529,Usability,learn,learn,1529,"5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/QPEx.java) classes, and usually with various versions of the same method depending upon whether an `ImageData` or `PathObjectHierarchy` should be specified or not. These are then added to `imageData.getHistoryWorkflow()` as new steps. In some cases (where `PathPlugin` is used), the script is standardized to call `runPlugin(String className, String args)` - which has to squeeze all the parameters into a `String`. This 'works', but feels brittle and awkward - not least because by default single quotes are used around the `args`, which thwarts [string interpolation](https://groovy-lang.org/syntax.html#_string_interpolation) as an easy way to adjust values. We need a better way to; 1. make new commands scriptable, even if this requires many parameters (some of which may be optional), without requiring a load most custom code; 2. call scriptable commands from Groovy intuitively, including with changes to parameters, without needing to learn or lookup long parameter lists for overloaded methods. ## The proposal. There are two ideas, which could be considered separately. ### Use named parameters. Groovy supports [names parameters](http://docs.groovy-lang.org/latest/html/documentation/#_named_parameters) by using a `Map` as the first argument. This would allow syntax such as; ```groovy; doSomething(threshold: 0.5, channel: 2); ```; which is at least fairly Python-like, except for the `:` instead of `=`. This would call Java methods defined something like this:; ```java. // Main implementation; custom parameter class handles any default/optional args; static void doSomething(ImageData<BufferedImage> imageData, CustomParams params) {; // Do something with the custom parameters; }. // kwargs version with current image; static void doSomething(Map<?, ?> params) {; doSomething(params, getCurrentImageData());; }. // kwargs version with specified image; static void doSomething(Map<?, ?> params, ImageDa",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/757
https://github.com/qupath/qupath/issues/757:3392,Usability,clear,clears,3392,"oSomething(Map<?, ?> params, ImageData<BufferedImage> imageData) {; var gson = GsonTools.getInstance();; var jsonElement = gson.toJsonTree(params);; var paramsObj = gson.fromJson(jsonElement, CustomParams.class);; doSomething(imageData, paramsObj);; }. ```. A nice thing about the Groovy implementation is that non-keyword args can be put before or after, e.g.; ```groovy; // Should be equivalent (I think...); doSomething(threshold: 0.5, channel: 2, imageData); doSomething(imageData, threshold: 0.5, channel: 2); ```. This introduces some overhead for developers to create a class corresponding to the necessary parameters. However, this could *possibly* be used in the future to more easily generate basic dialogs from the parameter class with the help of annotations. ### Handle imports explicitly. QuPath scripts usually rely upon a default static import. ```groovy; import static qupath.lib.scripting.QP.*; ```; This clears things up for the users, turning Groovy scripting into something more resembling a macro language with simple commands like; ```groovy; selectAnnotations(); ```. However, by hiding the complexity it is also more confusing when something breaks or an import is missing. An idea to deal with this would be to base scripting upon *any* class (not relying primarily on `QP`/`QPEx`), but within the history workflow step store a reference to any classes that need to be import for that step to work. Then, when calling [`Workflow.createScript()`](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core/src/main/java/qupath/lib/plugins/workflow/Workflow.java#L197) these imports would be gathered into a set and included at the top (or bottom) of the script. This has the advantage of making scripts self-contained and no longer rely upon default imports. There is also no need for developers to pile every new command into `QP`/`QPEx`: rather, scripting commands can be grouped much more logically elsewhere. On the other hand, this has the",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/757
https://github.com/qupath/qupath/issues/757:3502,Usability,simpl,simple,3502,"oSomething(Map<?, ?> params, ImageData<BufferedImage> imageData) {; var gson = GsonTools.getInstance();; var jsonElement = gson.toJsonTree(params);; var paramsObj = gson.fromJson(jsonElement, CustomParams.class);; doSomething(imageData, paramsObj);; }. ```. A nice thing about the Groovy implementation is that non-keyword args can be put before or after, e.g.; ```groovy; // Should be equivalent (I think...); doSomething(threshold: 0.5, channel: 2, imageData); doSomething(imageData, threshold: 0.5, channel: 2); ```. This introduces some overhead for developers to create a class corresponding to the necessary parameters. However, this could *possibly* be used in the future to more easily generate basic dialogs from the parameter class with the help of annotations. ### Handle imports explicitly. QuPath scripts usually rely upon a default static import. ```groovy; import static qupath.lib.scripting.QP.*; ```; This clears things up for the users, turning Groovy scripting into something more resembling a macro language with simple commands like; ```groovy; selectAnnotations(); ```. However, by hiding the complexity it is also more confusing when something breaks or an import is missing. An idea to deal with this would be to base scripting upon *any* class (not relying primarily on `QP`/`QPEx`), but within the history workflow step store a reference to any classes that need to be import for that step to work. Then, when calling [`Workflow.createScript()`](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core/src/main/java/qupath/lib/plugins/workflow/Workflow.java#L197) these imports would be gathered into a set and included at the top (or bottom) of the script. This has the advantage of making scripts self-contained and no longer rely upon default imports. There is also no need for developers to pile every new command into `QP`/`QPEx`: rather, scripting commands can be grouped much more logically elsewhere. On the other hand, this has the",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/757
https://github.com/qupath/qupath/issues/758:412,Availability,error,error-when-exporting-region-of-the-image-in-script,412,"## Bug report. **Describe the bug**; In QuPath <= 0.2, it's possible to have selected objects but for `getSelectedObject()` to still return null. This is kind of a bug, while kind of not. It happens because QuPath distinguishes between the 'primary' selected object, and the set of all selected objects. However, it often *feels* buggy and understandably causes confusion at times, e.g. https://forum.image.sc/t/error-when-exporting-region-of-the-image-in-script/50269/3. **To Reproduce**; Run the following script in v0.2.3 on an image that contains annotations:; ```groovy; resetSelection(); selectAnnotations(); println getSelectedObject(); println getSelectedObjects(); ```; You should find that it prints `null` for `getSelectedObject()` selected object, *even though clearly annotations are selected*. This is most confusing whenever there is only one annotation on the image, and there would be no ambiguity as to which one is the primary. **Expected behavior**; I don't know... but my feeling is that, if there are multiple selected objects, QuPath should always enforce that one is the primary. That means a [`PathObjectSelectionModel`](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core/src/main/java/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.java#L62) change for whenever a set is selected but the primary is `null`. I propose:; * If a primary selected object is specified, use that. Otherwise; * If the current primary selected object remains selected (i.e. it's still in the collection passed to the method), just keep it selected. Otherwise; * Select the first object in the collection passed to the select method to use as the primary. Another idea was to keep the object with the largest ROI, or at the lowest hierarchy level... but those all sounded more involved. **Desktop (please complete the following information):**; - QuPath v0.2.3 and earlier. **Additional context**; I've changed the code already and was planning to",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/758
https://github.com/qupath/qupath/issues/758:773,Usability,clear,clearly,773,"## Bug report. **Describe the bug**; In QuPath <= 0.2, it's possible to have selected objects but for `getSelectedObject()` to still return null. This is kind of a bug, while kind of not. It happens because QuPath distinguishes between the 'primary' selected object, and the set of all selected objects. However, it often *feels* buggy and understandably causes confusion at times, e.g. https://forum.image.sc/t/error-when-exporting-region-of-the-image-in-script/50269/3. **To Reproduce**; Run the following script in v0.2.3 on an image that contains annotations:; ```groovy; resetSelection(); selectAnnotations(); println getSelectedObject(); println getSelectedObjects(); ```; You should find that it prints `null` for `getSelectedObject()` selected object, *even though clearly annotations are selected*. This is most confusing whenever there is only one annotation on the image, and there would be no ambiguity as to which one is the primary. **Expected behavior**; I don't know... but my feeling is that, if there are multiple selected objects, QuPath should always enforce that one is the primary. That means a [`PathObjectSelectionModel`](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core/src/main/java/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.java#L62) change for whenever a set is selected but the primary is `null`. I propose:; * If a primary selected object is specified, use that. Otherwise; * If the current primary selected object remains selected (i.e. it's still in the collection passed to the method), just keep it selected. Otherwise; * Select the first object in the collection passed to the select method to use as the primary. Another idea was to keep the object with the largest ROI, or at the lowest hierarchy level... but those all sounded more involved. **Desktop (please complete the following information):**; - QuPath v0.2.3 and earlier. **Additional context**; I've changed the code already and was planning to",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/758
https://github.com/qupath/qupath/issues/758:2073,Usability,feedback,feedback,2073,"Object()` to still return null. This is kind of a bug, while kind of not. It happens because QuPath distinguishes between the 'primary' selected object, and the set of all selected objects. However, it often *feels* buggy and understandably causes confusion at times, e.g. https://forum.image.sc/t/error-when-exporting-region-of-the-image-in-script/50269/3. **To Reproduce**; Run the following script in v0.2.3 on an image that contains annotations:; ```groovy; resetSelection(); selectAnnotations(); println getSelectedObject(); println getSelectedObjects(); ```; You should find that it prints `null` for `getSelectedObject()` selected object, *even though clearly annotations are selected*. This is most confusing whenever there is only one annotation on the image, and there would be no ambiguity as to which one is the primary. **Expected behavior**; I don't know... but my feeling is that, if there are multiple selected objects, QuPath should always enforce that one is the primary. That means a [`PathObjectSelectionModel`](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core/src/main/java/qupath/lib/objects/hierarchy/events/PathObjectSelectionModel.java#L62) change for whenever a set is selected but the primary is `null`. I propose:; * If a primary selected object is specified, use that. Otherwise; * If the current primary selected object remains selected (i.e. it's still in the collection passed to the method), just keep it selected. Otherwise; * Select the first object in the collection passed to the select method to use as the primary. Another idea was to keep the object with the largest ROI, or at the lowest hierarchy level... but those all sounded more involved. **Desktop (please complete the following information):**; - QuPath v0.2.3 and earlier. **Additional context**; I've changed the code already and was planning to merge it, but then figured I'd post here first. If anyone is watching, feedback / opinions / objections welcome!",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/758
https://github.com/qupath/qupath/pull/759:83,Testability,log,logging,83,Aims to resolve https://github.com/qupath/qupath/issues/758; Added some additional logging.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/759
https://github.com/qupath/qupath/pull/761:127,Deployability,update,update,127,"Fixes https://github.com/qupath/qupath/issues/593; When the image name is set for an image open in the viewer, the metadata is update immediately. Otherwise, the name is set only in the project (as before) and update in the server as entry.readImageData() is called.; Potentially, getting an image some other way (i.e. via a serverBuilder) could fail to give the updated name.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/761
https://github.com/qupath/qupath/pull/761:210,Deployability,update,update,210,"Fixes https://github.com/qupath/qupath/issues/593; When the image name is set for an image open in the viewer, the metadata is update immediately. Otherwise, the name is set only in the project (as before) and update in the server as entry.readImageData() is called.; Potentially, getting an image some other way (i.e. via a serverBuilder) could fail to give the updated name.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/761
https://github.com/qupath/qupath/pull/761:363,Deployability,update,updated,363,"Fixes https://github.com/qupath/qupath/issues/593; When the image name is set for an image open in the viewer, the metadata is update immediately. Otherwise, the name is set only in the project (as before) and update in the server as entry.readImageData() is called.; Potentially, getting an image some other way (i.e. via a serverBuilder) could fail to give the updated name.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/761
https://github.com/qupath/qupath/pull/762:180,Safety,detect,detections,180,"Bigger than it sounds... involves reorganizing quite a lot of colormaps, colormodels and pixel classification. Density maps can be used to find hotspots or convert cell (or other) detections into annotations, as an alternative to pixel classification. They operate like pixel classifiers, but by default are limited in size to be 'small' (i.e. all tiles can be requested at once). Once it has been build, a density map is really just an `ImageServer` with a particular interpretation - indicated by its `ChannelType` being `DENSITY`. In theory, a density map could have several channels but in practice it currently has only one or two.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/762
https://github.com/qupath/qupath/pull/765:90,Availability,failure,failure,90,"Fixes exception thrown when trying to run a script for a project, and avoids catastrophic failure (inability to start up) if a project is specified that isn't available.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/765
https://github.com/qupath/qupath/pull/765:159,Availability,avail,available,159,"Fixes exception thrown when trying to run a script for a project, and avoids catastrophic failure (inability to start up) if a project is specified that isn't available.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/765
https://github.com/qupath/qupath/pull/765:70,Safety,avoid,avoids,70,"Fixes exception thrown when trying to run a script for a project, and avoids catastrophic failure (inability to start up) if a project is specified that isn't available.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/765
https://github.com/qupath/qupath/pull/766:107,Safety,detect,detections,107,"Use multiple lines to better handle long lists.; Also include only measurements in the measurement list of detections (rather than from the ObservableMeasurementTable), since these are the most important for copy/paste.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/766
https://github.com/qupath/qupath/pull/767:76,Testability,log,logging,76,"Catch any exceptions intersecting JTS geometries when tiling large regions, logging a warning instead of failing and providing a suggestion for resolution (i.e. shape simplification).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/767
https://github.com/qupath/qupath/pull/767:167,Usability,simpl,simplification,167,"Catch any exceptions intersecting JTS geometries when tiling large regions, logging a warning instead of failing and providing a suggestion for resolution (i.e. shape simplification).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/767
https://github.com/qupath/qupath/pull/768:61,Integrability,message,message,61,"Also turn off logging to a file by default.; Add debug level message if getSelectedObject() returns null but getSelectedObjects() does not, in reference to https://github.com/qupath/qupath/issues/758",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/768
https://github.com/qupath/qupath/pull/768:14,Testability,log,logging,14,"Also turn off logging to a file by default.; Add debug level message if getSelectedObject() returns null but getSelectedObjects() does not, in reference to https://github.com/qupath/qupath/issues/758",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/768
https://github.com/qupath/qupath/pull/771:60,Availability,repair,repair,60,See https://forum.image.sc/t/minor-qupath-issue/54602; Also repair some tooltips & refresh 'Load pixel classifier' for a new image by bringing the window into focus.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/771
https://github.com/qupath/qupath/pull/771:92,Performance,Load,Load,92,See https://forum.image.sc/t/minor-qupath-issue/54602; Also repair some tooltips & refresh 'Load pixel classifier' for a new image by bringing the window into focus.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/771
https://github.com/qupath/qupath/pull/773:43,Availability,down,download,43,Switch back to pkg because dmg fails after download.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/773
https://github.com/qupath/qupath/issues/776:423,Integrability,depend,dependent,423,"## Bug report. **Describe the bug**; When using QuPath v0.3.0-rc1 at the EMBO Advanced Methods in Bioimage Analysis course, density maps worked for most people - but not for all. Even a restart didn't help. Curiously, setting the density radius to 0 shows *something*. This suggests the problems arise during image filtering, which uses the JavaCPP presets for OpenCV. **To Reproduce**; I wish I knew. It might be hardware-dependent (or some other system conflict), but at this point I don't see the issue on any computer I have access to. **Expected behavior**; Consistency across computers where QuPath runs. **Desktop (please complete the following information):**; - OS: Windows 8, Windows 10 (so far); - QuPath Version 0.3.0-rc1. **Additional context**; My guess is that it is may be related to OpenCV, since QuPath is using OpenCV to apply filters and thereby calculate local densities. However, classifiers still seem to work - so not everything is broken, adding to the mystery. **Any more insights from anyone experiencing the bug would be very welcome!**",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/776
https://github.com/qupath/qupath/issues/776:529,Security,access,access,529,"## Bug report. **Describe the bug**; When using QuPath v0.3.0-rc1 at the EMBO Advanced Methods in Bioimage Analysis course, density maps worked for most people - but not for all. Even a restart didn't help. Curiously, setting the density radius to 0 shows *something*. This suggests the problems arise during image filtering, which uses the JavaCPP presets for OpenCV. **To Reproduce**; I wish I knew. It might be hardware-dependent (or some other system conflict), but at this point I don't see the issue on any computer I have access to. **Expected behavior**; Consistency across computers where QuPath runs. **Desktop (please complete the following information):**; - OS: Windows 8, Windows 10 (so far); - QuPath Version 0.3.0-rc1. **Additional context**; My guess is that it is may be related to OpenCV, since QuPath is using OpenCV to apply filters and thereby calculate local densities. However, classifiers still seem to work - so not everything is broken, adding to the mystery. **Any more insights from anyone experiencing the bug would be very welcome!**",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/776
https://github.com/qupath/qupath/issues/777:74,Availability,down,downsample,74,"**Describe the bug**; I erroneously set requestedPixelSize = 0 instead of downsample = 0 in my exporting script that I adapted from [the docs](https://qupath.readthedocs.io/en/0.2/docs/advanced/exporting_annotations.html), the script didn't error but instead, after about a day running and my RAM filling up to about 20GB I realized my mistake. I suspect requestedPixelSize = 0 causes an infinite loop somewhere or the divide by zero on lines 378 and 379 of TileExporter are handled strangely. **To Reproduce**; In the script from [the docs](https://qupath.readthedocs.io/en/0.2/docs/advanced/exporting_annotations.html) set equestedPixelSize = 0 . **Expected behavior**; It would be nice to have some input validation or a way to raise an exception for this use case. . **Desktop (please complete the following information):**; OS: Windows 7; QuPath Version 0.2.3",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/777
https://github.com/qupath/qupath/issues/777:241,Availability,error,error,241,"**Describe the bug**; I erroneously set requestedPixelSize = 0 instead of downsample = 0 in my exporting script that I adapted from [the docs](https://qupath.readthedocs.io/en/0.2/docs/advanced/exporting_annotations.html), the script didn't error but instead, after about a day running and my RAM filling up to about 20GB I realized my mistake. I suspect requestedPixelSize = 0 causes an infinite loop somewhere or the divide by zero on lines 378 and 379 of TileExporter are handled strangely. **To Reproduce**; In the script from [the docs](https://qupath.readthedocs.io/en/0.2/docs/advanced/exporting_annotations.html) set equestedPixelSize = 0 . **Expected behavior**; It would be nice to have some input validation or a way to raise an exception for this use case. . **Desktop (please complete the following information):**; OS: Windows 7; QuPath Version 0.2.3",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/777
https://github.com/qupath/qupath/issues/777:119,Energy Efficiency,adapt,adapted,119,"**Describe the bug**; I erroneously set requestedPixelSize = 0 instead of downsample = 0 in my exporting script that I adapted from [the docs](https://qupath.readthedocs.io/en/0.2/docs/advanced/exporting_annotations.html), the script didn't error but instead, after about a day running and my RAM filling up to about 20GB I realized my mistake. I suspect requestedPixelSize = 0 causes an infinite loop somewhere or the divide by zero on lines 378 and 379 of TileExporter are handled strangely. **To Reproduce**; In the script from [the docs](https://qupath.readthedocs.io/en/0.2/docs/advanced/exporting_annotations.html) set equestedPixelSize = 0 . **Expected behavior**; It would be nice to have some input validation or a way to raise an exception for this use case. . **Desktop (please complete the following information):**; OS: Windows 7; QuPath Version 0.2.3",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/777
https://github.com/qupath/qupath/issues/777:119,Modifiability,adapt,adapted,119,"**Describe the bug**; I erroneously set requestedPixelSize = 0 instead of downsample = 0 in my exporting script that I adapted from [the docs](https://qupath.readthedocs.io/en/0.2/docs/advanced/exporting_annotations.html), the script didn't error but instead, after about a day running and my RAM filling up to about 20GB I realized my mistake. I suspect requestedPixelSize = 0 causes an infinite loop somewhere or the divide by zero on lines 378 and 379 of TileExporter are handled strangely. **To Reproduce**; In the script from [the docs](https://qupath.readthedocs.io/en/0.2/docs/advanced/exporting_annotations.html) set equestedPixelSize = 0 . **Expected behavior**; It would be nice to have some input validation or a way to raise an exception for this use case. . **Desktop (please complete the following information):**; OS: Windows 7; QuPath Version 0.2.3",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/777
https://github.com/qupath/qupath/issues/777:708,Security,validat,validation,708,"**Describe the bug**; I erroneously set requestedPixelSize = 0 instead of downsample = 0 in my exporting script that I adapted from [the docs](https://qupath.readthedocs.io/en/0.2/docs/advanced/exporting_annotations.html), the script didn't error but instead, after about a day running and my RAM filling up to about 20GB I realized my mistake. I suspect requestedPixelSize = 0 causes an infinite loop somewhere or the divide by zero on lines 378 and 379 of TileExporter are handled strangely. **To Reproduce**; In the script from [the docs](https://qupath.readthedocs.io/en/0.2/docs/advanced/exporting_annotations.html) set equestedPixelSize = 0 . **Expected behavior**; It would be nice to have some input validation or a way to raise an exception for this use case. . **Desktop (please complete the following information):**; OS: Windows 7; QuPath Version 0.2.3",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/777
https://github.com/qupath/qupath/pull/780:195,Performance,concurren,concurrent,195,"This allows multiple QuPath instances to use different preferences.; Also set default parallelism to use ForkJoinPool.getCommonPoolParallelism(), since this can be controlled with the 'java.util.concurrent.ForkJoinPool.common.parallelism' property.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/780
https://github.com/qupath/qupath/pull/781:220,Security,access,accessible,220,"Major improvements when using pixel classification (and some other commands) through:; - More frequent use of PointerScope to keep memory in check; - New ThreadTools methods to set/get parallel threads, so this value is accessible within core modules; - Multithreading within ContourTracing uses ThreadTools value to enable memory use to be better controlled (rather than a parallel stream, which could get out of control); - ContourTracing also now parallelized geometry manipulations whenever applying multiple thresholds to an ImageServer. Much of this prompted by @MarkZaidi's benchmarking thread at https://forum.image.sc/t/designing-a-qupath-workstation/54849. Along the way, a small bug fix to DensityMaps scripting.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/781
https://github.com/qupath/qupath/pull/781:581,Testability,benchmark,benchmarking,581,"Major improvements when using pixel classification (and some other commands) through:; - More frequent use of PointerScope to keep memory in check; - New ThreadTools methods to set/get parallel threads, so this value is accessible within core modules; - Multithreading within ContourTracing uses ThreadTools value to enable memory use to be better controlled (rather than a parallel stream, which could get out of control); - ContourTracing also now parallelized geometry manipulations whenever applying multiple thresholds to an ImageServer. Much of this prompted by @MarkZaidi's benchmarking thread at https://forum.image.sc/t/designing-a-qupath-workstation/54849. Along the way, a small bug fix to DensityMaps scripting.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/781
https://github.com/qupath/qupath/pull/782:19,Safety,avoid,avoid,19,"The main aim is to avoid naively and sequentially computing the intersection of every rectangular tile with an outer geometry.; This uses several tricks:; * Use a parallel stream when computing intersections using multiple tiles; * For large ROIs, compute intersections first for all tiles in either each row or column, so subsequent intersection calculations are simplified; * For large ROIs, create a prepared geometry first to check covers/intersects quickly; Results should be the same as using the previous sequential approach with RoiTools.computeTiledROIs; the old method remains to enable testing.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/782
https://github.com/qupath/qupath/pull/782:597,Testability,test,testing,597,"The main aim is to avoid naively and sequentially computing the intersection of every rectangular tile with an outer geometry.; This uses several tricks:; * Use a parallel stream when computing intersections using multiple tiles; * For large ROIs, compute intersections first for all tiles in either each row or column, so subsequent intersection calculations are simplified; * For large ROIs, create a prepared geometry first to check covers/intersects quickly; Results should be the same as using the previous sequential approach with RoiTools.computeTiledROIs; the old method remains to enable testing.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/782
https://github.com/qupath/qupath/pull/782:364,Usability,simpl,simplified,364,"The main aim is to avoid naively and sequentially computing the intersection of every rectangular tile with an outer geometry.; This uses several tricks:; * Use a parallel stream when computing intersections using multiple tiles; * For large ROIs, compute intersections first for all tiles in either each row or column, so subsequent intersection calculations are simplified; * For large ROIs, create a prepared geometry first to check covers/intersects quickly; Results should be the same as using the previous sequential approach with RoiTools.computeTiledROIs; the old method remains to enable testing.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/782
https://github.com/qupath/qupath/pull/783:294,Deployability,release,releases,294,"This avoids the need to create a custom launch script as described at https://github.com/qupath/qupath/issues/628. While still not ideal, it gives an alternative way to avoid using system shared libraries with OpenSlide - which is known to be problematic because of pixman issues on Ubuntu LTS releases (including 20.04). This works by including a bash script in the jpackage image generated for Linux by default. It also works with; `./gradlew run -Pld-path=true`; and with; `./gradlew installDist -Pld-path=true`",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/783
https://github.com/qupath/qupath/pull/783:487,Deployability,install,installDist,487,"This avoids the need to create a custom launch script as described at https://github.com/qupath/qupath/issues/628. While still not ideal, it gives an alternative way to avoid using system shared libraries with OpenSlide - which is known to be problematic because of pixman issues on Ubuntu LTS releases (including 20.04). This works by including a bash script in the jpackage image generated for Linux by default. It also works with; `./gradlew run -Pld-path=true`; and with; `./gradlew installDist -Pld-path=true`",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/783
https://github.com/qupath/qupath/pull/783:5,Safety,avoid,avoids,5,"This avoids the need to create a custom launch script as described at https://github.com/qupath/qupath/issues/628. While still not ideal, it gives an alternative way to avoid using system shared libraries with OpenSlide - which is known to be problematic because of pixman issues on Ubuntu LTS releases (including 20.04). This works by including a bash script in the jpackage image generated for Linux by default. It also works with; `./gradlew run -Pld-path=true`; and with; `./gradlew installDist -Pld-path=true`",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/783
https://github.com/qupath/qupath/pull/783:169,Safety,avoid,avoid,169,"This avoids the need to create a custom launch script as described at https://github.com/qupath/qupath/issues/628. While still not ideal, it gives an alternative way to avoid using system shared libraries with OpenSlide - which is known to be problematic because of pixman issues on Ubuntu LTS releases (including 20.04). This works by including a bash script in the jpackage image generated for Linux by default. It also works with; `./gradlew run -Pld-path=true`; and with; `./gradlew installDist -Pld-path=true`",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/783
https://github.com/qupath/qupath/pull/785:389,Energy Efficiency,reduce,reduce,389,"Attempt to; 1. improve performance with higher thread counts, and; 2. block the UI for PathPlugin implementations that have a long startup time.; Specifically, this should prevent a user running cell detection interactively in complex, slow-to-tile annotations from modifying the object hierarchy in the time between pressing 'Run' and the modal progress dialog appearing. It also aims to reduce repaint frequency when the detection is running, so that less effort is 'wasted' updating the display.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/785
https://github.com/qupath/qupath/pull/785:23,Performance,perform,performance,23,"Attempt to; 1. improve performance with higher thread counts, and; 2. block the UI for PathPlugin implementations that have a long startup time.; Specifically, this should prevent a user running cell detection interactively in complex, slow-to-tile annotations from modifying the object hierarchy in the time between pressing 'Run' and the modal progress dialog appearing. It also aims to reduce repaint frequency when the detection is running, so that less effort is 'wasted' updating the display.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/785
https://github.com/qupath/qupath/pull/785:200,Safety,detect,detection,200,"Attempt to; 1. improve performance with higher thread counts, and; 2. block the UI for PathPlugin implementations that have a long startup time.; Specifically, this should prevent a user running cell detection interactively in complex, slow-to-tile annotations from modifying the object hierarchy in the time between pressing 'Run' and the modal progress dialog appearing. It also aims to reduce repaint frequency when the detection is running, so that less effort is 'wasted' updating the display.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/785
https://github.com/qupath/qupath/pull/785:423,Safety,detect,detection,423,"Attempt to; 1. improve performance with higher thread counts, and; 2. block the UI for PathPlugin implementations that have a long startup time.; Specifically, this should prevent a user running cell detection interactively in complex, slow-to-tile annotations from modifying the object hierarchy in the time between pressing 'Run' and the modal progress dialog appearing. It also aims to reduce repaint frequency when the detection is running, so that less effort is 'wasted' updating the display.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/785
https://github.com/qupath/qupath/pull/787:128,Performance,perform,performance,128,"useInstanceLabels() replaces useUniqueLabels(), and new getInstanceLabels() method can be used to query labels later.; Improved performance when working with large numbers of objects and better parallelization.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/787
https://github.com/qupath/qupath/issues/788:476,Deployability,update,update,476,"## Bug report. **Describe the bug**; When running subcellular detection, the `Num spots` and `Num clusters` measurements are incorrect; the spots contain both spots and clusters, while the count of clusters is 0. **To Reproduce**; See https://forum.image.sc/t/about-num-cluster-column-of-subcellular-detection/55585. **Expected behavior**; Num spots and Num clusters measurements match what is visible in the viewer, at least at the time of creation (they don't automatically update). **Desktop (please complete the following information):**; - QuPath Version: v0.2.3, v0.3.0-rc1. **Additional context**; See; https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/detect/cells/SubcellularDetection.java#L360-L373. It might be fixed with a change to:; ```java; if (isCluster); clusterObjects.add(cluster);; else; spotObjects.add(cluster);; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/788
https://github.com/qupath/qupath/issues/788:62,Safety,detect,detection,62,"## Bug report. **Describe the bug**; When running subcellular detection, the `Num spots` and `Num clusters` measurements are incorrect; the spots contain both spots and clusters, while the count of clusters is 0. **To Reproduce**; See https://forum.image.sc/t/about-num-cluster-column-of-subcellular-detection/55585. **Expected behavior**; Num spots and Num clusters measurements match what is visible in the viewer, at least at the time of creation (they don't automatically update). **Desktop (please complete the following information):**; - QuPath Version: v0.2.3, v0.3.0-rc1. **Additional context**; See; https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/detect/cells/SubcellularDetection.java#L360-L373. It might be fixed with a change to:; ```java; if (isCluster); clusterObjects.add(cluster);; else; spotObjects.add(cluster);; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/788
https://github.com/qupath/qupath/issues/788:300,Safety,detect,detection,300,"## Bug report. **Describe the bug**; When running subcellular detection, the `Num spots` and `Num clusters` measurements are incorrect; the spots contain both spots and clusters, while the count of clusters is 0. **To Reproduce**; See https://forum.image.sc/t/about-num-cluster-column-of-subcellular-detection/55585. **Expected behavior**; Num spots and Num clusters measurements match what is visible in the viewer, at least at the time of creation (they don't automatically update). **Desktop (please complete the following information):**; - QuPath Version: v0.2.3, v0.3.0-rc1. **Additional context**; See; https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/detect/cells/SubcellularDetection.java#L360-L373. It might be fixed with a change to:; ```java; if (isCluster); clusterObjects.add(cluster);; else; spotObjects.add(cluster);; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/788
https://github.com/qupath/qupath/issues/788:740,Safety,detect,detect,740,"## Bug report. **Describe the bug**; When running subcellular detection, the `Num spots` and `Num clusters` measurements are incorrect; the spots contain both spots and clusters, while the count of clusters is 0. **To Reproduce**; See https://forum.image.sc/t/about-num-cluster-column-of-subcellular-detection/55585. **Expected behavior**; Num spots and Num clusters measurements match what is visible in the viewer, at least at the time of creation (they don't automatically update). **Desktop (please complete the following information):**; - QuPath Version: v0.2.3, v0.3.0-rc1. **Additional context**; See; https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/detect/cells/SubcellularDetection.java#L360-L373. It might be fixed with a change to:; ```java; if (isCluster); clusterObjects.add(cluster);; else; spotObjects.add(cluster);; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/788
https://github.com/qupath/qupath/pull/789:2,Safety,Avoid,Avoid,2,"* Avoid calling `PointerScope.deallocate()`, because this may thwart `Pointer.retainReference()`; * Attempt to improve closing with object classification & the wand tool",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/789
https://github.com/qupath/qupath/pull/790:0,Availability,Recover,Recover,0,Recover when going wild with the 'radius' slider and generating density maps,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/790
https://github.com/qupath/qupath/pull/790:0,Safety,Recover,Recover,0,Recover when going wild with the 'radius' slider and generating density maps,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/790
https://github.com/qupath/qupath/pull/791:18,Availability,avail,available,18,"* Make extensions available to classloader when running command line scripts; * Support update checking for GitHub-hosted extensions; * Adjust wording of memory/thread-related settings and preferences; * Move 'Show installed extensions' to 'Extensions' menu ; * Add 'Open extensions directory' button, when available",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/791
https://github.com/qupath/qupath/pull/791:307,Availability,avail,available,307,"* Make extensions available to classloader when running command line scripts; * Support update checking for GitHub-hosted extensions; * Adjust wording of memory/thread-related settings and preferences; * Move 'Show installed extensions' to 'Extensions' menu ; * Add 'Open extensions directory' button, when available",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/791
https://github.com/qupath/qupath/pull/791:88,Deployability,update,update,88,"* Make extensions available to classloader when running command line scripts; * Support update checking for GitHub-hosted extensions; * Adjust wording of memory/thread-related settings and preferences; * Move 'Show installed extensions' to 'Extensions' menu ; * Add 'Open extensions directory' button, when available",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/791
https://github.com/qupath/qupath/pull/791:215,Deployability,install,installed,215,"* Make extensions available to classloader when running command line scripts; * Support update checking for GitHub-hosted extensions; * Adjust wording of memory/thread-related settings and preferences; * Move 'Show installed extensions' to 'Extensions' menu ; * Add 'Open extensions directory' button, when available",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/791
https://github.com/qupath/qupath/pull/793:201,Deployability,update,update,201,Do not overwrite the last workflow step when setting stain vectors multiple times in a row. This is to address a recent workshop confusion in which it wasn't possible to restore previous values.; Also update the default stain names when using 'Estimate stain vectors'.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/793
https://github.com/qupath/qupath/pull/794:59,Safety,predict,prediction,59,"* Introduce `OpenCVFunction` as a more generic way to call prediction, permitting multiple inputs and outputs.; * Support some of OpenCV's `Model` classes to simplify the use of different model types; * Support JSON serialization for `Scalar` and `Size`; * Support building with CUDA.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/794
https://github.com/qupath/qupath/pull/794:158,Usability,simpl,simplify,158,"* Introduce `OpenCVFunction` as a more generic way to call prediction, permitting multiple inputs and outputs.; * Support some of OpenCV's `Model` classes to simplify the use of different model types; * Support JSON serialization for `Scalar` and `Size`; * Support building with CUDA.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/794
https://github.com/qupath/qupath/pull/796:24,Integrability,interface,interface,24,"Introduce `UriResource` interface, implemented by a `ProjectImageEntry`, and create a core `UriUpdater` class.; Enable paths to be fixed in objects other than projects, including object and pixel classifiers.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/796
https://github.com/qupath/qupath/pull/797:109,Availability,avail,available,109,Remove accidental use of Java 16 Stream.toList() and update Action to catch such problems earlier.; Increase available memory for testing to avoid errors on Apple Silicon.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/797
https://github.com/qupath/qupath/pull/797:147,Availability,error,errors,147,Remove accidental use of Java 16 Stream.toList() and update Action to catch such problems earlier.; Increase available memory for testing to avoid errors on Apple Silicon.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/797
https://github.com/qupath/qupath/pull/797:53,Deployability,update,update,53,Remove accidental use of Java 16 Stream.toList() and update Action to catch such problems earlier.; Increase available memory for testing to avoid errors on Apple Silicon.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/797
https://github.com/qupath/qupath/pull/797:141,Safety,avoid,avoid,141,Remove accidental use of Java 16 Stream.toList() and update Action to catch such problems earlier.; Increase available memory for testing to avoid errors on Apple Silicon.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/797
https://github.com/qupath/qupath/pull/797:130,Testability,test,testing,130,Remove accidental use of Java 16 Stream.toList() and update Action to catch such problems earlier.; Increase available memory for testing to avoid errors on Apple Silicon.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/797
https://github.com/qupath/qupath/issues/799:566,Deployability,release,release,566,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Unable to turn off Input Display. Selecting it a second time adds a second version to the screen. Both versions show keypresses. Selecting again adds a third one...and so on. **To Reproduce**; Turn on Input Display (View > Show Input Display); Notice it shows in lower left of screen.; Try to turn it off by going back to View > Show Input Display. Note: There is no checkmark showing that it is already active.; Selecting it again adds another one to the screen.; Each additional Input Display can be moved from the lower left corner, and all will show the last key pressed (as long as QuPath was the active application). **Expected behavior**; The View menu should show a checkmark when the Input Display has been turned on.; Once the Input Display is active, selecting ""Show Input Display"" will turn off the Input Display and clear the checkmark. **Screenshots**; ![image](https://user-images.githubusercontent.com/27331078/128438550-e734058a-d040-403f-9f5c-507419f24822.png). I realize these are created as ""new"" QuPath windows which can be closed from the task bar. However this fix still seems useful, as the Inp",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/799
https://github.com/qupath/qupath/issues/799:762,Deployability,release,release,762,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Unable to turn off Input Display. Selecting it a second time adds a second version to the screen. Both versions show keypresses. Selecting again adds a third one...and so on. **To Reproduce**; Turn on Input Display (View > Show Input Display); Notice it shows in lower left of screen.; Try to turn it off by going back to View > Show Input Display. Note: There is no checkmark showing that it is already active.; Selecting it again adds another one to the screen.; Each additional Input Display can be moved from the lower left corner, and all will show the last key pressed (as long as QuPath was the active application). **Expected behavior**; The View menu should show a checkmark when the Input Display has been turned on.; Once the Input Display is active, selecting ""Show Input Display"" will turn off the Input Display and clear the checkmark. **Screenshots**; ![image](https://user-images.githubusercontent.com/27331078/128438550-e734058a-d040-403f-9f5c-507419f24822.png). I realize these are created as ""new"" QuPath windows which can be closed from the task bar. However this fix still seems useful, as the Inp",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/799
https://github.com/qupath/qupath/issues/799:2159,Energy Efficiency,Monitor,Monitor,2159,".github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Unable to turn off Input Display. Selecting it a second time adds a second version to the screen. Both versions show keypresses. Selecting again adds a third one...and so on. **To Reproduce**; Turn on Input Display (View > Show Input Display); Notice it shows in lower left of screen.; Try to turn it off by going back to View > Show Input Display. Note: There is no checkmark showing that it is already active.; Selecting it again adds another one to the screen.; Each additional Input Display can be moved from the lower left corner, and all will show the last key pressed (as long as QuPath was the active application). **Expected behavior**; The View menu should show a checkmark when the Input Display has been turned on.; Once the Input Display is active, selecting ""Show Input Display"" will turn off the Input Display and clear the checkmark. **Screenshots**; ![image](https://user-images.githubusercontent.com/27331078/128438550-e734058a-d040-403f-9f5c-507419f24822.png). I realize these are created as ""new"" QuPath windows which can be closed from the task bar. However this fix still seems useful, as the Input Display windows do not have a close box on them. It took me quite awhile to understand how to close them. Note that while other windows such as the Memory Monitor act the same way, they have standard title bars with a close box, so it is obvious they can be moved and closed. It's the special format of the Input Display that confused me. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.3.0 SNAPSHOT. Also verified in 0.2.3. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/799
https://github.com/qupath/qupath/issues/799:1712,Usability,clear,clear,1712,".github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Unable to turn off Input Display. Selecting it a second time adds a second version to the screen. Both versions show keypresses. Selecting again adds a third one...and so on. **To Reproduce**; Turn on Input Display (View > Show Input Display); Notice it shows in lower left of screen.; Try to turn it off by going back to View > Show Input Display. Note: There is no checkmark showing that it is already active.; Selecting it again adds another one to the screen.; Each additional Input Display can be moved from the lower left corner, and all will show the last key pressed (as long as QuPath was the active application). **Expected behavior**; The View menu should show a checkmark when the Input Display has been turned on.; Once the Input Display is active, selecting ""Show Input Display"" will turn off the Input Display and clear the checkmark. **Screenshots**; ![image](https://user-images.githubusercontent.com/27331078/128438550-e734058a-d040-403f-9f5c-507419f24822.png). I realize these are created as ""new"" QuPath windows which can be closed from the task bar. However this fix still seems useful, as the Input Display windows do not have a close box on them. It took me quite awhile to understand how to close them. Note that while other windows such as the Memory Monitor act the same way, they have standard title bars with a close box, so it is obvious they can be moved and closed. It's the special format of the Input Display that confused me. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.3.0 SNAPSHOT. Also verified in 0.2.3. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/799
https://github.com/qupath/qupath/pull/800:62,Safety,Predict,PredictionFunction,62,"DnnModel is now the main class, supported by BlobFunction and PredictionFunction.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/800
https://github.com/qupath/qupath/pull/805:170,Deployability,install,installation,170,Resolves https://github.com/qupath/qupath/issues/776 (at least partially - fixes the macOS issue I could reproduce).; Improve Linux launch script to accept spaces in the installation path.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/805
https://github.com/qupath/qupath/pull/808:10,Energy Efficiency,reduce,reduce,10,"* Further reduce memory use with ImageOps / ImageDataOp; * Fix multithreading ImageOps color deconvolution bug; * Allow the number of live prediction threads to be adjusted with pixel classifiers; * Reduce the length of the server path used with pixel classifiers (could cause performance issues for some classifiers, e.g. Trees, with long JSON representations); * Add extra checks in DelaunayTools to reduce risk of trying to access a coordinate that isn't there",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/808
https://github.com/qupath/qupath/pull/808:199,Energy Efficiency,Reduce,Reduce,199,"* Further reduce memory use with ImageOps / ImageDataOp; * Fix multithreading ImageOps color deconvolution bug; * Allow the number of live prediction threads to be adjusted with pixel classifiers; * Reduce the length of the server path used with pixel classifiers (could cause performance issues for some classifiers, e.g. Trees, with long JSON representations); * Add extra checks in DelaunayTools to reduce risk of trying to access a coordinate that isn't there",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/808
https://github.com/qupath/qupath/pull/808:402,Energy Efficiency,reduce,reduce,402,"* Further reduce memory use with ImageOps / ImageDataOp; * Fix multithreading ImageOps color deconvolution bug; * Allow the number of live prediction threads to be adjusted with pixel classifiers; * Reduce the length of the server path used with pixel classifiers (could cause performance issues for some classifiers, e.g. Trees, with long JSON representations); * Add extra checks in DelaunayTools to reduce risk of trying to access a coordinate that isn't there",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/808
https://github.com/qupath/qupath/pull/808:277,Performance,perform,performance,277,"* Further reduce memory use with ImageOps / ImageDataOp; * Fix multithreading ImageOps color deconvolution bug; * Allow the number of live prediction threads to be adjusted with pixel classifiers; * Reduce the length of the server path used with pixel classifiers (could cause performance issues for some classifiers, e.g. Trees, with long JSON representations); * Add extra checks in DelaunayTools to reduce risk of trying to access a coordinate that isn't there",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/808
https://github.com/qupath/qupath/pull/808:139,Safety,predict,prediction,139,"* Further reduce memory use with ImageOps / ImageDataOp; * Fix multithreading ImageOps color deconvolution bug; * Allow the number of live prediction threads to be adjusted with pixel classifiers; * Reduce the length of the server path used with pixel classifiers (could cause performance issues for some classifiers, e.g. Trees, with long JSON representations); * Add extra checks in DelaunayTools to reduce risk of trying to access a coordinate that isn't there",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/808
https://github.com/qupath/qupath/pull/808:409,Safety,risk,risk,409,"* Further reduce memory use with ImageOps / ImageDataOp; * Fix multithreading ImageOps color deconvolution bug; * Allow the number of live prediction threads to be adjusted with pixel classifiers; * Reduce the length of the server path used with pixel classifiers (could cause performance issues for some classifiers, e.g. Trees, with long JSON representations); * Add extra checks in DelaunayTools to reduce risk of trying to access a coordinate that isn't there",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/808
https://github.com/qupath/qupath/pull/808:427,Security,access,access,427,"* Further reduce memory use with ImageOps / ImageDataOp; * Fix multithreading ImageOps color deconvolution bug; * Allow the number of live prediction threads to be adjusted with pixel classifiers; * Reduce the length of the server path used with pixel classifiers (could cause performance issues for some classifiers, e.g. Trees, with long JSON representations); * Add extra checks in DelaunayTools to reduce risk of trying to access a coordinate that isn't there",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/808
https://github.com/qupath/qupath/pull/809:0,Energy Efficiency,Reduce,Reduce,0,"Reduce support to single-input, single-output models for now, to avoid a strict requirement for input names to be correct.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/809
https://github.com/qupath/qupath/pull/809:65,Safety,avoid,avoid,65,"Reduce support to single-input, single-output models for now, to avoid a strict requirement for input names to be correct.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/809
https://github.com/qupath/qupath/pull/811:0,Safety,Avoid,Avoids,0,"Avoids use of default input name, in favor of whatever the prediction function can provide.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/811
https://github.com/qupath/qupath/pull/811:59,Safety,predict,prediction,59,"Avoids use of default input name, in favor of whatever the prediction function can provide.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/811
https://github.com/qupath/qupath/pull/814:58,Deployability,patch,patch-based,58,"The expectation is that this may be handy when training a patch-based classifier outside of QuPath. The API might need improved in the future if `TileExporter` is now trying to do too many things.; Also fix a `DnnTools` bug related to patch extraction.; In the future, the patch extraction code should really be moved to the same location, but here it is spread across two places (one working primarily with `BufferedImage`, one primarily with `Mat`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/814
https://github.com/qupath/qupath/pull/814:235,Deployability,patch,patch,235,"The expectation is that this may be handy when training a patch-based classifier outside of QuPath. The API might need improved in the future if `TileExporter` is now trying to do too many things.; Also fix a `DnnTools` bug related to patch extraction.; In the future, the patch extraction code should really be moved to the same location, but here it is spread across two places (one working primarily with `BufferedImage`, one primarily with `Mat`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/814
https://github.com/qupath/qupath/pull/814:273,Deployability,patch,patch,273,"The expectation is that this may be handy when training a patch-based classifier outside of QuPath. The API might need improved in the future if `TileExporter` is now trying to do too many things.; Also fix a `DnnTools` bug related to patch extraction.; In the future, the patch extraction code should really be moved to the same location, but here it is spread across two places (one working primarily with `BufferedImage`, one primarily with `Mat`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/814
https://github.com/qupath/qupath/issues/816:177,Deployability,release,release,177,"* [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**. Redundancy in if-else condition to throw IOException in [ImageWriteTools.java](https://github.com/qupath/qupath/blob/6b8bafc566356fe9b97770fb88227e9e768f14da/qupath-core/src/main/java/qupath/lib/images/writers/ImageWriterTools.java#L176). `		; ```; if (firstException == null && firstException == null); 			throw new IOException(""Unable to write "" + path + ""! No compatible writer found."");; 		else; 			throw new IOException(""Unable to write "" + path + ""!"", firstException);; 	}; ```; `. **Expected behavior**; A",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/816
https://github.com/qupath/qupath/issues/816:373,Deployability,release,release,373,"* [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**. Redundancy in if-else condition to throw IOException in [ImageWriteTools.java](https://github.com/qupath/qupath/blob/6b8bafc566356fe9b97770fb88227e9e768f14da/qupath-core/src/main/java/qupath/lib/images/writers/ImageWriterTools.java#L176). `		; ```; if (firstException == null && firstException == null); 			throw new IOException(""Unable to write "" + path + ""! No compatible writer found."");; 		else; 			throw new IOException(""Unable to write "" + path + ""!"", firstException);; 	}; ```; `. **Expected behavior**; A",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/816
https://github.com/qupath/qupath/issues/816:494,Safety,Redund,Redundancy,494,"* [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**. Redundancy in if-else condition to throw IOException in [ImageWriteTools.java](https://github.com/qupath/qupath/blob/6b8bafc566356fe9b97770fb88227e9e768f14da/qupath-core/src/main/java/qupath/lib/images/writers/ImageWriterTools.java#L176). `		; ```; if (firstException == null && firstException == null); 			throw new IOException(""Unable to write "" + path + ""! No compatible writer found."");; 		else; 			throw new IOException(""Unable to write "" + path + ""!"", firstException);; 	}; ```; `. **Expected behavior**; A",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/816
https://github.com/qupath/qupath/issues/818:168,Integrability,message,message,168,"## Bug report. **Describe the bug**; The manifest in `qupath-app` is missing a main class. When running; ```bash; java -jar ./qupath-app-0.3.0.jar ; ```; the following message is displayed; ```; no main manifest attribute, in ./qupath-app-0.3.0.jar; ```. **Expected behavior**; QuPath can be launched successfully with; ```bash; java -jar ./qupath-app-0.3.0.jar ; ```. **Desktop (please complete the following information):**; - QuPath Version 0.3.0. **Additional context**; Launching from the current directory is still possible with; ```bash; java -cp ""./*"" qupath.QuPath ; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/818
https://github.com/qupath/qupath/issues/819:505,Deployability,update,updates,505,"## Bug report. **Describe the bug**; While jumping between different TMA cores using arrows - the core name (e.g A1) does not change unless you make an additional gesture, such as move the picture, go over with a mouse cursor. **To Reproduce**; Steps to reproduce the behavior:; 1. Use disarrayed TMA; 2. Use right and left keys on the keyboard to move between cores (zoom on any core first); 3. Check the core name at the low right corner - it does not change!; 4. Move the cursor and then the core name updates. **Expected behavior**; Core name is correct when a core appears after using the keyboard only. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: Win10; - QuPath 0.3. **Additional context**; One can jump through many cores with arrows with the core name staying the same.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/819
https://github.com/qupath/qupath/issues/820:151,Integrability,interoperab,interoperability,151,"Hello,. Let me begin by thanking you for this nice application and for introducing the GeoJSON support for annotations.; My goal is to use GeoJSON for interoperability between my (Python-based) environment and QuPath. With this in mind, I generated some annotations for testing purposes and I realized that the coordinate system used in QuPath is based on a cropped (ROI) version of the level-0 image in the pyramid. ; Is there a way to save the annotations in whole image (level-0/native magnification) coordinates instead of ROI-based coordinates? Or, maybe, just save the ROI coordinates along with the annotations as a pseudo-annotation in GeoJSON?. Thanks a lot for all your work,. Vlad",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/820
https://github.com/qupath/qupath/issues/820:270,Testability,test,testing,270,"Hello,. Let me begin by thanking you for this nice application and for introducing the GeoJSON support for annotations.; My goal is to use GeoJSON for interoperability between my (Python-based) environment and QuPath. With this in mind, I generated some annotations for testing purposes and I realized that the coordinate system used in QuPath is based on a cropped (ROI) version of the level-0 image in the pyramid. ; Is there a way to save the annotations in whole image (level-0/native magnification) coordinates instead of ROI-based coordinates? Or, maybe, just save the ROI coordinates along with the annotations as a pseudo-annotation in GeoJSON?. Thanks a lot for all your work,. Vlad",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/820
https://github.com/qupath/qupath/issues/821:56,Availability,down,down,56,"## Bug report. **Describe the bug**; Pressing the up or down arrow keys can be used to navigate between slices of a z-stack within the QuPath viewer.; However, pressing once too often can result in moving one slice beyond the limit of the z-stack. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a z-stack in QuPath; 2. Navigate slices using up/down arrows; 3. Check z-position with a script, e.g. `getCurrentViewer().getZPosition()`. Another way to visualise this is to use a pixel classifier; the 'non-existent' z-slice won't display any classified overlay. **Expected behavior**; Viewer cannot move beyond the available z-slices. **Additional context**; Dragging the slider does not have this affect, which is caused by wrongly clipping valid z-positions to `server.nZSlices()` rather than `server.nZSlices() - 1`.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/821
https://github.com/qupath/qupath/issues/821:357,Availability,down,down,357,"## Bug report. **Describe the bug**; Pressing the up or down arrow keys can be used to navigate between slices of a z-stack within the QuPath viewer.; However, pressing once too often can result in moving one slice beyond the limit of the z-stack. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a z-stack in QuPath; 2. Navigate slices using up/down arrows; 3. Check z-position with a script, e.g. `getCurrentViewer().getZPosition()`. Another way to visualise this is to use a pixel classifier; the 'non-existent' z-slice won't display any classified overlay. **Expected behavior**; Viewer cannot move beyond the available z-slices. **Additional context**; Dragging the slider does not have this affect, which is caused by wrongly clipping valid z-positions to `server.nZSlices()` rather than `server.nZSlices() - 1`.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/821
https://github.com/qupath/qupath/issues/821:625,Availability,avail,available,625,"## Bug report. **Describe the bug**; Pressing the up or down arrow keys can be used to navigate between slices of a z-stack within the QuPath viewer.; However, pressing once too often can result in moving one slice beyond the limit of the z-stack. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a z-stack in QuPath; 2. Navigate slices using up/down arrows; 3. Check z-position with a script, e.g. `getCurrentViewer().getZPosition()`. Another way to visualise this is to use a pixel classifier; the 'non-existent' z-slice won't display any classified overlay. **Expected behavior**; Viewer cannot move beyond the available z-slices. **Additional context**; Dragging the slider does not have this affect, which is caused by wrongly clipping valid z-positions to `server.nZSlices()` rather than `server.nZSlices() - 1`.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/821
https://github.com/qupath/qupath/pull/823:79,Availability,down,downsample,79,"Trigger update to location text with any viewer movement, not just a change of downsample factor.; Fixes https://github.com/qupath/qupath/issues/819",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/823
https://github.com/qupath/qupath/pull/823:8,Deployability,update,update,8,"Trigger update to location text with any viewer movement, not just a change of downsample factor.; Fixes https://github.com/qupath/qupath/issues/819",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/823
https://github.com/qupath/qupath/issues/825:557,Availability,Error,Error,557,"## Bug report; QuPath 0.3 will not open on a CentOS 7 machine. Qupath 0.2.3 works fine in the same machine. I attach the full log. Steps to reproduce the behavior:; Execute the .sh file from the terminal. **Expected behavior**; To open the graphical interface. **Log**; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Sep 22, 2021 2:59:18 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @37052337'; *** Error in `/home/xxx/QuPath-0.3/bin/QuPath': free(): invalid pointer: 0x00007f726889bbc0 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81679)[0x7fa4aa191679]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7f7268605ed2]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7f7268606323]; /usr/lib64/libstdc++.so.6(+0x71295)[0x7f7268607295]; /lib64/libpthread.so.0(+0x61cb)[0x7fa4a9ad31cb]; /usr/lib64/libstdc++.so.6(+0x712e1)[0x7f72686072e1]; /usr/lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7f7268607323]; /usr/lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7f726860417c]; /usr/lib64/dri/swrast_dri.so(+0x85930)[0x7f726bbe8930]; /lib64/ld-linux-x86-64.so.2(+0xf973)[0x7fa4aa9f3973]; /lib64/ld-linux-x86-64.so.2(+0x1454e)[0x7fa4aa9f854e]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/ld-linux-x86-64.so.2(+0x13b3b)[0x7fa4aa9f7b3b]; /lib64/libdl.so.2(+0xeeb)[0x7fa4aa7e0eeb]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/libdl.so.2(+0x14ed)[0x7fa4aa7e14ed]; /lib64/libdl.so.2(dlopen+0x31)[0x7fa4aa7e0f81]; /lib64/libGLX_system.so.0(+0x4444c)[0x7f726ecdd44c]; /lib64/libGLX_system.so.0(+0x4374a)[0x7f726ecdc74a]; /lib64/libGLX_system.so.0(+0x1f138)[0x7f726ecb8138]; /lib64/libGLX_system.so.0(+0x1a9d2)[0x7f726ecb39d2]; /lib64/libGLX_system.so.0(+0x1b7c6)[0x7f726ecb47c6]; /lib64/libGLX.so.0(glXChooseFBConfig+0x31)[0x7f726f5df6b1]; /home/xxx/.op",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/825
https://github.com/qupath/qupath/issues/825:374,Deployability,release,release,374,"## Bug report; QuPath 0.3 will not open on a CentOS 7 machine. Qupath 0.2.3 works fine in the same machine. I attach the full log. Steps to reproduce the behavior:; Execute the .sh file from the terminal. **Expected behavior**; To open the graphical interface. **Log**; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Sep 22, 2021 2:59:18 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @37052337'; *** Error in `/home/xxx/QuPath-0.3/bin/QuPath': free(): invalid pointer: 0x00007f726889bbc0 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81679)[0x7fa4aa191679]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7f7268605ed2]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7f7268606323]; /usr/lib64/libstdc++.so.6(+0x71295)[0x7f7268607295]; /lib64/libpthread.so.0(+0x61cb)[0x7fa4a9ad31cb]; /usr/lib64/libstdc++.so.6(+0x712e1)[0x7f72686072e1]; /usr/lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7f7268607323]; /usr/lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7f726860417c]; /usr/lib64/dri/swrast_dri.so(+0x85930)[0x7f726bbe8930]; /lib64/ld-linux-x86-64.so.2(+0xf973)[0x7fa4aa9f3973]; /lib64/ld-linux-x86-64.so.2(+0x1454e)[0x7fa4aa9f854e]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/ld-linux-x86-64.so.2(+0x13b3b)[0x7fa4aa9f7b3b]; /lib64/libdl.so.2(+0xeeb)[0x7fa4aa7e0eeb]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/libdl.so.2(+0x14ed)[0x7fa4aa7e14ed]; /lib64/libdl.so.2(dlopen+0x31)[0x7fa4aa7e0f81]; /lib64/libGLX_system.so.0(+0x4444c)[0x7f726ecdd44c]; /lib64/libGLX_system.so.0(+0x4374a)[0x7f726ecdc74a]; /lib64/libGLX_system.so.0(+0x1f138)[0x7f726ecb8138]; /lib64/libGLX_system.so.0(+0x1a9d2)[0x7f726ecb39d2]; /lib64/libGLX_system.so.0(+0x1b7c6)[0x7f726ecb47c6]; /lib64/libGLX.so.0(glXChooseFBConfig+0x31)[0x7f726f5df6b1]; /home/xxx/.op",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/825
https://github.com/qupath/qupath/issues/825:485,Deployability,configurat,configuration,485,"## Bug report; QuPath 0.3 will not open on a CentOS 7 machine. Qupath 0.2.3 works fine in the same machine. I attach the full log. Steps to reproduce the behavior:; Execute the .sh file from the terminal. **Expected behavior**; To open the graphical interface. **Log**; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Sep 22, 2021 2:59:18 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @37052337'; *** Error in `/home/xxx/QuPath-0.3/bin/QuPath': free(): invalid pointer: 0x00007f726889bbc0 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81679)[0x7fa4aa191679]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7f7268605ed2]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7f7268606323]; /usr/lib64/libstdc++.so.6(+0x71295)[0x7f7268607295]; /lib64/libpthread.so.0(+0x61cb)[0x7fa4a9ad31cb]; /usr/lib64/libstdc++.so.6(+0x712e1)[0x7f72686072e1]; /usr/lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7f7268607323]; /usr/lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7f726860417c]; /usr/lib64/dri/swrast_dri.so(+0x85930)[0x7f726bbe8930]; /lib64/ld-linux-x86-64.so.2(+0xf973)[0x7fa4aa9f3973]; /lib64/ld-linux-x86-64.so.2(+0x1454e)[0x7fa4aa9f854e]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/ld-linux-x86-64.so.2(+0x13b3b)[0x7fa4aa9f7b3b]; /lib64/libdl.so.2(+0xeeb)[0x7fa4aa7e0eeb]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/libdl.so.2(+0x14ed)[0x7fa4aa7e14ed]; /lib64/libdl.so.2(dlopen+0x31)[0x7fa4aa7e0f81]; /lib64/libGLX_system.so.0(+0x4444c)[0x7f726ecdd44c]; /lib64/libGLX_system.so.0(+0x4374a)[0x7f726ecdc74a]; /lib64/libGLX_system.so.0(+0x1f138)[0x7f726ecb8138]; /lib64/libGLX_system.so.0(+0x1a9d2)[0x7f726ecb39d2]; /lib64/libGLX_system.so.0(+0x1b7c6)[0x7f726ecb47c6]; /lib64/libGLX.so.0(glXChooseFBConfig+0x31)[0x7f726f5df6b1]; /home/xxx/.op",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/825
https://github.com/qupath/qupath/issues/825:250,Integrability,interface,interface,250,"## Bug report; QuPath 0.3 will not open on a CentOS 7 machine. Qupath 0.2.3 works fine in the same machine. I attach the full log. Steps to reproduce the behavior:; Execute the .sh file from the terminal. **Expected behavior**; To open the graphical interface. **Log**; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Sep 22, 2021 2:59:18 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @37052337'; *** Error in `/home/xxx/QuPath-0.3/bin/QuPath': free(): invalid pointer: 0x00007f726889bbc0 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81679)[0x7fa4aa191679]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7f7268605ed2]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7f7268606323]; /usr/lib64/libstdc++.so.6(+0x71295)[0x7f7268607295]; /lib64/libpthread.so.0(+0x61cb)[0x7fa4a9ad31cb]; /usr/lib64/libstdc++.so.6(+0x712e1)[0x7f72686072e1]; /usr/lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7f7268607323]; /usr/lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7f726860417c]; /usr/lib64/dri/swrast_dri.so(+0x85930)[0x7f726bbe8930]; /lib64/ld-linux-x86-64.so.2(+0xf973)[0x7fa4aa9f3973]; /lib64/ld-linux-x86-64.so.2(+0x1454e)[0x7fa4aa9f854e]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/ld-linux-x86-64.so.2(+0x13b3b)[0x7fa4aa9f7b3b]; /lib64/libdl.so.2(+0xeeb)[0x7fa4aa7e0eeb]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/libdl.so.2(+0x14ed)[0x7fa4aa7e14ed]; /lib64/libdl.so.2(dlopen+0x31)[0x7fa4aa7e0f81]; /lib64/libGLX_system.so.0(+0x4444c)[0x7f726ecdd44c]; /lib64/libGLX_system.so.0(+0x4374a)[0x7f726ecdc74a]; /lib64/libGLX_system.so.0(+0x1f138)[0x7f726ecb8138]; /lib64/libGLX_system.so.0(+0x1a9d2)[0x7f726ecb39d2]; /lib64/libGLX_system.so.0(+0x1b7c6)[0x7f726ecb47c6]; /lib64/libGLX.so.0(glXChooseFBConfig+0x31)[0x7f726f5df6b1]; /home/xxx/.op",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/825
https://github.com/qupath/qupath/issues/825:485,Modifiability,config,configuration,485,"## Bug report; QuPath 0.3 will not open on a CentOS 7 machine. Qupath 0.2.3 works fine in the same machine. I attach the full log. Steps to reproduce the behavior:; Execute the .sh file from the terminal. **Expected behavior**; To open the graphical interface. **Log**; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Sep 22, 2021 2:59:18 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @37052337'; *** Error in `/home/xxx/QuPath-0.3/bin/QuPath': free(): invalid pointer: 0x00007f726889bbc0 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81679)[0x7fa4aa191679]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7f7268605ed2]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7f7268606323]; /usr/lib64/libstdc++.so.6(+0x71295)[0x7f7268607295]; /lib64/libpthread.so.0(+0x61cb)[0x7fa4a9ad31cb]; /usr/lib64/libstdc++.so.6(+0x712e1)[0x7f72686072e1]; /usr/lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7f7268607323]; /usr/lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7f726860417c]; /usr/lib64/dri/swrast_dri.so(+0x85930)[0x7f726bbe8930]; /lib64/ld-linux-x86-64.so.2(+0xf973)[0x7fa4aa9f3973]; /lib64/ld-linux-x86-64.so.2(+0x1454e)[0x7fa4aa9f854e]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/ld-linux-x86-64.so.2(+0x13b3b)[0x7fa4aa9f7b3b]; /lib64/libdl.so.2(+0xeeb)[0x7fa4aa7e0eeb]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/libdl.so.2(+0x14ed)[0x7fa4aa7e14ed]; /lib64/libdl.so.2(dlopen+0x31)[0x7fa4aa7e0f81]; /lib64/libGLX_system.so.0(+0x4444c)[0x7f726ecdd44c]; /lib64/libGLX_system.so.0(+0x4374a)[0x7f726ecdc74a]; /lib64/libGLX_system.so.0(+0x1f138)[0x7f726ecb8138]; /lib64/libGLX_system.so.0(+0x1a9d2)[0x7f726ecb39d2]; /lib64/libGLX_system.so.0(+0x1b7c6)[0x7f726ecb47c6]; /lib64/libGLX.so.0(glXChooseFBConfig+0x31)[0x7f726f5df6b1]; /home/xxx/.op",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/825
https://github.com/qupath/qupath/issues/825:513,Performance,load,loaded,513,"## Bug report; QuPath 0.3 will not open on a CentOS 7 machine. Qupath 0.2.3 works fine in the same machine. I attach the full log. Steps to reproduce the behavior:; Execute the .sh file from the terminal. **Expected behavior**; To open the graphical interface. **Log**; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Sep 22, 2021 2:59:18 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @37052337'; *** Error in `/home/xxx/QuPath-0.3/bin/QuPath': free(): invalid pointer: 0x00007f726889bbc0 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81679)[0x7fa4aa191679]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7f7268605ed2]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7f7268606323]; /usr/lib64/libstdc++.so.6(+0x71295)[0x7f7268607295]; /lib64/libpthread.so.0(+0x61cb)[0x7fa4a9ad31cb]; /usr/lib64/libstdc++.so.6(+0x712e1)[0x7f72686072e1]; /usr/lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7f7268607323]; /usr/lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7f726860417c]; /usr/lib64/dri/swrast_dri.so(+0x85930)[0x7f726bbe8930]; /lib64/ld-linux-x86-64.so.2(+0xf973)[0x7fa4aa9f3973]; /lib64/ld-linux-x86-64.so.2(+0x1454e)[0x7fa4aa9f854e]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/ld-linux-x86-64.so.2(+0x13b3b)[0x7fa4aa9f7b3b]; /lib64/libdl.so.2(+0xeeb)[0x7fa4aa7e0eeb]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/libdl.so.2(+0x14ed)[0x7fa4aa7e14ed]; /lib64/libdl.so.2(dlopen+0x31)[0x7fa4aa7e0f81]; /lib64/libGLX_system.so.0(+0x4444c)[0x7f726ecdd44c]; /lib64/libGLX_system.so.0(+0x4374a)[0x7f726ecdc74a]; /lib64/libGLX_system.so.0(+0x1f138)[0x7f726ecb8138]; /lib64/libGLX_system.so.0(+0x1a9d2)[0x7f726ecb39d2]; /lib64/libGLX_system.so.0(+0x1b7c6)[0x7f726ecb47c6]; /lib64/libGLX.so.0(glXChooseFBConfig+0x31)[0x7f726f5df6b1]; /home/xxx/.op",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/825
https://github.com/qupath/qupath/issues/825:2007,Performance,cache,cache,2007,ib64/libstdc++.so.6(+0x712e1)[0x7f72686072e1]; /usr/lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7f7268607323]; /usr/lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7f726860417c]; /usr/lib64/dri/swrast_dri.so(+0x85930)[0x7f726bbe8930]; /lib64/ld-linux-x86-64.so.2(+0xf973)[0x7fa4aa9f3973]; /lib64/ld-linux-x86-64.so.2(+0x1454e)[0x7fa4aa9f854e]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/ld-linux-x86-64.so.2(+0x13b3b)[0x7fa4aa9f7b3b]; /lib64/libdl.so.2(+0xeeb)[0x7fa4aa7e0eeb]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/libdl.so.2(+0x14ed)[0x7fa4aa7e14ed]; /lib64/libdl.so.2(dlopen+0x31)[0x7fa4aa7e0f81]; /lib64/libGLX_system.so.0(+0x4444c)[0x7f726ecdd44c]; /lib64/libGLX_system.so.0(+0x4374a)[0x7f726ecdc74a]; /lib64/libGLX_system.so.0(+0x1f138)[0x7f726ecb8138]; /lib64/libGLX_system.so.0(+0x1a9d2)[0x7f726ecb39d2]; /lib64/libGLX_system.so.0(+0x1b7c6)[0x7f726ecb47c6]; /lib64/libGLX.so.0(glXChooseFBConfig+0x31)[0x7f726f5df6b1]; /home/xxx/.openjfx/cache/16/libprism_es2.so(Java_com_sun_prism_es2_X11GLFactory_nInitialize+0xa4)[0x7f72d01fb2d4]; [0x7fa492426bbb]; ======= Memory map: ========; 80000000-80020000 rw-p 00000000 00:00 0 ; 80020000-80040000 rw-p 00000000 00:00 0 ; 80040000-800c0000 rw-p 00000000 00:00 0 ; 800c0000-80140000 rw-p 00000000 00:00 0 ; 80140000-801c0000 rw-p 00000000 00:00 0 ; 801c0000-80200000 rw-p 00000000 00:00 0 ; 80200000-80220000 rw-p 00000000 00:00 0 ; 80220000-80240000 ---p 00000000 00:00 0 ; 80240000-80250000 rw-p 00000000 00:00 0 ; 80250000-c0000000 ---p 00000000 00:00 0 ; 55f52014d000-55f52025b000 r-xp 00000000 00:d4 7777221080545788605 /home/xxx/QuPath-0.3/bin/QuPath; 55f52045b000-55f520463000 r--p 0010e000 00:d4 7777221080545788605 /home/xxx/QuPath-0.3/bin/QuPath; 55f520463000-55f520464000 rw-p 00116000 00:d4 7777221080545788605 /home/xxx/QuPath-0.3/bin/QuPath; 55f520464000-55f520467000 rw-p 00000000 00:00 0 ; 55f521999000-55f5219cb000 rw-p 00000000 00:00 0 [heap]; 7f7268380000-7f7268395000 r-xp 00000000 ,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/825
https://github.com/qupath/qupath/issues/825:16572,Performance,cache,cache,16572,p 00000000 00:00 0 ; 7f72ac000000-7f72ac021000 rw-p 00000000 00:00 0 ; 7f72ac021000-7f72b0000000 ---p 00000000 00:00 0 ; 7f72b0000000-7f72b0021000 rw-p 00000000 00:00 0 ; 7f72b0021000-7f72b4000000 ---p 00000000 00:00 0 ; 7f72b4000000-7f72b496c000 rw-p 00000000 00:00 0 ; 7f72b496c000-7f72b8000000 ---p 00000000 00:00 0 ; 7f72b8000000-7f72b8021000 rw-p 00000000 00:00 0 ; 7f72b8021000-7f72bc000000 ---p 00000000 00:00 0 ; 7f72bc000000-7f72bc021000 rw-p 00000000 00:00 0 ; 7f72bc021000-7f72c0000000 ---p 00000000 00:00 0 ; 7f72c0000000-7f72c0021000 rw-p 00000000 00:00 0 ; 7f72c0021000-7f72c4000000 ---p 00000000 00:00 0 ; 7f72c4000000-7f72c4021000 rw-p 00000000 00:00 0 ; 7f72c4021000-7f72c8000000 ---p 00000000 00:00 0 ; 7f72c8000000-7f72c8021000 rw-p 00000000 00:00 0 ; 7f72c8021000-7f72cc000000 ---p 00000000 00:00 0 ; 7f72cc000000-7f72cc021000 rw-p 00000000 00:00 0 ; 7f72cc021000-7f72d0000000 ---p 00000000 00:00 0 ; 7f72d01f3000-7f72d01ff000 r-xp 00000000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d01ff000-7f72d03fe000 ---p 0000c000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d03fe000-7f72d03ff000 r--p 0000b000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d03ff000-7f72d0400000 rw-p 0000c000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d0400000-7f72d0500000 rw-p 00000000 00:00 0 ; 7f72d0500000-7f72d05a0000 rw-p 00000000 00:00 0 ; 7f72d05a0000-7f72d0600000 ---p 00000000 00:00 0 ; 7f72d0600000-7f72d0630000 rw-p 00000000 00:00 0 ; 7f72d0630000-7f72d0c00000 ---p 00000000 00:00 0 ; 7f72d0cf9000-7f72d0cfd000 ---p 00000000 00:00 0 ; 7f72d0cfd000-7f72d0dfa000 rw-p 00000000 00:00 0 ; 7f72d0dfa000-7f72d0dfe000 ---p 00000000 00:00 0 ; 7f72d0dfe000-7f72d0efb000 rw-p 00000000 00:00 0 ; 7f72d0efb000-7f72d0eff000 ---p 00000000 00:00 0 ; 7f72d0eff000-7f72d0ffc000 rw-p 00000000 00:00 0 ; 7f72d0ffc000-7f72d1000000 ---p 00000000 00:00 0 ; 7f72d1000000-7f72d10fd000 rw-p 00000000 00:00 0 ; 7f72d10fd000-7f72d1101000 ---p 000000,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/825
https://github.com/qupath/qupath/issues/825:16670,Performance,cache,cache,16670,--p 00000000 00:00 0 ; 7f72b0000000-7f72b0021000 rw-p 00000000 00:00 0 ; 7f72b0021000-7f72b4000000 ---p 00000000 00:00 0 ; 7f72b4000000-7f72b496c000 rw-p 00000000 00:00 0 ; 7f72b496c000-7f72b8000000 ---p 00000000 00:00 0 ; 7f72b8000000-7f72b8021000 rw-p 00000000 00:00 0 ; 7f72b8021000-7f72bc000000 ---p 00000000 00:00 0 ; 7f72bc000000-7f72bc021000 rw-p 00000000 00:00 0 ; 7f72bc021000-7f72c0000000 ---p 00000000 00:00 0 ; 7f72c0000000-7f72c0021000 rw-p 00000000 00:00 0 ; 7f72c0021000-7f72c4000000 ---p 00000000 00:00 0 ; 7f72c4000000-7f72c4021000 rw-p 00000000 00:00 0 ; 7f72c4021000-7f72c8000000 ---p 00000000 00:00 0 ; 7f72c8000000-7f72c8021000 rw-p 00000000 00:00 0 ; 7f72c8021000-7f72cc000000 ---p 00000000 00:00 0 ; 7f72cc000000-7f72cc021000 rw-p 00000000 00:00 0 ; 7f72cc021000-7f72d0000000 ---p 00000000 00:00 0 ; 7f72d01f3000-7f72d01ff000 r-xp 00000000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d01ff000-7f72d03fe000 ---p 0000c000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d03fe000-7f72d03ff000 r--p 0000b000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d03ff000-7f72d0400000 rw-p 0000c000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d0400000-7f72d0500000 rw-p 00000000 00:00 0 ; 7f72d0500000-7f72d05a0000 rw-p 00000000 00:00 0 ; 7f72d05a0000-7f72d0600000 ---p 00000000 00:00 0 ; 7f72d0600000-7f72d0630000 rw-p 00000000 00:00 0 ; 7f72d0630000-7f72d0c00000 ---p 00000000 00:00 0 ; 7f72d0cf9000-7f72d0cfd000 ---p 00000000 00:00 0 ; 7f72d0cfd000-7f72d0dfa000 rw-p 00000000 00:00 0 ; 7f72d0dfa000-7f72d0dfe000 ---p 00000000 00:00 0 ; 7f72d0dfe000-7f72d0efb000 rw-p 00000000 00:00 0 ; 7f72d0efb000-7f72d0eff000 ---p 00000000 00:00 0 ; 7f72d0eff000-7f72d0ffc000 rw-p 00000000 00:00 0 ; 7f72d0ffc000-7f72d1000000 ---p 00000000 00:00 0 ; 7f72d1000000-7f72d10fd000 rw-p 00000000 00:00 0 ; 7f72d10fd000-7f72d1101000 ---p 00000000 00:00 0 ; 7f72d1101000-7f72d11fe000 rw-p 00000000 00:00 0 ; 7f72d11fe000-7f72d1202000 ---p 0000,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/825
https://github.com/qupath/qupath/issues/825:16768,Performance,cache,cache,16768, ---p 00000000 00:00 0 ; 7f72b4000000-7f72b496c000 rw-p 00000000 00:00 0 ; 7f72b496c000-7f72b8000000 ---p 00000000 00:00 0 ; 7f72b8000000-7f72b8021000 rw-p 00000000 00:00 0 ; 7f72b8021000-7f72bc000000 ---p 00000000 00:00 0 ; 7f72bc000000-7f72bc021000 rw-p 00000000 00:00 0 ; 7f72bc021000-7f72c0000000 ---p 00000000 00:00 0 ; 7f72c0000000-7f72c0021000 rw-p 00000000 00:00 0 ; 7f72c0021000-7f72c4000000 ---p 00000000 00:00 0 ; 7f72c4000000-7f72c4021000 rw-p 00000000 00:00 0 ; 7f72c4021000-7f72c8000000 ---p 00000000 00:00 0 ; 7f72c8000000-7f72c8021000 rw-p 00000000 00:00 0 ; 7f72c8021000-7f72cc000000 ---p 00000000 00:00 0 ; 7f72cc000000-7f72cc021000 rw-p 00000000 00:00 0 ; 7f72cc021000-7f72d0000000 ---p 00000000 00:00 0 ; 7f72d01f3000-7f72d01ff000 r-xp 00000000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d01ff000-7f72d03fe000 ---p 0000c000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d03fe000-7f72d03ff000 r--p 0000b000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d03ff000-7f72d0400000 rw-p 0000c000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d0400000-7f72d0500000 rw-p 00000000 00:00 0 ; 7f72d0500000-7f72d05a0000 rw-p 00000000 00:00 0 ; 7f72d05a0000-7f72d0600000 ---p 00000000 00:00 0 ; 7f72d0600000-7f72d0630000 rw-p 00000000 00:00 0 ; 7f72d0630000-7f72d0c00000 ---p 00000000 00:00 0 ; 7f72d0cf9000-7f72d0cfd000 ---p 00000000 00:00 0 ; 7f72d0cfd000-7f72d0dfa000 rw-p 00000000 00:00 0 ; 7f72d0dfa000-7f72d0dfe000 ---p 00000000 00:00 0 ; 7f72d0dfe000-7f72d0efb000 rw-p 00000000 00:00 0 ; 7f72d0efb000-7f72d0eff000 ---p 00000000 00:00 0 ; 7f72d0eff000-7f72d0ffc000 rw-p 00000000 00:00 0 ; 7f72d0ffc000-7f72d1000000 ---p 00000000 00:00 0 ; 7f72d1000000-7f72d10fd000 rw-p 00000000 00:00 0 ; 7f72d10fd000-7f72d1101000 ---p 00000000 00:00 0 ; 7f72d1101000-7f72d11fe000 rw-p 00000000 00:00 0 ; 7f72d11fe000-7f72d1202000 ---p 00000000 00:00 0 ; 7f72d1202000-7f72d12ff000 rw-p 00000000 00:00 0 ; 7f72d12ff000-7f72d1303000 ---p 00,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/825
https://github.com/qupath/qupath/issues/825:16866,Performance,cache,cache,16866,00 ---p 00000000 00:00 0 ; 7f72b8000000-7f72b8021000 rw-p 00000000 00:00 0 ; 7f72b8021000-7f72bc000000 ---p 00000000 00:00 0 ; 7f72bc000000-7f72bc021000 rw-p 00000000 00:00 0 ; 7f72bc021000-7f72c0000000 ---p 00000000 00:00 0 ; 7f72c0000000-7f72c0021000 rw-p 00000000 00:00 0 ; 7f72c0021000-7f72c4000000 ---p 00000000 00:00 0 ; 7f72c4000000-7f72c4021000 rw-p 00000000 00:00 0 ; 7f72c4021000-7f72c8000000 ---p 00000000 00:00 0 ; 7f72c8000000-7f72c8021000 rw-p 00000000 00:00 0 ; 7f72c8021000-7f72cc000000 ---p 00000000 00:00 0 ; 7f72cc000000-7f72cc021000 rw-p 00000000 00:00 0 ; 7f72cc021000-7f72d0000000 ---p 00000000 00:00 0 ; 7f72d01f3000-7f72d01ff000 r-xp 00000000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d01ff000-7f72d03fe000 ---p 0000c000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d03fe000-7f72d03ff000 r--p 0000b000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d03ff000-7f72d0400000 rw-p 0000c000 00:27 484015 /home/xxx/.openjfx/cache/16/libprism_es2.so; 7f72d0400000-7f72d0500000 rw-p 00000000 00:00 0 ; 7f72d0500000-7f72d05a0000 rw-p 00000000 00:00 0 ; 7f72d05a0000-7f72d0600000 ---p 00000000 00:00 0 ; 7f72d0600000-7f72d0630000 rw-p 00000000 00:00 0 ; 7f72d0630000-7f72d0c00000 ---p 00000000 00:00 0 ; 7f72d0cf9000-7f72d0cfd000 ---p 00000000 00:00 0 ; 7f72d0cfd000-7f72d0dfa000 rw-p 00000000 00:00 0 ; 7f72d0dfa000-7f72d0dfe000 ---p 00000000 00:00 0 ; 7f72d0dfe000-7f72d0efb000 rw-p 00000000 00:00 0 ; 7f72d0efb000-7f72d0eff000 ---p 00000000 00:00 0 ; 7f72d0eff000-7f72d0ffc000 rw-p 00000000 00:00 0 ; 7f72d0ffc000-7f72d1000000 ---p 00000000 00:00 0 ; 7f72d1000000-7f72d10fd000 rw-p 00000000 00:00 0 ; 7f72d10fd000-7f72d1101000 ---p 00000000 00:00 0 ; 7f72d1101000-7f72d11fe000 rw-p 00000000 00:00 0 ; 7f72d11fe000-7f72d1202000 ---p 00000000 00:00 0 ; 7f72d1202000-7f72d12ff000 rw-p 00000000 00:00 0 ; 7f72d12ff000-7f72d1303000 ---p 00000000 00:00 0 ; 7f72d1303000-7f72d14c0000 rw-p 00000000 00:00 0 ; 7f72d14c0000-7f72d1500000 rw-p ,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/825
https://github.com/qupath/qupath/issues/825:29586,Safety,Abort,Aborted,29586,"-2.17.so; 7fa4aa4d3000-7fa4aa4d7000 r--p 001c3000 00:27 2499 /usr/lib64/libc-2.17.so; 7fa4aa4d7000-7fa4aa4d9000 rw-p 001c7000 00:27 2499 /usr/lib64/libc-2.17.so; 7fa4aa4d9000-7fa4aa4de000 rw-p 00000000 00:00 0 ; 7fa4aa4de000-7fa4aa5df000 r-xp 00000000 00:27 2613 /usr/lib64/libm-2.17.so; 7fa4aa5df000-7fa4aa7de000 ---p 00101000 00:27 2613 /usr/lib64/libm-2.17.so; 7fa4aa7de000-7fa4aa7df000 r--p 00100000 00:27 2613 /usr/lib64/libm-2.17.so; 7fa4aa7df000-7fa4aa7e0000 rw-p 00101000 00:27 2613 /usr/lib64/libm-2.17.so; 7fa4aa7e0000-7fa4aa7e2000 r-xp 00000000 00:27 2528 /usr/lib64/libdl-2.17.so; 7fa4aa7e2000-7fa4aa9e2000 ---p 00002000 00:27 2528 /usr/lib64/libdl-2.17.so; 7fa4aa9e2000-7fa4aa9e3000 r--p 00002000 00:27 2528 /usr/lib64/libdl-2.17.so; 7fa4aa9e3000-7fa4aa9e4000 rw-p 00003000 00:27 2528 /usr/lib64/libdl-2.17.so; 7fa4aa9e4000-7fa4aaa06000 r-xp 00000000 00:27 2475 /usr/lib64/ld-2.17.so; 7fa4aaa0d000-7fa4aaae1000 rw-p 00000000 00:00 0 ; 7fa4aaae1000-7fa4aaae9000 ---p 00000000 00:00 0 ; 7fa4aaae9000-7fa4aaaed000 ---p 00000000 00:00 0 ; 7fa4aaaed000-7fa4aabee000 rw-p 00000000 00:00 0 ; 7fa4aabf8000-7fa4aabf9000 rw-p 00000000 00:00 0 ; 7fa4aabf9000-7fa4aac01000 rw-s 00000000 00:d6 7895008 /tmp/hsperfdata_xxx/19036; 7fa4aac01000-7fa4aac02000 ---p 00000000 00:00 0 ; 7fa4aac02000-7fa4aac03000 r--p 00000000 00:00 0 ; 7fa4aac03000-7fa4aac04000 ---p 00000000 00:00 0 ; 7fa4aac04000-7fa4aac05000 rw-p 00000000 00:00 0 ; 7fa4aac05000-7fa4aac06000 r--p 00021000 00:27 2475 /usr/lib64/ld-2.17.so; 7fa4aac06000-7fa4aac07000 rw-p 00022000 00:27 2475 /usr/lib64/ld-2.17.so; 7fa4aac07000-7fa4aac08000 rw-p 00000000 00:00 0 ; 7ffd463f8000-7ffd46422000 rw-p 00000000 00:00 0 [stack]; 7ffd465a9000-7ffd465ac000 r--p 00000000 00:00 0 [vvar]; 7ffd465ac000-7ffd465ae000 r-xp 00000000 00:00 0 [vdso]; ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall]; /home/xxx/QuPath-0.3/bin/QuPath.sh: line 5: 19036 Aborted ""$DIR/QuPath"" ""$@"". **Desktop :**; - OS: CentOS 7; - QuPath Version [e.g. 0.3]",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/825
https://github.com/qupath/qupath/issues/825:321,Security,access,access,321,"## Bug report; QuPath 0.3 will not open on a CentOS 7 machine. Qupath 0.2.3 works fine in the same machine. I attach the full log. Steps to reproduce the behavior:; Execute the .sh file from the terminal. **Expected behavior**; To open the graphical interface. **Log**; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Sep 22, 2021 2:59:18 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @37052337'; *** Error in `/home/xxx/QuPath-0.3/bin/QuPath': free(): invalid pointer: 0x00007f726889bbc0 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81679)[0x7fa4aa191679]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7f7268605ed2]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7f7268606323]; /usr/lib64/libstdc++.so.6(+0x71295)[0x7f7268607295]; /lib64/libpthread.so.0(+0x61cb)[0x7fa4a9ad31cb]; /usr/lib64/libstdc++.so.6(+0x712e1)[0x7f72686072e1]; /usr/lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7f7268607323]; /usr/lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7f726860417c]; /usr/lib64/dri/swrast_dri.so(+0x85930)[0x7f726bbe8930]; /lib64/ld-linux-x86-64.so.2(+0xf973)[0x7fa4aa9f3973]; /lib64/ld-linux-x86-64.so.2(+0x1454e)[0x7fa4aa9f854e]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/ld-linux-x86-64.so.2(+0x13b3b)[0x7fa4aa9f7b3b]; /lib64/libdl.so.2(+0xeeb)[0x7fa4aa7e0eeb]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/libdl.so.2(+0x14ed)[0x7fa4aa7e14ed]; /lib64/libdl.so.2(dlopen+0x31)[0x7fa4aa7e0f81]; /lib64/libGLX_system.so.0(+0x4444c)[0x7f726ecdd44c]; /lib64/libGLX_system.so.0(+0x4374a)[0x7f726ecdc74a]; /lib64/libGLX_system.so.0(+0x1f138)[0x7f726ecb8138]; /lib64/libGLX_system.so.0(+0x1a9d2)[0x7f726ecb39d2]; /lib64/libGLX_system.so.0(+0x1b7c6)[0x7f726ecb47c6]; /lib64/libGLX.so.0(glXChooseFBConfig+0x31)[0x7f726f5df6b1]; /home/xxx/.op",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/825
https://github.com/qupath/qupath/issues/825:126,Testability,log,log,126,"## Bug report; QuPath 0.3 will not open on a CentOS 7 machine. Qupath 0.2.3 works fine in the same machine. I attach the full log. Steps to reproduce the behavior:; Execute the .sh file from the terminal. **Expected behavior**; To open the graphical interface. **Log**; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Sep 22, 2021 2:59:18 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @37052337'; *** Error in `/home/xxx/QuPath-0.3/bin/QuPath': free(): invalid pointer: 0x00007f726889bbc0 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81679)[0x7fa4aa191679]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7f7268605ed2]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7f7268606323]; /usr/lib64/libstdc++.so.6(+0x71295)[0x7f7268607295]; /lib64/libpthread.so.0(+0x61cb)[0x7fa4a9ad31cb]; /usr/lib64/libstdc++.so.6(+0x712e1)[0x7f72686072e1]; /usr/lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7f7268607323]; /usr/lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7f726860417c]; /usr/lib64/dri/swrast_dri.so(+0x85930)[0x7f726bbe8930]; /lib64/ld-linux-x86-64.so.2(+0xf973)[0x7fa4aa9f3973]; /lib64/ld-linux-x86-64.so.2(+0x1454e)[0x7fa4aa9f854e]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/ld-linux-x86-64.so.2(+0x13b3b)[0x7fa4aa9f7b3b]; /lib64/libdl.so.2(+0xeeb)[0x7fa4aa7e0eeb]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/libdl.so.2(+0x14ed)[0x7fa4aa7e14ed]; /lib64/libdl.so.2(dlopen+0x31)[0x7fa4aa7e0f81]; /lib64/libGLX_system.so.0(+0x4444c)[0x7f726ecdd44c]; /lib64/libGLX_system.so.0(+0x4374a)[0x7f726ecdc74a]; /lib64/libGLX_system.so.0(+0x1f138)[0x7f726ecb8138]; /lib64/libGLX_system.so.0(+0x1a9d2)[0x7f726ecb39d2]; /lib64/libGLX_system.so.0(+0x1b7c6)[0x7f726ecb47c6]; /lib64/libGLX.so.0(glXChooseFBConfig+0x31)[0x7f726f5df6b1]; /home/xxx/.op",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/825
https://github.com/qupath/qupath/issues/825:263,Testability,Log,Log,263,"## Bug report; QuPath 0.3 will not open on a CentOS 7 machine. Qupath 0.2.3 works fine in the same machine. I attach the full log. Steps to reproduce the behavior:; Execute the .sh file from the terminal. **Expected behavior**; To open the graphical interface. **Log**; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Sep 22, 2021 2:59:18 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @37052337'; *** Error in `/home/xxx/QuPath-0.3/bin/QuPath': free(): invalid pointer: 0x00007f726889bbc0 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81679)[0x7fa4aa191679]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7f7268605ed2]; /usr/lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7f7268606323]; /usr/lib64/libstdc++.so.6(+0x71295)[0x7f7268607295]; /lib64/libpthread.so.0(+0x61cb)[0x7fa4a9ad31cb]; /usr/lib64/libstdc++.so.6(+0x712e1)[0x7f72686072e1]; /usr/lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7f7268607323]; /usr/lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7f726860417c]; /usr/lib64/dri/swrast_dri.so(+0x85930)[0x7f726bbe8930]; /lib64/ld-linux-x86-64.so.2(+0xf973)[0x7fa4aa9f3973]; /lib64/ld-linux-x86-64.so.2(+0x1454e)[0x7fa4aa9f854e]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/ld-linux-x86-64.so.2(+0x13b3b)[0x7fa4aa9f7b3b]; /lib64/libdl.so.2(+0xeeb)[0x7fa4aa7e0eeb]; /lib64/ld-linux-x86-64.so.2(+0xf784)[0x7fa4aa9f3784]; /lib64/libdl.so.2(+0x14ed)[0x7fa4aa7e14ed]; /lib64/libdl.so.2(dlopen+0x31)[0x7fa4aa7e0f81]; /lib64/libGLX_system.so.0(+0x4444c)[0x7f726ecdd44c]; /lib64/libGLX_system.so.0(+0x4374a)[0x7f726ecdc74a]; /lib64/libGLX_system.so.0(+0x1f138)[0x7f726ecb8138]; /lib64/libGLX_system.so.0(+0x1a9d2)[0x7f726ecb39d2]; /lib64/libGLX_system.so.0(+0x1b7c6)[0x7f726ecb47c6]; /lib64/libGLX.so.0(glXChooseFBConfig+0x31)[0x7f726f5df6b1]; /home/xxx/.op",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/825
https://github.com/qupath/qupath/issues/826:73,Safety,detect,detection,73,"**Describe the bug**; Panning around an image with a high number of cell detection objects will result in minor lag due to 100% CPU usage of a single processor, even if the object opacity slider is set to 0. . **To Reproduce**; Steps to reproduce the behavior:; 1. Run a cell detection (StarDist was used in the video demo below); 2. Click on 'Show Detections'; 3. Set the detection opacity slider to 0; 4. Pan around, observe minor lag; 5. uncheck 'Show Detections', note lag is no longer present. **Expected behavior**; Panning around with the opacity slider set to 0 should behave as if 'Show Detections' was disabled, however it seems like the objects are still being rendered. **Screenshots**; Video demonstration: https://www.youtube.com/watch?v=QKxKfBYyoB8. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.3.0 with CUDA. **Additional context**; Issue impacts QoL very slightly, but I'm curious if the lag is more disruptive/noticeable on lower-end machines. If it's not, then might not be something worth spending the time to fix.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/826
https://github.com/qupath/qupath/issues/826:276,Safety,detect,detection,276,"**Describe the bug**; Panning around an image with a high number of cell detection objects will result in minor lag due to 100% CPU usage of a single processor, even if the object opacity slider is set to 0. . **To Reproduce**; Steps to reproduce the behavior:; 1. Run a cell detection (StarDist was used in the video demo below); 2. Click on 'Show Detections'; 3. Set the detection opacity slider to 0; 4. Pan around, observe minor lag; 5. uncheck 'Show Detections', note lag is no longer present. **Expected behavior**; Panning around with the opacity slider set to 0 should behave as if 'Show Detections' was disabled, however it seems like the objects are still being rendered. **Screenshots**; Video demonstration: https://www.youtube.com/watch?v=QKxKfBYyoB8. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.3.0 with CUDA. **Additional context**; Issue impacts QoL very slightly, but I'm curious if the lag is more disruptive/noticeable on lower-end machines. If it's not, then might not be something worth spending the time to fix.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/826
https://github.com/qupath/qupath/issues/826:349,Safety,Detect,Detections,349,"**Describe the bug**; Panning around an image with a high number of cell detection objects will result in minor lag due to 100% CPU usage of a single processor, even if the object opacity slider is set to 0. . **To Reproduce**; Steps to reproduce the behavior:; 1. Run a cell detection (StarDist was used in the video demo below); 2. Click on 'Show Detections'; 3. Set the detection opacity slider to 0; 4. Pan around, observe minor lag; 5. uncheck 'Show Detections', note lag is no longer present. **Expected behavior**; Panning around with the opacity slider set to 0 should behave as if 'Show Detections' was disabled, however it seems like the objects are still being rendered. **Screenshots**; Video demonstration: https://www.youtube.com/watch?v=QKxKfBYyoB8. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.3.0 with CUDA. **Additional context**; Issue impacts QoL very slightly, but I'm curious if the lag is more disruptive/noticeable on lower-end machines. If it's not, then might not be something worth spending the time to fix.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/826
https://github.com/qupath/qupath/issues/826:373,Safety,detect,detection,373,"**Describe the bug**; Panning around an image with a high number of cell detection objects will result in minor lag due to 100% CPU usage of a single processor, even if the object opacity slider is set to 0. . **To Reproduce**; Steps to reproduce the behavior:; 1. Run a cell detection (StarDist was used in the video demo below); 2. Click on 'Show Detections'; 3. Set the detection opacity slider to 0; 4. Pan around, observe minor lag; 5. uncheck 'Show Detections', note lag is no longer present. **Expected behavior**; Panning around with the opacity slider set to 0 should behave as if 'Show Detections' was disabled, however it seems like the objects are still being rendered. **Screenshots**; Video demonstration: https://www.youtube.com/watch?v=QKxKfBYyoB8. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.3.0 with CUDA. **Additional context**; Issue impacts QoL very slightly, but I'm curious if the lag is more disruptive/noticeable on lower-end machines. If it's not, then might not be something worth spending the time to fix.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/826
https://github.com/qupath/qupath/issues/826:455,Safety,Detect,Detections,455,"**Describe the bug**; Panning around an image with a high number of cell detection objects will result in minor lag due to 100% CPU usage of a single processor, even if the object opacity slider is set to 0. . **To Reproduce**; Steps to reproduce the behavior:; 1. Run a cell detection (StarDist was used in the video demo below); 2. Click on 'Show Detections'; 3. Set the detection opacity slider to 0; 4. Pan around, observe minor lag; 5. uncheck 'Show Detections', note lag is no longer present. **Expected behavior**; Panning around with the opacity slider set to 0 should behave as if 'Show Detections' was disabled, however it seems like the objects are still being rendered. **Screenshots**; Video demonstration: https://www.youtube.com/watch?v=QKxKfBYyoB8. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.3.0 with CUDA. **Additional context**; Issue impacts QoL very slightly, but I'm curious if the lag is more disruptive/noticeable on lower-end machines. If it's not, then might not be something worth spending the time to fix.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/826
https://github.com/qupath/qupath/issues/826:596,Safety,Detect,Detections,596,"**Describe the bug**; Panning around an image with a high number of cell detection objects will result in minor lag due to 100% CPU usage of a single processor, even if the object opacity slider is set to 0. . **To Reproduce**; Steps to reproduce the behavior:; 1. Run a cell detection (StarDist was used in the video demo below); 2. Click on 'Show Detections'; 3. Set the detection opacity slider to 0; 4. Pan around, observe minor lag; 5. uncheck 'Show Detections', note lag is no longer present. **Expected behavior**; Panning around with the opacity slider set to 0 should behave as if 'Show Detections' was disabled, however it seems like the objects are still being rendered. **Screenshots**; Video demonstration: https://www.youtube.com/watch?v=QKxKfBYyoB8. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.3.0 with CUDA. **Additional context**; Issue impacts QoL very slightly, but I'm curious if the lag is more disruptive/noticeable on lower-end machines. If it's not, then might not be something worth spending the time to fix.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/826
https://github.com/qupath/qupath/pull/827:0,Performance,Optimiz,Optimized,0,Optimized version gives me about 1 minute less processing time for StarDist on OS-3.ndpi. Proposed to use histogram calculation to compute percentiles. Valid only for RGB images (`[0-256)` pixels range).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/827
https://github.com/qupath/qupath/issues/828:155,Availability,error,error,155,"**Describe the bug**; Create a box annotation of the entire slide and run positive cell detection. Some slides work fine, others seem to just stop with no error. . **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Analyze' -> Cell Detection ->Positive Cell Detection; 2. Accept defaults.; 3. Runs with no errors. . **Expected behavior**; A full slide with every cell detected and classified. . **Screenshots**; ![image](https://user-images.githubusercontent.com/14006401/135633690-717d4fc9-6010-4de6-b235-54bd3dc98ea6.png). **Desktop (please complete the following information):**; - OS: Windows, 64GB RAM, 32 core processor, Nvidia GTX1060 with CUDA 11.1 installed.; - QuPath Version 3.0. **Additional context**; RAM usage at around 60%, ; No plugins loaded after initial install.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/828
https://github.com/qupath/qupath/issues/828:317,Availability,error,errors,317,"**Describe the bug**; Create a box annotation of the entire slide and run positive cell detection. Some slides work fine, others seem to just stop with no error. . **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Analyze' -> Cell Detection ->Positive Cell Detection; 2. Accept defaults.; 3. Runs with no errors. . **Expected behavior**; A full slide with every cell detected and classified. . **Screenshots**; ![image](https://user-images.githubusercontent.com/14006401/135633690-717d4fc9-6010-4de6-b235-54bd3dc98ea6.png). **Desktop (please complete the following information):**; - OS: Windows, 64GB RAM, 32 core processor, Nvidia GTX1060 with CUDA 11.1 installed.; - QuPath Version 3.0. **Additional context**; RAM usage at around 60%, ; No plugins loaded after initial install.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/828
https://github.com/qupath/qupath/issues/828:668,Deployability,install,installed,668,"**Describe the bug**; Create a box annotation of the entire slide and run positive cell detection. Some slides work fine, others seem to just stop with no error. . **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Analyze' -> Cell Detection ->Positive Cell Detection; 2. Accept defaults.; 3. Runs with no errors. . **Expected behavior**; A full slide with every cell detected and classified. . **Screenshots**; ![image](https://user-images.githubusercontent.com/14006401/135633690-717d4fc9-6010-4de6-b235-54bd3dc98ea6.png). **Desktop (please complete the following information):**; - OS: Windows, 64GB RAM, 32 core processor, Nvidia GTX1060 with CUDA 11.1 installed.; - QuPath Version 3.0. **Additional context**; RAM usage at around 60%, ; No plugins loaded after initial install.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/828
https://github.com/qupath/qupath/issues/828:785,Deployability,install,install,785,"**Describe the bug**; Create a box annotation of the entire slide and run positive cell detection. Some slides work fine, others seem to just stop with no error. . **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Analyze' -> Cell Detection ->Positive Cell Detection; 2. Accept defaults.; 3. Runs with no errors. . **Expected behavior**; A full slide with every cell detected and classified. . **Screenshots**; ![image](https://user-images.githubusercontent.com/14006401/135633690-717d4fc9-6010-4de6-b235-54bd3dc98ea6.png). **Desktop (please complete the following information):**; - OS: Windows, 64GB RAM, 32 core processor, Nvidia GTX1060 with CUDA 11.1 installed.; - QuPath Version 3.0. **Additional context**; RAM usage at around 60%, ; No plugins loaded after initial install.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/828
https://github.com/qupath/qupath/issues/828:756,Modifiability,plugin,plugins,756,"**Describe the bug**; Create a box annotation of the entire slide and run positive cell detection. Some slides work fine, others seem to just stop with no error. . **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Analyze' -> Cell Detection ->Positive Cell Detection; 2. Accept defaults.; 3. Runs with no errors. . **Expected behavior**; A full slide with every cell detected and classified. . **Screenshots**; ![image](https://user-images.githubusercontent.com/14006401/135633690-717d4fc9-6010-4de6-b235-54bd3dc98ea6.png). **Desktop (please complete the following information):**; - OS: Windows, 64GB RAM, 32 core processor, Nvidia GTX1060 with CUDA 11.1 installed.; - QuPath Version 3.0. **Additional context**; RAM usage at around 60%, ; No plugins loaded after initial install.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/828
https://github.com/qupath/qupath/issues/828:764,Performance,load,loaded,764,"**Describe the bug**; Create a box annotation of the entire slide and run positive cell detection. Some slides work fine, others seem to just stop with no error. . **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Analyze' -> Cell Detection ->Positive Cell Detection; 2. Accept defaults.; 3. Runs with no errors. . **Expected behavior**; A full slide with every cell detected and classified. . **Screenshots**; ![image](https://user-images.githubusercontent.com/14006401/135633690-717d4fc9-6010-4de6-b235-54bd3dc98ea6.png). **Desktop (please complete the following information):**; - OS: Windows, 64GB RAM, 32 core processor, Nvidia GTX1060 with CUDA 11.1 installed.; - QuPath Version 3.0. **Additional context**; RAM usage at around 60%, ; No plugins loaded after initial install.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/828
https://github.com/qupath/qupath/issues/828:88,Safety,detect,detection,88,"**Describe the bug**; Create a box annotation of the entire slide and run positive cell detection. Some slides work fine, others seem to just stop with no error. . **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Analyze' -> Cell Detection ->Positive Cell Detection; 2. Accept defaults.; 3. Runs with no errors. . **Expected behavior**; A full slide with every cell detected and classified. . **Screenshots**; ![image](https://user-images.githubusercontent.com/14006401/135633690-717d4fc9-6010-4de6-b235-54bd3dc98ea6.png). **Desktop (please complete the following information):**; - OS: Windows, 64GB RAM, 32 core processor, Nvidia GTX1060 with CUDA 11.1 installed.; - QuPath Version 3.0. **Additional context**; RAM usage at around 60%, ; No plugins loaded after initial install.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/828
https://github.com/qupath/qupath/issues/828:243,Safety,Detect,Detection,243,"**Describe the bug**; Create a box annotation of the entire slide and run positive cell detection. Some slides work fine, others seem to just stop with no error. . **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Analyze' -> Cell Detection ->Positive Cell Detection; 2. Accept defaults.; 3. Runs with no errors. . **Expected behavior**; A full slide with every cell detected and classified. . **Screenshots**; ![image](https://user-images.githubusercontent.com/14006401/135633690-717d4fc9-6010-4de6-b235-54bd3dc98ea6.png). **Desktop (please complete the following information):**; - OS: Windows, 64GB RAM, 32 core processor, Nvidia GTX1060 with CUDA 11.1 installed.; - QuPath Version 3.0. **Additional context**; RAM usage at around 60%, ; No plugins loaded after initial install.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/828
https://github.com/qupath/qupath/issues/828:269,Safety,Detect,Detection,269,"**Describe the bug**; Create a box annotation of the entire slide and run positive cell detection. Some slides work fine, others seem to just stop with no error. . **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Analyze' -> Cell Detection ->Positive Cell Detection; 2. Accept defaults.; 3. Runs with no errors. . **Expected behavior**; A full slide with every cell detected and classified. . **Screenshots**; ![image](https://user-images.githubusercontent.com/14006401/135633690-717d4fc9-6010-4de6-b235-54bd3dc98ea6.png). **Desktop (please complete the following information):**; - OS: Windows, 64GB RAM, 32 core processor, Nvidia GTX1060 with CUDA 11.1 installed.; - QuPath Version 3.0. **Additional context**; RAM usage at around 60%, ; No plugins loaded after initial install.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/828
https://github.com/qupath/qupath/issues/828:379,Safety,detect,detected,379,"**Describe the bug**; Create a box annotation of the entire slide and run positive cell detection. Some slides work fine, others seem to just stop with no error. . **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Analyze' -> Cell Detection ->Positive Cell Detection; 2. Accept defaults.; 3. Runs with no errors. . **Expected behavior**; A full slide with every cell detected and classified. . **Screenshots**; ![image](https://user-images.githubusercontent.com/14006401/135633690-717d4fc9-6010-4de6-b235-54bd3dc98ea6.png). **Desktop (please complete the following information):**; - OS: Windows, 64GB RAM, 32 core processor, Nvidia GTX1060 with CUDA 11.1 installed.; - QuPath Version 3.0. **Additional context**; RAM usage at around 60%, ; No plugins loaded after initial install.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/828
https://github.com/qupath/qupath/issues/829:229,Deployability,update,updated,229,"## Bug report; I am processing TMA images in QuPath.; I had already created some "".qpmap"" files to record the unique ID of each sample hole in QuPath 0.2.3 and they worked well by drag and drop in Qupath viewer.; Recently, I had updated 0.3.0, and the old "".qpmap"" file can't drag and drop at the viewer, but give an ""Import images to project"" window.; I have checked the same "".qpmap"" file and the same project in 0.2.3. **To Reproduce**; Drag the qpmap file and drop in viewer of QuPath 0.3.0. **Expected behavior**; Unique ID of TMA in qpmap will import into qupath project. **Screenshots**; If applicable, add screenshots to help explain your problem.; ![Snipaste_2021-10-03_19-41-49](https://user-images.githubusercontent.com/24513381/135752248-62825d4b-4e51-484d-8d75-544a06dd7df1.jpg). **Desktop (please complete the following information):**; - OS: Windows 10 21H1; - QuPath Version 0.3.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/829
https://github.com/qupath/qupath/issues/831:305,Deployability,Update,Update,305,"Dear Pete,; My machine config: 16core CPU + 64G RAM, assign 60G for qpath to use; I am using qpath to analyze WSIs with 1 million to 3 million cells. When I trained object classifier, the qpath is freezing while the usage of CPU is about 1 CPU and the usage of RAM is about 15G of 64G after clicking Live Update. Seems that Qpath has issue on using computing resourses.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/831
https://github.com/qupath/qupath/issues/831:23,Modifiability,config,config,23,"Dear Pete,; My machine config: 16core CPU + 64G RAM, assign 60G for qpath to use; I am using qpath to analyze WSIs with 1 million to 3 million cells. When I trained object classifier, the qpath is freezing while the usage of CPU is about 1 CPU and the usage of RAM is about 15G of 64G after clicking Live Update. Seems that Qpath has issue on using computing resourses.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/831
https://github.com/qupath/qupath/issues/832:29,Availability,error,error,29,"I keep getting the following error while installing QuPath on MacOS Big Sur v 11.6.; Nothing shows up in the security settings, so it's not the normal case of being blocked and needing to approve installation in settings.; What can be done?. Thanks; <img width=""438"" alt=""Screen Shot 2021-10-21 at 9 36 33 AM"" src=""https://user-images.githubusercontent.com/11299568/138761171-413c2c15-f636-49cf-9f2a-ca22deca134c.png"">",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/832
https://github.com/qupath/qupath/issues/832:41,Deployability,install,installing,41,"I keep getting the following error while installing QuPath on MacOS Big Sur v 11.6.; Nothing shows up in the security settings, so it's not the normal case of being blocked and needing to approve installation in settings.; What can be done?. Thanks; <img width=""438"" alt=""Screen Shot 2021-10-21 at 9 36 33 AM"" src=""https://user-images.githubusercontent.com/11299568/138761171-413c2c15-f636-49cf-9f2a-ca22deca134c.png"">",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/832
https://github.com/qupath/qupath/issues/832:196,Deployability,install,installation,196,"I keep getting the following error while installing QuPath on MacOS Big Sur v 11.6.; Nothing shows up in the security settings, so it's not the normal case of being blocked and needing to approve installation in settings.; What can be done?. Thanks; <img width=""438"" alt=""Screen Shot 2021-10-21 at 9 36 33 AM"" src=""https://user-images.githubusercontent.com/11299568/138761171-413c2c15-f636-49cf-9f2a-ca22deca134c.png"">",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/832
https://github.com/qupath/qupath/issues/832:109,Security,secur,security,109,"I keep getting the following error while installing QuPath on MacOS Big Sur v 11.6.; Nothing shows up in the security settings, so it's not the normal case of being blocked and needing to approve installation in settings.; What can be done?. Thanks; <img width=""438"" alt=""Screen Shot 2021-10-21 at 9 36 33 AM"" src=""https://user-images.githubusercontent.com/11299568/138761171-413c2c15-f636-49cf-9f2a-ca22deca134c.png"">",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/832
https://github.com/qupath/qupath/issues/834:8,Availability,error,error,8,"![qpath error](https://user-images.githubusercontent.com/93468785/139575561-68c59679-13b1-47bb-ac60-265c55da2c7a.jpg). Good morning,. Qpath won't open some of my JPEG files. When I try to do so, an out of memory error pops up. I have tried to decrease the number of parallel threads as suggested, but the issue persists. The involved files are larger than 100 MB, have been compressed and sent to me via TransferNow. Thank you for your attention.; Gianluca",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/834
https://github.com/qupath/qupath/issues/834:212,Availability,error,error,212,"![qpath error](https://user-images.githubusercontent.com/93468785/139575561-68c59679-13b1-47bb-ac60-265c55da2c7a.jpg). Good morning,. Qpath won't open some of my JPEG files. When I try to do so, an out of memory error pops up. I have tried to decrease the number of parallel threads as suggested, but the issue persists. The involved files are larger than 100 MB, have been compressed and sent to me via TransferNow. Thank you for your attention.; Gianluca",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/834
https://github.com/qupath/qupath/pull/835:43,Safety,detect,detections,43,"### Reason for change. - Previously, only 'detections' supported importing measurements from GeoJSON, as the `measurementList` is ignored for annotations; - This fixes this, allowing measurements to be imported from a GeoJSON file. ### Changes. - Measurements are now not ignored when creating annotations; - Before this, measurements were fetched but not actually used in `PathObjects.createAnnotationObject`; - This does not change behaviour when the `measurements` array is not provided for a feature; - `measurementList` is `null` initially, and only populated if `measurements` is in the GeoJSON; - The previous code didn't pass in any list, which calls the overloaded `PathObjects.createAnnotationObject`, which just returns `createAnnotationObject(roi, pathClass, null);` anyway; - This means code-flow is unchanged if `measurements` are not provided. ### Images. #### Custom measurements extracted from GeoJSON:; ![image](https://user-images.githubusercontent.com/38670946/139694740-375af432-4cd4-4e56-90f6-57dd7be8970d.png); ![image](https://user-images.githubusercontent.com/38670946/139695945-1d0af088-ff6a-4287-8951-e3fe81f3c59f.png). ### Testing. - Works perfectly fine with GeoJSON files that create annotations both with and without a `measurements` field; - Example GeoJSON file I used for testing: https://pastebin.com/trYDYLXM; - Tested this file with and without the `measurements`",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/835
https://github.com/qupath/qupath/pull/835:1151,Testability,Test,Testing,1151,"### Reason for change. - Previously, only 'detections' supported importing measurements from GeoJSON, as the `measurementList` is ignored for annotations; - This fixes this, allowing measurements to be imported from a GeoJSON file. ### Changes. - Measurements are now not ignored when creating annotations; - Before this, measurements were fetched but not actually used in `PathObjects.createAnnotationObject`; - This does not change behaviour when the `measurements` array is not provided for a feature; - `measurementList` is `null` initially, and only populated if `measurements` is in the GeoJSON; - The previous code didn't pass in any list, which calls the overloaded `PathObjects.createAnnotationObject`, which just returns `createAnnotationObject(roi, pathClass, null);` anyway; - This means code-flow is unchanged if `measurements` are not provided. ### Images. #### Custom measurements extracted from GeoJSON:; ![image](https://user-images.githubusercontent.com/38670946/139694740-375af432-4cd4-4e56-90f6-57dd7be8970d.png); ![image](https://user-images.githubusercontent.com/38670946/139695945-1d0af088-ff6a-4287-8951-e3fe81f3c59f.png). ### Testing. - Works perfectly fine with GeoJSON files that create annotations both with and without a `measurements` field; - Example GeoJSON file I used for testing: https://pastebin.com/trYDYLXM; - Tested this file with and without the `measurements`",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/835
https://github.com/qupath/qupath/pull/835:1306,Testability,test,testing,1306,"### Reason for change. - Previously, only 'detections' supported importing measurements from GeoJSON, as the `measurementList` is ignored for annotations; - This fixes this, allowing measurements to be imported from a GeoJSON file. ### Changes. - Measurements are now not ignored when creating annotations; - Before this, measurements were fetched but not actually used in `PathObjects.createAnnotationObject`; - This does not change behaviour when the `measurements` array is not provided for a feature; - `measurementList` is `null` initially, and only populated if `measurements` is in the GeoJSON; - The previous code didn't pass in any list, which calls the overloaded `PathObjects.createAnnotationObject`, which just returns `createAnnotationObject(roi, pathClass, null);` anyway; - This means code-flow is unchanged if `measurements` are not provided. ### Images. #### Custom measurements extracted from GeoJSON:; ![image](https://user-images.githubusercontent.com/38670946/139694740-375af432-4cd4-4e56-90f6-57dd7be8970d.png); ![image](https://user-images.githubusercontent.com/38670946/139695945-1d0af088-ff6a-4287-8951-e3fe81f3c59f.png). ### Testing. - Works perfectly fine with GeoJSON files that create annotations both with and without a `measurements` field; - Example GeoJSON file I used for testing: https://pastebin.com/trYDYLXM; - Tested this file with and without the `measurements`",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/835
https://github.com/qupath/qupath/pull/835:1348,Testability,Test,Tested,1348,"### Reason for change. - Previously, only 'detections' supported importing measurements from GeoJSON, as the `measurementList` is ignored for annotations; - This fixes this, allowing measurements to be imported from a GeoJSON file. ### Changes. - Measurements are now not ignored when creating annotations; - Before this, measurements were fetched but not actually used in `PathObjects.createAnnotationObject`; - This does not change behaviour when the `measurements` array is not provided for a feature; - `measurementList` is `null` initially, and only populated if `measurements` is in the GeoJSON; - The previous code didn't pass in any list, which calls the overloaded `PathObjects.createAnnotationObject`, which just returns `createAnnotationObject(roi, pathClass, null);` anyway; - This means code-flow is unchanged if `measurements` are not provided. ### Images. #### Custom measurements extracted from GeoJSON:; ![image](https://user-images.githubusercontent.com/38670946/139694740-375af432-4cd4-4e56-90f6-57dd7be8970d.png); ![image](https://user-images.githubusercontent.com/38670946/139695945-1d0af088-ff6a-4287-8951-e3fe81f3c59f.png). ### Testing. - Works perfectly fine with GeoJSON files that create annotations both with and without a `measurements` field; - Example GeoJSON file I used for testing: https://pastebin.com/trYDYLXM; - Tested this file with and without the `measurements`",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/835
https://github.com/qupath/qupath/issues/836:881,Availability,error,error,881,"## Bug report. **Describe the bug**; When using *Add intensity features*, the parameters are determined by the *first* image that is opened.; They are not reset when later opening other images. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with two different types of image (or fluorescence images with different channel names); 2. Open one image, then choose *Add intensity features*, check the channel options, and close the dialog again; 3. Open another image, then check options under *Add intensity features*; 4. See that the channel names are unchanged. **Expected behavior**; Channels (and any other relevant parameters) are updated for the current image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version v0.3.0 (and probably earlier). **Additional context**; See https://forum.image.sc/t/add-intensity-feature-error/59602. Simply removing `parametersInitialized` [here](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/lib/algorithms/IntensityFeaturesPlugin.java#L655) might be sufficient, but this needs a bit more exploration.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/836
https://github.com/qupath/qupath/issues/836:658,Deployability,update,updated,658,"## Bug report. **Describe the bug**; When using *Add intensity features*, the parameters are determined by the *first* image that is opened.; They are not reset when later opening other images. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with two different types of image (or fluorescence images with different channel names); 2. Open one image, then choose *Add intensity features*, check the channel options, and close the dialog again; 3. Open another image, then check options under *Add intensity features*; 4. See that the channel names are unchanged. **Expected behavior**; Channels (and any other relevant parameters) are updated for the current image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version v0.3.0 (and probably earlier). **Additional context**; See https://forum.image.sc/t/add-intensity-feature-error/59602. Simply removing `parametersInitialized` [here](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/lib/algorithms/IntensityFeaturesPlugin.java#L655) might be sufficient, but this needs a bit more exploration.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/836
https://github.com/qupath/qupath/issues/836:894,Usability,Simpl,Simply,894,"## Bug report. **Describe the bug**; When using *Add intensity features*, the parameters are determined by the *first* image that is opened.; They are not reset when later opening other images. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with two different types of image (or fluorescence images with different channel names); 2. Open one image, then choose *Add intensity features*, check the channel options, and close the dialog again; 3. Open another image, then check options under *Add intensity features*; 4. See that the channel names are unchanged. **Expected behavior**; Channels (and any other relevant parameters) are updated for the current image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version v0.3.0 (and probably earlier). **Additional context**; See https://forum.image.sc/t/add-intensity-feature-error/59602. Simply removing `parametersInitialized` [here](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/lib/algorithms/IntensityFeaturesPlugin.java#L655) might be sufficient, but this needs a bit more exploration.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/836
https://github.com/qupath/qupath/issues/838:738,Usability,simpl,simple,738,"## Bug report. **Describe the bug**; When using multichannel .tif output with `TileExporter`, an RGB image is provided instead. **To Reproduce**; See https://forum.image.sc/t/exporting-tiles-multichanneloutput-true-i-think-broken-in-v0-3-0/58891 for details. **Expected behavior**; A multichannel binary tiff is written instead. **Desktop (please complete the following information):**; - OS: All platforms; - QuPath Version 0.3.0. **Additional context**; Likely caused by a combination of `ensureSize` fixing tiles [here](https://github.com/qupath/qupath/blob/96caafb0f62b283e87304e24871469d70b0e13f3/qupath-core/src/main/java/qupath/lib/images/writers/TileExporter.java#L780), then triggering the `BufferedImage` being converted in too simple a way [here](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/imagej/images/writers/AbstractWriterIJ.java#L101). The current workaround is to use ome.tif instead.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/838
https://github.com/qupath/qupath/issues/841:54,Deployability,release,released,54,"## Bug report. **Describe the bug**; GPU memory isn't released when using a `DnnModel` repeatedly. This can be seen when using StarDist. **To Reproduce**; See https://github.com/qupath/qupath-extension-stardist/issues/11; Copied here because the fix may need to be implemented within the core, rather than the StarDist extension. **Expected behavior**; GPU memory released after processing is complete. **Desktop (please complete the following information):**; - OS: Likely any with CUDA (Windows, Linux); - QuPath v0.3.0. **Additional context**; I guess a blob may need to be reset... or something. Although that may be tricky to achieve if allowing multithreading and trying not to unduly harm performance (or perhaps it won't be).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/841
https://github.com/qupath/qupath/issues/841:364,Deployability,release,released,364,"## Bug report. **Describe the bug**; GPU memory isn't released when using a `DnnModel` repeatedly. This can be seen when using StarDist. **To Reproduce**; See https://github.com/qupath/qupath-extension-stardist/issues/11; Copied here because the fix may need to be implemented within the core, rather than the StarDist extension. **Expected behavior**; GPU memory released after processing is complete. **Desktop (please complete the following information):**; - OS: Likely any with CUDA (Windows, Linux); - QuPath v0.3.0. **Additional context**; I guess a blob may need to be reset... or something. Although that may be tricky to achieve if allowing multithreading and trying not to unduly harm performance (or perhaps it won't be).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/841
https://github.com/qupath/qupath/issues/841:696,Performance,perform,performance,696,"## Bug report. **Describe the bug**; GPU memory isn't released when using a `DnnModel` repeatedly. This can be seen when using StarDist. **To Reproduce**; See https://github.com/qupath/qupath-extension-stardist/issues/11; Copied here because the fix may need to be implemented within the core, rather than the StarDist extension. **Expected behavior**; GPU memory released after processing is complete. **Desktop (please complete the following information):**; - OS: Likely any with CUDA (Windows, Linux); - QuPath v0.3.0. **Additional context**; I guess a blob may need to be reset... or something. Although that may be tricky to achieve if allowing multithreading and trying not to unduly harm performance (or perhaps it won't be).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/841
https://github.com/qupath/qupath/pull/842:2,Modifiability,Refactor,Refactored,2,"- Refactored `ProjectBrowser`, which now uses `ProjectTreeRow` objects to display info about projects, tags and project entries.; - Project entry thumbnails are now generated in the background (only the thumbnails of the currently visible project entries will be generated).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/842
https://github.com/qupath/qupath/issues/843:905,Deployability,update,updated,905,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/brightness-contrast-settings-issue/60054 and especially https://forum.image.sc/t/brightness-contrast-settings-issue/60054/5. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a new project, ensuring that the image type is not set (but 'Auto-set' is used for the image type); 2. Add two multichannel images with the same channel names (e.g. LuCa 1x1 and 3x3); 3. Open one image, and change the color of a channel in the Brightness/Contrast dialog - ensuring that 'Keep settings' is selected; 4. Open the other image - and see that the channel color has been lost. **Expected behavior**; Channel colors are retained if 'Keep settings' is selected. **Desktop (please complete the following information):**; - QuPath v0.3.0. **Additional context**; It appears the colors are set correctly... then overridden when the image type is updated.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/843
https://github.com/qupath/qupath/pull/844:131,Deployability,update,update,131,"Aims to fix https://github.com/qupath/qupath/issues/843; Synchronization is performed in QuPathViewer and does not fire a property update (should it?). In the end, may be preferable to separate and simplify this logic.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/844
https://github.com/qupath/qupath/pull/844:57,Integrability,Synchroniz,Synchronization,57,"Aims to fix https://github.com/qupath/qupath/issues/843; Synchronization is performed in QuPathViewer and does not fire a property update (should it?). In the end, may be preferable to separate and simplify this logic.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/844
https://github.com/qupath/qupath/pull/844:76,Performance,perform,performed,76,"Aims to fix https://github.com/qupath/qupath/issues/843; Synchronization is performed in QuPathViewer and does not fire a property update (should it?). In the end, may be preferable to separate and simplify this logic.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/844
https://github.com/qupath/qupath/pull/844:212,Testability,log,logic,212,"Aims to fix https://github.com/qupath/qupath/issues/843; Synchronization is performed in QuPathViewer and does not fire a property update (should it?). In the end, may be preferable to separate and simplify this logic.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/844
https://github.com/qupath/qupath/pull/844:198,Usability,simpl,simplify,198,"Aims to fix https://github.com/qupath/qupath/issues/843; Synchronization is performed in QuPathViewer and does not fire a property update (should it?). In the end, may be preferable to separate and simplify this logic.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/844
https://github.com/qupath/qupath/issues/845:196,Safety,detect,detection,196,"## Bug report. **Describe the bug**; See https://github.com/qupath/qupath/pull/835 from @jameshball. In summary, measurement lists are only included by `PathObjectTypeAdapters` when deserialising detection objects, as can be seen in the code from https://github.com/qupath/qupath/blob/v0.3.0/qupath-core/src/main/java/qupath/lib/io/PathObjectTypeAdapters.java#L412. A second, more subtle bug is that when measurement lists *are* retained, their type can be changed. This is not expected to have any major effect beyond efficiency, but could potentially be important in some situations. **To Reproduce**; Run the following script:; ```groovy; def roi = ROIs.createRectangleROI(0, 10, 20, 30, ImagePlane.getDefaultPlane()); def annotation = PathObjects.createAnnotationObject(roi); annotation.setName(""Original""); annotation.setPathClass(getPathClass(""My custom class"")); annotation.getMeasurementList().addMeasurement(""First measurement"", 1.0); annotation.getMeasurementList().addMeasurement(""Second measurement"", -2.0). def json = GsonTools.getInstance(true).toJson(annotation). // Print original annotation, class and measurement list; println ""ORIGINAL""; println annotation; println annotation.getPathClass(); println annotation.getMeasurementList().class; println annotation.getMeasurementList(); println ""----------------"". // Print deserialized annotation, class and measurement list; def newAnnotation = GsonTools.getInstance().fromJson(json, PathObject); println ""FROM JSON""; println newAnnotation; println newAnnotation.getPathClass(); println newAnnotation.getMeasurementList().class; println newAnnotation.getMeasurementList(); ```. The new annotation does not have any measurements in QuPath v0.3.0. Moreover, switching to use `PathObjects.createDetectionObject(roi)` reveals that the measurements *are* retained, but the class of the measurement list is changed from `FloatList` to `DoubleList` - requiring more memory. **Expected behavior**; As much information as possible is retained wh",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/845
https://github.com/qupath/qupath/issues/847:423,Integrability,depend,depending,423,"## Bug report. **Describe the bug**; When using the annotation list (under the 'Annotations' tab), pressing backspace or delete doesn't do anything. If *feels* like it should. To actually delete any objects, a user needs to either press the 'Delete' button below the list, or click on the viewer to activate it. This feels cumbersome, and can result in accidentally changing the selection or drawing something in a viewer, depending upon what tool may be selected at the time. **To Reproduce**; Steps to reproduce the behavior:; 1. Draw some annotations; 2. Click inside the annotations list to activate it (and select something); 3. Press backspace; 4. Observe... nothing really. **Expected behavior**; Backspace or delete should work for the list. **Desktop (please complete the following information):**; - QuPath v0.3.0 (and earlier). **Additional context**; Issue highlighted by @tp81 at https://github.com/qupath/qupath/pull/830",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/847
https://github.com/qupath/qupath/pull/848:108,Usability,simpl,simpler,108,"See https://github.com/qupath/qupath/issues/847 and https://github.com/qupath/qupath/pull/830. This takes a simpler approach than https://github.com/qupath/qupath/pull/830 by just triggering the *Delete* button below the list. This matches the behavior of Ctrl+A, which acts like 'the *Select all* button.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/848
https://github.com/qupath/qupath/pull/849:7,Deployability,update,update,7,"JavaFX update is included based on changelog, since it may fix issues such as #833. Build scripts now have *extremely* provisional and experimental support for both Apple Silicon and 32-bit Windows. To use either, it is necessary to build with a compatible JDK and (probably) skip specifying a toolchain, e.g. with; ```; ./gradlew build jpackage -Ptoolchain=skip; ```; Note 1: This will break OpenSlide support. Whole slide images need to be read some other way (e.g. Bio-Formats). For 32-bit Windows this can be fixed by replacing the dlls with the 32-bit ones from openslide.org, but there's no such straightforward fix on Mac. Note2 : The Apple Silicon build relies upon a JavaCPP-Presets snapshot for OpenCV, so is subject to change and not intended for any serious work. Nevertheless, it can be used to give an impression of performance improvements.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/849
https://github.com/qupath/qupath/pull/849:830,Performance,perform,performance,830,"JavaFX update is included based on changelog, since it may fix issues such as #833. Build scripts now have *extremely* provisional and experimental support for both Apple Silicon and 32-bit Windows. To use either, it is necessary to build with a compatible JDK and (probably) skip specifying a toolchain, e.g. with; ```; ./gradlew build jpackage -Ptoolchain=skip; ```; Note 1: This will break OpenSlide support. Whole slide images need to be read some other way (e.g. Bio-Formats). For 32-bit Windows this can be fixed by replacing the dlls with the 32-bit ones from openslide.org, but there's no such straightforward fix on Mac. Note2 : The Apple Silicon build relies upon a JavaCPP-Presets snapshot for OpenCV, so is subject to change and not intended for any serious work. Nevertheless, it can be used to give an impression of performance improvements.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/849
https://github.com/qupath/qupath/pull/850:254,Performance,perform,performance,254,"This relied upon the server path, which doesn't work since v0.2.0.; Note that this feature is not used, but is retained for testing, e.g. in a script via; ```; getCurrentViewer().setDoICCTransform(false); ```; Activating the ICC Profile makes repainting performance substantially worse.; See also https://forum.image.sc/t/color-discrepancy-qupath-x-imagescope-leica-gt450/57948",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/850
https://github.com/qupath/qupath/pull/850:124,Testability,test,testing,124,"This relied upon the server path, which doesn't work since v0.2.0.; Note that this feature is not used, but is retained for testing, e.g. in a script via; ```; getCurrentViewer().setDoICCTransform(false); ```; Activating the ICC Profile makes repainting performance substantially worse.; See also https://forum.image.sc/t/color-discrepancy-qupath-x-imagescope-leica-gt450/57948",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/850
https://github.com/qupath/qupath/issues/852:338,Availability,error,error,338,"## Bug report. **Describe the bug**; Extensions are loaded after reading image data in the CLI. ; E.g. if reading the image depends on an extension, QuPath will throw an Exception. **To Reproduce**; Steps to reproduce the behavior:; 1. Run a `script` command through the CLI on an image that depends on an extension (e.g. OMERO).; 2. See error happening before the script is even running. **Expected behavior**; Extensions are loaded prior running the script. **Desktop:**; - OS: All; - QuPath Version: v0.3.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/852
https://github.com/qupath/qupath/issues/852:124,Integrability,depend,depends,124,"## Bug report. **Describe the bug**; Extensions are loaded after reading image data in the CLI. ; E.g. if reading the image depends on an extension, QuPath will throw an Exception. **To Reproduce**; Steps to reproduce the behavior:; 1. Run a `script` command through the CLI on an image that depends on an extension (e.g. OMERO).; 2. See error happening before the script is even running. **Expected behavior**; Extensions are loaded prior running the script. **Desktop:**; - OS: All; - QuPath Version: v0.3.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/852
https://github.com/qupath/qupath/issues/852:292,Integrability,depend,depends,292,"## Bug report. **Describe the bug**; Extensions are loaded after reading image data in the CLI. ; E.g. if reading the image depends on an extension, QuPath will throw an Exception. **To Reproduce**; Steps to reproduce the behavior:; 1. Run a `script` command through the CLI on an image that depends on an extension (e.g. OMERO).; 2. See error happening before the script is even running. **Expected behavior**; Extensions are loaded prior running the script. **Desktop:**; - OS: All; - QuPath Version: v0.3.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/852
https://github.com/qupath/qupath/issues/852:52,Performance,load,loaded,52,"## Bug report. **Describe the bug**; Extensions are loaded after reading image data in the CLI. ; E.g. if reading the image depends on an extension, QuPath will throw an Exception. **To Reproduce**; Steps to reproduce the behavior:; 1. Run a `script` command through the CLI on an image that depends on an extension (e.g. OMERO).; 2. See error happening before the script is even running. **Expected behavior**; Extensions are loaded prior running the script. **Desktop:**; - OS: All; - QuPath Version: v0.3.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/852
https://github.com/qupath/qupath/issues/852:427,Performance,load,loaded,427,"## Bug report. **Describe the bug**; Extensions are loaded after reading image data in the CLI. ; E.g. if reading the image depends on an extension, QuPath will throw an Exception. **To Reproduce**; Steps to reproduce the behavior:; 1. Run a `script` command through the CLI on an image that depends on an extension (e.g. OMERO).; 2. See error happening before the script is even running. **Expected behavior**; Extensions are loaded prior running the script. **Desktop:**; - OS: All; - QuPath Version: v0.3.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/852
https://github.com/qupath/qupath/pull/854:102,Testability,log,logging,102,"This prevents extensions from failing if they show text notifications when run from the command line, logging the content instead. However there will still be exceptions if any dialog requires a response, or if the content is anything other than simple text.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/854
https://github.com/qupath/qupath/pull/854:246,Usability,simpl,simple,246,"This prevents extensions from failing if they show text notifications when run from the command line, logging the content instead. However there will still be exceptions if any dialog requires a response, or if the content is anything other than simple text.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/854
https://github.com/qupath/qupath/issues/856:366,Availability,error,errors,366,"## Bug report. **Describe the bug**; QuPath sometimes reports OutOfMemoryErrors when training or running a pixel classifier in situations where the memory use is not actually too high. This has been particularly evident on an M1 MacBook Pro, and seems related to https://github.com/bytedeco/javacpp/issues/468 and https://github.com/bytedeco/javacpp/issues/516. The errors look like this:. ```; ERROR: Error requesting tile classification: ; java.io.IOException: java.lang.OutOfMemoryError: Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:314); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M) at org.bytedeco.javacpp.Pointer.deallocator(Pointer.java:712); at org.bytedeco.javacpp.Pointer.init(Pointer.java:126); at org.bytedeco.opencv.opencv_core.Mat.allocate(Native Method); at org.bytedeco.opencv.opencv_core.Mat.<init>(Mat.java:241); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predictWithLock(OpenCVClassifiers.java:468); at qupath.opencv.ml.OpenCVClassifiers$ANNClassif",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:395,Availability,ERROR,ERROR,395,"## Bug report. **Describe the bug**; QuPath sometimes reports OutOfMemoryErrors when training or running a pixel classifier in situations where the memory use is not actually too high. This has been particularly evident on an M1 MacBook Pro, and seems related to https://github.com/bytedeco/javacpp/issues/468 and https://github.com/bytedeco/javacpp/issues/516. The errors look like this:. ```; ERROR: Error requesting tile classification: ; java.io.IOException: java.lang.OutOfMemoryError: Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:314); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M) at org.bytedeco.javacpp.Pointer.deallocator(Pointer.java:712); at org.bytedeco.javacpp.Pointer.init(Pointer.java:126); at org.bytedeco.opencv.opencv_core.Mat.allocate(Native Method); at org.bytedeco.opencv.opencv_core.Mat.<init>(Mat.java:241); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predictWithLock(OpenCVClassifiers.java:468); at qupath.opencv.ml.OpenCVClassifiers$ANNClassif",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:402,Availability,Error,Error,402,"## Bug report. **Describe the bug**; QuPath sometimes reports OutOfMemoryErrors when training or running a pixel classifier in situations where the memory use is not actually too high. This has been particularly evident on an M1 MacBook Pro, and seems related to https://github.com/bytedeco/javacpp/issues/468 and https://github.com/bytedeco/javacpp/issues/516. The errors look like this:. ```; ERROR: Error requesting tile classification: ; java.io.IOException: java.lang.OutOfMemoryError: Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:314); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M) at org.bytedeco.javacpp.Pointer.deallocator(Pointer.java:712); at org.bytedeco.javacpp.Pointer.init(Pointer.java:126); at org.bytedeco.opencv.opencv_core.Mat.allocate(Native Method); at org.bytedeco.opencv.opencv_core.Mat.<init>(Mat.java:241); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predictWithLock(OpenCVClassifiers.java:468); at qupath.opencv.ml.OpenCVClassifiers$ANNClassif",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:3709,Availability,error,error,3709,"servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open OS-1.ndpi on an M1 Mac, set to have a maximum of 4GB RAM for QuPath; 2. Start training a pixel classifier (default resolution and settings); 3. Zoom out to force preview classification across the full image; 4. Open the log & await the error; * If no error appears, adjust training annotations if needed to create a new classifier (it usually doesn't take long); 5. Check Activity Monitor to confirm that QuPath does not seem to be using a particularly large amount of memory. **Expected behavior**; Pixel classification continues without error for as long as its real memory use remains reasonable. **Desktop (please complete the following information):**; - OS: macOS, ARM; - QuPath Version 0.3.0. **Additional context**; Following the suggestion in https://github.com/bytedeco/javacpp/issues/516 a workaround is to add the line ; ```; java-options=-Dorg.bytedeco.javacpp.maxPhysicalBytes=0; ```; at the end of the *QuPath.app/Contents/app/QuPath.cfg* file. This turns off the check that reports the error, but could be risky to introduce as a default - so this Issue was created to document the problem for now, and a workaround where needed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:3724,Availability,error,error,3724,"servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open OS-1.ndpi on an M1 Mac, set to have a maximum of 4GB RAM for QuPath; 2. Start training a pixel classifier (default resolution and settings); 3. Zoom out to force preview classification across the full image; 4. Open the log & await the error; * If no error appears, adjust training annotations if needed to create a new classifier (it usually doesn't take long); 5. Check Activity Monitor to confirm that QuPath does not seem to be using a particularly large amount of memory. **Expected behavior**; Pixel classification continues without error for as long as its real memory use remains reasonable. **Desktop (please complete the following information):**; - OS: macOS, ARM; - QuPath Version 0.3.0. **Additional context**; Following the suggestion in https://github.com/bytedeco/javacpp/issues/516 a workaround is to add the line ; ```; java-options=-Dorg.bytedeco.javacpp.maxPhysicalBytes=0; ```; at the end of the *QuPath.app/Contents/app/QuPath.cfg* file. This turns off the check that reports the error, but could be risky to introduce as a default - so this Issue was created to document the problem for now, and a workaround where needed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:4012,Availability,error,error,4012,"servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open OS-1.ndpi on an M1 Mac, set to have a maximum of 4GB RAM for QuPath; 2. Start training a pixel classifier (default resolution and settings); 3. Zoom out to force preview classification across the full image; 4. Open the log & await the error; * If no error appears, adjust training annotations if needed to create a new classifier (it usually doesn't take long); 5. Check Activity Monitor to confirm that QuPath does not seem to be using a particularly large amount of memory. **Expected behavior**; Pixel classification continues without error for as long as its real memory use remains reasonable. **Desktop (please complete the following information):**; - OS: macOS, ARM; - QuPath Version 0.3.0. **Additional context**; Following the suggestion in https://github.com/bytedeco/javacpp/issues/516 a workaround is to add the line ; ```; java-options=-Dorg.bytedeco.javacpp.maxPhysicalBytes=0; ```; at the end of the *QuPath.app/Contents/app/QuPath.cfg* file. This turns off the check that reports the error, but could be risky to introduce as a default - so this Issue was created to document the problem for now, and a workaround where needed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:4475,Availability,error,error,4475,"servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open OS-1.ndpi on an M1 Mac, set to have a maximum of 4GB RAM for QuPath; 2. Start training a pixel classifier (default resolution and settings); 3. Zoom out to force preview classification across the full image; 4. Open the log & await the error; * If no error appears, adjust training annotations if needed to create a new classifier (it usually doesn't take long); 5. Check Activity Monitor to confirm that QuPath does not seem to be using a particularly large amount of memory. **Expected behavior**; Pixel classification continues without error for as long as its real memory use remains reasonable. **Desktop (please complete the following information):**; - OS: macOS, ARM; - QuPath Version 0.3.0. **Additional context**; Following the suggestion in https://github.com/bytedeco/javacpp/issues/516 a workaround is to add the line ; ```; java-options=-Dorg.bytedeco.javacpp.maxPhysicalBytes=0; ```; at the end of the *QuPath.app/Contents/app/QuPath.cfg* file. This turns off the check that reports the error, but could be risky to introduce as a default - so this Issue was created to document the problem for now, and a workaround where needed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:1757,Energy Efficiency,allocate,allocate,1757,ImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M) at org.bytedeco.javacpp.Pointer.deallocator(Pointer.java:712); at org.bytedeco.javacpp.Pointer.init(Pointer.java:126); at org.bytedeco.opencv.opencv_core.Mat.allocate(Native Method); at org.bytedeco.opencv.opencv_core.Mat.<init>(Mat.java:241); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predictWithLock(OpenCVClassifiers.java:468); at qupath.opencv.ml.OpenCVClassifiers$ANNClassifierCV.predictWithLock(OpenCVClassifiers.java:1425); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predict(OpenCVClassifiers.java:442); at qupath.opencv.ops.ImageOps$ML$StatModelOp.apply(ImageOps.java:2812); at qupath.opencv.ops.ImageOps$Core$SequentialMultiOp.apply(ImageOps.java:2294); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:424); at qupath.opencv.ml.pixel.OpenCVPixelClassifier.applyClassification(OpenCVPixelClassifier.java:104); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:299); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedIma,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:3854,Energy Efficiency,Monitor,Monitor,3854,"servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open OS-1.ndpi on an M1 Mac, set to have a maximum of 4GB RAM for QuPath; 2. Start training a pixel classifier (default resolution and settings); 3. Zoom out to force preview classification across the full image; 4. Open the log & await the error; * If no error appears, adjust training annotations if needed to create a new classifier (it usually doesn't take long); 5. Check Activity Monitor to confirm that QuPath does not seem to be using a particularly large amount of memory. **Expected behavior**; Pixel classification continues without error for as long as its real memory use remains reasonable. **Desktop (please complete the following information):**; - OS: macOS, ARM; - QuPath Version 0.3.0. **Additional context**; Following the suggestion in https://github.com/bytedeco/javacpp/issues/516 a workaround is to add the line ; ```; java-options=-Dorg.bytedeco.javacpp.maxPhysicalBytes=0; ```; at the end of the *QuPath.app/Contents/app/QuPath.cfg* file. This turns off the check that reports the error, but could be risky to introduce as a default - so this Issue was created to document the problem for now, and a workaround where needed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:1166,Performance,concurren,concurrent,1166,"lly too high. This has been particularly evident on an M1 MacBook Pro, and seems related to https://github.com/bytedeco/javacpp/issues/468 and https://github.com/bytedeco/javacpp/issues/516. The errors look like this:. ```; ERROR: Error requesting tile classification: ; java.io.IOException: java.lang.OutOfMemoryError: Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:314); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M) at org.bytedeco.javacpp.Pointer.deallocator(Pointer.java:712); at org.bytedeco.javacpp.Pointer.init(Pointer.java:126); at org.bytedeco.opencv.opencv_core.Mat.allocate(Native Method); at org.bytedeco.opencv.opencv_core.Mat.<init>(Mat.java:241); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predictWithLock(OpenCVClassifiers.java:468); at qupath.opencv.ml.OpenCVClassifiers$ANNClassifierCV.predictWithLock(OpenCVClassifiers.java:1425); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predict(OpenCVClassifiers.java:442); at qupath.opencv.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:1248,Performance,concurren,concurrent,1248,elated to https://github.com/bytedeco/javacpp/issues/468 and https://github.com/bytedeco/javacpp/issues/516. The errors look like this:. ```; ERROR: Error requesting tile classification: ; java.io.IOException: java.lang.OutOfMemoryError: Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:314); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M) at org.bytedeco.javacpp.Pointer.deallocator(Pointer.java:712); at org.bytedeco.javacpp.Pointer.init(Pointer.java:126); at org.bytedeco.opencv.opencv_core.Mat.allocate(Native Method); at org.bytedeco.opencv.opencv_core.Mat.<init>(Mat.java:241); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predictWithLock(OpenCVClassifiers.java:468); at qupath.opencv.ml.OpenCVClassifiers$ANNClassifierCV.predictWithLock(OpenCVClassifiers.java:1425); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predict(OpenCVClassifiers.java:442); at qupath.opencv.ops.ImageOps$ML$StatModelOp.apply(ImageOps.java:2812); at qupath.opencv.ops.ImageO,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:1314,Performance,concurren,concurrent,1314,://github.com/bytedeco/javacpp/issues/516. The errors look like this:. ```; ERROR: Error requesting tile classification: ; java.io.IOException: java.lang.OutOfMemoryError: Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:314); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M) at org.bytedeco.javacpp.Pointer.deallocator(Pointer.java:712); at org.bytedeco.javacpp.Pointer.init(Pointer.java:126); at org.bytedeco.opencv.opencv_core.Mat.allocate(Native Method); at org.bytedeco.opencv.opencv_core.Mat.<init>(Mat.java:241); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predictWithLock(OpenCVClassifiers.java:468); at qupath.opencv.ml.OpenCVClassifiers$ANNClassifierCV.predictWithLock(OpenCVClassifiers.java:1425); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predict(OpenCVClassifiers.java:442); at qupath.opencv.ops.ImageOps$ML$StatModelOp.apply(ImageOps.java:2812); at qupath.opencv.ops.ImageOps$Core$SequentialMultiOp.apply(ImageOps.java:2294); at qupath.ope,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:1394,Performance,concurren,concurrent,1394,R: Error requesting tile classification: ; java.io.IOException: java.lang.OutOfMemoryError: Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:314); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M) at org.bytedeco.javacpp.Pointer.deallocator(Pointer.java:712); at org.bytedeco.javacpp.Pointer.init(Pointer.java:126); at org.bytedeco.opencv.opencv_core.Mat.allocate(Native Method); at org.bytedeco.opencv.opencv_core.Mat.<init>(Mat.java:241); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predictWithLock(OpenCVClassifiers.java:468); at qupath.opencv.ml.OpenCVClassifiers$ANNClassifierCV.predictWithLock(OpenCVClassifiers.java:1425); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predict(OpenCVClassifiers.java:442); at qupath.opencv.ops.ImageOps$ML$StatModelOp.apply(ImageOps.java:2812); at qupath.opencv.ops.ImageOps$Core$SequentialMultiOp.apply(ImageOps.java:2294); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:424); at qupath.opencv.m,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:3071,Performance,concurren,concurrent,3071,"nCVClassifiers$AbstractOpenCVClassifierML.predict(OpenCVClassifiers.java:442); at qupath.opencv.ops.ImageOps$ML$StatModelOp.apply(ImageOps.java:2812); at qupath.opencv.ops.ImageOps$Core$SequentialMultiOp.apply(ImageOps.java:2294); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:424); at qupath.opencv.ml.pixel.OpenCVPixelClassifier.applyClassification(OpenCVPixelClassifier.java:104); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:299); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open OS-1.ndpi on an M1 Mac, set to have a maximum of 4GB RAM for QuPath; 2. Start training a pixel classifier (default resolution and settings); 3. Zoom out to force preview classification across the full image; 4. Open the log & await the error; * If no error appears, adjust training annotations if needed to create a new classifier (it usually doesn't take long); 5. Check Activity Monitor to confirm that QuPath does not seem to be using a particularly large amount of memory. **Expected behavior**; Pixel classification continues without error for as long as its real memory use remains reasonable. **De",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:3153,Performance,concurren,concurrent,3153,"qupath.opencv.ops.ImageOps$ML$StatModelOp.apply(ImageOps.java:2812); at qupath.opencv.ops.ImageOps$Core$SequentialMultiOp.apply(ImageOps.java:2294); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:424); at qupath.opencv.ml.pixel.OpenCVPixelClassifier.applyClassification(OpenCVPixelClassifier.java:104); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:299); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open OS-1.ndpi on an M1 Mac, set to have a maximum of 4GB RAM for QuPath; 2. Start training a pixel classifier (default resolution and settings); 3. Zoom out to force preview classification across the full image; 4. Open the log & await the error; * If no error appears, adjust training annotations if needed to create a new classifier (it usually doesn't take long); 5. Check Activity Monitor to confirm that QuPath does not seem to be using a particularly large amount of memory. **Expected behavior**; Pixel classification continues without error for as long as its real memory use remains reasonable. **Desktop (please complete the following information):**; - OS: macOS, ARM; - QuPath V",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:3219,Performance,concurren,concurrent,3219,"); at qupath.opencv.ops.ImageOps$Core$SequentialMultiOp.apply(ImageOps.java:2294); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:424); at qupath.opencv.ml.pixel.OpenCVPixelClassifier.applyClassification(OpenCVPixelClassifier.java:104); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:299); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open OS-1.ndpi on an M1 Mac, set to have a maximum of 4GB RAM for QuPath; 2. Start training a pixel classifier (default resolution and settings); 3. Zoom out to force preview classification across the full image; 4. Open the log & await the error; * If no error appears, adjust training annotations if needed to create a new classifier (it usually doesn't take long); 5. Check Activity Monitor to confirm that QuPath does not seem to be using a particularly large amount of memory. **Expected behavior**; Pixel classification continues without error for as long as its real memory use remains reasonable. **Desktop (please complete the following information):**; - OS: macOS, ARM; - QuPath Version 0.3.0. **Additional context**; Following the suggestion in ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:3299,Performance,concurren,concurrent,3299,"); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:424); at qupath.opencv.ml.pixel.OpenCVPixelClassifier.applyClassification(OpenCVPixelClassifier.java:104); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:299); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open OS-1.ndpi on an M1 Mac, set to have a maximum of 4GB RAM for QuPath; 2. Start training a pixel classifier (default resolution and settings); 3. Zoom out to force preview classification across the full image; 4. Open the log & await the error; * If no error appears, adjust training annotations if needed to create a new classifier (it usually doesn't take long); 5. Check Activity Monitor to confirm that QuPath does not seem to be using a particularly large amount of memory. **Expected behavior**; Pixel classification continues without error for as long as its real memory use remains reasonable. **Desktop (please complete the following information):**; - OS: macOS, ARM; - QuPath Version 0.3.0. **Additional context**; Following the suggestion in https://github.com/bytedeco/javacpp/issues/516 a workaround is to add the line ;",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:1908,Safety,predict,predictWithLock,1908,mages.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M) at org.bytedeco.javacpp.Pointer.deallocator(Pointer.java:712); at org.bytedeco.javacpp.Pointer.init(Pointer.java:126); at org.bytedeco.opencv.opencv_core.Mat.allocate(Native Method); at org.bytedeco.opencv.opencv_core.Mat.<init>(Mat.java:241); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predictWithLock(OpenCVClassifiers.java:468); at qupath.opencv.ml.OpenCVClassifiers$ANNClassifierCV.predictWithLock(OpenCVClassifiers.java:1425); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predict(OpenCVClassifiers.java:442); at qupath.opencv.ops.ImageOps$ML$StatModelOp.apply(ImageOps.java:2812); at qupath.opencv.ops.ImageOps$Core$SequentialMultiOp.apply(ImageOps.java:2294); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:424); at qupath.opencv.ml.pixel.OpenCVPixelClassifier.applyClassification(OpenCVPixelClassifier.java:104); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:299); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:2007,Safety,predict,predictWithLock,2007,t qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M) at org.bytedeco.javacpp.Pointer.deallocator(Pointer.java:712); at org.bytedeco.javacpp.Pointer.init(Pointer.java:126); at org.bytedeco.opencv.opencv_core.Mat.allocate(Native Method); at org.bytedeco.opencv.opencv_core.Mat.<init>(Mat.java:241); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predictWithLock(OpenCVClassifiers.java:468); at qupath.opencv.ml.OpenCVClassifiers$ANNClassifierCV.predictWithLock(OpenCVClassifiers.java:1425); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predict(OpenCVClassifiers.java:442); at qupath.opencv.ops.ImageOps$ML$StatModelOp.apply(ImageOps.java:2812); at qupath.opencv.ops.ImageOps$Core$SequentialMultiOp.apply(ImageOps.java:2294); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:424); at qupath.opencv.ml.pixel.OpenCVPixelClassifier.applyClassification(OpenCVPixelClassifier.java:104); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:299); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassific,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:2118,Safety,predict,predict,2118,.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); Caused by Physical memory usage is too high: physicalBytes (16451M) > maxPhysicalBytes (16384M) at org.bytedeco.javacpp.Pointer.deallocator(Pointer.java:712); at org.bytedeco.javacpp.Pointer.init(Pointer.java:126); at org.bytedeco.opencv.opencv_core.Mat.allocate(Native Method); at org.bytedeco.opencv.opencv_core.Mat.<init>(Mat.java:241); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predictWithLock(OpenCVClassifiers.java:468); at qupath.opencv.ml.OpenCVClassifiers$ANNClassifierCV.predictWithLock(OpenCVClassifiers.java:1425); at qupath.opencv.ml.OpenCVClassifiers$AbstractOpenCVClassifierML.predict(OpenCVClassifiers.java:442); at qupath.opencv.ops.ImageOps$ML$StatModelOp.apply(ImageOps.java:2812); at qupath.opencv.ops.ImageOps$Core$SequentialMultiOp.apply(ImageOps.java:2294); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:424); at qupath.opencv.ml.pixel.OpenCVPixelClassifier.applyClassification(OpenCVPixelClassifier.java:104); at qupath.lib.classifiers.pixel.PixelClassificationImageServer.readTile(PixelClassificationImageServer.java:299); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); a,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:4495,Safety,risk,risky,4495,"servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open OS-1.ndpi on an M1 Mac, set to have a maximum of 4GB RAM for QuPath; 2. Start training a pixel classifier (default resolution and settings); 3. Zoom out to force preview classification across the full image; 4. Open the log & await the error; * If no error appears, adjust training annotations if needed to create a new classifier (it usually doesn't take long); 5. Check Activity Monitor to confirm that QuPath does not seem to be using a particularly large amount of memory. **Expected behavior**; Pixel classification continues without error for as long as its real memory use remains reasonable. **Desktop (please complete the following information):**; - OS: macOS, ARM; - QuPath Version 0.3.0. **Additional context**; Following the suggestion in https://github.com/bytedeco/javacpp/issues/516 a workaround is to add the line ; ```; java-options=-Dorg.bytedeco.javacpp.maxPhysicalBytes=0; ```; at the end of the *QuPath.app/Contents/app/QuPath.cfg* file. This turns off the check that reports the error, but could be risky to introduce as a default - so this Issue was created to document the problem for now, and a workaround where needed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/856:3693,Testability,log,log,3693,"servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:184); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:238); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:56); at qupath.lib.gui.viewer.overlays.PixelClassificationOverlay.lambda$requestTile$5(PixelClassificationOverlay.java:547); at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open OS-1.ndpi on an M1 Mac, set to have a maximum of 4GB RAM for QuPath; 2. Start training a pixel classifier (default resolution and settings); 3. Zoom out to force preview classification across the full image; 4. Open the log & await the error; * If no error appears, adjust training annotations if needed to create a new classifier (it usually doesn't take long); 5. Check Activity Monitor to confirm that QuPath does not seem to be using a particularly large amount of memory. **Expected behavior**; Pixel classification continues without error for as long as its real memory use remains reasonable. **Desktop (please complete the following information):**; - OS: macOS, ARM; - QuPath Version 0.3.0. **Additional context**; Following the suggestion in https://github.com/bytedeco/javacpp/issues/516 a workaround is to add the line ; ```; java-options=-Dorg.bytedeco.javacpp.maxPhysicalBytes=0; ```; at the end of the *QuPath.app/Contents/app/QuPath.cfg* file. This turns off the check that reports the error, but could be risky to introduce as a default - so this Issue was created to document the problem for now, and a workaround where needed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/856
https://github.com/qupath/qupath/issues/858:41,Testability,log,logic,41,"## Bug report. **Describe the bug**; The logic used [here](https://github.com/qupath/qupath/blob/v0.3.0/qupath-extension-bioformats/src/main/java/qupath/lib/images/writers/ome/OMEPyramidWriter.java#L278) to identify whether a bigtiff should be written appears to be incorrect, because it ignored multiple resolutions (and any space required for IFDs etc.). **To Reproduce**; Difficult, because it requires an image that is on the borderline of what is acceptable. But see https://forum.image.sc/t/qupath-out-of-memory-problem-when-creating-training-image/60985/5 for a case where I think that has happened. **Expected behavior**; QuPath should always write bigtiff when it needs to. Multiple resolutions should be included in any calculation. It might be necessary to provide the user with a way to control this. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0. **Additional context**; This can be difficult to discern in advance whenever compression is involved. The logic used for setting the bigtiff flag automatically in Bio-Formats is in [`TiffWriter`](https://github.com/ome/bioformats/blob/25645389e076a7bd0011e04c4dd8982c0f0614ed/components/formats-bsd/src/loci/formats/out/TiffWriter.java#L174) (but it applies only if the image is uncompressed, and it's not totally clear to me if it uses the multiple resolutions).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/858
https://github.com/qupath/qupath/issues/858:1012,Testability,log,logic,1012,"## Bug report. **Describe the bug**; The logic used [here](https://github.com/qupath/qupath/blob/v0.3.0/qupath-extension-bioformats/src/main/java/qupath/lib/images/writers/ome/OMEPyramidWriter.java#L278) to identify whether a bigtiff should be written appears to be incorrect, because it ignored multiple resolutions (and any space required for IFDs etc.). **To Reproduce**; Difficult, because it requires an image that is on the borderline of what is acceptable. But see https://forum.image.sc/t/qupath-out-of-memory-problem-when-creating-training-image/60985/5 for a case where I think that has happened. **Expected behavior**; QuPath should always write bigtiff when it needs to. Multiple resolutions should be included in any calculation. It might be necessary to provide the user with a way to control this. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0. **Additional context**; This can be difficult to discern in advance whenever compression is involved. The logic used for setting the bigtiff flag automatically in Bio-Formats is in [`TiffWriter`](https://github.com/ome/bioformats/blob/25645389e076a7bd0011e04c4dd8982c0f0614ed/components/formats-bsd/src/loci/formats/out/TiffWriter.java#L174) (but it applies only if the image is uncompressed, and it's not totally clear to me if it uses the multiple resolutions).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/858
https://github.com/qupath/qupath/issues/858:1320,Usability,clear,clear,1320,"## Bug report. **Describe the bug**; The logic used [here](https://github.com/qupath/qupath/blob/v0.3.0/qupath-extension-bioformats/src/main/java/qupath/lib/images/writers/ome/OMEPyramidWriter.java#L278) to identify whether a bigtiff should be written appears to be incorrect, because it ignored multiple resolutions (and any space required for IFDs etc.). **To Reproduce**; Difficult, because it requires an image that is on the borderline of what is acceptable. But see https://forum.image.sc/t/qupath-out-of-memory-problem-when-creating-training-image/60985/5 for a case where I think that has happened. **Expected behavior**; QuPath should always write bigtiff when it needs to. Multiple resolutions should be included in any calculation. It might be necessary to provide the user with a way to control this. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0. **Additional context**; This can be difficult to discern in advance whenever compression is involved. The logic used for setting the bigtiff flag automatically in Bio-Formats is in [`TiffWriter`](https://github.com/ome/bioformats/blob/25645389e076a7bd0011e04c4dd8982c0f0614ed/components/formats-bsd/src/loci/formats/out/TiffWriter.java#L174) (but it applies only if the image is uncompressed, and it's not totally clear to me if it uses the multiple resolutions).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/858
https://github.com/qupath/qupath/issues/859:656,Availability,down,downsample,656,"## Bug report. **Describe the bug**; When converting an image from the command line, progress may be logged - but no message is given when the conversion is complete. This is often ok when running from a terminal, but is awkward if running in eclipse - where it is less clear that the process is complete. **To Reproduce**; Run a command such as; ```; QuPath convert-ome /path/to/CMU-1-Small-Region.svs /path/to/CMU-1-Small-Region2.ome.tif ; ```. Based only on what is printed, it looks like conversion hangs at 97% - when in fact it did terminate properly.; ```; 07:48:16.170 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Writing resolution 1 of 1 (downsample=1.0, 30 tiles); 07:48:16.173 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Writing plane 1/1; 07:48:16.394 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 10% tiles; 07:48:16.492 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 20% tiles; 07:48:16.597 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 30% tiles; 07:48:16.660 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 40% tiles; 07:48:16.744 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 50% tiles; 07:48:16.800 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 60% tiles; 07:48:16.864 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 70% tiles; 07:48:16.935 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 80% tiles; 07:48:17.036 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 90% tiles; 07:48:17.091 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 97% tiles; ```; **Expected behavior**; A clear message printed when conversion is successful, ideally also with timing information. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/859
https://github.com/qupath/qupath/issues/859:117,Integrability,message,message,117,"## Bug report. **Describe the bug**; When converting an image from the command line, progress may be logged - but no message is given when the conversion is complete. This is often ok when running from a terminal, but is awkward if running in eclipse - where it is less clear that the process is complete. **To Reproduce**; Run a command such as; ```; QuPath convert-ome /path/to/CMU-1-Small-Region.svs /path/to/CMU-1-Small-Region2.ome.tif ; ```. Based only on what is printed, it looks like conversion hangs at 97% - when in fact it did terminate properly.; ```; 07:48:16.170 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Writing resolution 1 of 1 (downsample=1.0, 30 tiles); 07:48:16.173 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Writing plane 1/1; 07:48:16.394 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 10% tiles; 07:48:16.492 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 20% tiles; 07:48:16.597 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 30% tiles; 07:48:16.660 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 40% tiles; 07:48:16.744 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 50% tiles; 07:48:16.800 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 60% tiles; 07:48:16.864 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 70% tiles; 07:48:16.935 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 80% tiles; 07:48:17.036 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 90% tiles; 07:48:17.091 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 97% tiles; ```; **Expected behavior**; A clear message printed when conversion is successful, ideally also with timing information. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/859
https://github.com/qupath/qupath/issues/859:1643,Integrability,message,message,1643,"## Bug report. **Describe the bug**; When converting an image from the command line, progress may be logged - but no message is given when the conversion is complete. This is often ok when running from a terminal, but is awkward if running in eclipse - where it is less clear that the process is complete. **To Reproduce**; Run a command such as; ```; QuPath convert-ome /path/to/CMU-1-Small-Region.svs /path/to/CMU-1-Small-Region2.ome.tif ; ```. Based only on what is printed, it looks like conversion hangs at 97% - when in fact it did terminate properly.; ```; 07:48:16.170 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Writing resolution 1 of 1 (downsample=1.0, 30 tiles); 07:48:16.173 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Writing plane 1/1; 07:48:16.394 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 10% tiles; 07:48:16.492 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 20% tiles; 07:48:16.597 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 30% tiles; 07:48:16.660 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 40% tiles; 07:48:16.744 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 50% tiles; 07:48:16.800 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 60% tiles; 07:48:16.864 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 70% tiles; 07:48:16.935 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 80% tiles; 07:48:17.036 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 90% tiles; 07:48:17.091 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 97% tiles; ```; **Expected behavior**; A clear message printed when conversion is successful, ideally also with timing information. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/859
https://github.com/qupath/qupath/issues/859:101,Testability,log,logged,101,"## Bug report. **Describe the bug**; When converting an image from the command line, progress may be logged - but no message is given when the conversion is complete. This is often ok when running from a terminal, but is awkward if running in eclipse - where it is less clear that the process is complete. **To Reproduce**; Run a command such as; ```; QuPath convert-ome /path/to/CMU-1-Small-Region.svs /path/to/CMU-1-Small-Region2.ome.tif ; ```. Based only on what is printed, it looks like conversion hangs at 97% - when in fact it did terminate properly.; ```; 07:48:16.170 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Writing resolution 1 of 1 (downsample=1.0, 30 tiles); 07:48:16.173 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Writing plane 1/1; 07:48:16.394 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 10% tiles; 07:48:16.492 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 20% tiles; 07:48:16.597 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 30% tiles; 07:48:16.660 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 40% tiles; 07:48:16.744 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 50% tiles; 07:48:16.800 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 60% tiles; 07:48:16.864 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 70% tiles; 07:48:16.935 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 80% tiles; 07:48:17.036 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 90% tiles; 07:48:17.091 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 97% tiles; ```; **Expected behavior**; A clear message printed when conversion is successful, ideally also with timing information. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/859
https://github.com/qupath/qupath/issues/859:270,Usability,clear,clear,270,"## Bug report. **Describe the bug**; When converting an image from the command line, progress may be logged - but no message is given when the conversion is complete. This is often ok when running from a terminal, but is awkward if running in eclipse - where it is less clear that the process is complete. **To Reproduce**; Run a command such as; ```; QuPath convert-ome /path/to/CMU-1-Small-Region.svs /path/to/CMU-1-Small-Region2.ome.tif ; ```. Based only on what is printed, it looks like conversion hangs at 97% - when in fact it did terminate properly.; ```; 07:48:16.170 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Writing resolution 1 of 1 (downsample=1.0, 30 tiles); 07:48:16.173 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Writing plane 1/1; 07:48:16.394 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 10% tiles; 07:48:16.492 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 20% tiles; 07:48:16.597 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 30% tiles; 07:48:16.660 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 40% tiles; 07:48:16.744 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 50% tiles; 07:48:16.800 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 60% tiles; 07:48:16.864 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 70% tiles; 07:48:16.935 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 80% tiles; 07:48:17.036 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 90% tiles; 07:48:17.091 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 97% tiles; ```; **Expected behavior**; A clear message printed when conversion is successful, ideally also with timing information. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/859
https://github.com/qupath/qupath/issues/859:1637,Usability,clear,clear,1637,"## Bug report. **Describe the bug**; When converting an image from the command line, progress may be logged - but no message is given when the conversion is complete. This is often ok when running from a terminal, but is awkward if running in eclipse - where it is less clear that the process is complete. **To Reproduce**; Run a command such as; ```; QuPath convert-ome /path/to/CMU-1-Small-Region.svs /path/to/CMU-1-Small-Region2.ome.tif ; ```. Based only on what is printed, it looks like conversion hangs at 97% - when in fact it did terminate properly.; ```; 07:48:16.170 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Writing resolution 1 of 1 (downsample=1.0, 30 tiles); 07:48:16.173 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Writing plane 1/1; 07:48:16.394 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 10% tiles; 07:48:16.492 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 20% tiles; 07:48:16.597 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 30% tiles; 07:48:16.660 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 40% tiles; 07:48:16.744 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 50% tiles; 07:48:16.800 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 60% tiles; 07:48:16.864 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 70% tiles; 07:48:16.935 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 80% tiles; 07:48:17.036 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 90% tiles; 07:48:17.091 [main] [INFO ] q.l.i.writers.ome.OMEPyramidWriter - Written 97% tiles; ```; **Expected behavior**; A clear message printed when conversion is successful, ideally also with timing information. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/859
https://github.com/qupath/qupath/issues/860:1925,Availability,avail,available,1925,"ory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it should succeed but perform badly. **Expected behavior**; `ImageJServer` should fully read 2D images - since using a virtual stack brings no benefits - and most multidimensional images, as long as they are small enough to fit comfortably in memory. Synchronization should be reduced, and resizing limited. It will sometimes still not be possible to open a non-pyramidal image via ImageJ directly. In this case, running `convert-ome` should be able to efficiently generate an OME-TIFF image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; It may be preferable to extend `AbstractTileableImageServer` rather than `AbstractImageServer` to take advantage of the tile caching in the former.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/860
https://github.com/qupath/qupath/issues/860:1987,Availability,avail,available,1987,"ory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it should succeed but perform badly. **Expected behavior**; `ImageJServer` should fully read 2D images - since using a virtual stack brings no benefits - and most multidimensional images, as long as they are small enough to fit comfortably in memory. Synchronization should be reduced, and resizing limited. It will sometimes still not be possible to open a non-pyramidal image via ImageJ directly. In this case, running `convert-ome` should be able to efficiently generate an OME-TIFF image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; It may be preferable to extend `AbstractTileableImageServer` rather than `AbstractImageServer` to take advantage of the tile caching in the former.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/860
https://github.com/qupath/qupath/issues/860:2275,Energy Efficiency,reduce,reduced,2275,"ory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it should succeed but perform badly. **Expected behavior**; `ImageJServer` should fully read 2D images - since using a virtual stack brings no benefits - and most multidimensional images, as long as they are small enough to fit comfortably in memory. Synchronization should be reduced, and resizing limited. It will sometimes still not be possible to open a non-pyramidal image via ImageJ directly. In this case, running `convert-ome` should be able to efficiently generate an OME-TIFF image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; It may be preferable to extend `AbstractTileableImageServer` rather than `AbstractImageServer` to take advantage of the tile caching in the former.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/860
https://github.com/qupath/qupath/issues/860:2451,Energy Efficiency,efficient,efficiently,2451,"ory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it should succeed but perform badly. **Expected behavior**; `ImageJServer` should fully read 2D images - since using a virtual stack brings no benefits - and most multidimensional images, as long as they are small enough to fit comfortably in memory. Synchronization should be reduced, and resizing limited. It will sometimes still not be possible to open a non-pyramidal image via ImageJ directly. In this case, running `convert-ome` should be able to efficiently generate an OME-TIFF image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; It may be preferable to extend `AbstractTileableImageServer` rather than `AbstractImageServer` to take advantage of the tile caching in the former.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/860
https://github.com/qupath/qupath/issues/860:1364,Integrability,synchroniz,synchronized,1364,"`ImageJServer` was actually requesting the pixels twice: which was extremely slow, and eventually terminated with an OOM. This occurs because `ImageJServer` first opens the image as a virtual stack, then computes memory requirements/stack size. Based upon this, it may then open the same image as a regular `ImagePlus`. This should be unnecessary, and also temporarily doubles the memory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it should succeed but perform badly. **Expected behavior**; `ImageJServer` should fully read 2D images - since using a virtual stack brings no benefits - and most multidimensional images, as long as they are small enough to fit comfortably in memory. Synchronization should be reduced, and resizing limited. It will sometimes still not be possible to open a non-pyramidal image via ImageJ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/860
https://github.com/qupath/qupath/issues/860:2249,Integrability,Synchroniz,Synchronization,2249,"ory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it should succeed but perform badly. **Expected behavior**; `ImageJServer` should fully read 2D images - since using a virtual stack brings no benefits - and most multidimensional images, as long as they are small enough to fit comfortably in memory. Synchronization should be reduced, and resizing limited. It will sometimes still not be possible to open a non-pyramidal image via ImageJ directly. In this case, running `convert-ome` should be able to efficiently generate an OME-TIFF image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; It may be preferable to extend `AbstractTileableImageServer` rather than `AbstractImageServer` to take advantage of the tile caching in the former.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/860
https://github.com/qupath/qupath/issues/860:2646,Modifiability,extend,extend,2646,"ory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it should succeed but perform badly. **Expected behavior**; `ImageJServer` should fully read 2D images - since using a virtual stack brings no benefits - and most multidimensional images, as long as they are small enough to fit comfortably in memory. Synchronization should be reduced, and resizing limited. It will sometimes still not be possible to open a non-pyramidal image via ImageJ directly. In this case, running `convert-ome` should be able to efficiently generate an OME-TIFF image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; It may be preferable to extend `AbstractTileableImageServer` rather than `AbstractImageServer` to take advantage of the tile caching in the former.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/860
https://github.com/qupath/qupath/issues/860:41,Performance,perform,performance,41,"## Bug report. **Describe the bug**; The performance of `ImageJServer` is much worse than it needs to be - to the extent that it can make some images impossible to work with. This first appeared at https://forum.image.sc/t/qupath-out-of-memory-problem-when-creating-training-image/60985. I was unable to even open a ~3GB image on my computer (with total 16 GB RAM). It turned out that `ImageJServer` was actually requesting the pixels twice: which was extremely slow, and eventually terminated with an OOM. This occurs because `ImageJServer` first opens the image as a virtual stack, then computes memory requirements/stack size. Based upon this, it may then open the same image as a regular `ImagePlus`. This should be unnecessary, and also temporarily doubles the memory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/860
https://github.com/qupath/qupath/issues/860:912,Performance,perform,performance,912,"## Bug report. **Describe the bug**; The performance of `ImageJServer` is much worse than it needs to be - to the extent that it can make some images impossible to work with. This first appeared at https://forum.image.sc/t/qupath-out-of-memory-problem-when-creating-training-image/60985. I was unable to even open a ~3GB image on my computer (with total 16 GB RAM). It turned out that `ImageJServer` was actually requesting the pixels twice: which was extremely slow, and eventually terminated with an OOM. This occurs because `ImageJServer` first opens the image as a virtual stack, then computes memory requirements/stack size. Based upon this, it may then open the same image as a regular `ImagePlus`. This should be unnecessary, and also temporarily doubles the memory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/860
https://github.com/qupath/qupath/issues/860:1698,Performance,perform,performed,1698," open the same image as a regular `ImagePlus`. This should be unnecessary, and also temporarily doubles the memory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it should succeed but perform badly. **Expected behavior**; `ImageJServer` should fully read 2D images - since using a virtual stack brings no benefits - and most multidimensional images, as long as they are small enough to fit comfortably in memory. Synchronization should be reduced, and resizing limited. It will sometimes still not be possible to open a non-pyramidal image via ImageJ directly. In this case, running `convert-ome` should be able to efficiently generate an OME-TIFF image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; It may be preferable to extend `Abstr",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/860
https://github.com/qupath/qupath/issues/860:2020,Performance,perform,perform,2020,"ory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it should succeed but perform badly. **Expected behavior**; `ImageJServer` should fully read 2D images - since using a virtual stack brings no benefits - and most multidimensional images, as long as they are small enough to fit comfortably in memory. Synchronization should be reduced, and resizing limited. It will sometimes still not be possible to open a non-pyramidal image via ImageJ directly. In this case, running `convert-ome` should be able to efficiently generate an OME-TIFF image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; It may be preferable to extend `AbstractTileableImageServer` rather than `AbstractImageServer` to take advantage of the tile caching in the former.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/860
https://github.com/qupath/qupath/issues/860:1519,Safety,safe,safe,1519,"eventually terminated with an OOM. This occurs because `ImageJServer` first opens the image as a virtual stack, then computes memory requirements/stack size. Based upon this, it may then open the same image as a regular `ImagePlus`. This should be unnecessary, and also temporarily doubles the memory requirements for 2D images because the original has not yet been closed. When investigating this, three other issues were noticed:. 1. The performance impact of using virtual stacks is *much* worse than I had expected, particularly for large 2D images that will frequently be cropped/duplicated. Extracting a region - even for a 2D plane - causes the data to be read from disk again.; 2. [`readBufferedImage(request)`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core-processing/src/main/java/qupath/imagej/images/servers/ImageJServer.java#L298) is synchronized - but the entire method does not need to be. This prevents calls to resize the extracted image being parallelized, even though this should be safe.; 3. Resizing is called once per channel, including for RGB images. However, in ImageJ's world the RGB image is treated as a single channel - and so any resizing is actually performed 3x rather than 1x. The last two operations seem to be entirely unnecessary. **To Reproduce**; The problem should occur when trying to open any large TIFF that has been written by ImageJ. If it is at the bounds of the available memory, this is likely to fail. If enough memory is available, it should succeed but perform badly. **Expected behavior**; `ImageJServer` should fully read 2D images - since using a virtual stack brings no benefits - and most multidimensional images, as long as they are small enough to fit comfortably in memory. Synchronization should be reduced, and resizing limited. It will sometimes still not be possible to open a non-pyramidal image via ImageJ directly. In this case, running `convert-ome` should be able to efficiently generate a",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/860
https://github.com/qupath/qupath/issues/861:1524,Availability,avail,available,1524,"## Bug report. **Describe the bug**; Many `ImageServer` implementations are derived from `AbstractTileableImageServer`, which breaks requests into fixed tiles and fulfils them using a cache where possible. Duplicate tile requests occur e.g. when writing an OME-TIFF using multithreading or running a pixel classifier and with a tile size larger than the tile size of the reader. It can result in the same image tiles being read multiple times, potentially adding considerable unnecessary overhead (since tile decompression can be a bottleneck). Reducing or eliminating this can potentially improve performance substantially, particularly for cases where tile reading is slow. **To Reproduce**; The bug can easily be reproduced when writing a pyramidal OME-TIFF or training a pixel classifier - although unfortunately it isn't easy to *tell* that it has been reproduced, since the duplicate requests aren't reported. The problem was identified through VisualVM profiling and running in debug mode, checking for repeated tile requests while trying to improve image write performance. **Expected behavior**; If a thread wants to obtain a tile that is currently being read by another thread, the first thread should wait until the tile is returned - it should *not* submit a new read request. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; This isn't really an issue when only viewing images, since requests are made that perfectly match tiles available through the `ImageServer` and pending requests are checked. However it can be an issue when regions are requested in any other way. Any solution should avoid generating more threads within an `ImageServer`.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/861
https://github.com/qupath/qupath/issues/861:184,Performance,cache,cache,184,"## Bug report. **Describe the bug**; Many `ImageServer` implementations are derived from `AbstractTileableImageServer`, which breaks requests into fixed tiles and fulfils them using a cache where possible. Duplicate tile requests occur e.g. when writing an OME-TIFF using multithreading or running a pixel classifier and with a tile size larger than the tile size of the reader. It can result in the same image tiles being read multiple times, potentially adding considerable unnecessary overhead (since tile decompression can be a bottleneck). Reducing or eliminating this can potentially improve performance substantially, particularly for cases where tile reading is slow. **To Reproduce**; The bug can easily be reproduced when writing a pyramidal OME-TIFF or training a pixel classifier - although unfortunately it isn't easy to *tell* that it has been reproduced, since the duplicate requests aren't reported. The problem was identified through VisualVM profiling and running in debug mode, checking for repeated tile requests while trying to improve image write performance. **Expected behavior**; If a thread wants to obtain a tile that is currently being read by another thread, the first thread should wait until the tile is returned - it should *not* submit a new read request. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; This isn't really an issue when only viewing images, since requests are made that perfectly match tiles available through the `ImageServer` and pending requests are checked. However it can be an issue when regions are requested in any other way. Any solution should avoid generating more threads within an `ImageServer`.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/861
https://github.com/qupath/qupath/issues/861:532,Performance,bottleneck,bottleneck,532,"## Bug report. **Describe the bug**; Many `ImageServer` implementations are derived from `AbstractTileableImageServer`, which breaks requests into fixed tiles and fulfils them using a cache where possible. Duplicate tile requests occur e.g. when writing an OME-TIFF using multithreading or running a pixel classifier and with a tile size larger than the tile size of the reader. It can result in the same image tiles being read multiple times, potentially adding considerable unnecessary overhead (since tile decompression can be a bottleneck). Reducing or eliminating this can potentially improve performance substantially, particularly for cases where tile reading is slow. **To Reproduce**; The bug can easily be reproduced when writing a pyramidal OME-TIFF or training a pixel classifier - although unfortunately it isn't easy to *tell* that it has been reproduced, since the duplicate requests aren't reported. The problem was identified through VisualVM profiling and running in debug mode, checking for repeated tile requests while trying to improve image write performance. **Expected behavior**; If a thread wants to obtain a tile that is currently being read by another thread, the first thread should wait until the tile is returned - it should *not* submit a new read request. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; This isn't really an issue when only viewing images, since requests are made that perfectly match tiles available through the `ImageServer` and pending requests are checked. However it can be an issue when regions are requested in any other way. Any solution should avoid generating more threads within an `ImageServer`.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/861
https://github.com/qupath/qupath/issues/861:598,Performance,perform,performance,598,"## Bug report. **Describe the bug**; Many `ImageServer` implementations are derived from `AbstractTileableImageServer`, which breaks requests into fixed tiles and fulfils them using a cache where possible. Duplicate tile requests occur e.g. when writing an OME-TIFF using multithreading or running a pixel classifier and with a tile size larger than the tile size of the reader. It can result in the same image tiles being read multiple times, potentially adding considerable unnecessary overhead (since tile decompression can be a bottleneck). Reducing or eliminating this can potentially improve performance substantially, particularly for cases where tile reading is slow. **To Reproduce**; The bug can easily be reproduced when writing a pyramidal OME-TIFF or training a pixel classifier - although unfortunately it isn't easy to *tell* that it has been reproduced, since the duplicate requests aren't reported. The problem was identified through VisualVM profiling and running in debug mode, checking for repeated tile requests while trying to improve image write performance. **Expected behavior**; If a thread wants to obtain a tile that is currently being read by another thread, the first thread should wait until the tile is returned - it should *not* submit a new read request. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; This isn't really an issue when only viewing images, since requests are made that perfectly match tiles available through the `ImageServer` and pending requests are checked. However it can be an issue when regions are requested in any other way. Any solution should avoid generating more threads within an `ImageServer`.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/861
https://github.com/qupath/qupath/issues/861:1069,Performance,perform,performance,1069,"## Bug report. **Describe the bug**; Many `ImageServer` implementations are derived from `AbstractTileableImageServer`, which breaks requests into fixed tiles and fulfils them using a cache where possible. Duplicate tile requests occur e.g. when writing an OME-TIFF using multithreading or running a pixel classifier and with a tile size larger than the tile size of the reader. It can result in the same image tiles being read multiple times, potentially adding considerable unnecessary overhead (since tile decompression can be a bottleneck). Reducing or eliminating this can potentially improve performance substantially, particularly for cases where tile reading is slow. **To Reproduce**; The bug can easily be reproduced when writing a pyramidal OME-TIFF or training a pixel classifier - although unfortunately it isn't easy to *tell* that it has been reproduced, since the duplicate requests aren't reported. The problem was identified through VisualVM profiling and running in debug mode, checking for repeated tile requests while trying to improve image write performance. **Expected behavior**; If a thread wants to obtain a tile that is currently being read by another thread, the first thread should wait until the tile is returned - it should *not* submit a new read request. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; This isn't really an issue when only viewing images, since requests are made that perfectly match tiles available through the `ImageServer` and pending requests are checked. However it can be an issue when regions are requested in any other way. Any solution should avoid generating more threads within an `ImageServer`.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/861
https://github.com/qupath/qupath/issues/861:1686,Safety,avoid,avoid,1686,"## Bug report. **Describe the bug**; Many `ImageServer` implementations are derived from `AbstractTileableImageServer`, which breaks requests into fixed tiles and fulfils them using a cache where possible. Duplicate tile requests occur e.g. when writing an OME-TIFF using multithreading or running a pixel classifier and with a tile size larger than the tile size of the reader. It can result in the same image tiles being read multiple times, potentially adding considerable unnecessary overhead (since tile decompression can be a bottleneck). Reducing or eliminating this can potentially improve performance substantially, particularly for cases where tile reading is slow. **To Reproduce**; The bug can easily be reproduced when writing a pyramidal OME-TIFF or training a pixel classifier - although unfortunately it isn't easy to *tell* that it has been reproduced, since the duplicate requests aren't reported. The problem was identified through VisualVM profiling and running in debug mode, checking for repeated tile requests while trying to improve image write performance. **Expected behavior**; If a thread wants to obtain a tile that is currently being read by another thread, the first thread should wait until the tile is returned - it should *not* submit a new read request. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.0 (and earlier). **Additional context**; This isn't really an issue when only viewing images, since requests are made that perfectly match tiles available through the `ImageServer` and pending requests are checked. However it can be an issue when regions are requested in any other way. Any solution should avoid generating more threads within an `ImageServer`.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/861
https://github.com/qupath/qupath/issues/865:1508,Energy Efficiency,Reduce,Reduce,1508,"## Bug report. **Describe the bug**; `BioFormatsImageServer` lazily creates a new reader for each thread as required. This is ok if the readers are fast to initialize, but can be a major bottleneck if they are not. This was noticed when working with large CZI images (>30 GB). Initializing a reader took ~3-5s. However, because the method was synchronized and 32 threads were wanting to get pixels for the viewer, many other threads were blocked. This meant that even viewing the image properly was not possible for well over a minute. Once the readers were created, performance was fine. **To Reproduce**; Unfortunately, I'm not aware of any public images images that can be used to test this. It might be evident with any large Axioscan images (I'm not entirely sure). Once the image is open, zoom in and wait for tiles to appear. If experiencing the problem, this will take an unreasonable amount of time. VisualVM indicates that the bottleneck is initializing readers. **Expected behavior**; No major delay in requesting tiles once the image has been opened. **Desktop (please complete the following information):**; - OS: macOS (but likely to be all); - QuPath Version 0.3.0. **Screenshots**; Compare the 'total time' (>100s) with the actual time spent using the CPU (3.6s) for a thread requesting image tiles. ![Screenshot 2021-12-15 at 12 49 12](https://user-images.githubusercontent.com/4690904/146189714-d4197439-8b67-4b79-bf64-f400de9b7b72.png). **Additional context**; A few things could help:; * Reduce the maximum number of tile request threads; * Reduce synchronization when creating readers; * Limit the number of readers Bio-Formats can create, independently of the number of threads making tile requests; * Reduce the calls to `isThisType()` when creating a reader (when the class of the reader can be known)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/865
https://github.com/qupath/qupath/issues/865:1561,Energy Efficiency,Reduce,Reduce,1561,"## Bug report. **Describe the bug**; `BioFormatsImageServer` lazily creates a new reader for each thread as required. This is ok if the readers are fast to initialize, but can be a major bottleneck if they are not. This was noticed when working with large CZI images (>30 GB). Initializing a reader took ~3-5s. However, because the method was synchronized and 32 threads were wanting to get pixels for the viewer, many other threads were blocked. This meant that even viewing the image properly was not possible for well over a minute. Once the readers were created, performance was fine. **To Reproduce**; Unfortunately, I'm not aware of any public images images that can be used to test this. It might be evident with any large Axioscan images (I'm not entirely sure). Once the image is open, zoom in and wait for tiles to appear. If experiencing the problem, this will take an unreasonable amount of time. VisualVM indicates that the bottleneck is initializing readers. **Expected behavior**; No major delay in requesting tiles once the image has been opened. **Desktop (please complete the following information):**; - OS: macOS (but likely to be all); - QuPath Version 0.3.0. **Screenshots**; Compare the 'total time' (>100s) with the actual time spent using the CPU (3.6s) for a thread requesting image tiles. ![Screenshot 2021-12-15 at 12 49 12](https://user-images.githubusercontent.com/4690904/146189714-d4197439-8b67-4b79-bf64-f400de9b7b72.png). **Additional context**; A few things could help:; * Reduce the maximum number of tile request threads; * Reduce synchronization when creating readers; * Limit the number of readers Bio-Formats can create, independently of the number of threads making tile requests; * Reduce the calls to `isThisType()` when creating a reader (when the class of the reader can be known)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/865
https://github.com/qupath/qupath/issues/865:1724,Energy Efficiency,Reduce,Reduce,1724,"## Bug report. **Describe the bug**; `BioFormatsImageServer` lazily creates a new reader for each thread as required. This is ok if the readers are fast to initialize, but can be a major bottleneck if they are not. This was noticed when working with large CZI images (>30 GB). Initializing a reader took ~3-5s. However, because the method was synchronized and 32 threads were wanting to get pixels for the viewer, many other threads were blocked. This meant that even viewing the image properly was not possible for well over a minute. Once the readers were created, performance was fine. **To Reproduce**; Unfortunately, I'm not aware of any public images images that can be used to test this. It might be evident with any large Axioscan images (I'm not entirely sure). Once the image is open, zoom in and wait for tiles to appear. If experiencing the problem, this will take an unreasonable amount of time. VisualVM indicates that the bottleneck is initializing readers. **Expected behavior**; No major delay in requesting tiles once the image has been opened. **Desktop (please complete the following information):**; - OS: macOS (but likely to be all); - QuPath Version 0.3.0. **Screenshots**; Compare the 'total time' (>100s) with the actual time spent using the CPU (3.6s) for a thread requesting image tiles. ![Screenshot 2021-12-15 at 12 49 12](https://user-images.githubusercontent.com/4690904/146189714-d4197439-8b67-4b79-bf64-f400de9b7b72.png). **Additional context**; A few things could help:; * Reduce the maximum number of tile request threads; * Reduce synchronization when creating readers; * Limit the number of readers Bio-Formats can create, independently of the number of threads making tile requests; * Reduce the calls to `isThisType()` when creating a reader (when the class of the reader can be known)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/865
https://github.com/qupath/qupath/issues/865:343,Integrability,synchroniz,synchronized,343,"## Bug report. **Describe the bug**; `BioFormatsImageServer` lazily creates a new reader for each thread as required. This is ok if the readers are fast to initialize, but can be a major bottleneck if they are not. This was noticed when working with large CZI images (>30 GB). Initializing a reader took ~3-5s. However, because the method was synchronized and 32 threads were wanting to get pixels for the viewer, many other threads were blocked. This meant that even viewing the image properly was not possible for well over a minute. Once the readers were created, performance was fine. **To Reproduce**; Unfortunately, I'm not aware of any public images images that can be used to test this. It might be evident with any large Axioscan images (I'm not entirely sure). Once the image is open, zoom in and wait for tiles to appear. If experiencing the problem, this will take an unreasonable amount of time. VisualVM indicates that the bottleneck is initializing readers. **Expected behavior**; No major delay in requesting tiles once the image has been opened. **Desktop (please complete the following information):**; - OS: macOS (but likely to be all); - QuPath Version 0.3.0. **Screenshots**; Compare the 'total time' (>100s) with the actual time spent using the CPU (3.6s) for a thread requesting image tiles. ![Screenshot 2021-12-15 at 12 49 12](https://user-images.githubusercontent.com/4690904/146189714-d4197439-8b67-4b79-bf64-f400de9b7b72.png). **Additional context**; A few things could help:; * Reduce the maximum number of tile request threads; * Reduce synchronization when creating readers; * Limit the number of readers Bio-Formats can create, independently of the number of threads making tile requests; * Reduce the calls to `isThisType()` when creating a reader (when the class of the reader can be known)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/865
https://github.com/qupath/qupath/issues/865:1568,Integrability,synchroniz,synchronization,1568,"## Bug report. **Describe the bug**; `BioFormatsImageServer` lazily creates a new reader for each thread as required. This is ok if the readers are fast to initialize, but can be a major bottleneck if they are not. This was noticed when working with large CZI images (>30 GB). Initializing a reader took ~3-5s. However, because the method was synchronized and 32 threads were wanting to get pixels for the viewer, many other threads were blocked. This meant that even viewing the image properly was not possible for well over a minute. Once the readers were created, performance was fine. **To Reproduce**; Unfortunately, I'm not aware of any public images images that can be used to test this. It might be evident with any large Axioscan images (I'm not entirely sure). Once the image is open, zoom in and wait for tiles to appear. If experiencing the problem, this will take an unreasonable amount of time. VisualVM indicates that the bottleneck is initializing readers. **Expected behavior**; No major delay in requesting tiles once the image has been opened. **Desktop (please complete the following information):**; - OS: macOS (but likely to be all); - QuPath Version 0.3.0. **Screenshots**; Compare the 'total time' (>100s) with the actual time spent using the CPU (3.6s) for a thread requesting image tiles. ![Screenshot 2021-12-15 at 12 49 12](https://user-images.githubusercontent.com/4690904/146189714-d4197439-8b67-4b79-bf64-f400de9b7b72.png). **Additional context**; A few things could help:; * Reduce the maximum number of tile request threads; * Reduce synchronization when creating readers; * Limit the number of readers Bio-Formats can create, independently of the number of threads making tile requests; * Reduce the calls to `isThisType()` when creating a reader (when the class of the reader can be known)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/865
https://github.com/qupath/qupath/issues/865:187,Performance,bottleneck,bottleneck,187,"## Bug report. **Describe the bug**; `BioFormatsImageServer` lazily creates a new reader for each thread as required. This is ok if the readers are fast to initialize, but can be a major bottleneck if they are not. This was noticed when working with large CZI images (>30 GB). Initializing a reader took ~3-5s. However, because the method was synchronized and 32 threads were wanting to get pixels for the viewer, many other threads were blocked. This meant that even viewing the image properly was not possible for well over a minute. Once the readers were created, performance was fine. **To Reproduce**; Unfortunately, I'm not aware of any public images images that can be used to test this. It might be evident with any large Axioscan images (I'm not entirely sure). Once the image is open, zoom in and wait for tiles to appear. If experiencing the problem, this will take an unreasonable amount of time. VisualVM indicates that the bottleneck is initializing readers. **Expected behavior**; No major delay in requesting tiles once the image has been opened. **Desktop (please complete the following information):**; - OS: macOS (but likely to be all); - QuPath Version 0.3.0. **Screenshots**; Compare the 'total time' (>100s) with the actual time spent using the CPU (3.6s) for a thread requesting image tiles. ![Screenshot 2021-12-15 at 12 49 12](https://user-images.githubusercontent.com/4690904/146189714-d4197439-8b67-4b79-bf64-f400de9b7b72.png). **Additional context**; A few things could help:; * Reduce the maximum number of tile request threads; * Reduce synchronization when creating readers; * Limit the number of readers Bio-Formats can create, independently of the number of threads making tile requests; * Reduce the calls to `isThisType()` when creating a reader (when the class of the reader can be known)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/865
https://github.com/qupath/qupath/issues/865:567,Performance,perform,performance,567,"## Bug report. **Describe the bug**; `BioFormatsImageServer` lazily creates a new reader for each thread as required. This is ok if the readers are fast to initialize, but can be a major bottleneck if they are not. This was noticed when working with large CZI images (>30 GB). Initializing a reader took ~3-5s. However, because the method was synchronized and 32 threads were wanting to get pixels for the viewer, many other threads were blocked. This meant that even viewing the image properly was not possible for well over a minute. Once the readers were created, performance was fine. **To Reproduce**; Unfortunately, I'm not aware of any public images images that can be used to test this. It might be evident with any large Axioscan images (I'm not entirely sure). Once the image is open, zoom in and wait for tiles to appear. If experiencing the problem, this will take an unreasonable amount of time. VisualVM indicates that the bottleneck is initializing readers. **Expected behavior**; No major delay in requesting tiles once the image has been opened. **Desktop (please complete the following information):**; - OS: macOS (but likely to be all); - QuPath Version 0.3.0. **Screenshots**; Compare the 'total time' (>100s) with the actual time spent using the CPU (3.6s) for a thread requesting image tiles. ![Screenshot 2021-12-15 at 12 49 12](https://user-images.githubusercontent.com/4690904/146189714-d4197439-8b67-4b79-bf64-f400de9b7b72.png). **Additional context**; A few things could help:; * Reduce the maximum number of tile request threads; * Reduce synchronization when creating readers; * Limit the number of readers Bio-Formats can create, independently of the number of threads making tile requests; * Reduce the calls to `isThisType()` when creating a reader (when the class of the reader can be known)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/865
https://github.com/qupath/qupath/issues/865:937,Performance,bottleneck,bottleneck,937,"## Bug report. **Describe the bug**; `BioFormatsImageServer` lazily creates a new reader for each thread as required. This is ok if the readers are fast to initialize, but can be a major bottleneck if they are not. This was noticed when working with large CZI images (>30 GB). Initializing a reader took ~3-5s. However, because the method was synchronized and 32 threads were wanting to get pixels for the viewer, many other threads were blocked. This meant that even viewing the image properly was not possible for well over a minute. Once the readers were created, performance was fine. **To Reproduce**; Unfortunately, I'm not aware of any public images images that can be used to test this. It might be evident with any large Axioscan images (I'm not entirely sure). Once the image is open, zoom in and wait for tiles to appear. If experiencing the problem, this will take an unreasonable amount of time. VisualVM indicates that the bottleneck is initializing readers. **Expected behavior**; No major delay in requesting tiles once the image has been opened. **Desktop (please complete the following information):**; - OS: macOS (but likely to be all); - QuPath Version 0.3.0. **Screenshots**; Compare the 'total time' (>100s) with the actual time spent using the CPU (3.6s) for a thread requesting image tiles. ![Screenshot 2021-12-15 at 12 49 12](https://user-images.githubusercontent.com/4690904/146189714-d4197439-8b67-4b79-bf64-f400de9b7b72.png). **Additional context**; A few things could help:; * Reduce the maximum number of tile request threads; * Reduce synchronization when creating readers; * Limit the number of readers Bio-Formats can create, independently of the number of threads making tile requests; * Reduce the calls to `isThisType()` when creating a reader (when the class of the reader can be known)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/865
https://github.com/qupath/qupath/issues/865:684,Testability,test,test,684,"## Bug report. **Describe the bug**; `BioFormatsImageServer` lazily creates a new reader for each thread as required. This is ok if the readers are fast to initialize, but can be a major bottleneck if they are not. This was noticed when working with large CZI images (>30 GB). Initializing a reader took ~3-5s. However, because the method was synchronized and 32 threads were wanting to get pixels for the viewer, many other threads were blocked. This meant that even viewing the image properly was not possible for well over a minute. Once the readers were created, performance was fine. **To Reproduce**; Unfortunately, I'm not aware of any public images images that can be used to test this. It might be evident with any large Axioscan images (I'm not entirely sure). Once the image is open, zoom in and wait for tiles to appear. If experiencing the problem, this will take an unreasonable amount of time. VisualVM indicates that the bottleneck is initializing readers. **Expected behavior**; No major delay in requesting tiles once the image has been opened. **Desktop (please complete the following information):**; - OS: macOS (but likely to be all); - QuPath Version 0.3.0. **Screenshots**; Compare the 'total time' (>100s) with the actual time spent using the CPU (3.6s) for a thread requesting image tiles. ![Screenshot 2021-12-15 at 12 49 12](https://user-images.githubusercontent.com/4690904/146189714-d4197439-8b67-4b79-bf64-f400de9b7b72.png). **Additional context**; A few things could help:; * Reduce the maximum number of tile request threads; * Reduce synchronization when creating readers; * Limit the number of readers Bio-Formats can create, independently of the number of threads making tile requests; * Reduce the calls to `isThisType()` when creating a reader (when the class of the reader can be known)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/865
https://github.com/qupath/qupath/issues/866:190,Availability,Down,Download,190,"**Description**; When I attempt to install QuPath 0.3.0 on Windows 10, the text of QuPath is unreadable (please see screenshot below). **To Reproduce**; Steps to reproduce the behavior:; 1. Download QuPath from https://github.com/qupath/qupath/releases/download/v0.3.0/QuPath-0.3.0-Windows.msi.; 2. Bypass Windows Defender security alerts.; 3. Run the installer.; 4. Open QuPath 0.3.0. **Screenshots**. ![image](https://user-images.githubusercontent.com/43010710/146222250-0d831aa3-f959-4bec-95d4-6af049cf994e.png). **Desktop**; - OS: Windows; - QuPath Version: 0.3.0. **Hash**; The SHA256 hash of the file I downloaded is:; ```; certutil -hashfile QuPath-0.3.0-Windows.msi SHA256; SHA256 hash of QuPath-0.3.0-Windows.msi:; d3661adca21ab8ea31acfa5d150345fb4b46a983526803fce3869f520949965e; ```; However, I cannot find the hash of the file from the GitHub API: https://api.github.com/repos/qupath/qupath/releases (see [here](https://stackoverflow.com/questions/29671303/where-to-get-md5-hashes-from-a-github-release)).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/866
https://github.com/qupath/qupath/issues/866:253,Availability,down,download,253,"**Description**; When I attempt to install QuPath 0.3.0 on Windows 10, the text of QuPath is unreadable (please see screenshot below). **To Reproduce**; Steps to reproduce the behavior:; 1. Download QuPath from https://github.com/qupath/qupath/releases/download/v0.3.0/QuPath-0.3.0-Windows.msi.; 2. Bypass Windows Defender security alerts.; 3. Run the installer.; 4. Open QuPath 0.3.0. **Screenshots**. ![image](https://user-images.githubusercontent.com/43010710/146222250-0d831aa3-f959-4bec-95d4-6af049cf994e.png). **Desktop**; - OS: Windows; - QuPath Version: 0.3.0. **Hash**; The SHA256 hash of the file I downloaded is:; ```; certutil -hashfile QuPath-0.3.0-Windows.msi SHA256; SHA256 hash of QuPath-0.3.0-Windows.msi:; d3661adca21ab8ea31acfa5d150345fb4b46a983526803fce3869f520949965e; ```; However, I cannot find the hash of the file from the GitHub API: https://api.github.com/repos/qupath/qupath/releases (see [here](https://stackoverflow.com/questions/29671303/where-to-get-md5-hashes-from-a-github-release)).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/866
https://github.com/qupath/qupath/issues/866:609,Availability,down,downloaded,609,"**Description**; When I attempt to install QuPath 0.3.0 on Windows 10, the text of QuPath is unreadable (please see screenshot below). **To Reproduce**; Steps to reproduce the behavior:; 1. Download QuPath from https://github.com/qupath/qupath/releases/download/v0.3.0/QuPath-0.3.0-Windows.msi.; 2. Bypass Windows Defender security alerts.; 3. Run the installer.; 4. Open QuPath 0.3.0. **Screenshots**. ![image](https://user-images.githubusercontent.com/43010710/146222250-0d831aa3-f959-4bec-95d4-6af049cf994e.png). **Desktop**; - OS: Windows; - QuPath Version: 0.3.0. **Hash**; The SHA256 hash of the file I downloaded is:; ```; certutil -hashfile QuPath-0.3.0-Windows.msi SHA256; SHA256 hash of QuPath-0.3.0-Windows.msi:; d3661adca21ab8ea31acfa5d150345fb4b46a983526803fce3869f520949965e; ```; However, I cannot find the hash of the file from the GitHub API: https://api.github.com/repos/qupath/qupath/releases (see [here](https://stackoverflow.com/questions/29671303/where-to-get-md5-hashes-from-a-github-release)).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/866
https://github.com/qupath/qupath/issues/866:35,Deployability,install,install,35,"**Description**; When I attempt to install QuPath 0.3.0 on Windows 10, the text of QuPath is unreadable (please see screenshot below). **To Reproduce**; Steps to reproduce the behavior:; 1. Download QuPath from https://github.com/qupath/qupath/releases/download/v0.3.0/QuPath-0.3.0-Windows.msi.; 2. Bypass Windows Defender security alerts.; 3. Run the installer.; 4. Open QuPath 0.3.0. **Screenshots**. ![image](https://user-images.githubusercontent.com/43010710/146222250-0d831aa3-f959-4bec-95d4-6af049cf994e.png). **Desktop**; - OS: Windows; - QuPath Version: 0.3.0. **Hash**; The SHA256 hash of the file I downloaded is:; ```; certutil -hashfile QuPath-0.3.0-Windows.msi SHA256; SHA256 hash of QuPath-0.3.0-Windows.msi:; d3661adca21ab8ea31acfa5d150345fb4b46a983526803fce3869f520949965e; ```; However, I cannot find the hash of the file from the GitHub API: https://api.github.com/repos/qupath/qupath/releases (see [here](https://stackoverflow.com/questions/29671303/where-to-get-md5-hashes-from-a-github-release)).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/866
https://github.com/qupath/qupath/issues/866:244,Deployability,release,releases,244,"**Description**; When I attempt to install QuPath 0.3.0 on Windows 10, the text of QuPath is unreadable (please see screenshot below). **To Reproduce**; Steps to reproduce the behavior:; 1. Download QuPath from https://github.com/qupath/qupath/releases/download/v0.3.0/QuPath-0.3.0-Windows.msi.; 2. Bypass Windows Defender security alerts.; 3. Run the installer.; 4. Open QuPath 0.3.0. **Screenshots**. ![image](https://user-images.githubusercontent.com/43010710/146222250-0d831aa3-f959-4bec-95d4-6af049cf994e.png). **Desktop**; - OS: Windows; - QuPath Version: 0.3.0. **Hash**; The SHA256 hash of the file I downloaded is:; ```; certutil -hashfile QuPath-0.3.0-Windows.msi SHA256; SHA256 hash of QuPath-0.3.0-Windows.msi:; d3661adca21ab8ea31acfa5d150345fb4b46a983526803fce3869f520949965e; ```; However, I cannot find the hash of the file from the GitHub API: https://api.github.com/repos/qupath/qupath/releases (see [here](https://stackoverflow.com/questions/29671303/where-to-get-md5-hashes-from-a-github-release)).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/866
https://github.com/qupath/qupath/issues/866:352,Deployability,install,installer,352,"**Description**; When I attempt to install QuPath 0.3.0 on Windows 10, the text of QuPath is unreadable (please see screenshot below). **To Reproduce**; Steps to reproduce the behavior:; 1. Download QuPath from https://github.com/qupath/qupath/releases/download/v0.3.0/QuPath-0.3.0-Windows.msi.; 2. Bypass Windows Defender security alerts.; 3. Run the installer.; 4. Open QuPath 0.3.0. **Screenshots**. ![image](https://user-images.githubusercontent.com/43010710/146222250-0d831aa3-f959-4bec-95d4-6af049cf994e.png). **Desktop**; - OS: Windows; - QuPath Version: 0.3.0. **Hash**; The SHA256 hash of the file I downloaded is:; ```; certutil -hashfile QuPath-0.3.0-Windows.msi SHA256; SHA256 hash of QuPath-0.3.0-Windows.msi:; d3661adca21ab8ea31acfa5d150345fb4b46a983526803fce3869f520949965e; ```; However, I cannot find the hash of the file from the GitHub API: https://api.github.com/repos/qupath/qupath/releases (see [here](https://stackoverflow.com/questions/29671303/where-to-get-md5-hashes-from-a-github-release)).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/866
https://github.com/qupath/qupath/issues/866:903,Deployability,release,releases,903,"**Description**; When I attempt to install QuPath 0.3.0 on Windows 10, the text of QuPath is unreadable (please see screenshot below). **To Reproduce**; Steps to reproduce the behavior:; 1. Download QuPath from https://github.com/qupath/qupath/releases/download/v0.3.0/QuPath-0.3.0-Windows.msi.; 2. Bypass Windows Defender security alerts.; 3. Run the installer.; 4. Open QuPath 0.3.0. **Screenshots**. ![image](https://user-images.githubusercontent.com/43010710/146222250-0d831aa3-f959-4bec-95d4-6af049cf994e.png). **Desktop**; - OS: Windows; - QuPath Version: 0.3.0. **Hash**; The SHA256 hash of the file I downloaded is:; ```; certutil -hashfile QuPath-0.3.0-Windows.msi SHA256; SHA256 hash of QuPath-0.3.0-Windows.msi:; d3661adca21ab8ea31acfa5d150345fb4b46a983526803fce3869f520949965e; ```; However, I cannot find the hash of the file from the GitHub API: https://api.github.com/repos/qupath/qupath/releases (see [here](https://stackoverflow.com/questions/29671303/where-to-get-md5-hashes-from-a-github-release)).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/866
https://github.com/qupath/qupath/issues/866:1007,Deployability,release,release,1007,"**Description**; When I attempt to install QuPath 0.3.0 on Windows 10, the text of QuPath is unreadable (please see screenshot below). **To Reproduce**; Steps to reproduce the behavior:; 1. Download QuPath from https://github.com/qupath/qupath/releases/download/v0.3.0/QuPath-0.3.0-Windows.msi.; 2. Bypass Windows Defender security alerts.; 3. Run the installer.; 4. Open QuPath 0.3.0. **Screenshots**. ![image](https://user-images.githubusercontent.com/43010710/146222250-0d831aa3-f959-4bec-95d4-6af049cf994e.png). **Desktop**; - OS: Windows; - QuPath Version: 0.3.0. **Hash**; The SHA256 hash of the file I downloaded is:; ```; certutil -hashfile QuPath-0.3.0-Windows.msi SHA256; SHA256 hash of QuPath-0.3.0-Windows.msi:; d3661adca21ab8ea31acfa5d150345fb4b46a983526803fce3869f520949965e; ```; However, I cannot find the hash of the file from the GitHub API: https://api.github.com/repos/qupath/qupath/releases (see [here](https://stackoverflow.com/questions/29671303/where-to-get-md5-hashes-from-a-github-release)).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/866
https://github.com/qupath/qupath/issues/866:323,Security,secur,security,323,"**Description**; When I attempt to install QuPath 0.3.0 on Windows 10, the text of QuPath is unreadable (please see screenshot below). **To Reproduce**; Steps to reproduce the behavior:; 1. Download QuPath from https://github.com/qupath/qupath/releases/download/v0.3.0/QuPath-0.3.0-Windows.msi.; 2. Bypass Windows Defender security alerts.; 3. Run the installer.; 4. Open QuPath 0.3.0. **Screenshots**. ![image](https://user-images.githubusercontent.com/43010710/146222250-0d831aa3-f959-4bec-95d4-6af049cf994e.png). **Desktop**; - OS: Windows; - QuPath Version: 0.3.0. **Hash**; The SHA256 hash of the file I downloaded is:; ```; certutil -hashfile QuPath-0.3.0-Windows.msi SHA256; SHA256 hash of QuPath-0.3.0-Windows.msi:; d3661adca21ab8ea31acfa5d150345fb4b46a983526803fce3869f520949965e; ```; However, I cannot find the hash of the file from the GitHub API: https://api.github.com/repos/qupath/qupath/releases (see [here](https://stackoverflow.com/questions/29671303/where-to-get-md5-hashes-from-a-github-release)).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/866
https://github.com/qupath/qupath/issues/866:571,Security,Hash,Hash,571,"**Description**; When I attempt to install QuPath 0.3.0 on Windows 10, the text of QuPath is unreadable (please see screenshot below). **To Reproduce**; Steps to reproduce the behavior:; 1. Download QuPath from https://github.com/qupath/qupath/releases/download/v0.3.0/QuPath-0.3.0-Windows.msi.; 2. Bypass Windows Defender security alerts.; 3. Run the installer.; 4. Open QuPath 0.3.0. **Screenshots**. ![image](https://user-images.githubusercontent.com/43010710/146222250-0d831aa3-f959-4bec-95d4-6af049cf994e.png). **Desktop**; - OS: Windows; - QuPath Version: 0.3.0. **Hash**; The SHA256 hash of the file I downloaded is:; ```; certutil -hashfile QuPath-0.3.0-Windows.msi SHA256; SHA256 hash of QuPath-0.3.0-Windows.msi:; d3661adca21ab8ea31acfa5d150345fb4b46a983526803fce3869f520949965e; ```; However, I cannot find the hash of the file from the GitHub API: https://api.github.com/repos/qupath/qupath/releases (see [here](https://stackoverflow.com/questions/29671303/where-to-get-md5-hashes-from-a-github-release)).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/866
https://github.com/qupath/qupath/issues/866:590,Security,hash,hash,590,"**Description**; When I attempt to install QuPath 0.3.0 on Windows 10, the text of QuPath is unreadable (please see screenshot below). **To Reproduce**; Steps to reproduce the behavior:; 1. Download QuPath from https://github.com/qupath/qupath/releases/download/v0.3.0/QuPath-0.3.0-Windows.msi.; 2. Bypass Windows Defender security alerts.; 3. Run the installer.; 4. Open QuPath 0.3.0. **Screenshots**. ![image](https://user-images.githubusercontent.com/43010710/146222250-0d831aa3-f959-4bec-95d4-6af049cf994e.png). **Desktop**; - OS: Windows; - QuPath Version: 0.3.0. **Hash**; The SHA256 hash of the file I downloaded is:; ```; certutil -hashfile QuPath-0.3.0-Windows.msi SHA256; SHA256 hash of QuPath-0.3.0-Windows.msi:; d3661adca21ab8ea31acfa5d150345fb4b46a983526803fce3869f520949965e; ```; However, I cannot find the hash of the file from the GitHub API: https://api.github.com/repos/qupath/qupath/releases (see [here](https://stackoverflow.com/questions/29671303/where-to-get-md5-hashes-from-a-github-release)).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/866
https://github.com/qupath/qupath/issues/866:640,Security,hash,hashfile,640,"**Description**; When I attempt to install QuPath 0.3.0 on Windows 10, the text of QuPath is unreadable (please see screenshot below). **To Reproduce**; Steps to reproduce the behavior:; 1. Download QuPath from https://github.com/qupath/qupath/releases/download/v0.3.0/QuPath-0.3.0-Windows.msi.; 2. Bypass Windows Defender security alerts.; 3. Run the installer.; 4. Open QuPath 0.3.0. **Screenshots**. ![image](https://user-images.githubusercontent.com/43010710/146222250-0d831aa3-f959-4bec-95d4-6af049cf994e.png). **Desktop**; - OS: Windows; - QuPath Version: 0.3.0. **Hash**; The SHA256 hash of the file I downloaded is:; ```; certutil -hashfile QuPath-0.3.0-Windows.msi SHA256; SHA256 hash of QuPath-0.3.0-Windows.msi:; d3661adca21ab8ea31acfa5d150345fb4b46a983526803fce3869f520949965e; ```; However, I cannot find the hash of the file from the GitHub API: https://api.github.com/repos/qupath/qupath/releases (see [here](https://stackoverflow.com/questions/29671303/where-to-get-md5-hashes-from-a-github-release)).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/866
https://github.com/qupath/qupath/issues/866:689,Security,hash,hash,689,"**Description**; When I attempt to install QuPath 0.3.0 on Windows 10, the text of QuPath is unreadable (please see screenshot below). **To Reproduce**; Steps to reproduce the behavior:; 1. Download QuPath from https://github.com/qupath/qupath/releases/download/v0.3.0/QuPath-0.3.0-Windows.msi.; 2. Bypass Windows Defender security alerts.; 3. Run the installer.; 4. Open QuPath 0.3.0. **Screenshots**. ![image](https://user-images.githubusercontent.com/43010710/146222250-0d831aa3-f959-4bec-95d4-6af049cf994e.png). **Desktop**; - OS: Windows; - QuPath Version: 0.3.0. **Hash**; The SHA256 hash of the file I downloaded is:; ```; certutil -hashfile QuPath-0.3.0-Windows.msi SHA256; SHA256 hash of QuPath-0.3.0-Windows.msi:; d3661adca21ab8ea31acfa5d150345fb4b46a983526803fce3869f520949965e; ```; However, I cannot find the hash of the file from the GitHub API: https://api.github.com/repos/qupath/qupath/releases (see [here](https://stackoverflow.com/questions/29671303/where-to-get-md5-hashes-from-a-github-release)).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/866
https://github.com/qupath/qupath/issues/866:822,Security,hash,hash,822,"**Description**; When I attempt to install QuPath 0.3.0 on Windows 10, the text of QuPath is unreadable (please see screenshot below). **To Reproduce**; Steps to reproduce the behavior:; 1. Download QuPath from https://github.com/qupath/qupath/releases/download/v0.3.0/QuPath-0.3.0-Windows.msi.; 2. Bypass Windows Defender security alerts.; 3. Run the installer.; 4. Open QuPath 0.3.0. **Screenshots**. ![image](https://user-images.githubusercontent.com/43010710/146222250-0d831aa3-f959-4bec-95d4-6af049cf994e.png). **Desktop**; - OS: Windows; - QuPath Version: 0.3.0. **Hash**; The SHA256 hash of the file I downloaded is:; ```; certutil -hashfile QuPath-0.3.0-Windows.msi SHA256; SHA256 hash of QuPath-0.3.0-Windows.msi:; d3661adca21ab8ea31acfa5d150345fb4b46a983526803fce3869f520949965e; ```; However, I cannot find the hash of the file from the GitHub API: https://api.github.com/repos/qupath/qupath/releases (see [here](https://stackoverflow.com/questions/29671303/where-to-get-md5-hashes-from-a-github-release)).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/866
https://github.com/qupath/qupath/issues/866:986,Security,hash,hashes-from-a-github-release,986,"**Description**; When I attempt to install QuPath 0.3.0 on Windows 10, the text of QuPath is unreadable (please see screenshot below). **To Reproduce**; Steps to reproduce the behavior:; 1. Download QuPath from https://github.com/qupath/qupath/releases/download/v0.3.0/QuPath-0.3.0-Windows.msi.; 2. Bypass Windows Defender security alerts.; 3. Run the installer.; 4. Open QuPath 0.3.0. **Screenshots**. ![image](https://user-images.githubusercontent.com/43010710/146222250-0d831aa3-f959-4bec-95d4-6af049cf994e.png). **Desktop**; - OS: Windows; - QuPath Version: 0.3.0. **Hash**; The SHA256 hash of the file I downloaded is:; ```; certutil -hashfile QuPath-0.3.0-Windows.msi SHA256; SHA256 hash of QuPath-0.3.0-Windows.msi:; d3661adca21ab8ea31acfa5d150345fb4b46a983526803fce3869f520949965e; ```; However, I cannot find the hash of the file from the GitHub API: https://api.github.com/repos/qupath/qupath/releases (see [here](https://stackoverflow.com/questions/29671303/where-to-get-md5-hashes-from-a-github-release)).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/866
https://github.com/qupath/qupath/pull/867:190,Availability,avail,available,190,"Aims to fix https://github.com/qupath/qupath/issues/865; This takes a different approach to parallelization, managing a pool of ImageReaders with each tile-requesting thread taking the next available reader.; If there are no readers available, and the total number is less than some maximum value (based upon the number if available processors), a new reader is generated on another thread and added to the queue when ready. This should; * avoid generating more readers than needed, with a limit separate from the number of tile requesting threads; * avoid attempting to initialize multiple readers simultaneously, which can be a bottleneck. In addition, more tests have been added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/867
https://github.com/qupath/qupath/pull/867:233,Availability,avail,available,233,"Aims to fix https://github.com/qupath/qupath/issues/865; This takes a different approach to parallelization, managing a pool of ImageReaders with each tile-requesting thread taking the next available reader.; If there are no readers available, and the total number is less than some maximum value (based upon the number if available processors), a new reader is generated on another thread and added to the queue when ready. This should; * avoid generating more readers than needed, with a limit separate from the number of tile requesting threads; * avoid attempting to initialize multiple readers simultaneously, which can be a bottleneck. In addition, more tests have been added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/867
https://github.com/qupath/qupath/pull/867:323,Availability,avail,available,323,"Aims to fix https://github.com/qupath/qupath/issues/865; This takes a different approach to parallelization, managing a pool of ImageReaders with each tile-requesting thread taking the next available reader.; If there are no readers available, and the total number is less than some maximum value (based upon the number if available processors), a new reader is generated on another thread and added to the queue when ready. This should; * avoid generating more readers than needed, with a limit separate from the number of tile requesting threads; * avoid attempting to initialize multiple readers simultaneously, which can be a bottleneck. In addition, more tests have been added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/867
https://github.com/qupath/qupath/pull/867:407,Performance,queue,queue,407,"Aims to fix https://github.com/qupath/qupath/issues/865; This takes a different approach to parallelization, managing a pool of ImageReaders with each tile-requesting thread taking the next available reader.; If there are no readers available, and the total number is less than some maximum value (based upon the number if available processors), a new reader is generated on another thread and added to the queue when ready. This should; * avoid generating more readers than needed, with a limit separate from the number of tile requesting threads; * avoid attempting to initialize multiple readers simultaneously, which can be a bottleneck. In addition, more tests have been added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/867
https://github.com/qupath/qupath/pull/867:630,Performance,bottleneck,bottleneck,630,"Aims to fix https://github.com/qupath/qupath/issues/865; This takes a different approach to parallelization, managing a pool of ImageReaders with each tile-requesting thread taking the next available reader.; If there are no readers available, and the total number is less than some maximum value (based upon the number if available processors), a new reader is generated on another thread and added to the queue when ready. This should; * avoid generating more readers than needed, with a limit separate from the number of tile requesting threads; * avoid attempting to initialize multiple readers simultaneously, which can be a bottleneck. In addition, more tests have been added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/867
https://github.com/qupath/qupath/pull/867:440,Safety,avoid,avoid,440,"Aims to fix https://github.com/qupath/qupath/issues/865; This takes a different approach to parallelization, managing a pool of ImageReaders with each tile-requesting thread taking the next available reader.; If there are no readers available, and the total number is less than some maximum value (based upon the number if available processors), a new reader is generated on another thread and added to the queue when ready. This should; * avoid generating more readers than needed, with a limit separate from the number of tile requesting threads; * avoid attempting to initialize multiple readers simultaneously, which can be a bottleneck. In addition, more tests have been added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/867
https://github.com/qupath/qupath/pull/867:551,Safety,avoid,avoid,551,"Aims to fix https://github.com/qupath/qupath/issues/865; This takes a different approach to parallelization, managing a pool of ImageReaders with each tile-requesting thread taking the next available reader.; If there are no readers available, and the total number is less than some maximum value (based upon the number if available processors), a new reader is generated on another thread and added to the queue when ready. This should; * avoid generating more readers than needed, with a limit separate from the number of tile requesting threads; * avoid attempting to initialize multiple readers simultaneously, which can be a bottleneck. In addition, more tests have been added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/867
https://github.com/qupath/qupath/pull/867:660,Testability,test,tests,660,"Aims to fix https://github.com/qupath/qupath/issues/865; This takes a different approach to parallelization, managing a pool of ImageReaders with each tile-requesting thread taking the next available reader.; If there are no readers available, and the total number is less than some maximum value (based upon the number if available processors), a new reader is generated on another thread and added to the queue when ready. This should; * avoid generating more readers than needed, with a limit separate from the number of tile requesting threads; * avoid attempting to initialize multiple readers simultaneously, which can be a bottleneck. In addition, more tests have been added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/867
https://github.com/qupath/qupath/pull/868:74,Deployability,release,release-notes,74,See http://www.slf4j.org/log4shell.html and https://docs.gradle.org/7.3.2/release-notes.html for more information,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/868
https://github.com/qupath/qupath/pull/871:316,Deployability,update,updated,316,Aims to provide a mechanism to address; * https://github.com/qupath/qupath/issues/841; * https://github.com/qupath/qupath-extension-stardist/issues/11; by ensuring that an OpenCV Net wrapped in a DnnModel can be closed without needing a reference to the Net itself.; The StarDist and TensorFlow extensions should be updated to make use of this.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/871
https://github.com/qupath/qupath/pull/871:183,Integrability,wrap,wrapped,183,Aims to provide a mechanism to address; * https://github.com/qupath/qupath/issues/841; * https://github.com/qupath/qupath-extension-stardist/issues/11; by ensuring that an OpenCV Net wrapped in a DnnModel can be closed without needing a reference to the Net itself.; The StarDist and TensorFlow extensions should be updated to make use of this.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/871
https://github.com/qupath/qupath/pull/873:296,Availability,Down,Downgrade,296,"Full list from changelog (including some updated through previous commits):; * Bio-Formats 6.8.0; * See https://www.openmicroscopy.org/2021/12/09/bio-formats-6-8-0.html for details; * JavaFX 17.0.1; * Introduced to fix UI bugs, e.g. https://github.com/qupath/qupath/issues/833; * ImageJ 1.53i; * Downgrade to support headless, see https://github.com/imagej/imagej1/issues/140; * ControlsFX 11.1.1; * Groovy 3.0.9; * Gson 2.8.9; * Logback 1.2.9; * Picocli 4.6.2; * RichTextFX 0.10.7. Additionally, updated Gradle wrapper to 7.3.3 and both badass-runtime-plugin and dependency-license-report plugins.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/873
https://github.com/qupath/qupath/pull/873:41,Deployability,update,updated,41,"Full list from changelog (including some updated through previous commits):; * Bio-Formats 6.8.0; * See https://www.openmicroscopy.org/2021/12/09/bio-formats-6-8-0.html for details; * JavaFX 17.0.1; * Introduced to fix UI bugs, e.g. https://github.com/qupath/qupath/issues/833; * ImageJ 1.53i; * Downgrade to support headless, see https://github.com/imagej/imagej1/issues/140; * ControlsFX 11.1.1; * Groovy 3.0.9; * Gson 2.8.9; * Logback 1.2.9; * Picocli 4.6.2; * RichTextFX 0.10.7. Additionally, updated Gradle wrapper to 7.3.3 and both badass-runtime-plugin and dependency-license-report plugins.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/873
https://github.com/qupath/qupath/pull/873:497,Deployability,update,updated,497,"Full list from changelog (including some updated through previous commits):; * Bio-Formats 6.8.0; * See https://www.openmicroscopy.org/2021/12/09/bio-formats-6-8-0.html for details; * JavaFX 17.0.1; * Introduced to fix UI bugs, e.g. https://github.com/qupath/qupath/issues/833; * ImageJ 1.53i; * Downgrade to support headless, see https://github.com/imagej/imagej1/issues/140; * ControlsFX 11.1.1; * Groovy 3.0.9; * Gson 2.8.9; * Logback 1.2.9; * Picocli 4.6.2; * RichTextFX 0.10.7. Additionally, updated Gradle wrapper to 7.3.3 and both badass-runtime-plugin and dependency-license-report plugins.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/873
https://github.com/qupath/qupath/pull/873:512,Integrability,wrap,wrapper,512,"Full list from changelog (including some updated through previous commits):; * Bio-Formats 6.8.0; * See https://www.openmicroscopy.org/2021/12/09/bio-formats-6-8-0.html for details; * JavaFX 17.0.1; * Introduced to fix UI bugs, e.g. https://github.com/qupath/qupath/issues/833; * ImageJ 1.53i; * Downgrade to support headless, see https://github.com/imagej/imagej1/issues/140; * ControlsFX 11.1.1; * Groovy 3.0.9; * Gson 2.8.9; * Logback 1.2.9; * Picocli 4.6.2; * RichTextFX 0.10.7. Additionally, updated Gradle wrapper to 7.3.3 and both badass-runtime-plugin and dependency-license-report plugins.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/873
https://github.com/qupath/qupath/pull/873:564,Integrability,depend,dependency-license-report,564,"Full list from changelog (including some updated through previous commits):; * Bio-Formats 6.8.0; * See https://www.openmicroscopy.org/2021/12/09/bio-formats-6-8-0.html for details; * JavaFX 17.0.1; * Introduced to fix UI bugs, e.g. https://github.com/qupath/qupath/issues/833; * ImageJ 1.53i; * Downgrade to support headless, see https://github.com/imagej/imagej1/issues/140; * ControlsFX 11.1.1; * Groovy 3.0.9; * Gson 2.8.9; * Logback 1.2.9; * Picocli 4.6.2; * RichTextFX 0.10.7. Additionally, updated Gradle wrapper to 7.3.3 and both badass-runtime-plugin and dependency-license-report plugins.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/873
https://github.com/qupath/qupath/pull/873:553,Modifiability,plugin,plugin,553,"Full list from changelog (including some updated through previous commits):; * Bio-Formats 6.8.0; * See https://www.openmicroscopy.org/2021/12/09/bio-formats-6-8-0.html for details; * JavaFX 17.0.1; * Introduced to fix UI bugs, e.g. https://github.com/qupath/qupath/issues/833; * ImageJ 1.53i; * Downgrade to support headless, see https://github.com/imagej/imagej1/issues/140; * ControlsFX 11.1.1; * Groovy 3.0.9; * Gson 2.8.9; * Logback 1.2.9; * Picocli 4.6.2; * RichTextFX 0.10.7. Additionally, updated Gradle wrapper to 7.3.3 and both badass-runtime-plugin and dependency-license-report plugins.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/873
https://github.com/qupath/qupath/pull/873:590,Modifiability,plugin,plugins,590,"Full list from changelog (including some updated through previous commits):; * Bio-Formats 6.8.0; * See https://www.openmicroscopy.org/2021/12/09/bio-formats-6-8-0.html for details; * JavaFX 17.0.1; * Introduced to fix UI bugs, e.g. https://github.com/qupath/qupath/issues/833; * ImageJ 1.53i; * Downgrade to support headless, see https://github.com/imagej/imagej1/issues/140; * ControlsFX 11.1.1; * Groovy 3.0.9; * Gson 2.8.9; * Logback 1.2.9; * Picocli 4.6.2; * RichTextFX 0.10.7. Additionally, updated Gradle wrapper to 7.3.3 and both badass-runtime-plugin and dependency-license-report plugins.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/873
https://github.com/qupath/qupath/pull/873:430,Testability,Log,Logback,430,"Full list from changelog (including some updated through previous commits):; * Bio-Formats 6.8.0; * See https://www.openmicroscopy.org/2021/12/09/bio-formats-6-8-0.html for details; * JavaFX 17.0.1; * Introduced to fix UI bugs, e.g. https://github.com/qupath/qupath/issues/833; * ImageJ 1.53i; * Downgrade to support headless, see https://github.com/imagej/imagej1/issues/140; * ControlsFX 11.1.1; * Groovy 3.0.9; * Gson 2.8.9; * Logback 1.2.9; * Picocli 4.6.2; * RichTextFX 0.10.7. Additionally, updated Gradle wrapper to 7.3.3 and both badass-runtime-plugin and dependency-license-report plugins.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/873
https://github.com/qupath/qupath/issues/874:671,Integrability,message,message,671,"## Bug report. **Describe the bug**; When using *Create composite classifier* to create a composite object classifier, a user would expect pressing 'Save & apply' to store the classifier in the workflow history, making it scriptable. Sadly, it doesn't. **To Reproduce**; Steps to reproduce the behavior:; 1. Create multiple object classifiers, e.g. following https://qupath.readthedocs.io/en/0.3/docs/tutorials/multiplex_analysis.html; 2. Run *Create composite classifier* and select several classifiers; 3. Enter a name for the classifier, and choose *Save & Apply*; 4. Check the workflow history - the composite classifier is not included. Checking the log, there is a message; ```; WARN: Object classifier isn't currently written to the workflow history, sorry...; ```. **Expected behavior**; QuPath should be helpful rather than apologetic. A `runObjectClassifier(""name"")` command should be included. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.0. **Additional context**; *Load object classifier* and *Apply classifiers sequentially* can be used instead.; Alternatively, the composite classifier can be saved and then later run via *Load object classifier*.; But these required workarounds are not very intuitive.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/874
https://github.com/qupath/qupath/issues/874:1016,Performance,Load,Load,1016,"## Bug report. **Describe the bug**; When using *Create composite classifier* to create a composite object classifier, a user would expect pressing 'Save & apply' to store the classifier in the workflow history, making it scriptable. Sadly, it doesn't. **To Reproduce**; Steps to reproduce the behavior:; 1. Create multiple object classifiers, e.g. following https://qupath.readthedocs.io/en/0.3/docs/tutorials/multiplex_analysis.html; 2. Run *Create composite classifier* and select several classifiers; 3. Enter a name for the classifier, and choose *Save & Apply*; 4. Check the workflow history - the composite classifier is not included. Checking the log, there is a message; ```; WARN: Object classifier isn't currently written to the workflow history, sorry...; ```. **Expected behavior**; QuPath should be helpful rather than apologetic. A `runObjectClassifier(""name"")` command should be included. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.0. **Additional context**; *Load object classifier* and *Apply classifiers sequentially* can be used instead.; Alternatively, the composite classifier can be saved and then later run via *Load object classifier*.; But these required workarounds are not very intuitive.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/874
https://github.com/qupath/qupath/issues/874:1176,Performance,Load,Load,1176,"## Bug report. **Describe the bug**; When using *Create composite classifier* to create a composite object classifier, a user would expect pressing 'Save & apply' to store the classifier in the workflow history, making it scriptable. Sadly, it doesn't. **To Reproduce**; Steps to reproduce the behavior:; 1. Create multiple object classifiers, e.g. following https://qupath.readthedocs.io/en/0.3/docs/tutorials/multiplex_analysis.html; 2. Run *Create composite classifier* and select several classifiers; 3. Enter a name for the classifier, and choose *Save & Apply*; 4. Check the workflow history - the composite classifier is not included. Checking the log, there is a message; ```; WARN: Object classifier isn't currently written to the workflow history, sorry...; ```. **Expected behavior**; QuPath should be helpful rather than apologetic. A `runObjectClassifier(""name"")` command should be included. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.0. **Additional context**; *Load object classifier* and *Apply classifiers sequentially* can be used instead.; Alternatively, the composite classifier can be saved and then later run via *Load object classifier*.; But these required workarounds are not very intuitive.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/874
https://github.com/qupath/qupath/issues/874:655,Testability,log,log,655,"## Bug report. **Describe the bug**; When using *Create composite classifier* to create a composite object classifier, a user would expect pressing 'Save & apply' to store the classifier in the workflow history, making it scriptable. Sadly, it doesn't. **To Reproduce**; Steps to reproduce the behavior:; 1. Create multiple object classifiers, e.g. following https://qupath.readthedocs.io/en/0.3/docs/tutorials/multiplex_analysis.html; 2. Run *Create composite classifier* and select several classifiers; 3. Enter a name for the classifier, and choose *Save & Apply*; 4. Check the workflow history - the composite classifier is not included. Checking the log, there is a message; ```; WARN: Object classifier isn't currently written to the workflow history, sorry...; ```. **Expected behavior**; QuPath should be helpful rather than apologetic. A `runObjectClassifier(""name"")` command should be included. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.0. **Additional context**; *Load object classifier* and *Apply classifiers sequentially* can be used instead.; Alternatively, the composite classifier can be saved and then later run via *Load object classifier*.; But these required workarounds are not very intuitive.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/874
https://github.com/qupath/qupath/issues/874:1246,Usability,intuit,intuitive,1246,"## Bug report. **Describe the bug**; When using *Create composite classifier* to create a composite object classifier, a user would expect pressing 'Save & apply' to store the classifier in the workflow history, making it scriptable. Sadly, it doesn't. **To Reproduce**; Steps to reproduce the behavior:; 1. Create multiple object classifiers, e.g. following https://qupath.readthedocs.io/en/0.3/docs/tutorials/multiplex_analysis.html; 2. Run *Create composite classifier* and select several classifiers; 3. Enter a name for the classifier, and choose *Save & Apply*; 4. Check the workflow history - the composite classifier is not included. Checking the log, there is a message; ```; WARN: Object classifier isn't currently written to the workflow history, sorry...; ```. **Expected behavior**; QuPath should be helpful rather than apologetic. A `runObjectClassifier(""name"")` command should be included. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.0. **Additional context**; *Load object classifier* and *Apply classifiers sequentially* can be used instead.; Alternatively, the composite classifier can be saved and then later run via *Load object classifier*.; But these required workarounds are not very intuitive.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/874
https://github.com/qupath/qupath/pull/876:133,Availability,error,error,133,"If all classes are 'ignored', yet 'Create objects' with a pixel classifier doesn't want to create ignored objects, give a meaningful error rather than throwing an exception.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/876
https://github.com/qupath/qupath/issues/878:1055,Availability,avail,available,1055,"## Bug report. **Describe the bug**. When running cell detection on a brightfield image and specifying that hematoxylin should be used for detection, the first deconvolved channel is *always* used - regardless of whether it is actually the one corresponding to hematoxylin or not. This is hard-coded at https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/imagej/detect/cells/WatershedCellDetection.java#L231. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a brightfield image e.g. *CMU-1-Small-Region.svs*; 2. Set type to *Brightfield (Other)*; 3. Set 2 or 3 stains, ensuring Hematoxylin is *not* the first; 4. Run *Cell detection* using hematoxylin image; 5. Inspect image to check which channel was really used for detection. **Expected behavior**; The minimal required changes are:; * Use the stain name to identify the hematoxylin image, don't just assume it's the first; * Log a clear warning or throw an exception if anything else is done / there is no hematoxylin available. Ideally, options to detect using any/all stains should be provided to the user. **Screenshots**; Using the following stains; ```groovy; setColorDeconvolutionStains('{""Name"" : ""Some other stains"", ""Stain 1"" : ""Something"", ""Values 1"" : ""0.11793 0.84247 0.52567"", ""Stain 2"" : ""Another"", ""Values 2"" : ""0.32293 0.56288 0.76084"", ""Stain 3"" : ""Hematoxylin "", ""Values 3"" : ""0.61203 0.70103 0.36602"", ""Background"" : "" 255 255 255""}');; ```; the detection looks as below; ![Screenshot 2021-12-26 at 07 51 32](https://user-images.githubusercontent.com/4690904/147402284-3dd60b6b-e301-4efc-850d-fb35f56ced0d.jpg); ![Screenshot 2021-12-26 at 07 51 39](https://user-images.githubusercontent.com/4690904/147402286-d946f166-c927-4d24-9b56-3fec4a54a192.jpg); ![Screenshot 2021-12-26 at 07 51 43](https://user-images.githubusercontent.com/4690904/147402287-b250b3f1-9891-45d7-a1bd-2aea942a185a.jpg); ![Screenshot 2021-12-26 at 07 51 55](https://user-ima",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/878
https://github.com/qupath/qupath/issues/878:55,Safety,detect,detection,55,"## Bug report. **Describe the bug**. When running cell detection on a brightfield image and specifying that hematoxylin should be used for detection, the first deconvolved channel is *always* used - regardless of whether it is actually the one corresponding to hematoxylin or not. This is hard-coded at https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/imagej/detect/cells/WatershedCellDetection.java#L231. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a brightfield image e.g. *CMU-1-Small-Region.svs*; 2. Set type to *Brightfield (Other)*; 3. Set 2 or 3 stains, ensuring Hematoxylin is *not* the first; 4. Run *Cell detection* using hematoxylin image; 5. Inspect image to check which channel was really used for detection. **Expected behavior**; The minimal required changes are:; * Use the stain name to identify the hematoxylin image, don't just assume it's the first; * Log a clear warning or throw an exception if anything else is done / there is no hematoxylin available. Ideally, options to detect using any/all stains should be provided to the user. **Screenshots**; Using the following stains; ```groovy; setColorDeconvolutionStains('{""Name"" : ""Some other stains"", ""Stain 1"" : ""Something"", ""Values 1"" : ""0.11793 0.84247 0.52567"", ""Stain 2"" : ""Another"", ""Values 2"" : ""0.32293 0.56288 0.76084"", ""Stain 3"" : ""Hematoxylin "", ""Values 3"" : ""0.61203 0.70103 0.36602"", ""Background"" : "" 255 255 255""}');; ```; the detection looks as below; ![Screenshot 2021-12-26 at 07 51 32](https://user-images.githubusercontent.com/4690904/147402284-3dd60b6b-e301-4efc-850d-fb35f56ced0d.jpg); ![Screenshot 2021-12-26 at 07 51 39](https://user-images.githubusercontent.com/4690904/147402286-d946f166-c927-4d24-9b56-3fec4a54a192.jpg); ![Screenshot 2021-12-26 at 07 51 43](https://user-images.githubusercontent.com/4690904/147402287-b250b3f1-9891-45d7-a1bd-2aea942a185a.jpg); ![Screenshot 2021-12-26 at 07 51 55](https://user-ima",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/878
https://github.com/qupath/qupath/issues/878:139,Safety,detect,detection,139,"## Bug report. **Describe the bug**. When running cell detection on a brightfield image and specifying that hematoxylin should be used for detection, the first deconvolved channel is *always* used - regardless of whether it is actually the one corresponding to hematoxylin or not. This is hard-coded at https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/imagej/detect/cells/WatershedCellDetection.java#L231. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a brightfield image e.g. *CMU-1-Small-Region.svs*; 2. Set type to *Brightfield (Other)*; 3. Set 2 or 3 stains, ensuring Hematoxylin is *not* the first; 4. Run *Cell detection* using hematoxylin image; 5. Inspect image to check which channel was really used for detection. **Expected behavior**; The minimal required changes are:; * Use the stain name to identify the hematoxylin image, don't just assume it's the first; * Log a clear warning or throw an exception if anything else is done / there is no hematoxylin available. Ideally, options to detect using any/all stains should be provided to the user. **Screenshots**; Using the following stains; ```groovy; setColorDeconvolutionStains('{""Name"" : ""Some other stains"", ""Stain 1"" : ""Something"", ""Values 1"" : ""0.11793 0.84247 0.52567"", ""Stain 2"" : ""Another"", ""Values 2"" : ""0.32293 0.56288 0.76084"", ""Stain 3"" : ""Hematoxylin "", ""Values 3"" : ""0.61203 0.70103 0.36602"", ""Background"" : "" 255 255 255""}');; ```; the detection looks as below; ![Screenshot 2021-12-26 at 07 51 32](https://user-images.githubusercontent.com/4690904/147402284-3dd60b6b-e301-4efc-850d-fb35f56ced0d.jpg); ![Screenshot 2021-12-26 at 07 51 39](https://user-images.githubusercontent.com/4690904/147402286-d946f166-c927-4d24-9b56-3fec4a54a192.jpg); ![Screenshot 2021-12-26 at 07 51 43](https://user-images.githubusercontent.com/4690904/147402287-b250b3f1-9891-45d7-a1bd-2aea942a185a.jpg); ![Screenshot 2021-12-26 at 07 51 55](https://user-ima",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/878
https://github.com/qupath/qupath/issues/878:433,Safety,detect,detect,433,"## Bug report. **Describe the bug**. When running cell detection on a brightfield image and specifying that hematoxylin should be used for detection, the first deconvolved channel is *always* used - regardless of whether it is actually the one corresponding to hematoxylin or not. This is hard-coded at https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/imagej/detect/cells/WatershedCellDetection.java#L231. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a brightfield image e.g. *CMU-1-Small-Region.svs*; 2. Set type to *Brightfield (Other)*; 3. Set 2 or 3 stains, ensuring Hematoxylin is *not* the first; 4. Run *Cell detection* using hematoxylin image; 5. Inspect image to check which channel was really used for detection. **Expected behavior**; The minimal required changes are:; * Use the stain name to identify the hematoxylin image, don't just assume it's the first; * Log a clear warning or throw an exception if anything else is done / there is no hematoxylin available. Ideally, options to detect using any/all stains should be provided to the user. **Screenshots**; Using the following stains; ```groovy; setColorDeconvolutionStains('{""Name"" : ""Some other stains"", ""Stain 1"" : ""Something"", ""Values 1"" : ""0.11793 0.84247 0.52567"", ""Stain 2"" : ""Another"", ""Values 2"" : ""0.32293 0.56288 0.76084"", ""Stain 3"" : ""Hematoxylin "", ""Values 3"" : ""0.61203 0.70103 0.36602"", ""Background"" : "" 255 255 255""}');; ```; the detection looks as below; ![Screenshot 2021-12-26 at 07 51 32](https://user-images.githubusercontent.com/4690904/147402284-3dd60b6b-e301-4efc-850d-fb35f56ced0d.jpg); ![Screenshot 2021-12-26 at 07 51 39](https://user-images.githubusercontent.com/4690904/147402286-d946f166-c927-4d24-9b56-3fec4a54a192.jpg); ![Screenshot 2021-12-26 at 07 51 43](https://user-images.githubusercontent.com/4690904/147402287-b250b3f1-9891-45d7-a1bd-2aea942a185a.jpg); ![Screenshot 2021-12-26 at 07 51 55](https://user-ima",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/878
https://github.com/qupath/qupath/issues/878:705,Safety,detect,detection,705,"## Bug report. **Describe the bug**. When running cell detection on a brightfield image and specifying that hematoxylin should be used for detection, the first deconvolved channel is *always* used - regardless of whether it is actually the one corresponding to hematoxylin or not. This is hard-coded at https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/imagej/detect/cells/WatershedCellDetection.java#L231. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a brightfield image e.g. *CMU-1-Small-Region.svs*; 2. Set type to *Brightfield (Other)*; 3. Set 2 or 3 stains, ensuring Hematoxylin is *not* the first; 4. Run *Cell detection* using hematoxylin image; 5. Inspect image to check which channel was really used for detection. **Expected behavior**; The minimal required changes are:; * Use the stain name to identify the hematoxylin image, don't just assume it's the first; * Log a clear warning or throw an exception if anything else is done / there is no hematoxylin available. Ideally, options to detect using any/all stains should be provided to the user. **Screenshots**; Using the following stains; ```groovy; setColorDeconvolutionStains('{""Name"" : ""Some other stains"", ""Stain 1"" : ""Something"", ""Values 1"" : ""0.11793 0.84247 0.52567"", ""Stain 2"" : ""Another"", ""Values 2"" : ""0.32293 0.56288 0.76084"", ""Stain 3"" : ""Hematoxylin "", ""Values 3"" : ""0.61203 0.70103 0.36602"", ""Background"" : "" 255 255 255""}');; ```; the detection looks as below; ![Screenshot 2021-12-26 at 07 51 32](https://user-images.githubusercontent.com/4690904/147402284-3dd60b6b-e301-4efc-850d-fb35f56ced0d.jpg); ![Screenshot 2021-12-26 at 07 51 39](https://user-images.githubusercontent.com/4690904/147402286-d946f166-c927-4d24-9b56-3fec4a54a192.jpg); ![Screenshot 2021-12-26 at 07 51 43](https://user-images.githubusercontent.com/4690904/147402287-b250b3f1-9891-45d7-a1bd-2aea942a185a.jpg); ![Screenshot 2021-12-26 at 07 51 55](https://user-ima",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/878
https://github.com/qupath/qupath/issues/878:801,Safety,detect,detection,801,"## Bug report. **Describe the bug**. When running cell detection on a brightfield image and specifying that hematoxylin should be used for detection, the first deconvolved channel is *always* used - regardless of whether it is actually the one corresponding to hematoxylin or not. This is hard-coded at https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/imagej/detect/cells/WatershedCellDetection.java#L231. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a brightfield image e.g. *CMU-1-Small-Region.svs*; 2. Set type to *Brightfield (Other)*; 3. Set 2 or 3 stains, ensuring Hematoxylin is *not* the first; 4. Run *Cell detection* using hematoxylin image; 5. Inspect image to check which channel was really used for detection. **Expected behavior**; The minimal required changes are:; * Use the stain name to identify the hematoxylin image, don't just assume it's the first; * Log a clear warning or throw an exception if anything else is done / there is no hematoxylin available. Ideally, options to detect using any/all stains should be provided to the user. **Screenshots**; Using the following stains; ```groovy; setColorDeconvolutionStains('{""Name"" : ""Some other stains"", ""Stain 1"" : ""Something"", ""Values 1"" : ""0.11793 0.84247 0.52567"", ""Stain 2"" : ""Another"", ""Values 2"" : ""0.32293 0.56288 0.76084"", ""Stain 3"" : ""Hematoxylin "", ""Values 3"" : ""0.61203 0.70103 0.36602"", ""Background"" : "" 255 255 255""}');; ```; the detection looks as below; ![Screenshot 2021-12-26 at 07 51 32](https://user-images.githubusercontent.com/4690904/147402284-3dd60b6b-e301-4efc-850d-fb35f56ced0d.jpg); ![Screenshot 2021-12-26 at 07 51 39](https://user-images.githubusercontent.com/4690904/147402286-d946f166-c927-4d24-9b56-3fec4a54a192.jpg); ![Screenshot 2021-12-26 at 07 51 43](https://user-images.githubusercontent.com/4690904/147402287-b250b3f1-9891-45d7-a1bd-2aea942a185a.jpg); ![Screenshot 2021-12-26 at 07 51 55](https://user-ima",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/878
https://github.com/qupath/qupath/issues/878:1086,Safety,detect,detect,1086,"at hematoxylin should be used for detection, the first deconvolved channel is *always* used - regardless of whether it is actually the one corresponding to hematoxylin or not. This is hard-coded at https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/imagej/detect/cells/WatershedCellDetection.java#L231. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a brightfield image e.g. *CMU-1-Small-Region.svs*; 2. Set type to *Brightfield (Other)*; 3. Set 2 or 3 stains, ensuring Hematoxylin is *not* the first; 4. Run *Cell detection* using hematoxylin image; 5. Inspect image to check which channel was really used for detection. **Expected behavior**; The minimal required changes are:; * Use the stain name to identify the hematoxylin image, don't just assume it's the first; * Log a clear warning or throw an exception if anything else is done / there is no hematoxylin available. Ideally, options to detect using any/all stains should be provided to the user. **Screenshots**; Using the following stains; ```groovy; setColorDeconvolutionStains('{""Name"" : ""Some other stains"", ""Stain 1"" : ""Something"", ""Values 1"" : ""0.11793 0.84247 0.52567"", ""Stain 2"" : ""Another"", ""Values 2"" : ""0.32293 0.56288 0.76084"", ""Stain 3"" : ""Hematoxylin "", ""Values 3"" : ""0.61203 0.70103 0.36602"", ""Background"" : "" 255 255 255""}');; ```; the detection looks as below; ![Screenshot 2021-12-26 at 07 51 32](https://user-images.githubusercontent.com/4690904/147402284-3dd60b6b-e301-4efc-850d-fb35f56ced0d.jpg); ![Screenshot 2021-12-26 at 07 51 39](https://user-images.githubusercontent.com/4690904/147402286-d946f166-c927-4d24-9b56-3fec4a54a192.jpg); ![Screenshot 2021-12-26 at 07 51 43](https://user-images.githubusercontent.com/4690904/147402287-b250b3f1-9891-45d7-a1bd-2aea942a185a.jpg); ![Screenshot 2021-12-26 at 07 51 55](https://user-images.githubusercontent.com/4690904/147402288-55dd97c1-6b3b-4c15-898f-84bc314cea2a.jpg). The detected nucl",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/878
https://github.com/qupath/qupath/issues/878:1502,Safety,detect,detection,1502,"*; Steps to reproduce the behavior:; 1. Open a brightfield image e.g. *CMU-1-Small-Region.svs*; 2. Set type to *Brightfield (Other)*; 3. Set 2 or 3 stains, ensuring Hematoxylin is *not* the first; 4. Run *Cell detection* using hematoxylin image; 5. Inspect image to check which channel was really used for detection. **Expected behavior**; The minimal required changes are:; * Use the stain name to identify the hematoxylin image, don't just assume it's the first; * Log a clear warning or throw an exception if anything else is done / there is no hematoxylin available. Ideally, options to detect using any/all stains should be provided to the user. **Screenshots**; Using the following stains; ```groovy; setColorDeconvolutionStains('{""Name"" : ""Some other stains"", ""Stain 1"" : ""Something"", ""Values 1"" : ""0.11793 0.84247 0.52567"", ""Stain 2"" : ""Another"", ""Values 2"" : ""0.32293 0.56288 0.76084"", ""Stain 3"" : ""Hematoxylin "", ""Values 3"" : ""0.61203 0.70103 0.36602"", ""Background"" : "" 255 255 255""}');; ```; the detection looks as below; ![Screenshot 2021-12-26 at 07 51 32](https://user-images.githubusercontent.com/4690904/147402284-3dd60b6b-e301-4efc-850d-fb35f56ced0d.jpg); ![Screenshot 2021-12-26 at 07 51 39](https://user-images.githubusercontent.com/4690904/147402286-d946f166-c927-4d24-9b56-3fec4a54a192.jpg); ![Screenshot 2021-12-26 at 07 51 43](https://user-images.githubusercontent.com/4690904/147402287-b250b3f1-9891-45d7-a1bd-2aea942a185a.jpg); ![Screenshot 2021-12-26 at 07 51 55](https://user-images.githubusercontent.com/4690904/147402288-55dd97c1-6b3b-4c15-898f-84bc314cea2a.jpg). The detected nuclei correspond to the first deconvolved stain, not the third (as it ought to). **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and all previous). **Additional context**; Issue discovered while investigating https://forum.image.sc/t/positive-cell-detection-function-unable-to-detect-stain-3-hematoxylin-in-the-intensity-threshold-parameters-section/61414",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/878
https://github.com/qupath/qupath/issues/878:2092,Safety,detect,detected,2092,"*; Steps to reproduce the behavior:; 1. Open a brightfield image e.g. *CMU-1-Small-Region.svs*; 2. Set type to *Brightfield (Other)*; 3. Set 2 or 3 stains, ensuring Hematoxylin is *not* the first; 4. Run *Cell detection* using hematoxylin image; 5. Inspect image to check which channel was really used for detection. **Expected behavior**; The minimal required changes are:; * Use the stain name to identify the hematoxylin image, don't just assume it's the first; * Log a clear warning or throw an exception if anything else is done / there is no hematoxylin available. Ideally, options to detect using any/all stains should be provided to the user. **Screenshots**; Using the following stains; ```groovy; setColorDeconvolutionStains('{""Name"" : ""Some other stains"", ""Stain 1"" : ""Something"", ""Values 1"" : ""0.11793 0.84247 0.52567"", ""Stain 2"" : ""Another"", ""Values 2"" : ""0.32293 0.56288 0.76084"", ""Stain 3"" : ""Hematoxylin "", ""Values 3"" : ""0.61203 0.70103 0.36602"", ""Background"" : "" 255 255 255""}');; ```; the detection looks as below; ![Screenshot 2021-12-26 at 07 51 32](https://user-images.githubusercontent.com/4690904/147402284-3dd60b6b-e301-4efc-850d-fb35f56ced0d.jpg); ![Screenshot 2021-12-26 at 07 51 39](https://user-images.githubusercontent.com/4690904/147402286-d946f166-c927-4d24-9b56-3fec4a54a192.jpg); ![Screenshot 2021-12-26 at 07 51 43](https://user-images.githubusercontent.com/4690904/147402287-b250b3f1-9891-45d7-a1bd-2aea942a185a.jpg); ![Screenshot 2021-12-26 at 07 51 55](https://user-images.githubusercontent.com/4690904/147402288-55dd97c1-6b3b-4c15-898f-84bc314cea2a.jpg). The detected nuclei correspond to the first deconvolved stain, not the third (as it ought to). **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and all previous). **Additional context**; Issue discovered while investigating https://forum.image.sc/t/positive-cell-detection-function-unable-to-detect-stain-3-hematoxylin-in-the-intensity-threshold-parameters-section/61414",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/878
https://github.com/qupath/qupath/issues/878:2388,Safety,detect,detection-function-unable-to-detect-stain-,2388,"*; Steps to reproduce the behavior:; 1. Open a brightfield image e.g. *CMU-1-Small-Region.svs*; 2. Set type to *Brightfield (Other)*; 3. Set 2 or 3 stains, ensuring Hematoxylin is *not* the first; 4. Run *Cell detection* using hematoxylin image; 5. Inspect image to check which channel was really used for detection. **Expected behavior**; The minimal required changes are:; * Use the stain name to identify the hematoxylin image, don't just assume it's the first; * Log a clear warning or throw an exception if anything else is done / there is no hematoxylin available. Ideally, options to detect using any/all stains should be provided to the user. **Screenshots**; Using the following stains; ```groovy; setColorDeconvolutionStains('{""Name"" : ""Some other stains"", ""Stain 1"" : ""Something"", ""Values 1"" : ""0.11793 0.84247 0.52567"", ""Stain 2"" : ""Another"", ""Values 2"" : ""0.32293 0.56288 0.76084"", ""Stain 3"" : ""Hematoxylin "", ""Values 3"" : ""0.61203 0.70103 0.36602"", ""Background"" : "" 255 255 255""}');; ```; the detection looks as below; ![Screenshot 2021-12-26 at 07 51 32](https://user-images.githubusercontent.com/4690904/147402284-3dd60b6b-e301-4efc-850d-fb35f56ced0d.jpg); ![Screenshot 2021-12-26 at 07 51 39](https://user-images.githubusercontent.com/4690904/147402286-d946f166-c927-4d24-9b56-3fec4a54a192.jpg); ![Screenshot 2021-12-26 at 07 51 43](https://user-images.githubusercontent.com/4690904/147402287-b250b3f1-9891-45d7-a1bd-2aea942a185a.jpg); ![Screenshot 2021-12-26 at 07 51 55](https://user-images.githubusercontent.com/4690904/147402288-55dd97c1-6b3b-4c15-898f-84bc314cea2a.jpg). The detected nuclei correspond to the first deconvolved stain, not the third (as it ought to). **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and all previous). **Additional context**; Issue discovered while investigating https://forum.image.sc/t/positive-cell-detection-function-unable-to-detect-stain-3-hematoxylin-in-the-intensity-threshold-parameters-section/61414",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/878
https://github.com/qupath/qupath/issues/878:962,Testability,Log,Log,962,"## Bug report. **Describe the bug**. When running cell detection on a brightfield image and specifying that hematoxylin should be used for detection, the first deconvolved channel is *always* used - regardless of whether it is actually the one corresponding to hematoxylin or not. This is hard-coded at https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/imagej/detect/cells/WatershedCellDetection.java#L231. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a brightfield image e.g. *CMU-1-Small-Region.svs*; 2. Set type to *Brightfield (Other)*; 3. Set 2 or 3 stains, ensuring Hematoxylin is *not* the first; 4. Run *Cell detection* using hematoxylin image; 5. Inspect image to check which channel was really used for detection. **Expected behavior**; The minimal required changes are:; * Use the stain name to identify the hematoxylin image, don't just assume it's the first; * Log a clear warning or throw an exception if anything else is done / there is no hematoxylin available. Ideally, options to detect using any/all stains should be provided to the user. **Screenshots**; Using the following stains; ```groovy; setColorDeconvolutionStains('{""Name"" : ""Some other stains"", ""Stain 1"" : ""Something"", ""Values 1"" : ""0.11793 0.84247 0.52567"", ""Stain 2"" : ""Another"", ""Values 2"" : ""0.32293 0.56288 0.76084"", ""Stain 3"" : ""Hematoxylin "", ""Values 3"" : ""0.61203 0.70103 0.36602"", ""Background"" : "" 255 255 255""}');; ```; the detection looks as below; ![Screenshot 2021-12-26 at 07 51 32](https://user-images.githubusercontent.com/4690904/147402284-3dd60b6b-e301-4efc-850d-fb35f56ced0d.jpg); ![Screenshot 2021-12-26 at 07 51 39](https://user-images.githubusercontent.com/4690904/147402286-d946f166-c927-4d24-9b56-3fec4a54a192.jpg); ![Screenshot 2021-12-26 at 07 51 43](https://user-images.githubusercontent.com/4690904/147402287-b250b3f1-9891-45d7-a1bd-2aea942a185a.jpg); ![Screenshot 2021-12-26 at 07 51 55](https://user-ima",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/878
https://github.com/qupath/qupath/issues/878:968,Usability,clear,clear,968,"## Bug report. **Describe the bug**. When running cell detection on a brightfield image and specifying that hematoxylin should be used for detection, the first deconvolved channel is *always* used - regardless of whether it is actually the one corresponding to hematoxylin or not. This is hard-coded at https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-core-processing/src/main/java/qupath/imagej/detect/cells/WatershedCellDetection.java#L231. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a brightfield image e.g. *CMU-1-Small-Region.svs*; 2. Set type to *Brightfield (Other)*; 3. Set 2 or 3 stains, ensuring Hematoxylin is *not* the first; 4. Run *Cell detection* using hematoxylin image; 5. Inspect image to check which channel was really used for detection. **Expected behavior**; The minimal required changes are:; * Use the stain name to identify the hematoxylin image, don't just assume it's the first; * Log a clear warning or throw an exception if anything else is done / there is no hematoxylin available. Ideally, options to detect using any/all stains should be provided to the user. **Screenshots**; Using the following stains; ```groovy; setColorDeconvolutionStains('{""Name"" : ""Some other stains"", ""Stain 1"" : ""Something"", ""Values 1"" : ""0.11793 0.84247 0.52567"", ""Stain 2"" : ""Another"", ""Values 2"" : ""0.32293 0.56288 0.76084"", ""Stain 3"" : ""Hematoxylin "", ""Values 3"" : ""0.61203 0.70103 0.36602"", ""Background"" : "" 255 255 255""}');; ```; the detection looks as below; ![Screenshot 2021-12-26 at 07 51 32](https://user-images.githubusercontent.com/4690904/147402284-3dd60b6b-e301-4efc-850d-fb35f56ced0d.jpg); ![Screenshot 2021-12-26 at 07 51 39](https://user-images.githubusercontent.com/4690904/147402286-d946f166-c927-4d24-9b56-3fec4a54a192.jpg); ![Screenshot 2021-12-26 at 07 51 43](https://user-images.githubusercontent.com/4690904/147402287-b250b3f1-9891-45d7-a1bd-2aea942a185a.jpg); ![Screenshot 2021-12-26 at 07 51 55](https://user-ima",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/878
https://github.com/qupath/qupath/issues/879:306,Availability,avail,available,306,"## Bug report. **Describe the bug**; A problem with some SVS files in QuPath v0.3.1 with Bio-Formats 6.8.0 is described at https://forum.image.sc/t/problem-about-opening-some-svs-slides-in-qupath-v0-3-1-bio-formats-6-8-0/61404/15. **To Reproduce**; Try opening the image posted in the above discussion (if available) and checking the pyramid levels under the 'Image' tab. The values are clearly wrong, and not strictly ascending:. <img width=""323"" alt=""Image tab info"" src=""https://user-images.githubusercontent.com/4690904/147402833-46ab5c69-b0c1-45f4-ae2c-c82e680b2e7c.png"">. **Expected behavior**; QuPath should check downsample values for image servers to ensure that they are strictly ascending. If they are not, QuPath should either not open the image or it should trim at the last (seemingly) valid resolution level, under the assumption that later levels really belong to other images. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/879
https://github.com/qupath/qupath/issues/879:621,Availability,down,downsample,621,"## Bug report. **Describe the bug**; A problem with some SVS files in QuPath v0.3.1 with Bio-Formats 6.8.0 is described at https://forum.image.sc/t/problem-about-opening-some-svs-slides-in-qupath-v0-3-1-bio-formats-6-8-0/61404/15. **To Reproduce**; Try opening the image posted in the above discussion (if available) and checking the pyramid levels under the 'Image' tab. The values are clearly wrong, and not strictly ascending:. <img width=""323"" alt=""Image tab info"" src=""https://user-images.githubusercontent.com/4690904/147402833-46ab5c69-b0c1-45f4-ae2c-c82e680b2e7c.png"">. **Expected behavior**; QuPath should check downsample values for image servers to ensure that they are strictly ascending. If they are not, QuPath should either not open the image or it should trim at the last (seemingly) valid resolution level, under the assumption that later levels really belong to other images. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/879
https://github.com/qupath/qupath/issues/879:387,Usability,clear,clearly,387,"## Bug report. **Describe the bug**; A problem with some SVS files in QuPath v0.3.1 with Bio-Formats 6.8.0 is described at https://forum.image.sc/t/problem-about-opening-some-svs-slides-in-qupath-v0-3-1-bio-formats-6-8-0/61404/15. **To Reproduce**; Try opening the image posted in the above discussion (if available) and checking the pyramid levels under the 'Image' tab. The values are clearly wrong, and not strictly ascending:. <img width=""323"" alt=""Image tab info"" src=""https://user-images.githubusercontent.com/4690904/147402833-46ab5c69-b0c1-45f4-ae2c-c82e680b2e7c.png"">. **Expected behavior**; QuPath should check downsample values for image servers to ensure that they are strictly ascending. If they are not, QuPath should either not open the image or it should trim at the last (seemingly) valid resolution level, under the assumption that later levels really belong to other images. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/879
https://github.com/qupath/qupath/issues/880:248,Availability,error,error,248,"## Bug report. **Describe the bug**; When trying to open a brightfield image with extremely faint staining/no tissue at all, attempts to auto-estimate the stain vectors fail with an extremely uninformative message:. <img width=""419"" alt=""/ by zero error"" src=""https://user-images.githubusercontent.com/4690904/147403042-90adf701-d11d-4581-b8e7-fb830b3a57b0.png"">. The stack trace contains something like; ```; ERROR: Load ImageData; java.lang.ArithmeticException: / by zero; at qupath.lib.gui.tools.GuiTools.estimateImageType(GuiTools.java:353); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2843); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:187); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create an entirely white RGB image; 2. Try to open the image in QuPath, with auto-estimate stain vectors selected; 3. See the error. **Expected behavior**; A more informative error should be displayed or logged. I first noticed the problem at https://forum.image.sc/t/problem-about-opening-some-svs-slides-in-qupath-v0-3-1-bio-formats-6-8-0/61404/15 - and the confusing error message masked the underlying file format issue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/880
https://github.com/qupath/qupath/issues/880:410,Availability,ERROR,ERROR,410,"## Bug report. **Describe the bug**; When trying to open a brightfield image with extremely faint staining/no tissue at all, attempts to auto-estimate the stain vectors fail with an extremely uninformative message:. <img width=""419"" alt=""/ by zero error"" src=""https://user-images.githubusercontent.com/4690904/147403042-90adf701-d11d-4581-b8e7-fb830b3a57b0.png"">. The stack trace contains something like; ```; ERROR: Load ImageData; java.lang.ArithmeticException: / by zero; at qupath.lib.gui.tools.GuiTools.estimateImageType(GuiTools.java:353); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2843); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:187); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create an entirely white RGB image; 2. Try to open the image in QuPath, with auto-estimate stain vectors selected; 3. See the error. **Expected behavior**; A more informative error should be displayed or logged. I first noticed the problem at https://forum.image.sc/t/problem-about-opening-some-svs-slides-in-qupath-v0-3-1-bio-formats-6-8-0/61404/15 - and the confusing error message masked the underlying file format issue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/880
https://github.com/qupath/qupath/issues/880:875,Availability,error,error,875,"## Bug report. **Describe the bug**; When trying to open a brightfield image with extremely faint staining/no tissue at all, attempts to auto-estimate the stain vectors fail with an extremely uninformative message:. <img width=""419"" alt=""/ by zero error"" src=""https://user-images.githubusercontent.com/4690904/147403042-90adf701-d11d-4581-b8e7-fb830b3a57b0.png"">. The stack trace contains something like; ```; ERROR: Load ImageData; java.lang.ArithmeticException: / by zero; at qupath.lib.gui.tools.GuiTools.estimateImageType(GuiTools.java:353); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2843); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:187); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create an entirely white RGB image; 2. Try to open the image in QuPath, with auto-estimate stain vectors selected; 3. See the error. **Expected behavior**; A more informative error should be displayed or logged. I first noticed the problem at https://forum.image.sc/t/problem-about-opening-some-svs-slides-in-qupath-v0-3-1-bio-formats-6-8-0/61404/15 - and the confusing error message masked the underlying file format issue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/880
https://github.com/qupath/qupath/issues/880:924,Availability,error,error,924,"## Bug report. **Describe the bug**; When trying to open a brightfield image with extremely faint staining/no tissue at all, attempts to auto-estimate the stain vectors fail with an extremely uninformative message:. <img width=""419"" alt=""/ by zero error"" src=""https://user-images.githubusercontent.com/4690904/147403042-90adf701-d11d-4581-b8e7-fb830b3a57b0.png"">. The stack trace contains something like; ```; ERROR: Load ImageData; java.lang.ArithmeticException: / by zero; at qupath.lib.gui.tools.GuiTools.estimateImageType(GuiTools.java:353); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2843); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:187); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create an entirely white RGB image; 2. Try to open the image in QuPath, with auto-estimate stain vectors selected; 3. See the error. **Expected behavior**; A more informative error should be displayed or logged. I first noticed the problem at https://forum.image.sc/t/problem-about-opening-some-svs-slides-in-qupath-v0-3-1-bio-formats-6-8-0/61404/15 - and the confusing error message masked the underlying file format issue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/880
https://github.com/qupath/qupath/issues/880:1119,Availability,error,error,1119,"## Bug report. **Describe the bug**; When trying to open a brightfield image with extremely faint staining/no tissue at all, attempts to auto-estimate the stain vectors fail with an extremely uninformative message:. <img width=""419"" alt=""/ by zero error"" src=""https://user-images.githubusercontent.com/4690904/147403042-90adf701-d11d-4581-b8e7-fb830b3a57b0.png"">. The stack trace contains something like; ```; ERROR: Load ImageData; java.lang.ArithmeticException: / by zero; at qupath.lib.gui.tools.GuiTools.estimateImageType(GuiTools.java:353); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2843); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:187); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create an entirely white RGB image; 2. Try to open the image in QuPath, with auto-estimate stain vectors selected; 3. See the error. **Expected behavior**; A more informative error should be displayed or logged. I first noticed the problem at https://forum.image.sc/t/problem-about-opening-some-svs-slides-in-qupath-v0-3-1-bio-formats-6-8-0/61404/15 - and the confusing error message masked the underlying file format issue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/880
https://github.com/qupath/qupath/issues/880:1133,Availability,mask,masked,1133,"## Bug report. **Describe the bug**; When trying to open a brightfield image with extremely faint staining/no tissue at all, attempts to auto-estimate the stain vectors fail with an extremely uninformative message:. <img width=""419"" alt=""/ by zero error"" src=""https://user-images.githubusercontent.com/4690904/147403042-90adf701-d11d-4581-b8e7-fb830b3a57b0.png"">. The stack trace contains something like; ```; ERROR: Load ImageData; java.lang.ArithmeticException: / by zero; at qupath.lib.gui.tools.GuiTools.estimateImageType(GuiTools.java:353); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2843); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:187); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create an entirely white RGB image; 2. Try to open the image in QuPath, with auto-estimate stain vectors selected; 3. See the error. **Expected behavior**; A more informative error should be displayed or logged. I first noticed the problem at https://forum.image.sc/t/problem-about-opening-some-svs-slides-in-qupath-v0-3-1-bio-formats-6-8-0/61404/15 - and the confusing error message masked the underlying file format issue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/880
https://github.com/qupath/qupath/issues/880:206,Integrability,message,message,206,"## Bug report. **Describe the bug**; When trying to open a brightfield image with extremely faint staining/no tissue at all, attempts to auto-estimate the stain vectors fail with an extremely uninformative message:. <img width=""419"" alt=""/ by zero error"" src=""https://user-images.githubusercontent.com/4690904/147403042-90adf701-d11d-4581-b8e7-fb830b3a57b0.png"">. The stack trace contains something like; ```; ERROR: Load ImageData; java.lang.ArithmeticException: / by zero; at qupath.lib.gui.tools.GuiTools.estimateImageType(GuiTools.java:353); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2843); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:187); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create an entirely white RGB image; 2. Try to open the image in QuPath, with auto-estimate stain vectors selected; 3. See the error. **Expected behavior**; A more informative error should be displayed or logged. I first noticed the problem at https://forum.image.sc/t/problem-about-opening-some-svs-slides-in-qupath-v0-3-1-bio-formats-6-8-0/61404/15 - and the confusing error message masked the underlying file format issue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/880
https://github.com/qupath/qupath/issues/880:1125,Integrability,message,message,1125,"## Bug report. **Describe the bug**; When trying to open a brightfield image with extremely faint staining/no tissue at all, attempts to auto-estimate the stain vectors fail with an extremely uninformative message:. <img width=""419"" alt=""/ by zero error"" src=""https://user-images.githubusercontent.com/4690904/147403042-90adf701-d11d-4581-b8e7-fb830b3a57b0.png"">. The stack trace contains something like; ```; ERROR: Load ImageData; java.lang.ArithmeticException: / by zero; at qupath.lib.gui.tools.GuiTools.estimateImageType(GuiTools.java:353); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2843); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:187); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create an entirely white RGB image; 2. Try to open the image in QuPath, with auto-estimate stain vectors selected; 3. See the error. **Expected behavior**; A more informative error should be displayed or logged. I first noticed the problem at https://forum.image.sc/t/problem-about-opening-some-svs-slides-in-qupath-v0-3-1-bio-formats-6-8-0/61404/15 - and the confusing error message masked the underlying file format issue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/880
https://github.com/qupath/qupath/issues/880:417,Performance,Load,Load,417,"## Bug report. **Describe the bug**; When trying to open a brightfield image with extremely faint staining/no tissue at all, attempts to auto-estimate the stain vectors fail with an extremely uninformative message:. <img width=""419"" alt=""/ by zero error"" src=""https://user-images.githubusercontent.com/4690904/147403042-90adf701-d11d-4581-b8e7-fb830b3a57b0.png"">. The stack trace contains something like; ```; ERROR: Load ImageData; java.lang.ArithmeticException: / by zero; at qupath.lib.gui.tools.GuiTools.estimateImageType(GuiTools.java:353); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2843); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:187); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create an entirely white RGB image; 2. Try to open the image in QuPath, with auto-estimate stain vectors selected; 3. See the error. **Expected behavior**; A more informative error should be displayed or logged. I first noticed the problem at https://forum.image.sc/t/problem-about-opening-some-svs-slides-in-qupath-v0-3-1-bio-formats-6-8-0/61404/15 - and the confusing error message masked the underlying file format issue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/880
https://github.com/qupath/qupath/issues/880:953,Testability,log,logged,953,"## Bug report. **Describe the bug**; When trying to open a brightfield image with extremely faint staining/no tissue at all, attempts to auto-estimate the stain vectors fail with an extremely uninformative message:. <img width=""419"" alt=""/ by zero error"" src=""https://user-images.githubusercontent.com/4690904/147403042-90adf701-d11d-4581-b8e7-fb830b3a57b0.png"">. The stack trace contains something like; ```; ERROR: Load ImageData; java.lang.ArithmeticException: / by zero; at qupath.lib.gui.tools.GuiTools.estimateImageType(GuiTools.java:353); at qupath.lib.gui.QuPathGUI.openImageEntry(QuPathGUI.java:2843); at qupath.lib.gui.panes.ProjectBrowser.lambda$new$3(ProjectBrowser.java:187); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Create an entirely white RGB image; 2. Try to open the image in QuPath, with auto-estimate stain vectors selected; 3. See the error. **Expected behavior**; A more informative error should be displayed or logged. I first noticed the problem at https://forum.image.sc/t/problem-about-opening-some-svs-slides-in-qupath-v0-3-1-bio-formats-6-8-0/61404/15 - and the confusing error message masked the underlying file format issue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 (and before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/880
https://github.com/qupath/qupath/pull/882:143,Performance,perform,perform,143,"Add support for building QuPath with a different Bio-Formats version, e.g. with; ```; ./gradlew jpackage -Pbioformats-version=6.8.0; ```; Also perform a check for out-of-order resolution levels across all ImageServers, addressing https://github.com/qupath/qupath/issues/879",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/882
https://github.com/qupath/qupath/pull/883:31,Deployability,update,update,31,Adding/removing a class didn't update the dialog until it was relaunched (bug spotted by @lacan),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/883
https://github.com/qupath/qupath/issues/886:413,Availability,avail,available,413,"**Describe the bug**. The use of Java's [`Locale`](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html) class has [caused some trouble in QuPath from the beginning](https://github.com/qupath/qupath/search?q=locale&type=issues). This is somewhat mitigated by explicitly allowing the user to specify the `Locale` and then requesting the appropriate one for format or display (the two available categories). However, depending upon how the `Locale` is requested it can return different results. For me, the following Groovy script; ```groovy; import java.util.*; println Locale.getDefault(); println Locale.getDefault(Locale.Category.FORMAT); println Locale.getDefault(Locale.Category.DISPLAY); ```; prints; ```; INFO: en_GB; INFO: en_US; INFO: en_US; ```; It is curious that `Locale.getDefault()` returns something different from the others... and different from what QuPath allows to be specified. @iwbh15 noticed this caused a problem with the [QuPath Align extension](https://github.com/qupath/qupath-extension-align) and traced it back to `Locale` in [`GeometryTools`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core/src/main/java/qupath/lib/roi/GeometryTools.java#L139), used in conjunction with a `NumberFormat`. **To Reproduce**; The script above hints there is a problem. To see it in practice requires using QuPath on a computer that uses a different `Locale` and calling a method that relies upon `Locale.getDefault()` *and* uses decimals.... and being surprised. Basically, it's not *that* easy to reproduce in practice.; But at the risk of messing up QuPath's preferences. ```groovy; import java.util.*; import java.text.*. Locale.setDefault(Locale.GERMANY); Locale.setDefault(Locale.Category.FORMAT, Locale.US); println NumberFormat.getInstance(Locale.getDefault()).parse(""0,1234.56""); println NumberFormat.getInstance(Locale.getDefault(Locale.Category.FORMAT)).parse(""0,1234.56""); ```; prints the following; ```; IN",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/886
https://github.com/qupath/qupath/issues/886:445,Integrability,depend,depending,445,"**Describe the bug**. The use of Java's [`Locale`](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Locale.html) class has [caused some trouble in QuPath from the beginning](https://github.com/qupath/qupath/search?q=locale&type=issues). This is somewhat mitigated by explicitly allowing the user to specify the `Locale` and then requesting the appropriate one for format or display (the two available categories). However, depending upon how the `Locale` is requested it can return different results. For me, the following Groovy script; ```groovy; import java.util.*; println Locale.getDefault(); println Locale.getDefault(Locale.Category.FORMAT); println Locale.getDefault(Locale.Category.DISPLAY); ```; prints; ```; INFO: en_GB; INFO: en_US; INFO: en_US; ```; It is curious that `Locale.getDefault()` returns something different from the others... and different from what QuPath allows to be specified. @iwbh15 noticed this caused a problem with the [QuPath Align extension](https://github.com/qupath/qupath-extension-align) and traced it back to `Locale` in [`GeometryTools`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core/src/main/java/qupath/lib/roi/GeometryTools.java#L139), used in conjunction with a `NumberFormat`. **To Reproduce**; The script above hints there is a problem. To see it in practice requires using QuPath on a computer that uses a different `Locale` and calling a method that relies upon `Locale.getDefault()` *and* uses decimals.... and being surprised. Basically, it's not *that* easy to reproduce in practice.; But at the risk of messing up QuPath's preferences. ```groovy; import java.util.*; import java.text.*. Locale.setDefault(Locale.GERMANY); Locale.setDefault(Locale.Category.FORMAT, Locale.US); println NumberFormat.getInstance(Locale.getDefault()).parse(""0,1234.56""); println NumberFormat.getInstance(Locale.getDefault(Locale.Category.FORMAT)).parse(""0,1234.56""); ```; prints the following; ```; IN",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/886
https://github.com/qupath/qupath/issues/886:1616,Safety,risk,risk,1616,"categories). However, depending upon how the `Locale` is requested it can return different results. For me, the following Groovy script; ```groovy; import java.util.*; println Locale.getDefault(); println Locale.getDefault(Locale.Category.FORMAT); println Locale.getDefault(Locale.Category.DISPLAY); ```; prints; ```; INFO: en_GB; INFO: en_US; INFO: en_US; ```; It is curious that `Locale.getDefault()` returns something different from the others... and different from what QuPath allows to be specified. @iwbh15 noticed this caused a problem with the [QuPath Align extension](https://github.com/qupath/qupath-extension-align) and traced it back to `Locale` in [`GeometryTools`](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core/src/main/java/qupath/lib/roi/GeometryTools.java#L139), used in conjunction with a `NumberFormat`. **To Reproduce**; The script above hints there is a problem. To see it in practice requires using QuPath on a computer that uses a different `Locale` and calling a method that relies upon `Locale.getDefault()` *and* uses decimals.... and being surprised. Basically, it's not *that* easy to reproduce in practice.; But at the risk of messing up QuPath's preferences. ```groovy; import java.util.*; import java.text.*. Locale.setDefault(Locale.GERMANY); Locale.setDefault(Locale.Category.FORMAT, Locale.US); println NumberFormat.getInstance(Locale.getDefault()).parse(""0,1234.56""); println NumberFormat.getInstance(Locale.getDefault(Locale.Category.FORMAT)).parse(""0,1234.56""); ```; prints the following; ```; INFO: 0.1234; INFO: 1234.56; ```; demonstrating the importance of being consistent. If you run this, be sure to restart QuPath afterwards and check the locale is as before. **Expected behavior**; QuPath should never use `Locale.getDefault()` internally - a category should always be provided. **Desktop (please complete the following information):**; - QuPath v0.3.0 for the alignment problem, but possibly earlier versions.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/886
https://github.com/qupath/qupath/issues/889:1068,Modifiability,variab,variable,1068,"## Bug report. **Describe the bug**; The `Ignore case` option in the Find command of the Script Editor (Ctrl/CMD + F) looks for an exact match between the whole script converted to lower case and the original query (rather than the query converted to lower case). **To Reproduce**; Steps to reproduce the behavior:; 1. Go to the Script Editor; 2. Write `Hello world`; 3. Open the Find command window (Ctrl/CMD + F); 4. Search for `Hello`, observe how there are no match when `Ignore case` is selected and one match otherwise.; 5. Search for `world`, observe how there is one match in both situations, meaning that it works fine. **Expected behavior**; Search command should ignore case for both the query and the text in the script editor. **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3.2. **Additional context**; The problem is [here](https://github.com/qupath/qupath/blob/71884c60c1988d753e60a487ebb711c98ad6ad6c/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/DefaultScriptEditor.java#L2551), where the 'lower-cased' variable is not used for the search.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/889
https://github.com/qupath/qupath/pull/892:32,Usability,UX,UX,32,This commit exists to fix a few UX problems with the Find command window. These are the intended behaviours:; - Ctrl + F for the first time will show and focus the Find command window; - Ctrl + F not for the first time (e.g. window is already visible) will **also** focus the Find command window (now fixed); - Ctrl + F with selected text will focus 'Next' button; - Ctrl + F with no selected text will focus the `TextField` and select its content (now fixed),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/892
https://github.com/qupath/qupath/issues/894:687,Availability,down,downloads,687,"## Bug report. **Describe the bug**; QuPath v0.3.2 hangs when attempting to open certain images with Bio-Formats, outside of a project. The problem occurs when:; * Bio-Formats is the reader; * There are multiple series (non-thumbnail) in the file; * A project is *not* used to open the image. See https://forum.image.sc/t/problem-about-opening-ndpis-files-in-qupath-v0-3-1/62184/4. > **Update: Sometimes QuPath doesn't hang, but the image only opens at a low resolution**; > * #1023. **To Reproduce**; Steps to reproduce the behavior:; 1. Launch QuPath but do *not* open a project; 2. Try to open an image containing multiple (non-thumbnail) series using Bio-Formats; * e.g. see https://downloads.openmicroscopy.org/images/Hamamatsu-NDPI/manuel/; 3. Select any series from the *Open image* dialog; 4. Wait... and wait.... and wait... then force quit. **Expected behavior**; Image opens properly, both inside and outside a project. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 and v0.3.2. **Additional context**; Problem was introduced in https://github.com/qupath/qupath/pull/867 so should not affect any older versions. **Solution / Workaround**; [Create a a project](https://qupath.readthedocs.io/en/0.3/docs/tutorials/projects.html) first, then open the image. This avoids showing the 'Open image' dialog, and so should work.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/894
https://github.com/qupath/qupath/issues/894:386,Deployability,Update,Update,386,"## Bug report. **Describe the bug**; QuPath v0.3.2 hangs when attempting to open certain images with Bio-Formats, outside of a project. The problem occurs when:; * Bio-Formats is the reader; * There are multiple series (non-thumbnail) in the file; * A project is *not* used to open the image. See https://forum.image.sc/t/problem-about-opening-ndpis-files-in-qupath-v0-3-1/62184/4. > **Update: Sometimes QuPath doesn't hang, but the image only opens at a low resolution**; > * #1023. **To Reproduce**; Steps to reproduce the behavior:; 1. Launch QuPath but do *not* open a project; 2. Try to open an image containing multiple (non-thumbnail) series using Bio-Formats; * e.g. see https://downloads.openmicroscopy.org/images/Hamamatsu-NDPI/manuel/; 3. Select any series from the *Open image* dialog; 4. Wait... and wait.... and wait... then force quit. **Expected behavior**; Image opens properly, both inside and outside a project. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 and v0.3.2. **Additional context**; Problem was introduced in https://github.com/qupath/qupath/pull/867 so should not affect any older versions. **Solution / Workaround**; [Create a a project](https://qupath.readthedocs.io/en/0.3/docs/tutorials/projects.html) first, then open the image. This avoids showing the 'Open image' dialog, and so should work.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/894
https://github.com/qupath/qupath/issues/894:1309,Safety,avoid,avoids,1309,"## Bug report. **Describe the bug**; QuPath v0.3.2 hangs when attempting to open certain images with Bio-Formats, outside of a project. The problem occurs when:; * Bio-Formats is the reader; * There are multiple series (non-thumbnail) in the file; * A project is *not* used to open the image. See https://forum.image.sc/t/problem-about-opening-ndpis-files-in-qupath-v0-3-1/62184/4. > **Update: Sometimes QuPath doesn't hang, but the image only opens at a low resolution**; > * #1023. **To Reproduce**; Steps to reproduce the behavior:; 1. Launch QuPath but do *not* open a project; 2. Try to open an image containing multiple (non-thumbnail) series using Bio-Formats; * e.g. see https://downloads.openmicroscopy.org/images/Hamamatsu-NDPI/manuel/; 3. Select any series from the *Open image* dialog; 4. Wait... and wait.... and wait... then force quit. **Expected behavior**; Image opens properly, both inside and outside a project. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.1 and v0.3.2. **Additional context**; Problem was introduced in https://github.com/qupath/qupath/pull/867 so should not affect any older versions. **Solution / Workaround**; [Create a a project](https://qupath.readthedocs.io/en/0.3/docs/tutorials/projects.html) first, then open the image. This avoids showing the 'Open image' dialog, and so should work.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/894
https://github.com/qupath/qupath/pull/897:14,Performance,perform,performance,14,Resolves some performance issues with non-RGB overlays.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/897
https://github.com/qupath/qupath/pull/898:166,Usability,UX,UX,166,- Added 'Replace next' and 'Replace all' to Find command; - Fixed 'Previous' button that would search for the next occurrence instead of the previous one; - Improved UX; - Fixed find command window losing its owner whenever the Script Editor is closed,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/898
https://github.com/qupath/qupath/pull/899:227,Availability,error,error-logging-bug,227,- Fixed the total amount of objects missing the specific feature for the classifier to be applied correctly (it would previously always give the total amount of objects instead). Reported [here](https://forum.image.sc/t/qupath-error-logging-bug/62361).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/899
https://github.com/qupath/qupath/pull/899:233,Testability,log,logging-bug,233,- Fixed the total amount of objects missing the specific feature for the classifier to be applied correctly (it would previously always give the total amount of objects instead). Reported [here](https://forum.image.sc/t/qupath-error-logging-bug/62361).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/899
https://github.com/qupath/qupath/pull/901:514,Safety,avoid,avoid,514,"- Added the handling of new lines following a '{' character, which works as follows:; 1. A block is generally '{' + new line + indentation + new line + '}'; 2. The final caret position is set to inside the block; 3. If there originally was some text after '{', the text will be included inside the block. E.g. ; ```; forEach{doSomething(); }; ```; becomes: ; ```; forEach {; doSomething(); }; ```; 4. If the amount of '{' and '}' in the text is equal, it will add the new line but won't create a block. This is to avoid cases where there already is a closing bracket. E.g. hitting 'Enter' after the opening bracket in the following example will not add a closing bracket, since one is already present: ; ```; forEach { ; doSomething(); }; ```; becomes; ```; forEach {; ; doSomething(); }; ```; And not:; ```; forEach {; ; }; doSomething(); }; ```; 5. A space is added before '{' if there wasn't one already (purely aesthetic):; ```; forEach{...; }; ```; and; ```; forEach {...; }; ```; both become: ; ```; forEach {; ...; }; ```. - At this stage, this is quite experimental. However, it could develop into something more advanced in the future.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/901
https://github.com/qupath/qupath/pull/903:530,Deployability,update,updated,530,"- Fixed the View Tracking feature; - Renamed the View Tracking command; - Added the possibility to have more than one recording; - Recordings are automatically saved into the project folder and are reloaded when the command is called again; - Added data analysis pane to analyse the data from the recording; - Added `BufferedImageOverlay` to represent the time spent on each region of the image during the recording. This is a draft PR and more changes will be made to polish this feature. Moreover, the CHANGELOG will need to be updated.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/903
https://github.com/qupath/qupath/issues/904:431,Energy Efficiency,monitor,monitor,431,"**Describe the bug**; While zooming into a pyramidal ome.tiff image, the resolution does not change and the image remains pixelated. This may be due to the number of cached tiles not increasing (tiles not being cached). This bug only exists in v0.3.2. . For v0.3.0, the image resolution loads properly when zooming in. **To Reproduce**; 1. Open an ome.tiff file with QuPath v.0.3.2; 2. Under the ""View"" option, choose ""Show memory monitor""; 3. Zoom into your image while monitoring the number beside ""num cached files"" in the memory monitor; (For a comparison, repeat steps 1 to 3 with QuPath v0.3.0). **Expected behavior**; For v0.3.2, the value for num cached files remains the same.; For v0.3.0, the value for num cached files increases. **Desktop:**; - OS: 64-bit Windows 10",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/904
https://github.com/qupath/qupath/issues/904:471,Energy Efficiency,monitor,monitoring,471,"**Describe the bug**; While zooming into a pyramidal ome.tiff image, the resolution does not change and the image remains pixelated. This may be due to the number of cached tiles not increasing (tiles not being cached). This bug only exists in v0.3.2. . For v0.3.0, the image resolution loads properly when zooming in. **To Reproduce**; 1. Open an ome.tiff file with QuPath v.0.3.2; 2. Under the ""View"" option, choose ""Show memory monitor""; 3. Zoom into your image while monitoring the number beside ""num cached files"" in the memory monitor; (For a comparison, repeat steps 1 to 3 with QuPath v0.3.0). **Expected behavior**; For v0.3.2, the value for num cached files remains the same.; For v0.3.0, the value for num cached files increases. **Desktop:**; - OS: 64-bit Windows 10",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/904
https://github.com/qupath/qupath/issues/904:533,Energy Efficiency,monitor,monitor,533,"**Describe the bug**; While zooming into a pyramidal ome.tiff image, the resolution does not change and the image remains pixelated. This may be due to the number of cached tiles not increasing (tiles not being cached). This bug only exists in v0.3.2. . For v0.3.0, the image resolution loads properly when zooming in. **To Reproduce**; 1. Open an ome.tiff file with QuPath v.0.3.2; 2. Under the ""View"" option, choose ""Show memory monitor""; 3. Zoom into your image while monitoring the number beside ""num cached files"" in the memory monitor; (For a comparison, repeat steps 1 to 3 with QuPath v0.3.0). **Expected behavior**; For v0.3.2, the value for num cached files remains the same.; For v0.3.0, the value for num cached files increases. **Desktop:**; - OS: 64-bit Windows 10",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/904
https://github.com/qupath/qupath/issues/904:166,Performance,cache,cached,166,"**Describe the bug**; While zooming into a pyramidal ome.tiff image, the resolution does not change and the image remains pixelated. This may be due to the number of cached tiles not increasing (tiles not being cached). This bug only exists in v0.3.2. . For v0.3.0, the image resolution loads properly when zooming in. **To Reproduce**; 1. Open an ome.tiff file with QuPath v.0.3.2; 2. Under the ""View"" option, choose ""Show memory monitor""; 3. Zoom into your image while monitoring the number beside ""num cached files"" in the memory monitor; (For a comparison, repeat steps 1 to 3 with QuPath v0.3.0). **Expected behavior**; For v0.3.2, the value for num cached files remains the same.; For v0.3.0, the value for num cached files increases. **Desktop:**; - OS: 64-bit Windows 10",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/904
https://github.com/qupath/qupath/issues/904:211,Performance,cache,cached,211,"**Describe the bug**; While zooming into a pyramidal ome.tiff image, the resolution does not change and the image remains pixelated. This may be due to the number of cached tiles not increasing (tiles not being cached). This bug only exists in v0.3.2. . For v0.3.0, the image resolution loads properly when zooming in. **To Reproduce**; 1. Open an ome.tiff file with QuPath v.0.3.2; 2. Under the ""View"" option, choose ""Show memory monitor""; 3. Zoom into your image while monitoring the number beside ""num cached files"" in the memory monitor; (For a comparison, repeat steps 1 to 3 with QuPath v0.3.0). **Expected behavior**; For v0.3.2, the value for num cached files remains the same.; For v0.3.0, the value for num cached files increases. **Desktop:**; - OS: 64-bit Windows 10",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/904
https://github.com/qupath/qupath/issues/904:287,Performance,load,loads,287,"**Describe the bug**; While zooming into a pyramidal ome.tiff image, the resolution does not change and the image remains pixelated. This may be due to the number of cached tiles not increasing (tiles not being cached). This bug only exists in v0.3.2. . For v0.3.0, the image resolution loads properly when zooming in. **To Reproduce**; 1. Open an ome.tiff file with QuPath v.0.3.2; 2. Under the ""View"" option, choose ""Show memory monitor""; 3. Zoom into your image while monitoring the number beside ""num cached files"" in the memory monitor; (For a comparison, repeat steps 1 to 3 with QuPath v0.3.0). **Expected behavior**; For v0.3.2, the value for num cached files remains the same.; For v0.3.0, the value for num cached files increases. **Desktop:**; - OS: 64-bit Windows 10",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/904
https://github.com/qupath/qupath/issues/904:505,Performance,cache,cached,505,"**Describe the bug**; While zooming into a pyramidal ome.tiff image, the resolution does not change and the image remains pixelated. This may be due to the number of cached tiles not increasing (tiles not being cached). This bug only exists in v0.3.2. . For v0.3.0, the image resolution loads properly when zooming in. **To Reproduce**; 1. Open an ome.tiff file with QuPath v.0.3.2; 2. Under the ""View"" option, choose ""Show memory monitor""; 3. Zoom into your image while monitoring the number beside ""num cached files"" in the memory monitor; (For a comparison, repeat steps 1 to 3 with QuPath v0.3.0). **Expected behavior**; For v0.3.2, the value for num cached files remains the same.; For v0.3.0, the value for num cached files increases. **Desktop:**; - OS: 64-bit Windows 10",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/904
https://github.com/qupath/qupath/issues/904:655,Performance,cache,cached,655,"**Describe the bug**; While zooming into a pyramidal ome.tiff image, the resolution does not change and the image remains pixelated. This may be due to the number of cached tiles not increasing (tiles not being cached). This bug only exists in v0.3.2. . For v0.3.0, the image resolution loads properly when zooming in. **To Reproduce**; 1. Open an ome.tiff file with QuPath v.0.3.2; 2. Under the ""View"" option, choose ""Show memory monitor""; 3. Zoom into your image while monitoring the number beside ""num cached files"" in the memory monitor; (For a comparison, repeat steps 1 to 3 with QuPath v0.3.0). **Expected behavior**; For v0.3.2, the value for num cached files remains the same.; For v0.3.0, the value for num cached files increases. **Desktop:**; - OS: 64-bit Windows 10",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/904
https://github.com/qupath/qupath/issues/904:717,Performance,cache,cached,717,"**Describe the bug**; While zooming into a pyramidal ome.tiff image, the resolution does not change and the image remains pixelated. This may be due to the number of cached tiles not increasing (tiles not being cached). This bug only exists in v0.3.2. . For v0.3.0, the image resolution loads properly when zooming in. **To Reproduce**; 1. Open an ome.tiff file with QuPath v.0.3.2; 2. Under the ""View"" option, choose ""Show memory monitor""; 3. Zoom into your image while monitoring the number beside ""num cached files"" in the memory monitor; (For a comparison, repeat steps 1 to 3 with QuPath v0.3.0). **Expected behavior**; For v0.3.2, the value for num cached files remains the same.; For v0.3.0, the value for num cached files increases. **Desktop:**; - OS: 64-bit Windows 10",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/904
https://github.com/qupath/qupath/issues/905:274,Availability,down,down,274,"## Bug report. **Describe the bug**; When using Ctrl+Shift to avoid overlapping annotations, QuPath is taking annotations on other z-slices into account. **To Reproduce**; - Have a multi-z image open in QuPath; - Draw an annotation; - Move up to a different z-slice; - Hold down Ctrl and Shift and try and draw an annotation that would overlap with your first one if they were on the same slice. **Expected behavior**; I expected this to work on a per-slice method and that Ctrl + Shift would only take into account the annotations on the current slice. **Screenshots**; ![QuPath_Bug](https://user-images.githubusercontent.com/36237950/151961462-76c5c84f-6174-4692-8fa8-e566f5f021c2.png). **Desktop:**; - OS: Windows 10; - QuPath Version: 0.3.2, 0.3.0 and 0.2.3",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/905
https://github.com/qupath/qupath/issues/905:62,Safety,avoid,avoid,62,"## Bug report. **Describe the bug**; When using Ctrl+Shift to avoid overlapping annotations, QuPath is taking annotations on other z-slices into account. **To Reproduce**; - Have a multi-z image open in QuPath; - Draw an annotation; - Move up to a different z-slice; - Hold down Ctrl and Shift and try and draw an annotation that would overlap with your first one if they were on the same slice. **Expected behavior**; I expected this to work on a per-slice method and that Ctrl + Shift would only take into account the annotations on the current slice. **Screenshots**; ![QuPath_Bug](https://user-images.githubusercontent.com/36237950/151961462-76c5c84f-6174-4692-8fa8-e566f5f021c2.png). **Desktop:**; - OS: Windows 10; - QuPath Version: 0.3.2, 0.3.0 and 0.2.3",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/905
https://github.com/qupath/qupath/pull/906:88,Modifiability,variab,variable,88,- Fixed #905; - Added missing javadocs arguments; - Fixed minor call to static subclass variable,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/906
https://github.com/qupath/qupath/pull/907:355,Usability,simpl,simply,355,"- Added smart parentheses '(' and ')'. ; 1. Typing an opening parenthesis '(' will automatically add a closing one ')' and move the caret in the middle of both: (`_` is the caret position, not a character here). _Before_:; ```; _; ```; _After_:; ```; (_); ```; 2. Typing a closing parenthesis when the next character is already a closing parenthesis will simply move the caret forward one position:. _Before_:; ```; (_); ```; _After_:; ```; ()_; ```; And also, _Before_:; ```; doSomething(true_); ```; _After (the closing parenthesis is not repeated)_:; ```; doSomething(true)_; ```. - Smart double quotes '""'.; 1. Typing double quotes '""' will automatically add another following one and move the caret in-between:. _Before_:; ```; _; ```; _After_:; ```; ""_""; ```; 2. Typing double quotes '""' when the next character is already a double quotes will simply move the caret forward one position:. _Before_:; ```; ""_""; ```; _After_:; ```; """"_; ```; And also, _Before_:; ```; ""Hello World_""; ```; _After_:; ```; ""Hello World""_; ```. ### Note; This PR cannot be merged until these notes are checked manually:; - The smart parentheses behaviour is currently triggered by either typing the left/right parenthesis keys or `Shift` + `9`/`0`, which might not be applicable to all keyboards/locales.; - The smart double quotes behaviour is currently triggered by either typing the double quotes key or `Shift` + `2`, which might not be applicable to all keyboards/locales.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/907
https://github.com/qupath/qupath/pull/907:850,Usability,simpl,simply,850,"- Added smart parentheses '(' and ')'. ; 1. Typing an opening parenthesis '(' will automatically add a closing one ')' and move the caret in the middle of both: (`_` is the caret position, not a character here). _Before_:; ```; _; ```; _After_:; ```; (_); ```; 2. Typing a closing parenthesis when the next character is already a closing parenthesis will simply move the caret forward one position:. _Before_:; ```; (_); ```; _After_:; ```; ()_; ```; And also, _Before_:; ```; doSomething(true_); ```; _After (the closing parenthesis is not repeated)_:; ```; doSomething(true)_; ```. - Smart double quotes '""'.; 1. Typing double quotes '""' will automatically add another following one and move the caret in-between:. _Before_:; ```; _; ```; _After_:; ```; ""_""; ```; 2. Typing double quotes '""' when the next character is already a double quotes will simply move the caret forward one position:. _Before_:; ```; ""_""; ```; _After_:; ```; """"_; ```; And also, _Before_:; ```; ""Hello World_""; ```; _After_:; ```; ""Hello World""_; ```. ### Note; This PR cannot be merged until these notes are checked manually:; - The smart parentheses behaviour is currently triggered by either typing the left/right parenthesis keys or `Shift` + `9`/`0`, which might not be applicable to all keyboards/locales.; - The smart double quotes behaviour is currently triggered by either typing the double quotes key or `Shift` + `2`, which might not be applicable to all keyboards/locales.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/907
https://github.com/qupath/qupath/pull/913:2,Deployability,Update,Update,2,"* Update JavaCPP/OpenCV. This includes Apple Silicon support if built with a compatible JDK (but OpenSlide/Bio-Formats still won't work).; * Update Picocli; * Remove `SecurityManager` reference in `ThreadTools`, because it is deprecated for removal in Java 17",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/913
https://github.com/qupath/qupath/pull/913:141,Deployability,Update,Update,141,"* Update JavaCPP/OpenCV. This includes Apple Silicon support if built with a compatible JDK (but OpenSlide/Bio-Formats still won't work).; * Update Picocli; * Remove `SecurityManager` reference in `ThreadTools`, because it is deprecated for removal in Java 17",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/913
https://github.com/qupath/qupath/pull/913:167,Security,Secur,SecurityManager,167,"* Update JavaCPP/OpenCV. This includes Apple Silicon support if built with a compatible JDK (but OpenSlide/Bio-Formats still won't work).; * Update Picocli; * Remove `SecurityManager` reference in `ThreadTools`, because it is deprecated for removal in Java 17",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/913
https://github.com/qupath/qupath/issues/914:366,Availability,error,error,366,"## Bug report. **Describe the bug**; Initial bug report and steps to reproduce at https://forum.image.sc/t/qupath-script-cannot-access-java-library-and-project-data-simultanely/63388. The problem is that a class cannot be loaded from an extension far for multiple images in a project. When I tried, the first image 'worked' but all subsequent images failed with the error; ```; It looks like you have tried to import a class ‘qupath.ext.biop.cellpose.CellposeSetup’ that doesn’t exist!; MultipleCompilationErrorsException at line 7: startup failed:; Script2.groovy: 8: unable to resolve class qupath.ext.biop.cellpose.CellposeSetup; ```. **Expected behavior**; Extension jars are available for all images in the project when running from the command line, similar to how they are available when running through the GUI. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 (earlier versions had other extension classpath problems). **Additional context**; The problem originates at https://github.com/qupath/qupath/blob/main/qupath-app/src/main/java/qupath/QuPath.java#L299 when a new `ExtensionClassLoader` instance is created. We need to instead use `QuPathGUI.getExtensionClassLoader()` consistently, since this is also requested within `DefaultScriptEditor`, e.g. [here](https://github.com/qupath/qupath/blob/7090e8137825f8f7dbc623c20bc62030c5c7db65/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/DefaultScriptEditor.java#L479). But if doing that, it may make more sense to add an `ExtensionClassLoader.getInstance()` method to avoid relying on `QuPathGUI.class` altogether.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/914
https://github.com/qupath/qupath/issues/914:680,Availability,avail,available,680,"## Bug report. **Describe the bug**; Initial bug report and steps to reproduce at https://forum.image.sc/t/qupath-script-cannot-access-java-library-and-project-data-simultanely/63388. The problem is that a class cannot be loaded from an extension far for multiple images in a project. When I tried, the first image 'worked' but all subsequent images failed with the error; ```; It looks like you have tried to import a class ‘qupath.ext.biop.cellpose.CellposeSetup’ that doesn’t exist!; MultipleCompilationErrorsException at line 7: startup failed:; Script2.groovy: 8: unable to resolve class qupath.ext.biop.cellpose.CellposeSetup; ```. **Expected behavior**; Extension jars are available for all images in the project when running from the command line, similar to how they are available when running through the GUI. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 (earlier versions had other extension classpath problems). **Additional context**; The problem originates at https://github.com/qupath/qupath/blob/main/qupath-app/src/main/java/qupath/QuPath.java#L299 when a new `ExtensionClassLoader` instance is created. We need to instead use `QuPathGUI.getExtensionClassLoader()` consistently, since this is also requested within `DefaultScriptEditor`, e.g. [here](https://github.com/qupath/qupath/blob/7090e8137825f8f7dbc623c20bc62030c5c7db65/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/DefaultScriptEditor.java#L479). But if doing that, it may make more sense to add an `ExtensionClassLoader.getInstance()` method to avoid relying on `QuPathGUI.class` altogether.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/914
https://github.com/qupath/qupath/issues/914:780,Availability,avail,available,780,"## Bug report. **Describe the bug**; Initial bug report and steps to reproduce at https://forum.image.sc/t/qupath-script-cannot-access-java-library-and-project-data-simultanely/63388. The problem is that a class cannot be loaded from an extension far for multiple images in a project. When I tried, the first image 'worked' but all subsequent images failed with the error; ```; It looks like you have tried to import a class ‘qupath.ext.biop.cellpose.CellposeSetup’ that doesn’t exist!; MultipleCompilationErrorsException at line 7: startup failed:; Script2.groovy: 8: unable to resolve class qupath.ext.biop.cellpose.CellposeSetup; ```. **Expected behavior**; Extension jars are available for all images in the project when running from the command line, similar to how they are available when running through the GUI. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 (earlier versions had other extension classpath problems). **Additional context**; The problem originates at https://github.com/qupath/qupath/blob/main/qupath-app/src/main/java/qupath/QuPath.java#L299 when a new `ExtensionClassLoader` instance is created. We need to instead use `QuPathGUI.getExtensionClassLoader()` consistently, since this is also requested within `DefaultScriptEditor`, e.g. [here](https://github.com/qupath/qupath/blob/7090e8137825f8f7dbc623c20bc62030c5c7db65/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/DefaultScriptEditor.java#L479). But if doing that, it may make more sense to add an `ExtensionClassLoader.getInstance()` method to avoid relying on `QuPathGUI.class` altogether.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/914
https://github.com/qupath/qupath/issues/914:222,Performance,load,loaded,222,"## Bug report. **Describe the bug**; Initial bug report and steps to reproduce at https://forum.image.sc/t/qupath-script-cannot-access-java-library-and-project-data-simultanely/63388. The problem is that a class cannot be loaded from an extension far for multiple images in a project. When I tried, the first image 'worked' but all subsequent images failed with the error; ```; It looks like you have tried to import a class ‘qupath.ext.biop.cellpose.CellposeSetup’ that doesn’t exist!; MultipleCompilationErrorsException at line 7: startup failed:; Script2.groovy: 8: unable to resolve class qupath.ext.biop.cellpose.CellposeSetup; ```. **Expected behavior**; Extension jars are available for all images in the project when running from the command line, similar to how they are available when running through the GUI. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 (earlier versions had other extension classpath problems). **Additional context**; The problem originates at https://github.com/qupath/qupath/blob/main/qupath-app/src/main/java/qupath/QuPath.java#L299 when a new `ExtensionClassLoader` instance is created. We need to instead use `QuPathGUI.getExtensionClassLoader()` consistently, since this is also requested within `DefaultScriptEditor`, e.g. [here](https://github.com/qupath/qupath/blob/7090e8137825f8f7dbc623c20bc62030c5c7db65/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/DefaultScriptEditor.java#L479). But if doing that, it may make more sense to add an `ExtensionClassLoader.getInstance()` method to avoid relying on `QuPathGUI.class` altogether.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/914
https://github.com/qupath/qupath/issues/914:1570,Safety,avoid,avoid,1570,"## Bug report. **Describe the bug**; Initial bug report and steps to reproduce at https://forum.image.sc/t/qupath-script-cannot-access-java-library-and-project-data-simultanely/63388. The problem is that a class cannot be loaded from an extension far for multiple images in a project. When I tried, the first image 'worked' but all subsequent images failed with the error; ```; It looks like you have tried to import a class ‘qupath.ext.biop.cellpose.CellposeSetup’ that doesn’t exist!; MultipleCompilationErrorsException at line 7: startup failed:; Script2.groovy: 8: unable to resolve class qupath.ext.biop.cellpose.CellposeSetup; ```. **Expected behavior**; Extension jars are available for all images in the project when running from the command line, similar to how they are available when running through the GUI. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 (earlier versions had other extension classpath problems). **Additional context**; The problem originates at https://github.com/qupath/qupath/blob/main/qupath-app/src/main/java/qupath/QuPath.java#L299 when a new `ExtensionClassLoader` instance is created. We need to instead use `QuPathGUI.getExtensionClassLoader()` consistently, since this is also requested within `DefaultScriptEditor`, e.g. [here](https://github.com/qupath/qupath/blob/7090e8137825f8f7dbc623c20bc62030c5c7db65/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/DefaultScriptEditor.java#L479). But if doing that, it may make more sense to add an `ExtensionClassLoader.getInstance()` method to avoid relying on `QuPathGUI.class` altogether.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/914
https://github.com/qupath/qupath/issues/914:128,Security,access,access-java-library-and-project-data-simultanely,128,"## Bug report. **Describe the bug**; Initial bug report and steps to reproduce at https://forum.image.sc/t/qupath-script-cannot-access-java-library-and-project-data-simultanely/63388. The problem is that a class cannot be loaded from an extension far for multiple images in a project. When I tried, the first image 'worked' but all subsequent images failed with the error; ```; It looks like you have tried to import a class ‘qupath.ext.biop.cellpose.CellposeSetup’ that doesn’t exist!; MultipleCompilationErrorsException at line 7: startup failed:; Script2.groovy: 8: unable to resolve class qupath.ext.biop.cellpose.CellposeSetup; ```. **Expected behavior**; Extension jars are available for all images in the project when running from the command line, similar to how they are available when running through the GUI. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 (earlier versions had other extension classpath problems). **Additional context**; The problem originates at https://github.com/qupath/qupath/blob/main/qupath-app/src/main/java/qupath/QuPath.java#L299 when a new `ExtensionClassLoader` instance is created. We need to instead use `QuPathGUI.getExtensionClassLoader()` consistently, since this is also requested within `DefaultScriptEditor`, e.g. [here](https://github.com/qupath/qupath/blob/7090e8137825f8f7dbc623c20bc62030c5c7db65/qupath-gui-fx/src/main/java/qupath/lib/gui/scripting/DefaultScriptEditor.java#L479). But if doing that, it may make more sense to add an `ExtensionClassLoader.getInstance()` method to avoid relying on `QuPathGUI.class` altogether.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/914
https://github.com/qupath/qupath/issues/915:187,Availability,error,error,187,"## Bug report. **Describe the bug**; If attempting to remove over 255 measurements at once through the measurement manager, the corresponding workflow entry for that action will throw an error. This is due to the maximum number of supported arguments for a groovy function being 255. **To Reproduce**; Steps to reproduce the behavior:; 1. Create >255 different measurements for a project entry containing detection objects.; 2. Remove >255 measurements through the measurement manager GUI in one action.; 3. Create a script from the workflow tab consisting of all of the above actions. Note the error message:; `ERROR: MultipleCompilationErrorsException: startup failed:; General error during instruction selection: The max number of supported arguments is 255, but found 1191`. **Expected behavior**; The script generated from the workflow tab should be able to reproduce most of the plugin-based actions, including the act of removing measurements. A quick fix is to modify the generated script and distribute the list of measurements to remove over multiple `removeMeasurement()` operations. **Screenshots**; ![image](https://user-images.githubusercontent.com/52012166/154319405-e0b09a53-0f29-4feb-a77f-43640053b828.png). **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.4.0-SNAPSHOT. **Additional context**; Minor issue, easy enough to manually distribute the list of measurements to remove over multiple `removeMeasurement()` statements",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/915
https://github.com/qupath/qupath/issues/915:595,Availability,error,error,595,"## Bug report. **Describe the bug**; If attempting to remove over 255 measurements at once through the measurement manager, the corresponding workflow entry for that action will throw an error. This is due to the maximum number of supported arguments for a groovy function being 255. **To Reproduce**; Steps to reproduce the behavior:; 1. Create >255 different measurements for a project entry containing detection objects.; 2. Remove >255 measurements through the measurement manager GUI in one action.; 3. Create a script from the workflow tab consisting of all of the above actions. Note the error message:; `ERROR: MultipleCompilationErrorsException: startup failed:; General error during instruction selection: The max number of supported arguments is 255, but found 1191`. **Expected behavior**; The script generated from the workflow tab should be able to reproduce most of the plugin-based actions, including the act of removing measurements. A quick fix is to modify the generated script and distribute the list of measurements to remove over multiple `removeMeasurement()` operations. **Screenshots**; ![image](https://user-images.githubusercontent.com/52012166/154319405-e0b09a53-0f29-4feb-a77f-43640053b828.png). **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.4.0-SNAPSHOT. **Additional context**; Minor issue, easy enough to manually distribute the list of measurements to remove over multiple `removeMeasurement()` statements",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/915
https://github.com/qupath/qupath/issues/915:612,Availability,ERROR,ERROR,612,"## Bug report. **Describe the bug**; If attempting to remove over 255 measurements at once through the measurement manager, the corresponding workflow entry for that action will throw an error. This is due to the maximum number of supported arguments for a groovy function being 255. **To Reproduce**; Steps to reproduce the behavior:; 1. Create >255 different measurements for a project entry containing detection objects.; 2. Remove >255 measurements through the measurement manager GUI in one action.; 3. Create a script from the workflow tab consisting of all of the above actions. Note the error message:; `ERROR: MultipleCompilationErrorsException: startup failed:; General error during instruction selection: The max number of supported arguments is 255, but found 1191`. **Expected behavior**; The script generated from the workflow tab should be able to reproduce most of the plugin-based actions, including the act of removing measurements. A quick fix is to modify the generated script and distribute the list of measurements to remove over multiple `removeMeasurement()` operations. **Screenshots**; ![image](https://user-images.githubusercontent.com/52012166/154319405-e0b09a53-0f29-4feb-a77f-43640053b828.png). **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.4.0-SNAPSHOT. **Additional context**; Minor issue, easy enough to manually distribute the list of measurements to remove over multiple `removeMeasurement()` statements",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/915
https://github.com/qupath/qupath/issues/915:680,Availability,error,error,680,"## Bug report. **Describe the bug**; If attempting to remove over 255 measurements at once through the measurement manager, the corresponding workflow entry for that action will throw an error. This is due to the maximum number of supported arguments for a groovy function being 255. **To Reproduce**; Steps to reproduce the behavior:; 1. Create >255 different measurements for a project entry containing detection objects.; 2. Remove >255 measurements through the measurement manager GUI in one action.; 3. Create a script from the workflow tab consisting of all of the above actions. Note the error message:; `ERROR: MultipleCompilationErrorsException: startup failed:; General error during instruction selection: The max number of supported arguments is 255, but found 1191`. **Expected behavior**; The script generated from the workflow tab should be able to reproduce most of the plugin-based actions, including the act of removing measurements. A quick fix is to modify the generated script and distribute the list of measurements to remove over multiple `removeMeasurement()` operations. **Screenshots**; ![image](https://user-images.githubusercontent.com/52012166/154319405-e0b09a53-0f29-4feb-a77f-43640053b828.png). **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.4.0-SNAPSHOT. **Additional context**; Minor issue, easy enough to manually distribute the list of measurements to remove over multiple `removeMeasurement()` statements",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/915
https://github.com/qupath/qupath/issues/915:601,Integrability,message,message,601,"## Bug report. **Describe the bug**; If attempting to remove over 255 measurements at once through the measurement manager, the corresponding workflow entry for that action will throw an error. This is due to the maximum number of supported arguments for a groovy function being 255. **To Reproduce**; Steps to reproduce the behavior:; 1. Create >255 different measurements for a project entry containing detection objects.; 2. Remove >255 measurements through the measurement manager GUI in one action.; 3. Create a script from the workflow tab consisting of all of the above actions. Note the error message:; `ERROR: MultipleCompilationErrorsException: startup failed:; General error during instruction selection: The max number of supported arguments is 255, but found 1191`. **Expected behavior**; The script generated from the workflow tab should be able to reproduce most of the plugin-based actions, including the act of removing measurements. A quick fix is to modify the generated script and distribute the list of measurements to remove over multiple `removeMeasurement()` operations. **Screenshots**; ![image](https://user-images.githubusercontent.com/52012166/154319405-e0b09a53-0f29-4feb-a77f-43640053b828.png). **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.4.0-SNAPSHOT. **Additional context**; Minor issue, easy enough to manually distribute the list of measurements to remove over multiple `removeMeasurement()` statements",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/915
https://github.com/qupath/qupath/issues/915:885,Modifiability,plugin,plugin-based,885,"## Bug report. **Describe the bug**; If attempting to remove over 255 measurements at once through the measurement manager, the corresponding workflow entry for that action will throw an error. This is due to the maximum number of supported arguments for a groovy function being 255. **To Reproduce**; Steps to reproduce the behavior:; 1. Create >255 different measurements for a project entry containing detection objects.; 2. Remove >255 measurements through the measurement manager GUI in one action.; 3. Create a script from the workflow tab consisting of all of the above actions. Note the error message:; `ERROR: MultipleCompilationErrorsException: startup failed:; General error during instruction selection: The max number of supported arguments is 255, but found 1191`. **Expected behavior**; The script generated from the workflow tab should be able to reproduce most of the plugin-based actions, including the act of removing measurements. A quick fix is to modify the generated script and distribute the list of measurements to remove over multiple `removeMeasurement()` operations. **Screenshots**; ![image](https://user-images.githubusercontent.com/52012166/154319405-e0b09a53-0f29-4feb-a77f-43640053b828.png). **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.4.0-SNAPSHOT. **Additional context**; Minor issue, easy enough to manually distribute the list of measurements to remove over multiple `removeMeasurement()` statements",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/915
https://github.com/qupath/qupath/issues/915:405,Safety,detect,detection,405,"## Bug report. **Describe the bug**; If attempting to remove over 255 measurements at once through the measurement manager, the corresponding workflow entry for that action will throw an error. This is due to the maximum number of supported arguments for a groovy function being 255. **To Reproduce**; Steps to reproduce the behavior:; 1. Create >255 different measurements for a project entry containing detection objects.; 2. Remove >255 measurements through the measurement manager GUI in one action.; 3. Create a script from the workflow tab consisting of all of the above actions. Note the error message:; `ERROR: MultipleCompilationErrorsException: startup failed:; General error during instruction selection: The max number of supported arguments is 255, but found 1191`. **Expected behavior**; The script generated from the workflow tab should be able to reproduce most of the plugin-based actions, including the act of removing measurements. A quick fix is to modify the generated script and distribute the list of measurements to remove over multiple `removeMeasurement()` operations. **Screenshots**; ![image](https://user-images.githubusercontent.com/52012166/154319405-e0b09a53-0f29-4feb-a77f-43640053b828.png). **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version 0.4.0-SNAPSHOT. **Additional context**; Minor issue, easy enough to manually distribute the list of measurements to remove over multiple `removeMeasurement()` statements",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/915
https://github.com/qupath/qupath/issues/916:149,Availability,down,down,149,"## Bug report. **Describe the bug**; The ScriptEditor throws an `IndexOutOfBoundsException` when deleting text that was just inserted, having `CTRL` down (and probably `CMD` too?). **To Reproduce**; Steps to reproduce the behavior:; 1. Go to the script editor; 2. Get the first auto-completed word by hitting `CTRL` + `SPACE` (i.e. `BRIGHTFIELD_H_DAB` at the time of writing); 3. Delete the word, by hitting the `CTRL` + `BACKSPACE` keys; 4. Re-hit `CTRL` + `SPACE` to trigger the auto-complete again.; 5. See Exception thrown. **Expected behavior**; The word should be auto-completed again (i.e. `BRIGHTFIELD_H_DAB` should be written). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.3.2. **Additional context**; I believe the problem originates [here](https://github.com/qupath/qupath/blob/10b44a58b8c08ca925aa44bc08eaf1fa3eb70584/qupath-extension-script-editor/src/main/java/qupath/lib/gui/scripting/richtextfx/RichScriptEditor.java#L357), where reinitialising the `AutoCompletor` object is skipped and it shouldn't. However, the reason for this `if` block is to avoid the `AutoCompletor` object to be reinitialised when the user is iterating through all the possible completion suggestions (e.g. most users will naturally hit the `CTRL`/`CMD` key before the `SPACE` key, creating a `KeyEvent` in the middle that needs to be filtered out).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/916
https://github.com/qupath/qupath/issues/916:1108,Safety,avoid,avoid,1108,"## Bug report. **Describe the bug**; The ScriptEditor throws an `IndexOutOfBoundsException` when deleting text that was just inserted, having `CTRL` down (and probably `CMD` too?). **To Reproduce**; Steps to reproduce the behavior:; 1. Go to the script editor; 2. Get the first auto-completed word by hitting `CTRL` + `SPACE` (i.e. `BRIGHTFIELD_H_DAB` at the time of writing); 3. Delete the word, by hitting the `CTRL` + `BACKSPACE` keys; 4. Re-hit `CTRL` + `SPACE` to trigger the auto-complete again.; 5. See Exception thrown. **Expected behavior**; The word should be auto-completed again (i.e. `BRIGHTFIELD_H_DAB` should be written). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.3.2. **Additional context**; I believe the problem originates [here](https://github.com/qupath/qupath/blob/10b44a58b8c08ca925aa44bc08eaf1fa3eb70584/qupath-extension-script-editor/src/main/java/qupath/lib/gui/scripting/richtextfx/RichScriptEditor.java#L357), where reinitialising the `AutoCompletor` object is skipped and it shouldn't. However, the reason for this `if` block is to avoid the `AutoCompletor` object to be reinitialised when the user is iterating through all the possible completion suggestions (e.g. most users will naturally hit the `CTRL`/`CMD` key before the `SPACE` key, creating a `KeyEvent` in the middle that needs to be filtered out).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/916
https://github.com/qupath/qupath/pull/917:175,Integrability,Interface,Interface,175,"### Refactored the Script Editor package:; - Separated classes into different files; - Fixed little inconsistencies in the DefaultScriptEditor; - Created 'ScriptHighlighting' Interface -> to be used by ScriptEditors that wants to display different types of highlightings.; - Created `ScriptAutoCompletor` Interface -> to be used by ScriptEditors that implements auto-complete features.; - Created `ScriptSyntax` Interface -> to be used by ScriptEditors that implements syntax formatting features (e.g. brace block handling, smart parentheses, etc..).; - Implemented `Plain` and `Groovy` highlighting/auto-completor/syntaxing.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/917
https://github.com/qupath/qupath/pull/917:305,Integrability,Interface,Interface,305,"### Refactored the Script Editor package:; - Separated classes into different files; - Fixed little inconsistencies in the DefaultScriptEditor; - Created 'ScriptHighlighting' Interface -> to be used by ScriptEditors that wants to display different types of highlightings.; - Created `ScriptAutoCompletor` Interface -> to be used by ScriptEditors that implements auto-complete features.; - Created `ScriptSyntax` Interface -> to be used by ScriptEditors that implements syntax formatting features (e.g. brace block handling, smart parentheses, etc..).; - Implemented `Plain` and `Groovy` highlighting/auto-completor/syntaxing.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/917
https://github.com/qupath/qupath/pull/917:412,Integrability,Interface,Interface,412,"### Refactored the Script Editor package:; - Separated classes into different files; - Fixed little inconsistencies in the DefaultScriptEditor; - Created 'ScriptHighlighting' Interface -> to be used by ScriptEditors that wants to display different types of highlightings.; - Created `ScriptAutoCompletor` Interface -> to be used by ScriptEditors that implements auto-complete features.; - Created `ScriptSyntax` Interface -> to be used by ScriptEditors that implements syntax formatting features (e.g. brace block handling, smart parentheses, etc..).; - Implemented `Plain` and `Groovy` highlighting/auto-completor/syntaxing.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/917
https://github.com/qupath/qupath/pull/917:4,Modifiability,Refactor,Refactored,4,"### Refactored the Script Editor package:; - Separated classes into different files; - Fixed little inconsistencies in the DefaultScriptEditor; - Created 'ScriptHighlighting' Interface -> to be used by ScriptEditors that wants to display different types of highlightings.; - Created `ScriptAutoCompletor` Interface -> to be used by ScriptEditors that implements auto-complete features.; - Created `ScriptSyntax` Interface -> to be used by ScriptEditors that implements syntax formatting features (e.g. brace block handling, smart parentheses, etc..).; - Implemented `Plain` and `Groovy` highlighting/auto-completor/syntaxing.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/917
https://github.com/qupath/qupath/pull/918:129,Modifiability,plugin,plugin,129,* New 'Extensions -> ImageJ -> Import ImageJ ROIs' command; * Import .roi and RoiSet.zip files by drag & drop; * Built-in ImageJ plugin to send RoiManager ROIs to QuPath (not only overlays); * Retain ROI position information when sending ROIs from ImageJ (hyper)stacks,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/918
https://github.com/qupath/qupath/pull/921:98,Usability,simpl,simpler,98,"Files.probeContentType(path) was failing to identify a zip file sometimes, so switch instead to a simpler check of file extension.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/921
https://github.com/qupath/qupath/pull/923:0,Safety,Avoid,Avoid,0,"Avoid setting annotation color in a `PathObject` when setting other properties and keeping the default display color.; Previously, a color property was set even if the user only wanted to add a name or edit the object description through the UI. (Sidenote: the color is reset when a classification is assigned to an object.)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/923
https://github.com/qupath/qupath/pull/925:8,Energy Efficiency,reduce,reduce,8,Aims to reduce confusion with options being unavailable (thanks @melvingelbard :) ),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/925
https://github.com/qupath/qupath/issues/932:372,Availability,error,error,372,"## Bug report; I have a script which extracts tiles from specific regions in WSIs. In a python object, I call a subprocess which runs this script on WSIs. I'm using a mixture of tif files (from ventana), svs (from aperio) and ndpi (from hamamatsu). When I run the tile extraction over my ~1000 scans, things work fine for the most part, but occasionally I get a core dump error from java. If I run the code on the *same* image it just broke on again, it works fine. There is seemingly no regularity to which images it fails on, other than they seem to be "".tif"" files. I have never had this bug appear on previous versions of QuPath. I attach the log I get when Java core dumps, and I also attach the tile extraction script I am using (converted to txt as it won't let me upload a groovy script). Somewhat out of my depth when it comes to understanding this, but it seems pretty clear it's a bug. [wsi_patch_extractor.txt](https://github.com/qupath/qupath/files/8168829/wsi_patch_extractor.txt). [hs_err_pid314639.log](https://github.com/qupath/qupath/files/8168813/hs_err_pid314639.log). **To Reproduce**; I run the groovy script with ""qupath script my_script --args [...]"", and have a symbolic link to the qupath binary in ""/home/user/bin/qupath"". I'm not sure sending test images will help, as it sometimes runs on 100s before breaking. **Expected behavior**; In the vast majority of cases, the tile extractor script works exactly as I'd expect, and creates a directory filled with tiles. **Desktop (please complete the following information):**; - OS: Ubuntu 20.04.4 LTS; - QuPath Version 0.3.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/932
https://github.com/qupath/qupath/issues/932:647,Testability,log,log,647,"## Bug report; I have a script which extracts tiles from specific regions in WSIs. In a python object, I call a subprocess which runs this script on WSIs. I'm using a mixture of tif files (from ventana), svs (from aperio) and ndpi (from hamamatsu). When I run the tile extraction over my ~1000 scans, things work fine for the most part, but occasionally I get a core dump error from java. If I run the code on the *same* image it just broke on again, it works fine. There is seemingly no regularity to which images it fails on, other than they seem to be "".tif"" files. I have never had this bug appear on previous versions of QuPath. I attach the log I get when Java core dumps, and I also attach the tile extraction script I am using (converted to txt as it won't let me upload a groovy script). Somewhat out of my depth when it comes to understanding this, but it seems pretty clear it's a bug. [wsi_patch_extractor.txt](https://github.com/qupath/qupath/files/8168829/wsi_patch_extractor.txt). [hs_err_pid314639.log](https://github.com/qupath/qupath/files/8168813/hs_err_pid314639.log). **To Reproduce**; I run the groovy script with ""qupath script my_script --args [...]"", and have a symbolic link to the qupath binary in ""/home/user/bin/qupath"". I'm not sure sending test images will help, as it sometimes runs on 100s before breaking. **Expected behavior**; In the vast majority of cases, the tile extractor script works exactly as I'd expect, and creates a directory filled with tiles. **Desktop (please complete the following information):**; - OS: Ubuntu 20.04.4 LTS; - QuPath Version 0.3.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/932
https://github.com/qupath/qupath/issues/932:1014,Testability,log,log,1014,"## Bug report; I have a script which extracts tiles from specific regions in WSIs. In a python object, I call a subprocess which runs this script on WSIs. I'm using a mixture of tif files (from ventana), svs (from aperio) and ndpi (from hamamatsu). When I run the tile extraction over my ~1000 scans, things work fine for the most part, but occasionally I get a core dump error from java. If I run the code on the *same* image it just broke on again, it works fine. There is seemingly no regularity to which images it fails on, other than they seem to be "".tif"" files. I have never had this bug appear on previous versions of QuPath. I attach the log I get when Java core dumps, and I also attach the tile extraction script I am using (converted to txt as it won't let me upload a groovy script). Somewhat out of my depth when it comes to understanding this, but it seems pretty clear it's a bug. [wsi_patch_extractor.txt](https://github.com/qupath/qupath/files/8168829/wsi_patch_extractor.txt). [hs_err_pid314639.log](https://github.com/qupath/qupath/files/8168813/hs_err_pid314639.log). **To Reproduce**; I run the groovy script with ""qupath script my_script --args [...]"", and have a symbolic link to the qupath binary in ""/home/user/bin/qupath"". I'm not sure sending test images will help, as it sometimes runs on 100s before breaking. **Expected behavior**; In the vast majority of cases, the tile extractor script works exactly as I'd expect, and creates a directory filled with tiles. **Desktop (please complete the following information):**; - OS: Ubuntu 20.04.4 LTS; - QuPath Version 0.3.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/932
https://github.com/qupath/qupath/issues/932:1083,Testability,log,log,1083,"## Bug report; I have a script which extracts tiles from specific regions in WSIs. In a python object, I call a subprocess which runs this script on WSIs. I'm using a mixture of tif files (from ventana), svs (from aperio) and ndpi (from hamamatsu). When I run the tile extraction over my ~1000 scans, things work fine for the most part, but occasionally I get a core dump error from java. If I run the code on the *same* image it just broke on again, it works fine. There is seemingly no regularity to which images it fails on, other than they seem to be "".tif"" files. I have never had this bug appear on previous versions of QuPath. I attach the log I get when Java core dumps, and I also attach the tile extraction script I am using (converted to txt as it won't let me upload a groovy script). Somewhat out of my depth when it comes to understanding this, but it seems pretty clear it's a bug. [wsi_patch_extractor.txt](https://github.com/qupath/qupath/files/8168829/wsi_patch_extractor.txt). [hs_err_pid314639.log](https://github.com/qupath/qupath/files/8168813/hs_err_pid314639.log). **To Reproduce**; I run the groovy script with ""qupath script my_script --args [...]"", and have a symbolic link to the qupath binary in ""/home/user/bin/qupath"". I'm not sure sending test images will help, as it sometimes runs on 100s before breaking. **Expected behavior**; In the vast majority of cases, the tile extractor script works exactly as I'd expect, and creates a directory filled with tiles. **Desktop (please complete the following information):**; - OS: Ubuntu 20.04.4 LTS; - QuPath Version 0.3.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/932
https://github.com/qupath/qupath/issues/932:1271,Testability,test,test,1271,"## Bug report; I have a script which extracts tiles from specific regions in WSIs. In a python object, I call a subprocess which runs this script on WSIs. I'm using a mixture of tif files (from ventana), svs (from aperio) and ndpi (from hamamatsu). When I run the tile extraction over my ~1000 scans, things work fine for the most part, but occasionally I get a core dump error from java. If I run the code on the *same* image it just broke on again, it works fine. There is seemingly no regularity to which images it fails on, other than they seem to be "".tif"" files. I have never had this bug appear on previous versions of QuPath. I attach the log I get when Java core dumps, and I also attach the tile extraction script I am using (converted to txt as it won't let me upload a groovy script). Somewhat out of my depth when it comes to understanding this, but it seems pretty clear it's a bug. [wsi_patch_extractor.txt](https://github.com/qupath/qupath/files/8168829/wsi_patch_extractor.txt). [hs_err_pid314639.log](https://github.com/qupath/qupath/files/8168813/hs_err_pid314639.log). **To Reproduce**; I run the groovy script with ""qupath script my_script --args [...]"", and have a symbolic link to the qupath binary in ""/home/user/bin/qupath"". I'm not sure sending test images will help, as it sometimes runs on 100s before breaking. **Expected behavior**; In the vast majority of cases, the tile extractor script works exactly as I'd expect, and creates a directory filled with tiles. **Desktop (please complete the following information):**; - OS: Ubuntu 20.04.4 LTS; - QuPath Version 0.3.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/932
https://github.com/qupath/qupath/issues/932:879,Usability,clear,clear,879,"## Bug report; I have a script which extracts tiles from specific regions in WSIs. In a python object, I call a subprocess which runs this script on WSIs. I'm using a mixture of tif files (from ventana), svs (from aperio) and ndpi (from hamamatsu). When I run the tile extraction over my ~1000 scans, things work fine for the most part, but occasionally I get a core dump error from java. If I run the code on the *same* image it just broke on again, it works fine. There is seemingly no regularity to which images it fails on, other than they seem to be "".tif"" files. I have never had this bug appear on previous versions of QuPath. I attach the log I get when Java core dumps, and I also attach the tile extraction script I am using (converted to txt as it won't let me upload a groovy script). Somewhat out of my depth when it comes to understanding this, but it seems pretty clear it's a bug. [wsi_patch_extractor.txt](https://github.com/qupath/qupath/files/8168829/wsi_patch_extractor.txt). [hs_err_pid314639.log](https://github.com/qupath/qupath/files/8168813/hs_err_pid314639.log). **To Reproduce**; I run the groovy script with ""qupath script my_script --args [...]"", and have a symbolic link to the qupath binary in ""/home/user/bin/qupath"". I'm not sure sending test images will help, as it sometimes runs on 100s before breaking. **Expected behavior**; In the vast majority of cases, the tile extractor script works exactly as I'd expect, and creates a directory filled with tiles. **Desktop (please complete the following information):**; - OS: Ubuntu 20.04.4 LTS; - QuPath Version 0.3.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/932
https://github.com/qupath/qupath/pull/935:0,Safety,Avoid,Avoid,0,Avoid assuming `PixelType.UINT8` and handle missing resolution (assuming full resolution should be used).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/935
https://github.com/qupath/qupath/issues/942:177,Availability,error,error,177,"**Describe the bug**; Attempting to duplicate a project entry containing an unclosed parenthesis (e.g. a left parenthesis `(` with no right parenthesis to follow) will throw an error, preventing the entry from being duplicated without renaming. Relatively minor issue, as a fix would be to simply rename the original entry before duplication. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project, loading an image named `OS-2.ndpi`; 2. Duplicate the project entry (via right click > Duplicate Image(s). No error will occur, duplicate image will be named `OS-2.ndpi (1)`; 3. Rename this duplicated image by removing the last parenthesis, to `OS-2.ndpi (1`; 4. Attempt to duplicate this image. Note the following error:; ![image](https://user-images.githubusercontent.com/52012166/161337956-5eabd4e7-0b3e-4a29-8b1b-914e3484cda7.png); See full log at the end. **Expected behavior**; Regex patterns should not be evaluated for when duplicating image names. I'd imagine there are a lot of other character combinations that can trigger regex-related errors during duplication, or perhaps other operations too. I wonder if there's any cool things that can be done with this, such as programmatically creating image names during image duplication... **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0-SNAPSHOT. **Additional context**; Full error log:; ```; ERROR: QuPath exception: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); java.util.regex.PatternSyntaxException: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); at java.base/java.util.regex.Pattern.error(Unknown Source); at java.base/java.util.regex.Pattern.accept(Unknown Source); at java.base/java.util.regex.Pattern.group0(Unknown Source); at java.base/java.util.regex.Pattern.sequence(Unknown Source); at java.base/java.util.regex.Pattern.expr(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at java.base/java.util.regex.Pattern.<ini",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/942
https://github.com/qupath/qupath/issues/942:525,Availability,error,error,525,"**Describe the bug**; Attempting to duplicate a project entry containing an unclosed parenthesis (e.g. a left parenthesis `(` with no right parenthesis to follow) will throw an error, preventing the entry from being duplicated without renaming. Relatively minor issue, as a fix would be to simply rename the original entry before duplication. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project, loading an image named `OS-2.ndpi`; 2. Duplicate the project entry (via right click > Duplicate Image(s). No error will occur, duplicate image will be named `OS-2.ndpi (1)`; 3. Rename this duplicated image by removing the last parenthesis, to `OS-2.ndpi (1`; 4. Attempt to duplicate this image. Note the following error:; ![image](https://user-images.githubusercontent.com/52012166/161337956-5eabd4e7-0b3e-4a29-8b1b-914e3484cda7.png); See full log at the end. **Expected behavior**; Regex patterns should not be evaluated for when duplicating image names. I'd imagine there are a lot of other character combinations that can trigger regex-related errors during duplication, or perhaps other operations too. I wonder if there's any cool things that can be done with this, such as programmatically creating image names during image duplication... **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0-SNAPSHOT. **Additional context**; Full error log:; ```; ERROR: QuPath exception: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); java.util.regex.PatternSyntaxException: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); at java.base/java.util.regex.Pattern.error(Unknown Source); at java.base/java.util.regex.Pattern.accept(Unknown Source); at java.base/java.util.regex.Pattern.group0(Unknown Source); at java.base/java.util.regex.Pattern.sequence(Unknown Source); at java.base/java.util.regex.Pattern.expr(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at java.base/java.util.regex.Pattern.<ini",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/942
https://github.com/qupath/qupath/issues/942:730,Availability,error,error,730,"**Describe the bug**; Attempting to duplicate a project entry containing an unclosed parenthesis (e.g. a left parenthesis `(` with no right parenthesis to follow) will throw an error, preventing the entry from being duplicated without renaming. Relatively minor issue, as a fix would be to simply rename the original entry before duplication. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project, loading an image named `OS-2.ndpi`; 2. Duplicate the project entry (via right click > Duplicate Image(s). No error will occur, duplicate image will be named `OS-2.ndpi (1)`; 3. Rename this duplicated image by removing the last parenthesis, to `OS-2.ndpi (1`; 4. Attempt to duplicate this image. Note the following error:; ![image](https://user-images.githubusercontent.com/52012166/161337956-5eabd4e7-0b3e-4a29-8b1b-914e3484cda7.png); See full log at the end. **Expected behavior**; Regex patterns should not be evaluated for when duplicating image names. I'd imagine there are a lot of other character combinations that can trigger regex-related errors during duplication, or perhaps other operations too. I wonder if there's any cool things that can be done with this, such as programmatically creating image names during image duplication... **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0-SNAPSHOT. **Additional context**; Full error log:; ```; ERROR: QuPath exception: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); java.util.regex.PatternSyntaxException: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); at java.base/java.util.regex.Pattern.error(Unknown Source); at java.base/java.util.regex.Pattern.accept(Unknown Source); at java.base/java.util.regex.Pattern.group0(Unknown Source); at java.base/java.util.regex.Pattern.sequence(Unknown Source); at java.base/java.util.regex.Pattern.expr(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at java.base/java.util.regex.Pattern.<ini",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/942
https://github.com/qupath/qupath/issues/942:1063,Availability,error,errors,1063,"a project entry containing an unclosed parenthesis (e.g. a left parenthesis `(` with no right parenthesis to follow) will throw an error, preventing the entry from being duplicated without renaming. Relatively minor issue, as a fix would be to simply rename the original entry before duplication. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project, loading an image named `OS-2.ndpi`; 2. Duplicate the project entry (via right click > Duplicate Image(s). No error will occur, duplicate image will be named `OS-2.ndpi (1)`; 3. Rename this duplicated image by removing the last parenthesis, to `OS-2.ndpi (1`; 4. Attempt to duplicate this image. Note the following error:; ![image](https://user-images.githubusercontent.com/52012166/161337956-5eabd4e7-0b3e-4a29-8b1b-914e3484cda7.png); See full log at the end. **Expected behavior**; Regex patterns should not be evaluated for when duplicating image names. I'd imagine there are a lot of other character combinations that can trigger regex-related errors during duplication, or perhaps other operations too. I wonder if there's any cool things that can be done with this, such as programmatically creating image names during image duplication... **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0-SNAPSHOT. **Additional context**; Full error log:; ```; ERROR: QuPath exception: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); java.util.regex.PatternSyntaxException: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); at java.base/java.util.regex.Pattern.error(Unknown Source); at java.base/java.util.regex.Pattern.accept(Unknown Source); at java.base/java.util.regex.Pattern.group0(Unknown Source); at java.base/java.util.regex.Pattern.sequence(Unknown Source); at java.base/java.util.regex.Pattern.expr(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at java.base/java.util.regex.Pattern.<init>(Unknown Source); at java.base/java.util.reg",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/942
https://github.com/qupath/qupath/issues/942:1400,Availability,error,error,1400," an image named `OS-2.ndpi`; 2. Duplicate the project entry (via right click > Duplicate Image(s). No error will occur, duplicate image will be named `OS-2.ndpi (1)`; 3. Rename this duplicated image by removing the last parenthesis, to `OS-2.ndpi (1`; 4. Attempt to duplicate this image. Note the following error:; ![image](https://user-images.githubusercontent.com/52012166/161337956-5eabd4e7-0b3e-4a29-8b1b-914e3484cda7.png); See full log at the end. **Expected behavior**; Regex patterns should not be evaluated for when duplicating image names. I'd imagine there are a lot of other character combinations that can trigger regex-related errors during duplication, or perhaps other operations too. I wonder if there's any cool things that can be done with this, such as programmatically creating image names during image duplication... **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0-SNAPSHOT. **Additional context**; Full error log:; ```; ERROR: QuPath exception: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); java.util.regex.PatternSyntaxException: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); at java.base/java.util.regex.Pattern.error(Unknown Source); at java.base/java.util.regex.Pattern.accept(Unknown Source); at java.base/java.util.regex.Pattern.group0(Unknown Source); at java.base/java.util.regex.Pattern.sequence(Unknown Source); at java.base/java.util.regex.Pattern.expr(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at java.base/java.util.regex.Pattern.<init>(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at qupath.lib.common.GeneralTools.generateDistinctName(GeneralTools.java:774); at qupath.lib.gui.panes.ProjectBrowser.lambda$getPopup$14(ProjectBrowser.java:456); at org.controlsfx.control.action.Action.handle(Action.java:423); at org.controlsfx.control.action.Action.handle(Action.java:64); at com.sun.javafx.event.CompositeEventHandler.dis",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/942
https://github.com/qupath/qupath/issues/942:1417,Availability,ERROR,ERROR,1417," an image named `OS-2.ndpi`; 2. Duplicate the project entry (via right click > Duplicate Image(s). No error will occur, duplicate image will be named `OS-2.ndpi (1)`; 3. Rename this duplicated image by removing the last parenthesis, to `OS-2.ndpi (1`; 4. Attempt to duplicate this image. Note the following error:; ![image](https://user-images.githubusercontent.com/52012166/161337956-5eabd4e7-0b3e-4a29-8b1b-914e3484cda7.png); See full log at the end. **Expected behavior**; Regex patterns should not be evaluated for when duplicating image names. I'd imagine there are a lot of other character combinations that can trigger regex-related errors during duplication, or perhaps other operations too. I wonder if there's any cool things that can be done with this, such as programmatically creating image names during image duplication... **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0-SNAPSHOT. **Additional context**; Full error log:; ```; ERROR: QuPath exception: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); java.util.regex.PatternSyntaxException: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); at java.base/java.util.regex.Pattern.error(Unknown Source); at java.base/java.util.regex.Pattern.accept(Unknown Source); at java.base/java.util.regex.Pattern.group0(Unknown Source); at java.base/java.util.regex.Pattern.sequence(Unknown Source); at java.base/java.util.regex.Pattern.expr(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at java.base/java.util.regex.Pattern.<init>(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at qupath.lib.common.GeneralTools.generateDistinctName(GeneralTools.java:774); at qupath.lib.gui.panes.ProjectBrowser.lambda$getPopup$14(ProjectBrowser.java:456); at org.controlsfx.control.action.Action.handle(Action.java:423); at org.controlsfx.control.action.Action.handle(Action.java:64); at com.sun.javafx.event.CompositeEventHandler.dis",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/942
https://github.com/qupath/qupath/issues/942:1631,Availability,error,error,1631,"enthesis, to `OS-2.ndpi (1`; 4. Attempt to duplicate this image. Note the following error:; ![image](https://user-images.githubusercontent.com/52012166/161337956-5eabd4e7-0b3e-4a29-8b1b-914e3484cda7.png); See full log at the end. **Expected behavior**; Regex patterns should not be evaluated for when duplicating image names. I'd imagine there are a lot of other character combinations that can trigger regex-related errors during duplication, or perhaps other operations too. I wonder if there's any cool things that can be done with this, such as programmatically creating image names during image duplication... **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0-SNAPSHOT. **Additional context**; Full error log:; ```; ERROR: QuPath exception: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); java.util.regex.PatternSyntaxException: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); at java.base/java.util.regex.Pattern.error(Unknown Source); at java.base/java.util.regex.Pattern.accept(Unknown Source); at java.base/java.util.regex.Pattern.group0(Unknown Source); at java.base/java.util.regex.Pattern.sequence(Unknown Source); at java.base/java.util.regex.Pattern.expr(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at java.base/java.util.regex.Pattern.<init>(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at qupath.lib.common.GeneralTools.generateDistinctName(GeneralTools.java:774); at qupath.lib.gui.panes.ProjectBrowser.lambda$getPopup$14(ProjectBrowser.java:456); at org.controlsfx.control.action.Action.handle(Action.java:423); at org.controlsfx.control.action.Action.handle(Action.java:64); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHand",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/942
https://github.com/qupath/qupath/issues/942:416,Performance,load,loading,416,"**Describe the bug**; Attempting to duplicate a project entry containing an unclosed parenthesis (e.g. a left parenthesis `(` with no right parenthesis to follow) will throw an error, preventing the entry from being duplicated without renaming. Relatively minor issue, as a fix would be to simply rename the original entry before duplication. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project, loading an image named `OS-2.ndpi`; 2. Duplicate the project entry (via right click > Duplicate Image(s). No error will occur, duplicate image will be named `OS-2.ndpi (1)`; 3. Rename this duplicated image by removing the last parenthesis, to `OS-2.ndpi (1`; 4. Attempt to duplicate this image. Note the following error:; ![image](https://user-images.githubusercontent.com/52012166/161337956-5eabd4e7-0b3e-4a29-8b1b-914e3484cda7.png); See full log at the end. **Expected behavior**; Regex patterns should not be evaluated for when duplicating image names. I'd imagine there are a lot of other character combinations that can trigger regex-related errors during duplication, or perhaps other operations too. I wonder if there's any cool things that can be done with this, such as programmatically creating image names during image duplication... **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0-SNAPSHOT. **Additional context**; Full error log:; ```; ERROR: QuPath exception: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); java.util.regex.PatternSyntaxException: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); at java.base/java.util.regex.Pattern.error(Unknown Source); at java.base/java.util.regex.Pattern.accept(Unknown Source); at java.base/java.util.regex.Pattern.group0(Unknown Source); at java.base/java.util.regex.Pattern.sequence(Unknown Source); at java.base/java.util.regex.Pattern.expr(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at java.base/java.util.regex.Pattern.<ini",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/942
https://github.com/qupath/qupath/issues/942:5200,Security,secur,security,5200,er.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$MouseHandler.process(Scene.java:3897); at javafx.scene.Scene.processMouseEvent(Scene.java:1878); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2623); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:557); at com.sun.glass.ui.View.notifyMouse(View.java:943); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); WARN: Cannot set image name to OS-2.ndpi (1 - will ignore; ```,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/942
https://github.com/qupath/qupath/issues/942:5209,Security,Access,AccessController,5209,er.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$MouseHandler.process(Scene.java:3897); at javafx.scene.Scene.processMouseEvent(Scene.java:1878); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2623); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:557); at com.sun.glass.ui.View.notifyMouse(View.java:943); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); WARN: Cannot set image name to OS-2.ndpi (1 - will ignore; ```,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/942
https://github.com/qupath/qupath/issues/942:860,Testability,log,log,860,"**Describe the bug**; Attempting to duplicate a project entry containing an unclosed parenthesis (e.g. a left parenthesis `(` with no right parenthesis to follow) will throw an error, preventing the entry from being duplicated without renaming. Relatively minor issue, as a fix would be to simply rename the original entry before duplication. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project, loading an image named `OS-2.ndpi`; 2. Duplicate the project entry (via right click > Duplicate Image(s). No error will occur, duplicate image will be named `OS-2.ndpi (1)`; 3. Rename this duplicated image by removing the last parenthesis, to `OS-2.ndpi (1`; 4. Attempt to duplicate this image. Note the following error:; ![image](https://user-images.githubusercontent.com/52012166/161337956-5eabd4e7-0b3e-4a29-8b1b-914e3484cda7.png); See full log at the end. **Expected behavior**; Regex patterns should not be evaluated for when duplicating image names. I'd imagine there are a lot of other character combinations that can trigger regex-related errors during duplication, or perhaps other operations too. I wonder if there's any cool things that can be done with this, such as programmatically creating image names during image duplication... **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0-SNAPSHOT. **Additional context**; Full error log:; ```; ERROR: QuPath exception: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); java.util.regex.PatternSyntaxException: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); at java.base/java.util.regex.Pattern.error(Unknown Source); at java.base/java.util.regex.Pattern.accept(Unknown Source); at java.base/java.util.regex.Pattern.group0(Unknown Source); at java.base/java.util.regex.Pattern.sequence(Unknown Source); at java.base/java.util.regex.Pattern.expr(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at java.base/java.util.regex.Pattern.<ini",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/942
https://github.com/qupath/qupath/issues/942:1406,Testability,log,log,1406," an image named `OS-2.ndpi`; 2. Duplicate the project entry (via right click > Duplicate Image(s). No error will occur, duplicate image will be named `OS-2.ndpi (1)`; 3. Rename this duplicated image by removing the last parenthesis, to `OS-2.ndpi (1`; 4. Attempt to duplicate this image. Note the following error:; ![image](https://user-images.githubusercontent.com/52012166/161337956-5eabd4e7-0b3e-4a29-8b1b-914e3484cda7.png); See full log at the end. **Expected behavior**; Regex patterns should not be evaluated for when duplicating image names. I'd imagine there are a lot of other character combinations that can trigger regex-related errors during duplication, or perhaps other operations too. I wonder if there's any cool things that can be done with this, such as programmatically creating image names during image duplication... **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0-SNAPSHOT. **Additional context**; Full error log:; ```; ERROR: QuPath exception: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); java.util.regex.PatternSyntaxException: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); at java.base/java.util.regex.Pattern.error(Unknown Source); at java.base/java.util.regex.Pattern.accept(Unknown Source); at java.base/java.util.regex.Pattern.group0(Unknown Source); at java.base/java.util.regex.Pattern.sequence(Unknown Source); at java.base/java.util.regex.Pattern.expr(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at java.base/java.util.regex.Pattern.<init>(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at qupath.lib.common.GeneralTools.generateDistinctName(GeneralTools.java:774); at qupath.lib.gui.panes.ProjectBrowser.lambda$getPopup$14(ProjectBrowser.java:456); at org.controlsfx.control.action.Action.handle(Action.java:423); at org.controlsfx.control.action.Action.handle(Action.java:64); at com.sun.javafx.event.CompositeEventHandler.dis",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/942
https://github.com/qupath/qupath/issues/942:290,Usability,simpl,simply,290,"**Describe the bug**; Attempting to duplicate a project entry containing an unclosed parenthesis (e.g. a left parenthesis `(` with no right parenthesis to follow) will throw an error, preventing the entry from being duplicated without renaming. Relatively minor issue, as a fix would be to simply rename the original entry before duplication. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project, loading an image named `OS-2.ndpi`; 2. Duplicate the project entry (via right click > Duplicate Image(s). No error will occur, duplicate image will be named `OS-2.ndpi (1)`; 3. Rename this duplicated image by removing the last parenthesis, to `OS-2.ndpi (1`; 4. Attempt to duplicate this image. Note the following error:; ![image](https://user-images.githubusercontent.com/52012166/161337956-5eabd4e7-0b3e-4a29-8b1b-914e3484cda7.png); See full log at the end. **Expected behavior**; Regex patterns should not be evaluated for when duplicating image names. I'd imagine there are a lot of other character combinations that can trigger regex-related errors during duplication, or perhaps other operations too. I wonder if there's any cool things that can be done with this, such as programmatically creating image names during image duplication... **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0-SNAPSHOT. **Additional context**; Full error log:; ```; ERROR: QuPath exception: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); java.util.regex.PatternSyntaxException: Unclosed group near index 24; OS-2.ndpi (1 \(([\d]+)\); at java.base/java.util.regex.Pattern.error(Unknown Source); at java.base/java.util.regex.Pattern.accept(Unknown Source); at java.base/java.util.regex.Pattern.group0(Unknown Source); at java.base/java.util.regex.Pattern.sequence(Unknown Source); at java.base/java.util.regex.Pattern.expr(Unknown Source); at java.base/java.util.regex.Pattern.compile(Unknown Source); at java.base/java.util.regex.Pattern.<ini",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/942
https://github.com/qupath/qupath/pull/945:446,Safety,avoid,avoids,446,"See original discussion at https://forum.image.sc/t/qupath-white-background/65030. The idea is that sometimes it makes sense for the background to be black, sometimes it makes sense for it to be white. Inverting the RGB image alone isn't enough, since this changes all the colors. However, a combination of RGB inversion plus inverting individual LUTs can achieve the effect of inverting the background but keeping the other colors similar. This avoids any need to define special LUTs. The end result makes a fluorescence image look a *bit* like a brightfield one. Although does potentially end up saturating more quickly and so is less informative in the end. For that reason, a warning appears. Inverting RGB images works slightly differently from other multichannel images, in that values are divided by two during the process to avoid most pixels ending up being black. I think this gives a more sensible-looking result when inverting a brightfield image, but the behavior may change based on feedback. Implementing this involved making substantial changes to `ImageDisplay` and associated classes, including introducing a new `ChannelDisplayMode` class. While doing this, I tried to improve the consistency within the Brightness/Contrast dialog for all combinations of inverted/not-inverted background and grayscale/color LUTs. ### Existing visualization. ![inverted screenshot black](https://user-images.githubusercontent.com/4690904/161815495-19db089a-b65a-457d-90d3-473cd15d8dd7.png). ### Inverted visualization. ![inverted screenshot](https://user-images.githubusercontent.com/4690904/161815522-10cea11c-4664-4815-ba15-ae65ad907940.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/945
https://github.com/qupath/qupath/pull/945:833,Safety,avoid,avoid,833,"See original discussion at https://forum.image.sc/t/qupath-white-background/65030. The idea is that sometimes it makes sense for the background to be black, sometimes it makes sense for it to be white. Inverting the RGB image alone isn't enough, since this changes all the colors. However, a combination of RGB inversion plus inverting individual LUTs can achieve the effect of inverting the background but keeping the other colors similar. This avoids any need to define special LUTs. The end result makes a fluorescence image look a *bit* like a brightfield one. Although does potentially end up saturating more quickly and so is less informative in the end. For that reason, a warning appears. Inverting RGB images works slightly differently from other multichannel images, in that values are divided by two during the process to avoid most pixels ending up being black. I think this gives a more sensible-looking result when inverting a brightfield image, but the behavior may change based on feedback. Implementing this involved making substantial changes to `ImageDisplay` and associated classes, including introducing a new `ChannelDisplayMode` class. While doing this, I tried to improve the consistency within the Brightness/Contrast dialog for all combinations of inverted/not-inverted background and grayscale/color LUTs. ### Existing visualization. ![inverted screenshot black](https://user-images.githubusercontent.com/4690904/161815495-19db089a-b65a-457d-90d3-473cd15d8dd7.png). ### Inverted visualization. ![inverted screenshot](https://user-images.githubusercontent.com/4690904/161815522-10cea11c-4664-4815-ba15-ae65ad907940.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/945
https://github.com/qupath/qupath/pull/945:997,Usability,feedback,feedback,997,"See original discussion at https://forum.image.sc/t/qupath-white-background/65030. The idea is that sometimes it makes sense for the background to be black, sometimes it makes sense for it to be white. Inverting the RGB image alone isn't enough, since this changes all the colors. However, a combination of RGB inversion plus inverting individual LUTs can achieve the effect of inverting the background but keeping the other colors similar. This avoids any need to define special LUTs. The end result makes a fluorescence image look a *bit* like a brightfield one. Although does potentially end up saturating more quickly and so is less informative in the end. For that reason, a warning appears. Inverting RGB images works slightly differently from other multichannel images, in that values are divided by two during the process to avoid most pixels ending up being black. I think this gives a more sensible-looking result when inverting a brightfield image, but the behavior may change based on feedback. Implementing this involved making substantial changes to `ImageDisplay` and associated classes, including introducing a new `ChannelDisplayMode` class. While doing this, I tried to improve the consistency within the Brightness/Contrast dialog for all combinations of inverted/not-inverted background and grayscale/color LUTs. ### Existing visualization. ![inverted screenshot black](https://user-images.githubusercontent.com/4690904/161815495-19db089a-b65a-457d-90d3-473cd15d8dd7.png). ### Inverted visualization. ![inverted screenshot](https://user-images.githubusercontent.com/4690904/161815522-10cea11c-4664-4815-ba15-ae65ad907940.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/945
https://github.com/qupath/qupath/pull/946:175,Deployability,release,release,175,"This includes Bio-Formats 6.9.0 for further testing. It still has an issue with some svs files, but adds dicom support - both should be documented if this remains in the next release. It also includes JavaFX 18, which fixes a bug that meant selecting all entries in a large table (e.g. a detection measurement table) was unusably slow.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/946
https://github.com/qupath/qupath/pull/946:288,Safety,detect,detection,288,"This includes Bio-Formats 6.9.0 for further testing. It still has an issue with some svs files, but adds dicom support - both should be documented if this remains in the next release. It also includes JavaFX 18, which fixes a bug that meant selecting all entries in a large table (e.g. a detection measurement table) was unusably slow.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/946
https://github.com/qupath/qupath/pull/946:44,Testability,test,testing,44,"This includes Bio-Formats 6.9.0 for further testing. It still has an issue with some svs files, but adds dicom support - both should be documented if this remains in the next release. It also includes JavaFX 18, which fixes a bug that meant selecting all entries in a large table (e.g. a detection measurement table) was unusably slow.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/946
https://github.com/qupath/qupath/issues/947:202,Availability,error,error,202,"## Bug report. **Describe the bug**; An attempt to train a pixel classifier using 27 channels X 12 features X 2 scales, with annotations spanning over 38 images did not succeed, and threw the following error (see end of post). Reducing either the number of channels, features, or scales would allow the pixel classifier to be trained. Images were non-pyramided, ~1000x1000 pixel, 32 bit floating point IMC data with a total of 37 channels (27 of which to be used in the pixel classifier). Unfortunately, I can't share the exact images that caused this error to occur. My guess is that this is actually an issue with OpenCV , given the exception `OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'`. OpenCV's mixChannels: https://docs.opencv.org/3.4/d2/de8/group__core__array.html#ga51d768c270a1cdd3497255017c4504be. For now, I've been reducing the number of channels passed, which gives me a training accuracy of ~88%. But it would be great to train on all available data, and see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error l",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:552,Availability,error,error,552,"## Bug report. **Describe the bug**; An attempt to train a pixel classifier using 27 channels X 12 features X 2 scales, with annotations spanning over 38 images did not succeed, and threw the following error (see end of post). Reducing either the number of channels, features, or scales would allow the pixel classifier to be trained. Images were non-pyramided, ~1000x1000 pixel, 32 bit floating point IMC data with a total of 37 channels (27 of which to be used in the pixel classifier). Unfortunately, I can't share the exact images that caused this error to occur. My guess is that this is actually an issue with OpenCV , given the exception `OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'`. OpenCV's mixChannels: https://docs.opencv.org/3.4/d2/de8/group__core__array.html#ga51d768c270a1cdd3497255017c4504be. For now, I've been reducing the number of channels passed, which gives me a training accuracy of ~88%. But it would be great to train on all available data, and see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error l",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:776,Availability,error,error,776,"## Bug report. **Describe the bug**; An attempt to train a pixel classifier using 27 channels X 12 features X 2 scales, with annotations spanning over 38 images did not succeed, and threw the following error (see end of post). Reducing either the number of channels, features, or scales would allow the pixel classifier to be trained. Images were non-pyramided, ~1000x1000 pixel, 32 bit floating point IMC data with a total of 37 channels (27 of which to be used in the pixel classifier). Unfortunately, I can't share the exact images that caused this error to occur. My guess is that this is actually an issue with OpenCV , given the exception `OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'`. OpenCV's mixChannels: https://docs.opencv.org/3.4/d2/de8/group__core__array.html#ga51d768c270a1cdd3497255017c4504be. For now, I've been reducing the number of channels passed, which gives me a training accuracy of ~88%. But it would be great to train on all available data, and see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error l",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:1145,Availability,avail,available,1145,"t succeed, and threw the following error (see end of post). Reducing either the number of channels, features, or scales would allow the pixel classifier to be trained. Images were non-pyramided, ~1000x1000 pixel, 32 bit floating point IMC data with a total of 37 channels (27 of which to be used in the pixel classifier). Unfortunately, I can't share the exact images that caused this error to occur. My guess is that this is actually an issue with OpenCV , given the exception `OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'`. OpenCV's mixChannels: https://docs.opencv.org/3.4/d2/de8/group__core__array.html#ga51d768c270a1cdd3497255017c4504be. For now, I've been reducing the number of channels passed, which gives me a training accuracy of ~88%. But it would be great to train on all available data, and see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error log:; ```; 12:10:44.040 [JavaFX Application Thread] [INFO ] q.p.g.c.ml.PixelClassifierPane - Creating training data from 38 images; 12:10:44.953 [JavaFX Application Thr",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:1622,Availability,error,error,1622,"CV , given the exception `OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'`. OpenCV's mixChannels: https://docs.opencv.org/3.4/d2/de8/group__core__array.html#ga51d768c270a1cdd3497255017c4504be. For now, I've been reducing the number of channels passed, which gives me a training accuracy of ~88%. But it would be great to train on all available data, and see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error log:; ```; 12:10:44.040 [JavaFX Application Thread] [INFO ] q.p.g.c.ml.PixelClassifierPane - Creating training data from 38 images; 12:10:44.953 [JavaFX Application Thread] [ERROR] q.p.g.c.ml.PixelClassifierTraining - Error requesting features for ImageOp server: ImageData: Other, xxxx___ROI8_ROI_008.ome.tiff - ROI8_ROI_008.ome {""colorTransforms"":[{""channelName"":""Pr(141)_141-SMA""},{""channelName"":""Nd(142)_142Nd-CD19""},{""channelName"":""Nd(143)_143Nd-Vimentin""},{""channelName"":""Nd(144)_144Nd-cd14""},{""channelName"":""Nd(146)_146NdCD16""},{""channelName"":""Nd(148)_148-Pan-Ker""},{""channelName"":""Sm(149)_149Sm-CD11b""},{""channelN",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:1994,Availability,Error,Error,1994,"7c4504be. For now, I've been reducing the number of channels passed, which gives me a training accuracy of ~88%. But it would be great to train on all available data, and see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error log:; ```; 12:10:44.040 [JavaFX Application Thread] [INFO ] q.p.g.c.ml.PixelClassifierPane - Creating training data from 38 images; 12:10:44.953 [JavaFX Application Thread] [ERROR] q.p.g.c.ml.PixelClassifierTraining - Error requesting features for ImageOp server: ImageData: Other, xxxx___ROI8_ROI_008.ome.tiff - ROI8_ROI_008.ome {""colorTransforms"":[{""channelName"":""Pr(141)_141-SMA""},{""channelName"":""Nd(142)_142Nd-CD19""},{""channelName"":""Nd(143)_143Nd-Vimentin""},{""channelName"":""Nd(144)_144Nd-cd14""},{""channelName"":""Nd(146)_146NdCD16""},{""channelName"":""Nd(148)_148-Pan-Ker""},{""channelName"":""Sm(149)_149Sm-CD11b""},{""channelName"":""Sm(152)_152Sm-CD45""},{""channelName"":""Sm(154)_154Sm-CD11c""},{""channelName"":""Gd(155)_155Gd-FoxP3""},{""channelName"":""Gd(156)_156Gd-CD4""},{""channelName"":""Gd(158)_158Gd-E_Cadherin""},{""channelName"":""Tb(159)_159Tb-CD68""},{""channelName"":""Gd(160)_160Gd-Vista""},{""channelName"":""Dy(161)_161Dy-CD20""},{""channelName"":""Dy(162)_162Dy-CD8a""},{""channelName"":""Er(166)_166Er-CD45RA""},{""ch",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:2174,Availability,ERROR,ERROR,2174,"nd see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error log:; ```; 12:10:44.040 [JavaFX Application Thread] [INFO ] q.p.g.c.ml.PixelClassifierPane - Creating training data from 38 images; 12:10:44.953 [JavaFX Application Thread] [ERROR] q.p.g.c.ml.PixelClassifierTraining - Error requesting features for ImageOp server: ImageData: Other, xxxx___ROI8_ROI_008.ome.tiff - ROI8_ROI_008.ome {""colorTransforms"":[{""channelName"":""Pr(141)_141-SMA""},{""channelName"":""Nd(142)_142Nd-CD19""},{""channelName"":""Nd(143)_143Nd-Vimentin""},{""channelName"":""Nd(144)_144Nd-cd14""},{""channelName"":""Nd(146)_146NdCD16""},{""channelName"":""Nd(148)_148-Pan-Ker""},{""channelName"":""Sm(149)_149Sm-CD11b""},{""channelName"":""Sm(152)_152Sm-CD45""},{""channelName"":""Sm(154)_154Sm-CD11c""},{""channelName"":""Gd(155)_155Gd-FoxP3""},{""channelName"":""Gd(156)_156Gd-CD4""},{""channelName"":""Gd(158)_158Gd-E_Cadherin""},{""channelName"":""Tb(159)_159Tb-CD68""},{""channelName"":""Gd(160)_160Gd-Vista""},{""channelName"":""Dy(161)_161Dy-CD20""},{""channelName"":""Dy(162)_162Dy-CD8a""},{""channelName"":""Er(166)_166Er-CD45RA""},{""channelName"":""Er(167)_167Er-GranzymeB""},{""channelName"":""Er(168)_168Er-Ki67""},{""channelName"":""Tm(169)_169Tmp-CollagenI""},{""channelName"":""Er(170)_170Er-CD3""},{""channelName",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:2218,Availability,Error,Error,2218," Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error log:; ```; 12:10:44.040 [JavaFX Application Thread] [INFO ] q.p.g.c.ml.PixelClassifierPane - Creating training data from 38 images; 12:10:44.953 [JavaFX Application Thread] [ERROR] q.p.g.c.ml.PixelClassifierTraining - Error requesting features for ImageOp server: ImageData: Other, xxxx___ROI8_ROI_008.ome.tiff - ROI8_ROI_008.ome {""colorTransforms"":[{""channelName"":""Pr(141)_141-SMA""},{""channelName"":""Nd(142)_142Nd-CD19""},{""channelName"":""Nd(143)_143Nd-Vimentin""},{""channelName"":""Nd(144)_144Nd-cd14""},{""channelName"":""Nd(146)_146NdCD16""},{""channelName"":""Nd(148)_148-Pan-Ker""},{""channelName"":""Sm(149)_149Sm-CD11b""},{""channelName"":""Sm(152)_152Sm-CD45""},{""channelName"":""Sm(154)_154Sm-CD11c""},{""channelName"":""Gd(155)_155Gd-FoxP3""},{""channelName"":""Gd(156)_156Gd-CD4""},{""channelName"":""Gd(158)_158Gd-E_Cadherin""},{""channelName"":""Tb(159)_159Tb-CD68""},{""channelName"":""Gd(160)_160Gd-Vista""},{""channelName"":""Dy(161)_161Dy-CD20""},{""channelName"":""Dy(162)_162Dy-CD8a""},{""channelName"":""Er(166)_166Er-CD45RA""},{""channelName"":""Er(167)_167Er-GranzymeB""},{""channelName"":""Er(168)_168Er-Ki67""},{""channelName"":""Tm(169)_169Tmp-CollagenI""},{""channelName"":""Er(170)_170Er-CD3""},{""channelName"":""Yb(171)_171Yb-HistoneH3""},{""channelName"":""Yb(173)_173Yb-CD45RO""},{""channelName"":""Y",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:4076,Availability,down,downsample,4076,"67""},{""channelName"":""Tm(169)_169Tmp-CollagenI""},{""channelName"":""Er(170)_170Er-CD3""},{""channelName"":""Yb(171)_171Yb-HistoneH3""},{""channelName"":""Yb(173)_173Yb-CD45RO""},{""channelName"":""Yb(174)_174Yb-HLA-DR""},{""channelName"":""Lu(175)_175Lu-Beta2M""},{""channelName"":""Yb(176)_176Yb-Nak-ATPase""},{""channelName"":""Ir(193)_193Ir-NA2""}],""op"":{""type"":""op.core.split-merge"",""ops"":[{""type"":""op.filters.multiscale"",""features"":[""GAUSSIAN"",""LAPLACIAN"",""WEIGHTED_STD_DEV"",""GRADIENT_MAGNITUDE"",""STRUCTURE_TENSOR_EIGENVALUE_MAX"",""STRUCTURE_TENSOR_EIGENVALUE_MIN"",""STRUCTURE_TENSOR_COHERENCE"",""HESSIAN_DETERMINANT"",""HESSIAN_EIGENVALUE_MAX"",""HESSIAN_EIGENVALUE_MIN""],""sigmaX"":4.0,""sigmaY"":4.0},{""type"":""op.filters.multiscale"",""features"":[""GAUSSIAN"",""LAPLACIAN"",""WEIGHTED_STD_DEV"",""GRADIENT_MAGNITUDE"",""STRUCTURE_TENSOR_EIGENVALUE_MAX"",""STRUCTURE_TENSOR_EIGENVALUE_MIN"",""STRUCTURE_TENSOR_COHERENCE"",""HESSIAN_DETERMINANT"",""HESSIAN_EIGENVALUE_MAX"",""HESSIAN_EIGENVALUE_MIN""],""sigmaX"":8.0,""sigmaY"":8.0}]}}: x=0, y=0, w=800, h=848, z=0, t=0, downsample=4; java.io.IOException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:226); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:287); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:60); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.ensureFeaturesCalculated(PixelClassifierTraining.java:440); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.<init>(PixelClassifierTraining.java:429); at qupath.process.gui.commands.ml.PixelClassifierTraining.getTileFeatu",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:4310,Availability,error,error,4310,"b-Nak-ATPase""},{""channelName"":""Ir(193)_193Ir-NA2""}],""op"":{""type"":""op.core.split-merge"",""ops"":[{""type"":""op.filters.multiscale"",""features"":[""GAUSSIAN"",""LAPLACIAN"",""WEIGHTED_STD_DEV"",""GRADIENT_MAGNITUDE"",""STRUCTURE_TENSOR_EIGENVALUE_MAX"",""STRUCTURE_TENSOR_EIGENVALUE_MIN"",""STRUCTURE_TENSOR_COHERENCE"",""HESSIAN_DETERMINANT"",""HESSIAN_EIGENVALUE_MAX"",""HESSIAN_EIGENVALUE_MIN""],""sigmaX"":4.0,""sigmaY"":4.0},{""type"":""op.filters.multiscale"",""features"":[""GAUSSIAN"",""LAPLACIAN"",""WEIGHTED_STD_DEV"",""GRADIENT_MAGNITUDE"",""STRUCTURE_TENSOR_EIGENVALUE_MAX"",""STRUCTURE_TENSOR_EIGENVALUE_MIN"",""STRUCTURE_TENSOR_COHERENCE"",""HESSIAN_DETERMINANT"",""HESSIAN_EIGENVALUE_MAX"",""HESSIAN_EIGENVALUE_MIN""],""sigmaX"":8.0,""sigmaY"":8.0}]}}: x=0, y=0, w=800, h=848, z=0, t=0, downsample=4; java.io.IOException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:226); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:287); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:60); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.ensureFeaturesCalculated(PixelClassifierTraining.java:440); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.<init>(PixelClassifierTraining.java:429); at qupath.process.gui.commands.ml.PixelClassifierTraining.getTileFeatures(PixelClassifierTraining.java:402); at qupath.process.gui.commands.ml.PixelClassifierTraining.updateTrainingData(PixelClassifierTraining.java:189); at qupath.process.gui.commands.ml.PixelClassifierTraining.createTrainingDataForLabelMap(PixelClassifierTraining.java:343)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:9946,Availability,error,error,9946,assViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:557); at com.sun.glass.ui.View.notifyMouse(View.java:943); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:222); ... 58 common frames omitted; Caused by: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at org.bytedeco.opencv.global.opencv_core.mixChannels(Native Method); at qupath.opencv.tools.OpenCVTools.mergeChannels(OpenCVTools.java:413); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.transformPadded(ImageOps.java:2511); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.apply(ImageOps.java:2470); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.jav,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:10494,Availability,error,error,10494,EventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:557); at com.sun.glass.ui.View.notifyMouse(View.java:943); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:222); ... 58 common frames omitted; Caused by: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at org.bytedeco.opencv.global.opencv_core.mixChannels(Native Method); at qupath.opencv.tools.OpenCVTools.mergeChannels(OpenCVTools.java:413); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.transformPadded(ImageOps.java:2511); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.apply(ImageOps.java:2470); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:425); at qupath.opencv.ops.ImageOpServer.readTile(ImageOpServer.java:98); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$getTile$0(AbstractTileableImageServer.java:213); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:217); ... 58 common frames omitted; ```,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:5162,Deployability,update,updateTrainingData,5162,nCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:226); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:287); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:60); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.ensureFeaturesCalculated(PixelClassifierTraining.java:440); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.<init>(PixelClassifierTraining.java:429); at qupath.process.gui.commands.ml.PixelClassifierTraining.getTileFeatures(PixelClassifierTraining.java:402); at qupath.process.gui.commands.ml.PixelClassifierTraining.updateTrainingData(PixelClassifierTraining.java:189); at qupath.process.gui.commands.ml.PixelClassifierTraining.createTrainingDataForLabelMap(PixelClassifierTraining.java:343); at qupath.process.gui.commands.ml.PixelClassifierTraining.createTrainingData(PixelClassifierTraining.java:332); at qupath.process.gui.commands.ml.PixelClassifierPane.doClassification(PixelClassifierPane.java:923); at qupath.process.gui.commands.ml.PixelClassifierPane.updateClassifier(PixelClassifierPane.java:813); at qupath.process.gui.commands.ml.PixelClassifierPane.updateClassifier(PixelClassifierPane.java:806); at qupath.process.gui.commands.ml.PixelClassifierPane.updateFeatureCalculator(PixelClassifierPane.java:731); at qupath.process.gui.commands.ml.PixelClassifierPane.lambda$initialize$5(PixelClassifierPane.java:279); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javaf,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:5607,Deployability,update,updateClassifier,5607,r.java:287); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:60); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.ensureFeaturesCalculated(PixelClassifierTraining.java:440); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.<init>(PixelClassifierTraining.java:429); at qupath.process.gui.commands.ml.PixelClassifierTraining.getTileFeatures(PixelClassifierTraining.java:402); at qupath.process.gui.commands.ml.PixelClassifierTraining.updateTrainingData(PixelClassifierTraining.java:189); at qupath.process.gui.commands.ml.PixelClassifierTraining.createTrainingDataForLabelMap(PixelClassifierTraining.java:343); at qupath.process.gui.commands.ml.PixelClassifierTraining.createTrainingData(PixelClassifierTraining.java:332); at qupath.process.gui.commands.ml.PixelClassifierPane.doClassification(PixelClassifierPane.java:923); at qupath.process.gui.commands.ml.PixelClassifierPane.updateClassifier(PixelClassifierPane.java:813); at qupath.process.gui.commands.ml.PixelClassifierPane.updateClassifier(PixelClassifierPane.java:806); at qupath.process.gui.commands.ml.PixelClassifierPane.updateFeatureCalculator(PixelClassifierPane.java:731); at qupath.process.gui.commands.ml.PixelClassifierPane.lambda$initialize$5(PixelClassifierPane.java:279); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventD,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:5709,Deployability,update,updateClassifier,5709,leImageServer.java:60); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.ensureFeaturesCalculated(PixelClassifierTraining.java:440); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.<init>(PixelClassifierTraining.java:429); at qupath.process.gui.commands.ml.PixelClassifierTraining.getTileFeatures(PixelClassifierTraining.java:402); at qupath.process.gui.commands.ml.PixelClassifierTraining.updateTrainingData(PixelClassifierTraining.java:189); at qupath.process.gui.commands.ml.PixelClassifierTraining.createTrainingDataForLabelMap(PixelClassifierTraining.java:343); at qupath.process.gui.commands.ml.PixelClassifierTraining.createTrainingData(PixelClassifierTraining.java:332); at qupath.process.gui.commands.ml.PixelClassifierPane.doClassification(PixelClassifierPane.java:923); at qupath.process.gui.commands.ml.PixelClassifierPane.updateClassifier(PixelClassifierPane.java:813); at qupath.process.gui.commands.ml.PixelClassifierPane.updateClassifier(PixelClassifierPane.java:806); at qupath.process.gui.commands.ml.PixelClassifierPane.updateFeatureCalculator(PixelClassifierPane.java:731); at qupath.process.gui.commands.ml.PixelClassifierPane.lambda$initialize$5(PixelClassifierPane.java:279); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImp,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:5811,Deployability,update,updateFeatureCalculator,5811,resCalculated(PixelClassifierTraining.java:440); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.<init>(PixelClassifierTraining.java:429); at qupath.process.gui.commands.ml.PixelClassifierTraining.getTileFeatures(PixelClassifierTraining.java:402); at qupath.process.gui.commands.ml.PixelClassifierTraining.updateTrainingData(PixelClassifierTraining.java:189); at qupath.process.gui.commands.ml.PixelClassifierTraining.createTrainingDataForLabelMap(PixelClassifierTraining.java:343); at qupath.process.gui.commands.ml.PixelClassifierTraining.createTrainingData(PixelClassifierTraining.java:332); at qupath.process.gui.commands.ml.PixelClassifierPane.doClassification(PixelClassifierPane.java:923); at qupath.process.gui.commands.ml.PixelClassifierPane.updateClassifier(PixelClassifierPane.java:813); at qupath.process.gui.commands.ml.PixelClassifierPane.updateClassifier(PixelClassifierPane.java:806); at qupath.process.gui.commands.ml.PixelClassifierPane.updateFeatureCalculator(PixelClassifierPane.java:731); at qupath.process.gui.commands.ml.PixelClassifierPane.lambda$initialize$5(PixelClassifierPane.java:279); at com.sun.javafx.event.CompositeEventHandler.dispatchBubblingEvent(CompositeEventHandler.java:86); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:234); at com.sun.javafx.event.EventHandlerManager.dispatchBubblingEvent(EventHandlerManager.java:191); at com.sun.javafx.event.CompositeEventDispatcher.dispatchBubblingEvent(CompositeEventDispatcher.java:59); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:58); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:1888,Energy Efficiency,allocate,allocated,1888,"::mixChannels'`. OpenCV's mixChannels: https://docs.opencv.org/3.4/d2/de8/group__core__array.html#ga51d768c270a1cdd3497255017c4504be. For now, I've been reducing the number of channels passed, which gives me a training accuracy of ~88%. But it would be great to train on all available data, and see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error log:; ```; 12:10:44.040 [JavaFX Application Thread] [INFO ] q.p.g.c.ml.PixelClassifierPane - Creating training data from 38 images; 12:10:44.953 [JavaFX Application Thread] [ERROR] q.p.g.c.ml.PixelClassifierTraining - Error requesting features for ImageOp server: ImageData: Other, xxxx___ROI8_ROI_008.ome.tiff - ROI8_ROI_008.ome {""colorTransforms"":[{""channelName"":""Pr(141)_141-SMA""},{""channelName"":""Nd(142)_142Nd-CD19""},{""channelName"":""Nd(143)_143Nd-Vimentin""},{""channelName"":""Nd(144)_144Nd-cd14""},{""channelName"":""Nd(146)_146NdCD16""},{""channelName"":""Nd(148)_148-Pan-Ker""},{""channelName"":""Sm(149)_149Sm-CD11b""},{""channelName"":""Sm(152)_152Sm-CD45""},{""channelName"":""Sm(154)_154Sm-CD11c""},{""channelName"":""Gd(155)_155Gd-FoxP3""},{""channelName"":""Gd(156)_156Gd-CD4""},{""channelName"":""Gd(158)_158Gd-E_Cadherin""},{""channelName"":""Tb(159)_159Tb-CD68""},{""channelName"":""Gd(160)_160Gd-",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:1178,Modifiability,variab,variable,1178,"t succeed, and threw the following error (see end of post). Reducing either the number of channels, features, or scales would allow the pixel classifier to be trained. Images were non-pyramided, ~1000x1000 pixel, 32 bit floating point IMC data with a total of 37 channels (27 of which to be used in the pixel classifier). Unfortunately, I can't share the exact images that caused this error to occur. My guess is that this is actually an issue with OpenCV , given the exception `OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'`. OpenCV's mixChannels: https://docs.opencv.org/3.4/d2/de8/group__core__array.html#ga51d768c270a1cdd3497255017c4504be. For now, I've been reducing the number of channels passed, which gives me a training accuracy of ~88%. But it would be great to train on all available data, and see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error log:; ```; 12:10:44.040 [JavaFX Application Thread] [INFO ] q.p.g.c.ml.PixelClassifierPane - Creating training data from 38 images; 12:10:44.953 [JavaFX Application Thr",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:1526,Performance,load,loading,1526,"e the exact images that caused this error to occur. My guess is that this is actually an issue with OpenCV , given the exception `OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'`. OpenCV's mixChannels: https://docs.opencv.org/3.4/d2/de8/group__core__array.html#ga51d768c270a1cdd3497255017c4504be. For now, I've been reducing the number of channels passed, which gives me a training accuracy of ~88%. But it would be great to train on all available data, and see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error log:; ```; 12:10:44.040 [JavaFX Application Thread] [INFO ] q.p.g.c.ml.PixelClassifierPane - Creating training data from 38 images; 12:10:44.953 [JavaFX Application Thread] [ERROR] q.p.g.c.ml.PixelClassifierTraining - Error requesting features for ImageOp server: ImageData: Other, xxxx___ROI8_ROI_008.ome.tiff - ROI8_ROI_008.ome {""colorTransforms"":[{""channelName"":""Pr(141)_141-SMA""},{""channelName"":""Nd(142)_142Nd-CD19""},{""channelName"":""Nd(143)_143Nd-Vimentin""},{""channelName"":""Nd(144)_144Nd-cd14""},{""channelName"":""Nd",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:1762,Performance,load,loaded,1762,"windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'`. OpenCV's mixChannels: https://docs.opencv.org/3.4/d2/de8/group__core__array.html#ga51d768c270a1cdd3497255017c4504be. For now, I've been reducing the number of channels passed, which gives me a training accuracy of ~88%. But it would be great to train on all available data, and see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error log:; ```; 12:10:44.040 [JavaFX Application Thread] [INFO ] q.p.g.c.ml.PixelClassifierPane - Creating training data from 38 images; 12:10:44.953 [JavaFX Application Thread] [ERROR] q.p.g.c.ml.PixelClassifierTraining - Error requesting features for ImageOp server: ImageData: Other, xxxx___ROI8_ROI_008.ome.tiff - ROI8_ROI_008.ome {""colorTransforms"":[{""channelName"":""Pr(141)_141-SMA""},{""channelName"":""Nd(142)_142Nd-CD19""},{""channelName"":""Nd(143)_143Nd-Vimentin""},{""channelName"":""Nd(144)_144Nd-cd14""},{""channelName"":""Nd(146)_146NdCD16""},{""channelName"":""Nd(148)_148-Pan-Ker""},{""channelName"":""Sm(149)_149Sm-CD11b""},{""channelName"":""Sm(152)_152Sm-CD45""},{""channelName"":""Sm(154)_154Sm-CD11c""},{""channelName"":""Gd(155)_155",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:1939,Performance,cache,cache,1939,"::mixChannels'`. OpenCV's mixChannels: https://docs.opencv.org/3.4/d2/de8/group__core__array.html#ga51d768c270a1cdd3497255017c4504be. For now, I've been reducing the number of channels passed, which gives me a training accuracy of ~88%. But it would be great to train on all available data, and see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error log:; ```; 12:10:44.040 [JavaFX Application Thread] [INFO ] q.p.g.c.ml.PixelClassifierPane - Creating training data from 38 images; 12:10:44.953 [JavaFX Application Thread] [ERROR] q.p.g.c.ml.PixelClassifierTraining - Error requesting features for ImageOp server: ImageData: Other, xxxx___ROI8_ROI_008.ome.tiff - ROI8_ROI_008.ome {""colorTransforms"":[{""channelName"":""Pr(141)_141-SMA""},{""channelName"":""Nd(142)_142Nd-CD19""},{""channelName"":""Nd(143)_143Nd-Vimentin""},{""channelName"":""Nd(144)_144Nd-cd14""},{""channelName"":""Nd(146)_146NdCD16""},{""channelName"":""Nd(148)_148-Pan-Ker""},{""channelName"":""Sm(149)_149Sm-CD11b""},{""channelName"":""Sm(152)_152Sm-CD45""},{""channelName"":""Sm(154)_154Sm-CD11c""},{""channelName"":""Gd(155)_155Gd-FoxP3""},{""channelName"":""Gd(156)_156Gd-CD4""},{""channelName"":""Gd(158)_158Gd-E_Cadherin""},{""channelName"":""Tb(159)_159Tb-CD68""},{""channelName"":""Gd(160)_160Gd-",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:4121,Performance,concurren,concurrent,4121,""":""Er(170)_170Er-CD3""},{""channelName"":""Yb(171)_171Yb-HistoneH3""},{""channelName"":""Yb(173)_173Yb-CD45RO""},{""channelName"":""Yb(174)_174Yb-HLA-DR""},{""channelName"":""Lu(175)_175Lu-Beta2M""},{""channelName"":""Yb(176)_176Yb-Nak-ATPase""},{""channelName"":""Ir(193)_193Ir-NA2""}],""op"":{""type"":""op.core.split-merge"",""ops"":[{""type"":""op.filters.multiscale"",""features"":[""GAUSSIAN"",""LAPLACIAN"",""WEIGHTED_STD_DEV"",""GRADIENT_MAGNITUDE"",""STRUCTURE_TENSOR_EIGENVALUE_MAX"",""STRUCTURE_TENSOR_EIGENVALUE_MIN"",""STRUCTURE_TENSOR_COHERENCE"",""HESSIAN_DETERMINANT"",""HESSIAN_EIGENVALUE_MAX"",""HESSIAN_EIGENVALUE_MIN""],""sigmaX"":4.0,""sigmaY"":4.0},{""type"":""op.filters.multiscale"",""features"":[""GAUSSIAN"",""LAPLACIAN"",""WEIGHTED_STD_DEV"",""GRADIENT_MAGNITUDE"",""STRUCTURE_TENSOR_EIGENVALUE_MAX"",""STRUCTURE_TENSOR_EIGENVALUE_MIN"",""STRUCTURE_TENSOR_COHERENCE"",""HESSIAN_DETERMINANT"",""HESSIAN_EIGENVALUE_MAX"",""HESSIAN_EIGENVALUE_MIN""],""sigmaX"":8.0,""sigmaY"":8.0}]}}: x=0, y=0, w=800, h=848, z=0, t=0, downsample=4; java.io.IOException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:226); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:287); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:60); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.ensureFeaturesCalculated(PixelClassifierTraining.java:440); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.<init>(PixelClassifierTraining.java:429); at qupath.process.gui.commands.ml.PixelClassifierTraining.getTileFeatures(PixelClassifierTraining.java:402); at qupath.process.gui.c",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:9757,Performance,concurren,concurrent,9757,t javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2623); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:557); at com.sun.glass.ui.View.notifyMouse(View.java:943); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:222); ... 58 common frames omitted; Caused by: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at org.bytedeco.opencv.global.opencv_core.mixChannels(Native Method); at qupath.opencv.tools.OpenCVTools.mergeChannels(OpenCVTools.java:413); at qupath.opencv.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:10079,Performance,concurren,concurrent,10079,sController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:557); at com.sun.glass.ui.View.notifyMouse(View.java:943); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:222); ... 58 common frames omitted; Caused by: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at org.bytedeco.opencv.global.opencv_core.mixChannels(Native Method); at qupath.opencv.tools.OpenCVTools.mergeChannels(OpenCVTools.java:413); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.transformPadded(ImageOps.java:2511); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.apply(ImageOps.java:2470); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:425); at qupath.opencv.ops.ImageOpServer.readTile(ImageOpServer.java:98); at qupath.lib.images.servers.Abstrac,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:10148,Performance,concurren,concurrent,10148,m.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:557); at com.sun.glass.ui.View.notifyMouse(View.java:943); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:222); ... 58 common frames omitted; Caused by: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at org.bytedeco.opencv.global.opencv_core.mixChannels(Native Method); at qupath.opencv.tools.OpenCVTools.mergeChannels(OpenCVTools.java:413); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.transformPadded(ImageOps.java:2511); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.apply(ImageOps.java:2470); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:425); at qupath.opencv.ops.ImageOpServer.readTile(ImageOpServer.java:98); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$getTile$0(AbstractTileableImageServer.jav,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:11185,Performance,concurren,concurrent,11185,EventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:557); at com.sun.glass.ui.View.notifyMouse(View.java:943); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:222); ... 58 common frames omitted; Caused by: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at org.bytedeco.opencv.global.opencv_core.mixChannels(Native Method); at qupath.opencv.tools.OpenCVTools.mergeChannels(OpenCVTools.java:413); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.transformPadded(ImageOps.java:2511); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.apply(ImageOps.java:2470); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:425); at qupath.opencv.ops.ImageOpServer.readTile(ImageOpServer.java:98); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$getTile$0(AbstractTileableImageServer.java:213); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:217); ... 58 common frames omitted; ```,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:9070,Security,secur,security,9070,nImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$MouseHandler.process(Scene.java:3897); at javafx.scene.Scene.processMouseEvent(Scene.java:1878); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2623); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:557); at com.sun.glass.ui.View.notifyMouse(View.java:943); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at java.base/java.u,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:9079,Security,Access,AccessController,9079,4); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$MouseHandler.process(Scene.java:3897); at javafx.scene.Scene.processMouseEvent(Scene.java:1878); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2623); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:557); at com.sun.glass.ui.View.notifyMouse(View.java:943); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at java.base/java.util.concurren,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:789,Testability,Assert,Assertion,789,"## Bug report. **Describe the bug**; An attempt to train a pixel classifier using 27 channels X 12 features X 2 scales, with annotations spanning over 38 images did not succeed, and threw the following error (see end of post). Reducing either the number of channels, features, or scales would allow the pixel classifier to be trained. Images were non-pyramided, ~1000x1000 pixel, 32 bit floating point IMC data with a total of 37 channels (27 of which to be used in the pixel classifier). Unfortunately, I can't share the exact images that caused this error to occur. My guess is that this is actually an issue with OpenCV , given the exception `OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'`. OpenCV's mixChannels: https://docs.opencv.org/3.4/d2/de8/group__core__array.html#ga51d768c270a1cdd3497255017c4504be. For now, I've been reducing the number of channels passed, which gives me a training accuracy of ~88%. But it would be great to train on all available data, and see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error l",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:2000,Testability,log,log,2000,"7c4504be. For now, I've been reducing the number of channels passed, which gives me a training accuracy of ~88%. But it would be great to train on all available data, and see what the variable importance is of each feature and channel. **To Reproduce**; Steps to reproduce the behavior:; 1. Create a project with ~143 IMC images; 2. Annotate structures within ~38 images with 5 different classifications of annotations; 3. Open a non-annotated image; 4. Attempt to train a pixel classifier using all channels, scales, and features, loading training from other annotated images in the project.; 5. Click ""Live Preview"", note the error at the end of the post. **Expected behavior**; A pixel classifier should be trained, and a preview should be applied to the currently loaded image. **Desktop (please complete the following information):**; - OS: Windows 10, 32-thread processor, 127/128 Gb RAM allocated for QuPath, ~500 Gb SSD storage for tile cache; - QuPath Version 0.3.2. **Additional context**; Error log:; ```; 12:10:44.040 [JavaFX Application Thread] [INFO ] q.p.g.c.ml.PixelClassifierPane - Creating training data from 38 images; 12:10:44.953 [JavaFX Application Thread] [ERROR] q.p.g.c.ml.PixelClassifierTraining - Error requesting features for ImageOp server: ImageData: Other, xxxx___ROI8_ROI_008.ome.tiff - ROI8_ROI_008.ome {""colorTransforms"":[{""channelName"":""Pr(141)_141-SMA""},{""channelName"":""Nd(142)_142Nd-CD19""},{""channelName"":""Nd(143)_143Nd-Vimentin""},{""channelName"":""Nd(144)_144Nd-cd14""},{""channelName"":""Nd(146)_146NdCD16""},{""channelName"":""Nd(148)_148-Pan-Ker""},{""channelName"":""Sm(149)_149Sm-CD11b""},{""channelName"":""Sm(152)_152Sm-CD45""},{""channelName"":""Sm(154)_154Sm-CD11c""},{""channelName"":""Gd(155)_155Gd-FoxP3""},{""channelName"":""Gd(156)_156Gd-CD4""},{""channelName"":""Gd(158)_158Gd-E_Cadherin""},{""channelName"":""Tb(159)_159Tb-CD68""},{""channelName"":""Gd(160)_160Gd-Vista""},{""channelName"":""Dy(161)_161Dy-CD20""},{""channelName"":""Dy(162)_162Dy-CD8a""},{""channelName"":""Er(166)_166Er-CD45RA""},{""ch",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:4323,Testability,Assert,Assertion,4323,"b-Nak-ATPase""},{""channelName"":""Ir(193)_193Ir-NA2""}],""op"":{""type"":""op.core.split-merge"",""ops"":[{""type"":""op.filters.multiscale"",""features"":[""GAUSSIAN"",""LAPLACIAN"",""WEIGHTED_STD_DEV"",""GRADIENT_MAGNITUDE"",""STRUCTURE_TENSOR_EIGENVALUE_MAX"",""STRUCTURE_TENSOR_EIGENVALUE_MIN"",""STRUCTURE_TENSOR_COHERENCE"",""HESSIAN_DETERMINANT"",""HESSIAN_EIGENVALUE_MAX"",""HESSIAN_EIGENVALUE_MIN""],""sigmaX"":4.0,""sigmaY"":4.0},{""type"":""op.filters.multiscale"",""features"":[""GAUSSIAN"",""LAPLACIAN"",""WEIGHTED_STD_DEV"",""GRADIENT_MAGNITUDE"",""STRUCTURE_TENSOR_EIGENVALUE_MAX"",""STRUCTURE_TENSOR_EIGENVALUE_MIN"",""STRUCTURE_TENSOR_COHERENCE"",""HESSIAN_DETERMINANT"",""HESSIAN_EIGENVALUE_MAX"",""HESSIAN_EIGENVALUE_MIN""],""sigmaX"":8.0,""sigmaY"":8.0}]}}: x=0, y=0, w=800, h=848, z=0, t=0, downsample=4; java.io.IOException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:226); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:287); at qupath.lib.images.servers.AbstractTileableImageServer.readBufferedImage(AbstractTileableImageServer.java:60); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.ensureFeaturesCalculated(PixelClassifierTraining.java:440); at qupath.process.gui.commands.ml.PixelClassifierTraining$TileFeatures.<init>(PixelClassifierTraining.java:429); at qupath.process.gui.commands.ml.PixelClassifierTraining.getTileFeatures(PixelClassifierTraining.java:402); at qupath.process.gui.commands.ml.PixelClassifierTraining.updateTrainingData(PixelClassifierTraining.java:189); at qupath.process.gui.commands.ml.PixelClassifierTraining.createTrainingDataForLabelMap(PixelClassifierTraining.java:343)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:9959,Testability,Assert,Assertion,9959,assViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:557); at com.sun.glass.ui.View.notifyMouse(View.java:943); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:222); ... 58 common frames omitted; Caused by: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at org.bytedeco.opencv.global.opencv_core.mixChannels(Native Method); at qupath.opencv.tools.OpenCVTools.mergeChannels(OpenCVTools.java:413); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.transformPadded(ImageOps.java:2511); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.apply(ImageOps.java:2470); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.jav,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/947:10507,Testability,Assert,Assertion,10507,EventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:557); at com.sun.glass.ui.View.notifyMouse(View.java:943); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); Caused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at java.base/java.util.concurrent.FutureTask.report(Unknown Source); at java.base/java.util.concurrent.FutureTask.get(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:222); ... 58 common frames omitted; Caused by: java.lang.RuntimeException: OpenCV(4.5.3) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64\opencv-4.5.3\modules\core\src\channels.cpp:141: error: (-215:Assertion failed) i1 >= 0 && j < ndsts && dst[j].depth() == depth in function 'cv::mixChannels'. at org.bytedeco.opencv.global.opencv_core.mixChannels(Native Method); at qupath.opencv.tools.OpenCVTools.mergeChannels(OpenCVTools.java:413); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.transformPadded(ImageOps.java:2511); at qupath.opencv.ops.ImageOps$Core$SplitMergeOp.apply(ImageOps.java:2470); at qupath.opencv.ops.ImageOps$ChannelImageDataOp.apply(ImageOps.java:425); at qupath.opencv.ops.ImageOpServer.readTile(ImageOpServer.java:98); at qupath.lib.images.servers.AbstractTileableImageServer.lambda$getTile$0(AbstractTileableImageServer.java:213); at java.base/java.util.concurrent.FutureTask.run(Unknown Source); at qupath.lib.images.servers.AbstractTileableImageServer.getTile(AbstractTileableImageServer.java:217); ... 58 common frames omitted; ```,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/947
https://github.com/qupath/qupath/issues/949:844,Availability,error,error,844,"```; [jalal@goku bin]$ chmod 777 QuPath; [jalal@goku bin]$ ./QuPath; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 4:51:53 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 16:51:53.531 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 16:51:53.823 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:986,Availability,Error,Error,986,"```; [jalal@goku bin]$ chmod 777 QuPath; [jalal@goku bin]$ ./QuPath; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 4:51:53 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 16:51:53.531 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 16:51:53.823 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:2150,Availability,down,downloads,2150,========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/libdl.so.2(+0x15ad)[0x7f087cb535ad]; /lib64/libdl.so.2(dlopen+0x31)[0x7f087cb53041]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57924)[0x7f087b494924]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57a5a)[0x7f087b494a5a]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(JVM_LoadLibrary+0xbb)[0x7f087b169d6b]; /scratch3/downloads/QuPath/lib/runtime/lib/libjava.so(Java_jdk_internal_loader_NativeLibraries_load+0x17f)[0x7f087915427f]; [0x7f0862860bbb]; ======= Memory map: ========; 416a7000-416a9000 r-xs 00000000 00:04 19971786 /memfd:/.glXXXXXX (deleted); 419dd000-41a8c000 rw-p 00000000 00:00 0 . ```. full error trace here https://pastebin.com/raw/qZy5Vb5d . ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core. ```,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:2238,Availability,down,downloads,2238,========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/libdl.so.2(+0x15ad)[0x7f087cb535ad]; /lib64/libdl.so.2(dlopen+0x31)[0x7f087cb53041]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57924)[0x7f087b494924]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57a5a)[0x7f087b494a5a]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(JVM_LoadLibrary+0xbb)[0x7f087b169d6b]; /scratch3/downloads/QuPath/lib/runtime/lib/libjava.so(Java_jdk_internal_loader_NativeLibraries_load+0x17f)[0x7f087915427f]; [0x7f0862860bbb]; ======= Memory map: ========; 416a7000-416a9000 r-xs 00000000 00:04 19971786 /memfd:/.glXXXXXX (deleted); 419dd000-41a8c000 rw-p 00000000 00:00 0 . ```. full error trace here https://pastebin.com/raw/qZy5Vb5d . ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core. ```,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:2326,Availability,down,downloads,2326,========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/libdl.so.2(+0x15ad)[0x7f087cb535ad]; /lib64/libdl.so.2(dlopen+0x31)[0x7f087cb53041]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57924)[0x7f087b494924]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57a5a)[0x7f087b494a5a]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(JVM_LoadLibrary+0xbb)[0x7f087b169d6b]; /scratch3/downloads/QuPath/lib/runtime/lib/libjava.so(Java_jdk_internal_loader_NativeLibraries_load+0x17f)[0x7f087915427f]; [0x7f0862860bbb]; ======= Memory map: ========; 416a7000-416a9000 r-xs 00000000 00:04 19971786 /memfd:/.glXXXXXX (deleted); 419dd000-41a8c000 rw-p 00000000 00:00 0 . ```. full error trace here https://pastebin.com/raw/qZy5Vb5d . ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core. ```,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:2425,Availability,down,downloads,2425,========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/libdl.so.2(+0x15ad)[0x7f087cb535ad]; /lib64/libdl.so.2(dlopen+0x31)[0x7f087cb53041]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57924)[0x7f087b494924]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57a5a)[0x7f087b494a5a]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(JVM_LoadLibrary+0xbb)[0x7f087b169d6b]; /scratch3/downloads/QuPath/lib/runtime/lib/libjava.so(Java_jdk_internal_loader_NativeLibraries_load+0x17f)[0x7f087915427f]; [0x7f0862860bbb]; ======= Memory map: ========; 416a7000-416a9000 r-xs 00000000 00:04 19971786 /memfd:/.glXXXXXX (deleted); 419dd000-41a8c000 rw-p 00000000 00:00 0 . ```. full error trace here https://pastebin.com/raw/qZy5Vb5d . ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core. ```,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:2715,Availability,error,error,2715,========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/libdl.so.2(+0x15ad)[0x7f087cb535ad]; /lib64/libdl.so.2(dlopen+0x31)[0x7f087cb53041]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57924)[0x7f087b494924]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57a5a)[0x7f087b494a5a]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(JVM_LoadLibrary+0xbb)[0x7f087b169d6b]; /scratch3/downloads/QuPath/lib/runtime/lib/libjava.so(Java_jdk_internal_loader_NativeLibraries_load+0x17f)[0x7f087915427f]; [0x7f0862860bbb]; ======= Memory map: ========; 416a7000-416a9000 r-xs 00000000 00:04 19971786 /memfd:/.glXXXXXX (deleted); 419dd000-41a8c000 rw-p 00000000 00:00 0 . ```. full error trace here https://pastebin.com/raw/qZy5Vb5d . ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core. ```,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:173,Deployability,release,release,173,"```; [jalal@goku bin]$ chmod 777 QuPath; [jalal@goku bin]$ ./QuPath; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 4:51:53 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 16:51:53.531 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 16:51:53.823 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:284,Deployability,configurat,configuration,284,"```; [jalal@goku bin]$ chmod 777 QuPath; [jalal@goku bin]$ ./QuPath; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 4:51:53 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 16:51:53.531 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 16:51:53.823 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:3013,Deployability,release,release,3013,========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/libdl.so.2(+0x15ad)[0x7f087cb535ad]; /lib64/libdl.so.2(dlopen+0x31)[0x7f087cb53041]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57924)[0x7f087b494924]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57a5a)[0x7f087b494a5a]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(JVM_LoadLibrary+0xbb)[0x7f087b169d6b]; /scratch3/downloads/QuPath/lib/runtime/lib/libjava.so(Java_jdk_internal_loader_NativeLibraries_load+0x17f)[0x7f087915427f]; [0x7f0862860bbb]; ======= Memory map: ========; 416a7000-416a9000 r-xs 00000000 00:04 19971786 /memfd:/.glXXXXXX (deleted); 419dd000-41a8c000 rw-p 00000000 00:00 0 . ```. full error trace here https://pastebin.com/raw/qZy5Vb5d . ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core. ```,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:3038,Deployability,Release,Release,3038,========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/libdl.so.2(+0x15ad)[0x7f087cb535ad]; /lib64/libdl.so.2(dlopen+0x31)[0x7f087cb53041]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57924)[0x7f087b494924]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57a5a)[0x7f087b494a5a]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(JVM_LoadLibrary+0xbb)[0x7f087b169d6b]; /scratch3/downloads/QuPath/lib/runtime/lib/libjava.so(Java_jdk_internal_loader_NativeLibraries_load+0x17f)[0x7f087915427f]; [0x7f0862860bbb]; ======= Memory map: ========; 416a7000-416a9000 r-xs 00000000 00:04 19971786 /memfd:/.glXXXXXX (deleted); 419dd000-41a8c000 rw-p 00000000 00:00 0 . ```. full error trace here https://pastebin.com/raw/qZy5Vb5d . ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core. ```,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:972,Energy Efficiency,adapt,adapters,972,"```; [jalal@goku bin]$ chmod 777 QuPath; [jalal@goku bin]$ ./QuPath; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 4:51:53 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 16:51:53.531 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 16:51:53.823 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:972,Integrability,adapter,adapters,972,"```; [jalal@goku bin]$ chmod 777 QuPath; [jalal@goku bin]$ ./QuPath; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 4:51:53 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 16:51:53.531 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 16:51:53.823 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:284,Modifiability,config,configuration,284,"```; [jalal@goku bin]$ chmod 777 QuPath; [jalal@goku bin]$ ./QuPath; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 4:51:53 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 16:51:53.531 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 16:51:53.823 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:972,Modifiability,adapt,adapters,972,"```; [jalal@goku bin]$ chmod 777 QuPath; [jalal@goku bin]$ ./QuPath; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 4:51:53 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 16:51:53.531 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 16:51:53.823 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:312,Performance,load,loaded,312,"```; [jalal@goku bin]$ chmod 777 QuPath; [jalal@goku bin]$ ./QuPath; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 4:51:53 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 16:51:53.531 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 16:51:53.823 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:716,Performance,cache,cache,716,"```; [jalal@goku bin]$ chmod 777 QuPath; [jalal@goku bin]$ ./QuPath; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 4:51:53 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 16:51:53.531 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 16:51:53.823 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:1609,Performance,cache,cache,1609,ag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/libdl.so.2(+0x15ad)[0x7f087cb535ad]; /lib64/libdl.so.2(dlopen+0x31)[0x7f087cb53041]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57924)[0x7f087b494924]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(+0xc57a5a)[0x7f087b494a5a]; /scratch3/downloads/QuPath/lib/runtime/lib/server/libjvm.so(JVM_LoadLibrary+0xbb)[0x7f087b169d6b]; /scratch3/downloads/QuPath/lib/runtime/lib/libjava.so(Java_jdk_internal_loader_NativeLibraries_load+0x17f)[0x7f087915427f]; [0x7f0862860bbb]; ======= Memory map: ========; 416a7000-416a9000 r-xs 000,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/949:120,Security,access,access,120,"```; [jalal@goku bin]$ chmod 777 QuPath; [jalal@goku bin]$ ./QuPath; OpenJDK 64-Bit Server VM warning: Option --illegal-access is deprecated and will be removed in a future release.; Apr 11, 2022 4:51:53 PM com.sun.javafx.application.PlatformImpl startup; WARNING: Unsupported JavaFX configuration: classes were loaded from 'unnamed module @60975100'; 16:51:53.531 [JavaFX Application Thread] [INFO ] qupath.lib.common.ThreadTools - Setting parallelism to 11; 16:51:53.823 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - QuPath build: Version: 0.3.2; Build time: 2022-01-17, 08:49; Latest commit tag: '71884c6'; 16:51:53.824 [JavaFX Application Thread] [INFO ] qupath.lib.gui.QuPathGUI - Setting tile cache size to 8024.00 MB (25.0% max memory). (QuPath:14092): Gdk-WARNING **: 16:51:54.374: XSetErrorHandler() called with a GDK error trap pushed. Don't do that.; 16:51:54.868 [JavaFX Application Thread] [INFO ] qupath.lib.scripting.QP - Initializing type adapters; *** Error in `./QuPath': free(): invalid pointer: 0x00007effa50f8c80 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x81329)[0x7f087c503329]; /lib64/libstdc++.so.6(_ZNSt6locale5_Impl16_M_install_facetEPKNS_2idEPKNS_5facetE+0x142)[0x7effa4e62192]; /lib64/libstdc++.so.6(_ZNSt6locale5_ImplC1Em+0x1e3)[0x7effa4e625e3]; /lib64/libstdc++.so.6(+0x71555)[0x7effa4e63555]; /lib64/libpthread.so.0(+0x620b)[0x7f087be4520b]; /lib64/libstdc++.so.6(+0x715a1)[0x7effa4e635a1]; /lib64/libstdc++.so.6(_ZNSt6localeC2Ev+0x13)[0x7effa4e635e3]; /lib64/libstdc++.so.6(_ZNSt8ios_base4InitC2Ev+0xbc)[0x7effa4e6043c]; /home/grad3/jalal/.javacpp/cache/opencv-4.5.3-1.5.6-linux-x86_64.jar/org/bytedeco/opencv/linux-x86_64/libopencv_core.so.4.5(+0x64ddd)[0x7efeb6536ddd]; /lib64/ld-linux-x86-64.so.2(+0xf9c3)[0x7f087cd659c3]; /lib64/ld-linux-x86-64.so.2(+0x1459e)[0x7f087cd6a59e]; /lib64/ld-linux-x86-64.so.2(+0xf7d4)[0x7f087cd657d4]; /lib64/ld-linux-x86-64.so.2(+0x13b8b)[0x7f087cd69b8b]; /lib64/libdl.so.2(+0xfab)[0x7f087cb52fab]; /lib64/",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/949
https://github.com/qupath/qupath/issues/950:102,Availability,error,error,102,"I am following the [instructions for building QuPath][1] from source on CentOS 7. I get the following error:. [jalal@goku qupath]$ ./gradlew clean jpackage; ; FAILURE: Build failed with an exception.; ; * What went wrong:; Failed to apply plugin class 'org.gradle.api.plugins.JavaPlugin'.; > java.io.FileNotFoundException: /scratch3/downloads/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar (No such file or directory); ; * Try:; > Run with --stacktrace option to get the stack trace.; > Run with --info or --debug option to get more log output.; > Run with --scan to get full insights.; ; * Get more help at https://help.gradle.org; ; BUILD FAILED in 721ms. The instructions that I am following are as follows:. $ git clone https://github.com/qupath/qupath; $ cd qupath; $ ./gradlew clean jpackage. I have:; ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. ```; and; ```; $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:159,Availability,FAILURE,FAILURE,159,"I am following the [instructions for building QuPath][1] from source on CentOS 7. I get the following error:. [jalal@goku qupath]$ ./gradlew clean jpackage; ; FAILURE: Build failed with an exception.; ; * What went wrong:; Failed to apply plugin class 'org.gradle.api.plugins.JavaPlugin'.; > java.io.FileNotFoundException: /scratch3/downloads/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar (No such file or directory); ; * Try:; > Run with --stacktrace option to get the stack trace.; > Run with --info or --debug option to get more log output.; > Run with --scan to get full insights.; ; * Get more help at https://help.gradle.org; ; BUILD FAILED in 721ms. The instructions that I am following are as follows:. $ git clone https://github.com/qupath/qupath; $ cd qupath; $ ./gradlew clean jpackage. I have:; ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. ```; and; ```; $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:333,Availability,down,downloads,333,"I am following the [instructions for building QuPath][1] from source on CentOS 7. I get the following error:. [jalal@goku qupath]$ ./gradlew clean jpackage; ; FAILURE: Build failed with an exception.; ; * What went wrong:; Failed to apply plugin class 'org.gradle.api.plugins.JavaPlugin'.; > java.io.FileNotFoundException: /scratch3/downloads/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar (No such file or directory); ; * Try:; > Run with --stacktrace option to get the stack trace.; > Run with --info or --debug option to get more log output.; > Run with --scan to get full insights.; ; * Get more help at https://help.gradle.org; ; BUILD FAILED in 721ms. The instructions that I am following are as follows:. $ git clone https://github.com/qupath/qupath; $ cd qupath; $ ./gradlew clean jpackage. I have:; ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. ```; and; ```; $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:1440,Availability,down,downloads,1440,"jar (No such file or directory); ; * Try:; > Run with --stacktrace option to get the stack trace.; > Run with --info or --debug option to get more log output.; > Run with --scan to get full insights.; ; * Get more help at https://help.gradle.org; ; BUILD FAILED in 721ms. The instructions that I am following are as follows:. $ git clone https://github.com/qupath/qupath; $ cd qupath; $ ./gradlew clean jpackage. I have:; ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. ```; and; ```; $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd64. [jalal@goku downloads]$ cat /etc/profile.d/gradle.sh . export GRADLE_HOME=/opt/gradle/gradle-7.4.2; export PATH=${GRADLE_HOME}/bin:${PATH}. $ tail -1 ~/.bashrc; export PATH=$PATH:/opt/gradle/gradle-7.4.2/bin; $ source ~/.bashrc. ```. The plugin that is reported as missing in the error is in ; ```; [jalal@goku ~]$ find /opt/gradle -name ""g",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:1498,Availability,down,downloads,1498,"--debug option to get more log output.; > Run with --scan to get full insights.; ; * Get more help at https://help.gradle.org; ; BUILD FAILED in 721ms. The instructions that I am following are as follows:. $ git clone https://github.com/qupath/qupath; $ cd qupath; $ ./gradlew clean jpackage. I have:; ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. ```; and; ```; $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd64. [jalal@goku downloads]$ cat /etc/profile.d/gradle.sh . export GRADLE_HOME=/opt/gradle/gradle-7.4.2; export PATH=${GRADLE_HOME}/bin:${PATH}. $ tail -1 ~/.bashrc; export PATH=$PATH:/opt/gradle/gradle-7.4.2/bin; $ source ~/.bashrc. ```. The plugin that is reported as missing in the error is in ; ```; [jalal@goku ~]$ find /opt/gradle -name ""gradle-plugins-7.4.2.jar""; /opt/gradle/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar; ```. Full log of `./gradlew cle",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:1562,Availability,down,downloads,1562,"get full insights.; ; * Get more help at https://help.gradle.org; ; BUILD FAILED in 721ms. The instructions that I am following are as follows:. $ git clone https://github.com/qupath/qupath; $ cd qupath; $ ./gradlew clean jpackage. I have:; ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. ```; and; ```; $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd64. [jalal@goku downloads]$ cat /etc/profile.d/gradle.sh . export GRADLE_HOME=/opt/gradle/gradle-7.4.2; export PATH=${GRADLE_HOME}/bin:${PATH}. $ tail -1 ~/.bashrc; export PATH=$PATH:/opt/gradle/gradle-7.4.2/bin; $ source ~/.bashrc. ```. The plugin that is reported as missing in the error is in ; ```; [jalal@goku ~]$ find /opt/gradle -name ""gradle-plugins-7.4.2.jar""; /opt/gradle/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar; ```. Full log of `./gradlew clean jpackage --stacktrace`: https://pastebin.com/raw/RuuJnuTe",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:1619,Availability,down,downloads,1619,"p.gradle.org; ; BUILD FAILED in 721ms. The instructions that I am following are as follows:. $ git clone https://github.com/qupath/qupath; $ cd qupath; $ ./gradlew clean jpackage. I have:; ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. ```; and; ```; $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd64. [jalal@goku downloads]$ cat /etc/profile.d/gradle.sh . export GRADLE_HOME=/opt/gradle/gradle-7.4.2; export PATH=${GRADLE_HOME}/bin:${PATH}. $ tail -1 ~/.bashrc; export PATH=$PATH:/opt/gradle/gradle-7.4.2/bin; $ source ~/.bashrc. ```. The plugin that is reported as missing in the error is in ; ```; [jalal@goku ~]$ find /opt/gradle -name ""gradle-plugins-7.4.2.jar""; /opt/gradle/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar; ```. Full log of `./gradlew clean jpackage --stacktrace`: https://pastebin.com/raw/RuuJnuTe. Full log of `./gradlew clean jpackage --debug`:; h",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:2062,Availability,down,downloads,2062,"sb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd64. [jalal@goku downloads]$ cat /etc/profile.d/gradle.sh . export GRADLE_HOME=/opt/gradle/gradle-7.4.2; export PATH=${GRADLE_HOME}/bin:${PATH}. $ tail -1 ~/.bashrc; export PATH=$PATH:/opt/gradle/gradle-7.4.2/bin; $ source ~/.bashrc. ```. The plugin that is reported as missing in the error is in ; ```; [jalal@goku ~]$ find /opt/gradle -name ""gradle-plugins-7.4.2.jar""; /opt/gradle/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar; ```. Full log of `./gradlew clean jpackage --stacktrace`: https://pastebin.com/raw/RuuJnuTe. Full log of `./gradlew clean jpackage --debug`:; https://pastebin.com/raw/EPJs2jRR. Full log of `./gradlew clean jpackage --scan`:; https://pastebin.com/raw/TUGSM73K. [1]: https://qupath.readthedocs.io/en/latest/docs/reference/building.html. @saudet I decided to create a separate issue for the Stackoverflow post since building QuPath on CentOS 7 also fails (not just running its binary)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:2330,Availability,error,error,2330,"sb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd64. [jalal@goku downloads]$ cat /etc/profile.d/gradle.sh . export GRADLE_HOME=/opt/gradle/gradle-7.4.2; export PATH=${GRADLE_HOME}/bin:${PATH}. $ tail -1 ~/.bashrc; export PATH=$PATH:/opt/gradle/gradle-7.4.2/bin; $ source ~/.bashrc. ```. The plugin that is reported as missing in the error is in ; ```; [jalal@goku ~]$ find /opt/gradle -name ""gradle-plugins-7.4.2.jar""; /opt/gradle/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar; ```. Full log of `./gradlew clean jpackage --stacktrace`: https://pastebin.com/raw/RuuJnuTe. Full log of `./gradlew clean jpackage --debug`:; https://pastebin.com/raw/EPJs2jRR. Full log of `./gradlew clean jpackage --scan`:; https://pastebin.com/raw/TUGSM73K. [1]: https://qupath.readthedocs.io/en/latest/docs/reference/building.html. @saudet I decided to create a separate issue for the Stackoverflow post since building QuPath on CentOS 7 also fails (not just running its binary)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:1071,Deployability,release,release,1071,"QuPath][1] from source on CentOS 7. I get the following error:. [jalal@goku qupath]$ ./gradlew clean jpackage; ; FAILURE: Build failed with an exception.; ; * What went wrong:; Failed to apply plugin class 'org.gradle.api.plugins.JavaPlugin'.; > java.io.FileNotFoundException: /scratch3/downloads/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar (No such file or directory); ; * Try:; > Run with --stacktrace option to get the stack trace.; > Run with --info or --debug option to get more log output.; > Run with --scan to get full insights.; ; * Get more help at https://help.gradle.org; ; BUILD FAILED in 721ms. The instructions that I am following are as follows:. $ git clone https://github.com/qupath/qupath; $ cd qupath; $ ./gradlew clean jpackage. I have:; ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. ```; and; ```; $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:1096,Deployability,Release,Release,1096,"lowing error:. [jalal@goku qupath]$ ./gradlew clean jpackage; ; FAILURE: Build failed with an exception.; ; * What went wrong:; Failed to apply plugin class 'org.gradle.api.plugins.JavaPlugin'.; > java.io.FileNotFoundException: /scratch3/downloads/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar (No such file or directory); ; * Try:; > Run with --stacktrace option to get the stack trace.; > Run with --info or --debug option to get more log output.; > Run with --scan to get full insights.; ; * Get more help at https://help.gradle.org; ; BUILD FAILED in 721ms. The instructions that I am following are as follows:. $ git clone https://github.com/qupath/qupath; $ cd qupath; $ ./gradlew clean jpackage. I have:; ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. ```; and; ```; $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd64. [jalal@goku downloads]$ cat /etc/profile.d/gr",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:239,Modifiability,plugin,plugin,239,"I am following the [instructions for building QuPath][1] from source on CentOS 7. I get the following error:. [jalal@goku qupath]$ ./gradlew clean jpackage; ; FAILURE: Build failed with an exception.; ; * What went wrong:; Failed to apply plugin class 'org.gradle.api.plugins.JavaPlugin'.; > java.io.FileNotFoundException: /scratch3/downloads/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar (No such file or directory); ; * Try:; > Run with --stacktrace option to get the stack trace.; > Run with --info or --debug option to get more log output.; > Run with --scan to get full insights.; ; * Get more help at https://help.gradle.org; ; BUILD FAILED in 721ms. The instructions that I am following are as follows:. $ git clone https://github.com/qupath/qupath; $ cd qupath; $ ./gradlew clean jpackage. I have:; ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. ```; and; ```; $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:268,Modifiability,plugin,plugins,268,"I am following the [instructions for building QuPath][1] from source on CentOS 7. I get the following error:. [jalal@goku qupath]$ ./gradlew clean jpackage; ; FAILURE: Build failed with an exception.; ; * What went wrong:; Failed to apply plugin class 'org.gradle.api.plugins.JavaPlugin'.; > java.io.FileNotFoundException: /scratch3/downloads/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar (No such file or directory); ; * Try:; > Run with --stacktrace option to get the stack trace.; > Run with --info or --debug option to get more log output.; > Run with --scan to get full insights.; ; * Get more help at https://help.gradle.org; ; BUILD FAILED in 721ms. The instructions that I am following are as follows:. $ git clone https://github.com/qupath/qupath; $ cd qupath; $ ./gradlew clean jpackage. I have:; ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. ```; and; ```; $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:360,Modifiability,plugin,plugins,360,"I am following the [instructions for building QuPath][1] from source on CentOS 7. I get the following error:. [jalal@goku qupath]$ ./gradlew clean jpackage; ; FAILURE: Build failed with an exception.; ; * What went wrong:; Failed to apply plugin class 'org.gradle.api.plugins.JavaPlugin'.; > java.io.FileNotFoundException: /scratch3/downloads/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar (No such file or directory); ; * Try:; > Run with --stacktrace option to get the stack trace.; > Run with --info or --debug option to get more log output.; > Run with --scan to get full insights.; ; * Get more help at https://help.gradle.org; ; BUILD FAILED in 721ms. The instructions that I am following are as follows:. $ git clone https://github.com/qupath/qupath; $ cd qupath; $ ./gradlew clean jpackage. I have:; ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. ```; and; ```; $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:375,Modifiability,plugin,plugins-,375,"I am following the [instructions for building QuPath][1] from source on CentOS 7. I get the following error:. [jalal@goku qupath]$ ./gradlew clean jpackage; ; FAILURE: Build failed with an exception.; ; * What went wrong:; Failed to apply plugin class 'org.gradle.api.plugins.JavaPlugin'.; > java.io.FileNotFoundException: /scratch3/downloads/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar (No such file or directory); ; * Try:; > Run with --stacktrace option to get the stack trace.; > Run with --info or --debug option to get more log output.; > Run with --scan to get full insights.; ; * Get more help at https://help.gradle.org; ; BUILD FAILED in 721ms. The instructions that I am following are as follows:. $ git clone https://github.com/qupath/qupath; $ cd qupath; $ ./gradlew clean jpackage. I have:; ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. ```; and; ```; $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:2288,Modifiability,plugin,plugin,2288,"sb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd64. [jalal@goku downloads]$ cat /etc/profile.d/gradle.sh . export GRADLE_HOME=/opt/gradle/gradle-7.4.2; export PATH=${GRADLE_HOME}/bin:${PATH}. $ tail -1 ~/.bashrc; export PATH=$PATH:/opt/gradle/gradle-7.4.2/bin; $ source ~/.bashrc. ```. The plugin that is reported as missing in the error is in ; ```; [jalal@goku ~]$ find /opt/gradle -name ""gradle-plugins-7.4.2.jar""; /opt/gradle/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar; ```. Full log of `./gradlew clean jpackage --stacktrace`: https://pastebin.com/raw/RuuJnuTe. Full log of `./gradlew clean jpackage --debug`:; https://pastebin.com/raw/EPJs2jRR. Full log of `./gradlew clean jpackage --scan`:; https://pastebin.com/raw/TUGSM73K. [1]: https://qupath.readthedocs.io/en/latest/docs/reference/building.html. @saudet I decided to create a separate issue for the Stackoverflow post since building QuPath on CentOS 7 also fails (not just running its binary)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:2396,Modifiability,plugin,plugins-,2396,"sb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd64. [jalal@goku downloads]$ cat /etc/profile.d/gradle.sh . export GRADLE_HOME=/opt/gradle/gradle-7.4.2; export PATH=${GRADLE_HOME}/bin:${PATH}. $ tail -1 ~/.bashrc; export PATH=$PATH:/opt/gradle/gradle-7.4.2/bin; $ source ~/.bashrc. ```. The plugin that is reported as missing in the error is in ; ```; [jalal@goku ~]$ find /opt/gradle -name ""gradle-plugins-7.4.2.jar""; /opt/gradle/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar; ```. Full log of `./gradlew clean jpackage --stacktrace`: https://pastebin.com/raw/RuuJnuTe. Full log of `./gradlew clean jpackage --debug`:; https://pastebin.com/raw/EPJs2jRR. Full log of `./gradlew clean jpackage --scan`:; https://pastebin.com/raw/TUGSM73K. [1]: https://qupath.readthedocs.io/en/latest/docs/reference/building.html. @saudet I decided to create a separate issue for the Stackoverflow post since building QuPath on CentOS 7 also fails (not just running its binary)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:2445,Modifiability,plugin,plugins,2445,"sb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd64. [jalal@goku downloads]$ cat /etc/profile.d/gradle.sh . export GRADLE_HOME=/opt/gradle/gradle-7.4.2; export PATH=${GRADLE_HOME}/bin:${PATH}. $ tail -1 ~/.bashrc; export PATH=$PATH:/opt/gradle/gradle-7.4.2/bin; $ source ~/.bashrc. ```. The plugin that is reported as missing in the error is in ; ```; [jalal@goku ~]$ find /opt/gradle -name ""gradle-plugins-7.4.2.jar""; /opt/gradle/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar; ```. Full log of `./gradlew clean jpackage --stacktrace`: https://pastebin.com/raw/RuuJnuTe. Full log of `./gradlew clean jpackage --debug`:; https://pastebin.com/raw/EPJs2jRR. Full log of `./gradlew clean jpackage --scan`:; https://pastebin.com/raw/TUGSM73K. [1]: https://qupath.readthedocs.io/en/latest/docs/reference/building.html. @saudet I decided to create a separate issue for the Stackoverflow post since building QuPath on CentOS 7 also fails (not just running its binary)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:2460,Modifiability,plugin,plugins-,2460,"sb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd64. [jalal@goku downloads]$ cat /etc/profile.d/gradle.sh . export GRADLE_HOME=/opt/gradle/gradle-7.4.2; export PATH=${GRADLE_HOME}/bin:${PATH}. $ tail -1 ~/.bashrc; export PATH=$PATH:/opt/gradle/gradle-7.4.2/bin; $ source ~/.bashrc. ```. The plugin that is reported as missing in the error is in ; ```; [jalal@goku ~]$ find /opt/gradle -name ""gradle-plugins-7.4.2.jar""; /opt/gradle/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar; ```. Full log of `./gradlew clean jpackage --stacktrace`: https://pastebin.com/raw/RuuJnuTe. Full log of `./gradlew clean jpackage --debug`:; https://pastebin.com/raw/EPJs2jRR. Full log of `./gradlew clean jpackage --scan`:; https://pastebin.com/raw/TUGSM73K. [1]: https://qupath.readthedocs.io/en/latest/docs/reference/building.html. @saudet I decided to create a separate issue for the Stackoverflow post since building QuPath on CentOS 7 also fails (not just running its binary)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:536,Testability,log,log,536,"I am following the [instructions for building QuPath][1] from source on CentOS 7. I get the following error:. [jalal@goku qupath]$ ./gradlew clean jpackage; ; FAILURE: Build failed with an exception.; ; * What went wrong:; Failed to apply plugin class 'org.gradle.api.plugins.JavaPlugin'.; > java.io.FileNotFoundException: /scratch3/downloads/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar (No such file or directory); ; * Try:; > Run with --stacktrace option to get the stack trace.; > Run with --info or --debug option to get more log output.; > Run with --scan to get full insights.; ; * Get more help at https://help.gradle.org; ; BUILD FAILED in 721ms. The instructions that I am following are as follows:. $ git clone https://github.com/qupath/qupath; $ cd qupath; $ ./gradlew clean jpackage. I have:; ```; $ uname -a; Linux goku.bu.edu 3.10.0-1160.59.1.el7.x86_64 #1 SMP Wed Feb 23 16:47:03 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux. ```; and; ```; $ lsb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:2489,Testability,log,log,2489,"sb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd64. [jalal@goku downloads]$ cat /etc/profile.d/gradle.sh . export GRADLE_HOME=/opt/gradle/gradle-7.4.2; export PATH=${GRADLE_HOME}/bin:${PATH}. $ tail -1 ~/.bashrc; export PATH=$PATH:/opt/gradle/gradle-7.4.2/bin; $ source ~/.bashrc. ```. The plugin that is reported as missing in the error is in ; ```; [jalal@goku ~]$ find /opt/gradle -name ""gradle-plugins-7.4.2.jar""; /opt/gradle/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar; ```. Full log of `./gradlew clean jpackage --stacktrace`: https://pastebin.com/raw/RuuJnuTe. Full log of `./gradlew clean jpackage --debug`:; https://pastebin.com/raw/EPJs2jRR. Full log of `./gradlew clean jpackage --scan`:; https://pastebin.com/raw/TUGSM73K. [1]: https://qupath.readthedocs.io/en/latest/docs/reference/building.html. @saudet I decided to create a separate issue for the Stackoverflow post since building QuPath on CentOS 7 also fails (not just running its binary)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:2577,Testability,log,log,2577,"sb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd64. [jalal@goku downloads]$ cat /etc/profile.d/gradle.sh . export GRADLE_HOME=/opt/gradle/gradle-7.4.2; export PATH=${GRADLE_HOME}/bin:${PATH}. $ tail -1 ~/.bashrc; export PATH=$PATH:/opt/gradle/gradle-7.4.2/bin; $ source ~/.bashrc. ```. The plugin that is reported as missing in the error is in ; ```; [jalal@goku ~]$ find /opt/gradle -name ""gradle-plugins-7.4.2.jar""; /opt/gradle/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar; ```. Full log of `./gradlew clean jpackage --stacktrace`: https://pastebin.com/raw/RuuJnuTe. Full log of `./gradlew clean jpackage --debug`:; https://pastebin.com/raw/EPJs2jRR. Full log of `./gradlew clean jpackage --scan`:; https://pastebin.com/raw/TUGSM73K. [1]: https://qupath.readthedocs.io/en/latest/docs/reference/building.html. @saudet I decided to create a separate issue for the Stackoverflow post since building QuPath on CentOS 7 also fails (not just running its binary)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/issues/950:2661,Testability,log,log,2661,"sb_release -a; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core); Release:	7.9.2009; Codename:	Core; ```. also:; ```; $ java -version; openjdk version ""1.8.0_322""; OpenJDK Runtime Environment (build 1.8.0_322-b06); OpenJDK 64-Bit Server VM (build 25.322-b06, mixed mode); ```. I also don't understand why it is looking elsewhere than where I have zipped it and set the directory to it as in:; ```; [jalal@goku downloads]$ sudo vi /etc/profile.d/gradle.sh; [jalal@goku downloads]$ sudo chmod +x /etc/profile.d/gradle.sh; [jalal@goku downloads]$ source /etc/profile.d/gradle.sh; [jalal@goku downloads]$ gradle -v. ------------------------------------------------------------; Gradle 7.4.2; ------------------------------------------------------------. Build time: 2022-03-31 15:25:29 UTC; Revision: 540473b8118064efcc264694cbcaa4b677f61041. Kotlin: 1.5.31; Groovy: 3.0.9; Ant: Apache Ant(TM) version 1.10.11 compiled on July 10 2021; JVM: 1.8.0_322 (Red Hat, Inc. 25.322-b06); OS: Linux 3.10.0-1160.59.1.el7.x86_64 amd64. [jalal@goku downloads]$ cat /etc/profile.d/gradle.sh . export GRADLE_HOME=/opt/gradle/gradle-7.4.2; export PATH=${GRADLE_HOME}/bin:${PATH}. $ tail -1 ~/.bashrc; export PATH=$PATH:/opt/gradle/gradle-7.4.2/bin; $ source ~/.bashrc. ```. The plugin that is reported as missing in the error is in ; ```; [jalal@goku ~]$ find /opt/gradle -name ""gradle-plugins-7.4.2.jar""; /opt/gradle/gradle-7.4.2/lib/plugins/gradle-plugins-7.4.2.jar; ```. Full log of `./gradlew clean jpackage --stacktrace`: https://pastebin.com/raw/RuuJnuTe. Full log of `./gradlew clean jpackage --debug`:; https://pastebin.com/raw/EPJs2jRR. Full log of `./gradlew clean jpackage --scan`:; https://pastebin.com/raw/TUGSM73K. [1]: https://qupath.readthedocs.io/en/latest/docs/reference/building.html. @saudet I decided to create a separate issue for the Stackoverflow post since building QuPath on CentOS 7 also fails (not just running its binary)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/950
https://github.com/qupath/qupath/pull/953:99,Integrability,depend,dependency,99,See https://docs.gradle.org/current/userguide/platforms.html; This should be a step towards better dependency management. The aim is to make it easier for extension writers to ensure compatibility with any given QuPath version & its dependencies.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/953
https://github.com/qupath/qupath/pull/953:233,Integrability,depend,dependencies,233,See https://docs.gradle.org/current/userguide/platforms.html; This should be a step towards better dependency management. The aim is to make it easier for extension writers to ensure compatibility with any given QuPath version & its dependencies.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/953
https://github.com/qupath/qupath/pull/954:32,Availability,down,down,32,Initial suggestions from a drop-down menu when typing Ctrl+Space.; Limited to only static methods/fields and specified common classes.; Also assemble merged javadocs into a single jar.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/954
https://github.com/qupath/qupath/issues/955:154,Availability,avail,available,154,"When I clicked the ""Watch"" link under TMA CD3 analysis page, it says ""Video unavailable. This video is private"". When will the videos for TMA analysis be available? Thanks.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/955
https://github.com/qupath/qupath/issues/956:622,Security,access,accessed,622,"## Bug report. **Describe the bug**; Bio-Formats can support more ways of handling channels than QuPath can currently read.; Specifically, this includes multiple channels with multiple samples-per-pixel in each channel. The effective number of channels comes from adding all the samples across all the channels. This problem turned up with a polarised light scan in CZI format: https://forum.image.sc/t/qupath-cant-open-polarized-light-scans/65951. **To Reproduce**; Awkward... Can likely only be reproduced using an image where; ```; metadata.getChannelCount(series) < nChannels; ```; and where the extra channels can be accessed via `metadata.getChannelSamplesPerPixel(series, channelInd)`. **Expected behavior**; QuPath properly opens all channel combinations supported by Bio-Formats. **Desktop (please complete the following information):**; - OS: All; - QuPath Version v0.3.2 and all previous. **Additional context**; When this occurs, we could have mixed modes... like brightfield & something else. So a satisfying fix might require supporting multi-modal images.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/956
https://github.com/qupath/qupath/issues/957:119,Availability,error,errors,119,"## Bug report. **Describe the bug**; Memoization in Bio-Formats previously resulted in warnings, but these have become errors in Java 17. See https://github.com/ome/bioformats/issues/3659 for details. Because memoization can be used each time a reader is created, and the error is swallowed up before being propagated to QuPath, this can result in many long stack traces being printed in the log - with no straightforward way to control this on the QuPath side. **To Reproduce**; Try to open any whole slide image using Bio-Formats with memoization enabled.; Browse the image (to ensure multiple readers are requested) and check the log for errors as described in the linked issue. **Expected behavior**; Memoization works. Or, if it doesn't work, it at least fails more quietly. **Desktop (please complete the following information):**; - OS: All (presumably); - QuPath Version v0.4.0-SNAPSHOT (really depending upon whether Java 17+ is used). **Additional context**; This is a significant problem that needs fixed before QuPath v0.4.0.; The easiest approach would be to turn off memoization altogether, but sometimes it is really beneficial.; So we need a way to turn it off only when really necessary.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/957
https://github.com/qupath/qupath/issues/957:272,Availability,error,error,272,"## Bug report. **Describe the bug**; Memoization in Bio-Formats previously resulted in warnings, but these have become errors in Java 17. See https://github.com/ome/bioformats/issues/3659 for details. Because memoization can be used each time a reader is created, and the error is swallowed up before being propagated to QuPath, this can result in many long stack traces being printed in the log - with no straightforward way to control this on the QuPath side. **To Reproduce**; Try to open any whole slide image using Bio-Formats with memoization enabled.; Browse the image (to ensure multiple readers are requested) and check the log for errors as described in the linked issue. **Expected behavior**; Memoization works. Or, if it doesn't work, it at least fails more quietly. **Desktop (please complete the following information):**; - OS: All (presumably); - QuPath Version v0.4.0-SNAPSHOT (really depending upon whether Java 17+ is used). **Additional context**; This is a significant problem that needs fixed before QuPath v0.4.0.; The easiest approach would be to turn off memoization altogether, but sometimes it is really beneficial.; So we need a way to turn it off only when really necessary.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/957
https://github.com/qupath/qupath/issues/957:641,Availability,error,errors,641,"## Bug report. **Describe the bug**; Memoization in Bio-Formats previously resulted in warnings, but these have become errors in Java 17. See https://github.com/ome/bioformats/issues/3659 for details. Because memoization can be used each time a reader is created, and the error is swallowed up before being propagated to QuPath, this can result in many long stack traces being printed in the log - with no straightforward way to control this on the QuPath side. **To Reproduce**; Try to open any whole slide image using Bio-Formats with memoization enabled.; Browse the image (to ensure multiple readers are requested) and check the log for errors as described in the linked issue. **Expected behavior**; Memoization works. Or, if it doesn't work, it at least fails more quietly. **Desktop (please complete the following information):**; - OS: All (presumably); - QuPath Version v0.4.0-SNAPSHOT (really depending upon whether Java 17+ is used). **Additional context**; This is a significant problem that needs fixed before QuPath v0.4.0.; The easiest approach would be to turn off memoization altogether, but sometimes it is really beneficial.; So we need a way to turn it off only when really necessary.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/957
https://github.com/qupath/qupath/issues/957:903,Integrability,depend,depending,903,"## Bug report. **Describe the bug**; Memoization in Bio-Formats previously resulted in warnings, but these have become errors in Java 17. See https://github.com/ome/bioformats/issues/3659 for details. Because memoization can be used each time a reader is created, and the error is swallowed up before being propagated to QuPath, this can result in many long stack traces being printed in the log - with no straightforward way to control this on the QuPath side. **To Reproduce**; Try to open any whole slide image using Bio-Formats with memoization enabled.; Browse the image (to ensure multiple readers are requested) and check the log for errors as described in the linked issue. **Expected behavior**; Memoization works. Or, if it doesn't work, it at least fails more quietly. **Desktop (please complete the following information):**; - OS: All (presumably); - QuPath Version v0.4.0-SNAPSHOT (really depending upon whether Java 17+ is used). **Additional context**; This is a significant problem that needs fixed before QuPath v0.4.0.; The easiest approach would be to turn off memoization altogether, but sometimes it is really beneficial.; So we need a way to turn it off only when really necessary.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/957
https://github.com/qupath/qupath/issues/957:392,Testability,log,log,392,"## Bug report. **Describe the bug**; Memoization in Bio-Formats previously resulted in warnings, but these have become errors in Java 17. See https://github.com/ome/bioformats/issues/3659 for details. Because memoization can be used each time a reader is created, and the error is swallowed up before being propagated to QuPath, this can result in many long stack traces being printed in the log - with no straightforward way to control this on the QuPath side. **To Reproduce**; Try to open any whole slide image using Bio-Formats with memoization enabled.; Browse the image (to ensure multiple readers are requested) and check the log for errors as described in the linked issue. **Expected behavior**; Memoization works. Or, if it doesn't work, it at least fails more quietly. **Desktop (please complete the following information):**; - OS: All (presumably); - QuPath Version v0.4.0-SNAPSHOT (really depending upon whether Java 17+ is used). **Additional context**; This is a significant problem that needs fixed before QuPath v0.4.0.; The easiest approach would be to turn off memoization altogether, but sometimes it is really beneficial.; So we need a way to turn it off only when really necessary.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/957
https://github.com/qupath/qupath/issues/957:633,Testability,log,log,633,"## Bug report. **Describe the bug**; Memoization in Bio-Formats previously resulted in warnings, but these have become errors in Java 17. See https://github.com/ome/bioformats/issues/3659 for details. Because memoization can be used each time a reader is created, and the error is swallowed up before being propagated to QuPath, this can result in many long stack traces being printed in the log - with no straightforward way to control this on the QuPath side. **To Reproduce**; Try to open any whole slide image using Bio-Formats with memoization enabled.; Browse the image (to ensure multiple readers are requested) and check the log for errors as described in the linked issue. **Expected behavior**; Memoization works. Or, if it doesn't work, it at least fails more quietly. **Desktop (please complete the following information):**; - OS: All (presumably); - QuPath Version v0.4.0-SNAPSHOT (really depending upon whether Java 17+ is used). **Additional context**; This is a significant problem that needs fixed before QuPath v0.4.0.; The easiest approach would be to turn off memoization altogether, but sometimes it is really beneficial.; So we need a way to turn it off only when really necessary.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/957
https://github.com/qupath/qupath/pull/958:279,Availability,error,errors,279,"* Update to Bio-Formats 6.9.1; * Fix https://github.com/qupath/qupath/issues/956; * Work around https://github.com/qupath/qupath/issues/957. Memoization will need to be revisited in the future. Here, it is disabled when using using Java 17+ because it doesn't work and logs many errors (somehow related to JEP 403). This behavior can be overridden by adding; ```; java-options=-Dqupath.bioformats.allow.memoization=true; ```; to the QuPath.cfg file (i.e. set the system property), but it likely won't help until there is a new Bio-Formats release. Relatedly, the qupath-app build.gradle now only adds `--illegal-access=permit` for Java 16, since it's the only version where it makes a difference. The easiest way to get QuPath with memoization is therefore to use; ```; gradlew jpackage -Ptoolchain=16; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/958
https://github.com/qupath/qupath/pull/958:2,Deployability,Update,Update,2,"* Update to Bio-Formats 6.9.1; * Fix https://github.com/qupath/qupath/issues/956; * Work around https://github.com/qupath/qupath/issues/957. Memoization will need to be revisited in the future. Here, it is disabled when using using Java 17+ because it doesn't work and logs many errors (somehow related to JEP 403). This behavior can be overridden by adding; ```; java-options=-Dqupath.bioformats.allow.memoization=true; ```; to the QuPath.cfg file (i.e. set the system property), but it likely won't help until there is a new Bio-Formats release. Relatedly, the qupath-app build.gradle now only adds `--illegal-access=permit` for Java 16, since it's the only version where it makes a difference. The easiest way to get QuPath with memoization is therefore to use; ```; gradlew jpackage -Ptoolchain=16; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/958
https://github.com/qupath/qupath/pull/958:539,Deployability,release,release,539,"* Update to Bio-Formats 6.9.1; * Fix https://github.com/qupath/qupath/issues/956; * Work around https://github.com/qupath/qupath/issues/957. Memoization will need to be revisited in the future. Here, it is disabled when using using Java 17+ because it doesn't work and logs many errors (somehow related to JEP 403). This behavior can be overridden by adding; ```; java-options=-Dqupath.bioformats.allow.memoization=true; ```; to the QuPath.cfg file (i.e. set the system property), but it likely won't help until there is a new Bio-Formats release. Relatedly, the qupath-app build.gradle now only adds `--illegal-access=permit` for Java 16, since it's the only version where it makes a difference. The easiest way to get QuPath with memoization is therefore to use; ```; gradlew jpackage -Ptoolchain=16; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/958
https://github.com/qupath/qupath/pull/958:612,Security,access,access,612,"* Update to Bio-Formats 6.9.1; * Fix https://github.com/qupath/qupath/issues/956; * Work around https://github.com/qupath/qupath/issues/957. Memoization will need to be revisited in the future. Here, it is disabled when using using Java 17+ because it doesn't work and logs many errors (somehow related to JEP 403). This behavior can be overridden by adding; ```; java-options=-Dqupath.bioformats.allow.memoization=true; ```; to the QuPath.cfg file (i.e. set the system property), but it likely won't help until there is a new Bio-Formats release. Relatedly, the qupath-app build.gradle now only adds `--illegal-access=permit` for Java 16, since it's the only version where it makes a difference. The easiest way to get QuPath with memoization is therefore to use; ```; gradlew jpackage -Ptoolchain=16; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/958
https://github.com/qupath/qupath/pull/958:269,Testability,log,logs,269,"* Update to Bio-Formats 6.9.1; * Fix https://github.com/qupath/qupath/issues/956; * Work around https://github.com/qupath/qupath/issues/957. Memoization will need to be revisited in the future. Here, it is disabled when using using Java 17+ because it doesn't work and logs many errors (somehow related to JEP 403). This behavior can be overridden by adding; ```; java-options=-Dqupath.bioformats.allow.memoization=true; ```; to the QuPath.cfg file (i.e. set the system property), but it likely won't help until there is a new Bio-Formats release. Relatedly, the qupath-app build.gradle now only adds `--illegal-access=permit` for Java 16, since it's the only version where it makes a difference. The easiest way to get QuPath with memoization is therefore to use; ```; gradlew jpackage -Ptoolchain=16; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/958
https://github.com/qupath/qupath/pull/959:438,Deployability,release,release,438,"This is a fairly major change to incorporate IDs for objects. The purpose is to make it much easier to match up objects whenever some further analysis is done elsewhere (e.g. classification or clustering in Python). I've attempted to ensure both forwards and backwards compatibility by storing the ID in the metadata map. This is somewhat inefficient, but means that data files can be reopened in earlier QuPath versions. A future QuPath release might change this to a more efficient representation.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/959
https://github.com/qupath/qupath/pull/959:474,Energy Efficiency,efficient,efficient,474,"This is a fairly major change to incorporate IDs for objects. The purpose is to make it much easier to match up objects whenever some further analysis is done elsewhere (e.g. classification or clustering in Python). I've attempted to ensure both forwards and backwards compatibility by storing the ID in the metadata map. This is somewhat inefficient, but means that data files can be reopened in earlier QuPath versions. A future QuPath release might change this to a more efficient representation.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/959
https://github.com/qupath/qupath/issues/961:1657,Availability,down,downsampling,1657,"com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV as a dependency of `qupath-core` showed up when testing on a M1 Mac: it meant *nothing* would work until OpenCV had compatible binaries. It does now, but that flagged the issue of OpenCV being dragged into pretty much everything. Removing it would mean that the core module - and therefore most serializable datastructures - depend upon *only* Java code. This could help in making it accessible elsewhere, e.g. from Python or R.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:1280,Deployability,update,updates,1280,"dent native libraries, in a way that potentially makes `qupath-core` *much* heavier that it would otherwise be. ## Usage. There are really only two places where OpenCV is used in `qupath-core`:. * [Image resizing](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV as a dependency of `qupath-core` showed up when testing on a M1 Mac: it meant *nothing* would work until OpenCV had compatible binaries. It does now, but that flagged the issue of OpenCV being dragge",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:546,Energy Efficiency,adapt,adaptors,546,"## Design issue. **Describe the bug**; `qupath-core` doesn't - and shouldn't have many dependencies. However, it *does* currently have a dependency on OpenCV. This brings in JavaCPP and platform-dependent native libraries, in a way that potentially makes `qupath-core` *much* heavier that it would otherwise be. ## Usage. There are really only two places where OpenCV is used in `qupath-core`:. * [Image resizing](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:716,Energy Efficiency,adapt,adaptors,716,"## Design issue. **Describe the bug**; `qupath-core` doesn't - and shouldn't have many dependencies. However, it *does* currently have a dependency on OpenCV. This brings in JavaCPP and platform-dependent native libraries, in a way that potentially makes `qupath-core` *much* heavier that it would otherwise be. ## Usage. There are really only two places where OpenCV is used in `qupath-core`:. * [Image resizing](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:87,Integrability,depend,dependencies,87,"## Design issue. **Describe the bug**; `qupath-core` doesn't - and shouldn't have many dependencies. However, it *does* currently have a dependency on OpenCV. This brings in JavaCPP and platform-dependent native libraries, in a way that potentially makes `qupath-core` *much* heavier that it would otherwise be. ## Usage. There are really only two places where OpenCV is used in `qupath-core`:. * [Image resizing](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:137,Integrability,depend,dependency,137,"## Design issue. **Describe the bug**; `qupath-core` doesn't - and shouldn't have many dependencies. However, it *does* currently have a dependency on OpenCV. This brings in JavaCPP and platform-dependent native libraries, in a way that potentially makes `qupath-core` *much* heavier that it would otherwise be. ## Usage. There are really only two places where OpenCV is used in `qupath-core`:. * [Image resizing](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:195,Integrability,depend,dependent,195,"## Design issue. **Describe the bug**; `qupath-core` doesn't - and shouldn't have many dependencies. However, it *does* currently have a dependency on OpenCV. This brings in JavaCPP and platform-dependent native libraries, in a way that potentially makes `qupath-core` *much* heavier that it would otherwise be. ## Usage. There are really only two places where OpenCV is used in `qupath-core`:. * [Image resizing](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:931,Integrability,message,message,931,"## Design issue. **Describe the bug**; `qupath-core` doesn't - and shouldn't have many dependencies. However, it *does* currently have a dependency on OpenCV. This brings in JavaCPP and platform-dependent native libraries, in a way that potentially makes `qupath-core` *much* heavier that it would otherwise be. ## Usage. There are really only two places where OpenCV is used in `qupath-core`:. * [Image resizing](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:1163,Integrability,depend,dependency,1163,"dent native libraries, in a way that potentially makes `qupath-core` *much* heavier that it would otherwise be. ## Usage. There are really only two places where OpenCV is used in `qupath-core`:. * [Image resizing](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV as a dependency of `qupath-core` showed up when testing on a M1 Mac: it meant *nothing* would work until OpenCV had compatible binaries. It does now, but that flagged the issue of OpenCV being dragge",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:1269,Integrability,depend,dependency,1269,"dent native libraries, in a way that potentially makes `qupath-core` *much* heavier that it would otherwise be. ## Usage. There are really only two places where OpenCV is used in `qupath-core`:. * [Image resizing](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV as a dependency of `qupath-core` showed up when testing on a M1 Mac: it meant *nothing* would work until OpenCV had compatible binaries. It does now, but that flagged the issue of OpenCV being dragge",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:2006,Integrability,depend,dependency,2006,"com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV as a dependency of `qupath-core` showed up when testing on a M1 Mac: it meant *nothing* would work until OpenCV had compatible binaries. It does now, but that flagged the issue of OpenCV being dragged into pretty much everything. Removing it would mean that the core module - and therefore most serializable datastructures - depend upon *only* Java code. This could help in making it accessible elsewhere, e.g. from Python or R.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:2326,Integrability,depend,depend,2326,"com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV as a dependency of `qupath-core` showed up when testing on a M1 Mac: it meant *nothing* would work until OpenCV had compatible binaries. It does now, but that flagged the issue of OpenCV being dragged into pretty much everything. Removing it would mean that the core module - and therefore most serializable datastructures - depend upon *only* Java code. This could help in making it accessible elsewhere, e.g. from Python or R.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:546,Modifiability,adapt,adaptors,546,"## Design issue. **Describe the bug**; `qupath-core` doesn't - and shouldn't have many dependencies. However, it *does* currently have a dependency on OpenCV. This brings in JavaCPP and platform-dependent native libraries, in a way that potentially makes `qupath-core` *much* heavier that it would otherwise be. ## Usage. There are really only two places where OpenCV is used in `qupath-core`:. * [Image resizing](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:716,Modifiability,adapt,adaptors,716,"## Design issue. **Describe the bug**; `qupath-core` doesn't - and shouldn't have many dependencies. However, it *does* currently have a dependency on OpenCV. This brings in JavaCPP and platform-dependent native libraries, in a way that potentially makes `qupath-core` *much* heavier that it would otherwise be. ## Usage. There are really only two places where OpenCV is used in `qupath-core`:. * [Image resizing](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:1403,Performance,perform,performed,1403,"ps://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV as a dependency of `qupath-core` showed up when testing on a M1 Mac: it meant *nothing* would work until OpenCV had compatible binaries. It does now, but that flagged the issue of OpenCV being dragged into pretty much everything. Removing it would mean that the core module - and therefore most serializable datastructures - depend upon *only* Java code. This could help in making it accessible elsewhere, e.g. from P",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:2385,Security,access,accessible,2385,"com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV as a dependency of `qupath-core` showed up when testing on a M1 Mac: it meant *nothing* would work until OpenCV had compatible binaries. It does now, but that flagged the issue of OpenCV being dragged into pretty much everything. Removing it would mean that the core module - and therefore most serializable datastructures - depend upon *only* Java code. This could help in making it accessible elsewhere, e.g. from Python or R.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:1361,Testability,test,tests,1361," are really only two places where OpenCV is used in `qupath-core`:. * [Image resizing](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV as a dependency of `qupath-core` showed up when testing on a M1 Mac: it meant *nothing* would work until OpenCV had compatible binaries. It does now, but that flagged the issue of OpenCV being dragged into pretty much everything. Removing it would mean that the core module - and therefore most serializable datastructures - de",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/issues/961:2049,Testability,test,testing,2049,"com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416); * [Type adaptors for Gson](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/io/OpenCVTypeAdapters.java). ## Required change. I think (hope) type adaptors can be shifted to `qupath-core-processing` without too much trouble.; Although since the change was introduced in https://github.com/qupath/qupath/commit/0f0229fc1a6de6312bf3a2e914e9da79cf1f4bd9 the commit message hints that there was a reason to including it in `qupath-core` that might resurface in the future. I expect that the main effort would go into reimplementing image resizing. Ideally, we'd do this without introducing any new dependency (including ImageJ) to retain full control over the code and not have it subject to change with dependency updates. I expect that will be a very fiddly task, requiring some very good unit tests. ## Additional context. Resizing is performed whenever tiles are requested, e.g. https://github.com/qupath/qupath/blob/48dfb82400fb8289fa57242b08effe1977749a51/qupath-core/src/main/java/qupath/lib/images/servers/AbstractTileableImageServer.java#L436-L442. In this case, it is almost always downsampling. We need to support both a 'smooth' and a 'nearest neighbor' implementation, to handle intensity and labeled/binary images at least - although we **might** want to introduce more interpolation options. See also https://github.com/qupath/2022-qupath-hackathon/discussions/2#discussioncomment-2634192. ## Significance. Having OpenCV as a dependency of `qupath-core` showed up when testing on a M1 Mac: it meant *nothing* would work until OpenCV had compatible binaries. It does now, but that flagged the issue of OpenCV being dragged into pretty much everything. Removing it would mean that the core module - and therefore most serializable datastructures - depend upon *only* Java code. This could help in making it accessible elsewhere, e.g. from Python or R.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/961
https://github.com/qupath/qupath/pull/963:67,Availability,down,downloading,67,Try to resolve issue with mergedJavadocs (at least on Windows) and downloading an unnecessary toolchain,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/963
https://github.com/qupath/qupath/pull/965:148,Integrability,depend,depending,148,"* Fix bug in autocompleting static methods (where the start text could be duplicated).; * Improve caret positioning after completing a method name, depending upon whether the method takes arguments or not",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/965
https://github.com/qupath/qupath/issues/967:224,Performance,load,load,224,"**Describe the bug**; Used vips 8.11 to produce tiled tiff pyramid image with jpeg compression. QuPath 0.3.2 won’t open it and says the image file is not a tiled pyramid. Changed my image file extension to .svs, QuPath will load it but shows a blank (black) window. Checked with tiffinfo that my image file is indeed tiled pyramid image with jpeg compression. Feel confused QuPath does open Aperio SVS files with jpeg compression but won’t open vips produced tiled tiff pyramid files with jpeg compression. **Desktop (please complete the following information):**; - OS: macOS; - QuPath Version 0.3.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/967
https://github.com/qupath/qupath/issues/968:379,Availability,down,down,379,"Hi I am processing around 55 images in qupath they are all composite tiffs, which have all been compiled using the bioformats importer in imagej, so in theory they should all be the same type of image. they are about 2,000,000 KB each. At around image 30, every so often I would add an image and it would be image null. When this happens everything crashes. It is really slowing down the whole process! Any help would be appreciated",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/968
https://github.com/qupath/qupath/issues/969:122,Usability,learn,learning,122,Hello everyone! Do you possibly know if I can do multiple annotations on a pixel via QuPath? I am currently using machine learning procedure for my classifications. But what can I do if a specific area is two things (e.g. a cell on a vessel) and I want the area etc. measurements of both of them?; ![Στιγμιότυπο οθόνης 2022-05-21 170202](https://user-images.githubusercontent.com/105979314/169829073-5495bac3-8e1d-419b-a85d-c5b7f2be0473.png),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/969
https://github.com/qupath/qupath/pull/970:170,Availability,error,errors,170,"Reformat code for consistency & readability, and include source with gradle wrapper.; Resolve (hopefully) some issues with task ordering and output directories to reduce errors and issues that occur with parallel builds.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/970
https://github.com/qupath/qupath/pull/970:163,Energy Efficiency,reduce,reduce,163,"Reformat code for consistency & readability, and include source with gradle wrapper.; Resolve (hopefully) some issues with task ordering and output directories to reduce errors and issues that occur with parallel builds.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/970
https://github.com/qupath/qupath/pull/970:76,Integrability,wrap,wrapper,76,"Reformat code for consistency & readability, and include source with gradle wrapper.; Resolve (hopefully) some issues with task ordering and output directories to reduce errors and issues that occur with parallel builds.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/970
https://github.com/qupath/qupath/pull/971:366,Deployability,update,update,366,"* Support better serialization/deserialization of objects to Strings via PathPrefs - including with JSON.; * Add PathPrefs.dumpPreferences() and PathPreds.importPreferences(String) methods; * Move locale to preferences & away from startup dialog (aim being to replace startup dialog entirely); * Support setting different locale categories, and try to automatically update the UI (lists, tables) accordingly; * Better protect QuPathGUI.getAvailablePathClasses() from invalid modifications (via a ChangeListener that removes duplicates/nulls quickly)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/971
https://github.com/qupath/qupath/issues/973:250,Availability,avail,available,250,"BUG:. WSI image will pixelate when trying to access deeper levels of magnification. Tested the soft in two different Macs with the same OS and the same happens. . To reproduce:. 1- Select Open and then the WSI image in .tif format.; 2- Two files are available: Image and the Mask. Select the Image and select Open.; 3- A dialogue will appear to select type of Image: select bright filed H&E; 4- Scroll with the mouse to activate zoom or with right-click, select display and then different levels of zoom. . Expected behavior; With the scroll, zoom should access higher levels of magnification and the image should not be pixelated. Cells must be able to be seen. . Desktop; MACOS Monterey 12.4, 2GHZ Core i5 (2 cores), 8GB 1867 MHZ DDR3, Intel iris 540 1036 MB; QuPath version 0.3.2, Max memory JVM may try to use: 4096 MB. ![DD0F3384-7024-455E-98AC-3916959D9B95](https://user-images.githubusercontent.com/53937441/170973697-316e32c0-6f1f-4de1-9d3e-d6a6134a34e3.jpeg)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/973
https://github.com/qupath/qupath/issues/973:275,Availability,Mask,Mask,275,"BUG:. WSI image will pixelate when trying to access deeper levels of magnification. Tested the soft in two different Macs with the same OS and the same happens. . To reproduce:. 1- Select Open and then the WSI image in .tif format.; 2- Two files are available: Image and the Mask. Select the Image and select Open.; 3- A dialogue will appear to select type of Image: select bright filed H&E; 4- Scroll with the mouse to activate zoom or with right-click, select display and then different levels of zoom. . Expected behavior; With the scroll, zoom should access higher levels of magnification and the image should not be pixelated. Cells must be able to be seen. . Desktop; MACOS Monterey 12.4, 2GHZ Core i5 (2 cores), 8GB 1867 MHZ DDR3, Intel iris 540 1036 MB; QuPath version 0.3.2, Max memory JVM may try to use: 4096 MB. ![DD0F3384-7024-455E-98AC-3916959D9B95](https://user-images.githubusercontent.com/53937441/170973697-316e32c0-6f1f-4de1-9d3e-d6a6134a34e3.jpeg)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/973
https://github.com/qupath/qupath/issues/973:45,Security,access,access,45,"BUG:. WSI image will pixelate when trying to access deeper levels of magnification. Tested the soft in two different Macs with the same OS and the same happens. . To reproduce:. 1- Select Open and then the WSI image in .tif format.; 2- Two files are available: Image and the Mask. Select the Image and select Open.; 3- A dialogue will appear to select type of Image: select bright filed H&E; 4- Scroll with the mouse to activate zoom or with right-click, select display and then different levels of zoom. . Expected behavior; With the scroll, zoom should access higher levels of magnification and the image should not be pixelated. Cells must be able to be seen. . Desktop; MACOS Monterey 12.4, 2GHZ Core i5 (2 cores), 8GB 1867 MHZ DDR3, Intel iris 540 1036 MB; QuPath version 0.3.2, Max memory JVM may try to use: 4096 MB. ![DD0F3384-7024-455E-98AC-3916959D9B95](https://user-images.githubusercontent.com/53937441/170973697-316e32c0-6f1f-4de1-9d3e-d6a6134a34e3.jpeg)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/973
https://github.com/qupath/qupath/issues/973:555,Security,access,access,555,"BUG:. WSI image will pixelate when trying to access deeper levels of magnification. Tested the soft in two different Macs with the same OS and the same happens. . To reproduce:. 1- Select Open and then the WSI image in .tif format.; 2- Two files are available: Image and the Mask. Select the Image and select Open.; 3- A dialogue will appear to select type of Image: select bright filed H&E; 4- Scroll with the mouse to activate zoom or with right-click, select display and then different levels of zoom. . Expected behavior; With the scroll, zoom should access higher levels of magnification and the image should not be pixelated. Cells must be able to be seen. . Desktop; MACOS Monterey 12.4, 2GHZ Core i5 (2 cores), 8GB 1867 MHZ DDR3, Intel iris 540 1036 MB; QuPath version 0.3.2, Max memory JVM may try to use: 4096 MB. ![DD0F3384-7024-455E-98AC-3916959D9B95](https://user-images.githubusercontent.com/53937441/170973697-316e32c0-6f1f-4de1-9d3e-d6a6134a34e3.jpeg)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/973
https://github.com/qupath/qupath/issues/973:84,Testability,Test,Tested,84,"BUG:. WSI image will pixelate when trying to access deeper levels of magnification. Tested the soft in two different Macs with the same OS and the same happens. . To reproduce:. 1- Select Open and then the WSI image in .tif format.; 2- Two files are available: Image and the Mask. Select the Image and select Open.; 3- A dialogue will appear to select type of Image: select bright filed H&E; 4- Scroll with the mouse to activate zoom or with right-click, select display and then different levels of zoom. . Expected behavior; With the scroll, zoom should access higher levels of magnification and the image should not be pixelated. Cells must be able to be seen. . Desktop; MACOS Monterey 12.4, 2GHZ Core i5 (2 cores), 8GB 1867 MHZ DDR3, Intel iris 540 1036 MB; QuPath version 0.3.2, Max memory JVM may try to use: 4096 MB. ![DD0F3384-7024-455E-98AC-3916959D9B95](https://user-images.githubusercontent.com/53937441/170973697-316e32c0-6f1f-4de1-9d3e-d6a6134a34e3.jpeg)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/973
https://github.com/qupath/qupath/issues/974:557,Availability,error,errors,557,"## Bug report. **Describe the bug**; In v0.2 and v0.3, [`BufferedImageTools.resize()`](https://github.com/qupath/qupath/blob/71884c60c1988d753e60a487ebb711c98ad6ad6c/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416) internally uses OpenCV with a 32-bit float image, then copies the pixels back using `WritableRaster.setSamples(0, 0, width, height, band, floatArray);`. It turns out that setting the samples for an integer image implicitly casts/floors the pixel values. Furthermore, OpenCV's resizing can exhibit small precision errors *even for entirely constant images* when using area averaging. Consequently, when resizing an integer image, pixels with an output slightly below the 'correct' value can sometimes become rounded down to the value below. This is unlikely to make any obvious difference in most cases, but it can be a significant problem when exporting a labeled image. Specifically, @SalmaDammak spotted that this impacts the `TileExporter` when using labeled images with resizing, causing some pixels to have the wrong labels in some cases (see https://github.com/qupath/qupath/pull/964). This effect shouldn't be seen when using nearest neighbor interpolation with OpenCV, as controlled by the boolean parameter to the `BufferedImageTools.resize` method. However, the `TileExporter` requests smooth interpolation - even though it shouldn't for labeled images (see [here](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/images/writers/TileExporter.java#L870)). Therefore, there are two related issues:; * the behavior of `resize` needs to be improved to avoid the flooring error; * the `TileExporter` should switch to nearest neighbor resizing for labeled images. **To Reproduce**; The resizing issue can be reproduced without relying on the `TileExporter` class by running the following script:. ```groovy; import java.awt.image.BufferedImage; import java.awt.Color. // Create an image with a constant value; def img = ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/974
https://github.com/qupath/qupath/issues/974:759,Availability,down,down,759,"## Bug report. **Describe the bug**; In v0.2 and v0.3, [`BufferedImageTools.resize()`](https://github.com/qupath/qupath/blob/71884c60c1988d753e60a487ebb711c98ad6ad6c/qupath-core/src/main/java/qupath/lib/awt/common/BufferedImageTools.java#L416) internally uses OpenCV with a 32-bit float image, then copies the pixels back using `WritableRaster.setSamples(0, 0, width, height, band, floatArray);`. It turns out that setting the samples for an integer image implicitly casts/floors the pixel values. Furthermore, OpenCV's resizing can exhibit small precision errors *even for entirely constant images* when using area averaging. Consequently, when resizing an integer image, pixels with an output slightly below the 'correct' value can sometimes become rounded down to the value below. This is unlikely to make any obvious difference in most cases, but it can be a significant problem when exporting a labeled image. Specifically, @SalmaDammak spotted that this impacts the `TileExporter` when using labeled images with resizing, causing some pixels to have the wrong labels in some cases (see https://github.com/qupath/qupath/pull/964). This effect shouldn't be seen when using nearest neighbor interpolation with OpenCV, as controlled by the boolean parameter to the `BufferedImageTools.resize` method. However, the `TileExporter` requests smooth interpolation - even though it shouldn't for labeled images (see [here](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/images/writers/TileExporter.java#L870)). Therefore, there are two related issues:; * the behavior of `resize` needs to be improved to avoid the flooring error; * the `TileExporter` should switch to nearest neighbor resizing for labeled images. **To Reproduce**; The resizing issue can be reproduced without relying on the `TileExporter` class by running the following script:. ```groovy; import java.awt.image.BufferedImage; import java.awt.Color. // Create an image with a constant value; def img = ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/974
https://github.com/qupath/qupath/issues/974:1654,Availability,error,error,1654,"hen resizing an integer image, pixels with an output slightly below the 'correct' value can sometimes become rounded down to the value below. This is unlikely to make any obvious difference in most cases, but it can be a significant problem when exporting a labeled image. Specifically, @SalmaDammak spotted that this impacts the `TileExporter` when using labeled images with resizing, causing some pixels to have the wrong labels in some cases (see https://github.com/qupath/qupath/pull/964). This effect shouldn't be seen when using nearest neighbor interpolation with OpenCV, as controlled by the boolean parameter to the `BufferedImageTools.resize` method. However, the `TileExporter` requests smooth interpolation - even though it shouldn't for labeled images (see [here](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/images/writers/TileExporter.java#L870)). Therefore, there are two related issues:; * the behavior of `resize` needs to be improved to avoid the flooring error; * the `TileExporter` should switch to nearest neighbor resizing for labeled images. **To Reproduce**; The resizing issue can be reproduced without relying on the `TileExporter` class by running the following script:. ```groovy; import java.awt.image.BufferedImage; import java.awt.Color. // Create an image with a constant value; def img = new BufferedImage(150, 150, BufferedImage.TYPE_BYTE_GRAY); def g2d = img.createGraphics(); g2d.setColor(new Color(5, 5, 5)); g2d.fillRect(0, 0, img.getWidth(), img.getHeight()); g2d.dispose(). // Resize the image; def imgResized = BufferedImageTools.resize(img, img.getWidth()-1, img.getHeight()-1, true). // Show using ImageJ; def imp = IJTools.convertToUncalibratedImagePlus(""Original"", img); def impResized = IJTools.convertToUncalibratedImagePlus(""Resized"", imgResized); imp.show(); impResized.show(); ```. **Expected behavior**; The script above should show two images, with the pixel value of 5 everywhere. What is actually seen is this",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/974
https://github.com/qupath/qupath/issues/974:3169,Integrability,depend,dependency,3169,"resize` method. However, the `TileExporter` requests smooth interpolation - even though it shouldn't for labeled images (see [here](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/images/writers/TileExporter.java#L870)). Therefore, there are two related issues:; * the behavior of `resize` needs to be improved to avoid the flooring error; * the `TileExporter` should switch to nearest neighbor resizing for labeled images. **To Reproduce**; The resizing issue can be reproduced without relying on the `TileExporter` class by running the following script:. ```groovy; import java.awt.image.BufferedImage; import java.awt.Color. // Create an image with a constant value; def img = new BufferedImage(150, 150, BufferedImage.TYPE_BYTE_GRAY); def g2d = img.createGraphics(); g2d.setColor(new Color(5, 5, 5)); g2d.fillRect(0, 0, img.getWidth(), img.getHeight()); g2d.dispose(). // Resize the image; def imgResized = BufferedImageTools.resize(img, img.getWidth()-1, img.getHeight()-1, true). // Show using ImageJ; def imp = IJTools.convertToUncalibratedImagePlus(""Original"", img); def impResized = IJTools.convertToUncalibratedImagePlus(""Resized"", imgResized); imp.show(); impResized.show(); ```. **Expected behavior**; The script above should show two images, with the pixel value of 5 everywhere. What is actually seen is this:. *Original (all 5)*; ![Screenshot 2022-05-31 at 10 40 51](https://user-images.githubusercontent.com/4690904/171147342-557521f7-f411-47fa-8f65-15821e4e1c96.png). *Resized (5, with dark lines 4)*; ![Screenshot 2022-05-31 at 10 42 00](https://user-images.githubusercontent.com/4690904/171147327-b887c423-6b8e-4232-a8cb-4a95131d8b2a.png). **Desktop (please complete the following information):**; - OS: All; - QuPath Version 0.3 (confirmed), 0.2 (potentially). **Additional context**; OpenCV via JavaCPP is a really heavyweight dependency for `qupath-core`; ideally, this would be removed entirely. See https://github.com/qupath/qupath/issues/961",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/974
https://github.com/qupath/qupath/issues/974:1635,Safety,avoid,avoid,1635,"hen resizing an integer image, pixels with an output slightly below the 'correct' value can sometimes become rounded down to the value below. This is unlikely to make any obvious difference in most cases, but it can be a significant problem when exporting a labeled image. Specifically, @SalmaDammak spotted that this impacts the `TileExporter` when using labeled images with resizing, causing some pixels to have the wrong labels in some cases (see https://github.com/qupath/qupath/pull/964). This effect shouldn't be seen when using nearest neighbor interpolation with OpenCV, as controlled by the boolean parameter to the `BufferedImageTools.resize` method. However, the `TileExporter` requests smooth interpolation - even though it shouldn't for labeled images (see [here](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/images/writers/TileExporter.java#L870)). Therefore, there are two related issues:; * the behavior of `resize` needs to be improved to avoid the flooring error; * the `TileExporter` should switch to nearest neighbor resizing for labeled images. **To Reproduce**; The resizing issue can be reproduced without relying on the `TileExporter` class by running the following script:. ```groovy; import java.awt.image.BufferedImage; import java.awt.Color. // Create an image with a constant value; def img = new BufferedImage(150, 150, BufferedImage.TYPE_BYTE_GRAY); def g2d = img.createGraphics(); g2d.setColor(new Color(5, 5, 5)); g2d.fillRect(0, 0, img.getWidth(), img.getHeight()); g2d.dispose(). // Resize the image; def imgResized = BufferedImageTools.resize(img, img.getWidth()-1, img.getHeight()-1, true). // Show using ImageJ; def imp = IJTools.convertToUncalibratedImagePlus(""Original"", img); def impResized = IJTools.convertToUncalibratedImagePlus(""Resized"", imgResized); imp.show(); impResized.show(); ```. **Expected behavior**; The script above should show two images, with the pixel value of 5 everywhere. What is actually seen is this",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/974
https://github.com/qupath/qupath/pull/975:67,Testability,test,test,67,Fixes https://github.com/qupath/qupath/issues/974 and includes new test (alongside updating old ones).,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/975
https://github.com/qupath/qupath/issues/980:219,Availability,avail,available,219,"## Bug report. **Describe the bug**; At the hackathon (I think) it came up that the channel viewer is much too busy for RGB images... making it less useful that it might otherwise be. The problem is that it shows *all* available channel transforms, rather than just the ones that are likely to be relevant or interesting. > Sidenote: in generating the screenshot here, it looks like the viewer panes aren't all the same size... as they ought to be. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an RGB image; 2. Choose *View &rarr; Mini viewers... &rarr; Show channel viewer*. **Expected behavior**; Show fewer channels by default. If stains are available, this could be the color deconvolve channels; otherwise, it could be the split RGB information. Furthermore, we should either:; * Make it possible to show all channels using a preference; * Make it possible to turn individual channels on or off. Realistically, the first option is likely to be more achievable before the next release. **Screenshots**. ![channel viewer rgb](https://user-images.githubusercontent.com/4690904/171357206-38bfa499-012a-46c4-adb1-e566d31004e5.jpg). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: All up to v0.3.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/980
https://github.com/qupath/qupath/issues/980:660,Availability,avail,available,660,"## Bug report. **Describe the bug**; At the hackathon (I think) it came up that the channel viewer is much too busy for RGB images... making it less useful that it might otherwise be. The problem is that it shows *all* available channel transforms, rather than just the ones that are likely to be relevant or interesting. > Sidenote: in generating the screenshot here, it looks like the viewer panes aren't all the same size... as they ought to be. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an RGB image; 2. Choose *View &rarr; Mini viewers... &rarr; Show channel viewer*. **Expected behavior**; Show fewer channels by default. If stains are available, this could be the color deconvolve channels; otherwise, it could be the split RGB information. Furthermore, we should either:; * Make it possible to show all channels using a preference; * Make it possible to turn individual channels on or off. Realistically, the first option is likely to be more achievable before the next release. **Screenshots**. ![channel viewer rgb](https://user-images.githubusercontent.com/4690904/171357206-38bfa499-012a-46c4-adb1-e566d31004e5.jpg). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: All up to v0.3.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/980
https://github.com/qupath/qupath/issues/980:996,Deployability,release,release,996,"## Bug report. **Describe the bug**; At the hackathon (I think) it came up that the channel viewer is much too busy for RGB images... making it less useful that it might otherwise be. The problem is that it shows *all* available channel transforms, rather than just the ones that are likely to be relevant or interesting. > Sidenote: in generating the screenshot here, it looks like the viewer panes aren't all the same size... as they ought to be. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an RGB image; 2. Choose *View &rarr; Mini viewers... &rarr; Show channel viewer*. **Expected behavior**; Show fewer channels by default. If stains are available, this could be the color deconvolve channels; otherwise, it could be the split RGB information. Furthermore, we should either:; * Make it possible to show all channels using a preference; * Make it possible to turn individual channels on or off. Realistically, the first option is likely to be more achievable before the next release. **Screenshots**. ![channel viewer rgb](https://user-images.githubusercontent.com/4690904/171357206-38bfa499-012a-46c4-adb1-e566d31004e5.jpg). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: All up to v0.3.2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/980
https://github.com/qupath/qupath/issues/982:1496,Performance,perform,performance,1496,"## Bug report. **Describe the bug**; QuPath's viewer doesn't (really) support ICC profiles. This makes the display colors inconsistent with that seen in other viewers, for some file formats. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an SVS image in QuPath; 2. Compare with the same SVS image opened in ImageScope (with ICC profile turned on). **Expected behavior**; QuPath would ideally provide an option to view the image with the ICC profile applied. This should *only* affect the viewer; analysis itself should not be impacted. *However*, it may be worth considering whether to add an `ImageServer` implementation that applies an ICC profile as well, since this might potentially be used as a way to do color standardisation (relevant e.g. for deep learning).; If this is done, then the information must be accessible to the viewer so that any embedded ICC profile isn't applied twice. **Screenshots**; See https://forum.image.sc/t/color-discrepancy-qupath-x-imagescope-leica-gt450/57948. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: all until v0.3.2 (current). **Additional context**; For further discussion, see https://forum.image.sc/t/color-discrepancy-qupath-x-imagescope-leica-gt450/57948. There is some experimental (and hidden) support for ICC profiles accessible in QuPath via scripting, e.g. see https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/QuPathViewer.java#L2178; However, performance is really poor and it is not really usable at this time. Any implementation should be considered alongside gamma adjustment, see https://github.com/qupath/qupath/issues/981",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/982
https://github.com/qupath/qupath/issues/982:828,Security,access,accessible,828,"## Bug report. **Describe the bug**; QuPath's viewer doesn't (really) support ICC profiles. This makes the display colors inconsistent with that seen in other viewers, for some file formats. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an SVS image in QuPath; 2. Compare with the same SVS image opened in ImageScope (with ICC profile turned on). **Expected behavior**; QuPath would ideally provide an option to view the image with the ICC profile applied. This should *only* affect the viewer; analysis itself should not be impacted. *However*, it may be worth considering whether to add an `ImageServer` implementation that applies an ICC profile as well, since this might potentially be used as a way to do color standardisation (relevant e.g. for deep learning).; If this is done, then the information must be accessible to the viewer so that any embedded ICC profile isn't applied twice. **Screenshots**; See https://forum.image.sc/t/color-discrepancy-qupath-x-imagescope-leica-gt450/57948. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: all until v0.3.2 (current). **Additional context**; For further discussion, see https://forum.image.sc/t/color-discrepancy-qupath-x-imagescope-leica-gt450/57948. There is some experimental (and hidden) support for ICC profiles accessible in QuPath via scripting, e.g. see https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/QuPathViewer.java#L2178; However, performance is really poor and it is not really usable at this time. Any implementation should be considered alongside gamma adjustment, see https://github.com/qupath/qupath/issues/981",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/982
https://github.com/qupath/qupath/issues/982:1324,Security,access,accessible,1324,"## Bug report. **Describe the bug**; QuPath's viewer doesn't (really) support ICC profiles. This makes the display colors inconsistent with that seen in other viewers, for some file formats. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an SVS image in QuPath; 2. Compare with the same SVS image opened in ImageScope (with ICC profile turned on). **Expected behavior**; QuPath would ideally provide an option to view the image with the ICC profile applied. This should *only* affect the viewer; analysis itself should not be impacted. *However*, it may be worth considering whether to add an `ImageServer` implementation that applies an ICC profile as well, since this might potentially be used as a way to do color standardisation (relevant e.g. for deep learning).; If this is done, then the information must be accessible to the viewer so that any embedded ICC profile isn't applied twice. **Screenshots**; See https://forum.image.sc/t/color-discrepancy-qupath-x-imagescope-leica-gt450/57948. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: all until v0.3.2 (current). **Additional context**; For further discussion, see https://forum.image.sc/t/color-discrepancy-qupath-x-imagescope-leica-gt450/57948. There is some experimental (and hidden) support for ICC profiles accessible in QuPath via scripting, e.g. see https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/QuPathViewer.java#L2178; However, performance is really poor and it is not really usable at this time. Any implementation should be considered alongside gamma adjustment, see https://github.com/qupath/qupath/issues/981",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/982
https://github.com/qupath/qupath/issues/982:770,Usability,learn,learning,770,"## Bug report. **Describe the bug**; QuPath's viewer doesn't (really) support ICC profiles. This makes the display colors inconsistent with that seen in other viewers, for some file formats. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an SVS image in QuPath; 2. Compare with the same SVS image opened in ImageScope (with ICC profile turned on). **Expected behavior**; QuPath would ideally provide an option to view the image with the ICC profile applied. This should *only* affect the viewer; analysis itself should not be impacted. *However*, it may be worth considering whether to add an `ImageServer` implementation that applies an ICC profile as well, since this might potentially be used as a way to do color standardisation (relevant e.g. for deep learning).; If this is done, then the information must be accessible to the viewer so that any embedded ICC profile isn't applied twice. **Screenshots**; See https://forum.image.sc/t/color-discrepancy-qupath-x-imagescope-leica-gt450/57948. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: all until v0.3.2 (current). **Additional context**; For further discussion, see https://forum.image.sc/t/color-discrepancy-qupath-x-imagescope-leica-gt450/57948. There is some experimental (and hidden) support for ICC profiles accessible in QuPath via scripting, e.g. see https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/QuPathViewer.java#L2178; However, performance is really poor and it is not really usable at this time. Any implementation should be considered alongside gamma adjustment, see https://github.com/qupath/qupath/issues/981",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/982
https://github.com/qupath/qupath/issues/982:1544,Usability,usab,usable,1544,"## Bug report. **Describe the bug**; QuPath's viewer doesn't (really) support ICC profiles. This makes the display colors inconsistent with that seen in other viewers, for some file formats. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an SVS image in QuPath; 2. Compare with the same SVS image opened in ImageScope (with ICC profile turned on). **Expected behavior**; QuPath would ideally provide an option to view the image with the ICC profile applied. This should *only* affect the viewer; analysis itself should not be impacted. *However*, it may be worth considering whether to add an `ImageServer` implementation that applies an ICC profile as well, since this might potentially be used as a way to do color standardisation (relevant e.g. for deep learning).; If this is done, then the information must be accessible to the viewer so that any embedded ICC profile isn't applied twice. **Screenshots**; See https://forum.image.sc/t/color-discrepancy-qupath-x-imagescope-leica-gt450/57948. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: all until v0.3.2 (current). **Additional context**; For further discussion, see https://forum.image.sc/t/color-discrepancy-qupath-x-imagescope-leica-gt450/57948. There is some experimental (and hidden) support for ICC profiles accessible in QuPath via scripting, e.g. see https://github.com/qupath/qupath/blob/main/qupath-gui-fx/src/main/java/qupath/lib/gui/viewer/QuPathViewer.java#L2178; However, performance is really poor and it is not really usable at this time. Any implementation should be considered alongside gamma adjustment, see https://github.com/qupath/qupath/issues/981",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/982
https://github.com/qupath/qupath/issues/984:89,Availability,error,error,89,"**Describe the bug**; LabeledImageServers do not pyramidalize by default and so throw an error when a user tries to export a whole slide image as a label. This can be circumvented by pyramidalizing the labelServer, but the user would not necessarily know this from the error message.; See https://forum.image.sc/t/exporting-full-labelled-images-of-arbitrary-large-wsis/66708/11. **To Reproduce**; Create a tissue annotation of a very large whole slide image. Export as a downsample 1 labeled image.; Error: `IllegalArgumentException at line X: Dimensions (width=W height=H) are too large.`; **Expected behavior**; Possibly provide a warning that the labeledImageServer needs to be pyramidalized - alternatively default to using a pyramidalized image server if the image is ""too large"". The image output type would probably need to be overwritten to ome.tif if it was not already that, with yet another warning message.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/984
https://github.com/qupath/qupath/issues/984:269,Availability,error,error,269,"**Describe the bug**; LabeledImageServers do not pyramidalize by default and so throw an error when a user tries to export a whole slide image as a label. This can be circumvented by pyramidalizing the labelServer, but the user would not necessarily know this from the error message.; See https://forum.image.sc/t/exporting-full-labelled-images-of-arbitrary-large-wsis/66708/11. **To Reproduce**; Create a tissue annotation of a very large whole slide image. Export as a downsample 1 labeled image.; Error: `IllegalArgumentException at line X: Dimensions (width=W height=H) are too large.`; **Expected behavior**; Possibly provide a warning that the labeledImageServer needs to be pyramidalized - alternatively default to using a pyramidalized image server if the image is ""too large"". The image output type would probably need to be overwritten to ome.tif if it was not already that, with yet another warning message.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/984
https://github.com/qupath/qupath/issues/984:471,Availability,down,downsample,471,"**Describe the bug**; LabeledImageServers do not pyramidalize by default and so throw an error when a user tries to export a whole slide image as a label. This can be circumvented by pyramidalizing the labelServer, but the user would not necessarily know this from the error message.; See https://forum.image.sc/t/exporting-full-labelled-images-of-arbitrary-large-wsis/66708/11. **To Reproduce**; Create a tissue annotation of a very large whole slide image. Export as a downsample 1 labeled image.; Error: `IllegalArgumentException at line X: Dimensions (width=W height=H) are too large.`; **Expected behavior**; Possibly provide a warning that the labeledImageServer needs to be pyramidalized - alternatively default to using a pyramidalized image server if the image is ""too large"". The image output type would probably need to be overwritten to ome.tif if it was not already that, with yet another warning message.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/984
https://github.com/qupath/qupath/issues/984:500,Availability,Error,Error,500,"**Describe the bug**; LabeledImageServers do not pyramidalize by default and so throw an error when a user tries to export a whole slide image as a label. This can be circumvented by pyramidalizing the labelServer, but the user would not necessarily know this from the error message.; See https://forum.image.sc/t/exporting-full-labelled-images-of-arbitrary-large-wsis/66708/11. **To Reproduce**; Create a tissue annotation of a very large whole slide image. Export as a downsample 1 labeled image.; Error: `IllegalArgumentException at line X: Dimensions (width=W height=H) are too large.`; **Expected behavior**; Possibly provide a warning that the labeledImageServer needs to be pyramidalized - alternatively default to using a pyramidalized image server if the image is ""too large"". The image output type would probably need to be overwritten to ome.tif if it was not already that, with yet another warning message.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/984
https://github.com/qupath/qupath/issues/984:275,Integrability,message,message,275,"**Describe the bug**; LabeledImageServers do not pyramidalize by default and so throw an error when a user tries to export a whole slide image as a label. This can be circumvented by pyramidalizing the labelServer, but the user would not necessarily know this from the error message.; See https://forum.image.sc/t/exporting-full-labelled-images-of-arbitrary-large-wsis/66708/11. **To Reproduce**; Create a tissue annotation of a very large whole slide image. Export as a downsample 1 labeled image.; Error: `IllegalArgumentException at line X: Dimensions (width=W height=H) are too large.`; **Expected behavior**; Possibly provide a warning that the labeledImageServer needs to be pyramidalized - alternatively default to using a pyramidalized image server if the image is ""too large"". The image output type would probably need to be overwritten to ome.tif if it was not already that, with yet another warning message.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/984
https://github.com/qupath/qupath/issues/984:910,Integrability,message,message,910,"**Describe the bug**; LabeledImageServers do not pyramidalize by default and so throw an error when a user tries to export a whole slide image as a label. This can be circumvented by pyramidalizing the labelServer, but the user would not necessarily know this from the error message.; See https://forum.image.sc/t/exporting-full-labelled-images-of-arbitrary-large-wsis/66708/11. **To Reproduce**; Create a tissue annotation of a very large whole slide image. Export as a downsample 1 labeled image.; Error: `IllegalArgumentException at line X: Dimensions (width=W height=H) are too large.`; **Expected behavior**; Possibly provide a warning that the labeledImageServer needs to be pyramidalized - alternatively default to using a pyramidalized image server if the image is ""too large"". The image output type would probably need to be overwritten to ome.tif if it was not already that, with yet another warning message.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/984
https://github.com/qupath/qupath/pull/985:216,Availability,avail,available,216,"Fixes https://github.com/qupath/qupath/issues/980; * Support `ChannelDisplayMode` in mini viewers; * Show only the visible/most relevant channels by default, based on image type; * Right-click to optionally show all available channels",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/985
https://github.com/qupath/qupath/issues/986:408,Availability,avail,available,408,"## Bug report. **Describe the bug**; When QuPath is first launched, a few key options are presented to the user - which are currently the memory settings, locale and whether to check for updates. Except that these are no longer really key. The memory setting was important in early releases, when memory was specified in absolute terms (e.g. 4GB). Most users would want to increase it depending upon what is available. However, now memory defaults to 50% of the available system memory, which means it's less likely to require adjustment. What's more, the memory can't even be adjusted on macOS anyway due to permissions limitations. Changing the locale is also strongly discouraged, since it can cause confusion - especially when inputting numbers (using a comma or decimal separator). Therefore space is give to a dialog that is no longer fully functional on all platforms, and isn't really needed. **To Reproduce**; Check the current display via *Help &rarr; Show setup options*. **Expected behavior**; Three main things:; * Show a more informative and useful startup dialog, e.g. to introduce the user interface, forum or documentation.; * Relegate non-essential options to the preferences.; * Retain a checkbox to specify whether to check for updates or not. **Screenshots**. Current dialog, as it appears on a Mac.; ![Screenshot 2022-06-02 at 09 37 51](https://user-images.githubusercontent.com/4690904/171590676-2b69b837-681f-4838-9d9e-1fcf6ed5ab5d.png). **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2. **Additional context**; The locale settings have already been moved to the preferences in https://github.com/qupath/qupath/pull/971; This issue really exists to track the progress of the other required changes for v0.4.0.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/986
https://github.com/qupath/qupath/issues/986:462,Availability,avail,available,462,"## Bug report. **Describe the bug**; When QuPath is first launched, a few key options are presented to the user - which are currently the memory settings, locale and whether to check for updates. Except that these are no longer really key. The memory setting was important in early releases, when memory was specified in absolute terms (e.g. 4GB). Most users would want to increase it depending upon what is available. However, now memory defaults to 50% of the available system memory, which means it's less likely to require adjustment. What's more, the memory can't even be adjusted on macOS anyway due to permissions limitations. Changing the locale is also strongly discouraged, since it can cause confusion - especially when inputting numbers (using a comma or decimal separator). Therefore space is give to a dialog that is no longer fully functional on all platforms, and isn't really needed. **To Reproduce**; Check the current display via *Help &rarr; Show setup options*. **Expected behavior**; Three main things:; * Show a more informative and useful startup dialog, e.g. to introduce the user interface, forum or documentation.; * Relegate non-essential options to the preferences.; * Retain a checkbox to specify whether to check for updates or not. **Screenshots**. Current dialog, as it appears on a Mac.; ![Screenshot 2022-06-02 at 09 37 51](https://user-images.githubusercontent.com/4690904/171590676-2b69b837-681f-4838-9d9e-1fcf6ed5ab5d.png). **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2. **Additional context**; The locale settings have already been moved to the preferences in https://github.com/qupath/qupath/pull/971; This issue really exists to track the progress of the other required changes for v0.4.0.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/986
https://github.com/qupath/qupath/issues/986:187,Deployability,update,updates,187,"## Bug report. **Describe the bug**; When QuPath is first launched, a few key options are presented to the user - which are currently the memory settings, locale and whether to check for updates. Except that these are no longer really key. The memory setting was important in early releases, when memory was specified in absolute terms (e.g. 4GB). Most users would want to increase it depending upon what is available. However, now memory defaults to 50% of the available system memory, which means it's less likely to require adjustment. What's more, the memory can't even be adjusted on macOS anyway due to permissions limitations. Changing the locale is also strongly discouraged, since it can cause confusion - especially when inputting numbers (using a comma or decimal separator). Therefore space is give to a dialog that is no longer fully functional on all platforms, and isn't really needed. **To Reproduce**; Check the current display via *Help &rarr; Show setup options*. **Expected behavior**; Three main things:; * Show a more informative and useful startup dialog, e.g. to introduce the user interface, forum or documentation.; * Relegate non-essential options to the preferences.; * Retain a checkbox to specify whether to check for updates or not. **Screenshots**. Current dialog, as it appears on a Mac.; ![Screenshot 2022-06-02 at 09 37 51](https://user-images.githubusercontent.com/4690904/171590676-2b69b837-681f-4838-9d9e-1fcf6ed5ab5d.png). **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2. **Additional context**; The locale settings have already been moved to the preferences in https://github.com/qupath/qupath/pull/971; This issue really exists to track the progress of the other required changes for v0.4.0.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/986
https://github.com/qupath/qupath/issues/986:282,Deployability,release,releases,282,"## Bug report. **Describe the bug**; When QuPath is first launched, a few key options are presented to the user - which are currently the memory settings, locale and whether to check for updates. Except that these are no longer really key. The memory setting was important in early releases, when memory was specified in absolute terms (e.g. 4GB). Most users would want to increase it depending upon what is available. However, now memory defaults to 50% of the available system memory, which means it's less likely to require adjustment. What's more, the memory can't even be adjusted on macOS anyway due to permissions limitations. Changing the locale is also strongly discouraged, since it can cause confusion - especially when inputting numbers (using a comma or decimal separator). Therefore space is give to a dialog that is no longer fully functional on all platforms, and isn't really needed. **To Reproduce**; Check the current display via *Help &rarr; Show setup options*. **Expected behavior**; Three main things:; * Show a more informative and useful startup dialog, e.g. to introduce the user interface, forum or documentation.; * Relegate non-essential options to the preferences.; * Retain a checkbox to specify whether to check for updates or not. **Screenshots**. Current dialog, as it appears on a Mac.; ![Screenshot 2022-06-02 at 09 37 51](https://user-images.githubusercontent.com/4690904/171590676-2b69b837-681f-4838-9d9e-1fcf6ed5ab5d.png). **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2. **Additional context**; The locale settings have already been moved to the preferences in https://github.com/qupath/qupath/pull/971; This issue really exists to track the progress of the other required changes for v0.4.0.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/986
https://github.com/qupath/qupath/issues/986:1248,Deployability,update,updates,1248,"## Bug report. **Describe the bug**; When QuPath is first launched, a few key options are presented to the user - which are currently the memory settings, locale and whether to check for updates. Except that these are no longer really key. The memory setting was important in early releases, when memory was specified in absolute terms (e.g. 4GB). Most users would want to increase it depending upon what is available. However, now memory defaults to 50% of the available system memory, which means it's less likely to require adjustment. What's more, the memory can't even be adjusted on macOS anyway due to permissions limitations. Changing the locale is also strongly discouraged, since it can cause confusion - especially when inputting numbers (using a comma or decimal separator). Therefore space is give to a dialog that is no longer fully functional on all platforms, and isn't really needed. **To Reproduce**; Check the current display via *Help &rarr; Show setup options*. **Expected behavior**; Three main things:; * Show a more informative and useful startup dialog, e.g. to introduce the user interface, forum or documentation.; * Relegate non-essential options to the preferences.; * Retain a checkbox to specify whether to check for updates or not. **Screenshots**. Current dialog, as it appears on a Mac.; ![Screenshot 2022-06-02 at 09 37 51](https://user-images.githubusercontent.com/4690904/171590676-2b69b837-681f-4838-9d9e-1fcf6ed5ab5d.png). **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2. **Additional context**; The locale settings have already been moved to the preferences in https://github.com/qupath/qupath/pull/971; This issue really exists to track the progress of the other required changes for v0.4.0.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/986
https://github.com/qupath/qupath/issues/986:385,Integrability,depend,depending,385,"## Bug report. **Describe the bug**; When QuPath is first launched, a few key options are presented to the user - which are currently the memory settings, locale and whether to check for updates. Except that these are no longer really key. The memory setting was important in early releases, when memory was specified in absolute terms (e.g. 4GB). Most users would want to increase it depending upon what is available. However, now memory defaults to 50% of the available system memory, which means it's less likely to require adjustment. What's more, the memory can't even be adjusted on macOS anyway due to permissions limitations. Changing the locale is also strongly discouraged, since it can cause confusion - especially when inputting numbers (using a comma or decimal separator). Therefore space is give to a dialog that is no longer fully functional on all platforms, and isn't really needed. **To Reproduce**; Check the current display via *Help &rarr; Show setup options*. **Expected behavior**; Three main things:; * Show a more informative and useful startup dialog, e.g. to introduce the user interface, forum or documentation.; * Relegate non-essential options to the preferences.; * Retain a checkbox to specify whether to check for updates or not. **Screenshots**. Current dialog, as it appears on a Mac.; ![Screenshot 2022-06-02 at 09 37 51](https://user-images.githubusercontent.com/4690904/171590676-2b69b837-681f-4838-9d9e-1fcf6ed5ab5d.png). **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2. **Additional context**; The locale settings have already been moved to the preferences in https://github.com/qupath/qupath/pull/971; This issue really exists to track the progress of the other required changes for v0.4.0.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/986
https://github.com/qupath/qupath/issues/986:1106,Integrability,interface,interface,1106,"## Bug report. **Describe the bug**; When QuPath is first launched, a few key options are presented to the user - which are currently the memory settings, locale and whether to check for updates. Except that these are no longer really key. The memory setting was important in early releases, when memory was specified in absolute terms (e.g. 4GB). Most users would want to increase it depending upon what is available. However, now memory defaults to 50% of the available system memory, which means it's less likely to require adjustment. What's more, the memory can't even be adjusted on macOS anyway due to permissions limitations. Changing the locale is also strongly discouraged, since it can cause confusion - especially when inputting numbers (using a comma or decimal separator). Therefore space is give to a dialog that is no longer fully functional on all platforms, and isn't really needed. **To Reproduce**; Check the current display via *Help &rarr; Show setup options*. **Expected behavior**; Three main things:; * Show a more informative and useful startup dialog, e.g. to introduce the user interface, forum or documentation.; * Relegate non-essential options to the preferences.; * Retain a checkbox to specify whether to check for updates or not. **Screenshots**. Current dialog, as it appears on a Mac.; ![Screenshot 2022-06-02 at 09 37 51](https://user-images.githubusercontent.com/4690904/171590676-2b69b837-681f-4838-9d9e-1fcf6ed5ab5d.png). **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2. **Additional context**; The locale settings have already been moved to the preferences in https://github.com/qupath/qupath/pull/971; This issue really exists to track the progress of the other required changes for v0.4.0.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/986
https://github.com/qupath/qupath/pull/987:200,Security,access,accessible,200,"This addresses https://github.com/qupath/qupath/issues/981. Main changes:; * Adjust gamma in Brightness/Contrast window (no longer in preferences); * Apply gamma to mini/channel viewers; * Make gamma accessible via public methods on the viewer; * Warn in the Brightness/Contrast window when the gamma is anything other than 1; * Support unbinding the gamma property for a viewer and setting it manually via scripting (although discouraged). One concern is that this means that the gamma slider in the brightness/contrast dialog controls a global preference, whereas the min/max sliders operate per-viewer. This may need to revised if it causes confusion. Bonus:; * Show RGB histograms in Brightness/Contrast window",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/987
https://github.com/qupath/qupath/issues/990:123,Availability,error,error,123,"## Bug report. **Describe the bug**; If uncaught exceptions occur repeatedly in quick succession, the screen can fill with error notifications. Even if the error isn't *that* important, the software becomes unusable. **To Reproduce**; This can be seen in v0.3.2 with the bug reported at https://github.com/qupath/qupath/issues/988. Steps to reproduce the behavior:; 1. Open an image; 2. Choose *Classify &rarr; Pixel classification &rarr; Create thresholder*; 3. Delete the text in the threshold spinner; 4. Press an increment/decrement arrow in the threshold spinner. Each time a button is pressed, one or more error notifications should appear. There are other cases where the notifications are more frequent, but I can't recall any right now. They are particularly bad if linked to a mouse event, like a misbehaving mouse move listener. **Expected behavior**; When many repeated errors occur, only the first notification should be shown - and further information provided in the log. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and before",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/990
https://github.com/qupath/qupath/issues/990:156,Availability,error,error,156,"## Bug report. **Describe the bug**; If uncaught exceptions occur repeatedly in quick succession, the screen can fill with error notifications. Even if the error isn't *that* important, the software becomes unusable. **To Reproduce**; This can be seen in v0.3.2 with the bug reported at https://github.com/qupath/qupath/issues/988. Steps to reproduce the behavior:; 1. Open an image; 2. Choose *Classify &rarr; Pixel classification &rarr; Create thresholder*; 3. Delete the text in the threshold spinner; 4. Press an increment/decrement arrow in the threshold spinner. Each time a button is pressed, one or more error notifications should appear. There are other cases where the notifications are more frequent, but I can't recall any right now. They are particularly bad if linked to a mouse event, like a misbehaving mouse move listener. **Expected behavior**; When many repeated errors occur, only the first notification should be shown - and further information provided in the log. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and before",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/990
https://github.com/qupath/qupath/issues/990:612,Availability,error,error,612,"## Bug report. **Describe the bug**; If uncaught exceptions occur repeatedly in quick succession, the screen can fill with error notifications. Even if the error isn't *that* important, the software becomes unusable. **To Reproduce**; This can be seen in v0.3.2 with the bug reported at https://github.com/qupath/qupath/issues/988. Steps to reproduce the behavior:; 1. Open an image; 2. Choose *Classify &rarr; Pixel classification &rarr; Create thresholder*; 3. Delete the text in the threshold spinner; 4. Press an increment/decrement arrow in the threshold spinner. Each time a button is pressed, one or more error notifications should appear. There are other cases where the notifications are more frequent, but I can't recall any right now. They are particularly bad if linked to a mouse event, like a misbehaving mouse move listener. **Expected behavior**; When many repeated errors occur, only the first notification should be shown - and further information provided in the log. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and before",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/990
https://github.com/qupath/qupath/issues/990:882,Availability,error,errors,882,"## Bug report. **Describe the bug**; If uncaught exceptions occur repeatedly in quick succession, the screen can fill with error notifications. Even if the error isn't *that* important, the software becomes unusable. **To Reproduce**; This can be seen in v0.3.2 with the bug reported at https://github.com/qupath/qupath/issues/988. Steps to reproduce the behavior:; 1. Open an image; 2. Choose *Classify &rarr; Pixel classification &rarr; Create thresholder*; 3. Delete the text in the threshold spinner; 4. Press an increment/decrement arrow in the threshold spinner. Each time a button is pressed, one or more error notifications should appear. There are other cases where the notifications are more frequent, but I can't recall any right now. They are particularly bad if linked to a mouse event, like a misbehaving mouse move listener. **Expected behavior**; When many repeated errors occur, only the first notification should be shown - and further information provided in the log. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and before",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/990
https://github.com/qupath/qupath/issues/990:982,Testability,log,log,982,"## Bug report. **Describe the bug**; If uncaught exceptions occur repeatedly in quick succession, the screen can fill with error notifications. Even if the error isn't *that* important, the software becomes unusable. **To Reproduce**; This can be seen in v0.3.2 with the bug reported at https://github.com/qupath/qupath/issues/988. Steps to reproduce the behavior:; 1. Open an image; 2. Choose *Classify &rarr; Pixel classification &rarr; Create thresholder*; 3. Delete the text in the threshold spinner; 4. Press an increment/decrement arrow in the threshold spinner. Each time a button is pressed, one or more error notifications should appear. There are other cases where the notifications are more frequent, but I can't recall any right now. They are particularly bad if linked to a mouse event, like a misbehaving mouse move listener. **Expected behavior**; When many repeated errors occur, only the first notification should be shown - and further information provided in the log. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and before",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/990
https://github.com/qupath/qupath/pull/992:2,Energy Efficiency,Reduce,Reduce,2,- Reduce instances of TopologyException (currently in StarDist) by fixing geometries produced by estimateCellBoundary if needed.; - Improve detectionsToCells to avoid losing all cells if one throws an exception.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/992
https://github.com/qupath/qupath/pull/992:140,Safety,detect,detectionsToCells,140,- Reduce instances of TopologyException (currently in StarDist) by fixing geometries produced by estimateCellBoundary if needed.; - Improve detectionsToCells to avoid losing all cells if one throws an exception.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/992
https://github.com/qupath/qupath/pull/992:161,Safety,avoid,avoid,161,- Reduce instances of TopologyException (currently in StarDist) by fixing geometries produced by estimateCellBoundary if needed.; - Improve detectionsToCells to avoid losing all cells if one throws an exception.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/992
https://github.com/qupath/qupath/issues/993:732,Availability,mask,masks,732,"QuPath 0.3.2, and prior, I imagine. Currently when exporting labels using the [LabeledImageServer](https://qupath.github.io/javadoc/docs/qupath/lib/images/servers/LabeledImageServer.Builder.html), the saved file includes a color lookup table which is quite nice in Windows for viewing the labels. In grayscale, low values would often disappear is 0,1 and 2 are fairly similar. However, some Python readers like PIL interpret the color lookup table as meaning that the image should be read in color, and a TIFF file with all 0, 1 and 2 values in a single channel will show up with 255s (for a white background) and other intermediate numbers. . It would be nice if there were an option to not apply a lookup table when exporting the masks. For the moment, my workaround is to resave the images as 8bit through an ImageJ macroRunner at the end of the script that writes the labeled images - overwriting the original. I am not including it here as it makes some assumptions about the Hierarchy that may not be true in all cases. Cheers,; Mike",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/993
https://github.com/qupath/qupath/issues/994:30,Safety,detect,detect,30,"Hello, ; I am using QuPath to detect inclusions in the cytoplasm for DAB stainning, They are small and I want to do a quantification of the number of inclusions. Can somebody help with this issue? Thank you",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/994
https://github.com/qupath/qupath/issues/995:656,Availability,avail,available,656,"Currently, RoiTools supports [union](https://github.com/qupath/qupath/blob/2e7042fc0c5913757a1f5ba481941fa9ba9f8275/qupath-core/src/main/java/qupath/lib/roi/RoiTools.java#L124) and [intersection](https://github.com/qupath/qupath/blob/2e7042fc0c5913757a1f5ba481941fa9ba9f8275/qupath-core/src/main/java/qupath/lib/roi/RoiTools.java#L148) methods directly but not subtraction. Subtraction has to be done using [combineROIs](https://github.com/qupath/qupath/blob/2e7042fc0c5913757a1f5ba481941fa9ba9f8275/qupath-core/src/main/java/qupath/lib/roi/RoiTools.java#L97) and CombineOp methods, while not difficult, is incoherent as union and intersection is directly available as mentioned above. I would like to suggest having a RoiTools.subtract(roi1, roi2) method added alongside RoiTools.union(rois) and RoiTools.intersection(rois).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/995
https://github.com/qupath/qupath/issues/996:75,Availability,error,error-message-topologyexception,75,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/stardist-error-message-topologyexception/67708/15. I haven't yet replicated it, but it's important to check it out before the next release. **Desktop (please complete the following information):**; - OS: All (presumably); - QuPath Version: Possibly none yet... but if `org.locationtech.jts.geom.GeometryOverlay.isOverlayNG = true` is added by default then it may appear. **Additional context**; This is the first report I've seen of new problems being introduced after adding `isOverlayNG=true` - so definitely needs investigated before making the change.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/996
https://github.com/qupath/qupath/issues/996:197,Deployability,release,release,197,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/stardist-error-message-topologyexception/67708/15. I haven't yet replicated it, but it's important to check it out before the next release. **Desktop (please complete the following information):**; - OS: All (presumably); - QuPath Version: Possibly none yet... but if `org.locationtech.jts.geom.GeometryOverlay.isOverlayNG = true` is added by default then it may appear. **Additional context**; This is the first report I've seen of new problems being introduced after adding `isOverlayNG=true` - so definitely needs investigated before making the change.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/996
https://github.com/qupath/qupath/issues/996:81,Integrability,message,message-topologyexception,81,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/stardist-error-message-topologyexception/67708/15. I haven't yet replicated it, but it's important to check it out before the next release. **Desktop (please complete the following information):**; - OS: All (presumably); - QuPath Version: Possibly none yet... but if `org.locationtech.jts.geom.GeometryOverlay.isOverlayNG = true` is added by default then it may appear. **Additional context**; This is the first report I've seen of new problems being introduced after adding `isOverlayNG=true` - so definitely needs investigated before making the change.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/996
https://github.com/qupath/qupath/pull/998:183,Availability,error,error-message-topologyexception,183,"Update to use JTS 1.19.0. Introduce `-Djts.overlay=ng` by default.; Lots of evidence on the forum that this resolves thorny TopologyExceptions.; See https://forum.image.sc/t/stardist-error-message-topologyexception/67708/7 for more info. Avoid calling `geom.intersection(g)` twice in `RoiTools.clipToROI(ROI, Collection)`, which caused problems with OverlayNG.; This should fix https://github.com/qupath/qupath/issues/996",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/998
https://github.com/qupath/qupath/pull/998:0,Deployability,Update,Update,0,"Update to use JTS 1.19.0. Introduce `-Djts.overlay=ng` by default.; Lots of evidence on the forum that this resolves thorny TopologyExceptions.; See https://forum.image.sc/t/stardist-error-message-topologyexception/67708/7 for more info. Avoid calling `geom.intersection(g)` twice in `RoiTools.clipToROI(ROI, Collection)`, which caused problems with OverlayNG.; This should fix https://github.com/qupath/qupath/issues/996",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/998
https://github.com/qupath/qupath/pull/998:189,Integrability,message,message-topologyexception,189,"Update to use JTS 1.19.0. Introduce `-Djts.overlay=ng` by default.; Lots of evidence on the forum that this resolves thorny TopologyExceptions.; See https://forum.image.sc/t/stardist-error-message-topologyexception/67708/7 for more info. Avoid calling `geom.intersection(g)` twice in `RoiTools.clipToROI(ROI, Collection)`, which caused problems with OverlayNG.; This should fix https://github.com/qupath/qupath/issues/996",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/998
https://github.com/qupath/qupath/pull/998:238,Safety,Avoid,Avoid,238,"Update to use JTS 1.19.0. Introduce `-Djts.overlay=ng` by default.; Lots of evidence on the forum that this resolves thorny TopologyExceptions.; See https://forum.image.sc/t/stardist-error-message-topologyexception/67708/7 for more info. Avoid calling `geom.intersection(g)` twice in `RoiTools.clipToROI(ROI, Collection)`, which caused problems with OverlayNG.; This should fix https://github.com/qupath/qupath/issues/996",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/998
https://github.com/qupath/qupath/pull/999:17,Deployability,update,updates,17,Minor dependency updates,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/999
https://github.com/qupath/qupath/pull/999:6,Integrability,depend,dependency,6,Minor dependency updates,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/999
https://github.com/qupath/qupath/pull/1000:82,Safety,avoid,avoid,82,Aims to fix https://github.com/qupath/qupath/issues/993; Also make it possible to avoid shuffling objects when exporting instance labels. I wanted this option when considering https://forum.image.sc/t/exports-annotations-with-individual-labels-line-between-touching-objects-and-user-defined-priority-between-touching-objects-of-different-classes/68971,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1000
https://github.com/qupath/qupath/pull/1002:204,Modifiability,Extend,Extend,204,"* Add `QuPathGUI.lookupAccelerator(combo)` methods to check what accelerators are in use; * Improve support for locking/unlocking objects, including with new *Objects &rarr; Lock...* submenu commands.; * Extend display of lock icons to hierarchy tab (not just annotation tab); * Fix https://github.com/qupath/qupath/issues/1001",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1002
https://github.com/qupath/qupath/pull/1003:41,Availability,error,error,41,This is as opposed to reporting it as an error.; See https://forum.image.sc/t/how-to-measure-the-staining-intensity-without-positive-cell-detection/66847/12,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1003
https://github.com/qupath/qupath/pull/1003:138,Safety,detect,detection,138,This is as opposed to reporting it as an error.; See https://forum.image.sc/t/how-to-measure-the-staining-intensity-without-positive-cell-detection/66847/12,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1003
https://github.com/qupath/qupath/pull/1004:416,Deployability,release,release,416,"Several things:; * Make annotation descriptions more visible in the UI; 1. As an extra tab beside the measurements; 2. In a separate window; * Add an icon to the list/hierarchy views to indicate if a description is present; * Support annotations descriptions that contain markdown or html, rendering them in a `WebView`. > **Note:** Screenshots below.; > This is a work in progress, likely to change before the next release - specifically to support descriptions for the 'root' object (relating to the entire image), and possibly to consolidate annotation descriptions & TMA note fields. <img width=""1356"" alt=""Screenshot 2022-07-11 at 16 35 58"" src=""https://user-images.githubusercontent.com/4690904/178302423-15d42432-4af3-40bd-a36c-5f88ac128327.png"">. <img width=""1373"" alt=""Screenshot 2022-07-11 at 16 36 36"" src=""https://user-images.githubusercontent.com/4690904/178302461-a1ab1fb4-b8fa-47a5-94bf-63f89859ced1.png"">",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1004
https://github.com/qupath/qupath/issues/1005:944,Deployability,update,updated,944,"Support for annotation descriptions is improved in #1004 . The screenshots below show the current status. The purpose of this feature request is to discuss further enhancements, in particular:. * Consolidating the idea of an annotation 'description' with a TMA core 'note'. Both use the trick of storing the text in the metadata map, but (inconveniently) use different keys: `ANNOTATION_DESCRIPTION` ([here](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core/src/main/java/qupath/lib/objects/PathAnnotationObject.java#L74)) and `note` ([here](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMACommands.java#L122)) respectively. Neither key is ideal for a general purpose.; * I propose introducing a general `text` property. However, it's not totally clear if objects written by previous versions should automatically be updated. If they are, then the data files may not open properly in older QuPath versions.; * One reason for a simple, lower-case property name (e.g. `text`) is that it should be GeoJSON-friendly, and work sensibly as a key. But is there a better key? Via markdown/html, it's possible to smuggle in more than just text.; * Should other object types support text/descriptions?; * **Root objects**: I think yes. It provides a way to append arbitrary text to any image.; * **Detection objects**: Maybe... this would enforce a map being created, which could make each detection considerably more heavyweight. But perhaps it should be permitted, and users simply warned that it's not generally a good idea.; * Consider the sensibleness of the the current implementation, which will:; * Render text as if it's markdown (which shouldn't change anything for most plain text); * Render html directly if the text starts with `<html>`; * Load a web page if the text starts with `https://`. Might be of interest to @yli-hallila especially for https://github.com/yli-hall",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1005
https://github.com/qupath/qupath/issues/1005:164,Modifiability,enhance,enhancements,164,"Support for annotation descriptions is improved in #1004 . The screenshots below show the current status. The purpose of this feature request is to discuss further enhancements, in particular:. * Consolidating the idea of an annotation 'description' with a TMA core 'note'. Both use the trick of storing the text in the metadata map, but (inconveniently) use different keys: `ANNOTATION_DESCRIPTION` ([here](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core/src/main/java/qupath/lib/objects/PathAnnotationObject.java#L74)) and `note` ([here](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMACommands.java#L122)) respectively. Neither key is ideal for a general purpose.; * I propose introducing a general `text` property. However, it's not totally clear if objects written by previous versions should automatically be updated. If they are, then the data files may not open properly in older QuPath versions.; * One reason for a simple, lower-case property name (e.g. `text`) is that it should be GeoJSON-friendly, and work sensibly as a key. But is there a better key? Via markdown/html, it's possible to smuggle in more than just text.; * Should other object types support text/descriptions?; * **Root objects**: I think yes. It provides a way to append arbitrary text to any image.; * **Detection objects**: Maybe... this would enforce a map being created, which could make each detection considerably more heavyweight. But perhaps it should be permitted, and users simply warned that it's not generally a good idea.; * Consider the sensibleness of the the current implementation, which will:; * Render text as if it's markdown (which shouldn't change anything for most plain text); * Render html directly if the text starts with `<html>`; * Load a web page if the text starts with `https://`. Might be of interest to @yli-hallila especially for https://github.com/yli-hall",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1005
https://github.com/qupath/qupath/issues/1005:1870,Performance,Load,Load,1870,"different keys: `ANNOTATION_DESCRIPTION` ([here](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core/src/main/java/qupath/lib/objects/PathAnnotationObject.java#L74)) and `note` ([here](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMACommands.java#L122)) respectively. Neither key is ideal for a general purpose.; * I propose introducing a general `text` property. However, it's not totally clear if objects written by previous versions should automatically be updated. If they are, then the data files may not open properly in older QuPath versions.; * One reason for a simple, lower-case property name (e.g. `text`) is that it should be GeoJSON-friendly, and work sensibly as a key. But is there a better key? Via markdown/html, it's possible to smuggle in more than just text.; * Should other object types support text/descriptions?; * **Root objects**: I think yes. It provides a way to append arbitrary text to any image.; * **Detection objects**: Maybe... this would enforce a map being created, which could make each detection considerably more heavyweight. But perhaps it should be permitted, and users simply warned that it's not generally a good idea.; * Consider the sensibleness of the the current implementation, which will:; * Render text as if it's markdown (which shouldn't change anything for most plain text); * Render html directly if the text starts with `<html>`; * Load a web page if the text starts with `https://`. Might be of interest to @yli-hallila especially for https://github.com/yli-hallila/qupath-edu-extension. <img width=""1356"" alt=""Screenshot 2022-07-11 at 16 35 58"" src=""https://user-images.githubusercontent.com/4690904/178302423-15d42432-4af3-40bd-a36c-5f88ac128327.png"">. <img width=""1373"" alt=""Screenshot 2022-07-11 at 16 36 36"" src=""https://user-images.githubusercontent.com/4690904/178302461-a1ab1fb4-b8fa-47a5-94bf-63f89859ced1.png"">",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1005
https://github.com/qupath/qupath/issues/1005:1415,Safety,Detect,Detection,1415,"different keys: `ANNOTATION_DESCRIPTION` ([here](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core/src/main/java/qupath/lib/objects/PathAnnotationObject.java#L74)) and `note` ([here](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMACommands.java#L122)) respectively. Neither key is ideal for a general purpose.; * I propose introducing a general `text` property. However, it's not totally clear if objects written by previous versions should automatically be updated. If they are, then the data files may not open properly in older QuPath versions.; * One reason for a simple, lower-case property name (e.g. `text`) is that it should be GeoJSON-friendly, and work sensibly as a key. But is there a better key? Via markdown/html, it's possible to smuggle in more than just text.; * Should other object types support text/descriptions?; * **Root objects**: I think yes. It provides a way to append arbitrary text to any image.; * **Detection objects**: Maybe... this would enforce a map being created, which could make each detection considerably more heavyweight. But perhaps it should be permitted, and users simply warned that it's not generally a good idea.; * Consider the sensibleness of the the current implementation, which will:; * Render text as if it's markdown (which shouldn't change anything for most plain text); * Render html directly if the text starts with `<html>`; * Load a web page if the text starts with `https://`. Might be of interest to @yli-hallila especially for https://github.com/yli-hallila/qupath-edu-extension. <img width=""1356"" alt=""Screenshot 2022-07-11 at 16 35 58"" src=""https://user-images.githubusercontent.com/4690904/178302423-15d42432-4af3-40bd-a36c-5f88ac128327.png"">. <img width=""1373"" alt=""Screenshot 2022-07-11 at 16 36 36"" src=""https://user-images.githubusercontent.com/4690904/178302461-a1ab1fb4-b8fa-47a5-94bf-63f89859ced1.png"">",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1005
https://github.com/qupath/qupath/issues/1005:1507,Safety,detect,detection,1507,"different keys: `ANNOTATION_DESCRIPTION` ([here](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core/src/main/java/qupath/lib/objects/PathAnnotationObject.java#L74)) and `note` ([here](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMACommands.java#L122)) respectively. Neither key is ideal for a general purpose.; * I propose introducing a general `text` property. However, it's not totally clear if objects written by previous versions should automatically be updated. If they are, then the data files may not open properly in older QuPath versions.; * One reason for a simple, lower-case property name (e.g. `text`) is that it should be GeoJSON-friendly, and work sensibly as a key. But is there a better key? Via markdown/html, it's possible to smuggle in more than just text.; * Should other object types support text/descriptions?; * **Root objects**: I think yes. It provides a way to append arbitrary text to any image.; * **Detection objects**: Maybe... this would enforce a map being created, which could make each detection considerably more heavyweight. But perhaps it should be permitted, and users simply warned that it's not generally a good idea.; * Consider the sensibleness of the the current implementation, which will:; * Render text as if it's markdown (which shouldn't change anything for most plain text); * Render html directly if the text starts with `<html>`; * Load a web page if the text starts with `https://`. Might be of interest to @yli-hallila especially for https://github.com/yli-hallila/qupath-edu-extension. <img width=""1356"" alt=""Screenshot 2022-07-11 at 16 35 58"" src=""https://user-images.githubusercontent.com/4690904/178302423-15d42432-4af3-40bd-a36c-5f88ac128327.png"">. <img width=""1373"" alt=""Screenshot 2022-07-11 at 16 36 36"" src=""https://user-images.githubusercontent.com/4690904/178302461-a1ab1fb4-b8fa-47a5-94bf-63f89859ced1.png"">",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1005
https://github.com/qupath/qupath/issues/1005:874,Usability,clear,clear,874,"Support for annotation descriptions is improved in #1004 . The screenshots below show the current status. The purpose of this feature request is to discuss further enhancements, in particular:. * Consolidating the idea of an annotation 'description' with a TMA core 'note'. Both use the trick of storing the text in the metadata map, but (inconveniently) use different keys: `ANNOTATION_DESCRIPTION` ([here](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core/src/main/java/qupath/lib/objects/PathAnnotationObject.java#L74)) and `note` ([here](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMACommands.java#L122)) respectively. Neither key is ideal for a general purpose.; * I propose introducing a general `text` property. However, it's not totally clear if objects written by previous versions should automatically be updated. If they are, then the data files may not open properly in older QuPath versions.; * One reason for a simple, lower-case property name (e.g. `text`) is that it should be GeoJSON-friendly, and work sensibly as a key. But is there a better key? Via markdown/html, it's possible to smuggle in more than just text.; * Should other object types support text/descriptions?; * **Root objects**: I think yes. It provides a way to append arbitrary text to any image.; * **Detection objects**: Maybe... this would enforce a map being created, which could make each detection considerably more heavyweight. But perhaps it should be permitted, and users simply warned that it's not generally a good idea.; * Consider the sensibleness of the the current implementation, which will:; * Render text as if it's markdown (which shouldn't change anything for most plain text); * Render html directly if the text starts with `<html>`; * Load a web page if the text starts with `https://`. Might be of interest to @yli-hallila especially for https://github.com/yli-hall",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1005
https://github.com/qupath/qupath/issues/1005:1054,Usability,simpl,simple,1054,"e screenshots below show the current status. The purpose of this feature request is to discuss further enhancements, in particular:. * Consolidating the idea of an annotation 'description' with a TMA core 'note'. Both use the trick of storing the text in the metadata map, but (inconveniently) use different keys: `ANNOTATION_DESCRIPTION` ([here](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core/src/main/java/qupath/lib/objects/PathAnnotationObject.java#L74)) and `note` ([here](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMACommands.java#L122)) respectively. Neither key is ideal for a general purpose.; * I propose introducing a general `text` property. However, it's not totally clear if objects written by previous versions should automatically be updated. If they are, then the data files may not open properly in older QuPath versions.; * One reason for a simple, lower-case property name (e.g. `text`) is that it should be GeoJSON-friendly, and work sensibly as a key. But is there a better key? Via markdown/html, it's possible to smuggle in more than just text.; * Should other object types support text/descriptions?; * **Root objects**: I think yes. It provides a way to append arbitrary text to any image.; * **Detection objects**: Maybe... this would enforce a map being created, which could make each detection considerably more heavyweight. But perhaps it should be permitted, and users simply warned that it's not generally a good idea.; * Consider the sensibleness of the the current implementation, which will:; * Render text as if it's markdown (which shouldn't change anything for most plain text); * Render html directly if the text starts with `<html>`; * Load a web page if the text starts with `https://`. Might be of interest to @yli-hallila especially for https://github.com/yli-hallila/qupath-edu-extension. <img width=""1356"" alt=""Screenshot 2",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1005
https://github.com/qupath/qupath/issues/1005:1594,Usability,simpl,simply,1594,"different keys: `ANNOTATION_DESCRIPTION` ([here](https://github.com/qupath/qupath/blob/75ec9cebe5e3bc5843fc60b07b455ce1215e1fb9/qupath-core/src/main/java/qupath/lib/objects/PathAnnotationObject.java#L74)) and `note` ([here](https://github.com/qupath/qupath/blob/88c7cc45648c1d5b09a840bd1e497ea9a46453aa/qupath-gui-fx/src/main/java/qupath/lib/gui/commands/TMACommands.java#L122)) respectively. Neither key is ideal for a general purpose.; * I propose introducing a general `text` property. However, it's not totally clear if objects written by previous versions should automatically be updated. If they are, then the data files may not open properly in older QuPath versions.; * One reason for a simple, lower-case property name (e.g. `text`) is that it should be GeoJSON-friendly, and work sensibly as a key. But is there a better key? Via markdown/html, it's possible to smuggle in more than just text.; * Should other object types support text/descriptions?; * **Root objects**: I think yes. It provides a way to append arbitrary text to any image.; * **Detection objects**: Maybe... this would enforce a map being created, which could make each detection considerably more heavyweight. But perhaps it should be permitted, and users simply warned that it's not generally a good idea.; * Consider the sensibleness of the the current implementation, which will:; * Render text as if it's markdown (which shouldn't change anything for most plain text); * Render html directly if the text starts with `<html>`; * Load a web page if the text starts with `https://`. Might be of interest to @yli-hallila especially for https://github.com/yli-hallila/qupath-edu-extension. <img width=""1356"" alt=""Screenshot 2022-07-11 at 16 35 58"" src=""https://user-images.githubusercontent.com/4690904/178302423-15d42432-4af3-40bd-a36c-5f88ac128327.png"">. <img width=""1373"" alt=""Screenshot 2022-07-11 at 16 36 36"" src=""https://user-images.githubusercontent.com/4690904/178302461-a1ab1fb4-b8fa-47a5-94bf-63f89859ced1.png"">",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1005
https://github.com/qupath/qupath/issues/1006:305,Deployability,toggle,toggle,305,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/subcellular-spot-detection-problem/69403/12. **To Reproduce**; Steps to reproduce the behavior:; 1. Open any RGB image; 2. Set the image type to *Fluorescence*; 3. Try toggling channels with `1`, `2` or `3`; 4. Observe that channels don't toggle as expected; 6. Check the *Brightness/Contrast* dialog to see what's going on. **Expected behavior**; Pressing `1` should toggle red, `2` should toggle green and `3` should toggle blue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3 (and probably before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1006
https://github.com/qupath/qupath/issues/1006:434,Deployability,toggle,toggle,434,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/subcellular-spot-detection-problem/69403/12. **To Reproduce**; Steps to reproduce the behavior:; 1. Open any RGB image; 2. Set the image type to *Fluorescence*; 3. Try toggling channels with `1`, `2` or `3`; 4. Observe that channels don't toggle as expected; 6. Check the *Brightness/Contrast* dialog to see what's going on. **Expected behavior**; Pressing `1` should toggle red, `2` should toggle green and `3` should toggle blue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3 (and probably before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1006
https://github.com/qupath/qupath/issues/1006:457,Deployability,toggle,toggle,457,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/subcellular-spot-detection-problem/69403/12. **To Reproduce**; Steps to reproduce the behavior:; 1. Open any RGB image; 2. Set the image type to *Fluorescence*; 3. Try toggling channels with `1`, `2` or `3`; 4. Observe that channels don't toggle as expected; 6. Check the *Brightness/Contrast* dialog to see what's going on. **Expected behavior**; Pressing `1` should toggle red, `2` should toggle green and `3` should toggle blue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3 (and probably before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1006
https://github.com/qupath/qupath/issues/1006:485,Deployability,toggle,toggle,485,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/subcellular-spot-detection-problem/69403/12. **To Reproduce**; Steps to reproduce the behavior:; 1. Open any RGB image; 2. Set the image type to *Fluorescence*; 3. Try toggling channels with `1`, `2` or `3`; 4. Observe that channels don't toggle as expected; 6. Check the *Brightness/Contrast* dialog to see what's going on. **Expected behavior**; Pressing `1` should toggle red, `2` should toggle green and `3` should toggle blue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3 (and probably before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1006
https://github.com/qupath/qupath/issues/1006:464,Energy Efficiency,green,green,464,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/subcellular-spot-detection-problem/69403/12. **To Reproduce**; Steps to reproduce the behavior:; 1. Open any RGB image; 2. Set the image type to *Fluorescence*; 3. Try toggling channels with `1`, `2` or `3`; 4. Observe that channels don't toggle as expected; 6. Check the *Brightness/Contrast* dialog to see what's going on. **Expected behavior**; Pressing `1` should toggle red, `2` should toggle green and `3` should toggle blue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3 (and probably before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1006
https://github.com/qupath/qupath/issues/1006:83,Safety,detect,detection-problem,83,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/subcellular-spot-detection-problem/69403/12. **To Reproduce**; Steps to reproduce the behavior:; 1. Open any RGB image; 2. Set the image type to *Fluorescence*; 3. Try toggling channels with `1`, `2` or `3`; 4. Observe that channels don't toggle as expected; 6. Check the *Brightness/Contrast* dialog to see what's going on. **Expected behavior**; Pressing `1` should toggle red, `2` should toggle green and `3` should toggle blue. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3 (and probably before)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1006
https://github.com/qupath/qupath/pull/1008:354,Availability,avail,available,354,* Support specifying threads for parallel writing; * Reverse tiles when writing each plane of a multi-channel output. The second of these makes it possible to reuse cached tiles much more effectively. In one test example using LuCa-7color_Scan1.qptiff it decreased export time from 270s to 188s (although differences may vary considerably depending upon available memory and how expensive tile reading is). Inspiration from this discussion: https://forum.image.sc/t/saving-to-ome-tiff-slow-warpy-and-qupath/69153/50,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1008
https://github.com/qupath/qupath/pull/1008:339,Integrability,depend,depending,339,* Support specifying threads for parallel writing; * Reverse tiles when writing each plane of a multi-channel output. The second of these makes it possible to reuse cached tiles much more effectively. In one test example using LuCa-7color_Scan1.qptiff it decreased export time from 270s to 188s (although differences may vary considerably depending upon available memory and how expensive tile reading is). Inspiration from this discussion: https://forum.image.sc/t/saving-to-ome-tiff-slow-warpy-and-qupath/69153/50,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1008
https://github.com/qupath/qupath/pull/1008:165,Performance,cache,cached,165,* Support specifying threads for parallel writing; * Reverse tiles when writing each plane of a multi-channel output. The second of these makes it possible to reuse cached tiles much more effectively. In one test example using LuCa-7color_Scan1.qptiff it decreased export time from 270s to 188s (although differences may vary considerably depending upon available memory and how expensive tile reading is). Inspiration from this discussion: https://forum.image.sc/t/saving-to-ome-tiff-slow-warpy-and-qupath/69153/50,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1008
https://github.com/qupath/qupath/pull/1008:208,Testability,test,test,208,* Support specifying threads for parallel writing; * Reverse tiles when writing each plane of a multi-channel output. The second of these makes it possible to reuse cached tiles much more effectively. In one test example using LuCa-7color_Scan1.qptiff it decreased export time from 270s to 188s (although differences may vary considerably depending upon available memory and how expensive tile reading is). Inspiration from this discussion: https://forum.image.sc/t/saving-to-ome-tiff-slow-warpy-and-qupath/69153/50,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1008
https://github.com/qupath/qupath/pull/1014:67,Energy Efficiency,Reduce,Reduce,67,"* Make more PathObjectClassifier-related classes as deprecated.; * Reduce the use of Java serialization, and introduce serialization filters",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1014
https://github.com/qupath/qupath/pull/1015:236,Deployability,release,releases,236,"In particular, remove legacy detection classifiers and related code. They are much less maintainable than the current ObjectClassifier implementation, and relied upon serialization + retraining. Serialized classifiers from older QuPath releases couldn't even be read in the latest version due to serialization incompatibilities, or could sometimes be read but would not give the expected results (e.g. because of differences in feature calculations). One significant change is that `PathClassifierTools` has been removed, with the relevant methods moved primarily to `PathObjectTools` or (for channels) `ServerTools`.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1015
https://github.com/qupath/qupath/pull/1015:88,Modifiability,maintainab,maintainable,88,"In particular, remove legacy detection classifiers and related code. They are much less maintainable than the current ObjectClassifier implementation, and relied upon serialization + retraining. Serialized classifiers from older QuPath releases couldn't even be read in the latest version due to serialization incompatibilities, or could sometimes be read but would not give the expected results (e.g. because of differences in feature calculations). One significant change is that `PathClassifierTools` has been removed, with the relevant methods moved primarily to `PathObjectTools` or (for channels) `ServerTools`.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1015
https://github.com/qupath/qupath/pull/1015:29,Safety,detect,detection,29,"In particular, remove legacy detection classifiers and related code. They are much less maintainable than the current ObjectClassifier implementation, and relied upon serialization + retraining. Serialized classifiers from older QuPath releases couldn't even be read in the latest version due to serialization incompatibilities, or could sometimes be read but would not give the expected results (e.g. because of differences in feature calculations). One significant change is that `PathClassifierTools` has been removed, with the relevant methods moved primarily to `PathObjectTools` or (for channels) `ServerTools`.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1015
https://github.com/qupath/qupath/issues/1016:327,Safety,detect,detect,327,"## Bug report. **Describe the bug**; When training an object classifier multiple times, different results can be seen. This only happens (I *think*) whenever the image has been reopened: training is consistent if the image is not closed in the meantime. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image and detect some cells; 2. Train an object classifier with 2 small annotations & default settings; 3. Save the data and close the image; 4. Reopen the image, and train a new classifier with the same annotations and settings; 5. Observe that the classifications (probably) change... indicating that the classifier must be somehow different. **Expected behavior**; Training the same classifier with the same data *and the same RNG seed* should give the same results. **Desktop (please complete the following information):**; - OS: macOS (all presumably); - QuPath v0.3.2 (presumably some before as well). **Additional context**; See https://forum.image.sc/t/how-to-measure-the-staining-intensity-without-positive-cell-detection/66847/14 for the first report of related behaviour*. I'm labelling this as a bug despite my efforts to claim it isn't one :). All relevant RNGs should be properly seeded. I believe the problem occurs because the order of the objects used for training isn't deterministic, because `HashSets` and the like are used along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1016
https://github.com/qupath/qupath/issues/1016:1038,Safety,detect,detection,1038,"## Bug report. **Describe the bug**; When training an object classifier multiple times, different results can be seen. This only happens (I *think*) whenever the image has been reopened: training is consistent if the image is not closed in the meantime. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image and detect some cells; 2. Train an object classifier with 2 small annotations & default settings; 3. Save the data and close the image; 4. Reopen the image, and train a new classifier with the same annotations and settings; 5. Observe that the classifications (probably) change... indicating that the classifier must be somehow different. **Expected behavior**; Training the same classifier with the same data *and the same RNG seed* should give the same results. **Desktop (please complete the following information):**; - OS: macOS (all presumably); - QuPath v0.3.2 (presumably some before as well). **Additional context**; See https://forum.image.sc/t/how-to-measure-the-staining-intensity-without-positive-cell-detection/66847/14 for the first report of related behaviour*. I'm labelling this as a bug despite my efforts to claim it isn't one :). All relevant RNGs should be properly seeded. I believe the problem occurs because the order of the objects used for training isn't deterministic, because `HashSets` and the like are used along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1016
https://github.com/qupath/qupath/issues/1016:1329,Security,Hash,HashSets,1329,"## Bug report. **Describe the bug**; When training an object classifier multiple times, different results can be seen. This only happens (I *think*) whenever the image has been reopened: training is consistent if the image is not closed in the meantime. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image and detect some cells; 2. Train an object classifier with 2 small annotations & default settings; 3. Save the data and close the image; 4. Reopen the image, and train a new classifier with the same annotations and settings; 5. Observe that the classifications (probably) change... indicating that the classifier must be somehow different. **Expected behavior**; Training the same classifier with the same data *and the same RNG seed* should give the same results. **Desktop (please complete the following information):**; - OS: macOS (all presumably); - QuPath v0.3.2 (presumably some before as well). **Additional context**; See https://forum.image.sc/t/how-to-measure-the-staining-intensity-without-positive-cell-detection/66847/14 for the first report of related behaviour*. I'm labelling this as a bug despite my efforts to claim it isn't one :). All relevant RNGs should be properly seeded. I believe the problem occurs because the order of the objects used for training isn't deterministic, because `HashSets` and the like are used along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1016
https://github.com/qupath/qupath/issues/1020:281,Availability,down,downloaded,281,"## QuPath v0.3.2 does not open vsi files; **Describe a bug**; While opening a vsi slide the application crashes. **To Reproduce**; 1. Go to 'File'; 2. Click 'Open'; 3. Choose a file in vsi format; 4. Double click on an image or click 'Open'. **Expected behavior**; Image should be downloaded and opened for viewing. . **Screenshots**; Find attached. The screenshot presents a moment when the application stops working. <img width=""1160"" alt=""Fig1"" src=""https://user-images.githubusercontent.com/109394240/179327300-fa8522c2-021d-44a1-a061-4114b74b63cd.png"">. **Desktop:**; - OS: macOS 11.5.2 (however, my colleagues using Windows reported the same problem); - QuPath v0.3.2. **Additional context**; Version v0.3.0 does not have such a problem. The problem does not exist if you create a project first and add images.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1020
https://github.com/qupath/qupath/issues/1021:566,Deployability,release,release,566,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [x ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is.; After running clearDetections() TMA grid object isEditable property remains false (i.e. TMA grid circles cannot be rearranged etc). **To Reproduce**; Steps to reproduce the behavior:. setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759"", ""Background"" : "" 255 255 255""}');. //De-array TMA; runPlugin('qupath.imagej.detect.dearray.TMADearrayerPluginIJ', '{""coreDiameterMM"": 1.2, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}');; selectTMACores();. //Detect cells using some method such as DAB; runPlugin('qupath.imagej.detect.cells.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.0, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostP",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021
https://github.com/qupath/qupath/issues/1021:763,Deployability,release,release,763,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [x ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is.; After running clearDetections() TMA grid object isEditable property remains false (i.e. TMA grid circles cannot be rearranged etc). **To Reproduce**; Steps to reproduce the behavior:. setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759"", ""Background"" : "" 255 255 255""}');. //De-array TMA; runPlugin('qupath.imagej.detect.dearray.TMADearrayerPluginIJ', '{""coreDiameterMM"": 1.2, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}');; selectTMACores();. //Detect cells using some method such as DAB; runPlugin('qupath.imagej.detect.cells.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.0, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostP",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021
https://github.com/qupath/qupath/issues/1021:1416,Safety,detect,detect,1416,"ug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is.; After running clearDetections() TMA grid object isEditable property remains false (i.e. TMA grid circles cannot be rearranged etc). **To Reproduce**; Steps to reproduce the behavior:. setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759"", ""Background"" : "" 255 255 255""}');. //De-array TMA; runPlugin('qupath.imagej.detect.dearray.TMADearrayerPluginIJ', '{""coreDiameterMM"": 1.2, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}');; selectTMACores();. //Detect cells using some method such as DAB; runPlugin('qupath.imagej.detect.cells.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.0, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": false, ""smoothBoundaries"": true, ""makeMeasurements"": true, ""thresholdCompartment"": ""Cell: DAB OD mean"", ""thresholdPositive1"": 0.2, ""thresholdPositive2"": 0.4, ""thresholdPositive3"": 0.6, ""singleThreshold"": true}');. clearDetections();; fireHierarchyUpdate();; getTMACoreList().each{; println(it.isEditable());; };. INFO: false; INFO: false",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021
https://github.com/qupath/qupath/issues/1021:1627,Safety,Detect,Detect,1627,"://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is.; After running clearDetections() TMA grid object isEditable property remains false (i.e. TMA grid circles cannot be rearranged etc). **To Reproduce**; Steps to reproduce the behavior:. setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759"", ""Background"" : "" 255 255 255""}');. //De-array TMA; runPlugin('qupath.imagej.detect.dearray.TMADearrayerPluginIJ', '{""coreDiameterMM"": 1.2, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}');; selectTMACores();. //Detect cells using some method such as DAB; runPlugin('qupath.imagej.detect.cells.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.0, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": false, ""smoothBoundaries"": true, ""makeMeasurements"": true, ""thresholdCompartment"": ""Cell: DAB OD mean"", ""thresholdPositive1"": 0.2, ""thresholdPositive2"": 0.4, ""thresholdPositive3"": 0.6, ""singleThreshold"": true}');. clearDetections();; fireHierarchyUpdate();; getTMACoreList().each{; println(it.isEditable());; };. INFO: false; INFO: false; INFO: false. **Expected behavior**; As the definition of isEditable() is ""TMA core cannot be edited if it contains any detections,"" I would expect TMA to be editable if you clear detections. Or there could be a setEditable() method to ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021
https://github.com/qupath/qupath/issues/1021:1696,Safety,detect,detect,1696,"NGELOG.md) to see if the bug has already been fixed in the next release; * [x ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is.; After running clearDetections() TMA grid object isEditable property remains false (i.e. TMA grid circles cannot be rearranged etc). **To Reproduce**; Steps to reproduce the behavior:. setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759"", ""Background"" : "" 255 255 255""}');. //De-array TMA; runPlugin('qupath.imagej.detect.dearray.TMADearrayerPluginIJ', '{""coreDiameterMM"": 1.2, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}');; selectTMACores();. //Detect cells using some method such as DAB; runPlugin('qupath.imagej.detect.cells.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.0, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": false, ""smoothBoundaries"": true, ""makeMeasurements"": true, ""thresholdCompartment"": ""Cell: DAB OD mean"", ""thresholdPositive1"": 0.2, ""thresholdPositive2"": 0.4, ""thresholdPositive3"": 0.6, ""singleThreshold"": true}');. clearDetections();; fireHierarchyUpdate();; getTMACoreList().each{; println(it.isEditable());; };. INFO: false; INFO: false; INFO: false. **Expected behavior**; As the definition of isEditable() is ""TMA core cannot be edited if it contains any detections,"" I would expect TMA to be editable if you clear detections. Or there could be a setEditable() method to override. **Screenshots**; If applicable, a",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021
https://github.com/qupath/qupath/issues/1021:1736,Safety,detect,detectionImageBrightfield,1736,"t release; * [x ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is.; After running clearDetections() TMA grid object isEditable property remains false (i.e. TMA grid circles cannot be rearranged etc). **To Reproduce**; Steps to reproduce the behavior:. setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759"", ""Background"" : "" 255 255 255""}');. //De-array TMA; runPlugin('qupath.imagej.detect.dearray.TMADearrayerPluginIJ', '{""coreDiameterMM"": 1.2, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}');; selectTMACores();. //Detect cells using some method such as DAB; runPlugin('qupath.imagej.detect.cells.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.0, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": false, ""smoothBoundaries"": true, ""makeMeasurements"": true, ""thresholdCompartment"": ""Cell: DAB OD mean"", ""thresholdPositive1"": 0.2, ""thresholdPositive2"": 0.4, ""thresholdPositive3"": 0.6, ""singleThreshold"": true}');. clearDetections();; fireHierarchyUpdate();; getTMACoreList().each{; println(it.isEditable());; };. INFO: false; INFO: false; INFO: false. **Expected behavior**; As the definition of isEditable() is ""TMA core cannot be edited if it contains any detections,"" I would expect TMA to be editable if you clear detections. Or there could be a setEditable() method to override. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (pleas",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021
https://github.com/qupath/qupath/issues/1021:2541,Safety,detect,detections,2541,"ons() TMA grid object isEditable property remains false (i.e. TMA grid circles cannot be rearranged etc). **To Reproduce**; Steps to reproduce the behavior:. setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759"", ""Background"" : "" 255 255 255""}');. //De-array TMA; runPlugin('qupath.imagej.detect.dearray.TMADearrayerPluginIJ', '{""coreDiameterMM"": 1.2, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}');; selectTMACores();. //Detect cells using some method such as DAB; runPlugin('qupath.imagej.detect.cells.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.0, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": false, ""smoothBoundaries"": true, ""makeMeasurements"": true, ""thresholdCompartment"": ""Cell: DAB OD mean"", ""thresholdPositive1"": 0.2, ""thresholdPositive2"": 0.4, ""thresholdPositive3"": 0.6, ""singleThreshold"": true}');. clearDetections();; fireHierarchyUpdate();; getTMACoreList().each{; println(it.isEditable());; };. INFO: false; INFO: false; INFO: false. **Expected behavior**; As the definition of isEditable() is ""TMA core cannot be edited if it contains any detections,"" I would expect TMA to be editable if you clear detections. Or there could be a setEditable() method to override. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: Windows 10 10.0; - QuPath Version 0.3.2. **Additional context**; I was not able to find mentions of this issue using the search term of 'clearDetections()'",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021
https://github.com/qupath/qupath/issues/1021:2601,Safety,detect,detections,2601,"ons() TMA grid object isEditable property remains false (i.e. TMA grid circles cannot be rearranged etc). **To Reproduce**; Steps to reproduce the behavior:. setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759"", ""Background"" : "" 255 255 255""}');. //De-array TMA; runPlugin('qupath.imagej.detect.dearray.TMADearrayerPluginIJ', '{""coreDiameterMM"": 1.2, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}');; selectTMACores();. //Detect cells using some method such as DAB; runPlugin('qupath.imagej.detect.cells.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.0, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": false, ""smoothBoundaries"": true, ""makeMeasurements"": true, ""thresholdCompartment"": ""Cell: DAB OD mean"", ""thresholdPositive1"": 0.2, ""thresholdPositive2"": 0.4, ""thresholdPositive3"": 0.6, ""singleThreshold"": true}');. clearDetections();; fireHierarchyUpdate();; getTMACoreList().each{; println(it.isEditable());; };. INFO: false; INFO: false; INFO: false. **Expected behavior**; As the definition of isEditable() is ""TMA core cannot be edited if it contains any detections,"" I would expect TMA to be editable if you clear detections. Or there could be a setEditable() method to override. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: Windows 10 10.0; - QuPath Version 0.3.2. **Additional context**; I was not able to find mentions of this issue using the search term of 'clearDetections()'",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021
https://github.com/qupath/qupath/issues/1021:887,Usability,clear,clear,887,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [x ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is.; After running clearDetections() TMA grid object isEditable property remains false (i.e. TMA grid circles cannot be rearranged etc). **To Reproduce**; Steps to reproduce the behavior:. setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759"", ""Background"" : "" 255 255 255""}');. //De-array TMA; runPlugin('qupath.imagej.detect.dearray.TMADearrayerPluginIJ', '{""coreDiameterMM"": 1.2, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}');; selectTMACores();. //Detect cells using some method such as DAB; runPlugin('qupath.imagej.detect.cells.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.0, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostP",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021
https://github.com/qupath/qupath/issues/1021:952,Usability,clear,clearDetections,952,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [x ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is.; After running clearDetections() TMA grid object isEditable property remains false (i.e. TMA grid circles cannot be rearranged etc). **To Reproduce**; Steps to reproduce the behavior:. setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759"", ""Background"" : "" 255 255 255""}');. //De-array TMA; runPlugin('qupath.imagej.detect.dearray.TMADearrayerPluginIJ', '{""coreDiameterMM"": 1.2, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}');; selectTMACores();. //Detect cells using some method such as DAB; runPlugin('qupath.imagej.detect.cells.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.0, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostP",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021
https://github.com/qupath/qupath/issues/1021:2297,Usability,clear,clearDetections,2297,"ons() TMA grid object isEditable property remains false (i.e. TMA grid circles cannot be rearranged etc). **To Reproduce**; Steps to reproduce the behavior:. setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759"", ""Background"" : "" 255 255 255""}');. //De-array TMA; runPlugin('qupath.imagej.detect.dearray.TMADearrayerPluginIJ', '{""coreDiameterMM"": 1.2, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}');; selectTMACores();. //Detect cells using some method such as DAB; runPlugin('qupath.imagej.detect.cells.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.0, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": false, ""smoothBoundaries"": true, ""makeMeasurements"": true, ""thresholdCompartment"": ""Cell: DAB OD mean"", ""thresholdPositive1"": 0.2, ""thresholdPositive2"": 0.4, ""thresholdPositive3"": 0.6, ""singleThreshold"": true}');. clearDetections();; fireHierarchyUpdate();; getTMACoreList().each{; println(it.isEditable());; };. INFO: false; INFO: false; INFO: false. **Expected behavior**; As the definition of isEditable() is ""TMA core cannot be edited if it contains any detections,"" I would expect TMA to be editable if you clear detections. Or there could be a setEditable() method to override. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: Windows 10 10.0; - QuPath Version 0.3.2. **Additional context**; I was not able to find mentions of this issue using the search term of 'clearDetections()'",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021
https://github.com/qupath/qupath/issues/1021:2595,Usability,clear,clear,2595,"ons() TMA grid object isEditable property remains false (i.e. TMA grid circles cannot be rearranged etc). **To Reproduce**; Steps to reproduce the behavior:. setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759"", ""Background"" : "" 255 255 255""}');. //De-array TMA; runPlugin('qupath.imagej.detect.dearray.TMADearrayerPluginIJ', '{""coreDiameterMM"": 1.2, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}');; selectTMACores();. //Detect cells using some method such as DAB; runPlugin('qupath.imagej.detect.cells.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.0, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": false, ""smoothBoundaries"": true, ""makeMeasurements"": true, ""thresholdCompartment"": ""Cell: DAB OD mean"", ""thresholdPositive1"": 0.2, ""thresholdPositive2"": 0.4, ""thresholdPositive3"": 0.6, ""singleThreshold"": true}');. clearDetections();; fireHierarchyUpdate();; getTMACoreList().each{; println(it.isEditable());; };. INFO: false; INFO: false; INFO: false. **Expected behavior**; As the definition of isEditable() is ""TMA core cannot be edited if it contains any detections,"" I would expect TMA to be editable if you clear detections. Or there could be a setEditable() method to override. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: Windows 10 10.0; - QuPath Version 0.3.2. **Additional context**; I was not able to find mentions of this issue using the search term of 'clearDetections()'",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021
https://github.com/qupath/qupath/issues/1021:2946,Usability,clear,clearDetections,2946,"ons() TMA grid object isEditable property remains false (i.e. TMA grid circles cannot be rearranged etc). **To Reproduce**; Steps to reproduce the behavior:. setImageType('BRIGHTFIELD_H_DAB');; setColorDeconvolutionStains('{""Name"" : ""H-DAB default"", ""Stain 1"" : ""Hematoxylin"", ""Values 1"" : ""0.65111 0.70119 0.29049"", ""Stain 2"" : ""DAB"", ""Values 2"" : ""0.26917 0.56824 0.77759"", ""Background"" : "" 255 255 255""}');. //De-array TMA; runPlugin('qupath.imagej.detect.dearray.TMADearrayerPluginIJ', '{""coreDiameterMM"": 1.2, ""labelsHorizontal"": ""1-16"", ""labelsVertical"": ""A-J"", ""labelOrder"": ""Row first"", ""densityThreshold"": 5, ""boundsScale"": 105}');; selectTMACores();. //Detect cells using some method such as DAB; runPlugin('qupath.imagej.detect.cells.PositiveCellDetection', '{""detectionImageBrightfield"": ""Hematoxylin OD"", ""requestedPixelSizeMicrons"": 0.5, ""backgroundRadiusMicrons"": 8.0, ""medianRadiusMicrons"": 0.0, ""sigmaMicrons"": 1.0, ""minAreaMicrons"": 10.0, ""maxAreaMicrons"": 400.0, ""threshold"": 0.1, ""maxBackground"": 2.0, ""watershedPostProcess"": true, ""excludeDAB"": false, ""cellExpansionMicrons"": 5.0, ""includeNuclei"": false, ""smoothBoundaries"": true, ""makeMeasurements"": true, ""thresholdCompartment"": ""Cell: DAB OD mean"", ""thresholdPositive1"": 0.2, ""thresholdPositive2"": 0.4, ""thresholdPositive3"": 0.6, ""singleThreshold"": true}');. clearDetections();; fireHierarchyUpdate();; getTMACoreList().each{; println(it.isEditable());; };. INFO: false; INFO: false; INFO: false. **Expected behavior**; As the definition of isEditable() is ""TMA core cannot be edited if it contains any detections,"" I would expect TMA to be editable if you clear detections. Or there could be a setEditable() method to override. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: Windows 10 10.0; - QuPath Version 0.3.2. **Additional context**; I was not able to find mentions of this issue using the search term of 'clearDetections()'",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1021
https://github.com/qupath/qupath/issues/1022:183,Availability,error,error-when-trying-to-run-cell-detection-plugin,183,"## Bug report. **Describe the bug**; It isn't possible to run cell detection on channels with `""` in the name. This has come up twice on the forum so far:; * https://forum.image.sc/t/error-when-trying-to-run-cell-detection-plugin/62739; * https://forum.image.sc/t/error-in-loading-ome-tiff-images-in-qupath/29758/16. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a fluorescence (non-RGB) image; 2. Change a channel name to `""DAPI""` or similar; 3. Try to run cell detection; 4. Observe an error - something pretty & informative like5. ; ```; Plugin error: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 23 path $.; ```. **Expected behavior**; A `""` in a channel name isn't a good idea, but it shouldn't be a deal breaker. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and earlier. **Additional context**; The root cause is my dodgy JSON-converting code at https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/plugins/parameters/ParameterList.java#L585. Switching to use `GsonTools` should resolve it, but this will need a bit of care to ensure nothing breaks along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1022
https://github.com/qupath/qupath/issues/1022:264,Availability,error,error-in-loading-ome-tiff-images-in-qupath,264,"## Bug report. **Describe the bug**; It isn't possible to run cell detection on channels with `""` in the name. This has come up twice on the forum so far:; * https://forum.image.sc/t/error-when-trying-to-run-cell-detection-plugin/62739; * https://forum.image.sc/t/error-in-loading-ome-tiff-images-in-qupath/29758/16. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a fluorescence (non-RGB) image; 2. Change a channel name to `""DAPI""` or similar; 3. Try to run cell detection; 4. Observe an error - something pretty & informative like5. ; ```; Plugin error: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 23 path $.; ```. **Expected behavior**; A `""` in a channel name isn't a good idea, but it shouldn't be a deal breaker. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and earlier. **Additional context**; The root cause is my dodgy JSON-converting code at https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/plugins/parameters/ParameterList.java#L585. Switching to use `GsonTools` should resolve it, but this will need a bit of care to ensure nothing breaks along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1022
https://github.com/qupath/qupath/issues/1022:502,Availability,error,error,502,"## Bug report. **Describe the bug**; It isn't possible to run cell detection on channels with `""` in the name. This has come up twice on the forum so far:; * https://forum.image.sc/t/error-when-trying-to-run-cell-detection-plugin/62739; * https://forum.image.sc/t/error-in-loading-ome-tiff-images-in-qupath/29758/16. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a fluorescence (non-RGB) image; 2. Change a channel name to `""DAPI""` or similar; 3. Try to run cell detection; 4. Observe an error - something pretty & informative like5. ; ```; Plugin error: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 23 path $.; ```. **Expected behavior**; A `""` in a channel name isn't a good idea, but it shouldn't be a deal breaker. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and earlier. **Additional context**; The root cause is my dodgy JSON-converting code at https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/plugins/parameters/ParameterList.java#L585. Switching to use `GsonTools` should resolve it, but this will need a bit of care to ensure nothing breaks along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1022
https://github.com/qupath/qupath/issues/1022:562,Availability,error,error,562,"## Bug report. **Describe the bug**; It isn't possible to run cell detection on channels with `""` in the name. This has come up twice on the forum so far:; * https://forum.image.sc/t/error-when-trying-to-run-cell-detection-plugin/62739; * https://forum.image.sc/t/error-in-loading-ome-tiff-images-in-qupath/29758/16. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a fluorescence (non-RGB) image; 2. Change a channel name to `""DAPI""` or similar; 3. Try to run cell detection; 4. Observe an error - something pretty & informative like5. ; ```; Plugin error: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 23 path $.; ```. **Expected behavior**; A `""` in a channel name isn't a good idea, but it shouldn't be a deal breaker. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and earlier. **Additional context**; The root cause is my dodgy JSON-converting code at https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/plugins/parameters/ParameterList.java#L585. Switching to use `GsonTools` should resolve it, but this will need a bit of care to ensure nothing breaks along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1022
https://github.com/qupath/qupath/issues/1022:223,Modifiability,plugin,plugin,223,"## Bug report. **Describe the bug**; It isn't possible to run cell detection on channels with `""` in the name. This has come up twice on the forum so far:; * https://forum.image.sc/t/error-when-trying-to-run-cell-detection-plugin/62739; * https://forum.image.sc/t/error-in-loading-ome-tiff-images-in-qupath/29758/16. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a fluorescence (non-RGB) image; 2. Change a channel name to `""DAPI""` or similar; 3. Try to run cell detection; 4. Observe an error - something pretty & informative like5. ; ```; Plugin error: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 23 path $.; ```. **Expected behavior**; A `""` in a channel name isn't a good idea, but it shouldn't be a deal breaker. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and earlier. **Additional context**; The root cause is my dodgy JSON-converting code at https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/plugins/parameters/ParameterList.java#L585. Switching to use `GsonTools` should resolve it, but this will need a bit of care to ensure nothing breaks along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1022
https://github.com/qupath/qupath/issues/1022:555,Modifiability,Plugin,Plugin,555,"## Bug report. **Describe the bug**; It isn't possible to run cell detection on channels with `""` in the name. This has come up twice on the forum so far:; * https://forum.image.sc/t/error-when-trying-to-run-cell-detection-plugin/62739; * https://forum.image.sc/t/error-in-loading-ome-tiff-images-in-qupath/29758/16. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a fluorescence (non-RGB) image; 2. Change a channel name to `""DAPI""` or similar; 3. Try to run cell detection; 4. Observe an error - something pretty & informative like5. ; ```; Plugin error: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 23 path $.; ```. **Expected behavior**; A `""` in a channel name isn't a good idea, but it shouldn't be a deal breaker. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and earlier. **Additional context**; The root cause is my dodgy JSON-converting code at https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/plugins/parameters/ParameterList.java#L585. Switching to use `GsonTools` should resolve it, but this will need a bit of care to ensure nothing breaks along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1022
https://github.com/qupath/qupath/issues/1022:1025,Modifiability,plugin,plugins,1025,"## Bug report. **Describe the bug**; It isn't possible to run cell detection on channels with `""` in the name. This has come up twice on the forum so far:; * https://forum.image.sc/t/error-when-trying-to-run-cell-detection-plugin/62739; * https://forum.image.sc/t/error-in-loading-ome-tiff-images-in-qupath/29758/16. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a fluorescence (non-RGB) image; 2. Change a channel name to `""DAPI""` or similar; 3. Try to run cell detection; 4. Observe an error - something pretty & informative like5. ; ```; Plugin error: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 23 path $.; ```. **Expected behavior**; A `""` in a channel name isn't a good idea, but it shouldn't be a deal breaker. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and earlier. **Additional context**; The root cause is my dodgy JSON-converting code at https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/plugins/parameters/ParameterList.java#L585. Switching to use `GsonTools` should resolve it, but this will need a bit of care to ensure nothing breaks along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1022
https://github.com/qupath/qupath/issues/1022:273,Performance,load,loading-ome-tiff-images-in-qupath,273,"## Bug report. **Describe the bug**; It isn't possible to run cell detection on channels with `""` in the name. This has come up twice on the forum so far:; * https://forum.image.sc/t/error-when-trying-to-run-cell-detection-plugin/62739; * https://forum.image.sc/t/error-in-loading-ome-tiff-images-in-qupath/29758/16. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a fluorescence (non-RGB) image; 2. Change a channel name to `""DAPI""` or similar; 3. Try to run cell detection; 4. Observe an error - something pretty & informative like5. ; ```; Plugin error: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 23 path $.; ```. **Expected behavior**; A `""` in a channel name isn't a good idea, but it shouldn't be a deal breaker. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and earlier. **Additional context**; The root cause is my dodgy JSON-converting code at https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/plugins/parameters/ParameterList.java#L585. Switching to use `GsonTools` should resolve it, but this will need a bit of care to ensure nothing breaks along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1022
https://github.com/qupath/qupath/issues/1022:67,Safety,detect,detection,67,"## Bug report. **Describe the bug**; It isn't possible to run cell detection on channels with `""` in the name. This has come up twice on the forum so far:; * https://forum.image.sc/t/error-when-trying-to-run-cell-detection-plugin/62739; * https://forum.image.sc/t/error-in-loading-ome-tiff-images-in-qupath/29758/16. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a fluorescence (non-RGB) image; 2. Change a channel name to `""DAPI""` or similar; 3. Try to run cell detection; 4. Observe an error - something pretty & informative like5. ; ```; Plugin error: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 23 path $.; ```. **Expected behavior**; A `""` in a channel name isn't a good idea, but it shouldn't be a deal breaker. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and earlier. **Additional context**; The root cause is my dodgy JSON-converting code at https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/plugins/parameters/ParameterList.java#L585. Switching to use `GsonTools` should resolve it, but this will need a bit of care to ensure nothing breaks along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1022
https://github.com/qupath/qupath/issues/1022:213,Safety,detect,detection-plugin,213,"## Bug report. **Describe the bug**; It isn't possible to run cell detection on channels with `""` in the name. This has come up twice on the forum so far:; * https://forum.image.sc/t/error-when-trying-to-run-cell-detection-plugin/62739; * https://forum.image.sc/t/error-in-loading-ome-tiff-images-in-qupath/29758/16. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a fluorescence (non-RGB) image; 2. Change a channel name to `""DAPI""` or similar; 3. Try to run cell detection; 4. Observe an error - something pretty & informative like5. ; ```; Plugin error: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 23 path $.; ```. **Expected behavior**; A `""` in a channel name isn't a good idea, but it shouldn't be a deal breaker. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and earlier. **Additional context**; The root cause is my dodgy JSON-converting code at https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/plugins/parameters/ParameterList.java#L585. Switching to use `GsonTools` should resolve it, but this will need a bit of care to ensure nothing breaks along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1022
https://github.com/qupath/qupath/issues/1022:477,Safety,detect,detection,477,"## Bug report. **Describe the bug**; It isn't possible to run cell detection on channels with `""` in the name. This has come up twice on the forum so far:; * https://forum.image.sc/t/error-when-trying-to-run-cell-detection-plugin/62739; * https://forum.image.sc/t/error-in-loading-ome-tiff-images-in-qupath/29758/16. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a fluorescence (non-RGB) image; 2. Change a channel name to `""DAPI""` or similar; 3. Try to run cell detection; 4. Observe an error - something pretty & informative like5. ; ```; Plugin error: com.google.gson.stream.MalformedJsonException: Unterminated object at line 1 column 23 path $.; ```. **Expected behavior**; A `""` in a channel name isn't a good idea, but it shouldn't be a deal breaker. **Desktop (please complete the following information):**; - OS: All; - QuPath v0.3.2 and earlier. **Additional context**; The root cause is my dodgy JSON-converting code at https://github.com/qupath/qupath/blob/main/qupath-core/src/main/java/qupath/lib/plugins/parameters/ParameterList.java#L585. Switching to use `GsonTools` should resolve it, but this will need a bit of care to ensure nothing breaks along the way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1022
https://github.com/qupath/qupath/issues/1023:178,Deployability,release,release,178,"* [x ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; In QuPath 0.2.3 *.czi files (produced from Zeiss Axioscan) open in full resolution. In QuPath 0.3.2 the same file opens in low resolution (highly pixelated) and can not be viewed at higher resolution. . **To Reproduce**; Steps to reproduce the behavior:; 1. Open QuPath 0.3.2; 2. Drag and drop *.czi file; 3. *.czi file shows in low resolution. **Expected behavior**; The file should open at appropriate resolution as it does in QuPath 0.2.3. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [Windows 10]; - QuPath Version [0.3.2]. **Additional context**; Add any other context about the problem here.; ![Screen snapshot Qupath 0 2 3](https://user-images.githubusercontent.com/109750856/180259298-960d5dd7-2abc-4ea6-8688-3421e453a4e7.png); ![Screen snapshot Qupath 0 3 2](https://user-images.githubusercontent.com/109750856/180259377-d308150d-c89c-4bba-a715-f080f5fb5f80.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1023
https://github.com/qupath/qupath/issues/1023:375,Deployability,release,release,375,"* [x ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; In QuPath 0.2.3 *.czi files (produced from Zeiss Axioscan) open in full resolution. In QuPath 0.3.2 the same file opens in low resolution (highly pixelated) and can not be viewed at higher resolution. . **To Reproduce**; Steps to reproduce the behavior:; 1. Open QuPath 0.3.2; 2. Drag and drop *.czi file; 3. *.czi file shows in low resolution. **Expected behavior**; The file should open at appropriate resolution as it does in QuPath 0.2.3. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [Windows 10]; - QuPath Version [0.3.2]. **Additional context**; Add any other context about the problem here.; ![Screen snapshot Qupath 0 2 3](https://user-images.githubusercontent.com/109750856/180259298-960d5dd7-2abc-4ea6-8688-3421e453a4e7.png); ![Screen snapshot Qupath 0 3 2](https://user-images.githubusercontent.com/109750856/180259377-d308150d-c89c-4bba-a715-f080f5fb5f80.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1023
https://github.com/qupath/qupath/pull/1025:569,Usability,Simpl,SimplePluginWorkflowStep,569,"This provides an alternative to needing to do awkward string concatenation when changing arguments within a script. Instead use:; ```groovy; runPlugin(className, [""someArg"": value]); ```. Also add runPlugin methods that take a Map as first input, which makes it possible to use Groovy keyword arguments, e.g. ```groovy; runPlugin(className, someArg: value); runPlugin(someArg: value, className); ```. Also remove semi-colons from the end of lines for auto-generated scripts (since they were added inconsistently), and add (private, experimental) system property within SimplePluginWorkflowStep to explore using Maps rather than Strings in auto-generated scripts.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1025
https://github.com/qupath/qupath/issues/1027:296,Deployability,release,releases,296,"Organizations who would like to use your tool might want to verify the binaries you distribute are not being tampered with in transet. One easy way to make that easy (as opposed to have such organizations build your tool from scratch) would be to publish the binaries with MD5/SHA1 hashes on the releases page. You would make the life of IT employees in such organizations a whole lot easier!. Thanks,. Kris",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1027
https://github.com/qupath/qupath/issues/1027:282,Security,hash,hashes,282,"Organizations who would like to use your tool might want to verify the binaries you distribute are not being tampered with in transet. One easy way to make that easy (as opposed to have such organizations build your tool from scratch) would be to publish the binaries with MD5/SHA1 hashes on the releases page. You would make the life of IT employees in such organizations a whole lot easier!. Thanks,. Kris",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1027
https://github.com/qupath/qupath/issues/1029:891,Availability,ping,ping,891,"## Feature request. **Is your feature request related to a problem? Please describe.**; Currently, the only way to know when Run for project completes is by actively watching the progress bar. For analyses that take many hours to complete, this is not feasible as most users would be working on something else, leaving QuPath in the background. Knowing when the analysis is complete will be helpful to be time-efficient with work. **Describe the solution you'd like**; A ""Notify when complete"" checkbox that when checked, will result in an audible notification and maybe cause QuPath to flash in the taskbar after ""Run for project"" is complete.; ![image](https://user-images.githubusercontent.com/57093006/181712393-8dfdd384-43a7-4645-b4ee-e7732005ec18.png). **Describe alternatives you've considered**; Currently, adding the following lines to the end of the script will result in a double ping, which is decently audible at least on Windows. One issue with this is that the last image needs to be explicitly specified, which may vary as the user works on the project.; ```; def name = GeneralTools.getNameWithoutExtension(getCurrentImageData().getServer().getMetadata().getName()); if(name.contains(""last_imageName"")){; java.awt.Toolkit.defaultToolkit.beep(); Thread.sleep(1000); java.awt.Toolkit.defaultToolkit.beep(); }; ```. **Additional context**; @petebankhead has mentioned that the sound is underwhelming on Mac OS, but I think that `beep()` uses the default notification sound from the OS. If necessary, QuPath could potentially come with a small custom sound file for notifications to be consistent across different OS.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1029
https://github.com/qupath/qupath/issues/1029:410,Energy Efficiency,efficient,efficient,410,"## Feature request. **Is your feature request related to a problem? Please describe.**; Currently, the only way to know when Run for project completes is by actively watching the progress bar. For analyses that take many hours to complete, this is not feasible as most users would be working on something else, leaving QuPath in the background. Knowing when the analysis is complete will be helpful to be time-efficient with work. **Describe the solution you'd like**; A ""Notify when complete"" checkbox that when checked, will result in an audible notification and maybe cause QuPath to flash in the taskbar after ""Run for project"" is complete.; ![image](https://user-images.githubusercontent.com/57093006/181712393-8dfdd384-43a7-4645-b4ee-e7732005ec18.png). **Describe alternatives you've considered**; Currently, adding the following lines to the end of the script will result in a double ping, which is decently audible at least on Windows. One issue with this is that the last image needs to be explicitly specified, which may vary as the user works on the project.; ```; def name = GeneralTools.getNameWithoutExtension(getCurrentImageData().getServer().getMetadata().getName()); if(name.contains(""last_imageName"")){; java.awt.Toolkit.defaultToolkit.beep(); Thread.sleep(1000); java.awt.Toolkit.defaultToolkit.beep(); }; ```. **Additional context**; @petebankhead has mentioned that the sound is underwhelming on Mac OS, but I think that `beep()` uses the default notification sound from the OS. If necessary, QuPath could potentially come with a small custom sound file for notifications to be consistent across different OS.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1029
https://github.com/qupath/qupath/issues/1029:179,Usability,progress bar,progress bar,179,"## Feature request. **Is your feature request related to a problem? Please describe.**; Currently, the only way to know when Run for project completes is by actively watching the progress bar. For analyses that take many hours to complete, this is not feasible as most users would be working on something else, leaving QuPath in the background. Knowing when the analysis is complete will be helpful to be time-efficient with work. **Describe the solution you'd like**; A ""Notify when complete"" checkbox that when checked, will result in an audible notification and maybe cause QuPath to flash in the taskbar after ""Run for project"" is complete.; ![image](https://user-images.githubusercontent.com/57093006/181712393-8dfdd384-43a7-4645-b4ee-e7732005ec18.png). **Describe alternatives you've considered**; Currently, adding the following lines to the end of the script will result in a double ping, which is decently audible at least on Windows. One issue with this is that the last image needs to be explicitly specified, which may vary as the user works on the project.; ```; def name = GeneralTools.getNameWithoutExtension(getCurrentImageData().getServer().getMetadata().getName()); if(name.contains(""last_imageName"")){; java.awt.Toolkit.defaultToolkit.beep(); Thread.sleep(1000); java.awt.Toolkit.defaultToolkit.beep(); }; ```. **Additional context**; @petebankhead has mentioned that the sound is underwhelming on Mac OS, but I think that `beep()` uses the default notification sound from the OS. If necessary, QuPath could potentially come with a small custom sound file for notifications to be consistent across different OS.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1029
https://github.com/qupath/qupath/issues/1032:414,Modifiability,inherit,inherits,414,"Calculate a negative distance to the inner surface of annotations rather than saving the distance from the detection to annotation as zero. As mentioned in several places on the forum, while it is possible to invert an annotation in order to measure the distance to annotations (2D) for detections within a particular annotation, it requires some coding and is a bit awkward. As inverting the annotation no longer inherits the class of the inverted annotation, that also adds an extra step that might be difficult for newer users. ; Finally, large complex annotations may stress some systems to invert, so it would be convenient to avoid this step if possible. ; Current workaround: https://forum.image.sc/t/distance-of-detections-to-border-of-parent-annotation/70199/9?u=research_associate; Some other instances of this coming up; https://forum.image.sc/t/need-help-with-troubleshooting-distance-to-annotation-calculation/48051/4?u=research_associate; https://forum.image.sc/t/qupath-distance-to-annotation-border-from-both-inside-and-outside-of-the-annotation/40643/3?u=research_associate; https://forum.image.sc/t/qupath-distance-between-annotations/47960/7?u=research_associate. Hopefully this could be as simple as replacing the logic that sets inside values to zero with multiplying by negative one, but I'm not sure. https://github.com/qupath/qupath/blob/053efeff6d941e7a73beab5445cf0d6238ed97b7/qupath-core/src/main/java/qupath/lib/analysis/DistanceTools.java#L187; I didn't see anything obvious, so guessing it has to do with how the geometries are being used. Additionally, it would probably be nice if it ""smartly"" took into account TMA core borders as well. Though _that_ would probably be a bit more complicated.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1032
https://github.com/qupath/qupath/issues/1032:107,Safety,detect,detection,107,"Calculate a negative distance to the inner surface of annotations rather than saving the distance from the detection to annotation as zero. As mentioned in several places on the forum, while it is possible to invert an annotation in order to measure the distance to annotations (2D) for detections within a particular annotation, it requires some coding and is a bit awkward. As inverting the annotation no longer inherits the class of the inverted annotation, that also adds an extra step that might be difficult for newer users. ; Finally, large complex annotations may stress some systems to invert, so it would be convenient to avoid this step if possible. ; Current workaround: https://forum.image.sc/t/distance-of-detections-to-border-of-parent-annotation/70199/9?u=research_associate; Some other instances of this coming up; https://forum.image.sc/t/need-help-with-troubleshooting-distance-to-annotation-calculation/48051/4?u=research_associate; https://forum.image.sc/t/qupath-distance-to-annotation-border-from-both-inside-and-outside-of-the-annotation/40643/3?u=research_associate; https://forum.image.sc/t/qupath-distance-between-annotations/47960/7?u=research_associate. Hopefully this could be as simple as replacing the logic that sets inside values to zero with multiplying by negative one, but I'm not sure. https://github.com/qupath/qupath/blob/053efeff6d941e7a73beab5445cf0d6238ed97b7/qupath-core/src/main/java/qupath/lib/analysis/DistanceTools.java#L187; I didn't see anything obvious, so guessing it has to do with how the geometries are being used. Additionally, it would probably be nice if it ""smartly"" took into account TMA core borders as well. Though _that_ would probably be a bit more complicated.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1032
https://github.com/qupath/qupath/issues/1032:287,Safety,detect,detections,287,"Calculate a negative distance to the inner surface of annotations rather than saving the distance from the detection to annotation as zero. As mentioned in several places on the forum, while it is possible to invert an annotation in order to measure the distance to annotations (2D) for detections within a particular annotation, it requires some coding and is a bit awkward. As inverting the annotation no longer inherits the class of the inverted annotation, that also adds an extra step that might be difficult for newer users. ; Finally, large complex annotations may stress some systems to invert, so it would be convenient to avoid this step if possible. ; Current workaround: https://forum.image.sc/t/distance-of-detections-to-border-of-parent-annotation/70199/9?u=research_associate; Some other instances of this coming up; https://forum.image.sc/t/need-help-with-troubleshooting-distance-to-annotation-calculation/48051/4?u=research_associate; https://forum.image.sc/t/qupath-distance-to-annotation-border-from-both-inside-and-outside-of-the-annotation/40643/3?u=research_associate; https://forum.image.sc/t/qupath-distance-between-annotations/47960/7?u=research_associate. Hopefully this could be as simple as replacing the logic that sets inside values to zero with multiplying by negative one, but I'm not sure. https://github.com/qupath/qupath/blob/053efeff6d941e7a73beab5445cf0d6238ed97b7/qupath-core/src/main/java/qupath/lib/analysis/DistanceTools.java#L187; I didn't see anything obvious, so guessing it has to do with how the geometries are being used. Additionally, it would probably be nice if it ""smartly"" took into account TMA core borders as well. Though _that_ would probably be a bit more complicated.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1032
https://github.com/qupath/qupath/issues/1032:632,Safety,avoid,avoid,632,"Calculate a negative distance to the inner surface of annotations rather than saving the distance from the detection to annotation as zero. As mentioned in several places on the forum, while it is possible to invert an annotation in order to measure the distance to annotations (2D) for detections within a particular annotation, it requires some coding and is a bit awkward. As inverting the annotation no longer inherits the class of the inverted annotation, that also adds an extra step that might be difficult for newer users. ; Finally, large complex annotations may stress some systems to invert, so it would be convenient to avoid this step if possible. ; Current workaround: https://forum.image.sc/t/distance-of-detections-to-border-of-parent-annotation/70199/9?u=research_associate; Some other instances of this coming up; https://forum.image.sc/t/need-help-with-troubleshooting-distance-to-annotation-calculation/48051/4?u=research_associate; https://forum.image.sc/t/qupath-distance-to-annotation-border-from-both-inside-and-outside-of-the-annotation/40643/3?u=research_associate; https://forum.image.sc/t/qupath-distance-between-annotations/47960/7?u=research_associate. Hopefully this could be as simple as replacing the logic that sets inside values to zero with multiplying by negative one, but I'm not sure. https://github.com/qupath/qupath/blob/053efeff6d941e7a73beab5445cf0d6238ed97b7/qupath-core/src/main/java/qupath/lib/analysis/DistanceTools.java#L187; I didn't see anything obvious, so guessing it has to do with how the geometries are being used. Additionally, it would probably be nice if it ""smartly"" took into account TMA core borders as well. Though _that_ would probably be a bit more complicated.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1032
https://github.com/qupath/qupath/issues/1032:720,Safety,detect,detections-to-border-of-parent-annotation,720,"Calculate a negative distance to the inner surface of annotations rather than saving the distance from the detection to annotation as zero. As mentioned in several places on the forum, while it is possible to invert an annotation in order to measure the distance to annotations (2D) for detections within a particular annotation, it requires some coding and is a bit awkward. As inverting the annotation no longer inherits the class of the inverted annotation, that also adds an extra step that might be difficult for newer users. ; Finally, large complex annotations may stress some systems to invert, so it would be convenient to avoid this step if possible. ; Current workaround: https://forum.image.sc/t/distance-of-detections-to-border-of-parent-annotation/70199/9?u=research_associate; Some other instances of this coming up; https://forum.image.sc/t/need-help-with-troubleshooting-distance-to-annotation-calculation/48051/4?u=research_associate; https://forum.image.sc/t/qupath-distance-to-annotation-border-from-both-inside-and-outside-of-the-annotation/40643/3?u=research_associate; https://forum.image.sc/t/qupath-distance-between-annotations/47960/7?u=research_associate. Hopefully this could be as simple as replacing the logic that sets inside values to zero with multiplying by negative one, but I'm not sure. https://github.com/qupath/qupath/blob/053efeff6d941e7a73beab5445cf0d6238ed97b7/qupath-core/src/main/java/qupath/lib/analysis/DistanceTools.java#L187; I didn't see anything obvious, so guessing it has to do with how the geometries are being used. Additionally, it would probably be nice if it ""smartly"" took into account TMA core borders as well. Though _that_ would probably be a bit more complicated.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1032
https://github.com/qupath/qupath/issues/1032:1234,Testability,log,logic,1234,"Calculate a negative distance to the inner surface of annotations rather than saving the distance from the detection to annotation as zero. As mentioned in several places on the forum, while it is possible to invert an annotation in order to measure the distance to annotations (2D) for detections within a particular annotation, it requires some coding and is a bit awkward. As inverting the annotation no longer inherits the class of the inverted annotation, that also adds an extra step that might be difficult for newer users. ; Finally, large complex annotations may stress some systems to invert, so it would be convenient to avoid this step if possible. ; Current workaround: https://forum.image.sc/t/distance-of-detections-to-border-of-parent-annotation/70199/9?u=research_associate; Some other instances of this coming up; https://forum.image.sc/t/need-help-with-troubleshooting-distance-to-annotation-calculation/48051/4?u=research_associate; https://forum.image.sc/t/qupath-distance-to-annotation-border-from-both-inside-and-outside-of-the-annotation/40643/3?u=research_associate; https://forum.image.sc/t/qupath-distance-between-annotations/47960/7?u=research_associate. Hopefully this could be as simple as replacing the logic that sets inside values to zero with multiplying by negative one, but I'm not sure. https://github.com/qupath/qupath/blob/053efeff6d941e7a73beab5445cf0d6238ed97b7/qupath-core/src/main/java/qupath/lib/analysis/DistanceTools.java#L187; I didn't see anything obvious, so guessing it has to do with how the geometries are being used. Additionally, it would probably be nice if it ""smartly"" took into account TMA core borders as well. Though _that_ would probably be a bit more complicated.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1032
https://github.com/qupath/qupath/issues/1032:1210,Usability,simpl,simple,1210,"Calculate a negative distance to the inner surface of annotations rather than saving the distance from the detection to annotation as zero. As mentioned in several places on the forum, while it is possible to invert an annotation in order to measure the distance to annotations (2D) for detections within a particular annotation, it requires some coding and is a bit awkward. As inverting the annotation no longer inherits the class of the inverted annotation, that also adds an extra step that might be difficult for newer users. ; Finally, large complex annotations may stress some systems to invert, so it would be convenient to avoid this step if possible. ; Current workaround: https://forum.image.sc/t/distance-of-detections-to-border-of-parent-annotation/70199/9?u=research_associate; Some other instances of this coming up; https://forum.image.sc/t/need-help-with-troubleshooting-distance-to-annotation-calculation/48051/4?u=research_associate; https://forum.image.sc/t/qupath-distance-to-annotation-border-from-both-inside-and-outside-of-the-annotation/40643/3?u=research_associate; https://forum.image.sc/t/qupath-distance-between-annotations/47960/7?u=research_associate. Hopefully this could be as simple as replacing the logic that sets inside values to zero with multiplying by negative one, but I'm not sure. https://github.com/qupath/qupath/blob/053efeff6d941e7a73beab5445cf0d6238ed97b7/qupath-core/src/main/java/qupath/lib/analysis/DistanceTools.java#L187; I didn't see anything obvious, so guessing it has to do with how the geometries are being used. Additionally, it would probably be nice if it ""smartly"" took into account TMA core borders as well. Though _that_ would probably be a bit more complicated.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1032
https://github.com/qupath/qupath/issues/1033:74,Safety,detect,detections,74,"Hello everyone,. In my QuPath analysis I want to evaluate the distance of detections within an annotation to the parents annotation border. I only found scripts for analysing the distance of detections to borders of other annotations after assigning these annotations to classes.; This possible feature has been discussed on the image forum: https://forum.image.sc/t/distance-of-detections-to-border-of-parent-annotation/70199. Thank you and best regards,; Michael",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1033
https://github.com/qupath/qupath/issues/1033:191,Safety,detect,detections,191,"Hello everyone,. In my QuPath analysis I want to evaluate the distance of detections within an annotation to the parents annotation border. I only found scripts for analysing the distance of detections to borders of other annotations after assigning these annotations to classes.; This possible feature has been discussed on the image forum: https://forum.image.sc/t/distance-of-detections-to-border-of-parent-annotation/70199. Thank you and best regards,; Michael",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1033
https://github.com/qupath/qupath/issues/1033:379,Safety,detect,detections-to-border-of-parent-annotation,379,"Hello everyone,. In my QuPath analysis I want to evaluate the distance of detections within an annotation to the parents annotation border. I only found scripts for analysing the distance of detections to borders of other annotations after assigning these annotations to classes.; This possible feature has been discussed on the image forum: https://forum.image.sc/t/distance-of-detections-to-border-of-parent-annotation/70199. Thank you and best regards,; Michael",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1033
https://github.com/qupath/qupath/issues/1034:71,Deployability,update,updated,71,"Hey everybody, . we would like to inform you that Olympus has recently updated their .vsi file format generated by their VS200 slide-scanner. Sadly it cant be opened by qupath anymore which is a major setback for our institute. . Should i let the Bioformat guys know or is this problem reported here correctly? We can ofcourse provide sample images if neccessary. . Kind regards from germany and a big thanks for your amazing work, . Georg",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1034
https://github.com/qupath/qupath/pull/1037:636,Integrability,depend,depending,636,"As agreed in the [forum.sc post](https://forum.image.sc/t/tool-selection-via-mousewheel-side-scrolling-button-press/70796/4?u=ep.zindy) the following combinations of key / mouse button presses will need checking to make sure the proposed changes won't affect existing functionality in QuPath:. * For all operating systems (Windows, Linux [or at least Ubuntu], macOS); * For both mouse and trackpad; * For all relevant combinations under View → Multitouch gestures; * ‘Normal’ behavior for zoom/pan etc.; * Behavior with shortcut keys pressed e.g.; * Scroll + Ctrl/Cmd – should adjust opacity; * Scroll + Shift – can switch pan to zoom (depending upon prefs); * Behavior with the ‘Invert scrolling’ option selected",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1037
https://github.com/qupath/qupath/issues/1040:37,Modifiability,plugin,plugin,37,"I was testing the intensity features plugin on ~300 TMA spot annotations at 20x resolution (0.5um/px) and noticed that the memory would take a while to be dereferenced. I thought this was something to do with the thread pools but actually I think its the ImageRegionStore cache. . I was able to reclaim memory in my simple plugin based on the intensity features code using this code (which is also found in the script editor):. ```; try {; var store = qupath == null ? null : qupath.getImageRegionStore();; if (store != null); store.clearCache();; System.gc();; } catch (Exception e) {; } ; ```. I don't really know the best place to put this check inside the intensity features plugin, but I suspect this might be the cause of the memory accumulation. Not sure, would also like to know what the problem is if it is not this. To reproduce, I can share a QuPath project file and the image I was playing with, but it might be simpler to just make a bunch of annotations inside TMA cores for a large WSI using the SimpleThreshold PixelClassifier and test out the behavior.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040
https://github.com/qupath/qupath/issues/1040:323,Modifiability,plugin,plugin,323,"I was testing the intensity features plugin on ~300 TMA spot annotations at 20x resolution (0.5um/px) and noticed that the memory would take a while to be dereferenced. I thought this was something to do with the thread pools but actually I think its the ImageRegionStore cache. . I was able to reclaim memory in my simple plugin based on the intensity features code using this code (which is also found in the script editor):. ```; try {; var store = qupath == null ? null : qupath.getImageRegionStore();; if (store != null); store.clearCache();; System.gc();; } catch (Exception e) {; } ; ```. I don't really know the best place to put this check inside the intensity features plugin, but I suspect this might be the cause of the memory accumulation. Not sure, would also like to know what the problem is if it is not this. To reproduce, I can share a QuPath project file and the image I was playing with, but it might be simpler to just make a bunch of annotations inside TMA cores for a large WSI using the SimpleThreshold PixelClassifier and test out the behavior.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040
https://github.com/qupath/qupath/issues/1040:679,Modifiability,plugin,plugin,679,"I was testing the intensity features plugin on ~300 TMA spot annotations at 20x resolution (0.5um/px) and noticed that the memory would take a while to be dereferenced. I thought this was something to do with the thread pools but actually I think its the ImageRegionStore cache. . I was able to reclaim memory in my simple plugin based on the intensity features code using this code (which is also found in the script editor):. ```; try {; var store = qupath == null ? null : qupath.getImageRegionStore();; if (store != null); store.clearCache();; System.gc();; } catch (Exception e) {; } ; ```. I don't really know the best place to put this check inside the intensity features plugin, but I suspect this might be the cause of the memory accumulation. Not sure, would also like to know what the problem is if it is not this. To reproduce, I can share a QuPath project file and the image I was playing with, but it might be simpler to just make a bunch of annotations inside TMA cores for a large WSI using the SimpleThreshold PixelClassifier and test out the behavior.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040
https://github.com/qupath/qupath/issues/1040:272,Performance,cache,cache,272,"I was testing the intensity features plugin on ~300 TMA spot annotations at 20x resolution (0.5um/px) and noticed that the memory would take a while to be dereferenced. I thought this was something to do with the thread pools but actually I think its the ImageRegionStore cache. . I was able to reclaim memory in my simple plugin based on the intensity features code using this code (which is also found in the script editor):. ```; try {; var store = qupath == null ? null : qupath.getImageRegionStore();; if (store != null); store.clearCache();; System.gc();; } catch (Exception e) {; } ; ```. I don't really know the best place to put this check inside the intensity features plugin, but I suspect this might be the cause of the memory accumulation. Not sure, would also like to know what the problem is if it is not this. To reproduce, I can share a QuPath project file and the image I was playing with, but it might be simpler to just make a bunch of annotations inside TMA cores for a large WSI using the SimpleThreshold PixelClassifier and test out the behavior.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040
https://github.com/qupath/qupath/issues/1040:6,Testability,test,testing,6,"I was testing the intensity features plugin on ~300 TMA spot annotations at 20x resolution (0.5um/px) and noticed that the memory would take a while to be dereferenced. I thought this was something to do with the thread pools but actually I think its the ImageRegionStore cache. . I was able to reclaim memory in my simple plugin based on the intensity features code using this code (which is also found in the script editor):. ```; try {; var store = qupath == null ? null : qupath.getImageRegionStore();; if (store != null); store.clearCache();; System.gc();; } catch (Exception e) {; } ; ```. I don't really know the best place to put this check inside the intensity features plugin, but I suspect this might be the cause of the memory accumulation. Not sure, would also like to know what the problem is if it is not this. To reproduce, I can share a QuPath project file and the image I was playing with, but it might be simpler to just make a bunch of annotations inside TMA cores for a large WSI using the SimpleThreshold PixelClassifier and test out the behavior.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040
https://github.com/qupath/qupath/issues/1040:1047,Testability,test,test,1047,"I was testing the intensity features plugin on ~300 TMA spot annotations at 20x resolution (0.5um/px) and noticed that the memory would take a while to be dereferenced. I thought this was something to do with the thread pools but actually I think its the ImageRegionStore cache. . I was able to reclaim memory in my simple plugin based on the intensity features code using this code (which is also found in the script editor):. ```; try {; var store = qupath == null ? null : qupath.getImageRegionStore();; if (store != null); store.clearCache();; System.gc();; } catch (Exception e) {; } ; ```. I don't really know the best place to put this check inside the intensity features plugin, but I suspect this might be the cause of the memory accumulation. Not sure, would also like to know what the problem is if it is not this. To reproduce, I can share a QuPath project file and the image I was playing with, but it might be simpler to just make a bunch of annotations inside TMA cores for a large WSI using the SimpleThreshold PixelClassifier and test out the behavior.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040
https://github.com/qupath/qupath/issues/1040:316,Usability,simpl,simple,316,"I was testing the intensity features plugin on ~300 TMA spot annotations at 20x resolution (0.5um/px) and noticed that the memory would take a while to be dereferenced. I thought this was something to do with the thread pools but actually I think its the ImageRegionStore cache. . I was able to reclaim memory in my simple plugin based on the intensity features code using this code (which is also found in the script editor):. ```; try {; var store = qupath == null ? null : qupath.getImageRegionStore();; if (store != null); store.clearCache();; System.gc();; } catch (Exception e) {; } ; ```. I don't really know the best place to put this check inside the intensity features plugin, but I suspect this might be the cause of the memory accumulation. Not sure, would also like to know what the problem is if it is not this. To reproduce, I can share a QuPath project file and the image I was playing with, but it might be simpler to just make a bunch of annotations inside TMA cores for a large WSI using the SimpleThreshold PixelClassifier and test out the behavior.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040
https://github.com/qupath/qupath/issues/1040:533,Usability,clear,clearCache,533,"I was testing the intensity features plugin on ~300 TMA spot annotations at 20x resolution (0.5um/px) and noticed that the memory would take a while to be dereferenced. I thought this was something to do with the thread pools but actually I think its the ImageRegionStore cache. . I was able to reclaim memory in my simple plugin based on the intensity features code using this code (which is also found in the script editor):. ```; try {; var store = qupath == null ? null : qupath.getImageRegionStore();; if (store != null); store.clearCache();; System.gc();; } catch (Exception e) {; } ; ```. I don't really know the best place to put this check inside the intensity features plugin, but I suspect this might be the cause of the memory accumulation. Not sure, would also like to know what the problem is if it is not this. To reproduce, I can share a QuPath project file and the image I was playing with, but it might be simpler to just make a bunch of annotations inside TMA cores for a large WSI using the SimpleThreshold PixelClassifier and test out the behavior.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040
https://github.com/qupath/qupath/issues/1040:924,Usability,simpl,simpler,924,"I was testing the intensity features plugin on ~300 TMA spot annotations at 20x resolution (0.5um/px) and noticed that the memory would take a while to be dereferenced. I thought this was something to do with the thread pools but actually I think its the ImageRegionStore cache. . I was able to reclaim memory in my simple plugin based on the intensity features code using this code (which is also found in the script editor):. ```; try {; var store = qupath == null ? null : qupath.getImageRegionStore();; if (store != null); store.clearCache();; System.gc();; } catch (Exception e) {; } ; ```. I don't really know the best place to put this check inside the intensity features plugin, but I suspect this might be the cause of the memory accumulation. Not sure, would also like to know what the problem is if it is not this. To reproduce, I can share a QuPath project file and the image I was playing with, but it might be simpler to just make a bunch of annotations inside TMA cores for a large WSI using the SimpleThreshold PixelClassifier and test out the behavior.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040
https://github.com/qupath/qupath/issues/1040:1011,Usability,Simpl,SimpleThreshold,1011,"I was testing the intensity features plugin on ~300 TMA spot annotations at 20x resolution (0.5um/px) and noticed that the memory would take a while to be dereferenced. I thought this was something to do with the thread pools but actually I think its the ImageRegionStore cache. . I was able to reclaim memory in my simple plugin based on the intensity features code using this code (which is also found in the script editor):. ```; try {; var store = qupath == null ? null : qupath.getImageRegionStore();; if (store != null); store.clearCache();; System.gc();; } catch (Exception e) {; } ; ```. I don't really know the best place to put this check inside the intensity features plugin, but I suspect this might be the cause of the memory accumulation. Not sure, would also like to know what the problem is if it is not this. To reproduce, I can share a QuPath project file and the image I was playing with, but it might be simpler to just make a bunch of annotations inside TMA cores for a large WSI using the SimpleThreshold PixelClassifier and test out the behavior.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1040
https://github.com/qupath/qupath/pull/1043:1114,Energy Efficiency,adapt,adapted,1114,"Thanks to @crobbins327 for pointing out the problem and solution. Slightly modified from proposed code at https://github.com/qupath/qupath/pull/1039. Testing is somewhat convoluted. I originally (wrongly thought) that the *Create tiles* command used this method, but it doesn't. However it's used internally for plugin commands (like cell detection) - so is potentially quite important. Testing is difficult, but a script like this can help:; ```groovy; def annotation = getSelectedObject(); int s = 64; def size = qupath.lib.geom.ImmutableDimension.getInstance(s, s); def rois = RoiTools.computeTiledROIs(annotation.getROI(), size, size, true, 0); def newAnnotations = rois.collect {r -> PathObjects.createAnnotationObject(r)}; annotation.clearPathObjects(); annotation.addPathObjects(newAnnotations); fireHierarchyUpdate(); ```. Using a rather convoluted example, and reducing the `geometry.getNumPoints() > 1000` threshold in `RoiTools` to trigger the code, tiles were previously missing:. ![wrong](https://user-images.githubusercontent.com/4690904/185470614-92ab1d77-e1d4-47da-b53a-af569900469b.png). With the adapted code they are included:. ![right](https://user-images.githubusercontent.com/4690904/185470631-3f9a4c95-cb18-49b0-ae3b-f0250cc03cfd.png). The problem hadn't surfaced before, probably because (as @crobbins327 pointed out) the wrong key was used with the map, and so the 'optimization' of handling row/column geometries didn't do anything. With that in mind, if this turns out to cause problems then the whole method could just be simplified and the unnecessary attempt at optimization from https://github.com/qupath/qupath/commit/a3366633851740e0d675b118b48133ce61211101 removed. @crobbins327 could you check if the fix looks ok to you as well?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043
https://github.com/qupath/qupath/pull/1043:312,Modifiability,plugin,plugin,312,"Thanks to @crobbins327 for pointing out the problem and solution. Slightly modified from proposed code at https://github.com/qupath/qupath/pull/1039. Testing is somewhat convoluted. I originally (wrongly thought) that the *Create tiles* command used this method, but it doesn't. However it's used internally for plugin commands (like cell detection) - so is potentially quite important. Testing is difficult, but a script like this can help:; ```groovy; def annotation = getSelectedObject(); int s = 64; def size = qupath.lib.geom.ImmutableDimension.getInstance(s, s); def rois = RoiTools.computeTiledROIs(annotation.getROI(), size, size, true, 0); def newAnnotations = rois.collect {r -> PathObjects.createAnnotationObject(r)}; annotation.clearPathObjects(); annotation.addPathObjects(newAnnotations); fireHierarchyUpdate(); ```. Using a rather convoluted example, and reducing the `geometry.getNumPoints() > 1000` threshold in `RoiTools` to trigger the code, tiles were previously missing:. ![wrong](https://user-images.githubusercontent.com/4690904/185470614-92ab1d77-e1d4-47da-b53a-af569900469b.png). With the adapted code they are included:. ![right](https://user-images.githubusercontent.com/4690904/185470631-3f9a4c95-cb18-49b0-ae3b-f0250cc03cfd.png). The problem hadn't surfaced before, probably because (as @crobbins327 pointed out) the wrong key was used with the map, and so the 'optimization' of handling row/column geometries didn't do anything. With that in mind, if this turns out to cause problems then the whole method could just be simplified and the unnecessary attempt at optimization from https://github.com/qupath/qupath/commit/a3366633851740e0d675b118b48133ce61211101 removed. @crobbins327 could you check if the fix looks ok to you as well?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043
https://github.com/qupath/qupath/pull/1043:1114,Modifiability,adapt,adapted,1114,"Thanks to @crobbins327 for pointing out the problem and solution. Slightly modified from proposed code at https://github.com/qupath/qupath/pull/1039. Testing is somewhat convoluted. I originally (wrongly thought) that the *Create tiles* command used this method, but it doesn't. However it's used internally for plugin commands (like cell detection) - so is potentially quite important. Testing is difficult, but a script like this can help:; ```groovy; def annotation = getSelectedObject(); int s = 64; def size = qupath.lib.geom.ImmutableDimension.getInstance(s, s); def rois = RoiTools.computeTiledROIs(annotation.getROI(), size, size, true, 0); def newAnnotations = rois.collect {r -> PathObjects.createAnnotationObject(r)}; annotation.clearPathObjects(); annotation.addPathObjects(newAnnotations); fireHierarchyUpdate(); ```. Using a rather convoluted example, and reducing the `geometry.getNumPoints() > 1000` threshold in `RoiTools` to trigger the code, tiles were previously missing:. ![wrong](https://user-images.githubusercontent.com/4690904/185470614-92ab1d77-e1d4-47da-b53a-af569900469b.png). With the adapted code they are included:. ![right](https://user-images.githubusercontent.com/4690904/185470631-3f9a4c95-cb18-49b0-ae3b-f0250cc03cfd.png). The problem hadn't surfaced before, probably because (as @crobbins327 pointed out) the wrong key was used with the map, and so the 'optimization' of handling row/column geometries didn't do anything. With that in mind, if this turns out to cause problems then the whole method could just be simplified and the unnecessary attempt at optimization from https://github.com/qupath/qupath/commit/a3366633851740e0d675b118b48133ce61211101 removed. @crobbins327 could you check if the fix looks ok to you as well?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043
https://github.com/qupath/qupath/pull/1043:1391,Performance,optimiz,optimization,1391,"Thanks to @crobbins327 for pointing out the problem and solution. Slightly modified from proposed code at https://github.com/qupath/qupath/pull/1039. Testing is somewhat convoluted. I originally (wrongly thought) that the *Create tiles* command used this method, but it doesn't. However it's used internally for plugin commands (like cell detection) - so is potentially quite important. Testing is difficult, but a script like this can help:; ```groovy; def annotation = getSelectedObject(); int s = 64; def size = qupath.lib.geom.ImmutableDimension.getInstance(s, s); def rois = RoiTools.computeTiledROIs(annotation.getROI(), size, size, true, 0); def newAnnotations = rois.collect {r -> PathObjects.createAnnotationObject(r)}; annotation.clearPathObjects(); annotation.addPathObjects(newAnnotations); fireHierarchyUpdate(); ```. Using a rather convoluted example, and reducing the `geometry.getNumPoints() > 1000` threshold in `RoiTools` to trigger the code, tiles were previously missing:. ![wrong](https://user-images.githubusercontent.com/4690904/185470614-92ab1d77-e1d4-47da-b53a-af569900469b.png). With the adapted code they are included:. ![right](https://user-images.githubusercontent.com/4690904/185470631-3f9a4c95-cb18-49b0-ae3b-f0250cc03cfd.png). The problem hadn't surfaced before, probably because (as @crobbins327 pointed out) the wrong key was used with the map, and so the 'optimization' of handling row/column geometries didn't do anything. With that in mind, if this turns out to cause problems then the whole method could just be simplified and the unnecessary attempt at optimization from https://github.com/qupath/qupath/commit/a3366633851740e0d675b118b48133ce61211101 removed. @crobbins327 could you check if the fix looks ok to you as well?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043
https://github.com/qupath/qupath/pull/1043:1592,Performance,optimiz,optimization,1592,"Thanks to @crobbins327 for pointing out the problem and solution. Slightly modified from proposed code at https://github.com/qupath/qupath/pull/1039. Testing is somewhat convoluted. I originally (wrongly thought) that the *Create tiles* command used this method, but it doesn't. However it's used internally for plugin commands (like cell detection) - so is potentially quite important. Testing is difficult, but a script like this can help:; ```groovy; def annotation = getSelectedObject(); int s = 64; def size = qupath.lib.geom.ImmutableDimension.getInstance(s, s); def rois = RoiTools.computeTiledROIs(annotation.getROI(), size, size, true, 0); def newAnnotations = rois.collect {r -> PathObjects.createAnnotationObject(r)}; annotation.clearPathObjects(); annotation.addPathObjects(newAnnotations); fireHierarchyUpdate(); ```. Using a rather convoluted example, and reducing the `geometry.getNumPoints() > 1000` threshold in `RoiTools` to trigger the code, tiles were previously missing:. ![wrong](https://user-images.githubusercontent.com/4690904/185470614-92ab1d77-e1d4-47da-b53a-af569900469b.png). With the adapted code they are included:. ![right](https://user-images.githubusercontent.com/4690904/185470631-3f9a4c95-cb18-49b0-ae3b-f0250cc03cfd.png). The problem hadn't surfaced before, probably because (as @crobbins327 pointed out) the wrong key was used with the map, and so the 'optimization' of handling row/column geometries didn't do anything. With that in mind, if this turns out to cause problems then the whole method could just be simplified and the unnecessary attempt at optimization from https://github.com/qupath/qupath/commit/a3366633851740e0d675b118b48133ce61211101 removed. @crobbins327 could you check if the fix looks ok to you as well?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043
https://github.com/qupath/qupath/pull/1043:339,Safety,detect,detection,339,"Thanks to @crobbins327 for pointing out the problem and solution. Slightly modified from proposed code at https://github.com/qupath/qupath/pull/1039. Testing is somewhat convoluted. I originally (wrongly thought) that the *Create tiles* command used this method, but it doesn't. However it's used internally for plugin commands (like cell detection) - so is potentially quite important. Testing is difficult, but a script like this can help:; ```groovy; def annotation = getSelectedObject(); int s = 64; def size = qupath.lib.geom.ImmutableDimension.getInstance(s, s); def rois = RoiTools.computeTiledROIs(annotation.getROI(), size, size, true, 0); def newAnnotations = rois.collect {r -> PathObjects.createAnnotationObject(r)}; annotation.clearPathObjects(); annotation.addPathObjects(newAnnotations); fireHierarchyUpdate(); ```. Using a rather convoluted example, and reducing the `geometry.getNumPoints() > 1000` threshold in `RoiTools` to trigger the code, tiles were previously missing:. ![wrong](https://user-images.githubusercontent.com/4690904/185470614-92ab1d77-e1d4-47da-b53a-af569900469b.png). With the adapted code they are included:. ![right](https://user-images.githubusercontent.com/4690904/185470631-3f9a4c95-cb18-49b0-ae3b-f0250cc03cfd.png). The problem hadn't surfaced before, probably because (as @crobbins327 pointed out) the wrong key was used with the map, and so the 'optimization' of handling row/column geometries didn't do anything. With that in mind, if this turns out to cause problems then the whole method could just be simplified and the unnecessary attempt at optimization from https://github.com/qupath/qupath/commit/a3366633851740e0d675b118b48133ce61211101 removed. @crobbins327 could you check if the fix looks ok to you as well?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043
https://github.com/qupath/qupath/pull/1043:150,Testability,Test,Testing,150,"Thanks to @crobbins327 for pointing out the problem and solution. Slightly modified from proposed code at https://github.com/qupath/qupath/pull/1039. Testing is somewhat convoluted. I originally (wrongly thought) that the *Create tiles* command used this method, but it doesn't. However it's used internally for plugin commands (like cell detection) - so is potentially quite important. Testing is difficult, but a script like this can help:; ```groovy; def annotation = getSelectedObject(); int s = 64; def size = qupath.lib.geom.ImmutableDimension.getInstance(s, s); def rois = RoiTools.computeTiledROIs(annotation.getROI(), size, size, true, 0); def newAnnotations = rois.collect {r -> PathObjects.createAnnotationObject(r)}; annotation.clearPathObjects(); annotation.addPathObjects(newAnnotations); fireHierarchyUpdate(); ```. Using a rather convoluted example, and reducing the `geometry.getNumPoints() > 1000` threshold in `RoiTools` to trigger the code, tiles were previously missing:. ![wrong](https://user-images.githubusercontent.com/4690904/185470614-92ab1d77-e1d4-47da-b53a-af569900469b.png). With the adapted code they are included:. ![right](https://user-images.githubusercontent.com/4690904/185470631-3f9a4c95-cb18-49b0-ae3b-f0250cc03cfd.png). The problem hadn't surfaced before, probably because (as @crobbins327 pointed out) the wrong key was used with the map, and so the 'optimization' of handling row/column geometries didn't do anything. With that in mind, if this turns out to cause problems then the whole method could just be simplified and the unnecessary attempt at optimization from https://github.com/qupath/qupath/commit/a3366633851740e0d675b118b48133ce61211101 removed. @crobbins327 could you check if the fix looks ok to you as well?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043
https://github.com/qupath/qupath/pull/1043:387,Testability,Test,Testing,387,"Thanks to @crobbins327 for pointing out the problem and solution. Slightly modified from proposed code at https://github.com/qupath/qupath/pull/1039. Testing is somewhat convoluted. I originally (wrongly thought) that the *Create tiles* command used this method, but it doesn't. However it's used internally for plugin commands (like cell detection) - so is potentially quite important. Testing is difficult, but a script like this can help:; ```groovy; def annotation = getSelectedObject(); int s = 64; def size = qupath.lib.geom.ImmutableDimension.getInstance(s, s); def rois = RoiTools.computeTiledROIs(annotation.getROI(), size, size, true, 0); def newAnnotations = rois.collect {r -> PathObjects.createAnnotationObject(r)}; annotation.clearPathObjects(); annotation.addPathObjects(newAnnotations); fireHierarchyUpdate(); ```. Using a rather convoluted example, and reducing the `geometry.getNumPoints() > 1000` threshold in `RoiTools` to trigger the code, tiles were previously missing:. ![wrong](https://user-images.githubusercontent.com/4690904/185470614-92ab1d77-e1d4-47da-b53a-af569900469b.png). With the adapted code they are included:. ![right](https://user-images.githubusercontent.com/4690904/185470631-3f9a4c95-cb18-49b0-ae3b-f0250cc03cfd.png). The problem hadn't surfaced before, probably because (as @crobbins327 pointed out) the wrong key was used with the map, and so the 'optimization' of handling row/column geometries didn't do anything. With that in mind, if this turns out to cause problems then the whole method could just be simplified and the unnecessary attempt at optimization from https://github.com/qupath/qupath/commit/a3366633851740e0d675b118b48133ce61211101 removed. @crobbins327 could you check if the fix looks ok to you as well?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043
https://github.com/qupath/qupath/pull/1043:740,Usability,clear,clearPathObjects,740,"Thanks to @crobbins327 for pointing out the problem and solution. Slightly modified from proposed code at https://github.com/qupath/qupath/pull/1039. Testing is somewhat convoluted. I originally (wrongly thought) that the *Create tiles* command used this method, but it doesn't. However it's used internally for plugin commands (like cell detection) - so is potentially quite important. Testing is difficult, but a script like this can help:; ```groovy; def annotation = getSelectedObject(); int s = 64; def size = qupath.lib.geom.ImmutableDimension.getInstance(s, s); def rois = RoiTools.computeTiledROIs(annotation.getROI(), size, size, true, 0); def newAnnotations = rois.collect {r -> PathObjects.createAnnotationObject(r)}; annotation.clearPathObjects(); annotation.addPathObjects(newAnnotations); fireHierarchyUpdate(); ```. Using a rather convoluted example, and reducing the `geometry.getNumPoints() > 1000` threshold in `RoiTools` to trigger the code, tiles were previously missing:. ![wrong](https://user-images.githubusercontent.com/4690904/185470614-92ab1d77-e1d4-47da-b53a-af569900469b.png). With the adapted code they are included:. ![right](https://user-images.githubusercontent.com/4690904/185470631-3f9a4c95-cb18-49b0-ae3b-f0250cc03cfd.png). The problem hadn't surfaced before, probably because (as @crobbins327 pointed out) the wrong key was used with the map, and so the 'optimization' of handling row/column geometries didn't do anything. With that in mind, if this turns out to cause problems then the whole method could just be simplified and the unnecessary attempt at optimization from https://github.com/qupath/qupath/commit/a3366633851740e0d675b118b48133ce61211101 removed. @crobbins327 could you check if the fix looks ok to you as well?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043
https://github.com/qupath/qupath/pull/1043:1550,Usability,simpl,simplified,1550,"Thanks to @crobbins327 for pointing out the problem and solution. Slightly modified from proposed code at https://github.com/qupath/qupath/pull/1039. Testing is somewhat convoluted. I originally (wrongly thought) that the *Create tiles* command used this method, but it doesn't. However it's used internally for plugin commands (like cell detection) - so is potentially quite important. Testing is difficult, but a script like this can help:; ```groovy; def annotation = getSelectedObject(); int s = 64; def size = qupath.lib.geom.ImmutableDimension.getInstance(s, s); def rois = RoiTools.computeTiledROIs(annotation.getROI(), size, size, true, 0); def newAnnotations = rois.collect {r -> PathObjects.createAnnotationObject(r)}; annotation.clearPathObjects(); annotation.addPathObjects(newAnnotations); fireHierarchyUpdate(); ```. Using a rather convoluted example, and reducing the `geometry.getNumPoints() > 1000` threshold in `RoiTools` to trigger the code, tiles were previously missing:. ![wrong](https://user-images.githubusercontent.com/4690904/185470614-92ab1d77-e1d4-47da-b53a-af569900469b.png). With the adapted code they are included:. ![right](https://user-images.githubusercontent.com/4690904/185470631-3f9a4c95-cb18-49b0-ae3b-f0250cc03cfd.png). The problem hadn't surfaced before, probably because (as @crobbins327 pointed out) the wrong key was used with the map, and so the 'optimization' of handling row/column geometries didn't do anything. With that in mind, if this turns out to cause problems then the whole method could just be simplified and the unnecessary attempt at optimization from https://github.com/qupath/qupath/commit/a3366633851740e0d675b118b48133ce61211101 removed. @crobbins327 could you check if the fix looks ok to you as well?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1043
https://github.com/qupath/qupath/pull/1044:101,Availability,error,error,101,Should fix https://forum.image.sc/t/limit-delaunay-cluster-clustering-to-specific-annotations-throws-error/70976,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1044
https://github.com/qupath/qupath/issues/1045:197,Availability,fault,fault,197,"## Bug report. **Describe the bug**; The performance of `MeasurementExporter` is unacceptably slow when large numbers of objects and measurements. (Although, as we shall see, it's not entirely its fault...). **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection on a large regions (generating >100k cells); 2. Run an export script that *should* be limited to export just one measurement per cell, e.g. following https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154/6; 3. Predict how long it should take (a second or two?); 4. Be disappointed and confused (possibly). **Expected behavior**; Exporting hundreds of thousands of measurements takes a matter of seconds. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.3.2 (and earlier). **Additional context**; The discussion behind this is at https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154. Investigating revealed a few issues:; * `MeasurementExporter` might not be using a buffered output stream (although how much this matters if unclear); * When using 'includeColumns', it's converting *all* numeric measurements to strings... even if they aren't needed; * Lots of measurements can cause horrible performance even when they aren't being written to the file; * The frequent calls to `GeneralTools.formatNumber` show up on VisualVM as a bottleneck. The first is easy to address, although may not help much. The second can also be addressed by excluding columns earlier. The third may be tricker, but is needed to help in cases where a full table should be export.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1045
https://github.com/qupath/qupath/issues/1045:41,Performance,perform,performance,41,"## Bug report. **Describe the bug**; The performance of `MeasurementExporter` is unacceptably slow when large numbers of objects and measurements. (Although, as we shall see, it's not entirely its fault...). **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection on a large regions (generating >100k cells); 2. Run an export script that *should* be limited to export just one measurement per cell, e.g. following https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154/6; 3. Predict how long it should take (a second or two?); 4. Be disappointed and confused (possibly). **Expected behavior**; Exporting hundreds of thousands of measurements takes a matter of seconds. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.3.2 (and earlier). **Additional context**; The discussion behind this is at https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154. Investigating revealed a few issues:; * `MeasurementExporter` might not be using a buffered output stream (although how much this matters if unclear); * When using 'includeColumns', it's converting *all* numeric measurements to strings... even if they aren't needed; * Lots of measurements can cause horrible performance even when they aren't being written to the file; * The frequent calls to `GeneralTools.formatNumber` show up on VisualVM as a bottleneck. The first is easy to address, although may not help much. The second can also be addressed by excluding columns earlier. The third may be tricker, but is needed to help in cases where a full table should be export.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1045
https://github.com/qupath/qupath/issues/1045:1279,Performance,perform,performance,1279,"## Bug report. **Describe the bug**; The performance of `MeasurementExporter` is unacceptably slow when large numbers of objects and measurements. (Although, as we shall see, it's not entirely its fault...). **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection on a large regions (generating >100k cells); 2. Run an export script that *should* be limited to export just one measurement per cell, e.g. following https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154/6; 3. Predict how long it should take (a second or two?); 4. Be disappointed and confused (possibly). **Expected behavior**; Exporting hundreds of thousands of measurements takes a matter of seconds. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.3.2 (and earlier). **Additional context**; The discussion behind this is at https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154. Investigating revealed a few issues:; * `MeasurementExporter` might not be using a buffered output stream (although how much this matters if unclear); * When using 'includeColumns', it's converting *all* numeric measurements to strings... even if they aren't needed; * Lots of measurements can cause horrible performance even when they aren't being written to the file; * The frequent calls to `GeneralTools.formatNumber` show up on VisualVM as a bottleneck. The first is easy to address, although may not help much. The second can also be addressed by excluding columns earlier. The third may be tricker, but is needed to help in cases where a full table should be export.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1045
https://github.com/qupath/qupath/issues/1045:1417,Performance,bottleneck,bottleneck,1417,"## Bug report. **Describe the bug**; The performance of `MeasurementExporter` is unacceptably slow when large numbers of objects and measurements. (Although, as we shall see, it's not entirely its fault...). **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection on a large regions (generating >100k cells); 2. Run an export script that *should* be limited to export just one measurement per cell, e.g. following https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154/6; 3. Predict how long it should take (a second or two?); 4. Be disappointed and confused (possibly). **Expected behavior**; Exporting hundreds of thousands of measurements takes a matter of seconds. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.3.2 (and earlier). **Additional context**; The discussion behind this is at https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154. Investigating revealed a few issues:; * `MeasurementExporter` might not be using a buffered output stream (although how much this matters if unclear); * When using 'includeColumns', it's converting *all* numeric measurements to strings... even if they aren't needed; * Lots of measurements can cause horrible performance even when they aren't being written to the file; * The frequent calls to `GeneralTools.formatNumber` show up on VisualVM as a bottleneck. The first is easy to address, although may not help much. The second can also be addressed by excluding columns earlier. The third may be tricker, but is needed to help in cases where a full table should be export.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1045
https://github.com/qupath/qupath/issues/1045:272,Safety,detect,detection,272,"## Bug report. **Describe the bug**; The performance of `MeasurementExporter` is unacceptably slow when large numbers of objects and measurements. (Although, as we shall see, it's not entirely its fault...). **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection on a large regions (generating >100k cells); 2. Run an export script that *should* be limited to export just one measurement per cell, e.g. following https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154/6; 3. Predict how long it should take (a second or two?); 4. Be disappointed and confused (possibly). **Expected behavior**; Exporting hundreds of thousands of measurements takes a matter of seconds. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.3.2 (and earlier). **Additional context**; The discussion behind this is at https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154. Investigating revealed a few issues:; * `MeasurementExporter` might not be using a buffered output stream (although how much this matters if unclear); * When using 'includeColumns', it's converting *all* numeric measurements to strings... even if they aren't needed; * Lots of measurements can cause horrible performance even when they aren't being written to the file; * The frequent calls to `GeneralTools.formatNumber` show up on VisualVM as a bottleneck. The first is easy to address, although may not help much. The second can also be addressed by excluding columns earlier. The third may be tricker, but is needed to help in cases where a full table should be export.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1045
https://github.com/qupath/qupath/issues/1045:489,Safety,detect,detection-measurements,489,"## Bug report. **Describe the bug**; The performance of `MeasurementExporter` is unacceptably slow when large numbers of objects and measurements. (Although, as we shall see, it's not entirely its fault...). **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection on a large regions (generating >100k cells); 2. Run an export script that *should* be limited to export just one measurement per cell, e.g. following https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154/6; 3. Predict how long it should take (a second or two?); 4. Be disappointed and confused (possibly). **Expected behavior**; Exporting hundreds of thousands of measurements takes a matter of seconds. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.3.2 (and earlier). **Additional context**; The discussion behind this is at https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154. Investigating revealed a few issues:; * `MeasurementExporter` might not be using a buffered output stream (although how much this matters if unclear); * When using 'includeColumns', it's converting *all* numeric measurements to strings... even if they aren't needed; * Lots of measurements can cause horrible performance even when they aren't being written to the file; * The frequent calls to `GeneralTools.formatNumber` show up on VisualVM as a bottleneck. The first is easy to address, although may not help much. The second can also be addressed by excluding columns earlier. The third may be tricker, but is needed to help in cases where a full table should be export.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1045
https://github.com/qupath/qupath/issues/1045:524,Safety,Predict,Predict,524,"## Bug report. **Describe the bug**; The performance of `MeasurementExporter` is unacceptably slow when large numbers of objects and measurements. (Although, as we shall see, it's not entirely its fault...). **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection on a large regions (generating >100k cells); 2. Run an export script that *should* be limited to export just one measurement per cell, e.g. following https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154/6; 3. Predict how long it should take (a second or two?); 4. Be disappointed and confused (possibly). **Expected behavior**; Exporting hundreds of thousands of measurements takes a matter of seconds. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.3.2 (and earlier). **Additional context**; The discussion behind this is at https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154. Investigating revealed a few issues:; * `MeasurementExporter` might not be using a buffered output stream (although how much this matters if unclear); * When using 'includeColumns', it's converting *all* numeric measurements to strings... even if they aren't needed; * Lots of measurements can cause horrible performance even when they aren't being written to the file; * The frequent calls to `GeneralTools.formatNumber` show up on VisualVM as a bottleneck. The first is easy to address, although may not help much. The second can also be addressed by excluding columns earlier. The third may be tricker, but is needed to help in cases where a full table should be export.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1045
https://github.com/qupath/qupath/issues/1045:940,Safety,detect,detection-measurements,940,"## Bug report. **Describe the bug**; The performance of `MeasurementExporter` is unacceptably slow when large numbers of objects and measurements. (Although, as we shall see, it's not entirely its fault...). **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection on a large regions (generating >100k cells); 2. Run an export script that *should* be limited to export just one measurement per cell, e.g. following https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154/6; 3. Predict how long it should take (a second or two?); 4. Be disappointed and confused (possibly). **Expected behavior**; Exporting hundreds of thousands of measurements takes a matter of seconds. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.3.2 (and earlier). **Additional context**; The discussion behind this is at https://forum.image.sc/t/qupath-extremely-slow-exporting-detection-measurements/71154. Investigating revealed a few issues:; * `MeasurementExporter` might not be using a buffered output stream (although how much this matters if unclear); * When using 'includeColumns', it's converting *all* numeric measurements to strings... even if they aren't needed; * Lots of measurements can cause horrible performance even when they aren't being written to the file; * The frequent calls to `GeneralTools.formatNumber` show up on VisualVM as a bottleneck. The first is easy to address, although may not help much. The second can also be addressed by excluding columns earlier. The third may be tricker, but is needed to help in cases where a full table should be export.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1045
https://github.com/qupath/qupath/pull/1046:29,Deployability,install,installed,29,"Use checkstyle, which can be installed as an eclipse plugin or run with; ```; ./gradlew check; ```; Checks are currently fairly limited, focussing on the order of modifiers and naming of test classes (using `Test*.java`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1046
https://github.com/qupath/qupath/pull/1046:53,Modifiability,plugin,plugin,53,"Use checkstyle, which can be installed as an eclipse plugin or run with; ```; ./gradlew check; ```; Checks are currently fairly limited, focussing on the order of modifiers and naming of test classes (using `Test*.java`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1046
https://github.com/qupath/qupath/pull/1046:187,Testability,test,test,187,"Use checkstyle, which can be installed as an eclipse plugin or run with; ```; ./gradlew check; ```; Checks are currently fairly limited, focussing on the order of modifiers and naming of test classes (using `Test*.java`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1046
https://github.com/qupath/qupath/pull/1046:208,Testability,Test,Test,208,"Use checkstyle, which can be installed as an eclipse plugin or run with; ```; ./gradlew check; ```; Checks are currently fairly limited, focussing on the order of modifiers and naming of test classes (using `Test*.java`).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1046
https://github.com/qupath/qupath/pull/1049:316,Availability,down,downstream,316,"Dear QuPath developers,. Quite some time ago a user of `paquo` reported a bug with network share URIs on windows, see: https://github.com/bayer-science-for-a-better-life/paquo/issues/65. This PR get's rid of the immediate issue in ImageServerProvider.getServerBuilders, but I'm not sure if there's more bugs further downstream using network share URIs. The fix boils down to using `java.nio.Paths.get(uri).toFile()` instead of `java.io.File(uri)` directly. (see: https://github.com/bayer-science-for-a-better-life/paquo/issues/65#issuecomment-970711915). I am currently unable to test this myself due to lack of access to a windows machine. . Cheers,; Andreas 😃",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1049
https://github.com/qupath/qupath/pull/1049:367,Availability,down,down,367,"Dear QuPath developers,. Quite some time ago a user of `paquo` reported a bug with network share URIs on windows, see: https://github.com/bayer-science-for-a-better-life/paquo/issues/65. This PR get's rid of the immediate issue in ImageServerProvider.getServerBuilders, but I'm not sure if there's more bugs further downstream using network share URIs. The fix boils down to using `java.nio.Paths.get(uri).toFile()` instead of `java.io.File(uri)` directly. (see: https://github.com/bayer-science-for-a-better-life/paquo/issues/65#issuecomment-970711915). I am currently unable to test this myself due to lack of access to a windows machine. . Cheers,; Andreas 😃",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1049
https://github.com/qupath/qupath/pull/1049:612,Security,access,access,612,"Dear QuPath developers,. Quite some time ago a user of `paquo` reported a bug with network share URIs on windows, see: https://github.com/bayer-science-for-a-better-life/paquo/issues/65. This PR get's rid of the immediate issue in ImageServerProvider.getServerBuilders, but I'm not sure if there's more bugs further downstream using network share URIs. The fix boils down to using `java.nio.Paths.get(uri).toFile()` instead of `java.io.File(uri)` directly. (see: https://github.com/bayer-science-for-a-better-life/paquo/issues/65#issuecomment-970711915). I am currently unable to test this myself due to lack of access to a windows machine. . Cheers,; Andreas 😃",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1049
https://github.com/qupath/qupath/pull/1049:580,Testability,test,test,580,"Dear QuPath developers,. Quite some time ago a user of `paquo` reported a bug with network share URIs on windows, see: https://github.com/bayer-science-for-a-better-life/paquo/issues/65. This PR get's rid of the immediate issue in ImageServerProvider.getServerBuilders, but I'm not sure if there's more bugs further downstream using network share URIs. The fix boils down to using `java.nio.Paths.get(uri).toFile()` instead of `java.io.File(uri)` directly. (see: https://github.com/bayer-science-for-a-better-life/paquo/issues/65#issuecomment-970711915). I am currently unable to test this myself due to lack of access to a windows machine. . Cheers,; Andreas 😃",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1049
https://github.com/qupath/qupath/pull/1050:132,Availability,reliab,reliably,132,Fix regression in https://github.com/qupath/qupath/commit/2a66f7ce7e73c08e5d396f6d259dd050cd6e7804. Setting dark mode wouldn't work reliably if the default font was used (in practice this meant it was generally ok on Mac but broken everywhere else). Thanks to @finglis!,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1050
https://github.com/qupath/qupath/issues/1052:302,Deployability,update,updatePlane,302,"## Feature request. **Is your feature request related to a problem? Please describe.**; ROIs are immutable and associated with a specific `ImagePlane` (generally z and t index).; This means that transferring a ROI to a different plane is tricky. **Describe the solution you'd like**; Add a `public ROI updatePlane(ImagePlane plane)` method to the `ROI` interface, and ensure it is implemented in all relevant ROI classes. **Describe alternatives you've considered**; Currently, a hack like this needs to be used:; ```groovy; def roi = GeometryTools.geometryToROI(pathObject.getROI().getGeometry(), ImagePlane.getPlane(z, t)); ```; for example [here](https://gist.github.com/petebankhead/6116f921cf8c3223c74b0346c54f532d#file-qupath-copy-annotations-across-stacks-groovy-L54). This is awkward, and can lose information - particularly with ellipses, which would be polygonized. **Additional context**; There are already `ROI.translate(x, y)` and `ROI.scale(x, y)` methods. This will simplify copying ROIs to other planes of a z-stack, which could be useful for annotation.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1052
https://github.com/qupath/qupath/issues/1052:353,Integrability,interface,interface,353,"## Feature request. **Is your feature request related to a problem? Please describe.**; ROIs are immutable and associated with a specific `ImagePlane` (generally z and t index).; This means that transferring a ROI to a different plane is tricky. **Describe the solution you'd like**; Add a `public ROI updatePlane(ImagePlane plane)` method to the `ROI` interface, and ensure it is implemented in all relevant ROI classes. **Describe alternatives you've considered**; Currently, a hack like this needs to be used:; ```groovy; def roi = GeometryTools.geometryToROI(pathObject.getROI().getGeometry(), ImagePlane.getPlane(z, t)); ```; for example [here](https://gist.github.com/petebankhead/6116f921cf8c3223c74b0346c54f532d#file-qupath-copy-annotations-across-stacks-groovy-L54). This is awkward, and can lose information - particularly with ellipses, which would be polygonized. **Additional context**; There are already `ROI.translate(x, y)` and `ROI.scale(x, y)` methods. This will simplify copying ROIs to other planes of a z-stack, which could be useful for annotation.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1052
https://github.com/qupath/qupath/issues/1052:981,Usability,simpl,simplify,981,"## Feature request. **Is your feature request related to a problem? Please describe.**; ROIs are immutable and associated with a specific `ImagePlane` (generally z and t index).; This means that transferring a ROI to a different plane is tricky. **Describe the solution you'd like**; Add a `public ROI updatePlane(ImagePlane plane)` method to the `ROI` interface, and ensure it is implemented in all relevant ROI classes. **Describe alternatives you've considered**; Currently, a hack like this needs to be used:; ```groovy; def roi = GeometryTools.geometryToROI(pathObject.getROI().getGeometry(), ImagePlane.getPlane(z, t)); ```; for example [here](https://gist.github.com/petebankhead/6116f921cf8c3223c74b0346c54f532d#file-qupath-copy-annotations-across-stacks-groovy-L54). This is awkward, and can lose information - particularly with ellipses, which would be polygonized. **Additional context**; There are already `ROI.translate(x, y)` and `ROI.scale(x, y)` methods. This will simplify copying ROIs to other planes of a z-stack, which could be useful for annotation.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1052
https://github.com/qupath/qupath/pull/1054:93,Safety,avoid,avoid,93,"Improve responsiveness, somewhat counterintuitively, by introducing a delay. The point is to avoid always processing drop events (e.g. to open images) directly in the `handle(DragEvent event)` method because these could take too long - especially when launching other dialogs (e.g. to set the image type, or import to a project). This previously had the outcome that other applications (e.g. Finder on macOS) could hang for several seconds, or other temporary weirdness might occur. By storing the files/URL that were dropped and then processing them after a short delay (here, 50 ms) this problem can be avoided.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1054
https://github.com/qupath/qupath/pull/1054:605,Safety,avoid,avoided,605,"Improve responsiveness, somewhat counterintuitively, by introducing a delay. The point is to avoid always processing drop events (e.g. to open images) directly in the `handle(DragEvent event)` method because these could take too long - especially when launching other dialogs (e.g. to set the image type, or import to a project). This previously had the outcome that other applications (e.g. Finder on macOS) could hang for several seconds, or other temporary weirdness might occur. By storing the files/URL that were dropped and then processing them after a short delay (here, 50 ms) this problem can be avoided.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1054
https://github.com/qupath/qupath/pull/1054:8,Usability,responsiv,responsiveness,8,"Improve responsiveness, somewhat counterintuitively, by introducing a delay. The point is to avoid always processing drop events (e.g. to open images) directly in the `handle(DragEvent event)` method because these could take too long - especially when launching other dialogs (e.g. to set the image type, or import to a project). This previously had the outcome that other applications (e.g. Finder on macOS) could hang for several seconds, or other temporary weirdness might occur. By storing the files/URL that were dropped and then processing them after a short delay (here, 50 ms) this problem can be avoided.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1054
https://github.com/qupath/qupath/issues/1055:539,Availability,recover,recovering,539,"## Feature request. **Is your feature request related to a problem? Please describe.**; When training a pixel classifier, various settings can be customized (including features). These automatically return to their defaults when the dialog is closed. See original discussion at https://forum.image.sc/t/change-default-settings-on-pixel-classifier/70371. **Describe the solution you'd like**; A more efficient way to set these values than through clicking in the UI. **Additional context**; This could be through a saved parameter file, or recovering the settings from an existing saved classifier (reloading a saved classifier is also a frequent request). Neither is entirely straightforward, given that the available settings change based upon image properties and not all settings are currently serialised in the JSON for a classifier. Potentially, this request could be relevant for object classifiers and density maps.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1055
https://github.com/qupath/qupath/issues/1055:708,Availability,avail,available,708,"## Feature request. **Is your feature request related to a problem? Please describe.**; When training a pixel classifier, various settings can be customized (including features). These automatically return to their defaults when the dialog is closed. See original discussion at https://forum.image.sc/t/change-default-settings-on-pixel-classifier/70371. **Describe the solution you'd like**; A more efficient way to set these values than through clicking in the UI. **Additional context**; This could be through a saved parameter file, or recovering the settings from an existing saved classifier (reloading a saved classifier is also a frequent request). Neither is entirely straightforward, given that the available settings change based upon image properties and not all settings are currently serialised in the JSON for a classifier. Potentially, this request could be relevant for object classifiers and density maps.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1055
https://github.com/qupath/qupath/issues/1055:399,Energy Efficiency,efficient,efficient,399,"## Feature request. **Is your feature request related to a problem? Please describe.**; When training a pixel classifier, various settings can be customized (including features). These automatically return to their defaults when the dialog is closed. See original discussion at https://forum.image.sc/t/change-default-settings-on-pixel-classifier/70371. **Describe the solution you'd like**; A more efficient way to set these values than through clicking in the UI. **Additional context**; This could be through a saved parameter file, or recovering the settings from an existing saved classifier (reloading a saved classifier is also a frequent request). Neither is entirely straightforward, given that the available settings change based upon image properties and not all settings are currently serialised in the JSON for a classifier. Potentially, this request could be relevant for object classifiers and density maps.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1055
https://github.com/qupath/qupath/issues/1055:539,Safety,recover,recovering,539,"## Feature request. **Is your feature request related to a problem? Please describe.**; When training a pixel classifier, various settings can be customized (including features). These automatically return to their defaults when the dialog is closed. See original discussion at https://forum.image.sc/t/change-default-settings-on-pixel-classifier/70371. **Describe the solution you'd like**; A more efficient way to set these values than through clicking in the UI. **Additional context**; This could be through a saved parameter file, or recovering the settings from an existing saved classifier (reloading a saved classifier is also a frequent request). Neither is entirely straightforward, given that the available settings change based upon image properties and not all settings are currently serialised in the JSON for a classifier. Potentially, this request could be relevant for object classifiers and density maps.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1055
https://github.com/qupath/qupath/pull/1056:0,Deployability,Update,Update,0,Update to search box prompt text in dark mode as it was previously poorly visible due to styling from JavaFX modena that needed to be overridden. Before: ; ![image](https://user-images.githubusercontent.com/42358257/189848622-aeb1dfd2-4c94-4c03-8dd3-191ede8052f5.png); After:; ![image](https://user-images.githubusercontent.com/42358257/189848474-399cb277-1570-4f52-b033-137f67486b9a.png). Attempts to make the style more specific to override the external style but was unsuccessful so the less preferable !important tag was used. The colour is derived from the current background colour at that time.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1056
https://github.com/qupath/qupath/pull/1058:55,Testability,log,logback,55,"JavaFX 19 is the main one, but also slf4j 2 (including logback) and ImageJ.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1058
https://github.com/qupath/qupath/pull/1059:19,Deployability,update,update,19,"Simple text colour update for ""show details"" and icon colour update.; From ; ![image](https://user-images.githubusercontent.com/42358257/191572256-a0b3dbc3-1370-4e6d-b259-0862a3c60120.png). To:; ![image](https://user-images.githubusercontent.com/42358257/192244319-692c4d15-1018-4c3e-945f-0c4d74247a66.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1059
https://github.com/qupath/qupath/pull/1059:61,Deployability,update,update,61,"Simple text colour update for ""show details"" and icon colour update.; From ; ![image](https://user-images.githubusercontent.com/42358257/191572256-a0b3dbc3-1370-4e6d-b259-0862a3c60120.png). To:; ![image](https://user-images.githubusercontent.com/42358257/192244319-692c4d15-1018-4c3e-945f-0c4d74247a66.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1059
https://github.com/qupath/qupath/pull/1059:0,Usability,Simpl,Simple,0,"Simple text colour update for ""show details"" and icon colour update.; From ; ![image](https://user-images.githubusercontent.com/42358257/191572256-a0b3dbc3-1370-4e6d-b259-0862a3c60120.png). To:; ![image](https://user-images.githubusercontent.com/42358257/192244319-692c4d15-1018-4c3e-945f-0c4d74247a66.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1059
https://github.com/qupath/qupath/issues/1060:1204,Availability,fault,faulty,1204,"path-core/src/main/java/qupath/lib/roi/GeometryTools.java#L723) isn't exactly informative, e.g. ```; NullPointerException at line 6: Cannot invoke ""org.locationtech.jts.geom.Geometry.getNumGeometries()"" because ""geometry"" is null; qupath.lib.roi.GeometryTools.flatten(GeometryTools.java:453); qupath.lib.roi.GeometryTools.removeInteriorRings(GeometryTools.java:487); qupath.lib.roi.GeometryTools.refineAreas(GeometryTools.java:736); org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:318); Script21.run(Script21.groovy:7); ```. **To Reproduce**; Code to reproduce the behavior:. ```groovy; // Create a Line ROI; var roi = ROIs.createLineROI(0, 0, 100, 100, ImagePlane.getDefaultPlane()); // Alternative to create a Point ROI (also fails in a similar way); // var roi = ROIs.createPointsROI(0, 10, ImagePlane.getDefaultPlane()); var geom = roi.getGeometry(); GeometryTools.refineAreas(geom, 1000, 1000); ```. **Expected behavior**; The faulty input should be caught earlier and an `IllegalArgumentException` thrown with a more informative message. This is what happens with the closest method from [`RoiTools`](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/roi/RoiTools.java#L268), i.e. calling; ```groovy; var roi = ROIs.createLineROI(0, 0, 100, 100, ImagePlane.getDefaultPlane()); RoiTools.removeSmallPieces(roi, 1000, 1000); ```; results in; ```; IllegalArgumentException at line 3: Only area ROIs supported!; qupath.lib.roi.RoiTools.removeSmallPieces(RoiTools.java:382); org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:318); Script23.run(Script23.groovy:4); ```. However there are at least two problems with the javadoc for the `RoiTools` method:; * the `IllegalArgumentException` isn't mentioned; * it isn't obvious that the method returns null if the entire ROI is removed (rather than an empty ROI) - so this should be documented. **Desktop (please complete the following information):**; - OS: All; - QuPath",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1060
https://github.com/qupath/qupath/issues/1060:1307,Integrability,message,message,1307,"path-core/src/main/java/qupath/lib/roi/GeometryTools.java#L723) isn't exactly informative, e.g. ```; NullPointerException at line 6: Cannot invoke ""org.locationtech.jts.geom.Geometry.getNumGeometries()"" because ""geometry"" is null; qupath.lib.roi.GeometryTools.flatten(GeometryTools.java:453); qupath.lib.roi.GeometryTools.removeInteriorRings(GeometryTools.java:487); qupath.lib.roi.GeometryTools.refineAreas(GeometryTools.java:736); org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:318); Script21.run(Script21.groovy:7); ```. **To Reproduce**; Code to reproduce the behavior:. ```groovy; // Create a Line ROI; var roi = ROIs.createLineROI(0, 0, 100, 100, ImagePlane.getDefaultPlane()); // Alternative to create a Point ROI (also fails in a similar way); // var roi = ROIs.createPointsROI(0, 10, ImagePlane.getDefaultPlane()); var geom = roi.getGeometry(); GeometryTools.refineAreas(geom, 1000, 1000); ```. **Expected behavior**; The faulty input should be caught earlier and an `IllegalArgumentException` thrown with a more informative message. This is what happens with the closest method from [`RoiTools`](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/roi/RoiTools.java#L268), i.e. calling; ```groovy; var roi = ROIs.createLineROI(0, 0, 100, 100, ImagePlane.getDefaultPlane()); RoiTools.removeSmallPieces(roi, 1000, 1000); ```; results in; ```; IllegalArgumentException at line 3: Only area ROIs supported!; qupath.lib.roi.RoiTools.removeSmallPieces(RoiTools.java:382); org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:318); Script23.run(Script23.groovy:4); ```. However there are at least two problems with the javadoc for the `RoiTools` method:; * the `IllegalArgumentException` isn't mentioned; * it isn't obvious that the method returns null if the entire ROI is removed (rather than an empty ROI) - so this should be documented. **Desktop (please complete the following information):**; - OS: All; - QuPath",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1060
https://github.com/qupath/qupath/issues/1060:2564,Testability,test,tests,2564,"(GeometryTools.java:487); qupath.lib.roi.GeometryTools.refineAreas(GeometryTools.java:736); org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:318); Script21.run(Script21.groovy:7); ```. **To Reproduce**; Code to reproduce the behavior:. ```groovy; // Create a Line ROI; var roi = ROIs.createLineROI(0, 0, 100, 100, ImagePlane.getDefaultPlane()); // Alternative to create a Point ROI (also fails in a similar way); // var roi = ROIs.createPointsROI(0, 10, ImagePlane.getDefaultPlane()); var geom = roi.getGeometry(); GeometryTools.refineAreas(geom, 1000, 1000); ```. **Expected behavior**; The faulty input should be caught earlier and an `IllegalArgumentException` thrown with a more informative message. This is what happens with the closest method from [`RoiTools`](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/roi/RoiTools.java#L268), i.e. calling; ```groovy; var roi = ROIs.createLineROI(0, 0, 100, 100, ImagePlane.getDefaultPlane()); RoiTools.removeSmallPieces(roi, 1000, 1000); ```; results in; ```; IllegalArgumentException at line 3: Only area ROIs supported!; qupath.lib.roi.RoiTools.removeSmallPieces(RoiTools.java:382); org.codehaus.groovy.vmplugin.v8.IndyInterface.fromCache(IndyInterface.java:318); Script23.run(Script23.groovy:4); ```. However there are at least two problems with the javadoc for the `RoiTools` method:; * the `IllegalArgumentException` isn't mentioned; * it isn't obvious that the method returns null if the entire ROI is removed (rather than an empty ROI) - so this should be documented. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.3.2 (and earlier). **Additional context**; I first became aware of the issue at https://forum.image.sc/t/exporting-ndpi-ndpa-annotation-files-from-qupath-code-attached/55418/11. Potentially, the method names for `RoiTools` and `GeometryTools` should be standardised since they do much the same thing, and tests should be added.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1060
https://github.com/qupath/qupath/issues/1062:262,Safety,detect,detection,262,"## Bug report. **Describe the bug**; When using ```Charts.pieChart()``` the colors of the chart match the colors for that class of objects. However, the colors of the legend do not match!. **To Reproduce**; Steps to reproduce the behavior:; 1. Run Positive cell detection on an image; 2. Use the following code to create a pie chart:; ```; chartData = getDetectionObjects().countBy(p -> p.getPathClass()); Charts.pieChart(); .title('Test Chart'); .data(chartData); .show(); ```. **Expected behavior**; The colors of the legend shall match the colors of the pie. **Screenshots**; <p align=""center"">; <img src=""https://user-images.githubusercontent.com/10900214/192350181-ebb62218-af1a-4031-b107-fe255d5efd69.png"" width=""450"">; </p>. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: Tested on v2.3 and the latest snapshot. **Additional context**; More details on the forum:; https://forum.image.sc/t/pie-chart-legend-colors/72051",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1062
https://github.com/qupath/qupath/issues/1062:433,Testability,Test,Test,433,"## Bug report. **Describe the bug**; When using ```Charts.pieChart()``` the colors of the chart match the colors for that class of objects. However, the colors of the legend do not match!. **To Reproduce**; Steps to reproduce the behavior:; 1. Run Positive cell detection on an image; 2. Use the following code to create a pie chart:; ```; chartData = getDetectionObjects().countBy(p -> p.getPathClass()); Charts.pieChart(); .title('Test Chart'); .data(chartData); .show(); ```. **Expected behavior**; The colors of the legend shall match the colors of the pie. **Screenshots**; <p align=""center"">; <img src=""https://user-images.githubusercontent.com/10900214/192350181-ebb62218-af1a-4031-b107-fe255d5efd69.png"" width=""450"">; </p>. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: Tested on v2.3 and the latest snapshot. **Additional context**; More details on the forum:; https://forum.image.sc/t/pie-chart-legend-colors/72051",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1062
https://github.com/qupath/qupath/issues/1062:826,Testability,Test,Tested,826,"## Bug report. **Describe the bug**; When using ```Charts.pieChart()``` the colors of the chart match the colors for that class of objects. However, the colors of the legend do not match!. **To Reproduce**; Steps to reproduce the behavior:; 1. Run Positive cell detection on an image; 2. Use the following code to create a pie chart:; ```; chartData = getDetectionObjects().countBy(p -> p.getPathClass()); Charts.pieChart(); .title('Test Chart'); .data(chartData); .show(); ```. **Expected behavior**; The colors of the legend shall match the colors of the pie. **Screenshots**; <p align=""center"">; <img src=""https://user-images.githubusercontent.com/10900214/192350181-ebb62218-af1a-4031-b107-fe255d5efd69.png"" width=""450"">; </p>. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: Tested on v2.3 and the latest snapshot. **Additional context**; More details on the forum:; https://forum.image.sc/t/pie-chart-legend-colors/72051",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1062
https://github.com/qupath/qupath/pull/1063:354,Deployability,update,updates,354,"This adds support to add custom styles by adding .css files to the a css subdirectory inside the user directory (which is where extensions go, usually at ~/QuPath/v0.4/ or similar). If the custom css directory exists, a `WatchService` is created to check for changes. This means that users can add/remove/modify .css files in the directory, and see live updates (albeit with some seconds of delay, at least on macOS). To make this work, the PreferencePane needed to be updated to directly use any ObservableList with combo boxes. A new `PathPrefs.getCssStylesPath()` was also added. Additionally, `IconFactory.DuplicableGlyph` was improved to allow glyphs to respond to the `-fx-text-fill` property, and this in turn means that the toolbar icons can now be styled by css (rather than being fixed to a neutral gray). Finally, main.css was introduced to enable more QuPath-specific styling, even when using the default modena.css with JavaFX. This is particularly relevant for defining several colors reused by the script editor. ----. Examples of some minimal (not necessarily pleasing) css files and their impact:. ### Blue. ```css; .root {; -fx-base: rgb(30, 28, 75);; -fx-light-text-color: rgb(200, 200, 255);; -fx-background: derive(-fx-base, -10%);; -fx-control-inner-background: derive(-fx-base, 10%);; }; ```. ![blue](https://user-images.githubusercontent.com/4690904/192768467-440d75fc-2611-415d-b1ba-7009d7399c13.png). ### Red. ```css; .root {; -fx-base: rgb(130, 28, 25);; -fx-light-text-color: white;; -fx-background: derive(-fx-base, -10%);; -fx-control-inner-background: derive(-fx-base, -10%);; }; ```. ![red](https://user-images.githubusercontent.com/4690904/192768409-c2d38a7b-c1b0-49bd-9324-38b971833707.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1063
https://github.com/qupath/qupath/pull/1063:469,Deployability,update,updated,469,"This adds support to add custom styles by adding .css files to the a css subdirectory inside the user directory (which is where extensions go, usually at ~/QuPath/v0.4/ or similar). If the custom css directory exists, a `WatchService` is created to check for changes. This means that users can add/remove/modify .css files in the directory, and see live updates (albeit with some seconds of delay, at least on macOS). To make this work, the PreferencePane needed to be updated to directly use any ObservableList with combo boxes. A new `PathPrefs.getCssStylesPath()` was also added. Additionally, `IconFactory.DuplicableGlyph` was improved to allow glyphs to respond to the `-fx-text-fill` property, and this in turn means that the toolbar icons can now be styled by css (rather than being fixed to a neutral gray). Finally, main.css was introduced to enable more QuPath-specific styling, even when using the default modena.css with JavaFX. This is particularly relevant for defining several colors reused by the script editor. ----. Examples of some minimal (not necessarily pleasing) css files and their impact:. ### Blue. ```css; .root {; -fx-base: rgb(30, 28, 75);; -fx-light-text-color: rgb(200, 200, 255);; -fx-background: derive(-fx-base, -10%);; -fx-control-inner-background: derive(-fx-base, 10%);; }; ```. ![blue](https://user-images.githubusercontent.com/4690904/192768467-440d75fc-2611-415d-b1ba-7009d7399c13.png). ### Red. ```css; .root {; -fx-base: rgb(130, 28, 25);; -fx-light-text-color: white;; -fx-background: derive(-fx-base, -10%);; -fx-control-inner-background: derive(-fx-base, -10%);; }; ```. ![red](https://user-images.githubusercontent.com/4690904/192768409-c2d38a7b-c1b0-49bd-9324-38b971833707.png)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1063
https://github.com/qupath/qupath/pull/1064:279,Testability,log,logic,279,"Add support to construct (and initialize) a ListSelectionView from GuiTools, to work around a ControlsFX issue that can make the arrows resistant to changes in style via css. Add `GuiTools.ensureDuplicatableGlyph(glyph)` method to make this more generally useful, extracting the logic from `IconFactory`.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1064
https://github.com/qupath/qupath/issues/1065:951,Availability,error,error,951,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Trying to get tile objects using `getTileObjects()` will result in an error:; ```; ERROR: MissingMethodException at line 19: No signature of method: org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getTileObjects() is applicable for argument types: () values: []. ERROR: org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.callGlobal(GroovyScriptEngineImpl.java:404); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.access$100(GroovyScriptEngineImpl.java:90); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl$3.invokeMethod(GroovyScriptEngineImpl.java:303); org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:73); org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:176); Script8.run(Script8.groovy:20); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyS",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1065
https://github.com/qupath/qupath/issues/1065:964,Availability,ERROR,ERROR,964,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Trying to get tile objects using `getTileObjects()` will result in an error:; ```; ERROR: MissingMethodException at line 19: No signature of method: org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getTileObjects() is applicable for argument types: () values: []. ERROR: org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.callGlobal(GroovyScriptEngineImpl.java:404); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.access$100(GroovyScriptEngineImpl.java:90); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl$3.invokeMethod(GroovyScriptEngineImpl.java:303); org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:73); org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:176); Script8.run(Script8.groovy:20); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyS",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1065
https://github.com/qupath/qupath/issues/1065:1146,Availability,ERROR,ERROR,1146,"th forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Trying to get tile objects using `getTileObjects()` will result in an error:; ```; ERROR: MissingMethodException at line 19: No signature of method: org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getTileObjects() is applicable for argument types: () values: []. ERROR: org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.callGlobal(GroovyScriptEngineImpl.java:404); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.access$100(GroovyScriptEngineImpl.java:90); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl$3.invokeMethod(GroovyScriptEngineImpl.java:303); org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:73); org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:176); Script8.run(Script8.groovy:20); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:982); qupath.lib.gui.scripting.DefaultS",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1065
https://github.com/qupath/qupath/issues/1065:564,Deployability,release,release,564,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Trying to get tile objects using `getTileObjects()` will result in an error:; ```; ERROR: MissingMethodException at line 19: No signature of method: org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getTileObjects() is applicable for argument types: () values: []. ERROR: org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.callGlobal(GroovyScriptEngineImpl.java:404); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.access$100(GroovyScriptEngineImpl.java:90); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl$3.invokeMethod(GroovyScriptEngineImpl.java:303); org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:73); org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:176); Script8.run(Script8.groovy:20); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyS",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1065
https://github.com/qupath/qupath/issues/1065:760,Deployability,release,release,760,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Trying to get tile objects using `getTileObjects()` will result in an error:; ```; ERROR: MissingMethodException at line 19: No signature of method: org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getTileObjects() is applicable for argument types: () values: []. ERROR: org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.callGlobal(GroovyScriptEngineImpl.java:404); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.access$100(GroovyScriptEngineImpl.java:90); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl$3.invokeMethod(GroovyScriptEngineImpl.java:303); org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:73); org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:176); Script8.run(Script8.groovy:20); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyS",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1065
https://github.com/qupath/qupath/issues/1065:2401,Performance,concurren,concurrent,2401,"(GroovyScriptEngineImpl.java:303); org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:73); org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:176); Script8.run(Script8.groovy:20); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:982); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:914); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:829); qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1345); java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); java.base/java.util.concurrent.FutureTask.run(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; ```; import qupath.lib.roi.RoiTools; import qupath.lib.geom.ImmutableDimension. createSelectAllObject(true);; def parentAnno = getSelectedObject(). int tileSizePreferred = 100; int tileSizeMax = tileSizePreferred*1.1; def sizePreferred = ImmutableDimension.getInstance(tileSizePreferred, tileSizePreferred); def sizeMax = ImmutableDimension.getInstance(tileSizeMax, tileSizeMax); boolean fixedSize = false; int overlap = tileSizePreferred*0.1. def tilesRoi = RoiTools.computeTiledROIs(parentAnno.getROI(), sizePreferred, sizeMax, fixedSize, overlap); def tilesObj = tilesRoi.collect{ return PathObjects.createTileObject(it) ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1065
https://github.com/qupath/qupath/issues/1065:2480,Performance,concurren,concurrent,2480,"aClassSite.callCurrent(PogoMetaClassSite.java:73); org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:176); Script8.run(Script8.groovy:20); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:982); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:914); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:829); qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1345); java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); java.base/java.util.concurrent.FutureTask.run(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; ```; import qupath.lib.roi.RoiTools; import qupath.lib.geom.ImmutableDimension. createSelectAllObject(true);; def parentAnno = getSelectedObject(). int tileSizePreferred = 100; int tileSizeMax = tileSizePreferred*1.1; def sizePreferred = ImmutableDimension.getInstance(tileSizePreferred, tileSizePreferred); def sizeMax = ImmutableDimension.getInstance(tileSizeMax, tileSizeMax); boolean fixedSize = false; int overlap = tileSizePreferred*0.1. def tilesRoi = RoiTools.computeTiledROIs(parentAnno.getROI(), sizePreferred, sizeMax, fixedSize, overlap); def tilesObj = tilesRoi.collect{ return PathObjects.createTileObject(it) }; addObjects(tilesObj). println getDetectionObjects().findAll{it.isTile()}; pr",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1065
https://github.com/qupath/qupath/issues/1065:2543,Performance,concurren,concurrent,2543,".groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:176); Script8.run(Script8.groovy:20); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:982); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:914); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:829); qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1345); java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); java.base/java.util.concurrent.FutureTask.run(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; ```; import qupath.lib.roi.RoiTools; import qupath.lib.geom.ImmutableDimension. createSelectAllObject(true);; def parentAnno = getSelectedObject(). int tileSizePreferred = 100; int tileSizeMax = tileSizePreferred*1.1; def sizePreferred = ImmutableDimension.getInstance(tileSizePreferred, tileSizePreferred); def sizeMax = ImmutableDimension.getInstance(tileSizeMax, tileSizeMax); boolean fixedSize = false; int overlap = tileSizePreferred*0.1. def tilesRoi = RoiTools.computeTiledROIs(parentAnno.getROI(), sizePreferred, sizeMax, fixedSize, overlap); def tilesObj = tilesRoi.collect{ return PathObjects.createTileObject(it) }; addObjects(tilesObj). println getDetectionObjects().findAll{it.isTile()}; println getTileObjects(); ```. **Expected behavior**; The expecte",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1065
https://github.com/qupath/qupath/issues/1065:2620,Performance,concurren,concurrent,2620,"51); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:176); Script8.run(Script8.groovy:20); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:982); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:914); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:829); qupath.lib.gui.scripting.DefaultScriptEditor$2.run(DefaultScriptEditor.java:1345); java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source); java.base/java.util.concurrent.FutureTask.run(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source); java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source); java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; Steps to reproduce the behavior:; ```; import qupath.lib.roi.RoiTools; import qupath.lib.geom.ImmutableDimension. createSelectAllObject(true);; def parentAnno = getSelectedObject(). int tileSizePreferred = 100; int tileSizeMax = tileSizePreferred*1.1; def sizePreferred = ImmutableDimension.getInstance(tileSizePreferred, tileSizePreferred); def sizeMax = ImmutableDimension.getInstance(tileSizeMax, tileSizeMax); boolean fixedSize = false; int overlap = tileSizePreferred*0.1. def tilesRoi = RoiTools.computeTiledROIs(parentAnno.getROI(), sizePreferred, sizeMax, fixedSize, overlap); def tilesObj = tilesRoi.collect{ return PathObjects.createTileObject(it) }; addObjects(tilesObj). println getDetectionObjects().findAll{it.isTile()}; println getTileObjects(); ```. **Expected behavior**; The expected behaviour can be obtained by an alternative method:; `getDetectionObjects()",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1065
https://github.com/qupath/qupath/issues/1065:1298,Security,access,access,1298,"egin... Before submitting your bug report, please check the following:. * [x] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Trying to get tile objects using `getTileObjects()` will result in an error:; ```; ERROR: MissingMethodException at line 19: No signature of method: org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.getTileObjects() is applicable for argument types: () values: []. ERROR: org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.callGlobal(GroovyScriptEngineImpl.java:404); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.access$100(GroovyScriptEngineImpl.java:90); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl$3.invokeMethod(GroovyScriptEngineImpl.java:303); org.codehaus.groovy.runtime.callsite.PogoMetaClassSite.callCurrent(PogoMetaClassSite.java:73); org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:51); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171); org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:176); Script8.run(Script8.groovy:20); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:317); org.codehaus.groovy.jsr223.GroovyScriptEngineImpl.eval(GroovyScriptEngineImpl.java:155); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:982); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:914); qupath.lib.gui.scripting.DefaultScriptEditor.executeScript(DefaultScriptEditor.java:829); qupath.lib.gui.sc",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1065
https://github.com/qupath/qupath/pull/1068:857,Testability,Test,Test,857,"Fixes https://github.com/qupath/qupath/issues/1062 - at least when using modena.css as a basis. Also addresses two issues with the pie charts shown when training a pixel/object classifier:; * the legend should now be correct even when more than 8 classes are used; * there is no longer any need to write a temporary css file for styling. Pixel and object classifiers can be checked by training one of each. The `Charts` class can be checked with a script like this one:; ```groovy; def chartData =; [(getPathClass('Negative')): 5,; (getPathClass('1+')): 2,; (getPathClass('2+')): 3,; (getPathClass('3+')): 4,; (getPathClass('Tumor')): 2,; (getPathClass('Stroma')): 2,; (getPathClass('Immune cells')): 2,; (getPathClass('Other')): 2,; (getPathClass('Ignore*')): 2,; (getPathClass('Region*')): 2,; (getPathClass('Necrosis')): 2]; ; Charts.pieChart(); .title('Test Chart'); .data(chartData); .convertToPercentages(true); .show(); ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1068
https://github.com/qupath/qupath/issues/1069:559,Availability,down,downsample,559,"## IMPORTANT!. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Object connections cause moderate viewer lag when downsample factor is less than 1, evident when panning. Very minor and niche issue, but I figured I'd open a ticket anyways. **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection across a whole-slide annotation; 2. Generate object connections via ""Delaunay cluster features 2D""; 3. Set viewer downsample factor to 0.99 or less; 4. Observe lag when panning. Unchecking ""show object connections"" or setting a downsample factor greater than or equal to 1 will resolve this issue. **Expected behavior**; Visualizing objects overlaid onto images shouldn't result in substantial lag. **Screenshots**; Video recording: https://www.youtube.com/watch?v=qOBp2X6HVUc. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: Version: 0.4.0-SNAPSHOT; Build time: 2022-01-24, 13:48. **Additional context**; A 24-class composite classifier, annotation-generating pixel classifier, and several other spatial analyses were also performed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1069
https://github.com/qupath/qupath/issues/1069:872,Availability,down,downsample,872,"## IMPORTANT!. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Object connections cause moderate viewer lag when downsample factor is less than 1, evident when panning. Very minor and niche issue, but I figured I'd open a ticket anyways. **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection across a whole-slide annotation; 2. Generate object connections via ""Delaunay cluster features 2D""; 3. Set viewer downsample factor to 0.99 or less; 4. Observe lag when panning. Unchecking ""show object connections"" or setting a downsample factor greater than or equal to 1 will resolve this issue. **Expected behavior**; Visualizing objects overlaid onto images shouldn't result in substantial lag. **Screenshots**; Video recording: https://www.youtube.com/watch?v=qOBp2X6HVUc. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: Version: 0.4.0-SNAPSHOT; Build time: 2022-01-24, 13:48. **Additional context**; A 24-class composite classifier, annotation-generating pixel classifier, and several other spatial analyses were also performed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1069
https://github.com/qupath/qupath/issues/1069:986,Availability,down,downsample,986,"## IMPORTANT!. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Object connections cause moderate viewer lag when downsample factor is less than 1, evident when panning. Very minor and niche issue, but I figured I'd open a ticket anyways. **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection across a whole-slide annotation; 2. Generate object connections via ""Delaunay cluster features 2D""; 3. Set viewer downsample factor to 0.99 or less; 4. Observe lag when panning. Unchecking ""show object connections"" or setting a downsample factor greater than or equal to 1 will resolve this issue. **Expected behavior**; Visualizing objects overlaid onto images shouldn't result in substantial lag. **Screenshots**; Video recording: https://www.youtube.com/watch?v=qOBp2X6HVUc. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: Version: 0.4.0-SNAPSHOT; Build time: 2022-01-24, 13:48. **Additional context**; A 24-class composite classifier, annotation-generating pixel classifier, and several other spatial analyses were also performed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1069
https://github.com/qupath/qupath/issues/1069:192,Deployability,release,release,192,"## IMPORTANT!. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Object connections cause moderate viewer lag when downsample factor is less than 1, evident when panning. Very minor and niche issue, but I figured I'd open a ticket anyways. **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection across a whole-slide annotation; 2. Generate object connections via ""Delaunay cluster features 2D""; 3. Set viewer downsample factor to 0.99 or less; 4. Observe lag when panning. Unchecking ""show object connections"" or setting a downsample factor greater than or equal to 1 will resolve this issue. **Expected behavior**; Visualizing objects overlaid onto images shouldn't result in substantial lag. **Screenshots**; Video recording: https://www.youtube.com/watch?v=qOBp2X6HVUc. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: Version: 0.4.0-SNAPSHOT; Build time: 2022-01-24, 13:48. **Additional context**; A 24-class composite classifier, annotation-generating pixel classifier, and several other spatial analyses were also performed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1069
https://github.com/qupath/qupath/issues/1069:388,Deployability,release,release,388,"## IMPORTANT!. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Object connections cause moderate viewer lag when downsample factor is less than 1, evident when panning. Very minor and niche issue, but I figured I'd open a ticket anyways. **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection across a whole-slide annotation; 2. Generate object connections via ""Delaunay cluster features 2D""; 3. Set viewer downsample factor to 0.99 or less; 4. Observe lag when panning. Unchecking ""show object connections"" or setting a downsample factor greater than or equal to 1 will resolve this issue. **Expected behavior**; Visualizing objects overlaid onto images shouldn't result in substantial lag. **Screenshots**; Video recording: https://www.youtube.com/watch?v=qOBp2X6HVUc. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: Version: 0.4.0-SNAPSHOT; Build time: 2022-01-24, 13:48. **Additional context**; A 24-class composite classifier, annotation-generating pixel classifier, and several other spatial analyses were also performed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1069
https://github.com/qupath/qupath/issues/1069:1528,Performance,perform,performed,1528,"## IMPORTANT!. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Object connections cause moderate viewer lag when downsample factor is less than 1, evident when panning. Very minor and niche issue, but I figured I'd open a ticket anyways. **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection across a whole-slide annotation; 2. Generate object connections via ""Delaunay cluster features 2D""; 3. Set viewer downsample factor to 0.99 or less; 4. Observe lag when panning. Unchecking ""show object connections"" or setting a downsample factor greater than or equal to 1 will resolve this issue. **Expected behavior**; Visualizing objects overlaid onto images shouldn't result in substantial lag. **Screenshots**; Video recording: https://www.youtube.com/watch?v=qOBp2X6HVUc. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: Version: 0.4.0-SNAPSHOT; Build time: 2022-01-24, 13:48. **Additional context**; A 24-class composite classifier, annotation-generating pixel classifier, and several other spatial analyses were also performed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1069
https://github.com/qupath/qupath/issues/1069:748,Safety,detect,detection,748,"## IMPORTANT!. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Object connections cause moderate viewer lag when downsample factor is less than 1, evident when panning. Very minor and niche issue, but I figured I'd open a ticket anyways. **To Reproduce**; Steps to reproduce the behavior:; 1. Run cell detection across a whole-slide annotation; 2. Generate object connections via ""Delaunay cluster features 2D""; 3. Set viewer downsample factor to 0.99 or less; 4. Observe lag when panning. Unchecking ""show object connections"" or setting a downsample factor greater than or equal to 1 will resolve this issue. **Expected behavior**; Visualizing objects overlaid onto images shouldn't result in substantial lag. **Screenshots**; Video recording: https://www.youtube.com/watch?v=qOBp2X6HVUc. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: Version: 0.4.0-SNAPSHOT; Build time: 2022-01-24, 13:48. **Additional context**; A 24-class composite classifier, annotation-generating pixel classifier, and several other spatial analyses were also performed.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1069
https://github.com/qupath/qupath/pull/1070:58,Safety,avoid,avoiding,58,"Addresses https://github.com/qupath/qupath/issues/1069 by avoiding drawing each connecting line twice. Also incorporates image plane information when painting (previously, connections would only be shown if z=0 and t=0). There is still a problem with connections being lost if both objects are outside the current field of view, but their connecting line crosses the view.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1070
https://github.com/qupath/qupath/pull/1071:229,Usability,simpl,simpler,229,"Make classifications easier to work with when using GeoJSON. Now a ""classification"" property need only have a String value, or can be an object in the form `{""name"": ""classification: string"", ""color"": [r, g, b]}`. This should be simpler when generating a Feature outside of QuPath that should then become a PathObject eventually. Previously, the default Gson serialization was used - but this could result in rather awkward representations, with packed RGB values and retaining references to parent classes. Example script:; ```groovy; def pathClass = getPathClass('Tumor: Positive'); println GsonTools.getInstance(false).toJson(pathClass); ```. Output with this PR:; ```; {""name"":""Tumor: Positive"",""color"":[200,50,50]}; ```. Output before this PR:; ```json; {""parentClass"":{""name"":""Tumor"",""colorRGB"":-6750208},""name"":""Positive"",""colorRGB"":-3657166}; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1071
https://github.com/qupath/qupath/pull/1072:407,Availability,down,downsample,407,"This PR proposes a moderately significant change to the `ImageServer` interface, which I'd like to discuss (and sanity-check) with the people most affected. @iwbh15 @NicoKiaru @lacan @ap-- @sdvillal @finglis (sorry if I have missed anyone...). The background is that pixels are currently accessed in QuPath via something like; ```java; RegionRequest request = RegionRequest.createInstance(server.getPath(), downsample, x, y, width, height);; BufferedImage img = server.readBufferedImage(request);; ```. Creating a `RegionRequest` made sense in the early days, since it was used for caching. It remains useful for accessing corresponding regions in paired images, or for creating requests from ROIs, and for avoiding a plethora of parameters (particularly if `z` and `t` indices should be returned as well). However, often it just feels like unnecessary overhead, e.g. when writing simple scripts... or accessing from another language, like Python. It is pretty easy to retrofit support for; ```java; BufferedImage img = server.readBufferedImage(downsample, x, y, width, height, z, t);; BufferedImage img2 = server.readBufferedImage(downsample, x, y, width, height);; ```; by simply adding default methods to the interface. I don't think this should break anything. However this leads to another consideration... `readBufferedImage` isn't a great name, since the method really returns an instance of whatever the generic parameter `T` stands for in `ImageServer<T>`. It happens that this is pretty much always `BufferedImage` in QuPath, but the original idea was that an `ImageServer` could exists that returns something else that might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixel",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:1045,Availability,down,downsample,1045,"interface, which I'd like to discuss (and sanity-check) with the people most affected. @iwbh15 @NicoKiaru @lacan @ap-- @sdvillal @finglis (sorry if I have missed anyone...). The background is that pixels are currently accessed in QuPath via something like; ```java; RegionRequest request = RegionRequest.createInstance(server.getPath(), downsample, x, y, width, height);; BufferedImage img = server.readBufferedImage(request);; ```. Creating a `RegionRequest` made sense in the early days, since it was used for caching. It remains useful for accessing corresponding regions in paired images, or for creating requests from ROIs, and for avoiding a plethora of parameters (particularly if `z` and `t` indices should be returned as well). However, often it just feels like unnecessary overhead, e.g. when writing simple scripts... or accessing from another language, like Python. It is pretty easy to retrofit support for; ```java; BufferedImage img = server.readBufferedImage(downsample, x, y, width, height, z, t);; BufferedImage img2 = server.readBufferedImage(downsample, x, y, width, height);; ```; by simply adding default methods to the interface. I don't think this should break anything. However this leads to another consideration... `readBufferedImage` isn't a great name, since the method really returns an instance of whatever the generic parameter `T` stands for in `ImageServer<T>`. It happens that this is pretty much always `BufferedImage` in QuPath, but the original idea was that an `ImageServer` could exists that returns something else that might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as depr",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:1132,Availability,down,downsample,1132,"coKiaru @lacan @ap-- @sdvillal @finglis (sorry if I have missed anyone...). The background is that pixels are currently accessed in QuPath via something like; ```java; RegionRequest request = RegionRequest.createInstance(server.getPath(), downsample, x, y, width, height);; BufferedImage img = server.readBufferedImage(request);; ```. Creating a `RegionRequest` made sense in the early days, since it was used for caching. It remains useful for accessing corresponding regions in paired images, or for creating requests from ROIs, and for avoiding a plethora of parameters (particularly if `z` and `t` indices should be returned as well). However, often it just feels like unnecessary overhead, e.g. when writing simple scripts... or accessing from another language, like Python. It is pretty easy to retrofit support for; ```java; BufferedImage img = server.readBufferedImage(downsample, x, y, width, height, z, t);; BufferedImage img2 = server.readBufferedImage(downsample, x, y, width, height);; ```; by simply adding default methods to the interface. I don't think this should break anything. However this leads to another consideration... `readBufferedImage` isn't a great name, since the method really returns an instance of whatever the generic parameter `T` stands for in `ImageServer<T>`. It happens that this is pretty much always `BufferedImage` in QuPath, but the original idea was that an `ImageServer` could exists that returns something else that might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readR",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:1730,Availability,down,down,1730,"a of parameters (particularly if `z` and `t` indices should be returned as well). However, often it just feels like unnecessary overhead, e.g. when writing simple scripts... or accessing from another language, like Python. It is pretty easy to retrofit support for; ```java; BufferedImage img = server.readBufferedImage(downsample, x, y, width, height, z, t);; BufferedImage img2 = server.readBufferedImage(downsample, x, y, width, height);; ```; by simply adding default methods to the interface. I don't think this should break anything. However this leads to another consideration... `readBufferedImage` isn't a great name, since the method really returns an instance of whatever the generic parameter `T` stands for in `ImageServer<T>`. It happens that this is pretty much always `BufferedImage` in QuPath, but the original idea was that an `ImageServer` could exists that returns something else that might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readRegion`. These means that new classes won't need to implement the deprecated method. Then - and here it gets awkward - I've tried to allow older `ImageServer` implementations to still work by *also* providing a default implementation of `readRegion`. It will throw an `UnsupportedOperationException` *unless* it is called from a subclass that overrides the `readBufferedImage` method... in which case it will fall back to using that. The first time that happens, a warning will be logged. You can see the code at https://github.com/petebankhead/qupath/blob/se",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:2947,Availability,down,downsample,2947," tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readRegion`. These means that new classes won't need to implement the deprecated method. Then - and here it gets awkward - I've tried to allow older `ImageServer` implementations to still work by *also* providing a default implementation of `readRegion`. It will throw an `UnsupportedOperationException` *unless* it is called from a subclass that overrides the `readBufferedImage` method... in which case it will fall back to using that. The first time that happens, a warning will be logged. You can see the code at https://github.com/petebankhead/qupath/blob/server/qupath-core/src/main/java/qupath/lib/images/servers/ImageServer.java#L213. The outcome is that, with the current PR, *all* of these should work in a Groovy script:; ```groovy; def server = getCurrentServer(); double downsample = 100.0; def request = RegionRequest.createInstance(server, downsample); println server.readBufferedImage(request); println server.readRegion(request); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight()); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight(), 0, 0); ```; where the `readBufferedImage` call logs a warning *once* (for each `ImageServer` class) and the rest don't. My tentative plan would be to; * include this in QuPath v0.4.0 (hopefully later this month); * remove the default implementation of `readRegion` in v0.5.0, forcing any subclass of `ImageServer` to be updated to work... but still allowing scripts to use `readBufferedImage`, with the deprecation message logged; * remove `readBufferedImage` later, e.g. in v0.6.0. As far as I can tell, everything still works in QuPath itself - but I don't know how your projects might be affected. What do",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:3018,Availability,down,downsample,3018,"ot breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readRegion`. These means that new classes won't need to implement the deprecated method. Then - and here it gets awkward - I've tried to allow older `ImageServer` implementations to still work by *also* providing a default implementation of `readRegion`. It will throw an `UnsupportedOperationException` *unless* it is called from a subclass that overrides the `readBufferedImage` method... in which case it will fall back to using that. The first time that happens, a warning will be logged. You can see the code at https://github.com/petebankhead/qupath/blob/server/qupath-core/src/main/java/qupath/lib/images/servers/ImageServer.java#L213. The outcome is that, with the current PR, *all* of these should work in a Groovy script:; ```groovy; def server = getCurrentServer(); double downsample = 100.0; def request = RegionRequest.createInstance(server, downsample); println server.readBufferedImage(request); println server.readRegion(request); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight()); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight(), 0, 0); ```; where the `readBufferedImage` call logs a warning *once* (for each `ImageServer` class) and the rest don't. My tentative plan would be to; * include this in QuPath v0.4.0 (hopefully later this month); * remove the default implementation of `readRegion` in v0.5.0, forcing any subclass of `ImageServer` to be updated to work... but still allowing scripts to use `readBufferedImage`, with the deprecation message logged; * remove `readBufferedImage` later, e.g. in v0.6.0. As far as I can tell, everything still works in QuPath itself - but I don't know how your projects might be affected. What do you all think?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:3136,Availability,down,downsample,3136,"ot breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readRegion`. These means that new classes won't need to implement the deprecated method. Then - and here it gets awkward - I've tried to allow older `ImageServer` implementations to still work by *also* providing a default implementation of `readRegion`. It will throw an `UnsupportedOperationException` *unless* it is called from a subclass that overrides the `readBufferedImage` method... in which case it will fall back to using that. The first time that happens, a warning will be logged. You can see the code at https://github.com/petebankhead/qupath/blob/server/qupath-core/src/main/java/qupath/lib/images/servers/ImageServer.java#L213. The outcome is that, with the current PR, *all* of these should work in a Groovy script:; ```groovy; def server = getCurrentServer(); double downsample = 100.0; def request = RegionRequest.createInstance(server, downsample); println server.readBufferedImage(request); println server.readRegion(request); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight()); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight(), 0, 0); ```; where the `readBufferedImage` call logs a warning *once* (for each `ImageServer` class) and the rest don't. My tentative plan would be to; * include this in QuPath v0.4.0 (hopefully later this month); * remove the default implementation of `readRegion` in v0.5.0, forcing any subclass of `ImageServer` to be updated to work... but still allowing scripts to use `readBufferedImage`, with the deprecation message logged; * remove `readBufferedImage` later, e.g. in v0.6.0. As far as I can tell, everything still works in QuPath itself - but I don't know how your projects might be affected. What do you all think?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:3220,Availability,down,downsample,3220,"ot breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readRegion`. These means that new classes won't need to implement the deprecated method. Then - and here it gets awkward - I've tried to allow older `ImageServer` implementations to still work by *also* providing a default implementation of `readRegion`. It will throw an `UnsupportedOperationException` *unless* it is called from a subclass that overrides the `readBufferedImage` method... in which case it will fall back to using that. The first time that happens, a warning will be logged. You can see the code at https://github.com/petebankhead/qupath/blob/server/qupath-core/src/main/java/qupath/lib/images/servers/ImageServer.java#L213. The outcome is that, with the current PR, *all* of these should work in a Groovy script:; ```groovy; def server = getCurrentServer(); double downsample = 100.0; def request = RegionRequest.createInstance(server, downsample); println server.readBufferedImage(request); println server.readRegion(request); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight()); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight(), 0, 0); ```; where the `readBufferedImage` call logs a warning *once* (for each `ImageServer` class) and the rest don't. My tentative plan would be to; * include this in QuPath v0.4.0 (hopefully later this month); * remove the default implementation of `readRegion` in v0.5.0, forcing any subclass of `ImageServer` to be updated to work... but still allowing scripts to use `readBufferedImage`, with the deprecation message logged; * remove `readBufferedImage` later, e.g. in v0.6.0. As far as I can tell, everything still works in QuPath itself - but I don't know how your projects might be affected. What do you all think?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:3597,Deployability,update,updated,3597,"ot breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readRegion`. These means that new classes won't need to implement the deprecated method. Then - and here it gets awkward - I've tried to allow older `ImageServer` implementations to still work by *also* providing a default implementation of `readRegion`. It will throw an `UnsupportedOperationException` *unless* it is called from a subclass that overrides the `readBufferedImage` method... in which case it will fall back to using that. The first time that happens, a warning will be logged. You can see the code at https://github.com/petebankhead/qupath/blob/server/qupath-core/src/main/java/qupath/lib/images/servers/ImageServer.java#L213. The outcome is that, with the current PR, *all* of these should work in a Groovy script:; ```groovy; def server = getCurrentServer(); double downsample = 100.0; def request = RegionRequest.createInstance(server, downsample); println server.readBufferedImage(request); println server.readRegion(request); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight()); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight(), 0, 0); ```; where the `readBufferedImage` call logs a warning *once* (for each `ImageServer` class) and the rest don't. My tentative plan would be to; * include this in QuPath v0.4.0 (hopefully later this month); * remove the default implementation of `readRegion` in v0.5.0, forcing any subclass of `ImageServer` to be updated to work... but still allowing scripts to use `readBufferedImage`, with the deprecation message logged; * remove `readBufferedImage` later, e.g. in v0.6.0. As far as I can tell, everything still works in QuPath itself - but I don't know how your projects might be affected. What do you all think?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:70,Integrability,interface,interface,70,"This PR proposes a moderately significant change to the `ImageServer` interface, which I'd like to discuss (and sanity-check) with the people most affected. @iwbh15 @NicoKiaru @lacan @ap-- @sdvillal @finglis (sorry if I have missed anyone...). The background is that pixels are currently accessed in QuPath via something like; ```java; RegionRequest request = RegionRequest.createInstance(server.getPath(), downsample, x, y, width, height);; BufferedImage img = server.readBufferedImage(request);; ```. Creating a `RegionRequest` made sense in the early days, since it was used for caching. It remains useful for accessing corresponding regions in paired images, or for creating requests from ROIs, and for avoiding a plethora of parameters (particularly if `z` and `t` indices should be returned as well). However, often it just feels like unnecessary overhead, e.g. when writing simple scripts... or accessing from another language, like Python. It is pretty easy to retrofit support for; ```java; BufferedImage img = server.readBufferedImage(downsample, x, y, width, height, z, t);; BufferedImage img2 = server.readBufferedImage(downsample, x, y, width, height);; ```; by simply adding default methods to the interface. I don't think this should break anything. However this leads to another consideration... `readBufferedImage` isn't a great name, since the method really returns an instance of whatever the generic parameter `T` stands for in `ImageServer<T>`. It happens that this is pretty much always `BufferedImage` in QuPath, but the original idea was that an `ImageServer` could exists that returns something else that might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixel",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:1212,Integrability,interface,interface,1212,"coKiaru @lacan @ap-- @sdvillal @finglis (sorry if I have missed anyone...). The background is that pixels are currently accessed in QuPath via something like; ```java; RegionRequest request = RegionRequest.createInstance(server.getPath(), downsample, x, y, width, height);; BufferedImage img = server.readBufferedImage(request);; ```. Creating a `RegionRequest` made sense in the early days, since it was used for caching. It remains useful for accessing corresponding regions in paired images, or for creating requests from ROIs, and for avoiding a plethora of parameters (particularly if `z` and `t` indices should be returned as well). However, often it just feels like unnecessary overhead, e.g. when writing simple scripts... or accessing from another language, like Python. It is pretty easy to retrofit support for; ```java; BufferedImage img = server.readBufferedImage(downsample, x, y, width, height, z, t);; BufferedImage img2 = server.readBufferedImage(downsample, x, y, width, height);; ```; by simply adding default methods to the interface. I don't think this should break anything. However this leads to another consideration... `readBufferedImage` isn't a great name, since the method really returns an instance of whatever the generic parameter `T` stands for in `ImageServer<T>`. It happens that this is pretty much always `BufferedImage` in QuPath, but the original idea was that an `ImageServer` could exists that returns something else that might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readR",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:3692,Integrability,message,message,3692,"ot breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readRegion`. These means that new classes won't need to implement the deprecated method. Then - and here it gets awkward - I've tried to allow older `ImageServer` implementations to still work by *also* providing a default implementation of `readRegion`. It will throw an `UnsupportedOperationException` *unless* it is called from a subclass that overrides the `readBufferedImage` method... in which case it will fall back to using that. The first time that happens, a warning will be logged. You can see the code at https://github.com/petebankhead/qupath/blob/server/qupath-core/src/main/java/qupath/lib/images/servers/ImageServer.java#L213. The outcome is that, with the current PR, *all* of these should work in a Groovy script:; ```groovy; def server = getCurrentServer(); double downsample = 100.0; def request = RegionRequest.createInstance(server, downsample); println server.readBufferedImage(request); println server.readRegion(request); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight()); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight(), 0, 0); ```; where the `readBufferedImage` call logs a warning *once* (for each `ImageServer` class) and the rest don't. My tentative plan would be to; * include this in QuPath v0.4.0 (hopefully later this month); * remove the default implementation of `readRegion` in v0.5.0, forcing any subclass of `ImageServer` to be updated to work... but still allowing scripts to use `readBufferedImage`, with the deprecation message logged; * remove `readBufferedImage` later, e.g. in v0.6.0. As far as I can tell, everything still works in QuPath itself - but I don't know how your projects might be affected. What do you all think?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:707,Safety,avoid,avoiding,707,"This PR proposes a moderately significant change to the `ImageServer` interface, which I'd like to discuss (and sanity-check) with the people most affected. @iwbh15 @NicoKiaru @lacan @ap-- @sdvillal @finglis (sorry if I have missed anyone...). The background is that pixels are currently accessed in QuPath via something like; ```java; RegionRequest request = RegionRequest.createInstance(server.getPath(), downsample, x, y, width, height);; BufferedImage img = server.readBufferedImage(request);; ```. Creating a `RegionRequest` made sense in the early days, since it was used for caching. It remains useful for accessing corresponding regions in paired images, or for creating requests from ROIs, and for avoiding a plethora of parameters (particularly if `z` and `t` indices should be returned as well). However, often it just feels like unnecessary overhead, e.g. when writing simple scripts... or accessing from another language, like Python. It is pretty easy to retrofit support for; ```java; BufferedImage img = server.readBufferedImage(downsample, x, y, width, height, z, t);; BufferedImage img2 = server.readBufferedImage(downsample, x, y, width, height);; ```; by simply adding default methods to the interface. I don't think this should break anything. However this leads to another consideration... `readBufferedImage` isn't a great name, since the method really returns an instance of whatever the generic parameter `T` stands for in `ImageServer<T>`. It happens that this is pretty much always `BufferedImage` in QuPath, but the original idea was that an `ImageServer` could exists that returns something else that might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixel",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:288,Security,access,accessed,288,"This PR proposes a moderately significant change to the `ImageServer` interface, which I'd like to discuss (and sanity-check) with the people most affected. @iwbh15 @NicoKiaru @lacan @ap-- @sdvillal @finglis (sorry if I have missed anyone...). The background is that pixels are currently accessed in QuPath via something like; ```java; RegionRequest request = RegionRequest.createInstance(server.getPath(), downsample, x, y, width, height);; BufferedImage img = server.readBufferedImage(request);; ```. Creating a `RegionRequest` made sense in the early days, since it was used for caching. It remains useful for accessing corresponding regions in paired images, or for creating requests from ROIs, and for avoiding a plethora of parameters (particularly if `z` and `t` indices should be returned as well). However, often it just feels like unnecessary overhead, e.g. when writing simple scripts... or accessing from another language, like Python. It is pretty easy to retrofit support for; ```java; BufferedImage img = server.readBufferedImage(downsample, x, y, width, height, z, t);; BufferedImage img2 = server.readBufferedImage(downsample, x, y, width, height);; ```; by simply adding default methods to the interface. I don't think this should break anything. However this leads to another consideration... `readBufferedImage` isn't a great name, since the method really returns an instance of whatever the generic parameter `T` stands for in `ImageServer<T>`. It happens that this is pretty much always `BufferedImage` in QuPath, but the original idea was that an `ImageServer` could exists that returns something else that might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixel",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:613,Security,access,accessing,613,"This PR proposes a moderately significant change to the `ImageServer` interface, which I'd like to discuss (and sanity-check) with the people most affected. @iwbh15 @NicoKiaru @lacan @ap-- @sdvillal @finglis (sorry if I have missed anyone...). The background is that pixels are currently accessed in QuPath via something like; ```java; RegionRequest request = RegionRequest.createInstance(server.getPath(), downsample, x, y, width, height);; BufferedImage img = server.readBufferedImage(request);; ```. Creating a `RegionRequest` made sense in the early days, since it was used for caching. It remains useful for accessing corresponding regions in paired images, or for creating requests from ROIs, and for avoiding a plethora of parameters (particularly if `z` and `t` indices should be returned as well). However, often it just feels like unnecessary overhead, e.g. when writing simple scripts... or accessing from another language, like Python. It is pretty easy to retrofit support for; ```java; BufferedImage img = server.readBufferedImage(downsample, x, y, width, height, z, t);; BufferedImage img2 = server.readBufferedImage(downsample, x, y, width, height);; ```; by simply adding default methods to the interface. I don't think this should break anything. However this leads to another consideration... `readBufferedImage` isn't a great name, since the method really returns an instance of whatever the generic parameter `T` stands for in `ImageServer<T>`. It happens that this is pretty much always `BufferedImage` in QuPath, but the original idea was that an `ImageServer` could exists that returns something else that might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixel",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:902,Security,access,accessing,902,"This PR proposes a moderately significant change to the `ImageServer` interface, which I'd like to discuss (and sanity-check) with the people most affected. @iwbh15 @NicoKiaru @lacan @ap-- @sdvillal @finglis (sorry if I have missed anyone...). The background is that pixels are currently accessed in QuPath via something like; ```java; RegionRequest request = RegionRequest.createInstance(server.getPath(), downsample, x, y, width, height);; BufferedImage img = server.readBufferedImage(request);; ```. Creating a `RegionRequest` made sense in the early days, since it was used for caching. It remains useful for accessing corresponding regions in paired images, or for creating requests from ROIs, and for avoiding a plethora of parameters (particularly if `z` and `t` indices should be returned as well). However, often it just feels like unnecessary overhead, e.g. when writing simple scripts... or accessing from another language, like Python. It is pretty easy to retrofit support for; ```java; BufferedImage img = server.readBufferedImage(downsample, x, y, width, height, z, t);; BufferedImage img2 = server.readBufferedImage(downsample, x, y, width, height);; ```; by simply adding default methods to the interface. I don't think this should break anything. However this leads to another consideration... `readBufferedImage` isn't a great name, since the method really returns an instance of whatever the generic parameter `T` stands for in `ImageServer<T>`. It happens that this is pretty much always `BufferedImage` in QuPath, but the original idea was that an `ImageServer` could exists that returns something else that might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixel",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:2648,Testability,log,logged,2648,"at might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readRegion`. These means that new classes won't need to implement the deprecated method. Then - and here it gets awkward - I've tried to allow older `ImageServer` implementations to still work by *also* providing a default implementation of `readRegion`. It will throw an `UnsupportedOperationException` *unless* it is called from a subclass that overrides the `readBufferedImage` method... in which case it will fall back to using that. The first time that happens, a warning will be logged. You can see the code at https://github.com/petebankhead/qupath/blob/server/qupath-core/src/main/java/qupath/lib/images/servers/ImageServer.java#L213. The outcome is that, with the current PR, *all* of these should work in a Groovy script:; ```groovy; def server = getCurrentServer(); double downsample = 100.0; def request = RegionRequest.createInstance(server, downsample); println server.readBufferedImage(request); println server.readRegion(request); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight()); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight(), 0, 0); ```; where the `readBufferedImage` call logs a warning *once* (for each `ImageServer` class) and the rest don't. My tentative plan would be to; * include this in QuPath v0.4.0 (hopefully later this month); * remove the default implementation of `readRegion` in v0.5.0, forcing any subclass of `ImageServer` to be updated to work... but still al",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:3324,Testability,log,logs,3324,"ot breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readRegion`. These means that new classes won't need to implement the deprecated method. Then - and here it gets awkward - I've tried to allow older `ImageServer` implementations to still work by *also* providing a default implementation of `readRegion`. It will throw an `UnsupportedOperationException` *unless* it is called from a subclass that overrides the `readBufferedImage` method... in which case it will fall back to using that. The first time that happens, a warning will be logged. You can see the code at https://github.com/petebankhead/qupath/blob/server/qupath-core/src/main/java/qupath/lib/images/servers/ImageServer.java#L213. The outcome is that, with the current PR, *all* of these should work in a Groovy script:; ```groovy; def server = getCurrentServer(); double downsample = 100.0; def request = RegionRequest.createInstance(server, downsample); println server.readBufferedImage(request); println server.readRegion(request); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight()); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight(), 0, 0); ```; where the `readBufferedImage` call logs a warning *once* (for each `ImageServer` class) and the rest don't. My tentative plan would be to; * include this in QuPath v0.4.0 (hopefully later this month); * remove the default implementation of `readRegion` in v0.5.0, forcing any subclass of `ImageServer` to be updated to work... but still allowing scripts to use `readBufferedImage`, with the deprecation message logged; * remove `readBufferedImage` later, e.g. in v0.6.0. As far as I can tell, everything still works in QuPath itself - but I don't know how your projects might be affected. What do you all think?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:3700,Testability,log,logged,3700,"ot breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readRegion`. These means that new classes won't need to implement the deprecated method. Then - and here it gets awkward - I've tried to allow older `ImageServer` implementations to still work by *also* providing a default implementation of `readRegion`. It will throw an `UnsupportedOperationException` *unless* it is called from a subclass that overrides the `readBufferedImage` method... in which case it will fall back to using that. The first time that happens, a warning will be logged. You can see the code at https://github.com/petebankhead/qupath/blob/server/qupath-core/src/main/java/qupath/lib/images/servers/ImageServer.java#L213. The outcome is that, with the current PR, *all* of these should work in a Groovy script:; ```groovy; def server = getCurrentServer(); double downsample = 100.0; def request = RegionRequest.createInstance(server, downsample); println server.readBufferedImage(request); println server.readRegion(request); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight()); println server.readRegion(downsample, 0, 0, server.getWidth(), server.getHeight(), 0, 0); ```; where the `readBufferedImage` call logs a warning *once* (for each `ImageServer` class) and the rest don't. My tentative plan would be to; * include this in QuPath v0.4.0 (hopefully later this month); * remove the default implementation of `readRegion` in v0.5.0, forcing any subclass of `ImageServer` to be updated to work... but still allowing scripts to use `readBufferedImage`, with the deprecation message logged; * remove `readBufferedImage` later, e.g. in v0.6.0. As far as I can tell, everything still works in QuPath itself - but I don't know how your projects might be affected. What do you all think?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:881,Usability,simpl,simple,881,"This PR proposes a moderately significant change to the `ImageServer` interface, which I'd like to discuss (and sanity-check) with the people most affected. @iwbh15 @NicoKiaru @lacan @ap-- @sdvillal @finglis (sorry if I have missed anyone...). The background is that pixels are currently accessed in QuPath via something like; ```java; RegionRequest request = RegionRequest.createInstance(server.getPath(), downsample, x, y, width, height);; BufferedImage img = server.readBufferedImage(request);; ```. Creating a `RegionRequest` made sense in the early days, since it was used for caching. It remains useful for accessing corresponding regions in paired images, or for creating requests from ROIs, and for avoiding a plethora of parameters (particularly if `z` and `t` indices should be returned as well). However, often it just feels like unnecessary overhead, e.g. when writing simple scripts... or accessing from another language, like Python. It is pretty easy to retrofit support for; ```java; BufferedImage img = server.readBufferedImage(downsample, x, y, width, height, z, t);; BufferedImage img2 = server.readBufferedImage(downsample, x, y, width, height);; ```; by simply adding default methods to the interface. I don't think this should break anything. However this leads to another consideration... `readBufferedImage` isn't a great name, since the method really returns an instance of whatever the generic parameter `T` stands for in `ImageServer<T>`. It happens that this is pretty much always `BufferedImage` in QuPath, but the original idea was that an `ImageServer` could exists that returns something else that might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixel",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:1175,Usability,simpl,simply,1175,"coKiaru @lacan @ap-- @sdvillal @finglis (sorry if I have missed anyone...). The background is that pixels are currently accessed in QuPath via something like; ```java; RegionRequest request = RegionRequest.createInstance(server.getPath(), downsample, x, y, width, height);; BufferedImage img = server.readBufferedImage(request);; ```. Creating a `RegionRequest` made sense in the early days, since it was used for caching. It remains useful for accessing corresponding regions in paired images, or for creating requests from ROIs, and for avoiding a plethora of parameters (particularly if `z` and `t` indices should be returned as well). However, often it just feels like unnecessary overhead, e.g. when writing simple scripts... or accessing from another language, like Python. It is pretty easy to retrofit support for; ```java; BufferedImage img = server.readBufferedImage(downsample, x, y, width, height, z, t);; BufferedImage img2 = server.readBufferedImage(downsample, x, y, width, height);; ```; by simply adding default methods to the interface. I don't think this should break anything. However this leads to another consideration... `readBufferedImage` isn't a great name, since the method really returns an instance of whatever the generic parameter `T` stands for in `ImageServer<T>`. It happens that this is pretty much always `BufferedImage` in QuPath, but the original idea was that an `ImageServer` could exists that returns something else that might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readR",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1072:1870,Usability,intuit,intuitive,1870,"head, e.g. when writing simple scripts... or accessing from another language, like Python. It is pretty easy to retrofit support for; ```java; BufferedImage img = server.readBufferedImage(downsample, x, y, width, height, z, t);; BufferedImage img2 = server.readBufferedImage(downsample, x, y, width, height);; ```; by simply adding default methods to the interface. I don't think this should break anything. However this leads to another consideration... `readBufferedImage` isn't a great name, since the method really returns an instance of whatever the generic parameter `T` stands for in `ImageServer<T>`. It happens that this is pretty much always `BufferedImage` in QuPath, but the original idea was that an `ImageServer` could exists that returns something else that might be more convenient (e.g. something from ImgLib2, or an OpenCV `Mat`). So rather than doubling-down on `server.readBufferedImage` I would like to switch to `server.readRegion(RegionRequest)` instead. This feels to me more accurate and intuitive. The tricky bit is not breaking everything else... like parts of paquo or warpy, and all existing scripts that need pixels. The approach I've taken here is to mark `readBufferedImage` as deprecated (and planned for removal), while also providing a default implementation that calls `readRegion`. These means that new classes won't need to implement the deprecated method. Then - and here it gets awkward - I've tried to allow older `ImageServer` implementations to still work by *also* providing a default implementation of `readRegion`. It will throw an `UnsupportedOperationException` *unless* it is called from a subclass that overrides the `readBufferedImage` method... in which case it will fall back to using that. The first time that happens, a warning will be logged. You can see the code at https://github.com/petebankhead/qupath/blob/server/qupath-core/src/main/java/qupath/lib/images/servers/ImageServer.java#L213. The outcome is that, with the current PR, *all* of ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1072
https://github.com/qupath/qupath/pull/1073:2,Deployability,Update,Update,2,- Update to Bio-Formats 6.11.0 - see https://forum.image.sc/t/release-of-bio-formats-6-11-0/72733; - Add javafx-fxml.jar for testing; - Update ReadMe with dev team,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1073
https://github.com/qupath/qupath/pull/1073:62,Deployability,release,release-of-bio-formats-,62,- Update to Bio-Formats 6.11.0 - see https://forum.image.sc/t/release-of-bio-formats-6-11-0/72733; - Add javafx-fxml.jar for testing; - Update ReadMe with dev team,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1073
https://github.com/qupath/qupath/pull/1073:136,Deployability,Update,Update,136,- Update to Bio-Formats 6.11.0 - see https://forum.image.sc/t/release-of-bio-formats-6-11-0/72733; - Add javafx-fxml.jar for testing; - Update ReadMe with dev team,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1073
https://github.com/qupath/qupath/pull/1073:125,Testability,test,testing,125,- Update to Bio-Formats 6.11.0 - see https://forum.image.sc/t/release-of-bio-formats-6-11-0/72733; - Add javafx-fxml.jar for testing; - Update ReadMe with dev team,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1073
https://github.com/qupath/qupath/pull/1076:176,Safety,detect,detection-for-wsis,176,Also fixes a possible bug when making measurements from point annotations.; Inspired by this discussion: https://forum.image.sc/t/qupath-measure-pixel-classifier-area-per-cell-detection-for-wsis/72701,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1076
https://github.com/qupath/qupath/pull/1077:2,Deployability,Update,Update,2,- Update to ControlsFX 11.1.2; - Attempt to further improve dialogs in dark mode (duplicating images in a project had a light boundary); - Replace 'Remove/Duplicate image(s)' with the actual number of images in the project context menu,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1077
https://github.com/qupath/qupath/pull/1078:1612,Availability,avail,available,1612," when the scripting is complete, inviting the user to reload the data to see any changes:. <img width=""375"" alt=""Prompt to reload"" src=""https://user-images.githubusercontent.com/4690904/196366065-23f2a1f7-0146-41a9-a8ba-367d11605d12.png"">. ## New `ScriptAttributes` to access file and batch info. Several [attributes](https://github.com/qupath/qupath/commit/a1d40fb6647454a4500cb305d19e2f8698caa2fa) are now set when scripts are run, which can be queried in Groovy via `getProperty(attribute)`. Examples:. ```groovy; // The number of images being processed in batch (e.g. with 'Run for project'); int batchSize = getProperty(ScriptAttributes.BATCH_SIZE). // The 0-based index for the current image being processed; int batchIndex = getProperty(ScriptAttributes.BATCH_INDEX). // Query if this is the last image being processed in a batch; boolean batchLast = getProperty(ScriptAttributes.BATCH_LAST). // The file path for the script file (or null if not available); // (Note that the file contents may differ from the script if there are unsaved changes); String filePath = getProperty(ScriptAttributes.FILE_PATH); ```. The inspiration is from https://github.com/qupath/qupath/issues/1029. These changes make useful things possible, e.g.; * take action to notify the user at the end of long-running batch processing; * access other scripts or files relative to the script file itself. ## New `Timeit` class. The new `Timeit` class simplifies reporting the length of time it takes scripts (or parts of scripts) to run. Simple use involves starting a `Timeit` early, calling `start()`, and printing it whenever you want:; ```groovy; def timeit = new Timeit().start(); Thread.sleep(100); println timeit; Thread.sleep(200); println timeit; ```; Output:; ```; Time since start	106 ms; Time since start	314 ms; ```. It's also possible to have a bit more control, setting named checkpoints along the way:. ```groovy; var timeit = new Timeit(); .microseconds(); .start(""First checkpoint""); ; println 'Doing som",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:2529,Availability,checkpoint,checkpoints,2529,"ast = getProperty(ScriptAttributes.BATCH_LAST). // The file path for the script file (or null if not available); // (Note that the file contents may differ from the script if there are unsaved changes); String filePath = getProperty(ScriptAttributes.FILE_PATH); ```. The inspiration is from https://github.com/qupath/qupath/issues/1029. These changes make useful things possible, e.g.; * take action to notify the user at the end of long-running batch processing; * access other scripts or files relative to the script file itself. ## New `Timeit` class. The new `Timeit` class simplifies reporting the length of time it takes scripts (or parts of scripts) to run. Simple use involves starting a `Timeit` early, calling `start()`, and printing it whenever you want:; ```groovy; def timeit = new Timeit().start(); Thread.sleep(100); println timeit; Thread.sleep(200); println timeit; ```; Output:; ```; Time since start	106 ms; Time since start	314 ms; ```. It's also possible to have a bit more control, setting named checkpoints along the way:. ```groovy; var timeit = new Timeit(); .microseconds(); .start(""First checkpoint""); ; println 'Doing something now'; Thread.sleep(100). timeit.checkpoint(""Second checkpoint""). println 'Waiting for a bit'; Thread.sleep(200); ; timeit.stop(). println ""Doing something that isn't timed""; Thread.sleep(200). println timeit; ```. Output:; ```; Doing something now; Waiting for a bit; Doing something that isn't timed; First checkpoint	106323 µs; Second checkpoint	208185 µs; Total duration	314508 µs; ```. It can also be used to run the same code multiple times, reporting the individual and average times:. ```groovy; var timeit = new Timeit(); .summarizeCheckpoints(); .checkpointAndRun(""My calculation"", () -> mySlowCalculation(), 10); ; println timeit.stop() // Important to stop to get time for last checkpoint. void mySlowCalculation() {; def x = 2 + 2; Thread.sleep(50); }; ```. Output:; ```; My calculation (1)	56 ms; My calculation (2)	55 ms; My calcul",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:2626,Availability,checkpoint,checkpoint,2626," contents may differ from the script if there are unsaved changes); String filePath = getProperty(ScriptAttributes.FILE_PATH); ```. The inspiration is from https://github.com/qupath/qupath/issues/1029. These changes make useful things possible, e.g.; * take action to notify the user at the end of long-running batch processing; * access other scripts or files relative to the script file itself. ## New `Timeit` class. The new `Timeit` class simplifies reporting the length of time it takes scripts (or parts of scripts) to run. Simple use involves starting a `Timeit` early, calling `start()`, and printing it whenever you want:; ```groovy; def timeit = new Timeit().start(); Thread.sleep(100); println timeit; Thread.sleep(200); println timeit; ```; Output:; ```; Time since start	106 ms; Time since start	314 ms; ```. It's also possible to have a bit more control, setting named checkpoints along the way:. ```groovy; var timeit = new Timeit(); .microseconds(); .start(""First checkpoint""); ; println 'Doing something now'; Thread.sleep(100). timeit.checkpoint(""Second checkpoint""). println 'Waiting for a bit'; Thread.sleep(200); ; timeit.stop(). println ""Doing something that isn't timed""; Thread.sleep(200). println timeit; ```. Output:; ```; Doing something now; Waiting for a bit; Doing something that isn't timed; First checkpoint	106323 µs; Second checkpoint	208185 µs; Total duration	314508 µs; ```. It can also be used to run the same code multiple times, reporting the individual and average times:. ```groovy; var timeit = new Timeit(); .summarizeCheckpoints(); .checkpointAndRun(""My calculation"", () -> mySlowCalculation(), 10); ; println timeit.stop() // Important to stop to get time for last checkpoint. void mySlowCalculation() {; def x = 2 + 2; Thread.sleep(50); }; ```. Output:; ```; My calculation (1)	56 ms; My calculation (2)	55 ms; My calculation (3)	54 ms; My calculation (4)	55 ms; My calculation (5)	61 ms; My calculation (6)	52 ms; My calculation (7)	55 ms; My calculation",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:2699,Availability,checkpoint,checkpoint,2699,"tring filePath = getProperty(ScriptAttributes.FILE_PATH); ```. The inspiration is from https://github.com/qupath/qupath/issues/1029. These changes make useful things possible, e.g.; * take action to notify the user at the end of long-running batch processing; * access other scripts or files relative to the script file itself. ## New `Timeit` class. The new `Timeit` class simplifies reporting the length of time it takes scripts (or parts of scripts) to run. Simple use involves starting a `Timeit` early, calling `start()`, and printing it whenever you want:; ```groovy; def timeit = new Timeit().start(); Thread.sleep(100); println timeit; Thread.sleep(200); println timeit; ```; Output:; ```; Time since start	106 ms; Time since start	314 ms; ```. It's also possible to have a bit more control, setting named checkpoints along the way:. ```groovy; var timeit = new Timeit(); .microseconds(); .start(""First checkpoint""); ; println 'Doing something now'; Thread.sleep(100). timeit.checkpoint(""Second checkpoint""). println 'Waiting for a bit'; Thread.sleep(200); ; timeit.stop(). println ""Doing something that isn't timed""; Thread.sleep(200). println timeit; ```. Output:; ```; Doing something now; Waiting for a bit; Doing something that isn't timed; First checkpoint	106323 µs; Second checkpoint	208185 µs; Total duration	314508 µs; ```. It can also be used to run the same code multiple times, reporting the individual and average times:. ```groovy; var timeit = new Timeit(); .summarizeCheckpoints(); .checkpointAndRun(""My calculation"", () -> mySlowCalculation(), 10); ; println timeit.stop() // Important to stop to get time for last checkpoint. void mySlowCalculation() {; def x = 2 + 2; Thread.sleep(50); }; ```. Output:; ```; My calculation (1)	56 ms; My calculation (2)	55 ms; My calculation (3)	54 ms; My calculation (4)	55 ms; My calculation (5)	61 ms; My calculation (6)	52 ms; My calculation (7)	55 ms; My calculation (8)	55 ms; My calculation (9)	53 ms; My calculation (10)	57 ms; Tot",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:2718,Availability,checkpoint,checkpoint,2718,"tring filePath = getProperty(ScriptAttributes.FILE_PATH); ```. The inspiration is from https://github.com/qupath/qupath/issues/1029. These changes make useful things possible, e.g.; * take action to notify the user at the end of long-running batch processing; * access other scripts or files relative to the script file itself. ## New `Timeit` class. The new `Timeit` class simplifies reporting the length of time it takes scripts (or parts of scripts) to run. Simple use involves starting a `Timeit` early, calling `start()`, and printing it whenever you want:; ```groovy; def timeit = new Timeit().start(); Thread.sleep(100); println timeit; Thread.sleep(200); println timeit; ```; Output:; ```; Time since start	106 ms; Time since start	314 ms; ```. It's also possible to have a bit more control, setting named checkpoints along the way:. ```groovy; var timeit = new Timeit(); .microseconds(); .start(""First checkpoint""); ; println 'Doing something now'; Thread.sleep(100). timeit.checkpoint(""Second checkpoint""). println 'Waiting for a bit'; Thread.sleep(200); ; timeit.stop(). println ""Doing something that isn't timed""; Thread.sleep(200). println timeit; ```. Output:; ```; Doing something now; Waiting for a bit; Doing something that isn't timed; First checkpoint	106323 µs; Second checkpoint	208185 µs; Total duration	314508 µs; ```. It can also be used to run the same code multiple times, reporting the individual and average times:. ```groovy; var timeit = new Timeit(); .summarizeCheckpoints(); .checkpointAndRun(""My calculation"", () -> mySlowCalculation(), 10); ; println timeit.stop() // Important to stop to get time for last checkpoint. void mySlowCalculation() {; def x = 2 + 2; Thread.sleep(50); }; ```. Output:; ```; My calculation (1)	56 ms; My calculation (2)	55 ms; My calculation (3)	54 ms; My calculation (4)	55 ms; My calculation (5)	61 ms; My calculation (6)	52 ms; My calculation (7)	55 ms; My calculation (8)	55 ms; My calculation (9)	53 ms; My calculation (10)	57 ms; Tot",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:2975,Availability,checkpoint,checkpoint,2975,"ssing; * access other scripts or files relative to the script file itself. ## New `Timeit` class. The new `Timeit` class simplifies reporting the length of time it takes scripts (or parts of scripts) to run. Simple use involves starting a `Timeit` early, calling `start()`, and printing it whenever you want:; ```groovy; def timeit = new Timeit().start(); Thread.sleep(100); println timeit; Thread.sleep(200); println timeit; ```; Output:; ```; Time since start	106 ms; Time since start	314 ms; ```. It's also possible to have a bit more control, setting named checkpoints along the way:. ```groovy; var timeit = new Timeit(); .microseconds(); .start(""First checkpoint""); ; println 'Doing something now'; Thread.sleep(100). timeit.checkpoint(""Second checkpoint""). println 'Waiting for a bit'; Thread.sleep(200); ; timeit.stop(). println ""Doing something that isn't timed""; Thread.sleep(200). println timeit; ```. Output:; ```; Doing something now; Waiting for a bit; Doing something that isn't timed; First checkpoint	106323 µs; Second checkpoint	208185 µs; Total duration	314508 µs; ```. It can also be used to run the same code multiple times, reporting the individual and average times:. ```groovy; var timeit = new Timeit(); .summarizeCheckpoints(); .checkpointAndRun(""My calculation"", () -> mySlowCalculation(), 10); ; println timeit.stop() // Important to stop to get time for last checkpoint. void mySlowCalculation() {; def x = 2 + 2; Thread.sleep(50); }; ```. Output:; ```; My calculation (1)	56 ms; My calculation (2)	55 ms; My calculation (3)	54 ms; My calculation (4)	55 ms; My calculation (5)	61 ms; My calculation (6)	52 ms; My calculation (7)	55 ms; My calculation (8)	55 ms; My calculation (9)	53 ms; My calculation (10)	57 ms; Total duration	554 ms; Average per checkpoint: 55 ms; ```. ## Fix methods to get objects. Add missing `QP.getTileObjects()` method (https://github.com/qupath/qupath/issues/1065). Also ensure that `QP.getAllObjects()` returns a collection rather than array,",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:3004,Availability,checkpoint,checkpoint,3004,"ssing; * access other scripts or files relative to the script file itself. ## New `Timeit` class. The new `Timeit` class simplifies reporting the length of time it takes scripts (or parts of scripts) to run. Simple use involves starting a `Timeit` early, calling `start()`, and printing it whenever you want:; ```groovy; def timeit = new Timeit().start(); Thread.sleep(100); println timeit; Thread.sleep(200); println timeit; ```; Output:; ```; Time since start	106 ms; Time since start	314 ms; ```. It's also possible to have a bit more control, setting named checkpoints along the way:. ```groovy; var timeit = new Timeit(); .microseconds(); .start(""First checkpoint""); ; println 'Doing something now'; Thread.sleep(100). timeit.checkpoint(""Second checkpoint""). println 'Waiting for a bit'; Thread.sleep(200); ; timeit.stop(). println ""Doing something that isn't timed""; Thread.sleep(200). println timeit; ```. Output:; ```; Doing something now; Waiting for a bit; Doing something that isn't timed; First checkpoint	106323 µs; Second checkpoint	208185 µs; Total duration	314508 µs; ```. It can also be used to run the same code multiple times, reporting the individual and average times:. ```groovy; var timeit = new Timeit(); .summarizeCheckpoints(); .checkpointAndRun(""My calculation"", () -> mySlowCalculation(), 10); ; println timeit.stop() // Important to stop to get time for last checkpoint. void mySlowCalculation() {; def x = 2 + 2; Thread.sleep(50); }; ```. Output:; ```; My calculation (1)	56 ms; My calculation (2)	55 ms; My calculation (3)	54 ms; My calculation (4)	55 ms; My calculation (5)	61 ms; My calculation (6)	52 ms; My calculation (7)	55 ms; My calculation (8)	55 ms; My calculation (9)	53 ms; My calculation (10)	57 ms; Total duration	554 ms; Average per checkpoint: 55 ms; ```. ## Fix methods to get objects. Add missing `QP.getTileObjects()` method (https://github.com/qupath/qupath/issues/1065). Also ensure that `QP.getAllObjects()` returns a collection rather than array,",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:3223,Availability,checkpoint,checkpointAndRun,3223,"r you want:; ```groovy; def timeit = new Timeit().start(); Thread.sleep(100); println timeit; Thread.sleep(200); println timeit; ```; Output:; ```; Time since start	106 ms; Time since start	314 ms; ```. It's also possible to have a bit more control, setting named checkpoints along the way:. ```groovy; var timeit = new Timeit(); .microseconds(); .start(""First checkpoint""); ; println 'Doing something now'; Thread.sleep(100). timeit.checkpoint(""Second checkpoint""). println 'Waiting for a bit'; Thread.sleep(200); ; timeit.stop(). println ""Doing something that isn't timed""; Thread.sleep(200). println timeit; ```. Output:; ```; Doing something now; Waiting for a bit; Doing something that isn't timed; First checkpoint	106323 µs; Second checkpoint	208185 µs; Total duration	314508 µs; ```. It can also be used to run the same code multiple times, reporting the individual and average times:. ```groovy; var timeit = new Timeit(); .summarizeCheckpoints(); .checkpointAndRun(""My calculation"", () -> mySlowCalculation(), 10); ; println timeit.stop() // Important to stop to get time for last checkpoint. void mySlowCalculation() {; def x = 2 + 2; Thread.sleep(50); }; ```. Output:; ```; My calculation (1)	56 ms; My calculation (2)	55 ms; My calculation (3)	54 ms; My calculation (4)	55 ms; My calculation (5)	61 ms; My calculation (6)	52 ms; My calculation (7)	55 ms; My calculation (8)	55 ms; My calculation (9)	53 ms; My calculation (10)	57 ms; Total duration	554 ms; Average per checkpoint: 55 ms; ```. ## Fix methods to get objects. Add missing `QP.getTileObjects()` method (https://github.com/qupath/qupath/issues/1065). Also ensure that `QP.getAllObjects()` returns a collection rather than array, for better consistency. ## Add version checking scripting methods. New methods to check the running QuPath version in scripts.; If the check fails, an exception will be thrown that will cause the script not to run. ```groovy; // Version v0.4.0 or newer; checkMinVersion('0.4.0'). // Version v0.4.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:3356,Availability,checkpoint,checkpoint,3356,"100); println timeit; Thread.sleep(200); println timeit; ```; Output:; ```; Time since start	106 ms; Time since start	314 ms; ```. It's also possible to have a bit more control, setting named checkpoints along the way:. ```groovy; var timeit = new Timeit(); .microseconds(); .start(""First checkpoint""); ; println 'Doing something now'; Thread.sleep(100). timeit.checkpoint(""Second checkpoint""). println 'Waiting for a bit'; Thread.sleep(200); ; timeit.stop(). println ""Doing something that isn't timed""; Thread.sleep(200). println timeit; ```. Output:; ```; Doing something now; Waiting for a bit; Doing something that isn't timed; First checkpoint	106323 µs; Second checkpoint	208185 µs; Total duration	314508 µs; ```. It can also be used to run the same code multiple times, reporting the individual and average times:. ```groovy; var timeit = new Timeit(); .summarizeCheckpoints(); .checkpointAndRun(""My calculation"", () -> mySlowCalculation(), 10); ; println timeit.stop() // Important to stop to get time for last checkpoint. void mySlowCalculation() {; def x = 2 + 2; Thread.sleep(50); }; ```. Output:; ```; My calculation (1)	56 ms; My calculation (2)	55 ms; My calculation (3)	54 ms; My calculation (4)	55 ms; My calculation (5)	61 ms; My calculation (6)	52 ms; My calculation (7)	55 ms; My calculation (8)	55 ms; My calculation (9)	53 ms; My calculation (10)	57 ms; Total duration	554 ms; Average per checkpoint: 55 ms; ```. ## Fix methods to get objects. Add missing `QP.getTileObjects()` method (https://github.com/qupath/qupath/issues/1065). Also ensure that `QP.getAllObjects()` returns a collection rather than array, for better consistency. ## Add version checking scripting methods. New methods to check the running QuPath version in scripts.; If the check fails, an exception will be thrown that will cause the script not to run. ```groovy; // Version v0.4.0 or newer; checkMinVersion('0.4.0'). // Version v0.4.x (but not earlier or later); checkVersionRange('0.4.0', '0.5.0'); ```. ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:3747,Availability,checkpoint,checkpoint,3747,"conds(); .start(""First checkpoint""); ; println 'Doing something now'; Thread.sleep(100). timeit.checkpoint(""Second checkpoint""). println 'Waiting for a bit'; Thread.sleep(200); ; timeit.stop(). println ""Doing something that isn't timed""; Thread.sleep(200). println timeit; ```. Output:; ```; Doing something now; Waiting for a bit; Doing something that isn't timed; First checkpoint	106323 µs; Second checkpoint	208185 µs; Total duration	314508 µs; ```. It can also be used to run the same code multiple times, reporting the individual and average times:. ```groovy; var timeit = new Timeit(); .summarizeCheckpoints(); .checkpointAndRun(""My calculation"", () -> mySlowCalculation(), 10); ; println timeit.stop() // Important to stop to get time for last checkpoint. void mySlowCalculation() {; def x = 2 + 2; Thread.sleep(50); }; ```. Output:; ```; My calculation (1)	56 ms; My calculation (2)	55 ms; My calculation (3)	54 ms; My calculation (4)	55 ms; My calculation (5)	61 ms; My calculation (6)	52 ms; My calculation (7)	55 ms; My calculation (8)	55 ms; My calculation (9)	53 ms; My calculation (10)	57 ms; Total duration	554 ms; Average per checkpoint: 55 ms; ```. ## Fix methods to get objects. Add missing `QP.getTileObjects()` method (https://github.com/qupath/qupath/issues/1065). Also ensure that `QP.getAllObjects()` returns a collection rather than array, for better consistency. ## Add version checking scripting methods. New methods to check the running QuPath version in scripts.; If the check fails, an exception will be thrown that will cause the script not to run. ```groovy; // Version v0.4.0 or newer; checkMinVersion('0.4.0'). // Version v0.4.x (but not earlier or later); checkVersionRange('0.4.0', '0.5.0'); ```. ## Code editor fixes. Syntax highlighting speeded up, scrolling follows caret when adding new lines. ## Change behavior for `QP.getCurrentImageData()` and `QP.getProject()`. The behavior of `getCurrentImageData()` and `getProject()` have been modified for cases wher",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:5031,Availability,avail,available,5031,"stency. ## Add version checking scripting methods. New methods to check the running QuPath version in scripts.; If the check fails, an exception will be thrown that will cause the script not to run. ```groovy; // Version v0.4.0 or newer; checkMinVersion('0.4.0'). // Version v0.4.x (but not earlier or later); checkVersionRange('0.4.0', '0.5.0'); ```. ## Code editor fixes. Syntax highlighting speeded up, scrolling follows caret when adding new lines. ## Change behavior for `QP.getCurrentImageData()` and `QP.getProject()`. The behavior of `getCurrentImageData()` and `getProject()` have been modified for cases where a script has run to completion, but it may still be 'doing stuff' (e.g. because it launched a UI, or started a task to run later). Previously, `getCurrentImageData()` and `getProject()` would return null. This would mean that all other related commands (e.g. `getAnnotationObjects()` would not return anything useful as well. Now, both methods will fall back to using the image data and project from the current QuPath UI, if available. This could potentially be confusing sometimes, e.g. if the following script was used with 'Run for project' it might print different image datas each time:; ```groovy; println ""Now: ${getCurrentImageData()}""; // runLater will be called in the application thread after the script has completed; Platform.runLater {; // This runs after the current image has been reset!; // Previously returned null, now returns current image in the viewer ; // (or null if there is no image open); println ""Later: ${getCurrentImageData()}""; }; ```. If you want to access the original image data later, you need to keep a reference to it, e.g.:; ```groovy; def imageData = getCurrentImageData(); println ""Now: $imageData""; Platform.runLater {; // This shows the same image data as original; // because the reference has been retained; println ""Later: $imageData""; }; ```. This still requires some caution, because if you retain a reference you need to access ever",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:408,Deployability,update,update,408,"Lots of scripting-related improvements, along with some major refactoring and a bit of changed behavior. ## Prompts when 'Run for project' includes a currently-open image. Using 'Run for project' with an image that is currently open is a common source of confusion in QuPath. This operations on the saved data files in the project, but the changes aren't automatically reflected in the viewer. These changes update the message shown to the user when this may be affected:. <img width=""601"" alt=""Open images message"" src=""https://user-images.githubusercontent.com/4690904/196366026-b771f014-be4b-4f07-8185-55af6745e7d2.png"">. And a prompt automatically appears when the scripting is complete, inviting the user to reload the data to see any changes:. <img width=""375"" alt=""Prompt to reload"" src=""https://user-images.githubusercontent.com/4690904/196366065-23f2a1f7-0146-41a9-a8ba-367d11605d12.png"">. ## New `ScriptAttributes` to access file and batch info. Several [attributes](https://github.com/qupath/qupath/commit/a1d40fb6647454a4500cb305d19e2f8698caa2fa) are now set when scripts are run, which can be queried in Groovy via `getProperty(attribute)`. Examples:. ```groovy; // The number of images being processed in batch (e.g. with 'Run for project'); int batchSize = getProperty(ScriptAttributes.BATCH_SIZE). // The 0-based index for the current image being processed; int batchIndex = getProperty(ScriptAttributes.BATCH_INDEX). // Query if this is the last image being processed in a batch; boolean batchLast = getProperty(ScriptAttributes.BATCH_LAST). // The file path for the script file (or null if not available); // (Note that the file contents may differ from the script if there are unsaved changes); String filePath = getProperty(ScriptAttributes.FILE_PATH); ```. The inspiration is from https://github.com/qupath/qupath/issues/1029. These changes make useful things possible, e.g.; * take action to notify the user at the end of long-running batch processing; * access other scripts or ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:419,Integrability,message,message,419,"Lots of scripting-related improvements, along with some major refactoring and a bit of changed behavior. ## Prompts when 'Run for project' includes a currently-open image. Using 'Run for project' with an image that is currently open is a common source of confusion in QuPath. This operations on the saved data files in the project, but the changes aren't automatically reflected in the viewer. These changes update the message shown to the user when this may be affected:. <img width=""601"" alt=""Open images message"" src=""https://user-images.githubusercontent.com/4690904/196366026-b771f014-be4b-4f07-8185-55af6745e7d2.png"">. And a prompt automatically appears when the scripting is complete, inviting the user to reload the data to see any changes:. <img width=""375"" alt=""Prompt to reload"" src=""https://user-images.githubusercontent.com/4690904/196366065-23f2a1f7-0146-41a9-a8ba-367d11605d12.png"">. ## New `ScriptAttributes` to access file and batch info. Several [attributes](https://github.com/qupath/qupath/commit/a1d40fb6647454a4500cb305d19e2f8698caa2fa) are now set when scripts are run, which can be queried in Groovy via `getProperty(attribute)`. Examples:. ```groovy; // The number of images being processed in batch (e.g. with 'Run for project'); int batchSize = getProperty(ScriptAttributes.BATCH_SIZE). // The 0-based index for the current image being processed; int batchIndex = getProperty(ScriptAttributes.BATCH_INDEX). // Query if this is the last image being processed in a batch; boolean batchLast = getProperty(ScriptAttributes.BATCH_LAST). // The file path for the script file (or null if not available); // (Note that the file contents may differ from the script if there are unsaved changes); String filePath = getProperty(ScriptAttributes.FILE_PATH); ```. The inspiration is from https://github.com/qupath/qupath/issues/1029. These changes make useful things possible, e.g.; * take action to notify the user at the end of long-running batch processing; * access other scripts or ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:507,Integrability,message,message,507,"Lots of scripting-related improvements, along with some major refactoring and a bit of changed behavior. ## Prompts when 'Run for project' includes a currently-open image. Using 'Run for project' with an image that is currently open is a common source of confusion in QuPath. This operations on the saved data files in the project, but the changes aren't automatically reflected in the viewer. These changes update the message shown to the user when this may be affected:. <img width=""601"" alt=""Open images message"" src=""https://user-images.githubusercontent.com/4690904/196366026-b771f014-be4b-4f07-8185-55af6745e7d2.png"">. And a prompt automatically appears when the scripting is complete, inviting the user to reload the data to see any changes:. <img width=""375"" alt=""Prompt to reload"" src=""https://user-images.githubusercontent.com/4690904/196366065-23f2a1f7-0146-41a9-a8ba-367d11605d12.png"">. ## New `ScriptAttributes` to access file and batch info. Several [attributes](https://github.com/qupath/qupath/commit/a1d40fb6647454a4500cb305d19e2f8698caa2fa) are now set when scripts are run, which can be queried in Groovy via `getProperty(attribute)`. Examples:. ```groovy; // The number of images being processed in batch (e.g. with 'Run for project'); int batchSize = getProperty(ScriptAttributes.BATCH_SIZE). // The 0-based index for the current image being processed; int batchIndex = getProperty(ScriptAttributes.BATCH_INDEX). // Query if this is the last image being processed in a batch; boolean batchLast = getProperty(ScriptAttributes.BATCH_LAST). // The file path for the script file (or null if not available); // (Note that the file contents may differ from the script if there are unsaved changes); String filePath = getProperty(ScriptAttributes.FILE_PATH); ```. The inspiration is from https://github.com/qupath/qupath/issues/1029. These changes make useful things possible, e.g.; * take action to notify the user at the end of long-running batch processing; * access other scripts or ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:62,Modifiability,refactor,refactoring,62,"Lots of scripting-related improvements, along with some major refactoring and a bit of changed behavior. ## Prompts when 'Run for project' includes a currently-open image. Using 'Run for project' with an image that is currently open is a common source of confusion in QuPath. This operations on the saved data files in the project, but the changes aren't automatically reflected in the viewer. These changes update the message shown to the user when this may be affected:. <img width=""601"" alt=""Open images message"" src=""https://user-images.githubusercontent.com/4690904/196366026-b771f014-be4b-4f07-8185-55af6745e7d2.png"">. And a prompt automatically appears when the scripting is complete, inviting the user to reload the data to see any changes:. <img width=""375"" alt=""Prompt to reload"" src=""https://user-images.githubusercontent.com/4690904/196366065-23f2a1f7-0146-41a9-a8ba-367d11605d12.png"">. ## New `ScriptAttributes` to access file and batch info. Several [attributes](https://github.com/qupath/qupath/commit/a1d40fb6647454a4500cb305d19e2f8698caa2fa) are now set when scripts are run, which can be queried in Groovy via `getProperty(attribute)`. Examples:. ```groovy; // The number of images being processed in batch (e.g. with 'Run for project'); int batchSize = getProperty(ScriptAttributes.BATCH_SIZE). // The 0-based index for the current image being processed; int batchIndex = getProperty(ScriptAttributes.BATCH_INDEX). // Query if this is the last image being processed in a batch; boolean batchLast = getProperty(ScriptAttributes.BATCH_LAST). // The file path for the script file (or null if not available); // (Note that the file contents may differ from the script if there are unsaved changes); String filePath = getProperty(ScriptAttributes.FILE_PATH); ```. The inspiration is from https://github.com/qupath/qupath/issues/1029. These changes make useful things possible, e.g.; * take action to notify the user at the end of long-running batch processing; * access other scripts or ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:928,Security,access,access,928,"Lots of scripting-related improvements, along with some major refactoring and a bit of changed behavior. ## Prompts when 'Run for project' includes a currently-open image. Using 'Run for project' with an image that is currently open is a common source of confusion in QuPath. This operations on the saved data files in the project, but the changes aren't automatically reflected in the viewer. These changes update the message shown to the user when this may be affected:. <img width=""601"" alt=""Open images message"" src=""https://user-images.githubusercontent.com/4690904/196366026-b771f014-be4b-4f07-8185-55af6745e7d2.png"">. And a prompt automatically appears when the scripting is complete, inviting the user to reload the data to see any changes:. <img width=""375"" alt=""Prompt to reload"" src=""https://user-images.githubusercontent.com/4690904/196366065-23f2a1f7-0146-41a9-a8ba-367d11605d12.png"">. ## New `ScriptAttributes` to access file and batch info. Several [attributes](https://github.com/qupath/qupath/commit/a1d40fb6647454a4500cb305d19e2f8698caa2fa) are now set when scripts are run, which can be queried in Groovy via `getProperty(attribute)`. Examples:. ```groovy; // The number of images being processed in batch (e.g. with 'Run for project'); int batchSize = getProperty(ScriptAttributes.BATCH_SIZE). // The 0-based index for the current image being processed; int batchIndex = getProperty(ScriptAttributes.BATCH_INDEX). // Query if this is the last image being processed in a batch; boolean batchLast = getProperty(ScriptAttributes.BATCH_LAST). // The file path for the script file (or null if not available); // (Note that the file contents may differ from the script if there are unsaved changes); String filePath = getProperty(ScriptAttributes.FILE_PATH); ```. The inspiration is from https://github.com/qupath/qupath/issues/1029. These changes make useful things possible, e.g.; * take action to notify the user at the end of long-running batch processing; * access other scripts or ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:1977,Security,access,access,1977,"ributes](https://github.com/qupath/qupath/commit/a1d40fb6647454a4500cb305d19e2f8698caa2fa) are now set when scripts are run, which can be queried in Groovy via `getProperty(attribute)`. Examples:. ```groovy; // The number of images being processed in batch (e.g. with 'Run for project'); int batchSize = getProperty(ScriptAttributes.BATCH_SIZE). // The 0-based index for the current image being processed; int batchIndex = getProperty(ScriptAttributes.BATCH_INDEX). // Query if this is the last image being processed in a batch; boolean batchLast = getProperty(ScriptAttributes.BATCH_LAST). // The file path for the script file (or null if not available); // (Note that the file contents may differ from the script if there are unsaved changes); String filePath = getProperty(ScriptAttributes.FILE_PATH); ```. The inspiration is from https://github.com/qupath/qupath/issues/1029. These changes make useful things possible, e.g.; * take action to notify the user at the end of long-running batch processing; * access other scripts or files relative to the script file itself. ## New `Timeit` class. The new `Timeit` class simplifies reporting the length of time it takes scripts (or parts of scripts) to run. Simple use involves starting a `Timeit` early, calling `start()`, and printing it whenever you want:; ```groovy; def timeit = new Timeit().start(); Thread.sleep(100); println timeit; Thread.sleep(200); println timeit; ```; Output:; ```; Time since start	106 ms; Time since start	314 ms; ```. It's also possible to have a bit more control, setting named checkpoints along the way:. ```groovy; var timeit = new Timeit(); .microseconds(); .start(""First checkpoint""); ; println 'Doing something now'; Thread.sleep(100). timeit.checkpoint(""Second checkpoint""). println 'Waiting for a bit'; Thread.sleep(200); ; timeit.stop(). println ""Doing something that isn't timed""; Thread.sleep(200). println timeit; ```. Output:; ```; Doing something now; Waiting for a bit; Doing something that isn't timed; ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:5588,Security,access,access,5588,"run to completion, but it may still be 'doing stuff' (e.g. because it launched a UI, or started a task to run later). Previously, `getCurrentImageData()` and `getProject()` would return null. This would mean that all other related commands (e.g. `getAnnotationObjects()` would not return anything useful as well. Now, both methods will fall back to using the image data and project from the current QuPath UI, if available. This could potentially be confusing sometimes, e.g. if the following script was used with 'Run for project' it might print different image datas each time:; ```groovy; println ""Now: ${getCurrentImageData()}""; // runLater will be called in the application thread after the script has completed; Platform.runLater {; // This runs after the current image has been reset!; // Previously returned null, now returns current image in the viewer ; // (or null if there is no image open); println ""Later: ${getCurrentImageData()}""; }; ```. If you want to access the original image data later, you need to keep a reference to it, e.g.:; ```groovy; def imageData = getCurrentImageData(); println ""Now: $imageData""; Platform.runLater {; // This shows the same image data as original; // because the reference has been retained; println ""Later: $imageData""; }; ```. This still requires some caution, because if you retain a reference you need to access everything through that - and not via the 'default' methods in `QP`. For example, you need to get annotations with `imageData.getHierarchy().getAnnotationObjects()` rather than simply `getAnnotationObjects()`.; ```groovy; def imageData = getCurrentImageData(); println ""Now: $imageData""; Platform.runLater {; println ""Original of annotations 1: ${imageData.getHierarchy().getAnnotationObjects().size()}""; println ""Current viewer's number of annotations 1: ${getAnnotationObjects().size()}""; }; ```. For more normal use this shouldn't matter, because the script won't continue doing stuff after it has run to completion... but for advanc",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:5975,Security,access,access,5975," the image data and project from the current QuPath UI, if available. This could potentially be confusing sometimes, e.g. if the following script was used with 'Run for project' it might print different image datas each time:; ```groovy; println ""Now: ${getCurrentImageData()}""; // runLater will be called in the application thread after the script has completed; Platform.runLater {; // This runs after the current image has been reset!; // Previously returned null, now returns current image in the viewer ; // (or null if there is no image open); println ""Later: ${getCurrentImageData()}""; }; ```. If you want to access the original image data later, you need to keep a reference to it, e.g.:; ```groovy; def imageData = getCurrentImageData(); println ""Now: $imageData""; Platform.runLater {; // This shows the same image data as original; // because the reference has been retained; println ""Later: $imageData""; }; ```. This still requires some caution, because if you retain a reference you need to access everything through that - and not via the 'default' methods in `QP`. For example, you need to get annotations with `imageData.getHierarchy().getAnnotationObjects()` rather than simply `getAnnotationObjects()`.; ```groovy; def imageData = getCurrentImageData(); println ""Now: $imageData""; Platform.runLater {; println ""Original of annotations 1: ${imageData.getHierarchy().getAnnotationObjects().size()}""; println ""Current viewer's number of annotations 1: ${getAnnotationObjects().size()}""; }; ```. For more normal use this shouldn't matter, because the script won't continue doing stuff after it has run to completion... but for advanced use that creates a UI that *shouldn't* use the current image in the viewer then it's important to know what's going on. **Reason for the change:** QuPath sets the 'current' image data and project in `QP` when a script is launched (for the scripting thread only) and resets then when the script has completed. This alone makes `QP` fairly useless outsi",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:7141,Security,access,access,7141,"tas each time:; ```groovy; println ""Now: ${getCurrentImageData()}""; // runLater will be called in the application thread after the script has completed; Platform.runLater {; // This runs after the current image has been reset!; // Previously returned null, now returns current image in the viewer ; // (or null if there is no image open); println ""Later: ${getCurrentImageData()}""; }; ```. If you want to access the original image data later, you need to keep a reference to it, e.g.:; ```groovy; def imageData = getCurrentImageData(); println ""Now: $imageData""; Platform.runLater {; // This shows the same image data as original; // because the reference has been retained; println ""Later: $imageData""; }; ```. This still requires some caution, because if you retain a reference you need to access everything through that - and not via the 'default' methods in `QP`. For example, you need to get annotations with `imageData.getHierarchy().getAnnotationObjects()` rather than simply `getAnnotationObjects()`.; ```groovy; def imageData = getCurrentImageData(); println ""Now: $imageData""; Platform.runLater {; println ""Original of annotations 1: ${imageData.getHierarchy().getAnnotationObjects().size()}""; println ""Current viewer's number of annotations 1: ${getAnnotationObjects().size()}""; }; ```. For more normal use this shouldn't matter, because the script won't continue doing stuff after it has run to completion... but for advanced use that creates a UI that *shouldn't* use the current image in the viewer then it's important to know what's going on. **Reason for the change:** QuPath sets the 'current' image data and project in `QP` when a script is launched (for the scripting thread only) and resets then when the script has completed. This alone makes `QP` fairly useless outside of scripts run by QuPath itself. When investigating interacting with QuPath's current image through Py4J, it became clear that it would help for QuPath to be able to access images and projects some other way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:2089,Usability,simpl,simplifies,2089,"ovy via `getProperty(attribute)`. Examples:. ```groovy; // The number of images being processed in batch (e.g. with 'Run for project'); int batchSize = getProperty(ScriptAttributes.BATCH_SIZE). // The 0-based index for the current image being processed; int batchIndex = getProperty(ScriptAttributes.BATCH_INDEX). // Query if this is the last image being processed in a batch; boolean batchLast = getProperty(ScriptAttributes.BATCH_LAST). // The file path for the script file (or null if not available); // (Note that the file contents may differ from the script if there are unsaved changes); String filePath = getProperty(ScriptAttributes.FILE_PATH); ```. The inspiration is from https://github.com/qupath/qupath/issues/1029. These changes make useful things possible, e.g.; * take action to notify the user at the end of long-running batch processing; * access other scripts or files relative to the script file itself. ## New `Timeit` class. The new `Timeit` class simplifies reporting the length of time it takes scripts (or parts of scripts) to run. Simple use involves starting a `Timeit` early, calling `start()`, and printing it whenever you want:; ```groovy; def timeit = new Timeit().start(); Thread.sleep(100); println timeit; Thread.sleep(200); println timeit; ```; Output:; ```; Time since start	106 ms; Time since start	314 ms; ```. It's also possible to have a bit more control, setting named checkpoints along the way:. ```groovy; var timeit = new Timeit(); .microseconds(); .start(""First checkpoint""); ; println 'Doing something now'; Thread.sleep(100). timeit.checkpoint(""Second checkpoint""). println 'Waiting for a bit'; Thread.sleep(200); ; timeit.stop(). println ""Doing something that isn't timed""; Thread.sleep(200). println timeit; ```. Output:; ```; Doing something now; Waiting for a bit; Doing something that isn't timed; First checkpoint	106323 µs; Second checkpoint	208185 µs; Total duration	314508 µs; ```. It can also be used to run the same code multiple times, report",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:2176,Usability,Simpl,Simple,2176,"project'); int batchSize = getProperty(ScriptAttributes.BATCH_SIZE). // The 0-based index for the current image being processed; int batchIndex = getProperty(ScriptAttributes.BATCH_INDEX). // Query if this is the last image being processed in a batch; boolean batchLast = getProperty(ScriptAttributes.BATCH_LAST). // The file path for the script file (or null if not available); // (Note that the file contents may differ from the script if there are unsaved changes); String filePath = getProperty(ScriptAttributes.FILE_PATH); ```. The inspiration is from https://github.com/qupath/qupath/issues/1029. These changes make useful things possible, e.g.; * take action to notify the user at the end of long-running batch processing; * access other scripts or files relative to the script file itself. ## New `Timeit` class. The new `Timeit` class simplifies reporting the length of time it takes scripts (or parts of scripts) to run. Simple use involves starting a `Timeit` early, calling `start()`, and printing it whenever you want:; ```groovy; def timeit = new Timeit().start(); Thread.sleep(100); println timeit; Thread.sleep(200); println timeit; ```; Output:; ```; Time since start	106 ms; Time since start	314 ms; ```. It's also possible to have a bit more control, setting named checkpoints along the way:. ```groovy; var timeit = new Timeit(); .microseconds(); .start(""First checkpoint""); ; println 'Doing something now'; Thread.sleep(100). timeit.checkpoint(""Second checkpoint""). println 'Waiting for a bit'; Thread.sleep(200); ; timeit.stop(). println ""Doing something that isn't timed""; Thread.sleep(200). println timeit; ```. Output:; ```; Doing something now; Waiting for a bit; Doing something that isn't timed; First checkpoint	106323 µs; Second checkpoint	208185 µs; Total duration	314508 µs; ```. It can also be used to run the same code multiple times, reporting the individual and average times:. ```groovy; var timeit = new Timeit(); .summarizeCheckpoints(); .checkpointAndRun(""My c",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:6159,Usability,simpl,simply,6159,"t print different image datas each time:; ```groovy; println ""Now: ${getCurrentImageData()}""; // runLater will be called in the application thread after the script has completed; Platform.runLater {; // This runs after the current image has been reset!; // Previously returned null, now returns current image in the viewer ; // (or null if there is no image open); println ""Later: ${getCurrentImageData()}""; }; ```. If you want to access the original image data later, you need to keep a reference to it, e.g.:; ```groovy; def imageData = getCurrentImageData(); println ""Now: $imageData""; Platform.runLater {; // This shows the same image data as original; // because the reference has been retained; println ""Later: $imageData""; }; ```. This still requires some caution, because if you retain a reference you need to access everything through that - and not via the 'default' methods in `QP`. For example, you need to get annotations with `imageData.getHierarchy().getAnnotationObjects()` rather than simply `getAnnotationObjects()`.; ```groovy; def imageData = getCurrentImageData(); println ""Now: $imageData""; Platform.runLater {; println ""Original of annotations 1: ${imageData.getHierarchy().getAnnotationObjects().size()}""; println ""Current viewer's number of annotations 1: ${getAnnotationObjects().size()}""; }; ```. For more normal use this shouldn't matter, because the script won't continue doing stuff after it has run to completion... but for advanced use that creates a UI that *shouldn't* use the current image in the viewer then it's important to know what's going on. **Reason for the change:** QuPath sets the 'current' image data and project in `QP` when a script is launched (for the scripting thread only) and resets then when the script has completed. This alone makes `QP` fairly useless outside of scripts run by QuPath itself. When investigating interacting with QuPath's current image through Py4J, it became clear that it would help for QuPath to be able to access images an",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1078:7091,Usability,clear,clear,7091,"tas each time:; ```groovy; println ""Now: ${getCurrentImageData()}""; // runLater will be called in the application thread after the script has completed; Platform.runLater {; // This runs after the current image has been reset!; // Previously returned null, now returns current image in the viewer ; // (or null if there is no image open); println ""Later: ${getCurrentImageData()}""; }; ```. If you want to access the original image data later, you need to keep a reference to it, e.g.:; ```groovy; def imageData = getCurrentImageData(); println ""Now: $imageData""; Platform.runLater {; // This shows the same image data as original; // because the reference has been retained; println ""Later: $imageData""; }; ```. This still requires some caution, because if you retain a reference you need to access everything through that - and not via the 'default' methods in `QP`. For example, you need to get annotations with `imageData.getHierarchy().getAnnotationObjects()` rather than simply `getAnnotationObjects()`.; ```groovy; def imageData = getCurrentImageData(); println ""Now: $imageData""; Platform.runLater {; println ""Original of annotations 1: ${imageData.getHierarchy().getAnnotationObjects().size()}""; println ""Current viewer's number of annotations 1: ${getAnnotationObjects().size()}""; }; ```. For more normal use this shouldn't matter, because the script won't continue doing stuff after it has run to completion... but for advanced use that creates a UI that *shouldn't* use the current image in the viewer then it's important to know what's going on. **Reason for the change:** QuPath sets the 'current' image data and project in `QP` when a script is launched (for the scripting thread only) and resets then when the script has completed. This alone makes `QP` fairly useless outside of scripts run by QuPath itself. When investigating interacting with QuPath's current image through Py4J, it became clear that it would help for QuPath to be able to access images and projects some other way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1078
https://github.com/qupath/qupath/pull/1080:0,Deployability,Install,Installed,0,Installed via the rich text extension. Not done very elegantly for now.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1080
https://github.com/qupath/qupath/issues/1083:293,Performance,load,loading,293,"## Bug report. **Describe the bug**; 1. TMA Data viewer table colors does not match with the ""Moderna Dark"" theme; 2. TMA Data viewer table has missing values for column Object ID, Name, Missing, Centroid X, and Centroid Y; 3. Vertical scrolling for the TMA Data Viewer is sluggish (only when loading from the entire project which has a lot of detections) . **To Reproduce**; Steps to reproduce the behavior:; 1. Open a project with TMA images, open an image with TMA Data; 4. Click on File -> ""TMA Data"" -> ""Launch TMA Data Viewer""; 5. In the TMA Result Viewer window unchecking the ""Group by ID"" results in a table with light background and gray text. See the screenshot; 6. Values from the following columns are missing: Object ID, Name, Missing, Centroid X, and Centroid Y; 7. Test vertical scrolling in the TMA Data Viewer. **Expected behavior**; 1. TMA Data viewer colors should match ""Moderna Dark"" theme; 2. Populate values for the following columns: Object ID, Name, Missing, Centroid X, and Centroid Y; 3. Improve table for smooth vertical scrolling - if possible!. **Screenshots**; <p align=""center"">; <img src=""https://user-images.githubusercontent.com/10900214/197264041-a4c298d4-b3b3-43e8-a142-9d8d9b8ff47a.png"" width=""800"">; </p>. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.3.2 & 0.4.0-SNAPSHOT",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083
https://github.com/qupath/qupath/issues/1083:344,Safety,detect,detections,344,"## Bug report. **Describe the bug**; 1. TMA Data viewer table colors does not match with the ""Moderna Dark"" theme; 2. TMA Data viewer table has missing values for column Object ID, Name, Missing, Centroid X, and Centroid Y; 3. Vertical scrolling for the TMA Data Viewer is sluggish (only when loading from the entire project which has a lot of detections) . **To Reproduce**; Steps to reproduce the behavior:; 1. Open a project with TMA images, open an image with TMA Data; 4. Click on File -> ""TMA Data"" -> ""Launch TMA Data Viewer""; 5. In the TMA Result Viewer window unchecking the ""Group by ID"" results in a table with light background and gray text. See the screenshot; 6. Values from the following columns are missing: Object ID, Name, Missing, Centroid X, and Centroid Y; 7. Test vertical scrolling in the TMA Data Viewer. **Expected behavior**; 1. TMA Data viewer colors should match ""Moderna Dark"" theme; 2. Populate values for the following columns: Object ID, Name, Missing, Centroid X, and Centroid Y; 3. Improve table for smooth vertical scrolling - if possible!. **Screenshots**; <p align=""center"">; <img src=""https://user-images.githubusercontent.com/10900214/197264041-a4c298d4-b3b3-43e8-a142-9d8d9b8ff47a.png"" width=""800"">; </p>. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.3.2 & 0.4.0-SNAPSHOT",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083
https://github.com/qupath/qupath/issues/1083:781,Testability,Test,Test,781,"## Bug report. **Describe the bug**; 1. TMA Data viewer table colors does not match with the ""Moderna Dark"" theme; 2. TMA Data viewer table has missing values for column Object ID, Name, Missing, Centroid X, and Centroid Y; 3. Vertical scrolling for the TMA Data Viewer is sluggish (only when loading from the entire project which has a lot of detections) . **To Reproduce**; Steps to reproduce the behavior:; 1. Open a project with TMA images, open an image with TMA Data; 4. Click on File -> ""TMA Data"" -> ""Launch TMA Data Viewer""; 5. In the TMA Result Viewer window unchecking the ""Group by ID"" results in a table with light background and gray text. See the screenshot; 6. Values from the following columns are missing: Object ID, Name, Missing, Centroid X, and Centroid Y; 7. Test vertical scrolling in the TMA Data Viewer. **Expected behavior**; 1. TMA Data viewer colors should match ""Moderna Dark"" theme; 2. Populate values for the following columns: Object ID, Name, Missing, Centroid X, and Centroid Y; 3. Improve table for smooth vertical scrolling - if possible!. **Screenshots**; <p align=""center"">; <img src=""https://user-images.githubusercontent.com/10900214/197264041-a4c298d4-b3b3-43e8-a142-9d8d9b8ff47a.png"" width=""800"">; </p>. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.3.2 & 0.4.0-SNAPSHOT",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1083
https://github.com/qupath/qupath/pull/1084:124,Integrability,message,message,124,Or at least the worst bugs that I know about. Addresses; * https://github.com/qupath/qupath/issues/1083. Also add a warning message at the bottom to clarify that the TMA data viewer is unmaintained and so should be used with caution.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1084
https://github.com/qupath/qupath/issues/1085:264,Energy Efficiency,efficient,efficient,264,"## Feature request. ### Is your feature request related to a problem? Please describe. Most measurements for a `PathObject` are managed in a `MeasurementList`. This effectively maps between `String` keys and primitive `double` values, and can work in a reasonably efficient way by:. * Supporting both `double[]` as `float[]` as backing arrays; * Sharing the list of `String` measurement names between many objects; * Storing a map between `String` names and array indexes. The last two optimisations only come into effect whenever `MeasurementList.close()` is called, but all together can help considerably when working with millions of objects. A less efficient alternative implementation can be used with smaller numbers of objects. However, there are a few problems:. * Originally envisaged as a list, it's possible to have duplicates... but then what happens when requesting a measurement by name is undefined; * To overcome the above issue, it's advised to use `putMeasurement(String, double)` rather than `addMeasurement(String, double)`... but this isn't enforced; * Consumers need to remember to close the list at the end... but can often forget; * The lists now implement `AutoCloseable` so can be used with try-with-resources... but it looks weird; * If a measurement is unavailable, `Double.NaN` is returned... but is indistinguishable from that being the *correct* value; * It's a whole non-standard API to learn when scripting. It's all pretty cumbersome, as can be seen in a Groovy script:. ```groovy; def allCells = getCellObjects(). // Get an individual measurement for the first cell; def cell = allCells[0]; println cell.getMeasurementList().getMeasurementValue('Nucleus: Area'). // Get all the measurement names and values; println cell.getMeasurementList().getMeasurementNames(); def values = []; for (int i = 0; i < cell.getMeasurementList().size(); i++) {; values << cell.getMeasurementList().getMeasurementValue(i); }; println values; ```. ### Describe the solution you'd like. ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1085
https://github.com/qupath/qupath/issues/1085:653,Energy Efficiency,efficient,efficient,653,"## Feature request. ### Is your feature request related to a problem? Please describe. Most measurements for a `PathObject` are managed in a `MeasurementList`. This effectively maps between `String` keys and primitive `double` values, and can work in a reasonably efficient way by:. * Supporting both `double[]` as `float[]` as backing arrays; * Sharing the list of `String` measurement names between many objects; * Storing a map between `String` names and array indexes. The last two optimisations only come into effect whenever `MeasurementList.close()` is called, but all together can help considerably when working with millions of objects. A less efficient alternative implementation can be used with smaller numbers of objects. However, there are a few problems:. * Originally envisaged as a list, it's possible to have duplicates... but then what happens when requesting a measurement by name is undefined; * To overcome the above issue, it's advised to use `putMeasurement(String, double)` rather than `addMeasurement(String, double)`... but this isn't enforced; * Consumers need to remember to close the list at the end... but can often forget; * The lists now implement `AutoCloseable` so can be used with try-with-resources... but it looks weird; * If a measurement is unavailable, `Double.NaN` is returned... but is indistinguishable from that being the *correct* value; * It's a whole non-standard API to learn when scripting. It's all pretty cumbersome, as can be seen in a Groovy script:. ```groovy; def allCells = getCellObjects(). // Get an individual measurement for the first cell; def cell = allCells[0]; println cell.getMeasurementList().getMeasurementValue('Nucleus: Area'). // Get all the measurement names and values; println cell.getMeasurementList().getMeasurementNames(); def values = []; for (int i = 0; i < cell.getMeasurementList().size(); i++) {; values << cell.getMeasurementList().getMeasurementValue(i); }; println values; ```. ### Describe the solution you'd like. ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1085
https://github.com/qupath/qupath/issues/1085:2378,Integrability,wrap,wraps,2378," value; * It's a whole non-standard API to learn when scripting. It's all pretty cumbersome, as can be seen in a Groovy script:. ```groovy; def allCells = getCellObjects(). // Get an individual measurement for the first cell; def cell = allCells[0]; println cell.getMeasurementList().getMeasurementValue('Nucleus: Area'). // Get all the measurement names and values; println cell.getMeasurementList().getMeasurementNames(); def values = []; for (int i = 0; i < cell.getMeasurementList().size(); i++) {; values << cell.getMeasurementList().getMeasurementValue(i); }; println values; ```. ### Describe the solution you'd like. *Ideally* we'd have a `Map<String, double>` that preserves the efficiency of `MeasurementList`... if only this was permitted by Java. In practice, `Map<String, Double>` is likely to give adequate performance in Groovy - as long as the values are stored as primitives for efficiency in Java. In fact, to maintain compatibility we could initially implement an `AbstractMap` that wraps around an existing `MeasurementList` - with the latter still used internally. We'd need a method added to `PathObject`. ```java; public Map<String, Double> getMeasurements();; ```. This would help by:. * Providing a standard API, which explicitly doesn't permit duplicate keys; * Fitting well with GeoJSON export; * Permitting `MeasurementList` to be deprecated; * Making scripting a lot more intuitive... and almost pythonic. The last one is the biggest motivating factor, since we can then immediate benefit from some extra Groovy goodness. For example, the following script works:. ```groovy; def allCells = getCellObjects(). // Get an individual measurement for the first cell; def cell = allCells[0]; println cell.measurements['Nucleus: Area']. // Get all the measurement names, values or both; println cell.measurements.keySet(); println cell.measurements.values(); println cell.measurements.entrySet(). // Get all the measurements with a specified name for *all* cells; println allCell",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1085
https://github.com/qupath/qupath/issues/1085:2197,Performance,perform,performance,2197,"with try-with-resources... but it looks weird; * If a measurement is unavailable, `Double.NaN` is returned... but is indistinguishable from that being the *correct* value; * It's a whole non-standard API to learn when scripting. It's all pretty cumbersome, as can be seen in a Groovy script:. ```groovy; def allCells = getCellObjects(). // Get an individual measurement for the first cell; def cell = allCells[0]; println cell.getMeasurementList().getMeasurementValue('Nucleus: Area'). // Get all the measurement names and values; println cell.getMeasurementList().getMeasurementNames(); def values = []; for (int i = 0; i < cell.getMeasurementList().size(); i++) {; values << cell.getMeasurementList().getMeasurementValue(i); }; println values; ```. ### Describe the solution you'd like. *Ideally* we'd have a `Map<String, double>` that preserves the efficiency of `MeasurementList`... if only this was permitted by Java. In practice, `Map<String, Double>` is likely to give adequate performance in Groovy - as long as the values are stored as primitives for efficiency in Java. In fact, to maintain compatibility we could initially implement an `AbstractMap` that wraps around an existing `MeasurementList` - with the latter still used internally. We'd need a method added to `PathObject`. ```java; public Map<String, Double> getMeasurements();; ```. This would help by:. * Providing a standard API, which explicitly doesn't permit duplicate keys; * Fitting well with GeoJSON export; * Permitting `MeasurementList` to be deprecated; * Making scripting a lot more intuitive... and almost pythonic. The last one is the biggest motivating factor, since we can then immediate benefit from some extra Groovy goodness. For example, the following script works:. ```groovy; def allCells = getCellObjects(). // Get an individual measurement for the first cell; def cell = allCells[0]; println cell.measurements['Nucleus: Area']. // Get all the measurement names, values or both; println cell.measurements.key",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1085
https://github.com/qupath/qupath/issues/1085:4050,Performance,concurren,concurrency,4050,"ncy of `MeasurementList`... if only this was permitted by Java. In practice, `Map<String, Double>` is likely to give adequate performance in Groovy - as long as the values are stored as primitives for efficiency in Java. In fact, to maintain compatibility we could initially implement an `AbstractMap` that wraps around an existing `MeasurementList` - with the latter still used internally. We'd need a method added to `PathObject`. ```java; public Map<String, Double> getMeasurements();; ```. This would help by:. * Providing a standard API, which explicitly doesn't permit duplicate keys; * Fitting well with GeoJSON export; * Permitting `MeasurementList` to be deprecated; * Making scripting a lot more intuitive... and almost pythonic. The last one is the biggest motivating factor, since we can then immediate benefit from some extra Groovy goodness. For example, the following script works:. ```groovy; def allCells = getCellObjects(). // Get an individual measurement for the first cell; def cell = allCells[0]; println cell.measurements['Nucleus: Area']. // Get all the measurement names, values or both; println cell.measurements.keySet(); println cell.measurements.values(); println cell.measurements.entrySet(). // Get all the measurements with a specified name for *all* cells; println allCells.measurements['Nucleus: Area'].sum(). // Get the mean of all the measurements with a specified name for *all* cells; println allCells.measurements['Nucleus: Area'].average(); ```. ### Describe alternatives you've considered. Alternatives include:. * Keep `MeasurementList`, but modify the class; * Use an existing `Map` implementation, either from Java itself or a library. Either way, it's important to maintain serialisation compatibility and good efficiency for large numbers of objects. ### Additional context. I've prototyped this by subclassing `AbstractMap` and confirmed that the second Groovy script works. The tricky thing is likely to be handling mutability and concurrency properly.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1085
https://github.com/qupath/qupath/issues/1085:1419,Usability,learn,learn,1419,"rement names between many objects; * Storing a map between `String` names and array indexes. The last two optimisations only come into effect whenever `MeasurementList.close()` is called, but all together can help considerably when working with millions of objects. A less efficient alternative implementation can be used with smaller numbers of objects. However, there are a few problems:. * Originally envisaged as a list, it's possible to have duplicates... but then what happens when requesting a measurement by name is undefined; * To overcome the above issue, it's advised to use `putMeasurement(String, double)` rather than `addMeasurement(String, double)`... but this isn't enforced; * Consumers need to remember to close the list at the end... but can often forget; * The lists now implement `AutoCloseable` so can be used with try-with-resources... but it looks weird; * If a measurement is unavailable, `Double.NaN` is returned... but is indistinguishable from that being the *correct* value; * It's a whole non-standard API to learn when scripting. It's all pretty cumbersome, as can be seen in a Groovy script:. ```groovy; def allCells = getCellObjects(). // Get an individual measurement for the first cell; def cell = allCells[0]; println cell.getMeasurementList().getMeasurementValue('Nucleus: Area'). // Get all the measurement names and values; println cell.getMeasurementList().getMeasurementNames(); def values = []; for (int i = 0; i < cell.getMeasurementList().size(); i++) {; values << cell.getMeasurementList().getMeasurementValue(i); }; println values; ```. ### Describe the solution you'd like. *Ideally* we'd have a `Map<String, double>` that preserves the efficiency of `MeasurementList`... if only this was permitted by Java. In practice, `Map<String, Double>` is likely to give adequate performance in Groovy - as long as the values are stored as primitives for efficiency in Java. In fact, to maintain compatibility we could initially implement an `AbstractMap` that wra",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1085
https://github.com/qupath/qupath/issues/1085:2777,Usability,intuit,intuitive,2777,"us: Area'). // Get all the measurement names and values; println cell.getMeasurementList().getMeasurementNames(); def values = []; for (int i = 0; i < cell.getMeasurementList().size(); i++) {; values << cell.getMeasurementList().getMeasurementValue(i); }; println values; ```. ### Describe the solution you'd like. *Ideally* we'd have a `Map<String, double>` that preserves the efficiency of `MeasurementList`... if only this was permitted by Java. In practice, `Map<String, Double>` is likely to give adequate performance in Groovy - as long as the values are stored as primitives for efficiency in Java. In fact, to maintain compatibility we could initially implement an `AbstractMap` that wraps around an existing `MeasurementList` - with the latter still used internally. We'd need a method added to `PathObject`. ```java; public Map<String, Double> getMeasurements();; ```. This would help by:. * Providing a standard API, which explicitly doesn't permit duplicate keys; * Fitting well with GeoJSON export; * Permitting `MeasurementList` to be deprecated; * Making scripting a lot more intuitive... and almost pythonic. The last one is the biggest motivating factor, since we can then immediate benefit from some extra Groovy goodness. For example, the following script works:. ```groovy; def allCells = getCellObjects(). // Get an individual measurement for the first cell; def cell = allCells[0]; println cell.measurements['Nucleus: Area']. // Get all the measurement names, values or both; println cell.measurements.keySet(); println cell.measurements.values(); println cell.measurements.entrySet(). // Get all the measurements with a specified name for *all* cells; println allCells.measurements['Nucleus: Area'].sum(). // Get the mean of all the measurements with a specified name for *all* cells; println allCells.measurements['Nucleus: Area'].average(); ```. ### Describe alternatives you've considered. Alternatives include:. * Keep `MeasurementList`, but modify the class; * Use an exis",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1085
https://github.com/qupath/qupath/issues/1086:328,Energy Efficiency,efficient,efficient,328,"## Feature request. ### Is your feature request related to a problem? Please describe. It's possible to set colors for instances of a `PathObject` and `PathClass`, but inconvenient and inconsistent. The main reason is that both represent the color using an `Integer`, in packed ARGB form. The thinking was that this would be a) efficient, b) portable, and c) avoid creating *yet another* `Color` class (since this exists for Java AWT, JavaFX, OME...). The main problem is that both classes use different method signatures, and both require the color to be packed into an integer before being set. So we end up with code like this:; ```java; pathObject.setColorRGB(ColorTools.packRGB(255, 0, 0));; pathClass.setColor(ColorTools.packRGB(255, 0, 0));; ```. There are similar getter methods, which return the packed integer (or sometimes null, if the color isn't set). This then may need to be unpacked, e.g.; ```java; var rgb = pathObject.getColorRGB();; int red = ColorTools.red(rgb);; int green = ColorTools.green(rgb);; int blue = ColorTools.blue(rgb);; ```. A secondary problem is that it isn't clear whether alpha will be used or not. This is possible:; ```java; pathObject.setColorRGB(ColorTools.packARGB(127, 255, 0, 0));; pathClass.setColor(ColorTools.packARGB(127, 255, 0, 0));; ```; but it's not obvious whether the alpha will do anything. ### Describe the solution you'd like. It would be preferable to have something standardized, including the option to provide separate RGB values, e.g.; ```java; pathObject.setColor(red, green, blue); pathClass.setColor(red, green, blue); ```. This could be implemented quickly, deprecating the `PathObject.setColorRGB(Integer)` method. The main decision is whether to take 8-bit RGB values or floats/doubles as input. For now, I propose keeping `public Integer getColor()` - although `getRed()`, `getGreen()` and `getBlue()` methods could potentially be added. ### Describe alternatives you've considered. One way to enforce standardization would be thro",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1086
https://github.com/qupath/qupath/issues/1086:988,Energy Efficiency,green,green,988,"## Feature request. ### Is your feature request related to a problem? Please describe. It's possible to set colors for instances of a `PathObject` and `PathClass`, but inconvenient and inconsistent. The main reason is that both represent the color using an `Integer`, in packed ARGB form. The thinking was that this would be a) efficient, b) portable, and c) avoid creating *yet another* `Color` class (since this exists for Java AWT, JavaFX, OME...). The main problem is that both classes use different method signatures, and both require the color to be packed into an integer before being set. So we end up with code like this:; ```java; pathObject.setColorRGB(ColorTools.packRGB(255, 0, 0));; pathClass.setColor(ColorTools.packRGB(255, 0, 0));; ```. There are similar getter methods, which return the packed integer (or sometimes null, if the color isn't set). This then may need to be unpacked, e.g.; ```java; var rgb = pathObject.getColorRGB();; int red = ColorTools.red(rgb);; int green = ColorTools.green(rgb);; int blue = ColorTools.blue(rgb);; ```. A secondary problem is that it isn't clear whether alpha will be used or not. This is possible:; ```java; pathObject.setColorRGB(ColorTools.packARGB(127, 255, 0, 0));; pathClass.setColor(ColorTools.packARGB(127, 255, 0, 0));; ```; but it's not obvious whether the alpha will do anything. ### Describe the solution you'd like. It would be preferable to have something standardized, including the option to provide separate RGB values, e.g.; ```java; pathObject.setColor(red, green, blue); pathClass.setColor(red, green, blue); ```. This could be implemented quickly, deprecating the `PathObject.setColorRGB(Integer)` method. The main decision is whether to take 8-bit RGB values or floats/doubles as input. For now, I propose keeping `public Integer getColor()` - although `getRed()`, `getGreen()` and `getBlue()` methods could potentially be added. ### Describe alternatives you've considered. One way to enforce standardization would be thro",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1086
https://github.com/qupath/qupath/issues/1086:1007,Energy Efficiency,green,green,1007,"Is your feature request related to a problem? Please describe. It's possible to set colors for instances of a `PathObject` and `PathClass`, but inconvenient and inconsistent. The main reason is that both represent the color using an `Integer`, in packed ARGB form. The thinking was that this would be a) efficient, b) portable, and c) avoid creating *yet another* `Color` class (since this exists for Java AWT, JavaFX, OME...). The main problem is that both classes use different method signatures, and both require the color to be packed into an integer before being set. So we end up with code like this:; ```java; pathObject.setColorRGB(ColorTools.packRGB(255, 0, 0));; pathClass.setColor(ColorTools.packRGB(255, 0, 0));; ```. There are similar getter methods, which return the packed integer (or sometimes null, if the color isn't set). This then may need to be unpacked, e.g.; ```java; var rgb = pathObject.getColorRGB();; int red = ColorTools.red(rgb);; int green = ColorTools.green(rgb);; int blue = ColorTools.blue(rgb);; ```. A secondary problem is that it isn't clear whether alpha will be used or not. This is possible:; ```java; pathObject.setColorRGB(ColorTools.packARGB(127, 255, 0, 0));; pathClass.setColor(ColorTools.packARGB(127, 255, 0, 0));; ```; but it's not obvious whether the alpha will do anything. ### Describe the solution you'd like. It would be preferable to have something standardized, including the option to provide separate RGB values, e.g.; ```java; pathObject.setColor(red, green, blue); pathClass.setColor(red, green, blue); ```. This could be implemented quickly, deprecating the `PathObject.setColorRGB(Integer)` method. The main decision is whether to take 8-bit RGB values or floats/doubles as input. For now, I propose keeping `public Integer getColor()` - although `getRed()`, `getGreen()` and `getBlue()` methods could potentially be added. ### Describe alternatives you've considered. One way to enforce standardization would be through a `Colorable` interf",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1086
https://github.com/qupath/qupath/issues/1086:1533,Energy Efficiency,green,green,1533,"e the color to be packed into an integer before being set. So we end up with code like this:; ```java; pathObject.setColorRGB(ColorTools.packRGB(255, 0, 0));; pathClass.setColor(ColorTools.packRGB(255, 0, 0));; ```. There are similar getter methods, which return the packed integer (or sometimes null, if the color isn't set). This then may need to be unpacked, e.g.; ```java; var rgb = pathObject.getColorRGB();; int red = ColorTools.red(rgb);; int green = ColorTools.green(rgb);; int blue = ColorTools.blue(rgb);; ```. A secondary problem is that it isn't clear whether alpha will be used or not. This is possible:; ```java; pathObject.setColorRGB(ColorTools.packARGB(127, 255, 0, 0));; pathClass.setColor(ColorTools.packARGB(127, 255, 0, 0));; ```; but it's not obvious whether the alpha will do anything. ### Describe the solution you'd like. It would be preferable to have something standardized, including the option to provide separate RGB values, e.g.; ```java; pathObject.setColor(red, green, blue); pathClass.setColor(red, green, blue); ```. This could be implemented quickly, deprecating the `PathObject.setColorRGB(Integer)` method. The main decision is whether to take 8-bit RGB values or floats/doubles as input. For now, I propose keeping `public Integer getColor()` - although `getRed()`, `getGreen()` and `getBlue()` methods could potentially be added. ### Describe alternatives you've considered. One way to enforce standardization would be through a `Colorable` interface, which could offer a variant of options as default methods, e.g. ```java. // Main setter; public void setColor(Integer);. // Main getter; public Integer getColor();. // All others default; public default void setColor(int r, int g, int b);. public default void setColor(double r, double g, double b);. public default void setColor(String hex);. public default String getColorHex();. public default int getRed(); // Return Integer? Otherwise can't cope with null... public default int getGreen();. public defau",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1086
https://github.com/qupath/qupath/issues/1086:1571,Energy Efficiency,green,green,1571,"teger before being set. So we end up with code like this:; ```java; pathObject.setColorRGB(ColorTools.packRGB(255, 0, 0));; pathClass.setColor(ColorTools.packRGB(255, 0, 0));; ```. There are similar getter methods, which return the packed integer (or sometimes null, if the color isn't set). This then may need to be unpacked, e.g.; ```java; var rgb = pathObject.getColorRGB();; int red = ColorTools.red(rgb);; int green = ColorTools.green(rgb);; int blue = ColorTools.blue(rgb);; ```. A secondary problem is that it isn't clear whether alpha will be used or not. This is possible:; ```java; pathObject.setColorRGB(ColorTools.packARGB(127, 255, 0, 0));; pathClass.setColor(ColorTools.packARGB(127, 255, 0, 0));; ```; but it's not obvious whether the alpha will do anything. ### Describe the solution you'd like. It would be preferable to have something standardized, including the option to provide separate RGB values, e.g.; ```java; pathObject.setColor(red, green, blue); pathClass.setColor(red, green, blue); ```. This could be implemented quickly, deprecating the `PathObject.setColorRGB(Integer)` method. The main decision is whether to take 8-bit RGB values or floats/doubles as input. For now, I propose keeping `public Integer getColor()` - although `getRed()`, `getGreen()` and `getBlue()` methods could potentially be added. ### Describe alternatives you've considered. One way to enforce standardization would be through a `Colorable` interface, which could offer a variant of options as default methods, e.g. ```java. // Main setter; public void setColor(Integer);. // Main getter; public Integer getColor();. // All others default; public default void setColor(int r, int g, int b);. public default void setColor(double r, double g, double b);. public default void setColor(String hex);. public default String getColorHex();. public default int getRed(); // Return Integer? Otherwise can't cope with null... public default int getGreen();. public default int getBlue();. ```. A potential",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1086
https://github.com/qupath/qupath/issues/1086:2019,Integrability,interface,interface,2019,"5, 0, 0));; ```. There are similar getter methods, which return the packed integer (or sometimes null, if the color isn't set). This then may need to be unpacked, e.g.; ```java; var rgb = pathObject.getColorRGB();; int red = ColorTools.red(rgb);; int green = ColorTools.green(rgb);; int blue = ColorTools.blue(rgb);; ```. A secondary problem is that it isn't clear whether alpha will be used or not. This is possible:; ```java; pathObject.setColorRGB(ColorTools.packARGB(127, 255, 0, 0));; pathClass.setColor(ColorTools.packARGB(127, 255, 0, 0));; ```; but it's not obvious whether the alpha will do anything. ### Describe the solution you'd like. It would be preferable to have something standardized, including the option to provide separate RGB values, e.g.; ```java; pathObject.setColor(red, green, blue); pathClass.setColor(red, green, blue); ```. This could be implemented quickly, deprecating the `PathObject.setColorRGB(Integer)` method. The main decision is whether to take 8-bit RGB values or floats/doubles as input. For now, I propose keeping `public Integer getColor()` - although `getRed()`, `getGreen()` and `getBlue()` methods could potentially be added. ### Describe alternatives you've considered. One way to enforce standardization would be through a `Colorable` interface, which could offer a variant of options as default methods, e.g. ```java. // Main setter; public void setColor(Integer);. // Main getter; public Integer getColor();. // All others default; public default void setColor(int r, int g, int b);. public default void setColor(double r, double g, double b);. public default void setColor(String hex);. public default String getColorHex();. public default int getRed(); // Return Integer? Otherwise can't cope with null... public default int getGreen();. public default int getBlue();. ```. A potential problem with this is that a substantial part of an object's API could end up being devoted to color - even if it's not a terribly important property of the object.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1086
https://github.com/qupath/qupath/issues/1086:342,Modifiability,portab,portable,342,"## Feature request. ### Is your feature request related to a problem? Please describe. It's possible to set colors for instances of a `PathObject` and `PathClass`, but inconvenient and inconsistent. The main reason is that both represent the color using an `Integer`, in packed ARGB form. The thinking was that this would be a) efficient, b) portable, and c) avoid creating *yet another* `Color` class (since this exists for Java AWT, JavaFX, OME...). The main problem is that both classes use different method signatures, and both require the color to be packed into an integer before being set. So we end up with code like this:; ```java; pathObject.setColorRGB(ColorTools.packRGB(255, 0, 0));; pathClass.setColor(ColorTools.packRGB(255, 0, 0));; ```. There are similar getter methods, which return the packed integer (or sometimes null, if the color isn't set). This then may need to be unpacked, e.g.; ```java; var rgb = pathObject.getColorRGB();; int red = ColorTools.red(rgb);; int green = ColorTools.green(rgb);; int blue = ColorTools.blue(rgb);; ```. A secondary problem is that it isn't clear whether alpha will be used or not. This is possible:; ```java; pathObject.setColorRGB(ColorTools.packARGB(127, 255, 0, 0));; pathClass.setColor(ColorTools.packARGB(127, 255, 0, 0));; ```; but it's not obvious whether the alpha will do anything. ### Describe the solution you'd like. It would be preferable to have something standardized, including the option to provide separate RGB values, e.g.; ```java; pathObject.setColor(red, green, blue); pathClass.setColor(red, green, blue); ```. This could be implemented quickly, deprecating the `PathObject.setColorRGB(Integer)` method. The main decision is whether to take 8-bit RGB values or floats/doubles as input. For now, I propose keeping `public Integer getColor()` - although `getRed()`, `getGreen()` and `getBlue()` methods could potentially be added. ### Describe alternatives you've considered. One way to enforce standardization would be thro",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1086
https://github.com/qupath/qupath/issues/1086:359,Safety,avoid,avoid,359,"## Feature request. ### Is your feature request related to a problem? Please describe. It's possible to set colors for instances of a `PathObject` and `PathClass`, but inconvenient and inconsistent. The main reason is that both represent the color using an `Integer`, in packed ARGB form. The thinking was that this would be a) efficient, b) portable, and c) avoid creating *yet another* `Color` class (since this exists for Java AWT, JavaFX, OME...). The main problem is that both classes use different method signatures, and both require the color to be packed into an integer before being set. So we end up with code like this:; ```java; pathObject.setColorRGB(ColorTools.packRGB(255, 0, 0));; pathClass.setColor(ColorTools.packRGB(255, 0, 0));; ```. There are similar getter methods, which return the packed integer (or sometimes null, if the color isn't set). This then may need to be unpacked, e.g.; ```java; var rgb = pathObject.getColorRGB();; int red = ColorTools.red(rgb);; int green = ColorTools.green(rgb);; int blue = ColorTools.blue(rgb);; ```. A secondary problem is that it isn't clear whether alpha will be used or not. This is possible:; ```java; pathObject.setColorRGB(ColorTools.packARGB(127, 255, 0, 0));; pathClass.setColor(ColorTools.packARGB(127, 255, 0, 0));; ```; but it's not obvious whether the alpha will do anything. ### Describe the solution you'd like. It would be preferable to have something standardized, including the option to provide separate RGB values, e.g.; ```java; pathObject.setColor(red, green, blue); pathClass.setColor(red, green, blue); ```. This could be implemented quickly, deprecating the `PathObject.setColorRGB(Integer)` method. The main decision is whether to take 8-bit RGB values or floats/doubles as input. For now, I propose keeping `public Integer getColor()` - although `getRed()`, `getGreen()` and `getBlue()` methods could potentially be added. ### Describe alternatives you've considered. One way to enforce standardization would be thro",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1086
https://github.com/qupath/qupath/issues/1086:1096,Usability,clear,clear,1096,"ble to set colors for instances of a `PathObject` and `PathClass`, but inconvenient and inconsistent. The main reason is that both represent the color using an `Integer`, in packed ARGB form. The thinking was that this would be a) efficient, b) portable, and c) avoid creating *yet another* `Color` class (since this exists for Java AWT, JavaFX, OME...). The main problem is that both classes use different method signatures, and both require the color to be packed into an integer before being set. So we end up with code like this:; ```java; pathObject.setColorRGB(ColorTools.packRGB(255, 0, 0));; pathClass.setColor(ColorTools.packRGB(255, 0, 0));; ```. There are similar getter methods, which return the packed integer (or sometimes null, if the color isn't set). This then may need to be unpacked, e.g.; ```java; var rgb = pathObject.getColorRGB();; int red = ColorTools.red(rgb);; int green = ColorTools.green(rgb);; int blue = ColorTools.blue(rgb);; ```. A secondary problem is that it isn't clear whether alpha will be used or not. This is possible:; ```java; pathObject.setColorRGB(ColorTools.packARGB(127, 255, 0, 0));; pathClass.setColor(ColorTools.packARGB(127, 255, 0, 0));; ```; but it's not obvious whether the alpha will do anything. ### Describe the solution you'd like. It would be preferable to have something standardized, including the option to provide separate RGB values, e.g.; ```java; pathObject.setColor(red, green, blue); pathClass.setColor(red, green, blue); ```. This could be implemented quickly, deprecating the `PathObject.setColorRGB(Integer)` method. The main decision is whether to take 8-bit RGB values or floats/doubles as input. For now, I propose keeping `public Integer getColor()` - although `getRed()`, `getGreen()` and `getBlue()` methods could potentially be added. ### Describe alternatives you've considered. One way to enforce standardization would be through a `Colorable` interface, which could offer a variant of options as default methods, e.g. ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1086
https://github.com/qupath/qupath/issues/1087:1948,Energy Efficiency,adapt,adapted,1948,"hing: it makes `pathObject.setPathClass(null)` ambiguous - and liable to throw an exception. This could be slightly mitigated in several ways, e.g. 1. adding a constant field to `QP`; ```java; PathClass UNCLASSIFIED; ```; 2. adding a `resetPathClass()` method as an alternative to setting null; 3. taking an empty string as an alternative way to set the classification to null; 4. using different names, e.g. `setPathClass(PathClass)` and `setClassification(String)` - but both ultimately causing the same `PathClass` to be set. The final option has the problem of potential confusion by seeming to have two variables, but in reality only having one. However there might be an intriguing opportunity in this... although it will take a bit more thought. One criticism of QuPath's classification model is that it is [restricted to a single `PathClass`, even if further subclassifications can be derived](https://qupath.readthedocs.io/en/stable/docs/concepts/classifications.html). The API could be adapted to something like:. ```java; public void setPathClass(PathClass);. public PathClass getPathClass();. public void setClassifications(Collection<String>);. public Set<String> getClassifications();; ```. Internally, `get/setClassifications()` would be working with the `PathClass`, but from a user perspective they seem only to have an ordered set. This would mean they could switch between using either the `PathClass` or string-based classification model easily, depending upon which makes most sense for the application. For example:. * `PathClass` may be helpful in dealing with single classifications, possibly with intensity-subclasses (e.g. scoring a single IHC marker). Working with more than one subclassification is probably uncommon.; * `Set<String>` makes sense for multiplexed analysis, where each 'classification' could be seen as being like a tag that a cell is positive for a particular marker. The second case might be handled by setting arbitrary metadata properties or measurements",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1087
https://github.com/qupath/qupath/issues/1087:2418,Integrability,depend,depending,2418,"nd `setClassification(String)` - but both ultimately causing the same `PathClass` to be set. The final option has the problem of potential confusion by seeming to have two variables, but in reality only having one. However there might be an intriguing opportunity in this... although it will take a bit more thought. One criticism of QuPath's classification model is that it is [restricted to a single `PathClass`, even if further subclassifications can be derived](https://qupath.readthedocs.io/en/stable/docs/concepts/classifications.html). The API could be adapted to something like:. ```java; public void setPathClass(PathClass);. public PathClass getPathClass();. public void setClassifications(Collection<String>);. public Set<String> getClassifications();; ```. Internally, `get/setClassifications()` would be working with the `PathClass`, but from a user perspective they seem only to have an ordered set. This would mean they could switch between using either the `PathClass` or string-based classification model easily, depending upon which makes most sense for the application. For example:. * `PathClass` may be helpful in dealing with single classifications, possibly with intensity-subclasses (e.g. scoring a single IHC marker). Working with more than one subclassification is probably uncommon.; * `Set<String>` makes sense for multiplexed analysis, where each 'classification' could be seen as being like a tag that a cell is positive for a particular marker. The second case might be handled by setting arbitrary metadata properties or measurements, but the big benefit of having a `PathClass` object is that it also wraps up color information - and this means it easily influences how objects are colorized in the viewer. With multiple classifications, but no `PathClass` concept representing them in a single object, it's not clear to me how objects should be color. When it comes to scripting, this approach would look as follows:; ```groovy; pathObject.pathClass = getPathClass(""S",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1087
https://github.com/qupath/qupath/issues/1087:3022,Integrability,wrap,wraps,3022,"d setPathClass(PathClass);. public PathClass getPathClass();. public void setClassifications(Collection<String>);. public Set<String> getClassifications();; ```. Internally, `get/setClassifications()` would be working with the `PathClass`, but from a user perspective they seem only to have an ordered set. This would mean they could switch between using either the `PathClass` or string-based classification model easily, depending upon which makes most sense for the application. For example:. * `PathClass` may be helpful in dealing with single classifications, possibly with intensity-subclasses (e.g. scoring a single IHC marker). Working with more than one subclassification is probably uncommon.; * `Set<String>` makes sense for multiplexed analysis, where each 'classification' could be seen as being like a tag that a cell is positive for a particular marker. The second case might be handled by setting arbitrary metadata properties or measurements, but the big benefit of having a `PathClass` object is that it also wraps up color information - and this means it easily influences how objects are colorized in the viewer. With multiple classifications, but no `PathClass` concept representing them in a single object, it's not clear to me how objects should be color. When it comes to scripting, this approach would look as follows:; ```groovy; pathObject.pathClass = getPathClass(""Some name"") // Still need the PathClass object; pathObject.classifications = [""Some other name""] // Needs to be a collection - and ultimately sets the `PathClass` internally; print(pathObject.pathClass) // Would print `Some other name`; ```. This introduces new Groovy options using operators to add/remove from collections. For example, the following; ```groovy; pathObject = getSelectedObject(); pathObject.classifications = ['This', 'That']; pathObject.classifications += 'The other'; pathObject.classifications -= 'That'. print(pathObject.classifications); print(pathObject.pathClass); ```; ends up prin",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1087
https://github.com/qupath/qupath/issues/1087:1560,Modifiability,variab,variables,1560,"""Some name"") // Alternative using some Groovy magic; ```. ### Describe the solution you'd like. Adding a method to `PathObject`; ```java; public void setPathClass(String name) {; setPathClass(PathClassFactory.getPathClass(name);; }; ```; would make it possible to use the simpler script. ```groovy; pathObject.pathClass = ""Some name""; ```. I feel this further lowers the barrier to scripting... except for one thing: it makes `pathObject.setPathClass(null)` ambiguous - and liable to throw an exception. This could be slightly mitigated in several ways, e.g. 1. adding a constant field to `QP`; ```java; PathClass UNCLASSIFIED; ```; 2. adding a `resetPathClass()` method as an alternative to setting null; 3. taking an empty string as an alternative way to set the classification to null; 4. using different names, e.g. `setPathClass(PathClass)` and `setClassification(String)` - but both ultimately causing the same `PathClass` to be set. The final option has the problem of potential confusion by seeming to have two variables, but in reality only having one. However there might be an intriguing opportunity in this... although it will take a bit more thought. One criticism of QuPath's classification model is that it is [restricted to a single `PathClass`, even if further subclassifications can be derived](https://qupath.readthedocs.io/en/stable/docs/concepts/classifications.html). The API could be adapted to something like:. ```java; public void setPathClass(PathClass);. public PathClass getPathClass();. public void setClassifications(Collection<String>);. public Set<String> getClassifications();; ```. Internally, `get/setClassifications()` would be working with the `PathClass`, but from a user perspective they seem only to have an ordered set. This would mean they could switch between using either the `PathClass` or string-based classification model easily, depending upon which makes most sense for the application. For example:. * `PathClass` may be helpful in dealing with singl",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1087
https://github.com/qupath/qupath/issues/1087:1948,Modifiability,adapt,adapted,1948,"hing: it makes `pathObject.setPathClass(null)` ambiguous - and liable to throw an exception. This could be slightly mitigated in several ways, e.g. 1. adding a constant field to `QP`; ```java; PathClass UNCLASSIFIED; ```; 2. adding a `resetPathClass()` method as an alternative to setting null; 3. taking an empty string as an alternative way to set the classification to null; 4. using different names, e.g. `setPathClass(PathClass)` and `setClassification(String)` - but both ultimately causing the same `PathClass` to be set. The final option has the problem of potential confusion by seeming to have two variables, but in reality only having one. However there might be an intriguing opportunity in this... although it will take a bit more thought. One criticism of QuPath's classification model is that it is [restricted to a single `PathClass`, even if further subclassifications can be derived](https://qupath.readthedocs.io/en/stable/docs/concepts/classifications.html). The API could be adapted to something like:. ```java; public void setPathClass(PathClass);. public PathClass getPathClass();. public void setClassifications(Collection<String>);. public Set<String> getClassifications();; ```. Internally, `get/setClassifications()` would be working with the `PathClass`, but from a user perspective they seem only to have an ordered set. This would mean they could switch between using either the `PathClass` or string-based classification model easily, depending upon which makes most sense for the application. For example:. * `PathClass` may be helpful in dealing with single classifications, possibly with intensity-subclasses (e.g. scoring a single IHC marker). Working with more than one subclassification is probably uncommon.; * `Set<String>` makes sense for multiplexed analysis, where each 'classification' could be seen as being like a tag that a cell is positive for a particular marker. The second case might be handled by setting arbitrary metadata properties or measurements",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1087
https://github.com/qupath/qupath/issues/1087:813,Usability,simpl,simpler,813,"## Feature request. ### Is your feature request related to a problem? Please describe. Classifications are represented in QuPath by `PathClass` objects. Therefore if you want to set a classification you need something like:. ```java; pathObject.setPathClass(PathClassFactory.getPathClass(""Some name"", optionalColorInteger));; ```. In a script, with default static imports from `QP`, that can be somewhat shortened to either of the following; ```groovy; pathObject.setPathClass(getPathClass(""Some name"")); pathObject.pathClass = getPathClass(""Some name"") // Alternative using some Groovy magic; ```. ### Describe the solution you'd like. Adding a method to `PathObject`; ```java; public void setPathClass(String name) {; setPathClass(PathClassFactory.getPathClass(name);; }; ```; would make it possible to use the simpler script. ```groovy; pathObject.pathClass = ""Some name""; ```. I feel this further lowers the barrier to scripting... except for one thing: it makes `pathObject.setPathClass(null)` ambiguous - and liable to throw an exception. This could be slightly mitigated in several ways, e.g. 1. adding a constant field to `QP`; ```java; PathClass UNCLASSIFIED; ```; 2. adding a `resetPathClass()` method as an alternative to setting null; 3. taking an empty string as an alternative way to set the classification to null; 4. using different names, e.g. `setPathClass(PathClass)` and `setClassification(String)` - but both ultimately causing the same `PathClass` to be set. The final option has the problem of potential confusion by seeming to have two variables, but in reality only having one. However there might be an intriguing opportunity in this... although it will take a bit more thought. One criticism of QuPath's classification model is that it is [restricted to a single `PathClass`, even if further subclassifications can be derived](https://qupath.readthedocs.io/en/stable/docs/concepts/classifications.html). The API could be adapted to something like:. ```java; public void setP",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1087
https://github.com/qupath/qupath/issues/1087:3233,Usability,clear,clear,3233,"```. Internally, `get/setClassifications()` would be working with the `PathClass`, but from a user perspective they seem only to have an ordered set. This would mean they could switch between using either the `PathClass` or string-based classification model easily, depending upon which makes most sense for the application. For example:. * `PathClass` may be helpful in dealing with single classifications, possibly with intensity-subclasses (e.g. scoring a single IHC marker). Working with more than one subclassification is probably uncommon.; * `Set<String>` makes sense for multiplexed analysis, where each 'classification' could be seen as being like a tag that a cell is positive for a particular marker. The second case might be handled by setting arbitrary metadata properties or measurements, but the big benefit of having a `PathClass` object is that it also wraps up color information - and this means it easily influences how objects are colorized in the viewer. With multiple classifications, but no `PathClass` concept representing them in a single object, it's not clear to me how objects should be color. When it comes to scripting, this approach would look as follows:; ```groovy; pathObject.pathClass = getPathClass(""Some name"") // Still need the PathClass object; pathObject.classifications = [""Some other name""] // Needs to be a collection - and ultimately sets the `PathClass` internally; print(pathObject.pathClass) // Would print `Some other name`; ```. This introduces new Groovy options using operators to add/remove from collections. For example, the following; ```groovy; pathObject = getSelectedObject(); pathObject.classifications = ['This', 'That']; pathObject.classifications += 'The other'; pathObject.classifications -= 'That'. print(pathObject.classifications); print(pathObject.pathClass); ```; ends up printing; ```; INFO: [This, The other]; INFO: This: The other; ```. My quick prototype suggests it works... the main question is whether it's a good idea or not.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1087
https://github.com/qupath/qupath/pull/1089:114,Energy Efficiency,reduce,reduce,114,"See https://github.com/qupath/qupath/issues/1086; - Improve consistency between `PathClass` and `PathObject`, and reduce requirement to always set packed int values.; - Add `ColorTools.unpackRGB` method; - Add LogTools to facilitate printing log messages once",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1089
https://github.com/qupath/qupath/pull/1089:246,Integrability,message,messages,246,"See https://github.com/qupath/qupath/issues/1086; - Improve consistency between `PathClass` and `PathObject`, and reduce requirement to always set packed int values.; - Add `ColorTools.unpackRGB` method; - Add LogTools to facilitate printing log messages once",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1089
https://github.com/qupath/qupath/pull/1089:210,Testability,Log,LogTools,210,"See https://github.com/qupath/qupath/issues/1086; - Improve consistency between `PathClass` and `PathObject`, and reduce requirement to always set packed int values.; - Add `ColorTools.unpackRGB` method; - Add LogTools to facilitate printing log messages once",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1089
https://github.com/qupath/qupath/pull/1089:242,Testability,log,log,242,"See https://github.com/qupath/qupath/issues/1086; - Improve consistency between `PathClass` and `PathObject`, and reduce requirement to always set packed int values.; - Add `ColorTools.unpackRGB` method; - Add LogTools to facilitate printing log messages once",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1089
https://github.com/qupath/qupath/pull/1091:11,Usability,intuit,intuitive,11,A bit more intuitive than setPathClass(null),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1091
https://github.com/qupath/qupath/pull/1092:690,Safety,avoid,avoid,690,"Some UI and logging fixes, but main thing is simplifying how files and paths can be generated relative to a project - inspired by realizing how awkward it is when writing https://forum.image.sc/t/qupath-style-nuclear-expansion-after-stardist/73084/4. ```groovy; // Build the path but don't make any directories; def path1 = buildFilePath(PROJECT_BASE_DIR, ""something"", ""else"", ""text.txt""). // New method to build the path without needing PROJECT_BASE_DIR specified; def path2 = buildPathInProject(""something"", ""else"", ""text.txt""); println path1 == path2. // Previously then needed to call mkdirs(path)... but to pass the *parent* directory, not the full path with the file name. // Ways to avoid that:. // Build the parent directory path *and* make directories in one line; def pathDirectory = makePathInProject(""something"", ""else""). // Build the File object *and* make any required parent directories; def file = makeFileInProject(""something"", ""else"", ""entirely"", ""text.txt""); file.text = ""This should work""; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1092
https://github.com/qupath/qupath/pull/1092:12,Testability,log,logging,12,"Some UI and logging fixes, but main thing is simplifying how files and paths can be generated relative to a project - inspired by realizing how awkward it is when writing https://forum.image.sc/t/qupath-style-nuclear-expansion-after-stardist/73084/4. ```groovy; // Build the path but don't make any directories; def path1 = buildFilePath(PROJECT_BASE_DIR, ""something"", ""else"", ""text.txt""). // New method to build the path without needing PROJECT_BASE_DIR specified; def path2 = buildPathInProject(""something"", ""else"", ""text.txt""); println path1 == path2. // Previously then needed to call mkdirs(path)... but to pass the *parent* directory, not the full path with the file name. // Ways to avoid that:. // Build the parent directory path *and* make directories in one line; def pathDirectory = makePathInProject(""something"", ""else""). // Build the File object *and* make any required parent directories; def file = makeFileInProject(""something"", ""else"", ""entirely"", ""text.txt""); file.text = ""This should work""; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1092
https://github.com/qupath/qupath/pull/1092:45,Usability,simpl,simplifying,45,"Some UI and logging fixes, but main thing is simplifying how files and paths can be generated relative to a project - inspired by realizing how awkward it is when writing https://forum.image.sc/t/qupath-style-nuclear-expansion-after-stardist/73084/4. ```groovy; // Build the path but don't make any directories; def path1 = buildFilePath(PROJECT_BASE_DIR, ""something"", ""else"", ""text.txt""). // New method to build the path without needing PROJECT_BASE_DIR specified; def path2 = buildPathInProject(""something"", ""else"", ""text.txt""); println path1 == path2. // Previously then needed to call mkdirs(path)... but to pass the *parent* directory, not the full path with the file name. // Ways to avoid that:. // Build the parent directory path *and* make directories in one line; def pathDirectory = makePathInProject(""something"", ""else""). // Build the File object *and* make any required parent directories; def file = makeFileInProject(""something"", ""else"", ""entirely"", ""text.txt""); file.text = ""This should work""; ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1092
https://github.com/qupath/qupath/pull/1096:54,Availability,error,error,54,"This seems to address the ```""columnImage"" is null``` error mentioned in #1083 when loading the qptma file in the TMA Data Viewer.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1096
https://github.com/qupath/qupath/pull/1096:84,Performance,load,loading,84,"This seems to address the ```""columnImage"" is null``` error mentioned in #1083 when loading the qptma file in the TMA Data Viewer.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1096
https://github.com/qupath/qupath/pull/1097:86,Deployability,update,update,86,"From https://forum.image.sc/t/qupath-script-for-random-square-selection/73258/3. Also update ImageRegion/TileRequest API to use `getImagePlane()` rather than `getPlane()`, for consistency with the `ROI` class and QuPathViewer.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1097
https://github.com/qupath/qupath/pull/1098:358,Safety,detect,detection,358,"Make opening by reconstruction optional as a background subtraction method. This is intended help address issues like; * https://github.com/petebankhead/qupath/issues/22; * https://github.com/qupath/qupath/issues/80. Keeping the option on (the default) should give the same results as previous QuPath versions. Turning it off should improve consistency when detection is applied to the same pixels within different ROIs (i.e. when they are tiled differently for detection) because all the background calculations are then local. Also, optionally show an ImageJ stack demonstrating the images generated during cell detection. In a script use; ```groovy; qupath.imagej.detect.cells.WatershedCellDetection.setDebugMode(true); // run cell detection; qupath.imagej.detect.cells.WatershedCellDetection.setDebugMode(false); ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1098
https://github.com/qupath/qupath/pull/1098:462,Safety,detect,detection,462,"Make opening by reconstruction optional as a background subtraction method. This is intended help address issues like; * https://github.com/petebankhead/qupath/issues/22; * https://github.com/qupath/qupath/issues/80. Keeping the option on (the default) should give the same results as previous QuPath versions. Turning it off should improve consistency when detection is applied to the same pixels within different ROIs (i.e. when they are tiled differently for detection) because all the background calculations are then local. Also, optionally show an ImageJ stack demonstrating the images generated during cell detection. In a script use; ```groovy; qupath.imagej.detect.cells.WatershedCellDetection.setDebugMode(true); // run cell detection; qupath.imagej.detect.cells.WatershedCellDetection.setDebugMode(false); ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1098
https://github.com/qupath/qupath/pull/1098:614,Safety,detect,detection,614,"Make opening by reconstruction optional as a background subtraction method. This is intended help address issues like; * https://github.com/petebankhead/qupath/issues/22; * https://github.com/qupath/qupath/issues/80. Keeping the option on (the default) should give the same results as previous QuPath versions. Turning it off should improve consistency when detection is applied to the same pixels within different ROIs (i.e. when they are tiled differently for detection) because all the background calculations are then local. Also, optionally show an ImageJ stack demonstrating the images generated during cell detection. In a script use; ```groovy; qupath.imagej.detect.cells.WatershedCellDetection.setDebugMode(true); // run cell detection; qupath.imagej.detect.cells.WatershedCellDetection.setDebugMode(false); ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1098
https://github.com/qupath/qupath/pull/1098:667,Safety,detect,detect,667,"Make opening by reconstruction optional as a background subtraction method. This is intended help address issues like; * https://github.com/petebankhead/qupath/issues/22; * https://github.com/qupath/qupath/issues/80. Keeping the option on (the default) should give the same results as previous QuPath versions. Turning it off should improve consistency when detection is applied to the same pixels within different ROIs (i.e. when they are tiled differently for detection) because all the background calculations are then local. Also, optionally show an ImageJ stack demonstrating the images generated during cell detection. In a script use; ```groovy; qupath.imagej.detect.cells.WatershedCellDetection.setDebugMode(true); // run cell detection; qupath.imagej.detect.cells.WatershedCellDetection.setDebugMode(false); ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1098
https://github.com/qupath/qupath/pull/1098:735,Safety,detect,detection,735,"Make opening by reconstruction optional as a background subtraction method. This is intended help address issues like; * https://github.com/petebankhead/qupath/issues/22; * https://github.com/qupath/qupath/issues/80. Keeping the option on (the default) should give the same results as previous QuPath versions. Turning it off should improve consistency when detection is applied to the same pixels within different ROIs (i.e. when they are tiled differently for detection) because all the background calculations are then local. Also, optionally show an ImageJ stack demonstrating the images generated during cell detection. In a script use; ```groovy; qupath.imagej.detect.cells.WatershedCellDetection.setDebugMode(true); // run cell detection; qupath.imagej.detect.cells.WatershedCellDetection.setDebugMode(false); ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1098
https://github.com/qupath/qupath/pull/1098:760,Safety,detect,detect,760,"Make opening by reconstruction optional as a background subtraction method. This is intended help address issues like; * https://github.com/petebankhead/qupath/issues/22; * https://github.com/qupath/qupath/issues/80. Keeping the option on (the default) should give the same results as previous QuPath versions. Turning it off should improve consistency when detection is applied to the same pixels within different ROIs (i.e. when they are tiled differently for detection) because all the background calculations are then local. Also, optionally show an ImageJ stack demonstrating the images generated during cell detection. In a script use; ```groovy; qupath.imagej.detect.cells.WatershedCellDetection.setDebugMode(true); // run cell detection; qupath.imagej.detect.cells.WatershedCellDetection.setDebugMode(false); ```",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1098
https://github.com/qupath/qupath/pull/1099:0,Deployability,Update,Updated,0,"Updated GeoJSON output, while still attempting to support reading from v0.3.2. Changes include:; * Simplified representation of `PathClass`; * Store either `name` (single name) or `names` (array) field, and `color` (3-element int array); * Flag ellipse ROIs so these can be deserialized as ellipses, not polygons; * A polygon representation is still stored for use in other software, if required; * Store measurements directly as a JSON object / map (rather than an array of name/value elements); * Optionally support child objects in export; * Serializing the root object now involves serializing the whole hierarchy; * Update to GSON 2.10",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1099
https://github.com/qupath/qupath/pull/1099:621,Deployability,Update,Update,621,"Updated GeoJSON output, while still attempting to support reading from v0.3.2. Changes include:; * Simplified representation of `PathClass`; * Store either `name` (single name) or `names` (array) field, and `color` (3-element int array); * Flag ellipse ROIs so these can be deserialized as ellipses, not polygons; * A polygon representation is still stored for use in other software, if required; * Store measurements directly as a JSON object / map (rather than an array of name/value elements); * Optionally support child objects in export; * Serializing the root object now involves serializing the whole hierarchy; * Update to GSON 2.10",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1099
https://github.com/qupath/qupath/pull/1099:99,Usability,Simpl,Simplified,99,"Updated GeoJSON output, while still attempting to support reading from v0.3.2. Changes include:; * Simplified representation of `PathClass`; * Store either `name` (single name) or `names` (array) field, and `color` (3-element int array); * Flag ellipse ROIs so these can be deserialized as ellipses, not polygons; * A polygon representation is still stored for use in other software, if required; * Store measurements directly as a JSON object / map (rather than an array of name/value elements); * Optionally support child objects in export; * Serializing the root object now involves serializing the whole hierarchy; * Update to GSON 2.10",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1099
https://github.com/qupath/qupath/pull/1100:46,Availability,error,error-during-building-from-source,46,In the hope it fixes https://forum.image.sc/t/error-during-building-from-source/73322,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1100
https://github.com/qupath/qupath/pull/1101:48,Availability,error,error-during-building-from-source,48,Another attempt to fix https://forum.image.sc/t/error-during-building-from-source/73322/,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1101
https://github.com/qupath/qupath/pull/1103:58,Deployability,update,update,58,"* Add gzip support for geojson import/export; * Prompt to update duplicate ids when importing objects; * This includes import via the menu & via drag & drop; * Add copy & paste to objects, via system clipboard and geojson; * Extract `FeatureCollection` into its own class; * Introduce max objects to copy preference; * Avoid shortcut+c because it intercepts other copying efforts (e.g. measurements from the 'Analysis pane'; * Make `PreferencePane` code easier to follow",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1103
https://github.com/qupath/qupath/pull/1103:319,Safety,Avoid,Avoid,319,"* Add gzip support for geojson import/export; * Prompt to update duplicate ids when importing objects; * This includes import via the menu & via drag & drop; * Add copy & paste to objects, via system clipboard and geojson; * Extract `FeatureCollection` into its own class; * Introduce max objects to copy preference; * Avoid shortcut+c because it intercepts other copying efforts (e.g. measurements from the 'Analysis pane'; * Make `PreferencePane` code easier to follow",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1103
https://github.com/qupath/qupath/pull/1104:109,Availability,error,error,109,"Several script editor improvements, which include now showing the caret position and giving more informative error messages. Biggest change is calling `fireHierarchyUpdate()` by default, to ensure the UI is notified of changes. This means it's no longer required to include it at the end of many scripts.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1104
https://github.com/qupath/qupath/pull/1104:115,Integrability,message,messages,115,"Several script editor improvements, which include now showing the caret position and giving more informative error messages. Biggest change is calling `fireHierarchyUpdate()` by default, to ensure the UI is notified of changes. This means it's no longer required to include it at the end of many scripts.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1104
https://github.com/qupath/qupath/issues/1108:1253,Availability,Down,Download,1253,"ps://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...] Windows; - QuPath Version: [e.g. 0.2.2] v0.3.2. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:1486,Availability,Down,Download,1486,"ps://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...] Windows; - QuPath Version: [e.g. 0.2.2] v0.3.2. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:568,Deployability,release,release,568,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:766,Deployability,release,release,766,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:941,Deployability,Install,Installing,941,"on is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:1028,Deployability,install,installation,1028,"on is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:1088,Deployability,install,installed,1088,"on is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:1170,Deployability,install,installing,1170,"forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...] Windows; - QuPath Version: [e.g. 0.2.2] v0.3.2. **Addition",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:1280,Deployability,install,installation,1280,"ps://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...] Windows; - QuPath Version: [e.g. 0.2.2] v0.3.2. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:1303,Deployability,Install,Install,1303,"ps://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...] Windows; - QuPath Version: [e.g. 0.2.2] v0.3.2. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:1355,Deployability,install,installation,1355,"ps://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...] Windows; - QuPath Version: [e.g. 0.2.2] v0.3.2. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:1381,Deployability,install,installation,1381,"ps://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...] Windows; - QuPath Version: [e.g. 0.2.2] v0.3.2. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:1516,Deployability,Install,Install,1516,"ps://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...] Windows; - QuPath Version: [e.g. 0.2.2] v0.3.2. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:1559,Deployability,install,installation,1559,"ps://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...] Windows; - QuPath Version: [e.g. 0.2.2] v0.3.2. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:1044,Security,access,access,1044,"on is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:1132,Security,secur,security,1132,"ns to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...] Windows; - QuPa",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:1858,Security,access,access,1858,"ps://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...] Windows; - QuPath Version: [e.g. 0.2.2] v0.3.2. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:1918,Security,secur,security,1918,"ps://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...] Windows; - QuPath Version: [e.g. 0.2.2] v0.3.2. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:891,Usability,clear,clear,891,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/issues/1108:1793,Usability,clear,clear,1793,"ps://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ X ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ X ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ X ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ X ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. Installing QuPath under two different users in the same computer allows for the second installation to access the directory of the first user that installed the software. These seems to be a security bug. This doesn't occur when installing the zip version. **To Reproduce**; Steps to reproduce the behavior:; 1. Download the "".msi"" QuPath installation file ; 2. Install in a first user -> admin rights require for installation; 3. Complete installation and start the program; 4. Sign out of the first session ; 5. Sign in into the next user; 6. Download the "".msi"" file ; 7. Install QuPath -> admin rights require for installation.; 8. Here you will notice that the setup steps are skip; 9. If you go to the extensions folder through the extension tab in QuPath you will notice that the paths are associated to the first user. **Expected behavior**; A clear and concise description of what you expected to happen. No access to the file system of other users since that rises a security concern. . **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...] Windows; - QuPath Version: [e.g. 0.2.2] v0.3.2. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1108
https://github.com/qupath/qupath/pull/1109:216,Deployability,update,update,216,"Mostly improve symmetry and consistency:` addObject` instead of `addPathObject`, because removing uses `removeObject` and not `removePathObject`. Also, QP uses `addObject` rather than `addPathObject`. Along the way, update names of add/remove methods for listeners as well.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1109
https://github.com/qupath/qupath/pull/1111:148,Usability,clear,clear,148,"Refer to child objects consistently as child objects, rather than switch to sometimes calling them path objects. This means updating the add/remove/clear methods, but get remains unchanged.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1111
https://github.com/qupath/qupath/issues/1114:1928,Deployability,update,update,1928,"t that multiple cores could (and often should) have the same unique ID. Which meant a curious interpretation of 'unique'. It's useful because it makes it possible to group cores with the same ID, e.g. to compute summary measurements. I used this a lot in the original QuPath *Scientific Reports* paper, but haven't really used it myself much since then. Since all `PathObject` instances now have an ID property, which should be unique, the use of 'Unique ID' as a property for a TMA core becomes even more confusing. I'd like to change it as soon as possible. Doing so now fits with recent work to rename key methods to improve consistency and reduce ambiguity, e.g.; * https://github.com/qupath/qupath/pull/1109; * https://github.com/qupath/qupath/pull/1111. My proposal is to change **Unique ID** to become **Case ID**. I know others use the TMA functionality more often than me (e.g. https://github.com/qupath/qupath/issues/1083) so I want to leave this issue here for a day or two to a) give a reference explaining the change, and b) ask for feedback as to whether it's a good/bad idea, or there's a better name than than *Case ID*. I'd like to stay away from *Patient ID* because it feels quite human-specific to me, and I have some concerns that it encourages the use of identifiers that might be sensitive - and really any identifier used in QuPath ought to be anonymised. Making the change involves an extra decision. The easy bit is to create methods for `TMACoreObject.setCaseID(id)` and `TMACoreObject.getCaseID()` - the old methods can remain temporarily, but emit a warning if they are called*. The trickier choice is whether to update the name used internally to store the value; I'd like to change it, but it means that IDs saved in QuPath v0.4.0 won't be recognized in older versions. @ajay1685 @Svidro @saramcardle @zmikulski (not sure who is using the TMA functionality...). *-**Note to self!** @petebankhead Need to decide on `getID()` or `getId()` and ensure this is consistent...",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1114
https://github.com/qupath/qupath/issues/1114:930,Energy Efficiency,reduce,reduce,930,"[`TMACoreObject`](https://github.com/qupath/qupath/blob/v0.3.2/qupath-core/src/main/java/qupath/lib/objects/TMACoreObject.java) has a 'Unique ID' property, which was always confusingly named. Its original purpose was to uniquely identify cores belonging to the same patient - which meant that multiple cores could (and often should) have the same unique ID. Which meant a curious interpretation of 'unique'. It's useful because it makes it possible to group cores with the same ID, e.g. to compute summary measurements. I used this a lot in the original QuPath *Scientific Reports* paper, but haven't really used it myself much since then. Since all `PathObject` instances now have an ID property, which should be unique, the use of 'Unique ID' as a property for a TMA core becomes even more confusing. I'd like to change it as soon as possible. Doing so now fits with recent work to rename key methods to improve consistency and reduce ambiguity, e.g.; * https://github.com/qupath/qupath/pull/1109; * https://github.com/qupath/qupath/pull/1111. My proposal is to change **Unique ID** to become **Case ID**. I know others use the TMA functionality more often than me (e.g. https://github.com/qupath/qupath/issues/1083) so I want to leave this issue here for a day or two to a) give a reference explaining the change, and b) ask for feedback as to whether it's a good/bad idea, or there's a better name than than *Case ID*. I'd like to stay away from *Patient ID* because it feels quite human-specific to me, and I have some concerns that it encourages the use of identifiers that might be sensitive - and really any identifier used in QuPath ought to be anonymised. Making the change involves an extra decision. The easy bit is to create methods for `TMACoreObject.setCaseID(id)` and `TMACoreObject.getCaseID()` - the old methods can remain temporarily, but emit a warning if they are called*. The trickier choice is whether to update the name used internally to store the value; I'd like to change it",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1114
https://github.com/qupath/qupath/issues/1114:1332,Usability,feedback,feedback,1332,"t that multiple cores could (and often should) have the same unique ID. Which meant a curious interpretation of 'unique'. It's useful because it makes it possible to group cores with the same ID, e.g. to compute summary measurements. I used this a lot in the original QuPath *Scientific Reports* paper, but haven't really used it myself much since then. Since all `PathObject` instances now have an ID property, which should be unique, the use of 'Unique ID' as a property for a TMA core becomes even more confusing. I'd like to change it as soon as possible. Doing so now fits with recent work to rename key methods to improve consistency and reduce ambiguity, e.g.; * https://github.com/qupath/qupath/pull/1109; * https://github.com/qupath/qupath/pull/1111. My proposal is to change **Unique ID** to become **Case ID**. I know others use the TMA functionality more often than me (e.g. https://github.com/qupath/qupath/issues/1083) so I want to leave this issue here for a day or two to a) give a reference explaining the change, and b) ask for feedback as to whether it's a good/bad idea, or there's a better name than than *Case ID*. I'd like to stay away from *Patient ID* because it feels quite human-specific to me, and I have some concerns that it encourages the use of identifiers that might be sensitive - and really any identifier used in QuPath ought to be anonymised. Making the change involves an extra decision. The easy bit is to create methods for `TMACoreObject.setCaseID(id)` and `TMACoreObject.getCaseID()` - the old methods can remain temporarily, but emit a warning if they are called*. The trickier choice is whether to update the name used internally to store the value; I'd like to change it, but it means that IDs saved in QuPath v0.4.0 won't be recognized in older versions. @ajay1685 @Svidro @saramcardle @zmikulski (not sure who is using the TMA functionality...). *-**Note to self!** @petebankhead Need to decide on `getID()` or `getId()` and ensure this is consistent...",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1114
https://github.com/qupath/qupath/pull/1116:93,Testability,log,logs,93,"Like a command list, but showing recently-used menu commands. Room for improvement, since it logs too much (including itself). Also fixed a few CSS bugs and removed shortcut for paste, because it was called too frequently.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1116
https://github.com/qupath/qupath/pull/1121:183,Safety,predict,predictable,183,"* Include z/t index in measurement tables (if non-zero); * Don't show ROI type in `PathObjecttoString()`, but do show non-zero z-index and t-index.; * Make annotation list order more predictable; * Fix bug that meant brush/wand could edit an annotation on a different plane, if it was selected; * Ensure annotations are removed if they have an empty ROI after brush/wand editing; * Don't paint objects with an empty ROI",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1121
https://github.com/qupath/qupath/pull/1122:61,Integrability,synchroniz,synchronized-multiview-with-rotated-image-s,61,Fixes (hopefully) https://forum.image.sc/t/small-ui-issue-in-synchronized-multiview-with-rotated-image-s/73577,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1122
https://github.com/qupath/qupath/pull/1124:100,Deployability,Update,Update,100,"* Setting max memory shifted to preferences, and only appears when possible - but needs checked.; * Update checks need tested. ![welcome](https://user-images.githubusercontent.com/4690904/200657796-f8f83bd3-8b3f-42fb-ad62-30621905826c.jpg)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1124
https://github.com/qupath/qupath/pull/1124:119,Testability,test,tested,119,"* Setting max memory shifted to preferences, and only appears when possible - but needs checked.; * Update checks need tested. ![welcome](https://user-images.githubusercontent.com/4690904/200657796-f8f83bd3-8b3f-42fb-ad62-30621905826c.jpg)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1124
https://github.com/qupath/qupath/pull/1125:122,Integrability,message,message,122,* Make non-modal (since it doesn't need to be modal); * Reuse the instance; * Add to preference pane; * Include a default message when not hovering over buttons,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1125
https://github.com/qupath/qupath/pull/1127:66,Usability,undo,undock,66,"Improved annotation tab pane behavior:; * Right-click on a tab to undock it & create a separate window; * Restore docked tab by closing the window; * Drag to rearrange tabs. Note that the dock status and window position isn't persistent, so will need to be reset each time. Also a few other minor fixes, including improved sorting of image entries under the 'Project' tab. Related to https://forum.image.sc/t/feature-request-project-tab-sorting/73792. ![qupath-undock](https://user-images.githubusercontent.com/4690904/201408819-e3c653a1-893f-4a57-96fe-290739105c1c.jpg)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1127
https://github.com/qupath/qupath/pull/1127:461,Usability,undo,undock,461,"Improved annotation tab pane behavior:; * Right-click on a tab to undock it & create a separate window; * Restore docked tab by closing the window; * Drag to rearrange tabs. Note that the dock status and window position isn't persistent, so will need to be reset each time. Also a few other minor fixes, including improved sorting of image entries under the 'Project' tab. Related to https://forum.image.sc/t/feature-request-project-tab-sorting/73792. ![qupath-undock](https://user-images.githubusercontent.com/4690904/201408819-e3c653a1-893f-4a57-96fe-290739105c1c.jpg)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1127
https://github.com/qupath/qupath/pull/1128:8,Safety,avoid,avoid,8,"Aims to avoid needing the more tortured logic of https://gist.github.com/petebankhead/63a6d2e93b7ce704e57eefb6885010fa. In a script, now simply call something like; ```groovy; getQuPath().setAccelerator(""File>Open..."", ""shift+o""); ```. Relates to https://forum.image.sc/t/feature-request-windows-with-favorite-menu-items/72721",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1128
https://github.com/qupath/qupath/pull/1128:40,Testability,log,logic,40,"Aims to avoid needing the more tortured logic of https://gist.github.com/petebankhead/63a6d2e93b7ce704e57eefb6885010fa. In a script, now simply call something like; ```groovy; getQuPath().setAccelerator(""File>Open..."", ""shift+o""); ```. Relates to https://forum.image.sc/t/feature-request-windows-with-favorite-menu-items/72721",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1128
https://github.com/qupath/qupath/pull/1128:137,Usability,simpl,simply,137,"Aims to avoid needing the more tortured logic of https://gist.github.com/petebankhead/63a6d2e93b7ce704e57eefb6885010fa. In a script, now simply call something like; ```groovy; getQuPath().setAccelerator(""File>Open..."", ""shift+o""); ```. Relates to https://forum.image.sc/t/feature-request-windows-with-favorite-menu-items/72721",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1128
https://github.com/qupath/qupath/issues/1138:1099,Availability,error,error,1099,"## Bug report. **Describe the bug**; After importing an image with a Rotate 180 in the import dialog, the image is not shown as rotated. However, using the Magic wand, (which is how we found the bug) the outline is drawn from the rotated version of the image, which does not overlap with the pixels we are seeing.; This seems to be linked to the ImageJ Server type, as forcing Bioformats as the server gives the expected behaviour. **To Reproduce**; Steps to reproduce the behavior:; 1. Make a new project; 2. Drag and drop a fluorescent image that will be opened with the ImageJ server type; 3. Select Rotate 180 before importing; 4. Try to draw a visible shape using the magic wand. . **Expected behavior**; The image pixels should be displayed with the requested rotation when importing as an ImageJ server type. **Screenshots**; ![image](https://user-images.githubusercontent.com/319932/202206940-3e62bc6c-d2d0-4629-b74e-629a656f8fc6.png). **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version: 0.3.2. **Additional context**; [Example QuPath Project with the error](https://github.com/qupath/qupath/files/10022626/QuPath.Flip.Error.zip)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1138
https://github.com/qupath/qupath/issues/1138:1166,Availability,Error,Error,1166,"## Bug report. **Describe the bug**; After importing an image with a Rotate 180 in the import dialog, the image is not shown as rotated. However, using the Magic wand, (which is how we found the bug) the outline is drawn from the rotated version of the image, which does not overlap with the pixels we are seeing.; This seems to be linked to the ImageJ Server type, as forcing Bioformats as the server gives the expected behaviour. **To Reproduce**; Steps to reproduce the behavior:; 1. Make a new project; 2. Drag and drop a fluorescent image that will be opened with the ImageJ server type; 3. Select Rotate 180 before importing; 4. Try to draw a visible shape using the magic wand. . **Expected behavior**; The image pixels should be displayed with the requested rotation when importing as an ImageJ server type. **Screenshots**; ![image](https://user-images.githubusercontent.com/319932/202206940-3e62bc6c-d2d0-4629-b74e-629a656f8fc6.png). **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version: 0.3.2. **Additional context**; [Example QuPath Project with the error](https://github.com/qupath/qupath/files/10022626/QuPath.Flip.Error.zip)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1138
https://github.com/qupath/qupath/issues/1141:566,Deployability,release,release,566,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [x ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; QuPath uses Apache commons-text version 1.9, which exposes a known critical vulnerability ( see https://nvd.nist.gov/vuln/detail/CVE-2022-42889 ). **Expected behavior**; Should use commons-text 1.10, which has fixed the issue. **Additional context**; Users in enterprises may be forced to remove QuPath from their computers, even if the vulnerability is not exploitable.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1141
https://github.com/qupath/qupath/issues/1141:763,Deployability,release,release,763,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [x ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; QuPath uses Apache commons-text version 1.9, which exposes a known critical vulnerability ( see https://nvd.nist.gov/vuln/detail/CVE-2022-42889 ). **Expected behavior**; Should use commons-text 1.10, which has fixed the issue. **Additional context**; Users in enterprises may be forced to remove QuPath from their computers, even if the vulnerability is not exploitable.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1141
https://github.com/qupath/qupath/issues/1141:936,Security,expose,exposes,936,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [x ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [x ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [x ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [x ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; QuPath uses Apache commons-text version 1.9, which exposes a known critical vulnerability ( see https://nvd.nist.gov/vuln/detail/CVE-2022-42889 ). **Expected behavior**; Should use commons-text 1.10, which has fixed the issue. **Additional context**; Users in enterprises may be forced to remove QuPath from their computers, even if the vulnerability is not exploitable.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1141
https://github.com/qupath/qupath/pull/1144:31,Deployability,Toggle,ToggleButton,31,* Removing 'action' class from ToggleButton seems to help toolbar behave properly; * Ensure weak listeners for PathObjectImageManagers; * Fixes problem when changing the image after creating a measurement table; * Fix default colors for derived PathClasses (don't retain the parent class color); * Reset preferences earlier in initialization if requested; * Avoid sorting exceptions in PathHierarchyImageServer,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1144
https://github.com/qupath/qupath/pull/1144:358,Safety,Avoid,Avoid,358,* Removing 'action' class from ToggleButton seems to help toolbar behave properly; * Ensure weak listeners for PathObjectImageManagers; * Fixes problem when changing the image after creating a measurement table; * Fix default colors for derived PathClasses (don't retain the parent class color); * Reset preferences earlier in initialization if requested; * Avoid sorting exceptions in PathHierarchyImageServer,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1144
https://github.com/qupath/qupath/pull/1145:445,Integrability,depend,dependent,445,"Hello,. this PR is to make it easier to recognise which QuPath project is which in the ""Recent projects..."" menu:. ![image](https://user-images.githubusercontent.com/3523902/202584032-3a8aec80-cbea-4893-aaa6-513047c0acfd.png). If you let your mouse pointer sit over one of the shorten project paths, a tooltip appears with the full project path. Also, since I'm on Windows, I changed the hard-coded slashes to `File.separator` so they become OS dependent (i.e. '/' on Linux or Mac, and '\\' on Windows). Cheers,; Egor",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1145
https://github.com/qupath/qupath/pull/1146:108,Performance,perform,performance,108,* Switch `OpenCVTools` percentile method to match NumPy (can give different results!); * Improve percentile performance by using streams & avoiding array sort; * Add tests for percentiles,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1146
https://github.com/qupath/qupath/pull/1146:139,Safety,avoid,avoiding,139,* Switch `OpenCVTools` percentile method to match NumPy (can give different results!); * Improve percentile performance by using streams & avoiding array sort; * Add tests for percentiles,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1146
https://github.com/qupath/qupath/pull/1146:166,Testability,test,tests,166,* Switch `OpenCVTools` percentile method to match NumPy (can give different results!); * Improve percentile performance by using streams & avoiding array sort; * Add tests for percentiles,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1146
https://github.com/qupath/qupath/pull/1147:49,Energy Efficiency,Reduce,Reduced,49,"@zindy what do you think?. <img width=""389"" alt=""Reduced middle button"" src=""https://user-images.githubusercontent.com/4690904/202754611-57f8fa51-717a-4baa-a819-a5d8f10b0400.png"">. Possibly it's just middle button envy from a Mac user, but I was uncomfortable with giving it equal prominence in the input display (although I think it's a good idea to have it represented).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1147
https://github.com/qupath/qupath/issues/1148:1031,Availability,down,down,1031,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to '...'; 2. Click on '....'; 3. Scroll down to '....'; 4. See error. **Expected behavior**; A clear and concise description of what you expected to happen. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...]; - QuPath Version: [e.g. 0.2.2]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1148
https://github.com/qupath/qupath/issues/1148:1054,Availability,error,error,1054,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to '...'; 2. Click on '....'; 3. Scroll down to '....'; 4. See error. **Expected behavior**; A clear and concise description of what you expected to happen. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...]; - QuPath Version: [e.g. 0.2.2]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1148
https://github.com/qupath/qupath/issues/1148:564,Deployability,release,release,564,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to '...'; 2. Click on '....'; 3. Scroll down to '....'; 4. See error. **Expected behavior**; A clear and concise description of what you expected to happen. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...]; - QuPath Version: [e.g. 0.2.2]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1148
https://github.com/qupath/qupath/issues/1148:760,Deployability,release,release,760,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to '...'; 2. Click on '....'; 3. Scroll down to '....'; 4. See error. **Expected behavior**; A clear and concise description of what you expected to happen. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...]; - QuPath Version: [e.g. 0.2.2]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1148
https://github.com/qupath/qupath/issues/1148:883,Usability,clear,clear,883,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to '...'; 2. Click on '....'; 3. Scroll down to '....'; 4. See error. **Expected behavior**; A clear and concise description of what you expected to happen. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...]; - QuPath Version: [e.g. 0.2.2]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1148
https://github.com/qupath/qupath/issues/1148:1086,Usability,clear,clear,1086,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to '...'; 2. Click on '....'; 3. Scroll down to '....'; 4. See error. **Expected behavior**; A clear and concise description of what you expected to happen. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...]; - QuPath Version: [e.g. 0.2.2]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1148
https://github.com/qupath/qupath/pull/1149:417,Performance,perform,performance,417,"New option in `ScriptParameters` and under the 'Run' menu of the script editor. Because the `ScriptEngine` is reused, it seems *possible* that information could leak from one invocation of the script to the next. I couldn't find any way to do this, since a new `ScriptContext` is provided each time - but it remains an experimental off-by-default option until we're confident it behaves well. I've noticed some small performance improvements (fractions of a second) by avoiding the need to create a new script engine and compile the script again each time - but it remains to be seen if these become more worthwhile for more complex scripts.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1149
https://github.com/qupath/qupath/pull/1149:469,Safety,avoid,avoiding,469,"New option in `ScriptParameters` and under the 'Run' menu of the script editor. Because the `ScriptEngine` is reused, it seems *possible* that information could leak from one invocation of the script to the next. I couldn't find any way to do this, since a new `ScriptContext` is provided each time - but it remains an experimental off-by-default option until we're confident it behaves well. I've noticed some small performance improvements (fractions of a second) by avoiding the need to create a new script engine and compile the script again each time - but it remains to be seen if these become more worthwhile for more complex scripts.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1149
https://github.com/qupath/qupath/pull/1151:5,Deployability,update,updated,5,Also updated changelog,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1151
https://github.com/qupath/qupath/issues/1154:357,Deployability,release,release,357,"Currently building the latest version of QuPath; will close ticket if it ends up being fixed. ## Before we begin... Before submitting your bug report, please check the following:. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; QuPath projects with several hundred IMC images take a notably longer time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video de",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:553,Deployability,release,release,553,"Currently building the latest version of QuPath; will close ticket if it ends up being fixed. ## Before we begin... Before submitting your bug report, please check the following:. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; QuPath projects with several hundred IMC images take a notably longer time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video de",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:1263,Deployability,update,updated,1263,"e checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; QuPath projects with several hundred IMC images take a notably longer time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video demonstration: https://www.youtube.com/watch?v=q4Jn9UTKUMw; 1. Create a QuPath project; 2. Load ~300 IMC images. Example IMC images can be found here: https://drive.google.com/file/d/1UcQmiIcjIfYdBVK1v6Phb32FBjHXciuH/view; 3. Close QuPath and restart system; 4. Launch QuPath and open the aforementioned project. O",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:1313,Deployability,release,release,1313,"e checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; QuPath projects with several hundred IMC images take a notably longer time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video demonstration: https://www.youtube.com/watch?v=q4Jn9UTKUMw; 1. Create a QuPath project; 2. Load ~300 IMC images. Example IMC images can be found here: https://drive.google.com/file/d/1UcQmiIcjIfYdBVK1v6Phb32FBjHXciuH/view; 3. Close QuPath and restart system; 4. Launch QuPath and open the aforementioned project. O",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:1709,Deployability,configurat,configuration,1709,"time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video demonstration: https://www.youtube.com/watch?v=q4Jn9UTKUMw; 1. Create a QuPath project; 2. Load ~300 IMC images. Example IMC images can be found here: https://drive.google.com/file/d/1UcQmiIcjIfYdBVK1v6Phb32FBjHXciuH/view; 3. Close QuPath and restart system; 4. Launch QuPath and open the aforementioned project. Observe relatively long project load times. **Expected behavior**; Loading of a QuPath project should take a few seconds, especially if no measurements are present. **Screenshots**; See video demonstration above. Note, memory usage doesn't change substantially when project is being loaded, however one thread is maxed at 100%, indicating that some kind of non-parallelized process is acting as the rate limiting step. **Desktop (ple",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:1659,Integrability,Depend,Depending,1659,"time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video demonstration: https://www.youtube.com/watch?v=q4Jn9UTKUMw; 1. Create a QuPath project; 2. Load ~300 IMC images. Example IMC images can be found here: https://drive.google.com/file/d/1UcQmiIcjIfYdBVK1v6Phb32FBjHXciuH/view; 3. Close QuPath and restart system; 4. Launch QuPath and open the aforementioned project. Observe relatively long project load times. **Expected behavior**; Loading of a QuPath project should take a few seconds, especially if no measurements are present. **Screenshots**; See video demonstration above. Note, memory usage doesn't change substantially when project is being loaded, however one thread is maxed at 100%, indicating that some kind of non-parallelized process is acting as the rate limiting step. **Desktop (ple",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:1709,Modifiability,config,configuration,1709,"time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video demonstration: https://www.youtube.com/watch?v=q4Jn9UTKUMw; 1. Create a QuPath project; 2. Load ~300 IMC images. Example IMC images can be found here: https://drive.google.com/file/d/1UcQmiIcjIfYdBVK1v6Phb32FBjHXciuH/view; 3. Close QuPath and restart system; 4. Launch QuPath and open the aforementioned project. Observe relatively long project load times. **Expected behavior**; Loading of a QuPath project should take a few seconds, especially if no measurements are present. **Screenshots**; See video demonstration above. Note, memory usage doesn't change substantially when project is being loaded, however one thread is maxed at 100%, indicating that some kind of non-parallelized process is acting as the rate limiting step. **Desktop (ple",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:752,Performance,load,load,752,"Currently building the latest version of QuPath; will close ticket if it ends up being fixed. ## Before we begin... Before submitting your bug report, please check the following:. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; QuPath projects with several hundred IMC images take a notably longer time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video de",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:928,Performance,load,loaded,928,"Currently building the latest version of QuPath; will close ticket if it ends up being fixed. ## Before we begin... Before submitting your bug report, please check the following:. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; QuPath projects with several hundred IMC images take a notably longer time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video de",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:980,Performance,load,loaded,980,"Currently building the latest version of QuPath; will close ticket if it ends up being fixed. ## Before we begin... Before submitting your bug report, please check the following:. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; QuPath projects with several hundred IMC images take a notably longer time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video de",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:993,Performance,cache,cached,993,"ing the latest version of QuPath; will close ticket if it ends up being fixed. ## Before we begin... Before submitting your bug report, please check the following:. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; QuPath projects with several hundred IMC images take a notably longer time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video demonstration: h",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:1008,Performance,load,loading,1008,"ing the latest version of QuPath; will close ticket if it ends up being fixed. ## Before we begin... Before submitting your bug report, please check the following:. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; QuPath projects with several hundred IMC images take a notably longer time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video demonstration: h",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:1127,Performance,load,loaded,1127,"g your bug report, please check the following:. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; QuPath projects with several hundred IMC images take a notably longer time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video demonstration: https://www.youtube.com/watch?v=q4Jn9UTKUMw; 1. Create a QuPath project; 2. Load ~300 IMC images. Example IMC images c",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:1724,Performance,load,load,1724,"time to load. Opening the images themselves is comparatively faster, yet are still read into memory. No noticeable change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video demonstration: https://www.youtube.com/watch?v=q4Jn9UTKUMw; 1. Create a QuPath project; 2. Load ~300 IMC images. Example IMC images can be found here: https://drive.google.com/file/d/1UcQmiIcjIfYdBVK1v6Phb32FBjHXciuH/view; 3. Close QuPath and restart system; 4. Launch QuPath and open the aforementioned project. Observe relatively long project load times. **Expected behavior**; Loading of a QuPath project should take a few seconds, especially if no measurements are present. **Screenshots**; See video demonstration above. Note, memory usage doesn't change substantially when project is being loaded, however one thread is maxed at 100%, indicating that some kind of non-parallelized process is acting as the rate limiting step. **Desktop (ple",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:2090,Performance,Load,Load,2090,"change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video demonstration: https://www.youtube.com/watch?v=q4Jn9UTKUMw; 1. Create a QuPath project; 2. Load ~300 IMC images. Example IMC images can be found here: https://drive.google.com/file/d/1UcQmiIcjIfYdBVK1v6Phb32FBjHXciuH/view; 3. Close QuPath and restart system; 4. Launch QuPath and open the aforementioned project. Observe relatively long project load times. **Expected behavior**; Loading of a QuPath project should take a few seconds, especially if no measurements are present. **Screenshots**; See video demonstration above. Note, memory usage doesn't change substantially when project is being loaded, however one thread is maxed at 100%, indicating that some kind of non-parallelized process is acting as the rate limiting step. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0 snapshot built on 2022-01-24",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:2344,Performance,load,load,2344,"change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video demonstration: https://www.youtube.com/watch?v=q4Jn9UTKUMw; 1. Create a QuPath project; 2. Load ~300 IMC images. Example IMC images can be found here: https://drive.google.com/file/d/1UcQmiIcjIfYdBVK1v6Phb32FBjHXciuH/view; 3. Close QuPath and restart system; 4. Launch QuPath and open the aforementioned project. Observe relatively long project load times. **Expected behavior**; Loading of a QuPath project should take a few seconds, especially if no measurements are present. **Screenshots**; See video demonstration above. Note, memory usage doesn't change substantially when project is being loaded, however one thread is maxed at 100%, indicating that some kind of non-parallelized process is acting as the rate limiting step. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0 snapshot built on 2022-01-24",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:2379,Performance,Load,Loading,2379,"change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video demonstration: https://www.youtube.com/watch?v=q4Jn9UTKUMw; 1. Create a QuPath project; 2. Load ~300 IMC images. Example IMC images can be found here: https://drive.google.com/file/d/1UcQmiIcjIfYdBVK1v6Phb32FBjHXciuH/view; 3. Close QuPath and restart system; 4. Launch QuPath and open the aforementioned project. Observe relatively long project load times. **Expected behavior**; Loading of a QuPath project should take a few seconds, especially if no measurements are present. **Screenshots**; See video demonstration above. Note, memory usage doesn't change substantially when project is being loaded, however one thread is maxed at 100%, indicating that some kind of non-parallelized process is acting as the rate limiting step. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0 snapshot built on 2022-01-24",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/issues/1154:2595,Performance,load,loaded,2595,"change in memory usage is occurring when the QuPath project is being loaded, indicating that these images may not be pre-loaded (i.e. cached) during loading of the project itself. My guess is that the thumbnails are being reconstructed each time the QuPath project is loaded (computer must be restarted to reproduce, closing and relaunching QuPath is not sufficient). Given that thumbnail generation was updated in the changelog of the newest unofficial release, I'll build from source now and close the ticket if I can't reproduce the bug. It's a minor inconvenience at best, especially since it's only a delay of two minutes. But keep in mind, the CPU here is a Ryzen 5950X with among the highest single thread speeds of desktop CPUs, and only 1 of the 32 threads is being used during this period. Depending on the root cause and a user's hardware configuration, load times may scale linearly or exponentially as project sizes move into the range of thousands of images. If this is caused by thumbnail generation, then this may only be affecting multiplexed IHC images such as those acquired through IMC or CODEX. **To Reproduce**; Video demonstration: https://www.youtube.com/watch?v=q4Jn9UTKUMw; 1. Create a QuPath project; 2. Load ~300 IMC images. Example IMC images can be found here: https://drive.google.com/file/d/1UcQmiIcjIfYdBVK1v6Phb32FBjHXciuH/view; 3. Close QuPath and restart system; 4. Launch QuPath and open the aforementioned project. Observe relatively long project load times. **Expected behavior**; Loading of a QuPath project should take a few seconds, especially if no measurements are present. **Screenshots**; See video demonstration above. Note, memory usage doesn't change substantially when project is being loaded, however one thread is maxed at 100%, indicating that some kind of non-parallelized process is acting as the rate limiting step. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0 snapshot built on 2022-01-24",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1154
https://github.com/qupath/qupath/pull/1158:46,Integrability,depend,dependencies,46,"Improve formatting, bump versions for several dependencies",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1158
https://github.com/qupath/qupath/pull/1159:24,Integrability,depend,dependencies,24,"* Add Deep Java Library dependencies to the dependency catalog, and enable them to be included in builds (even if they aren't currently used...); * Code cleanup; * Support pref width/height with `Dialogs`; * Improve `OpenCVTools.applyTiled` to use internal padding (rather than non-overlapping tiles)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1159
https://github.com/qupath/qupath/pull/1159:44,Integrability,depend,dependency,44,"* Add Deep Java Library dependencies to the dependency catalog, and enable them to be included in builds (even if they aren't currently used...); * Code cleanup; * Support pref width/height with `Dialogs`; * Improve `OpenCVTools.applyTiled` to use internal padding (rather than non-overlapping tiles)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1159
https://github.com/qupath/qupath/pull/1160:129,Availability,avail,available,129,"* Enable new `DnnModel` implementations to be added via extensions (using a `ServiceLoader`); * Make all DeepJavaLibrary engines available when building via gradle properties; * Handle single-channel probability predictions as if they are multichannel when creating objects; * Without this, the 'softmax' assumption would mean that everything was treated as 'detected' since there was no higher channel available; * Store all actions added with `installActions`, so they can be found again via `QuPathGUI.lookupActionByText(String)`; * Add title to startup message (because otherwise drop shadow missing on Windows)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1160
https://github.com/qupath/qupath/pull/1160:403,Availability,avail,available,403,"* Enable new `DnnModel` implementations to be added via extensions (using a `ServiceLoader`); * Make all DeepJavaLibrary engines available when building via gradle properties; * Handle single-channel probability predictions as if they are multichannel when creating objects; * Without this, the 'softmax' assumption would mean that everything was treated as 'detected' since there was no higher channel available; * Store all actions added with `installActions`, so they can be found again via `QuPathGUI.lookupActionByText(String)`; * Add title to startup message (because otherwise drop shadow missing on Windows)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1160
https://github.com/qupath/qupath/pull/1160:446,Deployability,install,installActions,446,"* Enable new `DnnModel` implementations to be added via extensions (using a `ServiceLoader`); * Make all DeepJavaLibrary engines available when building via gradle properties; * Handle single-channel probability predictions as if they are multichannel when creating objects; * Without this, the 'softmax' assumption would mean that everything was treated as 'detected' since there was no higher channel available; * Store all actions added with `installActions`, so they can be found again via `QuPathGUI.lookupActionByText(String)`; * Add title to startup message (because otherwise drop shadow missing on Windows)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1160
https://github.com/qupath/qupath/pull/1160:557,Integrability,message,message,557,"* Enable new `DnnModel` implementations to be added via extensions (using a `ServiceLoader`); * Make all DeepJavaLibrary engines available when building via gradle properties; * Handle single-channel probability predictions as if they are multichannel when creating objects; * Without this, the 'softmax' assumption would mean that everything was treated as 'detected' since there was no higher channel available; * Store all actions added with `installActions`, so they can be found again via `QuPathGUI.lookupActionByText(String)`; * Add title to startup message (because otherwise drop shadow missing on Windows)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1160
https://github.com/qupath/qupath/pull/1160:212,Safety,predict,predictions,212,"* Enable new `DnnModel` implementations to be added via extensions (using a `ServiceLoader`); * Make all DeepJavaLibrary engines available when building via gradle properties; * Handle single-channel probability predictions as if they are multichannel when creating objects; * Without this, the 'softmax' assumption would mean that everything was treated as 'detected' since there was no higher channel available; * Store all actions added with `installActions`, so they can be found again via `QuPathGUI.lookupActionByText(String)`; * Add title to startup message (because otherwise drop shadow missing on Windows)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1160
https://github.com/qupath/qupath/pull/1160:359,Safety,detect,detected,359,"* Enable new `DnnModel` implementations to be added via extensions (using a `ServiceLoader`); * Make all DeepJavaLibrary engines available when building via gradle properties; * Handle single-channel probability predictions as if they are multichannel when creating objects; * Without this, the 'softmax' assumption would mean that everything was treated as 'detected' since there was no higher channel available; * Store all actions added with `installActions`, so they can be found again via `QuPathGUI.lookupActionByText(String)`; * Add title to startup message (because otherwise drop shadow missing on Windows)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1160
https://github.com/qupath/qupath/pull/1165:98,Deployability,Update,Update,98,* Include PyTorch/TensorFlow DJL engines by default in builds; * Fix out-of-date javadoc links; * Update changelog; * Reduce caching of `ServiceLoader`; * Improve logic when trying to create a `DnnModel` in `BioimageIoTools`; * Search for weights that are more likely to be supported first,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1165
https://github.com/qupath/qupath/pull/1165:118,Energy Efficiency,Reduce,Reduce,118,* Include PyTorch/TensorFlow DJL engines by default in builds; * Fix out-of-date javadoc links; * Update changelog; * Reduce caching of `ServiceLoader`; * Improve logic when trying to create a `DnnModel` in `BioimageIoTools`; * Search for weights that are more likely to be supported first,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1165
https://github.com/qupath/qupath/pull/1165:163,Testability,log,logic,163,* Include PyTorch/TensorFlow DJL engines by default in builds; * Fix out-of-date javadoc links; * Update changelog; * Reduce caching of `ServiceLoader`; * Improve logic when trying to create a `DnnModel` in `BioimageIoTools`; * Search for weights that are more likely to be supported first,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1165
https://github.com/qupath/qupath/issues/1167:639,Availability,error,errors,639,"As a follow up to the image.sc thread (https://forum.image.sc/t/feature-suggestion-option-to-revert-to-last-state-on-cancelling-script-run/74486), there could be a quicker way to cancel a running script and regain control of QuPath. Currently, on cancelling a script, QuPath will continue to run the current script until completion for the current image. For complex scripts, this can take a long time, from minutes to hours. I would imagine that for most users, when they cancel a running script, they would expect it to halt immediately and regain control of QuPath. Example scenarios for this would be:; - The user quickly notices some errors or mistakes in the script just after running it and would like to correct it.; - The script is running for an unusually long time and the user would like to investigate why (e.g. too many objects created or manipulating extremely complex ROIs?). At the time of writing, I and other users would just close QuPath or kill its instance and re-open the project to ""cancel"" the script run. It is unclear if this may cause data corruption or any other negative consequences. One small inconvenience for this method is that any unsaved scripts in the Script Editor will be lost, which can be the case when testing or optimising parameters. I have suggested in the image.sc thread if there is a way to revert to the last state just before running the script when trying to cancel the script run. From my naive perspective, it could be like:. For scripts running on the currently open image only, on clicking Run,; 1. Save current state of image before running the script.; 2. Start running the script.; 3. If run is cancelled, load the state saved in step 1. For scripts running in batch, on clicking Run for project,; 1. Start running script as usual.; 2. If run is cancelled, ignore whatever that has been done on the current image being processed and maintain the last saved image data. Any images that had already completed processing the script would have an",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1167
https://github.com/qupath/qupath/issues/1167:2002,Deployability,update,updated,2002,"e.sc/t/feature-suggestion-option-to-revert-to-last-state-on-cancelling-script-run/74486), there could be a quicker way to cancel a running script and regain control of QuPath. Currently, on cancelling a script, QuPath will continue to run the current script until completion for the current image. For complex scripts, this can take a long time, from minutes to hours. I would imagine that for most users, when they cancel a running script, they would expect it to halt immediately and regain control of QuPath. Example scenarios for this would be:; - The user quickly notices some errors or mistakes in the script just after running it and would like to correct it.; - The script is running for an unusually long time and the user would like to investigate why (e.g. too many objects created or manipulating extremely complex ROIs?). At the time of writing, I and other users would just close QuPath or kill its instance and re-open the project to ""cancel"" the script run. It is unclear if this may cause data corruption or any other negative consequences. One small inconvenience for this method is that any unsaved scripts in the Script Editor will be lost, which can be the case when testing or optimising parameters. I have suggested in the image.sc thread if there is a way to revert to the last state just before running the script when trying to cancel the script run. From my naive perspective, it could be like:. For scripts running on the currently open image only, on clicking Run,; 1. Save current state of image before running the script.; 2. Start running the script.; 3. If run is cancelled, load the state saved in step 1. For scripts running in batch, on clicking Run for project,; 1. Start running script as usual.; 2. If run is cancelled, ignore whatever that has been done on the current image being processed and maintain the last saved image data. Any images that had already completed processing the script would have an updated and saved image data (as per normal behaviour).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1167
https://github.com/qupath/qupath/issues/1167:1665,Performance,load,load,1665,"e.sc/t/feature-suggestion-option-to-revert-to-last-state-on-cancelling-script-run/74486), there could be a quicker way to cancel a running script and regain control of QuPath. Currently, on cancelling a script, QuPath will continue to run the current script until completion for the current image. For complex scripts, this can take a long time, from minutes to hours. I would imagine that for most users, when they cancel a running script, they would expect it to halt immediately and regain control of QuPath. Example scenarios for this would be:; - The user quickly notices some errors or mistakes in the script just after running it and would like to correct it.; - The script is running for an unusually long time and the user would like to investigate why (e.g. too many objects created or manipulating extremely complex ROIs?). At the time of writing, I and other users would just close QuPath or kill its instance and re-open the project to ""cancel"" the script run. It is unclear if this may cause data corruption or any other negative consequences. One small inconvenience for this method is that any unsaved scripts in the Script Editor will be lost, which can be the case when testing or optimising parameters. I have suggested in the image.sc thread if there is a way to revert to the last state just before running the script when trying to cancel the script run. From my naive perspective, it could be like:. For scripts running on the currently open image only, on clicking Run,; 1. Save current state of image before running the script.; 2. Start running the script.; 3. If run is cancelled, load the state saved in step 1. For scripts running in batch, on clicking Run for project,; 1. Start running script as usual.; 2. If run is cancelled, ignore whatever that has been done on the current image being processed and maintain the last saved image data. Any images that had already completed processing the script would have an updated and saved image data (as per normal behaviour).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1167
https://github.com/qupath/qupath/issues/1167:1245,Testability,test,testing,1245,"e.sc/t/feature-suggestion-option-to-revert-to-last-state-on-cancelling-script-run/74486), there could be a quicker way to cancel a running script and regain control of QuPath. Currently, on cancelling a script, QuPath will continue to run the current script until completion for the current image. For complex scripts, this can take a long time, from minutes to hours. I would imagine that for most users, when they cancel a running script, they would expect it to halt immediately and regain control of QuPath. Example scenarios for this would be:; - The user quickly notices some errors or mistakes in the script just after running it and would like to correct it.; - The script is running for an unusually long time and the user would like to investigate why (e.g. too many objects created or manipulating extremely complex ROIs?). At the time of writing, I and other users would just close QuPath or kill its instance and re-open the project to ""cancel"" the script run. It is unclear if this may cause data corruption or any other negative consequences. One small inconvenience for this method is that any unsaved scripts in the Script Editor will be lost, which can be the case when testing or optimising parameters. I have suggested in the image.sc thread if there is a way to revert to the last state just before running the script when trying to cancel the script run. From my naive perspective, it could be like:. For scripts running on the currently open image only, on clicking Run,; 1. Save current state of image before running the script.; 2. Start running the script.; 3. If run is cancelled, load the state saved in step 1. For scripts running in batch, on clicking Run for project,; 1. Start running script as usual.; 2. If run is cancelled, ignore whatever that has been done on the current image being processed and maintain the last saved image data. Any images that had already completed processing the script would have an updated and saved image data (as per normal behaviour).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1167
https://github.com/qupath/qupath/pull/1170:250,Availability,error,error,250,"Improve build scripts for building using Apple silicon; * Avoid including TensorFlow & OpenSlide (which won't work); * Support a -Popenslide=/path/to/openslide.jar preference to create a build that uses a local openslide jar; * Give more informative error if (when) OpenSlide can't be found. Without a custom build, installing with homebrew and including `libopenslide-jni.jnilib` in the app directory can also work (assuming it contains links to its dependencies).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1170
https://github.com/qupath/qupath/pull/1170:316,Deployability,install,installing,316,"Improve build scripts for building using Apple silicon; * Avoid including TensorFlow & OpenSlide (which won't work); * Support a -Popenslide=/path/to/openslide.jar preference to create a build that uses a local openslide jar; * Give more informative error if (when) OpenSlide can't be found. Without a custom build, installing with homebrew and including `libopenslide-jni.jnilib` in the app directory can also work (assuming it contains links to its dependencies).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1170
https://github.com/qupath/qupath/pull/1170:451,Integrability,depend,dependencies,451,"Improve build scripts for building using Apple silicon; * Avoid including TensorFlow & OpenSlide (which won't work); * Support a -Popenslide=/path/to/openslide.jar preference to create a build that uses a local openslide jar; * Give more informative error if (when) OpenSlide can't be found. Without a custom build, installing with homebrew and including `libopenslide-jni.jnilib` in the app directory can also work (assuming it contains links to its dependencies).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1170
https://github.com/qupath/qupath/pull/1170:58,Safety,Avoid,Avoid,58,"Improve build scripts for building using Apple silicon; * Avoid including TensorFlow & OpenSlide (which won't work); * Support a -Popenslide=/path/to/openslide.jar preference to create a build that uses a local openslide jar; * Give more informative error if (when) OpenSlide can't be found. Without a custom build, installing with homebrew and including `libopenslide-jni.jnilib` in the app directory can also work (assuming it contains links to its dependencies).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1170
https://github.com/qupath/qupath/issues/1175:745,Availability,avail,available,745,"## Bug report. **Describe the bug**; When we search for a script in a folder via 'Automation -> Shared Scripts' , the list of scripts corresponds exactly to those inside the folder. But if we move the mouse on another folder, and then go back on the first folder, the list of scripts has now doubled in size, with duplicates of scripts. Doing like this many times, it adds duplicates of scripts at each iteration. The list can be re-initialized when you exit from 'Automation -> Shared Scripts'. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Automation -> Shared Scripts' ; 2. Select on folder but do NOT OPEN any script; 3. Move your mouse to another folder; 4. Move your mouse back to the first folder; 5. See that the list of available scripts is now doubled with duplicates of scripts. **Expected behavior**; Should only display the list of available scripts, without any duplicates, even if we select this folder more than once. **Screenshots**; ![QuPath040_bug_script](https://user-images.githubusercontent.com/64911638/205653051-987a1ec2-42ee-4729-ad02-13077204879f.gif). **Desktop**; - OS: Windows 11; - QuPath Version: 0.4.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1175
https://github.com/qupath/qupath/issues/1175:861,Availability,avail,available,861,"## Bug report. **Describe the bug**; When we search for a script in a folder via 'Automation -> Shared Scripts' , the list of scripts corresponds exactly to those inside the folder. But if we move the mouse on another folder, and then go back on the first folder, the list of scripts has now doubled in size, with duplicates of scripts. Doing like this many times, it adds duplicates of scripts at each iteration. The list can be re-initialized when you exit from 'Automation -> Shared Scripts'. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Automation -> Shared Scripts' ; 2. Select on folder but do NOT OPEN any script; 3. Move your mouse to another folder; 4. Move your mouse back to the first folder; 5. See that the list of available scripts is now doubled with duplicates of scripts. **Expected behavior**; Should only display the list of available scripts, without any duplicates, even if we select this folder more than once. **Screenshots**; ![QuPath040_bug_script](https://user-images.githubusercontent.com/64911638/205653051-987a1ec2-42ee-4729-ad02-13077204879f.gif). **Desktop**; - OS: Windows 11; - QuPath Version: 0.4.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1175
https://github.com/qupath/qupath/issues/1176:124,Availability,error,error,124,"## Bug report. **Describe the bug**; If a block comment contains more than a certain number of characters, QuPath throws an error (see below) when I open that script (no other scripts were open before). It is then not possible to run the script because all `Run` buttons are disabled. If I try to change the language to `None` and then to `Groovy`, it throws again the same error and the `Run` buttons are still disabled. If I open another script, then it enables the Run buttons for both scripts (but the issue is still there if we open again the first script). **Temporary Fix**; One fix is to reduce the number of characters in the block comment and then, no more error is thrown. For example, splitting a large block comment to smaller ones. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a script; 2. Add the following block comment ; ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; */; ```; 3. Save the script.; 5. Close the script (Ctrl+w); 6. Open the same script ==> no error; 7. Add the following block comment. ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176
https://github.com/qupath/qupath/issues/1176:374,Availability,error,error,374,"## Bug report. **Describe the bug**; If a block comment contains more than a certain number of characters, QuPath throws an error (see below) when I open that script (no other scripts were open before). It is then not possible to run the script because all `Run` buttons are disabled. If I try to change the language to `None` and then to `Groovy`, it throws again the same error and the `Run` buttons are still disabled. If I open another script, then it enables the Run buttons for both scripts (but the issue is still there if we open again the first script). **Temporary Fix**; One fix is to reduce the number of characters in the block comment and then, no more error is thrown. For example, splitting a large block comment to smaller ones. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a script; 2. Add the following block comment ; ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; */; ```; 3. Save the script.; 5. Close the script (Ctrl+w); 6. Open the same script ==> no error; 7. Add the following block comment. ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176
https://github.com/qupath/qupath/issues/1176:667,Availability,error,error,667,"## Bug report. **Describe the bug**; If a block comment contains more than a certain number of characters, QuPath throws an error (see below) when I open that script (no other scripts were open before). It is then not possible to run the script because all `Run` buttons are disabled. If I try to change the language to `None` and then to `Groovy`, it throws again the same error and the `Run` buttons are still disabled. If I open another script, then it enables the Run buttons for both scripts (but the issue is still there if we open again the first script). **Temporary Fix**; One fix is to reduce the number of characters in the block comment and then, no more error is thrown. For example, splitting a large block comment to smaller ones. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a script; 2. Add the following block comment ; ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; */; ```; 3. Save the script.; 5. Close the script (Ctrl+w); 6. Open the same script ==> no error; 7. Add the following block comment. ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176
https://github.com/qupath/qupath/issues/1176:1737,Availability,error,error,1737,"t to smaller ones. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a script; 2. Add the following block comment ; ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; */; ```; 3. Save the script.; 5. Close the script (Ctrl+w); 6. Open the same script ==> no error; 7. Add the following block comment. ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, TH",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176
https://github.com/qupath/qupath/issues/1176:5023,Availability,error,error,5023,"GENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; */; ```. 7. Save the script.; 5. Close the script (Ctrl+w); 6. Open the same script ==> the follwing error is thrown. **Expected behavior**; Enable to have an unlimited number of characters inside a block comment. **Screenshots**; ```; ERROR: QuPath exception; java.lang.StackOverflowError: null; at java.base/java.util.regex.Pattern$LazyLoop.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupTail.match(Unknown Source); at java.base/java.util.regex.Pattern$BranchConn.match(Unknown Source); at java.base/java.util.regex.Pattern$CharProperty.match(Unknown Source); at java.base/java.util.regex.Pattern$Branch.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupHead.match(Unknown Source); *****; at java.base/java.util.regex.Pattern$LazyLoop.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupTail.match(Unknown Source); at java.base/java.util.regex.Pattern$BranchConn.match(Unknown Source); at java.base/java.util.regex.Pattern$CharProperty.match(Unknown Source); at java.base/java.util.regex.Pattern$Branch.match(Unknown Source); at java.base/jav",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176
https://github.com/qupath/qupath/issues/1176:5158,Availability,ERROR,ERROR,5158,"VIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; */; ```. 7. Save the script.; 5. Close the script (Ctrl+w); 6. Open the same script ==> the follwing error is thrown. **Expected behavior**; Enable to have an unlimited number of characters inside a block comment. **Screenshots**; ```; ERROR: QuPath exception; java.lang.StackOverflowError: null; at java.base/java.util.regex.Pattern$LazyLoop.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupTail.match(Unknown Source); at java.base/java.util.regex.Pattern$BranchConn.match(Unknown Source); at java.base/java.util.regex.Pattern$CharProperty.match(Unknown Source); at java.base/java.util.regex.Pattern$Branch.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupHead.match(Unknown Source); *****; at java.base/java.util.regex.Pattern$LazyLoop.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupTail.match(Unknown Source); at java.base/java.util.regex.Pattern$BranchConn.match(Unknown Source); at java.base/java.util.regex.Pattern$CharProperty.match(Unknown Source); at java.base/java.util.regex.Pattern$Branch.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupHead.match(Unknown Source); **** n times (probably n = nb of characters); ERROR: Error applying syntax highlighting: StackOv",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176
https://github.com/qupath/qupath/issues/1176:6112,Availability,ERROR,ERROR,6112,"R IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; */; ```. 7. Save the script.; 5. Close the script (Ctrl+w); 6. Open the same script ==> the follwing error is thrown. **Expected behavior**; Enable to have an unlimited number of characters inside a block comment. **Screenshots**; ```; ERROR: QuPath exception; java.lang.StackOverflowError: null; at java.base/java.util.regex.Pattern$LazyLoop.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupTail.match(Unknown Source); at java.base/java.util.regex.Pattern$BranchConn.match(Unknown Source); at java.base/java.util.regex.Pattern$CharProperty.match(Unknown Source); at java.base/java.util.regex.Pattern$Branch.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupHead.match(Unknown Source); *****; at java.base/java.util.regex.Pattern$LazyLoop.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupTail.match(Unknown Source); at java.base/java.util.regex.Pattern$BranchConn.match(Unknown Source); at java.base/java.util.regex.Pattern$CharProperty.match(Unknown Source); at java.base/java.util.regex.Pattern$Branch.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupHead.match(Unknown Source); **** n times (probably n = nb of characters); ERROR: Error applying syntax highlighting: StackOverflowError; ```. **Desktop**; - OS: Windows 11; - QuPath Version: 0.4.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176
https://github.com/qupath/qupath/issues/1176:6119,Availability,Error,Error,6119,"R IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; */; ```. 7. Save the script.; 5. Close the script (Ctrl+w); 6. Open the same script ==> the follwing error is thrown. **Expected behavior**; Enable to have an unlimited number of characters inside a block comment. **Screenshots**; ```; ERROR: QuPath exception; java.lang.StackOverflowError: null; at java.base/java.util.regex.Pattern$LazyLoop.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupTail.match(Unknown Source); at java.base/java.util.regex.Pattern$BranchConn.match(Unknown Source); at java.base/java.util.regex.Pattern$CharProperty.match(Unknown Source); at java.base/java.util.regex.Pattern$Branch.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupHead.match(Unknown Source); *****; at java.base/java.util.regex.Pattern$LazyLoop.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupTail.match(Unknown Source); at java.base/java.util.regex.Pattern$BranchConn.match(Unknown Source); at java.base/java.util.regex.Pattern$CharProperty.match(Unknown Source); at java.base/java.util.regex.Pattern$Branch.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupHead.match(Unknown Source); **** n times (probably n = nb of characters); ERROR: Error applying syntax highlighting: StackOverflowError; ```. **Desktop**; - OS: Windows 11; - QuPath Version: 0.4.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176
https://github.com/qupath/qupath/issues/1176:596,Energy Efficiency,reduce,reduce,596,"## Bug report. **Describe the bug**; If a block comment contains more than a certain number of characters, QuPath throws an error (see below) when I open that script (no other scripts were open before). It is then not possible to run the script because all `Run` buttons are disabled. If I try to change the language to `None` and then to `Groovy`, it throws again the same error and the `Run` buttons are still disabled. If I open another script, then it enables the Run buttons for both scripts (but the issue is still there if we open again the first script). **Temporary Fix**; One fix is to reduce the number of characters in the block comment and then, no more error is thrown. For example, splitting a large block comment to smaller ones. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a script; 2. Add the following block comment ; ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; */; ```; 3. Save the script.; 5. Close the script (Ctrl+w); 6. Open the same script ==> no error; 7. Add the following block comment. ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176
https://github.com/qupath/qupath/issues/1176:1462,Integrability,CONTRACT,CONTRACT,1462,"ror and the `Run` buttons are still disabled. If I open another script, then it enables the Run buttons for both scripts (but the issue is still there if we open again the first script). **Temporary Fix**; One fix is to reduce the number of characters in the block comment and then, no more error is thrown. For example, splitting a large block comment to smaller ones. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a script; 2. Add the following block comment ; ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; */; ```; 3. Save the script.; 5. Close the script (Ctrl+w); 6. Open the same script ==> no error; 7. Add the following block comment. ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176
https://github.com/qupath/qupath/issues/1176:2389,Integrability,CONTRACT,CONTRACT,2389,"REMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; */; ```; 3. Save the script.; 5. Close the script (Ctrl+w); 6. Open the same script ==> no error; 7. Add the following block comment. ```; /**; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176
https://github.com/qupath/qupath/issues/1176:3172,Integrability,CONTRACT,CONTRACT,3172,"TRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176
https://github.com/qupath/qupath/issues/1176:3955,Integrability,CONTRACT,CONTRACT,3955,"TRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176
https://github.com/qupath/qupath/issues/1176:4738,Integrability,CONTRACT,CONTRACT,4738,"TRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, ; * BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. ; * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, ; * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; ; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ; * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ; * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.; */; ```. 7. Save the script.; 5. Close the script (Ctrl+w); 6. Open the same script ==> the follwing error is thrown. **Expected behavior**; Enable to have an unlimited number of characters inside a block comment. **Screenshots**; ```; ERROR: QuPath exception; java.lang.StackOverflowError: null; at java.base/java.util.regex.Pattern$LazyLoop.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupTail.match(Unknown Source); at java.base/java.util.regex.Pattern$BranchConn.match(Unknown Source); at java.base/java.util.regex.Pattern$CharProperty.match(Unknown Source); at java.base/java.util.regex.Pattern$Branch.match(Unknown Source); at java.base/java.util.regex.Pattern$GroupHead.match(Unknown Source); *****; at java",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1176
https://github.com/qupath/qupath/issues/1177:495,Usability,simpl,simple,495,"## Bug report. **Describe the bug**; When adding images to a project, it's possible to provide a text file using the 'From path list' button. This should contain a list of file paths, and nothing else. Confusingly, *File &rarr; Project... &rarr; Export image list* exists -- but exports Names, IDs and URIs as separate columns. This isn't accepted as an input format. **Expected behavior**; 'From path list' can handle the same format as 'Export image list'. It should also continue to accept a simple path list. Potentially, 'Export image list' could be changed to export in a different form. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.0 and earlier. **Additional context**; See https://forum.image.sc/t/open-image-from-file-list/74711",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1177
https://github.com/qupath/qupath/issues/1178:679,Modifiability,flexible,flexible,679,"## Bug report. **Describe the bug**; QuPath has some very rough code to estimate the type of an image, which is used for commands like cell detection. For many applications, the type doesn't really matter; for example, if QuPath is used with 'normal' photographs then the type should really be 'Other'. Currently, QuPath tends to estimate 'Fluorescence' for RGB images that just happen to be a bit dark. **Expected behavior**; 'Fluorescence' is estimated less often, and 'Other' is the default. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0 (and all previous versions). **Additional context**; The current 'image type' system isn't flexible enough, and needs to be extended / amended in the future anyway.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1178
https://github.com/qupath/qupath/issues/1178:712,Modifiability,extend,extended,712,"## Bug report. **Describe the bug**; QuPath has some very rough code to estimate the type of an image, which is used for commands like cell detection. For many applications, the type doesn't really matter; for example, if QuPath is used with 'normal' photographs then the type should really be 'Other'. Currently, QuPath tends to estimate 'Fluorescence' for RGB images that just happen to be a bit dark. **Expected behavior**; 'Fluorescence' is estimated less often, and 'Other' is the default. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0 (and all previous versions). **Additional context**; The current 'image type' system isn't flexible enough, and needs to be extended / amended in the future anyway.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1178
https://github.com/qupath/qupath/issues/1178:140,Safety,detect,detection,140,"## Bug report. **Describe the bug**; QuPath has some very rough code to estimate the type of an image, which is used for commands like cell detection. For many applications, the type doesn't really matter; for example, if QuPath is used with 'normal' photographs then the type should really be 'Other'. Currently, QuPath tends to estimate 'Fluorescence' for RGB images that just happen to be a bit dark. **Expected behavior**; 'Fluorescence' is estimated less often, and 'Other' is the default. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0 (and all previous versions). **Additional context**; The current 'image type' system isn't flexible enough, and needs to be extended / amended in the future anyway.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1178
https://github.com/qupath/qupath/issues/1180:641,Availability,error,error,641,"Before submitting your bug report, please check the following:. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Building QuPath from source as described below with CUDA GPU support will throw an error, meaning the official 0.4.0 release (built 2022-12-07) cannot run StarDist on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an u",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:1010,Availability,error,error,1010,"Before submitting your bug report, please check the following:. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Building QuPath from source as described below with CUDA GPU support will throw an error, meaning the official 0.4.0 release (built 2022-12-07) cannot run StarDist on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an u",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:1376,Availability,Down,Download,1376,"if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Building QuPath from source as described below with CUDA GPU support will throw an error, meaning the official 0.4.0 release (built 2022-12-07) cannot run StarDist on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:1467,Availability,Down,Download,1467,"es describing the same problem. ## Bug report. **Describe the bug**; Building QuPath from source as described below with CUDA GPU support will throw an error, meaning the official 0.4.0 release (built 2022-12-07) cannot run StarDist on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:1660,Availability,error,error,1660,"st on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEa",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:1785,Availability,ERROR,ERROR,1785,"st on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEa",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:1935,Availability,error,error,1935,e.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.bas,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:2158,Availability,ERROR,ERROR,2158,com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknow,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:3598,Availability,error,error,3598,"path.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**; The script should run without any error, yielding cell detections within the annotation. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0, built from source on 2022-12-07; - StarDist Extension Version: 0.4.0 (reproducible with 0.3.2 as well). **Additional context**; The changelog of 0.4.0 points to two separate issues that were marked as resolved, which could be linked to this issue:; https://github.com/qupath/qupath/issues/841; https://github.com/qupath/qupath-extension-stardist/issues/11. Given that issue #841 was marked as resolved 5 days ago, it could be linked to that. Perhaps there were some changes to the API such that closing of the model should be scripted differently?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:241,Deployability,release,release,241,"Before submitting your bug report, please check the following:. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Building QuPath from source as described below with CUDA GPU support will throw an error, meaning the official 0.4.0 release (built 2022-12-07) cannot run StarDist on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an u",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:437,Deployability,release,release,437,"Before submitting your bug report, please check the following:. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Building QuPath from source as described below with CUDA GPU support will throw an error, meaning the official 0.4.0 release (built 2022-12-07) cannot run StarDist on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an u",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:675,Deployability,release,release,675,"Before submitting your bug report, please check the following:. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Building QuPath from source as described below with CUDA GPU support will throw an error, meaning the official 0.4.0 release (built 2022-12-07) cannot run StarDist on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an u",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:1241,Deployability,Install,Install,1241,"at might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Building QuPath from source as described below with CUDA GPU support will throw an error, meaning the official 0.4.0 release (built 2022-12-07) cannot run StarDist on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:1275,Deployability,release,releases,1275,"e checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Building QuPath from source as described below with CUDA GPU support will throw an error, meaning the official 0.4.0 release (built 2022-12-07) cannot run StarDist on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); q",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:1363,Deployability,release,releases,1363,"/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Building QuPath from source as described below with CUDA GPU support will throw an error, meaning the official 0.4.0 release (built 2022-12-07) cannot run StarDist on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predic",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:2922,Energy Efficiency,Reduce,ReduceOps,2922,"4: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**; The script should run without any error, yielding cell detections within the annotation. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0, built from source on 2022-12-07; - StarDist Extension Version: 0.4.0 (reproducible with 0.3.2 as well). **Additional context**; The changelog of 0.4.0 points to two separate issue",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:2932,Energy Efficiency,Reduce,ReduceTask,2932,"4: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**; The script should run without any error, yielding cell detections within the annotation. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0, built from source on 2022-12-07; - StarDist Extension Version: 0.4.0 (reproducible with 0.3.2 as well). **Additional context**; The changelog of 0.4.0 points to two separate issue",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:2994,Energy Efficiency,Reduce,ReduceOps,2994,"pported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**; The script should run without any error, yielding cell detections within the annotation. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0, built from source on 2022-12-07; - StarDist Extension Version: 0.4.0 (reproducible with 0.3.2 as well). **Additional context**; The changelog of 0.4.0 points to two separate issues that were marked as resolved, which could be linked to this issue:; ht",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:3004,Energy Efficiency,Reduce,ReduceTask,3004,"pported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**; The script should run without any error, yielding cell detections within the annotation. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0, built from source on 2022-12-07; - StarDist Extension Version: 0.4.0 (reproducible with 0.3.2 as well). **Additional context**; The changelog of 0.4.0 points to two separate issues that were marked as resolved, which could be linked to this issue:; ht",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:1666,Integrability,message,message,1666,"st on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEa",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:2862,Integrability,wrap,wrapAndCopyInto,2862,"ncv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**; The script should run without any error, yielding cell detections within the annotation. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0, built from source on 2022-12-07; - StarDist Extension Version: 0.4.0 (reproducible with 0.3.2 as well). **Additional context**;",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:1687,Performance,Perform,Performing,1687,"st on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEa",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:3124,Performance,concurren,concurrent,3124,"on.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**; The script should run without any error, yielding cell detections within the annotation. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0, built from source on 2022-12-07; - StarDist Extension Version: 0.4.0 (reproducible with 0.3.2 as well). **Additional context**; The changelog of 0.4.0 points to two separate issues that were marked as resolved, which could be linked to this issue:; https://github.com/qupath/qupath/issues/841; https://github.com/qupath/qupath-extension-stardist/issues/11. Given that issue #8",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:3194,Performance,concurren,concurrent,3194,".forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**; The script should run without any error, yielding cell detections within the annotation. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0, built from source on 2022-12-07; - StarDist Extension Version: 0.4.0 (reproducible with 0.3.2 as well). **Additional context**; The changelog of 0.4.0 points to two separate issues that were marked as resolved, which could be linked to this issue:; https://github.com/qupath/qupath/issues/841; https://github.com/qupath/qupath-extension-stardist/issues/11. Given that issue #841 was marked as resolved 5 days ago, it could be linked to that. Perh",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:3262,Performance,concurren,concurrent,3262,"on.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**; The script should run without any error, yielding cell detections within the annotation. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0, built from source on 2022-12-07; - StarDist Extension Version: 0.4.0 (reproducible with 0.3.2 as well). **Additional context**; The changelog of 0.4.0 points to two separate issues that were marked as resolved, which could be linked to this issue:; https://github.com/qupath/qupath/issues/841; https://github.com/qupath/qupath-extension-stardist/issues/11. Given that issue #841 was marked as resolved 5 days ago, it could be linked to that. Perhaps there were some changes to the API such that closing of the mode",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:3346,Performance,concurren,concurrent,3346,"path.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**; The script should run without any error, yielding cell detections within the annotation. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0, built from source on 2022-12-07; - StarDist Extension Version: 0.4.0 (reproducible with 0.3.2 as well). **Additional context**; The changelog of 0.4.0 points to two separate issues that were marked as resolved, which could be linked to this issue:; https://github.com/qupath/qupath/issues/841; https://github.com/qupath/qupath-extension-stardist/issues/11. Given that issue #841 was marked as resolved 5 days ago, it could be linked to that. Perhaps there were some changes to the API such that closing of the model should be scripted differently?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:3412,Performance,concurren,concurrent,3412,"path.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**; The script should run without any error, yielding cell detections within the annotation. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0, built from source on 2022-12-07; - StarDist Extension Version: 0.4.0 (reproducible with 0.3.2 as well). **Additional context**; The changelog of 0.4.0 points to two separate issues that were marked as resolved, which could be linked to this issue:; https://github.com/qupath/qupath/issues/841; https://github.com/qupath/qupath-extension-stardist/issues/11. Given that issue #841 was marked as resolved 5 days ago, it could be linked to that. Perhaps there were some changes to the API such that closing of the model should be scripted differently?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:3483,Performance,concurren,concurrent,3483,"path.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**; The script should run without any error, yielding cell detections within the annotation. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0, built from source on 2022-12-07; - StarDist Extension Version: 0.4.0 (reproducible with 0.3.2 as well). **Additional context**; The changelog of 0.4.0 points to two separate issues that were marked as resolved, which could be linked to this issue:; https://github.com/qupath/qupath/issues/841; https://github.com/qupath/qupath-extension-stardist/issues/11. Given that issue #841 was marked as resolved 5 days ago, it could be linked to that. Perhaps there were some changes to the API such that closing of the model should be scripted differently?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:1698,Safety,detect,detection,1698,"st on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEa",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:2270,Safety,predict,predict,2270,ases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJo,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:2345,Safety,predict,predict,2345,stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurre,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:2470,Safety,detect,detectObjectsForTile,2470,ing script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.con,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:2552,Safety,detect,detectObjects,2552,main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an unsupported toolchain. in function 'cv::dnn::cuda4dnn::csl::ManagedPtr<float>::ManagedPtr'; in GPU_Multimodal StarDist Segmentation.groovy at line number -2. ERROR: org.bytedeco.opencv.opencv_dnn.Net.forward(Native Method); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:718); qupath.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:3619,Safety,detect,detections,3619,"path.opencv.dnn.OpenCVDnn$OpenCVNetFunction.predict(OpenCVDnn.java:732); qupath.opencv.dnn.DnnModel.convertAndPredict(DnnModel.java:100); qupath.ext.stardist.StarDist2D.detectObjectsForTile(StarDist2D.java:1249); qupath.ext.stardist.StarDist2D.lambda$detectObjects$7(StarDist2D.java:934); java.base/java.util.stream.ReferencePipeline$7$1.accept(Unknown Source); java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(Unknown Source); java.base/java.util.stream.AbstractPipeline.copyInto(Unknown Source); java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.ReduceOps$ReduceTask.doLeaf(Unknown Source); java.base/java.util.stream.AbstractTask.compute(Unknown Source); java.base/java.util.concurrent.CountedCompleter.exec(Unknown Source); java.base/java.util.concurrent.ForkJoinTask.doExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.scan(Unknown Source); java.base/java.util.concurrent.ForkJoinPool.runWorker(Unknown Source); java.base/java.util.concurrent.ForkJoinWorkerThread.run(Unknown Source). ```. **Expected behavior**; The script should run without any error, yielding cell detections within the annotation. **Desktop (please complete the following information):**; - OS: Windows 10; - QuPath Version: 0.4.0, built from source on 2022-12-07; - StarDist Extension Version: 0.4.0 (reproducible with 0.3.2 as well). **Additional context**; The changelog of 0.4.0 points to two separate issues that were marked as resolved, which could be linked to this issue:; https://github.com/qupath/qupath/issues/841; https://github.com/qupath/qupath-extension-stardist/issues/11. Given that issue #841 was marked as resolved 5 days ago, it could be linked to that. Perhaps there were some changes to the API such that closing of the model should be scripted differently?",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1180:731,Testability,Test,Tested,731,"Before submitting your bug report, please check the following:. * [X] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [X] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [X] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [X] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; Building QuPath from source as described below with CUDA GPU support will throw an error, meaning the official 0.4.0 release (built 2022-12-07) cannot run StarDist on GPUs. Tested with RTX 3090 and GTX 1660 Ti GPUs. I have a version of QuPath built on 2022-11-21 which has no problem running StarDist on the GPU, so it's likely tied to any commits between this period. Issue taken from forum post: https://forum.image.sc/t/stardist-gpu-support-unknown-error/74779. **To Reproduce**; Steps to reproduce the behavior:; 1. Build QuPath from source using the following command:; ```; git clone https://github.com/qupath/qupath; cd qupath; ./gradlew clean jpackage -Pcuda-redist; ```; 2. Install either the 0.3.2 or 0.4.0 releases of the StarDist extension: https://github.com/qupath/qupath-extension-stardist/releases; 3. Download pretrained models in .pb format; 4. Draw an annotation on a brightfield image; 5. Download the following script: https://github.com/MarkZaidi/Universal-StarDist-for-QuPath/blob/main/GPU_Multimodal%20StarDist%20Segmentation.groovy; 6. Run the script; 7. Observe the following error message:; ```; INFO: Performing detection on Brightfield image using single-channel trained model; INFO: [Annotation]; ERROR: OpenCV(4.6.0) D:\a\javacpp-presets\javacpp-presets\opencv\cppbuild\windows-x86_64-gpu\opencv-4.6.0\modules\dnn\src\cuda4dnn\csl\memory.hpp:54: error: (-217:Gpu API call) the provided PTX was compiled with an u",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1180
https://github.com/qupath/qupath/issues/1182:116,Availability,ERROR,ERROR,116,## Bug report. **Describe the bug**; Concurrent modification exception has been spotted with the stack trace:. ```; ERROR: QuPath exception; java.util.ConcurrentModificationException: null; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(Unknown Source); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(Unknown Source); at qupath.lib.objects.PathObject.nDescendants(PathObject.java:528); at qupath.lib.objects.PathObjectTools.countDescendants(PathObjectTools.java:204); at qupath.lib.objects.PathObject.objectCountPostfix(PathObject.java:238); at qupath.lib.objects.PathObject.toString(PathObject.java:276); at qupath.lib.gui.tools.PathObjectLabels$PathObjectMiniPane.setPathObject(PathObjectLabels.java:247); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:151); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:138); at javafx.scene.control.ListCell.updateItem(ListCell.java:485); at javafx.scene.control.ListCell.lambda$new$2(ListCell.java:168); at javafx.collections.WeakListChangeListener.onChanged(WeakListChangeListener.java:88); at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329); at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73); at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239); at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482); at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541); at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211); at javafx.collections.ModifiableObservableListBase.setAll(ModifiableObservableListBase.java:98); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:436); at qupath.lib.gui.panes.AnnotationPane.lambda$hierarchyChanged$9(AnnotationPane.java:404); at com.sun.javafx.application.PlatformImpl.lambda,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1182
https://github.com/qupath/qupath/issues/1182:2532,Availability,error,error-from-roitools-subtract-in-qupath-,2532,a:151); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:138); at javafx.scene.control.ListCell.updateItem(ListCell.java:485); at javafx.scene.control.ListCell.lambda$new$2(ListCell.java:168); at javafx.collections.WeakListChangeListener.onChanged(WeakListChangeListener.java:88); at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329); at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73); at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239); at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482); at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541); at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211); at javafx.collections.ModifiableObservableListBase.setAll(ModifiableObservableListBase.java:98); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:436); at qupath.lib.gui.panes.AnnotationPane.lambda$hierarchyChanged$9(AnnotationPane.java:404); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:457); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:456); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; See https://forum.image.sc/t/error-from-roitools-subtract-in-qupath-v0-4-0/74837. **Expected behavior**; Updating the list cell shouldn't throw any exception. **Desktop (please complete the following information):**; - OS: All (presumably); - QuPath Version: 0.4.0. **Additional context**; I haven't replicated the problem yet.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1182
https://github.com/qupath/qupath/issues/1182:799,Deployability,update,updateItem,799,## Bug report. **Describe the bug**; Concurrent modification exception has been spotted with the stack trace:. ```; ERROR: QuPath exception; java.util.ConcurrentModificationException: null; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(Unknown Source); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(Unknown Source); at qupath.lib.objects.PathObject.nDescendants(PathObject.java:528); at qupath.lib.objects.PathObjectTools.countDescendants(PathObjectTools.java:204); at qupath.lib.objects.PathObject.objectCountPostfix(PathObject.java:238); at qupath.lib.objects.PathObject.toString(PathObject.java:276); at qupath.lib.gui.tools.PathObjectLabels$PathObjectMiniPane.setPathObject(PathObjectLabels.java:247); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:151); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:138); at javafx.scene.control.ListCell.updateItem(ListCell.java:485); at javafx.scene.control.ListCell.lambda$new$2(ListCell.java:168); at javafx.collections.WeakListChangeListener.onChanged(WeakListChangeListener.java:88); at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329); at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73); at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239); at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482); at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541); at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211); at javafx.collections.ModifiableObservableListBase.setAll(ModifiableObservableListBase.java:98); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:436); at qupath.lib.gui.panes.AnnotationPane.lambda$hierarchyChanged$9(AnnotationPane.java:404); at com.sun.javafx.application.PlatformImpl.lambda,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1182
https://github.com/qupath/qupath/issues/1182:898,Deployability,update,updateItem,898,## Bug report. **Describe the bug**; Concurrent modification exception has been spotted with the stack trace:. ```; ERROR: QuPath exception; java.util.ConcurrentModificationException: null; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(Unknown Source); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(Unknown Source); at qupath.lib.objects.PathObject.nDescendants(PathObject.java:528); at qupath.lib.objects.PathObjectTools.countDescendants(PathObjectTools.java:204); at qupath.lib.objects.PathObject.objectCountPostfix(PathObject.java:238); at qupath.lib.objects.PathObject.toString(PathObject.java:276); at qupath.lib.gui.tools.PathObjectLabels$PathObjectMiniPane.setPathObject(PathObjectLabels.java:247); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:151); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:138); at javafx.scene.control.ListCell.updateItem(ListCell.java:485); at javafx.scene.control.ListCell.lambda$new$2(ListCell.java:168); at javafx.collections.WeakListChangeListener.onChanged(WeakListChangeListener.java:88); at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329); at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73); at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239); at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482); at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541); at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211); at javafx.collections.ModifiableObservableListBase.setAll(ModifiableObservableListBase.java:98); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:436); at qupath.lib.gui.panes.AnnotationPane.lambda$hierarchyChanged$9(AnnotationPane.java:404); at com.sun.javafx.application.PlatformImpl.lambda,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1182
https://github.com/qupath/qupath/issues/1182:970,Deployability,update,updateItem,970,## Bug report. **Describe the bug**; Concurrent modification exception has been spotted with the stack trace:. ```; ERROR: QuPath exception; java.util.ConcurrentModificationException: null; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(Unknown Source); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(Unknown Source); at qupath.lib.objects.PathObject.nDescendants(PathObject.java:528); at qupath.lib.objects.PathObjectTools.countDescendants(PathObjectTools.java:204); at qupath.lib.objects.PathObject.objectCountPostfix(PathObject.java:238); at qupath.lib.objects.PathObject.toString(PathObject.java:276); at qupath.lib.gui.tools.PathObjectLabels$PathObjectMiniPane.setPathObject(PathObjectLabels.java:247); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:151); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:138); at javafx.scene.control.ListCell.updateItem(ListCell.java:485); at javafx.scene.control.ListCell.lambda$new$2(ListCell.java:168); at javafx.collections.WeakListChangeListener.onChanged(WeakListChangeListener.java:88); at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329); at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73); at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239); at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482); at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541); at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211); at javafx.collections.ModifiableObservableListBase.setAll(ModifiableObservableListBase.java:98); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:436); at qupath.lib.gui.panes.AnnotationPane.lambda$hierarchyChanged$9(AnnotationPane.java:404); at com.sun.javafx.application.PlatformImpl.lambda,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1182
https://github.com/qupath/qupath/issues/1182:37,Performance,Concurren,Concurrent,37,## Bug report. **Describe the bug**; Concurrent modification exception has been spotted with the stack trace:. ```; ERROR: QuPath exception; java.util.ConcurrentModificationException: null; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(Unknown Source); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(Unknown Source); at qupath.lib.objects.PathObject.nDescendants(PathObject.java:528); at qupath.lib.objects.PathObjectTools.countDescendants(PathObjectTools.java:204); at qupath.lib.objects.PathObject.objectCountPostfix(PathObject.java:238); at qupath.lib.objects.PathObject.toString(PathObject.java:276); at qupath.lib.gui.tools.PathObjectLabels$PathObjectMiniPane.setPathObject(PathObjectLabels.java:247); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:151); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:138); at javafx.scene.control.ListCell.updateItem(ListCell.java:485); at javafx.scene.control.ListCell.lambda$new$2(ListCell.java:168); at javafx.collections.WeakListChangeListener.onChanged(WeakListChangeListener.java:88); at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329); at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73); at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239); at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482); at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541); at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211); at javafx.collections.ModifiableObservableListBase.setAll(ModifiableObservableListBase.java:98); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:436); at qupath.lib.gui.panes.AnnotationPane.lambda$hierarchyChanged$9(AnnotationPane.java:404); at com.sun.javafx.application.PlatformImpl.lambda,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1182
https://github.com/qupath/qupath/issues/1182:151,Performance,Concurren,ConcurrentModificationException,151,## Bug report. **Describe the bug**; Concurrent modification exception has been spotted with the stack trace:. ```; ERROR: QuPath exception; java.util.ConcurrentModificationException: null; at java.base/java.util.LinkedHashMap$LinkedHashIterator.nextNode(Unknown Source); at java.base/java.util.LinkedHashMap$LinkedKeyIterator.next(Unknown Source); at qupath.lib.objects.PathObject.nDescendants(PathObject.java:528); at qupath.lib.objects.PathObjectTools.countDescendants(PathObjectTools.java:204); at qupath.lib.objects.PathObject.objectCountPostfix(PathObject.java:238); at qupath.lib.objects.PathObject.toString(PathObject.java:276); at qupath.lib.gui.tools.PathObjectLabels$PathObjectMiniPane.setPathObject(PathObjectLabels.java:247); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:151); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:138); at javafx.scene.control.ListCell.updateItem(ListCell.java:485); at javafx.scene.control.ListCell.lambda$new$2(ListCell.java:168); at javafx.collections.WeakListChangeListener.onChanged(WeakListChangeListener.java:88); at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329); at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73); at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239); at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482); at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541); at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211); at javafx.collections.ModifiableObservableListBase.setAll(ModifiableObservableListBase.java:98); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:436); at qupath.lib.gui.panes.AnnotationPane.lambda$hierarchyChanged$9(AnnotationPane.java:404); at com.sun.javafx.application.PlatformImpl.lambda,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1182
https://github.com/qupath/qupath/issues/1182:2056,Security,secur,security,2056,a:151); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:138); at javafx.scene.control.ListCell.updateItem(ListCell.java:485); at javafx.scene.control.ListCell.lambda$new$2(ListCell.java:168); at javafx.collections.WeakListChangeListener.onChanged(WeakListChangeListener.java:88); at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329); at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73); at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239); at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482); at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541); at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211); at javafx.collections.ModifiableObservableListBase.setAll(ModifiableObservableListBase.java:98); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:436); at qupath.lib.gui.panes.AnnotationPane.lambda$hierarchyChanged$9(AnnotationPane.java:404); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:457); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:456); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; See https://forum.image.sc/t/error-from-roitools-subtract-in-qupath-v0-4-0/74837. **Expected behavior**; Updating the list cell shouldn't throw any exception. **Desktop (please complete the following information):**; - OS: All (presumably); - QuPath Version: 0.4.0. **Additional context**; I haven't replicated the problem yet.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1182
https://github.com/qupath/qupath/issues/1182:2065,Security,Access,AccessController,2065,a:151); at qupath.lib.gui.tools.PathObjectLabels$PathObjectListCell.updateItem(PathObjectLabels.java:138); at javafx.scene.control.ListCell.updateItem(ListCell.java:485); at javafx.scene.control.ListCell.lambda$new$2(ListCell.java:168); at javafx.collections.WeakListChangeListener.onChanged(WeakListChangeListener.java:88); at com.sun.javafx.collections.ListListenerHelper$Generic.fireValueChangedEvent(ListListenerHelper.java:329); at com.sun.javafx.collections.ListListenerHelper.fireValueChangedEvent(ListListenerHelper.java:73); at javafx.collections.ObservableListBase.fireChange(ObservableListBase.java:239); at javafx.collections.ListChangeBuilder.commit(ListChangeBuilder.java:482); at javafx.collections.ListChangeBuilder.endChange(ListChangeBuilder.java:541); at javafx.collections.ObservableListBase.endChange(ObservableListBase.java:211); at javafx.collections.ModifiableObservableListBase.setAll(ModifiableObservableListBase.java:98); at qupath.lib.gui.panes.AnnotationPane.hierarchyChanged(AnnotationPane.java:436); at qupath.lib.gui.panes.AnnotationPane.lambda$hierarchyChanged$9(AnnotationPane.java:404); at com.sun.javafx.application.PlatformImpl.lambda$runLater$10(PlatformImpl.java:457); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.application.PlatformImpl.lambda$runLater$11(PlatformImpl.java:456); at com.sun.glass.ui.InvokeLaterDispatcher$Future.run(InvokeLaterDispatcher.java:96); at com.sun.glass.ui.win.WinApplication._runLoop(Native Method); at com.sun.glass.ui.win.WinApplication.lambda$runLoop$3(WinApplication.java:184); at java.base/java.lang.Thread.run(Unknown Source); ```. **To Reproduce**; See https://forum.image.sc/t/error-from-roitools-subtract-in-qupath-v0-4-0/74837. **Expected behavior**; Updating the list cell shouldn't throw any exception. **Desktop (please complete the following information):**; - OS: All (presumably); - QuPath Version: 0.4.0. **Additional context**; I haven't replicated the problem yet.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1182
https://github.com/qupath/qupath/issues/1184:325,Deployability,update,update,325,"## Bug report. **Describe the bug**; Really this bug so specific it may be too much effort to fix in the meantime, but I thought I'd better document it and what I've discovered about it. When I open a project, QuPath fails to show the project entries in the sidebar (under specific circumstances - see below) until I somehow update the UI state: resize the window, click one of the toolbar buttons or (weirdly) move my mouse from within the viewer slowly over the red viewer border. **To Reproduce**; Steps to reproduce the behavior:; 1. Have enough extensions (or whatever) that enough buttons have been added to the toolbar to cause it to overflow (show the two little expansion arrows) when QuPath is first opened. In my case, I had added a button with ""Convert"" on it.; 2. Open QuPath; 3. **Don't** resize the window; 4. Open a project; 5. The project entries don't show up unless you perform one of the actions mentioned above. **Expected behavior**; Entreis should appear immediately. **Desktop (please complete the following information):**; - OS: macOS (Apple Silicon); - QuPath Version: 0.4.0. **Additional context**; * Git bisect shows that the bug was introduced by commit 56243921831ca8d2db2507ec3604735dd4b4a608, but only because it added a ""Show names"" button to the toolbar.; * v0.3.2 doesn't seem to have the issue, even if I add a ""Show names"" button. **However**, (and probably the cause of the problem) I can't compile 0.3.2 for ARM, so it's running on x86. I also can't compile the previously mentioned commit on x86, only ARM, so I can't test if it was simply this difference. Also, my x86 SDK is temurin 16 and my ARM SDK is temurin 17.; * If I go to qupath-gui-fx/src/main/java/qupath/lib/gui/panes/ProjectBrowser.java, the root TreeItem appears to be added but the rest of the items aren't, until I cause a state change.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1184
https://github.com/qupath/qupath/issues/1184:889,Performance,perform,perform,889,"## Bug report. **Describe the bug**; Really this bug so specific it may be too much effort to fix in the meantime, but I thought I'd better document it and what I've discovered about it. When I open a project, QuPath fails to show the project entries in the sidebar (under specific circumstances - see below) until I somehow update the UI state: resize the window, click one of the toolbar buttons or (weirdly) move my mouse from within the viewer slowly over the red viewer border. **To Reproduce**; Steps to reproduce the behavior:; 1. Have enough extensions (or whatever) that enough buttons have been added to the toolbar to cause it to overflow (show the two little expansion arrows) when QuPath is first opened. In my case, I had added a button with ""Convert"" on it.; 2. Open QuPath; 3. **Don't** resize the window; 4. Open a project; 5. The project entries don't show up unless you perform one of the actions mentioned above. **Expected behavior**; Entreis should appear immediately. **Desktop (please complete the following information):**; - OS: macOS (Apple Silicon); - QuPath Version: 0.4.0. **Additional context**; * Git bisect shows that the bug was introduced by commit 56243921831ca8d2db2507ec3604735dd4b4a608, but only because it added a ""Show names"" button to the toolbar.; * v0.3.2 doesn't seem to have the issue, even if I add a ""Show names"" button. **However**, (and probably the cause of the problem) I can't compile 0.3.2 for ARM, so it's running on x86. I also can't compile the previously mentioned commit on x86, only ARM, so I can't test if it was simply this difference. Also, my x86 SDK is temurin 16 and my ARM SDK is temurin 17.; * If I go to qupath-gui-fx/src/main/java/qupath/lib/gui/panes/ProjectBrowser.java, the root TreeItem appears to be added but the rest of the items aren't, until I cause a state change.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1184
https://github.com/qupath/qupath/issues/1184:1559,Testability,test,test,1559,"## Bug report. **Describe the bug**; Really this bug so specific it may be too much effort to fix in the meantime, but I thought I'd better document it and what I've discovered about it. When I open a project, QuPath fails to show the project entries in the sidebar (under specific circumstances - see below) until I somehow update the UI state: resize the window, click one of the toolbar buttons or (weirdly) move my mouse from within the viewer slowly over the red viewer border. **To Reproduce**; Steps to reproduce the behavior:; 1. Have enough extensions (or whatever) that enough buttons have been added to the toolbar to cause it to overflow (show the two little expansion arrows) when QuPath is first opened. In my case, I had added a button with ""Convert"" on it.; 2. Open QuPath; 3. **Don't** resize the window; 4. Open a project; 5. The project entries don't show up unless you perform one of the actions mentioned above. **Expected behavior**; Entreis should appear immediately. **Desktop (please complete the following information):**; - OS: macOS (Apple Silicon); - QuPath Version: 0.4.0. **Additional context**; * Git bisect shows that the bug was introduced by commit 56243921831ca8d2db2507ec3604735dd4b4a608, but only because it added a ""Show names"" button to the toolbar.; * v0.3.2 doesn't seem to have the issue, even if I add a ""Show names"" button. **However**, (and probably the cause of the problem) I can't compile 0.3.2 for ARM, so it's running on x86. I also can't compile the previously mentioned commit on x86, only ARM, so I can't test if it was simply this difference. Also, my x86 SDK is temurin 16 and my ARM SDK is temurin 17.; * If I go to qupath-gui-fx/src/main/java/qupath/lib/gui/panes/ProjectBrowser.java, the root TreeItem appears to be added but the rest of the items aren't, until I cause a state change.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1184
https://github.com/qupath/qupath/issues/1184:1574,Usability,simpl,simply,1574,"## Bug report. **Describe the bug**; Really this bug so specific it may be too much effort to fix in the meantime, but I thought I'd better document it and what I've discovered about it. When I open a project, QuPath fails to show the project entries in the sidebar (under specific circumstances - see below) until I somehow update the UI state: resize the window, click one of the toolbar buttons or (weirdly) move my mouse from within the viewer slowly over the red viewer border. **To Reproduce**; Steps to reproduce the behavior:; 1. Have enough extensions (or whatever) that enough buttons have been added to the toolbar to cause it to overflow (show the two little expansion arrows) when QuPath is first opened. In my case, I had added a button with ""Convert"" on it.; 2. Open QuPath; 3. **Don't** resize the window; 4. Open a project; 5. The project entries don't show up unless you perform one of the actions mentioned above. **Expected behavior**; Entreis should appear immediately. **Desktop (please complete the following information):**; - OS: macOS (Apple Silicon); - QuPath Version: 0.4.0. **Additional context**; * Git bisect shows that the bug was introduced by commit 56243921831ca8d2db2507ec3604735dd4b4a608, but only because it added a ""Show names"" button to the toolbar.; * v0.3.2 doesn't seem to have the issue, even if I add a ""Show names"" button. **However**, (and probably the cause of the problem) I can't compile 0.3.2 for ARM, so it's running on x86. I also can't compile the previously mentioned commit on x86, only ARM, so I can't test if it was simply this difference. Also, my x86 SDK is temurin 16 and my ARM SDK is temurin 17.; * If I go to qupath-gui-fx/src/main/java/qupath/lib/gui/panes/ProjectBrowser.java, the root TreeItem appears to be added but the rest of the items aren't, until I cause a state change.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1184
https://github.com/qupath/qupath/pull/1186:373,Integrability,depend,depending,373,"Fixes https://github.com/qupath/qupath/issues/1184. To replicate, I used; ```java; 		nodes.add(new Separator(Orientation.VERTICAL));; 		for (int i = 0; i < 10; i++); 			nodes.add(ActionTools.createButton(ActionTools.createAction(() -> {}, ""Convert "" + i), false));; ```; when adding nodes to the toolbar in `ToolBarComponent`, but the exact number may need to be different depending upon screen resolution. Issue resolves magically when layout requested on parent node.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1186
https://github.com/qupath/qupath/issues/1188:469,Energy Efficiency,Reduce,Reduce,469,"## Bug report. **Describe the bug**; The script editor in v0.4.0 can automatically close quotes, to help ensure strings are valid. This is mostly helpful, but can sometimes be inconvenient if the closing quote is added when it isn't needed. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a script editor and type `forgot to start""`; 2. Move the caret to the start of the text; 3. Type `""` and note that you get `""""forgot to start""`. **Expected behavior**; Reduce the enthusiasm of the smart quotes to make them smarter. One simple strategy that I think should help is to only add a closing quote if the preceding and following characters are either whitespace or the end of the text itself. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1188
https://github.com/qupath/qupath/issues/1188:537,Usability,simpl,simple,537,"## Bug report. **Describe the bug**; The script editor in v0.4.0 can automatically close quotes, to help ensure strings are valid. This is mostly helpful, but can sometimes be inconvenient if the closing quote is added when it isn't needed. **To Reproduce**; Steps to reproduce the behavior:; 1. Open a script editor and type `forgot to start""`; 2. Move the caret to the start of the text; 3. Type `""` and note that you get `""""forgot to start""`. **Expected behavior**; Reduce the enthusiasm of the smart quotes to make them smarter. One simple strategy that I think should help is to only add a closing quote if the preceding and following characters are either whitespace or the end of the text itself. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1188
https://github.com/qupath/qupath/issues/1191:223,Availability,error,error-on-launching-qupath-,223,"**Describe the bug**; The automated update check happens in a background thread, but then tries to update the UI. This can cause an exception when there's something to update. **To Reproduce**; See https://forum.image.sc/t/error-on-launching-qupath-v0-4-0/75116. Depends upon an update to something being available - manually checking for updates probably won't show this problem. > Edit: Manually checking *does* have the same problem... **Expected behavior**; Update check succeeds, or fails quietly. Because it acts on the right thread. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0. **Additional context**; This is potentially horrible, since when QuPath is updated everyone who has it installed will see the exception... so better to fix it before we have even more downloads :(",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1191
https://github.com/qupath/qupath/issues/1191:305,Availability,avail,available,305,"**Describe the bug**; The automated update check happens in a background thread, but then tries to update the UI. This can cause an exception when there's something to update. **To Reproduce**; See https://forum.image.sc/t/error-on-launching-qupath-v0-4-0/75116. Depends upon an update to something being available - manually checking for updates probably won't show this problem. > Edit: Manually checking *does* have the same problem... **Expected behavior**; Update check succeeds, or fails quietly. Because it acts on the right thread. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0. **Additional context**; This is potentially horrible, since when QuPath is updated everyone who has it installed will see the exception... so better to fix it before we have even more downloads :(",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1191
https://github.com/qupath/qupath/issues/1191:818,Availability,down,downloads,818,"**Describe the bug**; The automated update check happens in a background thread, but then tries to update the UI. This can cause an exception when there's something to update. **To Reproduce**; See https://forum.image.sc/t/error-on-launching-qupath-v0-4-0/75116. Depends upon an update to something being available - manually checking for updates probably won't show this problem. > Edit: Manually checking *does* have the same problem... **Expected behavior**; Update check succeeds, or fails quietly. Because it acts on the right thread. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0. **Additional context**; This is potentially horrible, since when QuPath is updated everyone who has it installed will see the exception... so better to fix it before we have even more downloads :(",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1191
https://github.com/qupath/qupath/issues/1191:36,Deployability,update,update,36,"**Describe the bug**; The automated update check happens in a background thread, but then tries to update the UI. This can cause an exception when there's something to update. **To Reproduce**; See https://forum.image.sc/t/error-on-launching-qupath-v0-4-0/75116. Depends upon an update to something being available - manually checking for updates probably won't show this problem. > Edit: Manually checking *does* have the same problem... **Expected behavior**; Update check succeeds, or fails quietly. Because it acts on the right thread. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0. **Additional context**; This is potentially horrible, since when QuPath is updated everyone who has it installed will see the exception... so better to fix it before we have even more downloads :(",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1191
https://github.com/qupath/qupath/issues/1191:99,Deployability,update,update,99,"**Describe the bug**; The automated update check happens in a background thread, but then tries to update the UI. This can cause an exception when there's something to update. **To Reproduce**; See https://forum.image.sc/t/error-on-launching-qupath-v0-4-0/75116. Depends upon an update to something being available - manually checking for updates probably won't show this problem. > Edit: Manually checking *does* have the same problem... **Expected behavior**; Update check succeeds, or fails quietly. Because it acts on the right thread. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0. **Additional context**; This is potentially horrible, since when QuPath is updated everyone who has it installed will see the exception... so better to fix it before we have even more downloads :(",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1191
https://github.com/qupath/qupath/issues/1191:168,Deployability,update,update,168,"**Describe the bug**; The automated update check happens in a background thread, but then tries to update the UI. This can cause an exception when there's something to update. **To Reproduce**; See https://forum.image.sc/t/error-on-launching-qupath-v0-4-0/75116. Depends upon an update to something being available - manually checking for updates probably won't show this problem. > Edit: Manually checking *does* have the same problem... **Expected behavior**; Update check succeeds, or fails quietly. Because it acts on the right thread. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0. **Additional context**; This is potentially horrible, since when QuPath is updated everyone who has it installed will see the exception... so better to fix it before we have even more downloads :(",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1191
https://github.com/qupath/qupath/issues/1191:279,Deployability,update,update,279,"**Describe the bug**; The automated update check happens in a background thread, but then tries to update the UI. This can cause an exception when there's something to update. **To Reproduce**; See https://forum.image.sc/t/error-on-launching-qupath-v0-4-0/75116. Depends upon an update to something being available - manually checking for updates probably won't show this problem. > Edit: Manually checking *does* have the same problem... **Expected behavior**; Update check succeeds, or fails quietly. Because it acts on the right thread. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0. **Additional context**; This is potentially horrible, since when QuPath is updated everyone who has it installed will see the exception... so better to fix it before we have even more downloads :(",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1191
https://github.com/qupath/qupath/issues/1191:339,Deployability,update,updates,339,"**Describe the bug**; The automated update check happens in a background thread, but then tries to update the UI. This can cause an exception when there's something to update. **To Reproduce**; See https://forum.image.sc/t/error-on-launching-qupath-v0-4-0/75116. Depends upon an update to something being available - manually checking for updates probably won't show this problem. > Edit: Manually checking *does* have the same problem... **Expected behavior**; Update check succeeds, or fails quietly. Because it acts on the right thread. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0. **Additional context**; This is potentially horrible, since when QuPath is updated everyone who has it installed will see the exception... so better to fix it before we have even more downloads :(",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1191
https://github.com/qupath/qupath/issues/1191:462,Deployability,Update,Update,462,"**Describe the bug**; The automated update check happens in a background thread, but then tries to update the UI. This can cause an exception when there's something to update. **To Reproduce**; See https://forum.image.sc/t/error-on-launching-qupath-v0-4-0/75116. Depends upon an update to something being available - manually checking for updates probably won't show this problem. > Edit: Manually checking *does* have the same problem... **Expected behavior**; Update check succeeds, or fails quietly. Because it acts on the right thread. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0. **Additional context**; This is potentially horrible, since when QuPath is updated everyone who has it installed will see the exception... so better to fix it before we have even more downloads :(",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1191
https://github.com/qupath/qupath/issues/1191:709,Deployability,update,updated,709,"**Describe the bug**; The automated update check happens in a background thread, but then tries to update the UI. This can cause an exception when there's something to update. **To Reproduce**; See https://forum.image.sc/t/error-on-launching-qupath-v0-4-0/75116. Depends upon an update to something being available - manually checking for updates probably won't show this problem. > Edit: Manually checking *does* have the same problem... **Expected behavior**; Update check succeeds, or fails quietly. Because it acts on the right thread. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0. **Additional context**; This is potentially horrible, since when QuPath is updated everyone who has it installed will see the exception... so better to fix it before we have even more downloads :(",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1191
https://github.com/qupath/qupath/issues/1191:737,Deployability,install,installed,737,"**Describe the bug**; The automated update check happens in a background thread, but then tries to update the UI. This can cause an exception when there's something to update. **To Reproduce**; See https://forum.image.sc/t/error-on-launching-qupath-v0-4-0/75116. Depends upon an update to something being available - manually checking for updates probably won't show this problem. > Edit: Manually checking *does* have the same problem... **Expected behavior**; Update check succeeds, or fails quietly. Because it acts on the right thread. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0. **Additional context**; This is potentially horrible, since when QuPath is updated everyone who has it installed will see the exception... so better to fix it before we have even more downloads :(",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1191
https://github.com/qupath/qupath/issues/1191:263,Integrability,Depend,Depends,263,"**Describe the bug**; The automated update check happens in a background thread, but then tries to update the UI. This can cause an exception when there's something to update. **To Reproduce**; See https://forum.image.sc/t/error-on-launching-qupath-v0-4-0/75116. Depends upon an update to something being available - manually checking for updates probably won't show this problem. > Edit: Manually checking *does* have the same problem... **Expected behavior**; Update check succeeds, or fails quietly. Because it acts on the right thread. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.0. **Additional context**; This is potentially horrible, since when QuPath is updated everyone who has it installed will see the exception... so better to fix it before we have even more downloads :(",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1191
https://github.com/qupath/qupath/pull/1194:85,Deployability,update,update,85,Fixes; * https://github.com/qupath/qupath/issues/1191. Also extend the delay between update checks to at least 12 hours.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1194
https://github.com/qupath/qupath/pull/1194:60,Modifiability,extend,extend,60,Fixes; * https://github.com/qupath/qupath/issues/1191. Also extend the delay between update checks to at least 12 hours.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1194
https://github.com/qupath/qupath/pull/1195:151,Testability,test,testing,151,Fixes ; * https://github.com/qupath/qupath/issues/1176. Also fixes position of caret when adding a block comment with smart editing. (Needs a bit more testing before merge to look for awkward cases where syntax highlighting approach may fail),MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1195
https://github.com/qupath/qupath/issues/1199:116,Availability,down,downloaded,116,"I have installed the new version of QuPath and after that the app doesn't load any longer on my Mac.; The version I downloaded was QuPath-0.4.1-Mac.pkg. <img width=""263"" alt=""Screenshot 2022-12-23 at 11 18 39"" src=""https://user-images.githubusercontent.com/11831210/209308931-805aca40-25d6-4ceb-b659-23a801eb6167.png"">. MacOS version: 13.1 (22C65); MacBook Pro 13-inch, 2020.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1199
https://github.com/qupath/qupath/issues/1199:7,Deployability,install,installed,7,"I have installed the new version of QuPath and after that the app doesn't load any longer on my Mac.; The version I downloaded was QuPath-0.4.1-Mac.pkg. <img width=""263"" alt=""Screenshot 2022-12-23 at 11 18 39"" src=""https://user-images.githubusercontent.com/11831210/209308931-805aca40-25d6-4ceb-b659-23a801eb6167.png"">. MacOS version: 13.1 (22C65); MacBook Pro 13-inch, 2020.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1199
https://github.com/qupath/qupath/issues/1199:74,Performance,load,load,74,"I have installed the new version of QuPath and after that the app doesn't load any longer on my Mac.; The version I downloaded was QuPath-0.4.1-Mac.pkg. <img width=""263"" alt=""Screenshot 2022-12-23 at 11 18 39"" src=""https://user-images.githubusercontent.com/11831210/209308931-805aca40-25d6-4ceb-b659-23a801eb6167.png"">. MacOS version: 13.1 (22C65); MacBook Pro 13-inch, 2020.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1199
https://github.com/qupath/qupath/issues/1200:1031,Availability,down,down,1031,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to '...'; 2. Click on '....'; 3. Scroll down to '....'; 4. See error. **Expected behavior**; A clear and concise description of what you expected to happen. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...]; - QuPath Version: [e.g. 0.2.2]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1200
https://github.com/qupath/qupath/issues/1200:1054,Availability,error,error,1054,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to '...'; 2. Click on '....'; 3. Scroll down to '....'; 4. See error. **Expected behavior**; A clear and concise description of what you expected to happen. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...]; - QuPath Version: [e.g. 0.2.2]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1200
https://github.com/qupath/qupath/issues/1200:564,Deployability,release,release,564,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to '...'; 2. Click on '....'; 3. Scroll down to '....'; 4. See error. **Expected behavior**; A clear and concise description of what you expected to happen. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...]; - QuPath Version: [e.g. 0.2.2]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1200
https://github.com/qupath/qupath/issues/1200:760,Deployability,release,release,760,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to '...'; 2. Click on '....'; 3. Scroll down to '....'; 4. See error. **Expected behavior**; A clear and concise description of what you expected to happen. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...]; - QuPath Version: [e.g. 0.2.2]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1200
https://github.com/qupath/qupath/issues/1200:883,Usability,clear,clear,883,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to '...'; 2. Click on '....'; 3. Scroll down to '....'; 4. See error. **Expected behavior**; A clear and concise description of what you expected to happen. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...]; - QuPath Version: [e.g. 0.2.2]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1200
https://github.com/qupath/qupath/issues/1200:1086,Usability,clear,clear,1086,"## IMPORTANT!. This section is **only** for bug reports, which **must** follow the template below. Please post any other questions to the official QuPath forum at https://forum.image.sc/tags/qupath. If in doubt, use [image.sc](https://forum.image.sc/tags/qupath). This helps us keep things organized. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**; A clear and concise description of what the bug is. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to '...'; 2. Click on '....'; 3. Scroll down to '....'; 4. See error. **Expected behavior**; A clear and concise description of what you expected to happen. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: [e.g. Windows, macOS, Ubuntu...]; - QuPath Version: [e.g. 0.2.2]. **Additional context**; Add any other context about the problem here.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1200
https://github.com/qupath/qupath/issues/1201:274,Availability,down,down,274,"Hi,. I'm using QuPath for analysis of highly multiplexed data (40+ channels), and I would like to ask for the following:. 1. The height of the brightness and contrast panel window is limited , and it would be much more convenient if I can make it higher to reduce scrolling down using the slider when I want to turn channels on and off. 2. Can you please add an option to turn On/Off all the channels at once, eg with ""Select All"" / ""Unselect All"" button or checkbox. Thanks; Ofra",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1201
https://github.com/qupath/qupath/issues/1201:257,Energy Efficiency,reduce,reduce,257,"Hi,. I'm using QuPath for analysis of highly multiplexed data (40+ channels), and I would like to ask for the following:. 1. The height of the brightness and contrast panel window is limited , and it would be much more convenient if I can make it higher to reduce scrolling down using the slider when I want to turn channels on and off. 2. Can you please add an option to turn On/Off all the channels at once, eg with ""Select All"" / ""Unselect All"" button or checkbox. Thanks; Ofra",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1201
https://github.com/qupath/qupath/issues/1202:2201,Availability,ERROR,ERROR,2201,"Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.qpproj; INFO: Project set to Project: QupathProject_donneur1-project; INFO: Setting max Bio-Formats readers to 20; WARN: Removing alpha channel; ... (a lot of warnings); WARN: Removing alpha channel; ERROR: QuPath exception: Bidirectional binding failed, setting to the previous value; java.lang.RuntimeException: Bidirectional binding failed, setting to the previous value; at com.sun.javafx.binding.BidirectionalBinding$TypedGenericBidirectionalBinding.invalidated(BidirectionalBinding.java:677); at com.sun.javafx.binding.ExpressionHelper$SingleInvalidation.fireValueChangedEvent(ExpressionHelper.java:136); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:106); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:113); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:147); at javafx.css.StyleableObjectProperty.set(StyleableObjectProperty.java:82); at javafx.scene.control.Labeled.setTextFill(Labeled.java:766); at org.controlsfx.glyphfont.Glyph.setColor(Glyph.java:288); at qupath.lib.gui.tools.IconFactory.createROIIcon(IconFact",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:15901,Availability,ERROR,ERROR,15901,"rocess(Scene.java:3903); at javafx.scene.Scene.processMouseEvent(Scene.java:1887); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2620); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:551); at com.sun.glass.ui.View.notifyMouse(View.java:937); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:316); at java.base/java.lang.Thread.run(Unknown Source); INFO: Image data set to ImageData: Brightfield (other), Training Img (Classifier); ERROR: Bidirectional binding failed, setting to the previous value (see full stack trace above, or use 'debug' log level); ERROR: Bidirectional binding failed, setting to the previous value (see full stack trace above, or use 'debug' log level)`. When I run it on QuPath 0.4.0, I don't have this issue. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Click to add points'; 2. Click on 'Set Class'. **Expected behavior**; Unable to set Class to points. **Screenshots**; ![Screenshot from 2023-01-09 10-00-42](https://user-images.githubusercontent.com/32599059/211272175-1182c24d-c859-4345-a939-1ef4fb295ecd.png). **Desktop (please complete the following information):**; - OS: Ubuntu 22.04; - QuPath Version: 0.4.1. **Additional context**; It is a version of QuPath build on source to be compatible with Cuda for Gpu acceleration (for CellPose).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:16024,Availability,ERROR,ERROR,16024,"rocess(Scene.java:3903); at javafx.scene.Scene.processMouseEvent(Scene.java:1887); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2620); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:551); at com.sun.glass.ui.View.notifyMouse(View.java:937); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:316); at java.base/java.lang.Thread.run(Unknown Source); INFO: Image data set to ImageData: Brightfield (other), Training Img (Classifier); ERROR: Bidirectional binding failed, setting to the previous value (see full stack trace above, or use 'debug' log level); ERROR: Bidirectional binding failed, setting to the previous value (see full stack trace above, or use 'debug' log level)`. When I run it on QuPath 0.4.0, I don't have this issue. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Click to add points'; 2. Click on 'Set Class'. **Expected behavior**; Unable to set Class to points. **Screenshots**; ![Screenshot from 2023-01-09 10-00-42](https://user-images.githubusercontent.com/32599059/211272175-1182c24d-c859-4345-a939-1ef4fb295ecd.png). **Desktop (please complete the following information):**; - OS: Ubuntu 22.04; - QuPath Version: 0.4.1. **Additional context**; It is a version of QuPath build on source to be compatible with Cuda for Gpu acceleration (for CellPose).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:1441,Deployability,Update,Update,1441,"sion-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.qpproj; INFO: Project set to Project: QupathProject_donneur1-project; INFO: Setting max Bio-Formats readers to 20; WARN: Removing alpha channel; ... (a lot of warnings); WARN: Removing alpha channel; ERROR: QuPath exception: Bidirectional binding failed, setting to the previous value; java.lang.RuntimeException: Bidirectional binding failed, setting to the previous value; at com.sun.javafx.binding.BidirectionalBinding$TypedGen",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:1507,Deployability,release,release,1507,"ons/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.qpproj; INFO: Project set to Project: QupathProject_donneur1-project; INFO: Setting max Bio-Formats readers to 20; WARN: Removing alpha channel; ... (a lot of warnings); WARN: Removing alpha channel; ERROR: QuPath exception: Bidirectional binding failed, setting to the previous value; java.lang.RuntimeException: Bidirectional binding failed, setting to the previous value; at com.sun.javafx.binding.BidirectionalBinding$TypedGenericBidirectionalBinding.invalidated(BidirectionalBinding.java:677); a",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:1561,Deployability,Update,Update,1561,"on: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.qpproj; INFO: Project set to Project: QupathProject_donneur1-project; INFO: Setting max Bio-Formats readers to 20; WARN: Removing alpha channel; ... (a lot of warnings); WARN: Removing alpha channel; ERROR: QuPath exception: Bidirectional binding failed, setting to the previous value; java.lang.RuntimeException: Bidirectional binding failed, setting to the previous value; at com.sun.javafx.binding.BidirectionalBinding$TypedGenericBidirectionalBinding.invalidated(BidirectionalBinding.java:677); at com.sun.javafx.binding.ExpressionHelper$SingleInvalidation.fireValueC",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:1646,Deployability,release,release,1646,"ombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.qpproj; INFO: Project set to Project: QupathProject_donneur1-project; INFO: Setting max Bio-Formats readers to 20; WARN: Removing alpha channel; ... (a lot of warnings); WARN: Removing alpha channel; ERROR: QuPath exception: Bidirectional binding failed, setting to the previous value; java.lang.RuntimeException: Bidirectional binding failed, setting to the previous value; at com.sun.javafx.binding.BidirectionalBinding$TypedGenericBidirectionalBinding.invalidated(BidirectionalBinding.java:677); at com.sun.javafx.binding.ExpressionHelper$SingleInvalidation.fireValueChangedEvent(ExpressionHelper.java:136); at com.sun.javafx.binding",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:1712,Deployability,Update,Update,1712,"ed if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.qpproj; INFO: Project set to Project: QupathProject_donneur1-project; INFO: Setting max Bio-Formats readers to 20; WARN: Removing alpha channel; ... (a lot of warnings); WARN: Removing alpha channel; ERROR: QuPath exception: Bidirectional binding failed, setting to the previous value; java.lang.RuntimeException: Bidirectional binding failed, setting to the previous value; at com.sun.javafx.binding.BidirectionalBinding$TypedGenericBidirectionalBinding.invalidated(BidirectionalBinding.java:677); at com.sun.javafx.binding.ExpressionHelper$SingleInvalidation.fireValueChangedEvent(ExpressionHelper.java:136); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); at javafx.beans.pro",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:1795,Deployability,release,release,1795,"FO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.qpproj; INFO: Project set to Project: QupathProject_donneur1-project; INFO: Setting max Bio-Formats readers to 20; WARN: Removing alpha channel; ... (a lot of warnings); WARN: Removing alpha channel; ERROR: QuPath exception: Bidirectional binding failed, setting to the previous value; java.lang.RuntimeException: Bidirectional binding failed, setting to the previous value; at com.sun.javafx.binding.BidirectionalBinding$TypedGenericBidirectionalBinding.invalidated(BidirectionalBinding.java:677); at com.sun.javafx.binding.ExpressionHelper$SingleInvalidation.fireValueChangedEvent(ExpressionHelper.java:136); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.jav",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:3478,Deployability,update,updateItem,3478,a:677); at com.sun.javafx.binding.ExpressionHelper$SingleInvalidation.fireValueChangedEvent(ExpressionHelper.java:136); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:106); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:113); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:147); at javafx.css.StyleableObjectProperty.set(StyleableObjectProperty.java:82); at javafx.scene.control.Labeled.setTextFill(Labeled.java:766); at org.controlsfx.glyphfont.Glyph.setColor(Glyph.java:288); at qupath.lib.gui.tools.IconFactory.createROIIcon(IconFactory.java:275); at qupath.lib.gui.tools.IconFactory.createPathObjectIcon(IconFactory.java:228); at qupath.lib.gui.tools.PathObjectLabels$PathObjectMiniPane.setPathObject(PathObjectLabels.java:253); at qupath.lib.gui.tools.PathObjectLabels$PathObjectTreeCell.updateItem(PathObjectLabels.java:126); at qupath.lib.gui.tools.PathObjectLabels$PathObjectTreeCell.updateItem(PathObjectLabels.java:113); at javafx.scene.control.TreeCell.updateItem(TreeCell.java:533); at javafx.scene.control.TreeCell.lambda$new$3(TreeCell.java:173); at javafx.beans.WeakInvalidationListener.invalidated(WeakInvalidationListener.java:83); at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:348); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:106); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:113); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:147); at javafx.scene.control.TreeView.setRoot(TreeView.java:479); at qupath.lib.gui.panes.PathObjectHierarchyView.setImageData(PathObjectHierarchyView.java:424); at qupath.lib.gui.panes.PathObjectHierarchyView.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:3577,Deployability,update,updateItem,3577,ionHelper.java:136); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:106); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:113); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:147); at javafx.css.StyleableObjectProperty.set(StyleableObjectProperty.java:82); at javafx.scene.control.Labeled.setTextFill(Labeled.java:766); at org.controlsfx.glyphfont.Glyph.setColor(Glyph.java:288); at qupath.lib.gui.tools.IconFactory.createROIIcon(IconFactory.java:275); at qupath.lib.gui.tools.IconFactory.createPathObjectIcon(IconFactory.java:228); at qupath.lib.gui.tools.PathObjectLabels$PathObjectMiniPane.setPathObject(PathObjectLabels.java:253); at qupath.lib.gui.tools.PathObjectLabels$PathObjectTreeCell.updateItem(PathObjectLabels.java:126); at qupath.lib.gui.tools.PathObjectLabels$PathObjectTreeCell.updateItem(PathObjectLabels.java:113); at javafx.scene.control.TreeCell.updateItem(TreeCell.java:533); at javafx.scene.control.TreeCell.lambda$new$3(TreeCell.java:173); at javafx.beans.WeakInvalidationListener.invalidated(WeakInvalidationListener.java:83); at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:348); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:106); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:113); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:147); at javafx.scene.control.TreeView.setRoot(TreeView.java:479); at qupath.lib.gui.panes.PathObjectHierarchyView.setImageData(PathObjectHierarchyView.java:424); at qupath.lib.gui.panes.PathObjectHierarchyView.changed(PathObjectHierarchyView.java:446); at qupath.lib.gui.panes.PathObjectHierarchyView.changed(,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:3649,Deployability,update,updateItem,3649,ValueChangedEvent(ExpressionHelper.java:80); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:106); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:113); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:147); at javafx.css.StyleableObjectProperty.set(StyleableObjectProperty.java:82); at javafx.scene.control.Labeled.setTextFill(Labeled.java:766); at org.controlsfx.glyphfont.Glyph.setColor(Glyph.java:288); at qupath.lib.gui.tools.IconFactory.createROIIcon(IconFactory.java:275); at qupath.lib.gui.tools.IconFactory.createPathObjectIcon(IconFactory.java:228); at qupath.lib.gui.tools.PathObjectLabels$PathObjectMiniPane.setPathObject(PathObjectLabels.java:253); at qupath.lib.gui.tools.PathObjectLabels$PathObjectTreeCell.updateItem(PathObjectLabels.java:126); at qupath.lib.gui.tools.PathObjectLabels$PathObjectTreeCell.updateItem(PathObjectLabels.java:113); at javafx.scene.control.TreeCell.updateItem(TreeCell.java:533); at javafx.scene.control.TreeCell.lambda$new$3(TreeCell.java:173); at javafx.beans.WeakInvalidationListener.invalidated(WeakInvalidationListener.java:83); at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:348); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:106); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:113); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:147); at javafx.scene.control.TreeView.setRoot(TreeView.java:479); at qupath.lib.gui.panes.PathObjectHierarchyView.setImageData(PathObjectHierarchyView.java:424); at qupath.lib.gui.panes.PathObjectHierarchyView.changed(PathObjectHierarchyView.java:446); at qupath.lib.gui.panes.PathObjectHierarchyView.changed(PathObjectHierarchyView.java:64); at com.sun.javafx.binding.Expressi,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:10347,Deployability,update,updateItem,10347,a:650); at com.sun.javafx.binding.ExpressionHelper$SingleInvalidation.fireValueChangedEvent(ExpressionHelper.java:136); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:106); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:113); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:147); at javafx.css.StyleableObjectProperty.set(StyleableObjectProperty.java:82); at javafx.scene.control.Labeled.setTextFill(Labeled.java:766); at org.controlsfx.glyphfont.Glyph.setColor(Glyph.java:288); at qupath.lib.gui.tools.IconFactory.createROIIcon(IconFactory.java:275); at qupath.lib.gui.tools.IconFactory.createPathObjectIcon(IconFactory.java:228); at qupath.lib.gui.tools.PathObjectLabels$PathObjectMiniPane.setPathObject(PathObjectLabels.java:253); at qupath.lib.gui.tools.PathObjectLabels$PathObjectTreeCell.updateItem(PathObjectLabels.java:126); at qupath.lib.gui.tools.PathObjectLabels$PathObjectTreeCell.updateItem(PathObjectLabels.java:113); at javafx.scene.control.TreeCell.updateItem(TreeCell.java:533); at javafx.scene.control.TreeCell.lambda$new$3(TreeCell.java:173); at javafx.beans.WeakInvalidationListener.invalidated(WeakInvalidationListener.java:83); at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:348); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:106); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:113); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:147); at javafx.scene.control.TreeView.setRoot(TreeView.java:479); at qupath.lib.gui.panes.PathObjectHierarchyView.setImageData(PathObjectHierarchyView.java:424); at qupath.lib.gui.panes.PathObjectHierarchyView.,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:10446,Deployability,update,updateItem,10446,ionHelper.java:136); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:106); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:113); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:147); at javafx.css.StyleableObjectProperty.set(StyleableObjectProperty.java:82); at javafx.scene.control.Labeled.setTextFill(Labeled.java:766); at org.controlsfx.glyphfont.Glyph.setColor(Glyph.java:288); at qupath.lib.gui.tools.IconFactory.createROIIcon(IconFactory.java:275); at qupath.lib.gui.tools.IconFactory.createPathObjectIcon(IconFactory.java:228); at qupath.lib.gui.tools.PathObjectLabels$PathObjectMiniPane.setPathObject(PathObjectLabels.java:253); at qupath.lib.gui.tools.PathObjectLabels$PathObjectTreeCell.updateItem(PathObjectLabels.java:126); at qupath.lib.gui.tools.PathObjectLabels$PathObjectTreeCell.updateItem(PathObjectLabels.java:113); at javafx.scene.control.TreeCell.updateItem(TreeCell.java:533); at javafx.scene.control.TreeCell.lambda$new$3(TreeCell.java:173); at javafx.beans.WeakInvalidationListener.invalidated(WeakInvalidationListener.java:83); at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:348); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:106); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:113); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:147); at javafx.scene.control.TreeView.setRoot(TreeView.java:479); at qupath.lib.gui.panes.PathObjectHierarchyView.setImageData(PathObjectHierarchyView.java:424); at qupath.lib.gui.panes.PathObjectHierarchyView.changed(PathObjectHierarchyView.java:446); at qupath.lib.gui.panes.PathObjectHierarchyView.changed(,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:10518,Deployability,update,updateItem,10518,ValueChangedEvent(ExpressionHelper.java:80); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:106); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:113); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:147); at javafx.css.StyleableObjectProperty.set(StyleableObjectProperty.java:82); at javafx.scene.control.Labeled.setTextFill(Labeled.java:766); at org.controlsfx.glyphfont.Glyph.setColor(Glyph.java:288); at qupath.lib.gui.tools.IconFactory.createROIIcon(IconFactory.java:275); at qupath.lib.gui.tools.IconFactory.createPathObjectIcon(IconFactory.java:228); at qupath.lib.gui.tools.PathObjectLabels$PathObjectMiniPane.setPathObject(PathObjectLabels.java:253); at qupath.lib.gui.tools.PathObjectLabels$PathObjectTreeCell.updateItem(PathObjectLabels.java:126); at qupath.lib.gui.tools.PathObjectLabels$PathObjectTreeCell.updateItem(PathObjectLabels.java:113); at javafx.scene.control.TreeCell.updateItem(TreeCell.java:533); at javafx.scene.control.TreeCell.lambda$new$3(TreeCell.java:173); at javafx.beans.WeakInvalidationListener.invalidated(WeakInvalidationListener.java:83); at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:348); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); at javafx.beans.property.ObjectPropertyBase.fireValueChangedEvent(ObjectPropertyBase.java:106); at javafx.beans.property.ObjectPropertyBase.markInvalid(ObjectPropertyBase.java:113); at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:147); at javafx.scene.control.TreeView.setRoot(TreeView.java:479); at qupath.lib.gui.panes.PathObjectHierarchyView.setImageData(PathObjectHierarchyView.java:424); at qupath.lib.gui.panes.PathObjectHierarchyView.changed(PathObjectHierarchyView.java:446); at qupath.lib.gui.panes.PathObjectHierarchyView.changed(PathObjectHierarchyView.java:64); at com.sun.javafx.binding.Expressi,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:679,Energy Efficiency,adapt,adapters,679,"**Describe the bug**; On QuPath 0.4.1, when I try to create points, at the moment I right click to set a Class, the bug appears, and a log window indicates:. `INFO: QuPath build: Version: 0.4.1; Build time: 2023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:679,Integrability,adapter,adapters,679,"**Describe the bug**; On QuPath 0.4.1, when I try to create points, at the moment I right click to set a Class, the bug appears, and a log window indicates:. `INFO: QuPath build: Version: 0.4.1; Build time: 2023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:679,Modifiability,adapt,adapters,679,"**Describe the bug**; On QuPath 0.4.1, when I try to create points, at the moment I right click to set a Class, the bug appears, and a log window indicates:. `INFO: QuPath build: Version: 0.4.1; Build time: 2023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:245,Performance,cache,cache,245,"**Describe the bug**; On QuPath 0.4.1, when I try to create points, at the moment I right click to set a Class, the bug appears, and a log window indicates:. `INFO: QuPath build: Version: 0.4.1; Build time: 2023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:795,Performance,Load,Loaded,795,"**Describe the bug**; On QuPath 0.4.1, when I try to create points, at the moment I right click to set a Class, the bug appears, and a log window indicates:. `INFO: QuPath build: Version: 0.4.1; Build time: 2023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:974,Performance,Load,Loaded,974,"**Describe the bug**; On QuPath 0.4.1, when I try to create points, at the moment I right click to set a Class, the bug appears, and a log window indicates:. `INFO: QuPath build: Version: 0.4.1; Build time: 2023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:1046,Performance,Load,Loaded,1046,"023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.qpproj; INFO: Project set to Project: QupathProject_donneur1-project; INFO: Setting max Bio-Formats readers to 20; WARN: Removing alpha channel; ... (a lot of warnings); WARN: Removing alpha channel; ERROR: ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:1101,Performance,Load,Loaded,1101,"023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.qpproj; INFO: Project set to Project: QupathProject_donneur1-project; INFO: Setting max Bio-Formats readers to 20; WARN: Removing alpha channel; ... (a lot of warnings); WARN: Removing alpha channel; ERROR: ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:1150,Performance,Load,Loaded,1150,"023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.qpproj; INFO: Project set to Project: QupathProject_donneur1-project; INFO: Setting max Bio-Formats readers to 20; WARN: Removing alpha channel; ... (a lot of warnings); WARN: Removing alpha channel; ERROR: ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:1203,Performance,Load,Loaded,1203,"023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.qpproj; INFO: Project set to Project: QupathProject_donneur1-project; INFO: Setting max Bio-Formats readers to 20; WARN: Removing alpha channel; ... (a lot of warnings); WARN: Removing alpha channel; ERROR: ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:1265,Performance,Load,Loaded,1265,"023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.qpproj; INFO: Project set to Project: QupathProject_donneur1-project; INFO: Setting max Bio-Formats readers to 20; WARN: Removing alpha channel; ... (a lot of warnings); WARN: Removing alpha channel; ERROR: ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:1317,Performance,Load,Loaded,1317,"023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.qpproj; INFO: Project set to Project: QupathProject_donneur1-project; INFO: Setting max Bio-Formats readers to 20; WARN: Removing alpha channel; ... (a lot of warnings); WARN: Removing alpha channel; ERROR: ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:700,Safety,detect,detected,700,"**Describe the bug**; On QuPath 0.4.1, when I try to create points, at the moment I right click to set a Class, the bug appears, and a log window indicates:. `INFO: QuPath build: Version: 0.4.1; Build time: 2023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:8282,Security,secur,security,8282,tchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$ClickGenerator.postProcess(Scene.java:3599); at javafx.scene.Scene$MouseHandler.process(Scene.java:3903); at javafx.scene.Scene.processMouseEvent(Scene.java:1887); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2620); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:551); at com.sun.glass.ui.View.notifyMouse(View.java:937); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:316); at java.base/java.lang.Thread.run(Unknown Source); Caused by DuplicatableGlyph.textFill : A bound value cannot be set. at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:143); at javafx.css.StyleableObjectProperty.set(StyleableObjectProperty.java:82); at javafx.beans.property.ObjectProperty.setValue(ObjectProperty.java:78); at com.sun.javafx.binding.BidirectionalBin,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:8291,Security,Access,AccessController,8291,cEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$ClickGenerator.postProcess(Scene.java:3599); at javafx.scene.Scene$MouseHandler.process(Scene.java:3903); at javafx.scene.Scene.processMouseEvent(Scene.java:1887); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2620); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:551); at com.sun.glass.ui.View.notifyMouse(View.java:937); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:316); at java.base/java.lang.Thread.run(Unknown Source); Caused by DuplicatableGlyph.textFill : A bound value cannot be set. at javafx.beans.property.ObjectPropertyBase.set(ObjectPropertyBase.java:143); at javafx.css.StyleableObjectProperty.set(StyleableObjectProperty.java:82); at javafx.beans.property.ObjectProperty.setValue(ObjectProperty.java:78); at com.sun.javafx.binding.BidirectionalBinding$TypedGen,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:15151,Security,secur,security,15151,"tchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$ClickGenerator.postProcess(Scene.java:3599); at javafx.scene.Scene$MouseHandler.process(Scene.java:3903); at javafx.scene.Scene.processMouseEvent(Scene.java:1887); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2620); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:551); at com.sun.glass.ui.View.notifyMouse(View.java:937); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:316); at java.base/java.lang.Thread.run(Unknown Source); INFO: Image data set to ImageData: Brightfield (other), Training Img (Classifier); ERROR: Bidirectional binding failed, setting to the previous value (see full stack trace above, or use 'debug' log level); ERROR: Bidirectional binding failed, setting to the previous value (see full stack trace above, or use 'debug' log level)`. When I r",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:15160,Security,Access,AccessController,15160,"cEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.BasicEventDispatcher.dispatchEvent(BasicEventDispatcher.java:56); at com.sun.javafx.event.EventDispatchChainImpl.dispatchEvent(EventDispatchChainImpl.java:114); at com.sun.javafx.event.EventUtil.fireEventImpl(EventUtil.java:74); at com.sun.javafx.event.EventUtil.fireEvent(EventUtil.java:54); at javafx.event.Event.fireEvent(Event.java:198); at javafx.scene.Scene$ClickGenerator.postProcess(Scene.java:3599); at javafx.scene.Scene$MouseHandler.process(Scene.java:3903); at javafx.scene.Scene.processMouseEvent(Scene.java:1887); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2620); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:551); at com.sun.glass.ui.View.notifyMouse(View.java:937); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:316); at java.base/java.lang.Thread.run(Unknown Source); INFO: Image data set to ImageData: Brightfield (other), Training Img (Classifier); ERROR: Bidirectional binding failed, setting to the previous value (see full stack trace above, or use 'debug' log level); ERROR: Bidirectional binding failed, setting to the previous value (see full stack trace above, or use 'debug' log level)`. When I run it on QuPa",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:135,Testability,log,log,135,"**Describe the bug**; On QuPath 0.4.1, when I try to create points, at the moment I right click to set a Class, the bug appears, and a log window indicates:. `INFO: QuPath build: Version: 0.4.1; Build time: 2023-01-07, 12:00; INFO: Setting tile cache size to 3972.00 MB (25.0% max memory); INFO: Refreshing extensions in Path/to/QuPath/extensions/extensions; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-stardist-0.4.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-cellpose-0.6.0.jar; INFO: Added extension: Path/to/QuPath/extensions/extensions/qupath-extension-imagecombiner-0.2.3.jar; INFO: Initializing type adapters; INFO: CUDA detected and will be used if possible. Use DnnTools.setUseCuda(false) to turn this off.; INFO: Loaded extension BIOP Cellpose extension (3 ms); INFO: Bio-Formats version 6.11.1; INFO: Bio-Formats memoization is turned OFF (based on Java 17.0.5+8, Bio-Formats 6.11.1); INFO: Loaded extension Bio-Formats options (Bio-Formats 6.11.1) (9 ms); INFO: Loaded extension ImageCombiner extension (1 ms); INFO: Loaded extension ImageJ extension (34 ms); INFO: Loaded extension Processing extension (16 ms); INFO: Loaded extension Rich script editor extension (144 ms); INFO: Loaded extension SVG export extension (0 ms); INFO: Loaded extension StarDist extension (2 ms); INFO: OpenSlide version 3.4.1; INFO: Starting QuPath with parameters: []; INFO: Update check for https://github.com/qupath/qupath; INFO: No newer release for QuPath (0.4.1 is newer than 0.4.1); INFO: Update check for https://github.com/qupath/qupath-extension-stardist; INFO: No newer release for StarDist extension (0.4.0 is newer than 0.4.0); INFO: Update check for https://github.com/biop/qupath-extension-cellpose; INFO: No newer release for Cellpose 2D QuPath Extension (0.6.0 is newer than 0.6.0); WARN: Selecting project file /media/image_in/T7 Shield/Recherche/LABO/12.22-Efferocytose_InCuCyte/qupath/QupathProject_donneur1/project.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:16012,Testability,log,log,16012,"rocess(Scene.java:3903); at javafx.scene.Scene.processMouseEvent(Scene.java:1887); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2620); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:551); at com.sun.glass.ui.View.notifyMouse(View.java:937); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:316); at java.base/java.lang.Thread.run(Unknown Source); INFO: Image data set to ImageData: Brightfield (other), Training Img (Classifier); ERROR: Bidirectional binding failed, setting to the previous value (see full stack trace above, or use 'debug' log level); ERROR: Bidirectional binding failed, setting to the previous value (see full stack trace above, or use 'debug' log level)`. When I run it on QuPath 0.4.0, I don't have this issue. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Click to add points'; 2. Click on 'Set Class'. **Expected behavior**; Unable to set Class to points. **Screenshots**; ![Screenshot from 2023-01-09 10-00-42](https://user-images.githubusercontent.com/32599059/211272175-1182c24d-c859-4345-a939-1ef4fb295ecd.png). **Desktop (please complete the following information):**; - OS: Ubuntu 22.04; - QuPath Version: 0.4.1. **Additional context**; It is a version of QuPath build on source to be compatible with Cuda for Gpu acceleration (for CellPose).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1202:16135,Testability,log,log,16135,"rocess(Scene.java:3903); at javafx.scene.Scene.processMouseEvent(Scene.java:1887); at javafx.scene.Scene$ScenePeerListener.mouseEvent(Scene.java:2620); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:411); at com.sun.javafx.tk.quantum.GlassViewEventHandler$MouseEventNotification.run(GlassViewEventHandler.java:301); at java.base/java.security.AccessController.doPrivileged(Unknown Source); at com.sun.javafx.tk.quantum.GlassViewEventHandler.lambda$handleMouseEvent$2(GlassViewEventHandler.java:450); at com.sun.javafx.tk.quantum.QuantumToolkit.runWithoutRenderLock(QuantumToolkit.java:424); at com.sun.javafx.tk.quantum.GlassViewEventHandler.handleMouseEvent(GlassViewEventHandler.java:449); at com.sun.glass.ui.View.handleMouseEvent(View.java:551); at com.sun.glass.ui.View.notifyMouse(View.java:937); at com.sun.glass.ui.gtk.GtkApplication._runLoop(Native Method); at com.sun.glass.ui.gtk.GtkApplication.lambda$runLoop$11(GtkApplication.java:316); at java.base/java.lang.Thread.run(Unknown Source); INFO: Image data set to ImageData: Brightfield (other), Training Img (Classifier); ERROR: Bidirectional binding failed, setting to the previous value (see full stack trace above, or use 'debug' log level); ERROR: Bidirectional binding failed, setting to the previous value (see full stack trace above, or use 'debug' log level)`. When I run it on QuPath 0.4.0, I don't have this issue. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to 'Click to add points'; 2. Click on 'Set Class'. **Expected behavior**; Unable to set Class to points. **Screenshots**; ![Screenshot from 2023-01-09 10-00-42](https://user-images.githubusercontent.com/32599059/211272175-1182c24d-c859-4345-a939-1ef4fb295ecd.png). **Desktop (please complete the following information):**; - OS: Ubuntu 22.04; - QuPath Version: 0.4.1. **Additional context**; It is a version of QuPath build on source to be compatible with Cuda for Gpu acceleration (for CellPose).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1202
https://github.com/qupath/qupath/issues/1206:85,Energy Efficiency,efficient,efficient,85,"## Bug report. **Describe the bug**; Pressing `Enter` with a TMA core selected is an efficient way to input a quick text note. However, the text input dialog is blank - regardless of whether there's a note present or not. **Expected behavior**; If a note has already been set, initialize the input dialog with the text. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.1 (and likely before). **Additional context**; First mentioned at https://forum.image.sc/t/groovy-script-for-tma-running-very-sluggishly-now-in-qupath-0-4-1-any-thoughts-how-to-fix/75746/9",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1206
https://github.com/qupath/qupath/issues/1209:153,Availability,ERROR,ERROR,153,"## Bug report. **Describe the bug**; When creating a measurement table and entering text in the 'column filter' textfield, an exception can appear. ```; ERROR: QuPath exception: TableColumn.visible : A bound value cannot be set.; java.lang.RuntimeException: TableColumn.visible : A bound value cannot be set.; at javafx.beans.property.BooleanPropertyBase.set(BooleanPropertyBase.java:141); at javafx.scene.control.TableColumnBase.setVisible(TableColumnBase.java:230); at qupath.lib.gui.commands.SummaryMeasurementTableCommand.lambda$18(SummaryMeasurementTableCommand.java:379); at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:360); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image; 2. Detect some cells; 3. Run *Measure &rarr; Show detection measurements*; 4. Type something in the 'Column filter' field; 5. See the exception pop up (although the filter is applied). **Expected behavior**; No exceptions. **Desktop (please complete the following information):**; - OS: All (presumably); - QuPath Version: v0.4.1",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1209
https://github.com/qupath/qupath/issues/1209:849,Safety,Detect,Detect,849,"## Bug report. **Describe the bug**; When creating a measurement table and entering text in the 'column filter' textfield, an exception can appear. ```; ERROR: QuPath exception: TableColumn.visible : A bound value cannot be set.; java.lang.RuntimeException: TableColumn.visible : A bound value cannot be set.; at javafx.beans.property.BooleanPropertyBase.set(BooleanPropertyBase.java:141); at javafx.scene.control.TableColumnBase.setVisible(TableColumnBase.java:230); at qupath.lib.gui.commands.SummaryMeasurementTableCommand.lambda$18(SummaryMeasurementTableCommand.java:379); at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:360); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image; 2. Detect some cells; 3. Run *Measure &rarr; Show detection measurements*; 4. Type something in the 'Column filter' field; 5. See the exception pop up (although the filter is applied). **Expected behavior**; No exceptions. **Desktop (please complete the following information):**; - OS: All (presumably); - QuPath Version: v0.4.1",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1209
https://github.com/qupath/qupath/issues/1209:896,Safety,detect,detection,896,"## Bug report. **Describe the bug**; When creating a measurement table and entering text in the 'column filter' textfield, an exception can appear. ```; ERROR: QuPath exception: TableColumn.visible : A bound value cannot be set.; java.lang.RuntimeException: TableColumn.visible : A bound value cannot be set.; at javafx.beans.property.BooleanPropertyBase.set(BooleanPropertyBase.java:141); at javafx.scene.control.TableColumnBase.setVisible(TableColumnBase.java:230); at qupath.lib.gui.commands.SummaryMeasurementTableCommand.lambda$18(SummaryMeasurementTableCommand.java:379); at com.sun.javafx.binding.ExpressionHelper$Generic.fireValueChangedEvent(ExpressionHelper.java:360); at com.sun.javafx.binding.ExpressionHelper.fireValueChangedEvent(ExpressionHelper.java:80); ```. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image; 2. Detect some cells; 3. Run *Measure &rarr; Show detection measurements*; 4. Type something in the 'Column filter' field; 5. See the exception pop up (although the filter is applied). **Expected behavior**; No exceptions. **Desktop (please complete the following information):**; - OS: All (presumably); - QuPath Version: v0.4.1",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1209
https://github.com/qupath/qupath/issues/1211:223,Performance,load,load,223,"## Bug report. **Describe the bug**; Resurfacing of; * https://github.com/qupath/qupath/issues/914. **To Reproduce**; See https://github.com/qupath/qupath-extension-stardist/issues/26. **Expected behavior**; Extension jars load properly with batch scripts. **Desktop (please complete the following information):**; - OS: macOS (but presumably all); - QuPath Version: v0.4.1 (probably earlier). **Additional context**; Seems to be a late regression that comes from using a new `ExtensionClassLoader` with batch scripts, rather than `QuPathGUI.getExtensionClassLoader()`. Ultimately the design needs to be improved so that the classloader isn't requested from `QuPathGUI` - but for now the easier change will be to use `QuPathGUI` for the batch scripts.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1211
https://github.com/qupath/qupath/issues/1217:305,Performance,cache,cached,305,"## Bug report. **Describe the bug**; There's a problem with the tile caching v0.3.2 and v0.4.2 (probably other versions) when using the the same image opened in multiple viewers. Basically, detections made in one image can show up in the other. The reason is that tiles that show the detections are being cached using the same key in both viewers, because the underlying image files are the same. **To Reproduce**; 1. Create a project & add an image; 2. Duplicate the image in the project; 3. Open the original image & its duplicate in different QuPath viewers; 4. Detect cells in a small region in one viewer; 5. Detect cells in a different region in the second viewer; 6. See the cells magically appear in both viewers. **Expected behavior**; It's possible to work with the same image in multiple viewers. **Screenshots**; ![mixed-viewers](https://user-images.githubusercontent.com/4690904/214566216-208471e0-d729-4338-993d-0fa12420f504.png). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (also v0.3.2 and likely other versions); ; **Additional context**; Because it's a tile caching issue, the problem isn't evident when zoomed in (since the tile cache isn't used to paint detections). The issue was first reported at https://forum.image.sc/t/qupath-problem-with-showing-detections-in-multi-view/76334/3. The cell counts etc. should be unaffected. One workaround is to duplicate the underlying image file, so that it has a different key for caching (based upon the file name/path).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1217
https://github.com/qupath/qupath/issues/1217:1198,Performance,cache,cache,1198,"## Bug report. **Describe the bug**; There's a problem with the tile caching v0.3.2 and v0.4.2 (probably other versions) when using the the same image opened in multiple viewers. Basically, detections made in one image can show up in the other. The reason is that tiles that show the detections are being cached using the same key in both viewers, because the underlying image files are the same. **To Reproduce**; 1. Create a project & add an image; 2. Duplicate the image in the project; 3. Open the original image & its duplicate in different QuPath viewers; 4. Detect cells in a small region in one viewer; 5. Detect cells in a different region in the second viewer; 6. See the cells magically appear in both viewers. **Expected behavior**; It's possible to work with the same image in multiple viewers. **Screenshots**; ![mixed-viewers](https://user-images.githubusercontent.com/4690904/214566216-208471e0-d729-4338-993d-0fa12420f504.png). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (also v0.3.2 and likely other versions); ; **Additional context**; Because it's a tile caching issue, the problem isn't evident when zoomed in (since the tile cache isn't used to paint detections). The issue was first reported at https://forum.image.sc/t/qupath-problem-with-showing-detections-in-multi-view/76334/3. The cell counts etc. should be unaffected. One workaround is to duplicate the underlying image file, so that it has a different key for caching (based upon the file name/path).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1217
https://github.com/qupath/qupath/issues/1217:190,Safety,detect,detections,190,"## Bug report. **Describe the bug**; There's a problem with the tile caching v0.3.2 and v0.4.2 (probably other versions) when using the the same image opened in multiple viewers. Basically, detections made in one image can show up in the other. The reason is that tiles that show the detections are being cached using the same key in both viewers, because the underlying image files are the same. **To Reproduce**; 1. Create a project & add an image; 2. Duplicate the image in the project; 3. Open the original image & its duplicate in different QuPath viewers; 4. Detect cells in a small region in one viewer; 5. Detect cells in a different region in the second viewer; 6. See the cells magically appear in both viewers. **Expected behavior**; It's possible to work with the same image in multiple viewers. **Screenshots**; ![mixed-viewers](https://user-images.githubusercontent.com/4690904/214566216-208471e0-d729-4338-993d-0fa12420f504.png). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (also v0.3.2 and likely other versions); ; **Additional context**; Because it's a tile caching issue, the problem isn't evident when zoomed in (since the tile cache isn't used to paint detections). The issue was first reported at https://forum.image.sc/t/qupath-problem-with-showing-detections-in-multi-view/76334/3. The cell counts etc. should be unaffected. One workaround is to duplicate the underlying image file, so that it has a different key for caching (based upon the file name/path).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1217
https://github.com/qupath/qupath/issues/1217:284,Safety,detect,detections,284,"## Bug report. **Describe the bug**; There's a problem with the tile caching v0.3.2 and v0.4.2 (probably other versions) when using the the same image opened in multiple viewers. Basically, detections made in one image can show up in the other. The reason is that tiles that show the detections are being cached using the same key in both viewers, because the underlying image files are the same. **To Reproduce**; 1. Create a project & add an image; 2. Duplicate the image in the project; 3. Open the original image & its duplicate in different QuPath viewers; 4. Detect cells in a small region in one viewer; 5. Detect cells in a different region in the second viewer; 6. See the cells magically appear in both viewers. **Expected behavior**; It's possible to work with the same image in multiple viewers. **Screenshots**; ![mixed-viewers](https://user-images.githubusercontent.com/4690904/214566216-208471e0-d729-4338-993d-0fa12420f504.png). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (also v0.3.2 and likely other versions); ; **Additional context**; Because it's a tile caching issue, the problem isn't evident when zoomed in (since the tile cache isn't used to paint detections). The issue was first reported at https://forum.image.sc/t/qupath-problem-with-showing-detections-in-multi-view/76334/3. The cell counts etc. should be unaffected. One workaround is to duplicate the underlying image file, so that it has a different key for caching (based upon the file name/path).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1217
https://github.com/qupath/qupath/issues/1217:565,Safety,Detect,Detect,565,"## Bug report. **Describe the bug**; There's a problem with the tile caching v0.3.2 and v0.4.2 (probably other versions) when using the the same image opened in multiple viewers. Basically, detections made in one image can show up in the other. The reason is that tiles that show the detections are being cached using the same key in both viewers, because the underlying image files are the same. **To Reproduce**; 1. Create a project & add an image; 2. Duplicate the image in the project; 3. Open the original image & its duplicate in different QuPath viewers; 4. Detect cells in a small region in one viewer; 5. Detect cells in a different region in the second viewer; 6. See the cells magically appear in both viewers. **Expected behavior**; It's possible to work with the same image in multiple viewers. **Screenshots**; ![mixed-viewers](https://user-images.githubusercontent.com/4690904/214566216-208471e0-d729-4338-993d-0fa12420f504.png). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (also v0.3.2 and likely other versions); ; **Additional context**; Because it's a tile caching issue, the problem isn't evident when zoomed in (since the tile cache isn't used to paint detections). The issue was first reported at https://forum.image.sc/t/qupath-problem-with-showing-detections-in-multi-view/76334/3. The cell counts etc. should be unaffected. One workaround is to duplicate the underlying image file, so that it has a different key for caching (based upon the file name/path).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1217
https://github.com/qupath/qupath/issues/1217:614,Safety,Detect,Detect,614,"## Bug report. **Describe the bug**; There's a problem with the tile caching v0.3.2 and v0.4.2 (probably other versions) when using the the same image opened in multiple viewers. Basically, detections made in one image can show up in the other. The reason is that tiles that show the detections are being cached using the same key in both viewers, because the underlying image files are the same. **To Reproduce**; 1. Create a project & add an image; 2. Duplicate the image in the project; 3. Open the original image & its duplicate in different QuPath viewers; 4. Detect cells in a small region in one viewer; 5. Detect cells in a different region in the second viewer; 6. See the cells magically appear in both viewers. **Expected behavior**; It's possible to work with the same image in multiple viewers. **Screenshots**; ![mixed-viewers](https://user-images.githubusercontent.com/4690904/214566216-208471e0-d729-4338-993d-0fa12420f504.png). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (also v0.3.2 and likely other versions); ; **Additional context**; Because it's a tile caching issue, the problem isn't evident when zoomed in (since the tile cache isn't used to paint detections). The issue was first reported at https://forum.image.sc/t/qupath-problem-with-showing-detections-in-multi-view/76334/3. The cell counts etc. should be unaffected. One workaround is to duplicate the underlying image file, so that it has a different key for caching (based upon the file name/path).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1217
https://github.com/qupath/qupath/issues/1217:1224,Safety,detect,detections,1224,"## Bug report. **Describe the bug**; There's a problem with the tile caching v0.3.2 and v0.4.2 (probably other versions) when using the the same image opened in multiple viewers. Basically, detections made in one image can show up in the other. The reason is that tiles that show the detections are being cached using the same key in both viewers, because the underlying image files are the same. **To Reproduce**; 1. Create a project & add an image; 2. Duplicate the image in the project; 3. Open the original image & its duplicate in different QuPath viewers; 4. Detect cells in a small region in one viewer; 5. Detect cells in a different region in the second viewer; 6. See the cells magically appear in both viewers. **Expected behavior**; It's possible to work with the same image in multiple viewers. **Screenshots**; ![mixed-viewers](https://user-images.githubusercontent.com/4690904/214566216-208471e0-d729-4338-993d-0fa12420f504.png). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (also v0.3.2 and likely other versions); ; **Additional context**; Because it's a tile caching issue, the problem isn't evident when zoomed in (since the tile cache isn't used to paint detections). The issue was first reported at https://forum.image.sc/t/qupath-problem-with-showing-detections-in-multi-view/76334/3. The cell counts etc. should be unaffected. One workaround is to duplicate the underlying image file, so that it has a different key for caching (based upon the file name/path).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1217
https://github.com/qupath/qupath/issues/1217:1322,Safety,detect,detections-in-multi-view,1322,"## Bug report. **Describe the bug**; There's a problem with the tile caching v0.3.2 and v0.4.2 (probably other versions) when using the the same image opened in multiple viewers. Basically, detections made in one image can show up in the other. The reason is that tiles that show the detections are being cached using the same key in both viewers, because the underlying image files are the same. **To Reproduce**; 1. Create a project & add an image; 2. Duplicate the image in the project; 3. Open the original image & its duplicate in different QuPath viewers; 4. Detect cells in a small region in one viewer; 5. Detect cells in a different region in the second viewer; 6. See the cells magically appear in both viewers. **Expected behavior**; It's possible to work with the same image in multiple viewers. **Screenshots**; ![mixed-viewers](https://user-images.githubusercontent.com/4690904/214566216-208471e0-d729-4338-993d-0fa12420f504.png). **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (also v0.3.2 and likely other versions); ; **Additional context**; Because it's a tile caching issue, the problem isn't evident when zoomed in (since the tile cache isn't used to paint detections). The issue was first reported at https://forum.image.sc/t/qupath-problem-with-showing-detections-in-multi-view/76334/3. The cell counts etc. should be unaffected. One workaround is to duplicate the underlying image file, so that it has a different key for caching (based upon the file name/path).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1217
https://github.com/qupath/qupath/pull/1219:33,Modifiability,refactor,refactoring,33,"v0.5.0 should involve some major refactoring of the UI code, to try to make it cleaner and simpler. This draft PR is to help keep track of progress.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1219
https://github.com/qupath/qupath/pull/1219:91,Usability,simpl,simpler,91,"v0.5.0 should involve some major refactoring of the UI code, to try to make it cleaner and simpler. This draft PR is to help keep track of progress.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1219
https://github.com/qupath/qupath/issues/1220:54,Integrability,synchroniz,synchronize,54,"## Bug report. **Describe the bug**; It's possible to synchronize multiple viewers, so that panning and zooming are related. Unfortunately, for z-stacks or time-series the z-slice and timepoint aren't synchronized. See https://forum.image.sc/t/qupath-synchronize-viewers-z-t-lut-and-b-c/76462. **Expected behavior**; z-position and timepoint are considered when synchronizing viewers. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (and probably all earlier versions). **Additional context**; One complexity: should the synchronization handle *offsets* in z and t, or use absolute values?. By this I mean that panning works with 'delta x' and 'delta y', rather than centering the viewers around the same x and y coordinate. This means that if the images don't fully align, some extra steps can be applied to roughly align the viewports before synchronization starts. And all the movement is relative to the viewport when synchronization is turned on. In z and t that could be more difficult, especially since there tend to be few z-slices and timepoints... and it's not possible to navigate beyond these.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1220
https://github.com/qupath/qupath/issues/1220:201,Integrability,synchroniz,synchronized,201,"## Bug report. **Describe the bug**; It's possible to synchronize multiple viewers, so that panning and zooming are related. Unfortunately, for z-stacks or time-series the z-slice and timepoint aren't synchronized. See https://forum.image.sc/t/qupath-synchronize-viewers-z-t-lut-and-b-c/76462. **Expected behavior**; z-position and timepoint are considered when synchronizing viewers. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (and probably all earlier versions). **Additional context**; One complexity: should the synchronization handle *offsets* in z and t, or use absolute values?. By this I mean that panning works with 'delta x' and 'delta y', rather than centering the viewers around the same x and y coordinate. This means that if the images don't fully align, some extra steps can be applied to roughly align the viewports before synchronization starts. And all the movement is relative to the viewport when synchronization is turned on. In z and t that could be more difficult, especially since there tend to be few z-slices and timepoints... and it's not possible to navigate beyond these.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1220
https://github.com/qupath/qupath/issues/1220:251,Integrability,synchroniz,synchronize-viewers-z-t-lut-and-b-c,251,"## Bug report. **Describe the bug**; It's possible to synchronize multiple viewers, so that panning and zooming are related. Unfortunately, for z-stacks or time-series the z-slice and timepoint aren't synchronized. See https://forum.image.sc/t/qupath-synchronize-viewers-z-t-lut-and-b-c/76462. **Expected behavior**; z-position and timepoint are considered when synchronizing viewers. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (and probably all earlier versions). **Additional context**; One complexity: should the synchronization handle *offsets* in z and t, or use absolute values?. By this I mean that panning works with 'delta x' and 'delta y', rather than centering the viewers around the same x and y coordinate. This means that if the images don't fully align, some extra steps can be applied to roughly align the viewports before synchronization starts. And all the movement is relative to the viewport when synchronization is turned on. In z and t that could be more difficult, especially since there tend to be few z-slices and timepoints... and it's not possible to navigate beyond these.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1220
https://github.com/qupath/qupath/issues/1220:362,Integrability,synchroniz,synchronizing,362,"## Bug report. **Describe the bug**; It's possible to synchronize multiple viewers, so that panning and zooming are related. Unfortunately, for z-stacks or time-series the z-slice and timepoint aren't synchronized. See https://forum.image.sc/t/qupath-synchronize-viewers-z-t-lut-and-b-c/76462. **Expected behavior**; z-position and timepoint are considered when synchronizing viewers. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (and probably all earlier versions). **Additional context**; One complexity: should the synchronization handle *offsets* in z and t, or use absolute values?. By this I mean that panning works with 'delta x' and 'delta y', rather than centering the viewers around the same x and y coordinate. This means that if the images don't fully align, some extra steps can be applied to roughly align the viewports before synchronization starts. And all the movement is relative to the viewport when synchronization is turned on. In z and t that could be more difficult, especially since there tend to be few z-slices and timepoints... and it's not possible to navigate beyond these.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1220
https://github.com/qupath/qupath/issues/1220:567,Integrability,synchroniz,synchronization,567,"## Bug report. **Describe the bug**; It's possible to synchronize multiple viewers, so that panning and zooming are related. Unfortunately, for z-stacks or time-series the z-slice and timepoint aren't synchronized. See https://forum.image.sc/t/qupath-synchronize-viewers-z-t-lut-and-b-c/76462. **Expected behavior**; z-position and timepoint are considered when synchronizing viewers. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (and probably all earlier versions). **Additional context**; One complexity: should the synchronization handle *offsets* in z and t, or use absolute values?. By this I mean that panning works with 'delta x' and 'delta y', rather than centering the viewers around the same x and y coordinate. This means that if the images don't fully align, some extra steps can be applied to roughly align the viewports before synchronization starts. And all the movement is relative to the viewport when synchronization is turned on. In z and t that could be more difficult, especially since there tend to be few z-slices and timepoints... and it's not possible to navigate beyond these.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1220
https://github.com/qupath/qupath/issues/1220:890,Integrability,synchroniz,synchronization,890,"## Bug report. **Describe the bug**; It's possible to synchronize multiple viewers, so that panning and zooming are related. Unfortunately, for z-stacks or time-series the z-slice and timepoint aren't synchronized. See https://forum.image.sc/t/qupath-synchronize-viewers-z-t-lut-and-b-c/76462. **Expected behavior**; z-position and timepoint are considered when synchronizing viewers. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (and probably all earlier versions). **Additional context**; One complexity: should the synchronization handle *offsets* in z and t, or use absolute values?. By this I mean that panning works with 'delta x' and 'delta y', rather than centering the viewers around the same x and y coordinate. This means that if the images don't fully align, some extra steps can be applied to roughly align the viewports before synchronization starts. And all the movement is relative to the viewport when synchronization is turned on. In z and t that could be more difficult, especially since there tend to be few z-slices and timepoints... and it's not possible to navigate beyond these.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1220
https://github.com/qupath/qupath/issues/1220:968,Integrability,synchroniz,synchronization,968,"## Bug report. **Describe the bug**; It's possible to synchronize multiple viewers, so that panning and zooming are related. Unfortunately, for z-stacks or time-series the z-slice and timepoint aren't synchronized. See https://forum.image.sc/t/qupath-synchronize-viewers-z-t-lut-and-b-c/76462. **Expected behavior**; z-position and timepoint are considered when synchronizing viewers. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: v0.4.2 (and probably all earlier versions). **Additional context**; One complexity: should the synchronization handle *offsets* in z and t, or use absolute values?. By this I mean that panning works with 'delta x' and 'delta y', rather than centering the viewers around the same x and y coordinate. This means that if the images don't fully align, some extra steps can be applied to roughly align the viewports before synchronization starts. And all the movement is relative to the viewport when synchronization is turned on. In z and t that could be more difficult, especially since there tend to be few z-slices and timepoints... and it's not possible to navigate beyond these.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1220
https://github.com/qupath/qupath/issues/1224:409,Availability,error,error,409,"I created a bunch of annotations by first using the pixel classifier and then ""create objects."" I want to quantify the cells in my image but the object creator clumped some together. When I go in and try to split these annotations, I click ""unlock"" but the software will only sometimes (maybe about a third of the time) give me the draggable points that I can then use to edit the annotation and split it. No error is returned or anything, I'm just unable to edit the annotation despite unlocking it in most cases. There doesn't seem to be any pattern to describe when it will work and when it won't. I'm on Windows 10 using v0.4.2.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1224
https://github.com/qupath/qupath/pull/1225:12,Deployability,release,release,12,"Current LTS release, enables some new features",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1225
https://github.com/qupath/qupath/issues/1226:691,Modifiability,plugin,plugins,691,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/possible-bug-in-tiles-classification-to-annotations/76912. **Expected behavior**; It should work... **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.2 (probably also 0.4.0 and 0.4.1). **Additional context**; The source of the problem is that the parameter list is serialized differently. Because one of the parameters is a `PathClass`, it ends up being serialized as a JSON object - rather than a String as before. This means that the scripting syntax from v0.3.2 still works, e.g. you should be able to run this as a script in v0.4.2 successfully:; ```groovy; runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": false, ""clearAnnotations"": true, ""splitAnnotations"": false}');; ```. Therefore the workaround for now is to call the command via a script like this.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1226
https://github.com/qupath/qupath/issues/1226:801,Usability,clear,clearAnnotations,801,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/possible-bug-in-tiles-classification-to-annotations/76912. **Expected behavior**; It should work... **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.2 (probably also 0.4.0 and 0.4.1). **Additional context**; The source of the problem is that the parameter list is serialized differently. Because one of the parameters is a `PathClass`, it ends up being serialized as a JSON object - rather than a String as before. This means that the scripting syntax from v0.3.2 still works, e.g. you should be able to run this as a script in v0.4.2 successfully:; ```groovy; runPlugin('qupath.lib.plugins.objects.TileClassificationsToAnnotationsPlugin', '{""pathClass"": ""All classes"", ""deleteTiles"": false, ""clearAnnotations"": true, ""splitAnnotations"": false}');; ```. Therefore the workaround for now is to call the command via a script like this.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1226
https://github.com/qupath/qupath/issues/1228:6,Deployability,install,installation,6,"After installation you get an message ""Qupath"" is damaged and can't be opened. ![Screenshot 2023-02-07 at 11 56 23](https://user-images.githubusercontent.com/10047748/217226474-76131924-91e9-47a4-8478-0b8351d51e2f.png). Fix for now is control-click on QuPath Application and select Open",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1228
https://github.com/qupath/qupath/issues/1228:30,Integrability,message,message,30,"After installation you get an message ""Qupath"" is damaged and can't be opened. ![Screenshot 2023-02-07 at 11 56 23](https://user-images.githubusercontent.com/10047748/217226474-76131924-91e9-47a4-8478-0b8351d51e2f.png). Fix for now is control-click on QuPath Application and select Open",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1228
https://github.com/qupath/qupath/pull/1230:52,Deployability,update,update,52,"* Add `LocaleListener` class to make it possible to update text properties automatically when the locale is changed; * Externalize strings for preference pane; * Introduce annotations to use when adding new preferences; * Update dependencies, including Bio-Formats 6.12.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1230
https://github.com/qupath/qupath/pull/1230:222,Deployability,Update,Update,222,"* Add `LocaleListener` class to make it possible to update text properties automatically when the locale is changed; * Externalize strings for preference pane; * Introduce annotations to use when adding new preferences; * Update dependencies, including Bio-Formats 6.12.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1230
https://github.com/qupath/qupath/pull/1230:229,Integrability,depend,dependencies,229,"* Add `LocaleListener` class to make it possible to update text properties automatically when the locale is changed; * Externalize strings for preference pane; * Introduce annotations to use when adding new preferences; * Update dependencies, including Bio-Formats 6.12.0",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1230
https://github.com/qupath/qupath/issues/1232:371,Testability,Log,Log,371,"## Feature request. Inspired by https://forum.image.sc/t/launching-qupath-by-opening-a-groovy-script-with-qupath/77432 with some extras. * Support opening scripts (not just images) from the command line; * This will at least enable scripts to be opened easily during development/debugging; * Explore whether QuPath can/should support .groovy files as a file extension; * Log a warning if the user *probably* wants to run a script, but doesn't use the `script` subcommand; * This is a common misunderstanding https://forum.image.sc/search?q=qupath%20script%20subcommand",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1232
https://github.com/qupath/qupath/pull/1235:19,Testability,test,tests,19,More ParameterList tests should be added if the class survives to v0.5,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1235
https://github.com/qupath/qupath/issues/1236:283,Availability,avail,available,283,"## Feature request. Previous QuPath releases could use Bio-Formats' memoization to help with creating new file readers, at least when the initialization time was slow: https://bio-formats.readthedocs.io/en/latest/developers/matlab-dev.html#improving-reading-performance. This wasn't available in QuPath v0.4.0-v0.4.2 because we switched to Java 17, and [memoization was broken there](https://github.com/ome/bioformats/issues/3659#issuecomment-805134072). This is fixed in Bio-Formats 6.12.0, so we can reinstate it again. ### Effects of memoization. When opening an image with Bio-Formats, QuPath uses multiple Bio-Formats readers to access pixels in parallel. Each reader needs to be initialized. Generally this is fast, but sometimes (e.g. with certain files or file types) it is slow. In one particularly bad case (a very large .czi file) I've seen it take minutes. Memoization makes it possible to create `.bfmemo` files the first time a reader is created, so that subsequent readers can use these for faster initialization. ### Turning on memoization. Because memoization involves writing files to disk, users might not always want it. QuPath provides two preferences to control this:. * **Bio-Formats memoization time (ms)** If less than 0, don't use memoization. If >= 0, create a memoization file only if initialization of a reader takes longer than the specified milliseconds. If initialization is fast anyway, memoization is pretty pointless.; * **Bio-Formats memoization directory** If specified, store memoization files in here. Then they are persistent, and available when QuPath is reopened. *Otherwise*, store any memoization files in a temporary directory and delete the directory when QuPath is shut down. ### Default behavior. The default behavior (at least in v0.3.0 - v0.4.2) was to specify a memoization time of 500 ms, and not to specify a directory (i.e. only use temporary files). Upon inspection, it seems that this still creates temporary directories even if no `.bfmemo` fil",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1236
https://github.com/qupath/qupath/issues/1236:1571,Availability,avail,available,1571,"with Bio-Formats, QuPath uses multiple Bio-Formats readers to access pixels in parallel. Each reader needs to be initialized. Generally this is fast, but sometimes (e.g. with certain files or file types) it is slow. In one particularly bad case (a very large .czi file) I've seen it take minutes. Memoization makes it possible to create `.bfmemo` files the first time a reader is created, so that subsequent readers can use these for faster initialization. ### Turning on memoization. Because memoization involves writing files to disk, users might not always want it. QuPath provides two preferences to control this:. * **Bio-Formats memoization time (ms)** If less than 0, don't use memoization. If >= 0, create a memoization file only if initialization of a reader takes longer than the specified milliseconds. If initialization is fast anyway, memoization is pretty pointless.; * **Bio-Formats memoization directory** If specified, store memoization files in here. Then they are persistent, and available when QuPath is reopened. *Otherwise*, store any memoization files in a temporary directory and delete the directory when QuPath is shut down. ### Default behavior. The default behavior (at least in v0.3.0 - v0.4.2) was to specify a memoization time of 500 ms, and not to specify a directory (i.e. only use temporary files). Upon inspection, it seems that this still creates temporary directories even if no `.bfmemo` files are ever written. Therefore the proposed default behavior for v0.4.3 onwards is to specify a memoization time of -1 (i.e. it's turned off by default). This errs on the side of not creating temp files, and is further justified by the fact that memoization was already missing in v0.4.0 - v0.4.2 anyway (due to the use of Bio-Formats 6.11 and Java 17). Therefore turning into a feature that explicitly requires opting-in doesn't represent a change of default behavior across the v0.4.x releases. ### Turning memoization off (known issue!). To turn off memoization, you'd ",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1236
https://github.com/qupath/qupath/issues/1236:1717,Availability,down,down,1717,"ch reader needs to be initialized. Generally this is fast, but sometimes (e.g. with certain files or file types) it is slow. In one particularly bad case (a very large .czi file) I've seen it take minutes. Memoization makes it possible to create `.bfmemo` files the first time a reader is created, so that subsequent readers can use these for faster initialization. ### Turning on memoization. Because memoization involves writing files to disk, users might not always want it. QuPath provides two preferences to control this:. * **Bio-Formats memoization time (ms)** If less than 0, don't use memoization. If >= 0, create a memoization file only if initialization of a reader takes longer than the specified milliseconds. If initialization is fast anyway, memoization is pretty pointless.; * **Bio-Formats memoization directory** If specified, store memoization files in here. Then they are persistent, and available when QuPath is reopened. *Otherwise*, store any memoization files in a temporary directory and delete the directory when QuPath is shut down. ### Default behavior. The default behavior (at least in v0.3.0 - v0.4.2) was to specify a memoization time of 500 ms, and not to specify a directory (i.e. only use temporary files). Upon inspection, it seems that this still creates temporary directories even if no `.bfmemo` files are ever written. Therefore the proposed default behavior for v0.4.3 onwards is to specify a memoization time of -1 (i.e. it's turned off by default). This errs on the side of not creating temp files, and is further justified by the fact that memoization was already missing in v0.4.0 - v0.4.2 anyway (due to the use of Bio-Formats 6.11 and Java 17). Therefore turning into a feature that explicitly requires opting-in doesn't represent a change of default behavior across the v0.4.x releases. ### Turning memoization off (known issue!). To turn off memoization, you'd ideally enter `-1` in **Bio-Formats memoization time (ms)**. Unfortunately, you can only ty",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1236
https://github.com/qupath/qupath/issues/1236:36,Deployability,release,releases,36,"## Feature request. Previous QuPath releases could use Bio-Formats' memoization to help with creating new file readers, at least when the initialization time was slow: https://bio-formats.readthedocs.io/en/latest/developers/matlab-dev.html#improving-reading-performance. This wasn't available in QuPath v0.4.0-v0.4.2 because we switched to Java 17, and [memoization was broken there](https://github.com/ome/bioformats/issues/3659#issuecomment-805134072). This is fixed in Bio-Formats 6.12.0, so we can reinstate it again. ### Effects of memoization. When opening an image with Bio-Formats, QuPath uses multiple Bio-Formats readers to access pixels in parallel. Each reader needs to be initialized. Generally this is fast, but sometimes (e.g. with certain files or file types) it is slow. In one particularly bad case (a very large .czi file) I've seen it take minutes. Memoization makes it possible to create `.bfmemo` files the first time a reader is created, so that subsequent readers can use these for faster initialization. ### Turning on memoization. Because memoization involves writing files to disk, users might not always want it. QuPath provides two preferences to control this:. * **Bio-Formats memoization time (ms)** If less than 0, don't use memoization. If >= 0, create a memoization file only if initialization of a reader takes longer than the specified milliseconds. If initialization is fast anyway, memoization is pretty pointless.; * **Bio-Formats memoization directory** If specified, store memoization files in here. Then they are persistent, and available when QuPath is reopened. *Otherwise*, store any memoization files in a temporary directory and delete the directory when QuPath is shut down. ### Default behavior. The default behavior (at least in v0.3.0 - v0.4.2) was to specify a memoization time of 500 ms, and not to specify a directory (i.e. only use temporary files). Upon inspection, it seems that this still creates temporary directories even if no `.bfmemo` fil",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1236
https://github.com/qupath/qupath/issues/1236:2488,Deployability,release,releases,2488,"mo` files the first time a reader is created, so that subsequent readers can use these for faster initialization. ### Turning on memoization. Because memoization involves writing files to disk, users might not always want it. QuPath provides two preferences to control this:. * **Bio-Formats memoization time (ms)** If less than 0, don't use memoization. If >= 0, create a memoization file only if initialization of a reader takes longer than the specified milliseconds. If initialization is fast anyway, memoization is pretty pointless.; * **Bio-Formats memoization directory** If specified, store memoization files in here. Then they are persistent, and available when QuPath is reopened. *Otherwise*, store any memoization files in a temporary directory and delete the directory when QuPath is shut down. ### Default behavior. The default behavior (at least in v0.3.0 - v0.4.2) was to specify a memoization time of 500 ms, and not to specify a directory (i.e. only use temporary files). Upon inspection, it seems that this still creates temporary directories even if no `.bfmemo` files are ever written. Therefore the proposed default behavior for v0.4.3 onwards is to specify a memoization time of -1 (i.e. it's turned off by default). This errs on the side of not creating temp files, and is further justified by the fact that memoization was already missing in v0.4.0 - v0.4.2 anyway (due to the use of Bio-Formats 6.11 and Java 17). Therefore turning into a feature that explicitly requires opting-in doesn't represent a change of default behavior across the v0.4.x releases. ### Turning memoization off (known issue!). To turn off memoization, you'd ideally enter `-1` in **Bio-Formats memoization time (ms)**. Unfortunately, you can only type digits in this field, so `-` won't work. There are two workarounds:; * Copy the text `-1` from elsewhere, and paste it into the field; * Use *Edit &rarr; Reset preferences* to reset all preferences to their default value, which will also reset this",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1236
https://github.com/qupath/qupath/issues/1236:258,Performance,perform,performance,258,"## Feature request. Previous QuPath releases could use Bio-Formats' memoization to help with creating new file readers, at least when the initialization time was slow: https://bio-formats.readthedocs.io/en/latest/developers/matlab-dev.html#improving-reading-performance. This wasn't available in QuPath v0.4.0-v0.4.2 because we switched to Java 17, and [memoization was broken there](https://github.com/ome/bioformats/issues/3659#issuecomment-805134072). This is fixed in Bio-Formats 6.12.0, so we can reinstate it again. ### Effects of memoization. When opening an image with Bio-Formats, QuPath uses multiple Bio-Formats readers to access pixels in parallel. Each reader needs to be initialized. Generally this is fast, but sometimes (e.g. with certain files or file types) it is slow. In one particularly bad case (a very large .czi file) I've seen it take minutes. Memoization makes it possible to create `.bfmemo` files the first time a reader is created, so that subsequent readers can use these for faster initialization. ### Turning on memoization. Because memoization involves writing files to disk, users might not always want it. QuPath provides two preferences to control this:. * **Bio-Formats memoization time (ms)** If less than 0, don't use memoization. If >= 0, create a memoization file only if initialization of a reader takes longer than the specified milliseconds. If initialization is fast anyway, memoization is pretty pointless.; * **Bio-Formats memoization directory** If specified, store memoization files in here. Then they are persistent, and available when QuPath is reopened. *Otherwise*, store any memoization files in a temporary directory and delete the directory when QuPath is shut down. ### Default behavior. The default behavior (at least in v0.3.0 - v0.4.2) was to specify a memoization time of 500 ms, and not to specify a directory (i.e. only use temporary files). Upon inspection, it seems that this still creates temporary directories even if no `.bfmemo` fil",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1236
https://github.com/qupath/qupath/issues/1236:634,Security,access,access,634,"## Feature request. Previous QuPath releases could use Bio-Formats' memoization to help with creating new file readers, at least when the initialization time was slow: https://bio-formats.readthedocs.io/en/latest/developers/matlab-dev.html#improving-reading-performance. This wasn't available in QuPath v0.4.0-v0.4.2 because we switched to Java 17, and [memoization was broken there](https://github.com/ome/bioformats/issues/3659#issuecomment-805134072). This is fixed in Bio-Formats 6.12.0, so we can reinstate it again. ### Effects of memoization. When opening an image with Bio-Formats, QuPath uses multiple Bio-Formats readers to access pixels in parallel. Each reader needs to be initialized. Generally this is fast, but sometimes (e.g. with certain files or file types) it is slow. In one particularly bad case (a very large .czi file) I've seen it take minutes. Memoization makes it possible to create `.bfmemo` files the first time a reader is created, so that subsequent readers can use these for faster initialization. ### Turning on memoization. Because memoization involves writing files to disk, users might not always want it. QuPath provides two preferences to control this:. * **Bio-Formats memoization time (ms)** If less than 0, don't use memoization. If >= 0, create a memoization file only if initialization of a reader takes longer than the specified milliseconds. If initialization is fast anyway, memoization is pretty pointless.; * **Bio-Formats memoization directory** If specified, store memoization files in here. Then they are persistent, and available when QuPath is reopened. *Otherwise*, store any memoization files in a temporary directory and delete the directory when QuPath is shut down. ### Default behavior. The default behavior (at least in v0.3.0 - v0.4.2) was to specify a memoization time of 500 ms, and not to specify a directory (i.e. only use temporary files). Upon inspection, it seems that this still creates temporary directories even if no `.bfmemo` fil",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1236
https://github.com/qupath/qupath/issues/1239:105,Availability,mask,masks,105,"## Bug report. **Describe the bug**; When comparing intensity features computed with square and circular masks using *Show measurement map*, I noticed that there seemed to be a slight shift. Digging into code, the relevant bit is [starts here](https://github.com/qupath/qupath/blob/bb3cdab740836e5f39b6d306ee2ccd5b2740a52d/qupath-core-processing/src/main/java/qupath/lib/algorithms/IntensityFeaturesPlugin.java#L612). Adding a line; ```java; new ImagePlus(""Something"", new FloatProcessor(w, h, pixelImage.getArray(false))).show();; ```; makes it possible to visualize the image in ImageJ. The screenshot suggests there could be an issue of shifting, at least if the width and height of the region is an even number. <img width=""610"" alt=""Screenshot 2023-02-22 at 17 25 32"" src=""https://user-images.githubusercontent.com/4690904/220707461-a26ec296-fc85-48fe-b5a3-caf3c62472ab.png"">. If there is an odd number of pixels, the result looks ok:. <img width=""666"" alt=""Screenshot 2023-02-22 at 17 27 29"" src=""https://user-images.githubusercontent.com/4690904/220707864-6c3a5ffc-7d65-44be-ac48-e74d0c9491c2.png"">. (The contrast was changed differently in each case, to highlight the excluded pixels with NaN values). **Expected behavior**; No apparent shift, regardless of whether there is an even or odd number of pixels in the image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: Probably all up to v0.4.x. **Additional context**; This shouldn't be addressed in an 0.0.x release, since it would change results. But the circular tiles calculation should be revisited for a major release, since 1 pixel could be a substantial shift if the region is small (e.g. a low-resolution tile).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1239
https://github.com/qupath/qupath/issues/1239:1507,Deployability,release,release,1507,"## Bug report. **Describe the bug**; When comparing intensity features computed with square and circular masks using *Show measurement map*, I noticed that there seemed to be a slight shift. Digging into code, the relevant bit is [starts here](https://github.com/qupath/qupath/blob/bb3cdab740836e5f39b6d306ee2ccd5b2740a52d/qupath-core-processing/src/main/java/qupath/lib/algorithms/IntensityFeaturesPlugin.java#L612). Adding a line; ```java; new ImagePlus(""Something"", new FloatProcessor(w, h, pixelImage.getArray(false))).show();; ```; makes it possible to visualize the image in ImageJ. The screenshot suggests there could be an issue of shifting, at least if the width and height of the region is an even number. <img width=""610"" alt=""Screenshot 2023-02-22 at 17 25 32"" src=""https://user-images.githubusercontent.com/4690904/220707461-a26ec296-fc85-48fe-b5a3-caf3c62472ab.png"">. If there is an odd number of pixels, the result looks ok:. <img width=""666"" alt=""Screenshot 2023-02-22 at 17 27 29"" src=""https://user-images.githubusercontent.com/4690904/220707864-6c3a5ffc-7d65-44be-ac48-e74d0c9491c2.png"">. (The contrast was changed differently in each case, to highlight the excluded pixels with NaN values). **Expected behavior**; No apparent shift, regardless of whether there is an even or odd number of pixels in the image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: Probably all up to v0.4.x. **Additional context**; This shouldn't be addressed in an 0.0.x release, since it would change results. But the circular tiles calculation should be revisited for a major release, since 1 pixel could be a substantial shift if the region is small (e.g. a low-resolution tile).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1239
https://github.com/qupath/qupath/issues/1239:1614,Deployability,release,release,1614,"## Bug report. **Describe the bug**; When comparing intensity features computed with square and circular masks using *Show measurement map*, I noticed that there seemed to be a slight shift. Digging into code, the relevant bit is [starts here](https://github.com/qupath/qupath/blob/bb3cdab740836e5f39b6d306ee2ccd5b2740a52d/qupath-core-processing/src/main/java/qupath/lib/algorithms/IntensityFeaturesPlugin.java#L612). Adding a line; ```java; new ImagePlus(""Something"", new FloatProcessor(w, h, pixelImage.getArray(false))).show();; ```; makes it possible to visualize the image in ImageJ. The screenshot suggests there could be an issue of shifting, at least if the width and height of the region is an even number. <img width=""610"" alt=""Screenshot 2023-02-22 at 17 25 32"" src=""https://user-images.githubusercontent.com/4690904/220707461-a26ec296-fc85-48fe-b5a3-caf3c62472ab.png"">. If there is an odd number of pixels, the result looks ok:. <img width=""666"" alt=""Screenshot 2023-02-22 at 17 27 29"" src=""https://user-images.githubusercontent.com/4690904/220707864-6c3a5ffc-7d65-44be-ac48-e74d0c9491c2.png"">. (The contrast was changed differently in each case, to highlight the excluded pixels with NaN values). **Expected behavior**; No apparent shift, regardless of whether there is an even or odd number of pixels in the image. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: Probably all up to v0.4.x. **Additional context**; This shouldn't be addressed in an 0.0.x release, since it would change results. But the circular tiles calculation should be revisited for a major release, since 1 pixel could be a substantial shift if the region is small (e.g. a low-resolution tile).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1239
https://github.com/qupath/qupath/issues/1240:484,Availability,avail,available,484,"## Bug report. **Describe the bug**; Several of QuPath's preferences relate to directories, which can be empty by default. If these have been set once, it isn't possible to reset them back to being empty. **To Reproduce**; Steps to reproduce the behavior:; 1. Go to *Edit &rarr; Preferences...*; 2. Change the *Script directory* preference to a directory containing scripts (e.g. by typing a path, or double-clicking); 3. Check the *Automate* menu to confirm the *Shared scripts* are available; 4. Try to remove the *Script directory* preference by deleting the preference string; 5. Check the *Automate* menu - deleting the string results in the root directory being used. **Expected behavior**; Deleting a directory preference string should set the directory to null, not the root. **Desktop (please complete the following information):**; - OS: Mac (but probably all); - QuPath Version: v0.4.2 (but probably most/all previous)",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1240
https://github.com/qupath/qupath/pull/1243:81,Safety,avoid,avoids,81,* Properties can now be read from `userdirectory/localization`; * PreferencePane avoids recreating editors each time the pane is reopened or the mode is changed,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1243
https://github.com/qupath/qupath/issues/1244:324,Availability,error,error-message-topologyexception,324,"## Enhancement request. The Java Topology Suite option `isOverlayNG` is reported to help overcome some exceptions when manipulating complex geometries. I had intended to turn it on by default in v0.4.0, but it seems not to have happened. The workarounds described here are still required:; https://forum.image.sc/t/stardist-error-message-topologyexception/67708/6. The next QuPath release should ensure that it's really turned on. See https://forum.image.sc/t/error-when-merging-annotations/76738/6",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1244
https://github.com/qupath/qupath/issues/1244:460,Availability,error,error-when-merging-annotations,460,"## Enhancement request. The Java Topology Suite option `isOverlayNG` is reported to help overcome some exceptions when manipulating complex geometries. I had intended to turn it on by default in v0.4.0, but it seems not to have happened. The workarounds described here are still required:; https://forum.image.sc/t/stardist-error-message-topologyexception/67708/6. The next QuPath release should ensure that it's really turned on. See https://forum.image.sc/t/error-when-merging-annotations/76738/6",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1244
https://github.com/qupath/qupath/issues/1244:381,Deployability,release,release,381,"## Enhancement request. The Java Topology Suite option `isOverlayNG` is reported to help overcome some exceptions when manipulating complex geometries. I had intended to turn it on by default in v0.4.0, but it seems not to have happened. The workarounds described here are still required:; https://forum.image.sc/t/stardist-error-message-topologyexception/67708/6. The next QuPath release should ensure that it's really turned on. See https://forum.image.sc/t/error-when-merging-annotations/76738/6",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1244
https://github.com/qupath/qupath/issues/1244:330,Integrability,message,message-topologyexception,330,"## Enhancement request. The Java Topology Suite option `isOverlayNG` is reported to help overcome some exceptions when manipulating complex geometries. I had intended to turn it on by default in v0.4.0, but it seems not to have happened. The workarounds described here are still required:; https://forum.image.sc/t/stardist-error-message-topologyexception/67708/6. The next QuPath release should ensure that it's really turned on. See https://forum.image.sc/t/error-when-merging-annotations/76738/6",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1244
https://github.com/qupath/qupath/issues/1244:3,Modifiability,Enhance,Enhancement,3,"## Enhancement request. The Java Topology Suite option `isOverlayNG` is reported to help overcome some exceptions when manipulating complex geometries. I had intended to turn it on by default in v0.4.0, but it seems not to have happened. The workarounds described here are still required:; https://forum.image.sc/t/stardist-error-message-topologyexception/67708/6. The next QuPath release should ensure that it's really turned on. See https://forum.image.sc/t/error-when-merging-annotations/76738/6",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1244
https://github.com/qupath/qupath/issues/1245:43,Safety,detect,detected,43,"## Bug report. **Describe the bug**; Issue detected when naming a stain vector the same as a built-in channel name (eg. ""Red""). Interferes with brightness/contrast viewing. . **To Reproduce**; Steps to reproduce the behavior:; 1. Set stain vector to ""Red""; 2. Open brightness and contrast and view the ""Red"" channel on its own (select ""Keep settings""); 3. Save and open another image; 4. Return to original image and view the ""Red"" channel on its own, is it consistent to what was seen before?. **Expected behavior**; Brightness and contrast min and max to remain consistent when returning to the image. . **Screenshots**. **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version: 0.4.3. **Additional context**",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1245
https://github.com/qupath/qupath/issues/1246:95,Deployability,update,update,95,## Bug report. **Describe the bug**; Changing the image while the slide label is open does not update the slide label to represent the open image. . **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image and the slide label image; 2. Change to another image; 3. Note the original slide image remains and doesn't update. **Expected behavior**; Slide label image updates to the corresponding image open. **Screenshots**. **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version: 0.4.3. **Additional context**,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1246
https://github.com/qupath/qupath/issues/1246:326,Deployability,update,update,326,## Bug report. **Describe the bug**; Changing the image while the slide label is open does not update the slide label to represent the open image. . **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image and the slide label image; 2. Change to another image; 3. Note the original slide image remains and doesn't update. **Expected behavior**; Slide label image updates to the corresponding image open. **Screenshots**. **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version: 0.4.3. **Additional context**,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1246
https://github.com/qupath/qupath/issues/1246:375,Deployability,update,updates,375,## Bug report. **Describe the bug**; Changing the image while the slide label is open does not update the slide label to represent the open image. . **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image and the slide label image; 2. Change to another image; 3. Note the original slide image remains and doesn't update. **Expected behavior**; Slide label image updates to the corresponding image open. **Screenshots**. **Desktop (please complete the following information):**; - OS: Windows; - QuPath Version: 0.4.3. **Additional context**,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1246
https://github.com/qupath/qupath/issues/1247:1075,Energy Efficiency,reduce,reduced,1075,"## Feature request. **Is your feature request related to a problem? Please describe.**; Currently setting stain vectors or adjusting pre-set ones (like H&E) requires scripting and being run for each image open (or project) to ensure they are all the same. This can get complicated particularly when dealing with multiple different brightfield (other) stain types in one project.; Additionally the ability to share these stain vectors would be useful, other than sharing the script. . **Describe the solution you'd like**; This request is for a way to create these custom stain vectors and retain them within QuPath either as a setting or within the project. ; Additionally, being able to share them with others and allow for them to be imported into QuPath via drag and drop would be very beneficial. . **Describe alternatives you've considered**; Scripting is currently the best option for doing this, but this makes it less accessible to users that are not familiar with scripting. Additionally, the scripting method would require additional processing steps that could be reduced. . **Additional context**; May of missed key design points from discussion, feel free to edit/add!; Spoke about the same sharing functionality being used for fluorescent images but would only really be useful for those with many channels (which also currently uses scripting to set).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1247
https://github.com/qupath/qupath/issues/1247:926,Security,access,accessible,926,"## Feature request. **Is your feature request related to a problem? Please describe.**; Currently setting stain vectors or adjusting pre-set ones (like H&E) requires scripting and being run for each image open (or project) to ensure they are all the same. This can get complicated particularly when dealing with multiple different brightfield (other) stain types in one project.; Additionally the ability to share these stain vectors would be useful, other than sharing the script. . **Describe the solution you'd like**; This request is for a way to create these custom stain vectors and retain them within QuPath either as a setting or within the project. ; Additionally, being able to share them with others and allow for them to be imported into QuPath via drag and drop would be very beneficial. . **Describe alternatives you've considered**; Scripting is currently the best option for doing this, but this makes it less accessible to users that are not familiar with scripting. Additionally, the scripting method would require additional processing steps that could be reduced. . **Additional context**; May of missed key design points from discussion, feel free to edit/add!; Spoke about the same sharing functionality being used for fluorescent images but would only really be useful for those with many channels (which also currently uses scripting to set).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1247
https://github.com/qupath/qupath/issues/1248:716,Energy Efficiency,reduce,reduce,716,"## Feature request. **Is your feature request related to a problem? Please describe.**; QuPath is commonly used for annotation, and the annotations need to be shared with others. My approach is generally to zip up a project folder. The trouble with this is that it's necessary to then:; * Send the zipped project; * Send the original images; * Unzip the project; * Open the unzipped project in QuPath; * Match the URIs to the new image locations. **Describe the solution you'd like**; It would be nice to have a command to *Export project for sharing* that can do the zipping itself. This could include options:; * Include thumbnails; * Since thumbnails can be regenerated automatically by QuPath, removing them can reduce the zipped file size; * Include original images; * This would involve copying the image files directly into a subdirectory of the project, and updating the URIs to make the project fully self-contained. **Describe alternatives you've considered**; The main alternative is to stick with the current method: document the zipping/unzipping process, but don't add anything to QuPath to help. **Additional context**; Some considerations:; * If there are many images, or they are huge, then including them in the zip file might become problematic; * We need to take care with zipping/unzipping (e.g. ensuring we don't allow names with `..` for security reasons, or use an established and secure library implementation); * This approach only really works with the current, filesystem-based project approach. Any command might not be relevant if projects are stored some other way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1248
https://github.com/qupath/qupath/issues/1248:1361,Security,secur,security,1361,"## Feature request. **Is your feature request related to a problem? Please describe.**; QuPath is commonly used for annotation, and the annotations need to be shared with others. My approach is generally to zip up a project folder. The trouble with this is that it's necessary to then:; * Send the zipped project; * Send the original images; * Unzip the project; * Open the unzipped project in QuPath; * Match the URIs to the new image locations. **Describe the solution you'd like**; It would be nice to have a command to *Export project for sharing* that can do the zipping itself. This could include options:; * Include thumbnails; * Since thumbnails can be regenerated automatically by QuPath, removing them can reduce the zipped file size; * Include original images; * This would involve copying the image files directly into a subdirectory of the project, and updating the URIs to make the project fully self-contained. **Describe alternatives you've considered**; The main alternative is to stick with the current method: document the zipping/unzipping process, but don't add anything to QuPath to help. **Additional context**; Some considerations:; * If there are many images, or they are huge, then including them in the zip file might become problematic; * We need to take care with zipping/unzipping (e.g. ensuring we don't allow names with `..` for security reasons, or use an established and secure library implementation); * This approach only really works with the current, filesystem-based project approach. Any command might not be relevant if projects are stored some other way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1248
https://github.com/qupath/qupath/issues/1248:1405,Security,secur,secure,1405,"## Feature request. **Is your feature request related to a problem? Please describe.**; QuPath is commonly used for annotation, and the annotations need to be shared with others. My approach is generally to zip up a project folder. The trouble with this is that it's necessary to then:; * Send the zipped project; * Send the original images; * Unzip the project; * Open the unzipped project in QuPath; * Match the URIs to the new image locations. **Describe the solution you'd like**; It would be nice to have a command to *Export project for sharing* that can do the zipping itself. This could include options:; * Include thumbnails; * Since thumbnails can be regenerated automatically by QuPath, removing them can reduce the zipped file size; * Include original images; * This would involve copying the image files directly into a subdirectory of the project, and updating the URIs to make the project fully self-contained. **Describe alternatives you've considered**; The main alternative is to stick with the current method: document the zipping/unzipping process, but don't add anything to QuPath to help. **Additional context**; Some considerations:; * If there are many images, or they are huge, then including them in the zip file might become problematic; * We need to take care with zipping/unzipping (e.g. ensuring we don't allow names with `..` for security reasons, or use an established and secure library implementation); * This approach only really works with the current, filesystem-based project approach. Any command might not be relevant if projects are stored some other way.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1248
https://github.com/qupath/qupath/issues/1249:602,Availability,error,error,602,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/distances-between-objects-and-annotations/77933. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image; 2. Detect and classify cells (e.g. with *Positive cell detection*); 3. Run *Analyse &rarr; Spatial analysis &rarr; Detect centroid distances 2D*; 4. Check the distance for several objects between themselves and objects with the same class. This is *usually* 0, but can be greater than 0. **Expected behavior**; The distance between an object and itself should always be 0. The underlying issue seems to be a rounding error due to the way the calculation is performed:; https://github.com/qupath/qupath/blob/1368912885c1a191beaea32c28d85a3707f657f8/qupath-core/src/main/java/qupath/lib/analysis/DistanceTools.java#L358. This involved converting objects to points, and the geometries will likely have precision models applied. **Desktop (please complete the following information):**; - OS: Likely all; - QuPath Version: 0.4.3 (but no known relevant changes made recently, so probably earlier versions too). **Additional context**; When fixing this, it may also be possible to make the calculation more efficient by checking for object matches in the source and target list.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1249
https://github.com/qupath/qupath/issues/1249:1186,Energy Efficiency,efficient,efficient,1186,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/distances-between-objects-and-annotations/77933. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image; 2. Detect and classify cells (e.g. with *Positive cell detection*); 3. Run *Analyse &rarr; Spatial analysis &rarr; Detect centroid distances 2D*; 4. Check the distance for several objects between themselves and objects with the same class. This is *usually* 0, but can be greater than 0. **Expected behavior**; The distance between an object and itself should always be 0. The underlying issue seems to be a rounding error due to the way the calculation is performed:; https://github.com/qupath/qupath/blob/1368912885c1a191beaea32c28d85a3707f657f8/qupath-core/src/main/java/qupath/lib/analysis/DistanceTools.java#L358. This involved converting objects to points, and the geometries will likely have precision models applied. **Desktop (please complete the following information):**; - OS: Likely all; - QuPath Version: 0.4.3 (but no known relevant changes made recently, so probably earlier versions too). **Additional context**; When fixing this, it may also be possible to make the calculation more efficient by checking for object matches in the source and target list.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1249
https://github.com/qupath/qupath/issues/1249:642,Performance,perform,performed,642,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/distances-between-objects-and-annotations/77933. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image; 2. Detect and classify cells (e.g. with *Positive cell detection*); 3. Run *Analyse &rarr; Spatial analysis &rarr; Detect centroid distances 2D*; 4. Check the distance for several objects between themselves and objects with the same class. This is *usually* 0, but can be greater than 0. **Expected behavior**; The distance between an object and itself should always be 0. The underlying issue seems to be a rounding error due to the way the calculation is performed:; https://github.com/qupath/qupath/blob/1368912885c1a191beaea32c28d85a3707f657f8/qupath-core/src/main/java/qupath/lib/analysis/DistanceTools.java#L358. This involved converting objects to points, and the geometries will likely have precision models applied. **Desktop (please complete the following information):**; - OS: Likely all; - QuPath Version: 0.4.3 (but no known relevant changes made recently, so probably earlier versions too). **Additional context**; When fixing this, it may also be possible to make the calculation more efficient by checking for object matches in the source and target list.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1249
https://github.com/qupath/qupath/issues/1249:188,Safety,Detect,Detect,188,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/distances-between-objects-and-annotations/77933. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image; 2. Detect and classify cells (e.g. with *Positive cell detection*); 3. Run *Analyse &rarr; Spatial analysis &rarr; Detect centroid distances 2D*; 4. Check the distance for several objects between themselves and objects with the same class. This is *usually* 0, but can be greater than 0. **Expected behavior**; The distance between an object and itself should always be 0. The underlying issue seems to be a rounding error due to the way the calculation is performed:; https://github.com/qupath/qupath/blob/1368912885c1a191beaea32c28d85a3707f657f8/qupath-core/src/main/java/qupath/lib/analysis/DistanceTools.java#L358. This involved converting objects to points, and the geometries will likely have precision models applied. **Desktop (please complete the following information):**; - OS: Likely all; - QuPath Version: 0.4.3 (but no known relevant changes made recently, so probably earlier versions too). **Additional context**; When fixing this, it may also be possible to make the calculation more efficient by checking for object matches in the source and target list.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1249
https://github.com/qupath/qupath/issues/1249:240,Safety,detect,detection,240,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/distances-between-objects-and-annotations/77933. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image; 2. Detect and classify cells (e.g. with *Positive cell detection*); 3. Run *Analyse &rarr; Spatial analysis &rarr; Detect centroid distances 2D*; 4. Check the distance for several objects between themselves and objects with the same class. This is *usually* 0, but can be greater than 0. **Expected behavior**; The distance between an object and itself should always be 0. The underlying issue seems to be a rounding error due to the way the calculation is performed:; https://github.com/qupath/qupath/blob/1368912885c1a191beaea32c28d85a3707f657f8/qupath-core/src/main/java/qupath/lib/analysis/DistanceTools.java#L358. This involved converting objects to points, and the geometries will likely have precision models applied. **Desktop (please complete the following information):**; - OS: Likely all; - QuPath Version: 0.4.3 (but no known relevant changes made recently, so probably earlier versions too). **Additional context**; When fixing this, it may also be possible to make the calculation more efficient by checking for object matches in the source and target list.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1249
https://github.com/qupath/qupath/issues/1249:300,Safety,Detect,Detect,300,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/distances-between-objects-and-annotations/77933. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image; 2. Detect and classify cells (e.g. with *Positive cell detection*); 3. Run *Analyse &rarr; Spatial analysis &rarr; Detect centroid distances 2D*; 4. Check the distance for several objects between themselves and objects with the same class. This is *usually* 0, but can be greater than 0. **Expected behavior**; The distance between an object and itself should always be 0. The underlying issue seems to be a rounding error due to the way the calculation is performed:; https://github.com/qupath/qupath/blob/1368912885c1a191beaea32c28d85a3707f657f8/qupath-core/src/main/java/qupath/lib/analysis/DistanceTools.java#L358. This involved converting objects to points, and the geometries will likely have precision models applied. **Desktop (please complete the following information):**; - OS: Likely all; - QuPath Version: 0.4.3 (but no known relevant changes made recently, so probably earlier versions too). **Additional context**; When fixing this, it may also be possible to make the calculation more efficient by checking for object matches in the source and target list.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1249
https://github.com/qupath/qupath/issues/1250:5,Availability,down,downloaded,5,"i've downloaded version 0.4.3 but when selecting it in the Finder it claims to be version 1 (in Quick Look, Column View and Get Info):; <img width=""253"" alt=""Screenshot 2023-03-04 at 21 43 05"" src=""https://user-images.githubusercontent.com/1261954/222927870-ef6175d8-5665-46f3-b300-b60ad2eedd7a.png"">; <img width=""243"" alt=""Screenshot 2023-03-04 at 21 43 10"" src=""https://user-images.githubusercontent.com/1261954/222927871-494add8b-cbda-45ca-aafd-2f6b31fe19ae.png"">. the CFBundleVersion and CFBundleShortVersionString entries in your Info.plist file are damaged",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1250
https://github.com/qupath/qupath/issues/1251:707,Deployability,update,updated,707,"## Bug report. **Describe the bug**; `ProjectCommands.promptToImportImages` claims to return a list of imported images, but it appears that it does not. **To Reproduce**; Steps to reproduce the behavior:; 1. Run in an IDE using debug mode, with a breakpoint around https://github.com/qupath/qupath/blob/f2a1f9c002726f1ee14c5685bf1ea67f4051f8d7/qupath-gui-fx/src/main/java/qupath/lib/gui/QuPathGUI.java#L3170; 2. Open a project; 3. Drag a new image onto the project and agree to import it; 4. Check the list contains the image (spoiler: it doesn't). **Expected behavior**; A list is returned, as the docs suggest it should. Or, if not possible (because the import is delayed), the method signature should be updated or there should be an async version explicitly provided. **Desktop (please complete the following information):**; - OS: All, presumably; - QuPath Version: v0.4.3 (and likely before). **Additional context**; Reported by @Rdornier at at https://forum.image.sc/t/prompttoimportimages-returns-empty-list-of-images/78112",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1251
https://github.com/qupath/qupath/issues/1254:1119,Availability,down,downsample,1119,"## IMPORTANT!. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**. When exporting the following image ( https://matthews.sites.wfu.edu/misc/graphics/formats/uncompr.tif) using the OME Tiff option the resulting file has the wrong color format causing it to be unreadable by other applications and viewers. . I'm not sure if it is all images but it happened with every one I tried. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image (eg https://matthews.sites.wfu.edu/misc/graphics/formats/uncompr.tif); 2. Go to File Export -> OME Tiff and use default options (JPEG (lossy) downsample, 4.0, 256) ; 3. Attempt to open exported file in another image viewer (eg Kirta); 4. See error. **Expected behavior**. The image should be readable by other viewers that support tifs. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: Ubuntu; - QuPath Version: 0.4.3. **Additional context**. As discussed here https://github.com/libvips/libvips/issues/3397 changing the PhotometricInterpretation to YCrCb causes images to be displayed properly.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1254
https://github.com/qupath/qupath/issues/1254:1219,Availability,error,error,1219,"## IMPORTANT!. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**. When exporting the following image ( https://matthews.sites.wfu.edu/misc/graphics/formats/uncompr.tif) using the OME Tiff option the resulting file has the wrong color format causing it to be unreadable by other applications and viewers. . I'm not sure if it is all images but it happened with every one I tried. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image (eg https://matthews.sites.wfu.edu/misc/graphics/formats/uncompr.tif); 2. Go to File Export -> OME Tiff and use default options (JPEG (lossy) downsample, 4.0, 256) ; 3. Attempt to open exported file in another image viewer (eg Kirta); 4. See error. **Expected behavior**. The image should be readable by other viewers that support tifs. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: Ubuntu; - QuPath Version: 0.4.3. **Additional context**. As discussed here https://github.com/libvips/libvips/issues/3397 changing the PhotometricInterpretation to YCrCb causes images to be displayed properly.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1254
https://github.com/qupath/qupath/issues/1254:278,Deployability,release,release,278,"## IMPORTANT!. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**. When exporting the following image ( https://matthews.sites.wfu.edu/misc/graphics/formats/uncompr.tif) using the OME Tiff option the resulting file has the wrong color format causing it to be unreadable by other applications and viewers. . I'm not sure if it is all images but it happened with every one I tried. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image (eg https://matthews.sites.wfu.edu/misc/graphics/formats/uncompr.tif); 2. Go to File Export -> OME Tiff and use default options (JPEG (lossy) downsample, 4.0, 256) ; 3. Attempt to open exported file in another image viewer (eg Kirta); 4. See error. **Expected behavior**. The image should be readable by other viewers that support tifs. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: Ubuntu; - QuPath Version: 0.4.3. **Additional context**. As discussed here https://github.com/libvips/libvips/issues/3397 changing the PhotometricInterpretation to YCrCb causes images to be displayed properly.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1254
https://github.com/qupath/qupath/issues/1254:474,Deployability,release,release,474,"## IMPORTANT!. ## Before we begin... Before submitting your bug report, please check the following:. * [ ] I've definitely found a bug (it you're not sure, please use [image.sc](https://forum.image.sc/tags/qupath) instead); * [ ] I've checked https://qupath.github.io for a new release that might already have fixed the issue; * [ ] I've checked the [Changelog](https://github.com/qupath/qupath/blob/master/CHANGELOG.md) to see if the bug has already been fixed in the next release; * [ ] I've checked for existing GitHub issues describing the same problem. ## Bug report. **Describe the bug**. When exporting the following image ( https://matthews.sites.wfu.edu/misc/graphics/formats/uncompr.tif) using the OME Tiff option the resulting file has the wrong color format causing it to be unreadable by other applications and viewers. . I'm not sure if it is all images but it happened with every one I tried. **To Reproduce**; Steps to reproduce the behavior:; 1. Open an image (eg https://matthews.sites.wfu.edu/misc/graphics/formats/uncompr.tif); 2. Go to File Export -> OME Tiff and use default options (JPEG (lossy) downsample, 4.0, 256) ; 3. Attempt to open exported file in another image viewer (eg Kirta); 4. See error. **Expected behavior**. The image should be readable by other viewers that support tifs. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: Ubuntu; - QuPath Version: 0.4.3. **Additional context**. As discussed here https://github.com/libvips/libvips/issues/3397 changing the PhotometricInterpretation to YCrCb causes images to be displayed properly.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1254
https://github.com/qupath/qupath/pull/1255:17,Deployability,Update,Update,17,Main changes:; * Update to JavaFX 20; * Fix for https://github.com/qupath/qupath/issues/1252; * Many fixes suggested by IntelliJ,MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/pull/1255
https://github.com/qupath/qupath/issues/1258:156,Energy Efficiency,reduce,reduced,156,"## Bug report. **Describe the bug**; See https://forum.image.sc/t/minor-qol-request-change-from-v0-4-3/79159. This is an unintentional regression, probably reduced when fixing previous bugs related to caret positioning. **To Reproduce**; Steps to reproduce the behavior:; 1. Open QuPath; 2. Drag a Groovy file (ideally a long one) onto the UI to open it. **Expected behavior**; When a file is opened for the first time, the caret is at the first position. **Desktop (please complete the following information):**; - OS: All; - QuPath Version: 0.4.x",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1258
https://github.com/qupath/qupath/issues/1260:318,Deployability,install,installing-extensions,318,"## Feature request. **Is your feature request related to a problem? Please describe.**; QuPath currently requires the extension path to be set explicitly - even if the default path already exists. This can sometimes be annoying. See https://forum.image.sc/t/default-extension-location-unset-by-default-problem-for-pre-installing-extensions/79594. **Describe the solution you'd like**. Proposed solution:. On startup, QuPath should check if there is an extension path set. If there is not, then it should check if a directory corresponding to the default path exists.; * If yes, ask the user whether to use this path; * If no, continue silently. Note that if the user does not want to use the path, there should be an option to select another path or to not ask again - otherwise the prompt will appear every time the software is started. **Describe alternatives you've considered**; 1. The default path could always be used if the directory exists, even if the path hasn't been specified.; * This could be troublesome, because it means that extensions might be installed unintentionally. In the worst cases, if an extension is causing the problems that resulted in the QuPath reinstallation, then startup might fail.; 2. There could be an option to set the extension path (including to the default) from the command line, which could be applied post-install.; * This is already somewhat possible with a one-line script, see https://forum.image.sc/t/qupath-extension-folder-on-distant-server/78190/2?u=petebankhead. **Additional context**; An idea from the forum post was to set the extension path during installation, but I don't think there's a way to modify the installer sufficiently to get that to work.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1260
https://github.com/qupath/qupath/issues/1260:1061,Deployability,install,installed,1061,"## Feature request. **Is your feature request related to a problem? Please describe.**; QuPath currently requires the extension path to be set explicitly - even if the default path already exists. This can sometimes be annoying. See https://forum.image.sc/t/default-extension-location-unset-by-default-problem-for-pre-installing-extensions/79594. **Describe the solution you'd like**. Proposed solution:. On startup, QuPath should check if there is an extension path set. If there is not, then it should check if a directory corresponding to the default path exists.; * If yes, ask the user whether to use this path; * If no, continue silently. Note that if the user does not want to use the path, there should be an option to select another path or to not ask again - otherwise the prompt will appear every time the software is started. **Describe alternatives you've considered**; 1. The default path could always be used if the directory exists, even if the path hasn't been specified.; * This could be troublesome, because it means that extensions might be installed unintentionally. In the worst cases, if an extension is causing the problems that resulted in the QuPath reinstallation, then startup might fail.; 2. There could be an option to set the extension path (including to the default) from the command line, which could be applied post-install.; * This is already somewhat possible with a one-line script, see https://forum.image.sc/t/qupath-extension-folder-on-distant-server/78190/2?u=petebankhead. **Additional context**; An idea from the forum post was to set the extension path during installation, but I don't think there's a way to modify the installer sufficiently to get that to work.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1260
https://github.com/qupath/qupath/issues/1260:1350,Deployability,install,install,1350,"## Feature request. **Is your feature request related to a problem? Please describe.**; QuPath currently requires the extension path to be set explicitly - even if the default path already exists. This can sometimes be annoying. See https://forum.image.sc/t/default-extension-location-unset-by-default-problem-for-pre-installing-extensions/79594. **Describe the solution you'd like**. Proposed solution:. On startup, QuPath should check if there is an extension path set. If there is not, then it should check if a directory corresponding to the default path exists.; * If yes, ask the user whether to use this path; * If no, continue silently. Note that if the user does not want to use the path, there should be an option to select another path or to not ask again - otherwise the prompt will appear every time the software is started. **Describe alternatives you've considered**; 1. The default path could always be used if the directory exists, even if the path hasn't been specified.; * This could be troublesome, because it means that extensions might be installed unintentionally. In the worst cases, if an extension is causing the problems that resulted in the QuPath reinstallation, then startup might fail.; 2. There could be an option to set the extension path (including to the default) from the command line, which could be applied post-install.; * This is already somewhat possible with a one-line script, see https://forum.image.sc/t/qupath-extension-folder-on-distant-server/78190/2?u=petebankhead. **Additional context**; An idea from the forum post was to set the extension path during installation, but I don't think there's a way to modify the installer sufficiently to get that to work.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1260
https://github.com/qupath/qupath/issues/1260:1604,Deployability,install,installation,1604,"## Feature request. **Is your feature request related to a problem? Please describe.**; QuPath currently requires the extension path to be set explicitly - even if the default path already exists. This can sometimes be annoying. See https://forum.image.sc/t/default-extension-location-unset-by-default-problem-for-pre-installing-extensions/79594. **Describe the solution you'd like**. Proposed solution:. On startup, QuPath should check if there is an extension path set. If there is not, then it should check if a directory corresponding to the default path exists.; * If yes, ask the user whether to use this path; * If no, continue silently. Note that if the user does not want to use the path, there should be an option to select another path or to not ask again - otherwise the prompt will appear every time the software is started. **Describe alternatives you've considered**; 1. The default path could always be used if the directory exists, even if the path hasn't been specified.; * This could be troublesome, because it means that extensions might be installed unintentionally. In the worst cases, if an extension is causing the problems that resulted in the QuPath reinstallation, then startup might fail.; 2. There could be an option to set the extension path (including to the default) from the command line, which could be applied post-install.; * This is already somewhat possible with a one-line script, see https://forum.image.sc/t/qupath-extension-folder-on-distant-server/78190/2?u=petebankhead. **Additional context**; An idea from the forum post was to set the extension path during installation, but I don't think there's a way to modify the installer sufficiently to get that to work.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1260
https://github.com/qupath/qupath/issues/1260:1664,Deployability,install,installer,1664,"## Feature request. **Is your feature request related to a problem? Please describe.**; QuPath currently requires the extension path to be set explicitly - even if the default path already exists. This can sometimes be annoying. See https://forum.image.sc/t/default-extension-location-unset-by-default-problem-for-pre-installing-extensions/79594. **Describe the solution you'd like**. Proposed solution:. On startup, QuPath should check if there is an extension path set. If there is not, then it should check if a directory corresponding to the default path exists.; * If yes, ask the user whether to use this path; * If no, continue silently. Note that if the user does not want to use the path, there should be an option to select another path or to not ask again - otherwise the prompt will appear every time the software is started. **Describe alternatives you've considered**; 1. The default path could always be used if the directory exists, even if the path hasn't been specified.; * This could be troublesome, because it means that extensions might be installed unintentionally. In the worst cases, if an extension is causing the problems that resulted in the QuPath reinstallation, then startup might fail.; 2. There could be an option to set the extension path (including to the default) from the command line, which could be applied post-install.; * This is already somewhat possible with a one-line script, see https://forum.image.sc/t/qupath-extension-folder-on-distant-server/78190/2?u=petebankhead. **Additional context**; An idea from the forum post was to set the extension path during installation, but I don't think there's a way to modify the installer sufficiently to get that to work.",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1260
https://github.com/qupath/qupath/issues/1262:937,Availability,FAILURE,FAILURE,937,"## Bug report. **Describe the bug**; fail to build qupath with openjdk on ArchLinux. **To Reproduce**; Steps to reproduce the behavior:; ```bash; cd qupath-0.4.3; gradle clean jpackage -Porg.gradle.java.home=/usr/lib/jvm/default; ```. **Expected behavior**; success to build qupath 0.4.3. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: ArchLinux; - QuPath Version: 0.4.3; - java: jdk-openjdk 20.0.1.u9-3; - gradle: 8.1.1. **Additional context**; logs:; ```text; > Configure project :qupath-app; Unable to determine Java version from toolchain: No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}.; Unable to determine Java version from toolchain: No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}. FAILURE: Build failed with an exception. * Where:; Build file '/build/qupath/src/qupath-0.4.3/qupath-app/build.gradle' line: 540. * What went wrong:; A problem occurred configuring project ':qupath-app'.; > Failed to calculate the value of task ':qupath-app:compileJava' property 'javaCompiler'.; > No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}.; > No locally installed toolchains match (see https://docs.gradle.org/8.1.1/userguide/toolchains.html#sec:auto_detection) and toolchain download repositories have not been configured (see https://docs.gradle.org/8.1.1/userguide/toolchains.html#sub:download_repositories).; ```; It seems related to how we specify the toolchain, https://github.com/qupath/qupath/blob/1368912885c1a191beaea32c28d85a3707f657f8/qupath-app/build.gradle#L535-L548; Maybe, we could follow this: https://github.com/Project-MONAI/MONAILabel/blob/0332f42643015046055a3410b770d1e8a0e1bd57/plugins/qupath/build.gradle#L39-L51; Just add a project property `toolchain` wit",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1262
https://github.com/qupath/qupath/issues/1262:1496,Availability,down,download,1496,"ps to reproduce the behavior:; ```bash; cd qupath-0.4.3; gradle clean jpackage -Porg.gradle.java.home=/usr/lib/jvm/default; ```. **Expected behavior**; success to build qupath 0.4.3. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: ArchLinux; - QuPath Version: 0.4.3; - java: jdk-openjdk 20.0.1.u9-3; - gradle: 8.1.1. **Additional context**; logs:; ```text; > Configure project :qupath-app; Unable to determine Java version from toolchain: No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}.; Unable to determine Java version from toolchain: No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}. FAILURE: Build failed with an exception. * Where:; Build file '/build/qupath/src/qupath-0.4.3/qupath-app/build.gradle' line: 540. * What went wrong:; A problem occurred configuring project ':qupath-app'.; > Failed to calculate the value of task ':qupath-app:compileJava' property 'javaCompiler'.; > No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}.; > No locally installed toolchains match (see https://docs.gradle.org/8.1.1/userguide/toolchains.html#sec:auto_detection) and toolchain download repositories have not been configured (see https://docs.gradle.org/8.1.1/userguide/toolchains.html#sub:download_repositories).; ```; It seems related to how we specify the toolchain, https://github.com/qupath/qupath/blob/1368912885c1a191beaea32c28d85a3707f657f8/qupath-app/build.gradle#L535-L548; Maybe, we could follow this: https://github.com/Project-MONAI/MONAILabel/blob/0332f42643015046055a3410b770d1e8a0e1bd57/plugins/qupath/build.gradle#L39-L51; Just add a project property `toolchain` with a default value, so user could specify it with `-Ptoolchain=20` or simply use the default one (eg. 17).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1262
https://github.com/qupath/qupath/issues/1262:1374,Deployability,install,installed,1374,"ps to reproduce the behavior:; ```bash; cd qupath-0.4.3; gradle clean jpackage -Porg.gradle.java.home=/usr/lib/jvm/default; ```. **Expected behavior**; success to build qupath 0.4.3. **Screenshots**; If applicable, add screenshots to help explain your problem. **Desktop (please complete the following information):**; - OS: ArchLinux; - QuPath Version: 0.4.3; - java: jdk-openjdk 20.0.1.u9-3; - gradle: 8.1.1. **Additional context**; logs:; ```text; > Configure project :qupath-app; Unable to determine Java version from toolchain: No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}.; Unable to determine Java version from toolchain: No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}. FAILURE: Build failed with an exception. * Where:; Build file '/build/qupath/src/qupath-0.4.3/qupath-app/build.gradle' line: 540. * What went wrong:; A problem occurred configuring project ':qupath-app'.; > Failed to calculate the value of task ':qupath-app:compileJava' property 'javaCompiler'.; > No matching toolchains found for requested specification: {languageVersion=17, vendor=any, implementation=vendor-specific}.; > No locally installed toolchains match (see https://docs.gradle.org/8.1.1/userguide/toolchains.html#sec:auto_detection) and toolchain download repositories have not been configured (see https://docs.gradle.org/8.1.1/userguide/toolchains.html#sub:download_repositories).; ```; It seems related to how we specify the toolchain, https://github.com/qupath/qupath/blob/1368912885c1a191beaea32c28d85a3707f657f8/qupath-app/build.gradle#L535-L548; Maybe, we could follow this: https://github.com/Project-MONAI/MONAILabel/blob/0332f42643015046055a3410b770d1e8a0e1bd57/plugins/qupath/build.gradle#L39-L51; Just add a project property `toolchain` with a default value, so user could specify it with `-Ptoolchain=20` or simply use the default one (eg. 17).",MatchSource.ISSUE,qupath,qupath,v0.5.1,https://qupath.github.io,https://github.com/qupath/qupath/issues/1262
