id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://psicode.org/psi4manual/1.7.x/api/psi4.core.PsiReturnType.html:619,Deployability,update,updated,619,"﻿. PsiReturnType. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; PsiReturnType. PsiReturnType¶. class psi4.core.PsiReturnType¶; Bases: pybind11_object; Return status.; Members:. Success; Failure. Attributes Summary. Failure. Success. name. value. Attributes Documentation. Failure = <PsiReturnType.Failure: 1>¶. Success = <PsiReturnType.Success: 0>¶. name¶. value¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; PsiReturnType. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.PsiReturnType.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.PsiReturnType.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.psi_top_srcdir.html:429,Deployability,update,updated,429,"﻿. psi_top_srcdir. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; psi_top_srcdir. psi_top_srcdir¶. psi4.core.psi_top_srcdir() → str¶; Returns the location of the source code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; psi_top_srcdir. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.psi_top_srcdir.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.psi_top_srcdir.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.QuadrupoleInt.html:433,Deployability,update,updated,433,"﻿. QuadrupoleInt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QuadrupoleInt. QuadrupoleInt¶. class psi4.core.QuadrupoleInt¶; Bases: OneBodyAOInt; Computes quadrupole integrals. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QuadrupoleInt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.QuadrupoleInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.QuadrupoleInt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.reopen_outfile.html:414,Deployability,update,updated,414,"﻿. reopen_outfile. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; reopen_outfile. reopen_outfile¶. psi4.core.reopen_outfile() → None¶; Reopens the output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; reopen_outfile. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.reopen_outfile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.reopen_outfile.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.revoke_global_option_changed.html:826,Deployability,update,updated,826,"﻿. revoke_global_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_global_option_changed. revoke_global_option_changed¶. psi4.core.revoke_global_option_changed(key: str) → None¶; Clear the touched status for keyword key at global (all-module) scope. Sets the has_changed attribute in the global options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_global_option_changed. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.revoke_global_option_changed.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.revoke_global_option_changed.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.revoke_global_option_changed.html:254,Usability,Clear,Clear,254,"﻿. revoke_global_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_global_option_changed. revoke_global_option_changed¶. psi4.core.revoke_global_option_changed(key: str) → None¶; Clear the touched status for keyword key at global (all-module) scope. Sets the has_changed attribute in the global options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_global_option_changed. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.revoke_global_option_changed.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.revoke_global_option_changed.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.revoke_local_option_changed.html:821,Deployability,update,updated,821,"﻿. revoke_local_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_local_option_changed. revoke_local_option_changed¶. psi4.core.revoke_local_option_changed(module: str, key: str) → None¶; Clear the touched status for keyword key at module scope. Sets the has_changed attribute in the module options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_local_option_changed. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.revoke_local_option_changed.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.revoke_local_option_changed.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.revoke_local_option_changed.html:263,Usability,Clear,Clear,263,"﻿. revoke_local_option_changed. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_local_option_changed. revoke_local_option_changed¶. psi4.core.revoke_local_option_changed(module: str, key: str) → None¶; Clear the touched status for keyword key at module scope. Sets the has_changed attribute in the module options scope to false. Used in python driver when a function sets the value of an option. Before the function exits, this command is called on the option so that has_changed reflects whether the user (not the program) has touched the option. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; revoke_local_option_changed. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.revoke_local_option_changed.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.revoke_local_option_changed.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.RHF.html:1142,Deployability,update,updated,1142,"﻿. RHF. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; RHF. RHF¶. class psi4.core.RHF¶; Bases: HF; docstring; Methods Summary. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_orbital_gradient(save_fock, ...); docstring. diis(self, arg0); docstring. mintshelper(self); The MintsHelper object. Methods Documentation. c1_deep_copy(self: psi4.core.RHF, basis: psi4.core.BasisSet) → psi4.core.RHF¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_orbital_gradient(save_fock, max_diis_vectors)¶; docstring. Return type:; float. Parameters:. save_fock (bool) – ; max_diis_vectors (int) – . diis(self: psi4.core.HF, arg0: float) → bool¶; docstring. mintshelper(self: psi4.core.RHF) → psi4.core.MintsHelper¶; The MintsHelper object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; RHF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.RHF.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.RHF.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.RKSFunctions.html:410,Deployability,update,updated,410,"﻿. RKSFunctions. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; RKSFunctions. RKSFunctions¶. class psi4.core.RKSFunctions¶; Bases: PointFunctions; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; RKSFunctions. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.RKSFunctions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.RKSFunctions.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.ROHF.html:1871,Deployability,update,updated,1871,"﻿. ROHF. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ROHF. ROHF¶. class psi4.core.ROHF¶; Bases: HF; docstring; Methods Summary. Ct(self); MO coefficients in the orthogonalized MO basis. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_orbital_gradient(save_fock, ...); docstring. diis(self, arg0); docstring. mintshelper(self); The MintsHelper object. moFa(self); docstring. moFb(self); docstring. moFeff(self); docstring. soFeff(self); Returns the effective Fock matrix in the orthogonalized SO basis. Methods Documentation. Ct(self: psi4.core.ROHF) → psi4.core.Matrix¶; MO coefficients in the orthogonalized MO basis. Differs from the standard C matrix by an orthogonalizer matrix. c1_deep_copy(self: psi4.core.ROHF, basis: psi4.core.BasisSet) → psi4.core.ROHF¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_orbital_gradient(save_fock, max_diis_vectors)¶; docstring. Return type:; float. Parameters:. save_fock (bool) – ; max_diis_vectors (int) – . diis(self: psi4.core.HF, arg0: float) → bool¶; docstring. mintshelper(self: psi4.core.ROHF) → psi4.core.MintsHelper¶; The MintsHelper object. moFa(self: psi4.core.ROHF) → psi4.core.Matrix¶; docstring. moFb(self: psi4.core.ROHF) → psi4.core.Matrix¶; docstring. moFeff(self: psi4.core.ROHF) → psi4.core.Matrix¶; docstring. soFeff(self: psi4.core.ROHF) → psi4.core.Matrix¶; Returns the effective Fock matrix in the orthogonalized SO basis. See libscf_solver/rohf.cc::form_Cfor technical definition. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ROHF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.ROHF.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.ROHF.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.run_gdma.html:439,Deployability,update,updated,439,"﻿. run_gdma. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; run_gdma. run_gdma¶. psi4.core.run_gdma(ref_wfn: psi4.core.Wavefunction, datfilename: str) → float¶; Runs the GDMA interface code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; run_gdma. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.run_gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.run_gdma.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.run_gdma.html:230,Integrability,interface,interface,230,"﻿. run_gdma. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; run_gdma. run_gdma¶. psi4.core.run_gdma(ref_wfn: psi4.core.Wavefunction, datfilename: str) → float¶; Runs the GDMA interface code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; run_gdma. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.run_gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.run_gdma.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SADGuess.html:1142,Deployability,update,updated,1142,"﻿. SADGuess. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SADGuess. SADGuess¶. class psi4.core.SADGuess¶; Bases: pybind11_object; docstring; Methods Summary. Ca(self). Cb(self). Da(self). Db(self). build_SAD(arg0, arg1). compute_guess(self). set_atomic_fit_bases(self, arg0). set_debug(self, arg0). set_print(self, arg0). Methods Documentation. Ca(self: psi4.core.SADGuess) → psi4.core.Matrix¶. Cb(self: psi4.core.SADGuess) → psi4.core.Matrix¶. Da(self: psi4.core.SADGuess) → psi4.core.Matrix¶. Db(self: psi4.core.SADGuess) → psi4.core.Matrix¶. static build_SAD(arg0: psi4.core.BasisSet, arg1: List[psi4.core.BasisSet]) → psi4.core.SADGuess¶. compute_guess(self: psi4.core.SADGuess) → None¶. set_atomic_fit_bases(self: psi4.core.SADGuess, arg0: List[psi4.core.BasisSet]) → None¶. set_debug(self: psi4.core.SADGuess, arg0: int) → None¶. set_print(self: psi4.core.SADGuess, arg0: int) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SADGuess. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SADGuess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SADGuess.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SalcComponent.html:869,Deployability,update,updated,869,"﻿. SalcComponent. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SalcComponent. SalcComponent¶. class psi4.core.SalcComponent¶; Bases: pybind11_object; Component of a Cartesian displacement SALC in the basis of atomic displacements.; Attributes Summary. atom; The index of the atom being displaced. coef; The coefficient of the displacement. xyz; The direction of the displacement, given by x as 0, y as 1, z as 2. Attributes Documentation. atom¶; The index of the atom being displaced. 0-indexed. coef¶; The coefficient of the displacement. xyz¶; The direction of the displacement, given by x as 0, y as 1, z as 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SalcComponent. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SalcComponent.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SalcComponent.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.sapt.html:495,Deployability,update,updated,495,"﻿. sapt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; sapt. sapt¶. psi4.core.sapt(dimer_wfn: psi4.core.Wavefunction, monoa_wfn: psi4.core.Wavefunction, monob_wfn: psi4.core.Wavefunction) → float¶; Runs the symmetry adapted perturbation theory code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; sapt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.sapt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.sapt.html:272,Energy Efficiency,adapt,adapted,272,"﻿. sapt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; sapt. sapt¶. psi4.core.sapt(dimer_wfn: psi4.core.Wavefunction, monoa_wfn: psi4.core.Wavefunction, monob_wfn: psi4.core.Wavefunction) → float¶; Runs the symmetry adapted perturbation theory code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; sapt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.sapt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.sapt.html:272,Modifiability,adapt,adapted,272,"﻿. sapt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; sapt. sapt¶. psi4.core.sapt(dimer_wfn: psi4.core.Wavefunction, monoa_wfn: psi4.core.Wavefunction, monob_wfn: psi4.core.Wavefunction) → float¶; Runs the symmetry adapted perturbation theory code. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; sapt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.sapt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SaveType.html:677,Deployability,update,updated,677,"﻿. SaveType. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SaveType. SaveType¶. class psi4.core.SaveType¶; Bases: pybind11_object; The layout of the matrix for saving; Members:. Full; SubBlocks; LowerTriangle. Attributes Summary. Full. LowerTriangle. SubBlocks. name. value. Attributes Documentation. Full = <SaveType.Full: 0>¶. LowerTriangle = <SaveType.LowerTriangle: 2>¶. SubBlocks = <SaveType.SubBlocks: 1>¶. name¶. value¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SaveType. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SaveType.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SaveType.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.scalar_variable.html:476,Deployability,update,updated,476,"﻿. scalar_variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variable. scalar_variable¶. psi4.core.scalar_variable(key: str) → float¶; Returns the double QCVariable key (case-insensitive); prefer variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.scalar_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.scalar_variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.scalar_variable.html:264,Modifiability,variab,variable,264,"﻿. scalar_variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variable. scalar_variable¶. psi4.core.scalar_variable(key: str) → float¶; Returns the double QCVariable key (case-insensitive); prefer variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.scalar_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.scalar_variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.scalar_variables.html:477,Deployability,update,updated,477,"﻿. scalar_variables. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variables. scalar_variables¶. psi4.core.scalar_variables() → Dict[str, float]¶; Returns dictionary of all double QCVariables; prefer variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variables. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.scalar_variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.scalar_variables.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.scalar_variables.html:263,Modifiability,variab,variables,263,"﻿. scalar_variables. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variables. scalar_variables¶. psi4.core.scalar_variables() → Dict[str, float]¶; Returns dictionary of all double QCVariables; prefer variables(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scalar_variables. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.scalar_variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.scalar_variables.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.scatter.html:449,Deployability,update,updated,449,"﻿. scatter. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scatter. scatter¶. psi4.core.scatter(arg0: psi4.core.Molecule, arg1: float, arg2: list, arg3: list, arg4: list) → None¶; New Scatter function. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scatter. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.scatter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.scatter.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.scfgrad.html:448,Deployability,update,updated,448,"﻿. scfgrad. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scfgrad. scfgrad¶. psi4.core.scfgrad(ref_wfn: psi4.core.HF) → psi4.core.Matrix¶; Run scfgrad, which is a specialized DF-SCF gradient program. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scfgrad. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.scfgrad.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.scfgrad.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.scfhess.html:447,Deployability,update,updated,447,"﻿. scfhess. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scfhess. scfhess¶. psi4.core.scfhess(ref_wfn: psi4.core.HF) → psi4.core.Matrix¶; Run scfhess, which is a specialized DF-SCF hessian program. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scfhess. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.scfhess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.scfhess.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_active_molecule.html:528,Deployability,update,updated,528,"﻿. set_active_molecule. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_active_molecule. set_active_molecule¶. psi4.core.set_active_molecule(molecule: psi4.core.Molecule) → None¶; Activates a previously defined molecule in global memory so next computations use it. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_active_molecule. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_active_molecule.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_active_molecule.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_array_variable.html:522,Deployability,update,updated,522,"﻿. set_array_variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_array_variable. set_array_variable¶. psi4.core.set_array_variable(key: str, value: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QCVariable; prefer set_variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_array_variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_array_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_array_variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_datadir.html:441,Deployability,update,updated,441,"﻿. set_datadir. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_datadir. set_datadir¶. psi4.core.set_datadir(psidatadir: str) → None¶; Sets the path to shared text resources, PSIDATADIR. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_datadir. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_datadir.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_datadir.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_global_option.html:832,Deployability,update,updated,832,"﻿. set_global_option. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_global_option. set_global_option¶. psi4.core.set_global_option(*args, **kwargs)¶; Overloaded function. set_global_option(key: str, value: list) -> bool. Sets value to array keyword key for all modules. set_global_option(key: str, value: int) -> bool. Sets value to integer keyword key for all modules. set_global_option(key: str, value: float) -> bool. Sets value to double keyword key for all modules. set_global_option(key: str, value: str) -> bool. Sets value to string keyword key for all modules. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_global_option. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_global_option.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_global_option.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_global_option_python.html:605,Deployability,update,updated,605,"﻿. set_global_option_python. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_global_option_python. set_global_option_python¶. psi4.core.set_global_option_python(key, EXTERN)¶; This is a fairly hacky way to get around EXTERN issues. Effectively we are routing this option Python side through attributes until the general Options overhaul. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_global_option_python. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_global_option_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_global_option_python.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_global_option_python.html:309,Integrability,rout,routing,309,"﻿. set_global_option_python. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_global_option_python. set_global_option_python¶. psi4.core.set_global_option_python(key, EXTERN)¶; This is a fairly hacky way to get around EXTERN issues. Effectively we are routing this option Python side through attributes until the general Options overhaul. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_global_option_python. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_global_option_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_global_option_python.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_local_option.html:935,Deployability,update,updated,935,"﻿. set_local_option. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_local_option. set_local_option¶. psi4.core.set_local_option(*args, **kwargs)¶; Overloaded function. set_local_option(module: str, key: str, value: list) -> bool. Sets value to array keyword key scoped only to specific module. set_local_option(module: str, key: str, value: int) -> bool. Sets value to integer keyword key scoped only to specific module. set_local_option(module: str, key: str, value: float) -> bool. Sets value to double keyword key scoped only to specific module. set_local_option(module: str, key: str, value: str) -> bool. Sets value to string keyword key scoped only to specific module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_local_option. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_local_option.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_local_option.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_local_option_python.html:522,Deployability,update,updated,522,"﻿. set_local_option_python. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_local_option_python. set_local_option_python¶. psi4.core.set_local_option_python(key: str, value: object) → None¶; Sets value to Python keyword key scoped only to a single module. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_local_option_python. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_local_option_python.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_local_option_python.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_memory_bytes.html:246,Availability,avail,available,246,"﻿. set_memory_bytes. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory_bytes. set_memory_bytes¶. psi4.core.set_memory_bytes(memory: int, quiet: bool = False) → None¶; Sets the memory available to Psi (in bytes); prefer psi4.driver.set_memory(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory_bytes. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_memory_bytes.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_memory_bytes.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_memory_bytes.html:509,Deployability,update,updated,509,"﻿. set_memory_bytes. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory_bytes. set_memory_bytes¶. psi4.core.set_memory_bytes(memory: int, quiet: bool = False) → None¶; Sets the memory available to Psi (in bytes); prefer psi4.driver.set_memory(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory_bytes. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_memory_bytes.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_memory_bytes.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_num_threads.html:491,Deployability,update,updated,491,"﻿. set_num_threads. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_num_threads. set_num_threads¶. psi4.core.set_num_threads(nthread: int, quiet: bool = False) → None¶; Sets the number of threads to use in SMP parallel computations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_num_threads. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_num_threads.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_num_threads.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_output_file.html:575,Deployability,update,updated,575,"﻿. set_output_file. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_output_file. set_output_file¶. psi4.core.set_output_file(*args, **kwargs)¶; Overloaded function. set_output_file(arg0: str) -> None; set_output_file(ofname: str, append: bool = False) -> None. Set the name for output file; prefer set_output_file(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_output_file. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_output_file.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_output_file.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_psi_file_prefix.html:444,Deployability,update,updated,444,"﻿. set_psi_file_prefix. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_psi_file_prefix. set_psi_file_prefix¶. psi4.core.set_psi_file_prefix() → None¶. Deprecated since version 1.4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_psi_file_prefix. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_psi_file_prefix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_psi_file_prefix.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_scalar_variable.html:510,Deployability,update,updated,510,"﻿. set_scalar_variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_scalar_variable. set_scalar_variable¶. psi4.core.set_scalar_variable(key: str, value: float) → None¶; Sets the double QCVariable key (case-insensitive); prefer set_variable(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_scalar_variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_scalar_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_scalar_variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_variable.html:948,Deployability,update,updated,948,"﻿. set_variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. set_variable¶. psi4.core.set_variable(key, val)¶; Sets scalar or array QCVariable key to; val in global memory. Parameters:. key (str) – Case-insensitive key to global double or Matrix; storage maps.; val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_variable.html:477,Energy Efficiency,charge,charge,477,"﻿. set_variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. set_variable¶. psi4.core.set_variable(key, val)¶; Sets scalar or array QCVariable key to; val in global memory. Parameters:. key (str) – Case-insensitive key to global double or Matrix; storage maps.; val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_variable.html:653,Modifiability,variab,variable,653,"﻿. set_variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. set_variable¶. psi4.core.set_variable(key, val)¶; Sets scalar or array QCVariable key to; val in global memory. Parameters:. key (str) – Case-insensitive key to global double or Matrix; storage maps.; val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_variable.html:721,Modifiability,variab,variable,721,"﻿. set_variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. set_variable¶. psi4.core.set_variable(key, val)¶; Sets scalar or array QCVariable key to; val in global memory. Parameters:. key (str) – Case-insensitive key to global double or Matrix; storage maps.; val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_variable.html:581,Security,Validat,ValidationError,581,"﻿. set_variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. set_variable¶. psi4.core.set_variable(key, val)¶; Sets scalar or array QCVariable key to; val in global memory. Parameters:. key (str) – Case-insensitive key to global double or Matrix; storage maps.; val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.set_variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.set_variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.ShellInfo.html:385,Deployability,update,updated,385,"﻿. ShellInfo. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ShellInfo. ShellInfo¶. class psi4.core.ShellInfo¶; Bases: pybind11_object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ShellInfo. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.ShellInfo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.ShellInfo.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Slice.html:734,Deployability,update,updated,734,"﻿. Slice. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Slice. Slice¶. class psi4.core.Slice¶; Bases: pybind11_object; Slicing for Matrix and Vector objects; Methods Summary. begin(self); Get the first element of this slice. end(self); Get the past-the-end element of this slice. Methods Documentation. begin(self: psi4.core.Slice) → psi4.core.Dimension¶; Get the first element of this slice. end(self: psi4.core.Slice) → psi4.core.Dimension¶; Get the past-the-end element of this slice. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Slice. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Slice.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Slice.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SOBasisSet.html:742,Deployability,update,updated,742,"﻿. SOBasisSet. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SOBasisSet. SOBasisSet¶. class psi4.core.SOBasisSet¶; Bases: pybind11_object; An SOBasis object describes the transformation from an atomic orbital basis to a symmetry orbital basis.; Methods Summary. petite_list(self); Return the PetiteList object used in creating this SO basis. Methods Documentation. petite_list(self: psi4.core.SOBasisSet) → psi4.core.PetiteList¶; Return the PetiteList object used in creating this SO basis. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SOBasisSet. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SOBasisSet.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SOBasisSet.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SOMCSCF.html:637,Deployability,update,update,637,"﻿. SOMCSCF. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SOMCSCF. SOMCSCF¶. class psi4.core.SOMCSCF¶; Bases: pybind11_object; docstring; Methods Summary. Ck(self, arg0, arg1). H_approx_diag(self). approx_solve(self). compute_AFock(self, arg0). compute_Hk(self, arg0). compute_Q(self, arg0). compute_Qk(self, arg0, arg1, arg2). current_AFock(self). current_IFock(self). current_ci_energy(self). current_docc_energy(self). current_total_energy(self). form_rotation_matrix(self, x[, order]). gradient(self). gradient_rms(self). rhf_energy(self, arg0). solve(self, arg0, arg1, arg2). update(self, arg0, arg1, arg2, arg3, arg4). zero_redundant(self, arg0). Methods Documentation. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int = 2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SOMCSCF.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SOMCSCF.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SOMCSCF.html:1971,Deployability,update,update,1971,"). current_total_energy(self). form_rotation_matrix(self, x[, order]). gradient(self). gradient_rms(self). rhf_energy(self, arg0). solve(self, arg0, arg1, arg2). update(self, arg0, arg1, arg2, arg3, arg4). zero_redundant(self, arg0). Methods Documentation. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int = 2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SOMCSCF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SOMCSCF.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SOMCSCF.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SOMCSCF.html:2397,Deployability,update,updated,2397,"). current_total_energy(self). form_rotation_matrix(self, x[, order]). gradient(self). gradient_rms(self). rhf_energy(self, arg0). solve(self, arg0, arg1, arg2). update(self, arg0, arg1, arg2, arg3, arg4). zero_redundant(self, arg0). Methods Documentation. Ck(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix) → psi4.core.Matrix¶. H_approx_diag(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. approx_solve(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. compute_AFock(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Hk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Q(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → psi4.core.Matrix¶. compute_Qk(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix) → psi4.core.Matrix¶. current_AFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_IFock(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. current_ci_energy(self: psi4.core.SOMCSCF) → float¶. current_docc_energy(self: psi4.core.SOMCSCF) → float¶. current_total_energy(self: psi4.core.SOMCSCF) → float¶. form_rotation_matrix(self: psi4.core.SOMCSCF, x: psi4.core.Matrix, order: int = 2) → psi4.core.Matrix¶. gradient(self: psi4.core.SOMCSCF) → psi4.core.Matrix¶. gradient_rms(self: psi4.core.SOMCSCF) → float¶. rhf_energy(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → float¶. solve(self: psi4.core.SOMCSCF, arg0: int, arg1: float, arg2: bool) → psi4.core.Matrix¶. update(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix, arg1: psi4.core.Matrix, arg2: psi4.core.Matrix, arg3: psi4.core.Matrix, arg4: psi4.core.Matrix) → None¶. zero_redundant(self: psi4.core.SOMCSCF, arg0: psi4.core.Matrix) → None¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SOMCSCF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SOMCSCF.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SOMCSCF.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SuperFunctional.html:10581,Deployability,update,updated,10581,"number of points. set_name(self: psi4.core.SuperFunctional, arg0: str) → None¶; Sets the SuperFunctional name. set_vv10_b(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 b parameter. set_vv10_c(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 c parameter. set_x_alpha(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the amount of exact global HF exchange. set_x_beta(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets how much more long-range exchange than short-range exchange. set_x_omega(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the range-seperation exchange parameter. test_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Vector, arg1: psi4.core.Vector, arg2: psi4.core.Vector, arg3: psi4.core.Vector, arg4: psi4.core.Vector, arg5: psi4.core.Vector, arg6: psi4.core.Vector) → None¶; Quick testing capabilities. value(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Vector¶; Returns a given internal value. values(self: psi4.core.SuperFunctional) → Dict[str, psi4.core.Vector]¶; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float¶; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float¶; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Functional¶; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi4.core.Functional]¶; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated exchange parameter. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SuperFunctional. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SuperFunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SuperFunctional.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SuperFunctional.html:425,Energy Efficiency,allocate,allocate,425,"﻿. SuperFunctional. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SuperFunctional. SuperFunctional¶. class psi4.core.SuperFunctional¶; Bases: pybind11_object; docstring; Methods Summary. XC_build(arg0, arg1); Builds a SuperFunctional from a XC string. add_c_functional(self, arg0); Add a correlation Functional. add_x_functional(self, arg0); Add a exchange Functional. allocate(self); Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self); SuperFunctional rung. blank(); Initialize a blank SuperFunctional. c_alpha(self); Amount of MP2 correlation. c_functional(self, arg0); Returns the desired C Functional. c_functionals(self); Returns all C Functionals. c_omega(self); Range-seperated correlation parameter. c_os_alpha(self); Amount of SS MP2 correlation. c_ss_alpha(self); Amount of OS MP2 correlation. citation(self); SuperFunctional citation. compute_functional(self, arg0, arg1); Computes the SuperFunctional. density_tolerance(self); Density threshold for LibXC. deriv(self); Maximum derivative to compute. description(self); The description of the SuperFunctional. grac_alpha(self); GRAC Alpha. grac_beta(self); GRAC Beta. grac_shift(self); Shift of the bulk potenital. is_c_hybrid(self); Requires MP2 correlation?. is_c_lrc(self); Contains range-seperated correlation?. is_c_scs_hybrid(self); Requires SCS-MP2 correlation?. is_gga(self); Is this a GGA?. is_libxc_func(self); A full SuperFunctional definition from LibXC. is_meta(self); Is this a MGGA?. is_x_hybrid(self); Requires exact exchange?. is_x_lrc(self); Contains range-seperated exchange?. max_points(self); Maximum number of grid points per block. name(self); The name of the SuperFunctional. needs_grac(self); Does this functional need GRAC. needs_vv10(self); Does this functional need VV10 dispersion. needs_xc(self); Does this functional need XC quantities. print_density_threshold(self); Queries the LibXCFunctionals for their density thre",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SuperFunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SuperFunctional.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SuperFunctional.html:441,Energy Efficiency,Allocate,Allocates,441,"﻿. SuperFunctional. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SuperFunctional. SuperFunctional¶. class psi4.core.SuperFunctional¶; Bases: pybind11_object; docstring; Methods Summary. XC_build(arg0, arg1); Builds a SuperFunctional from a XC string. add_c_functional(self, arg0); Add a correlation Functional. add_x_functional(self, arg0); Add a exchange Functional. allocate(self); Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self); SuperFunctional rung. blank(); Initialize a blank SuperFunctional. c_alpha(self); Amount of MP2 correlation. c_functional(self, arg0); Returns the desired C Functional. c_functionals(self); Returns all C Functionals. c_omega(self); Range-seperated correlation parameter. c_os_alpha(self); Amount of SS MP2 correlation. c_ss_alpha(self); Amount of OS MP2 correlation. citation(self); SuperFunctional citation. compute_functional(self, arg0, arg1); Computes the SuperFunctional. density_tolerance(self); Density threshold for LibXC. deriv(self); Maximum derivative to compute. description(self); The description of the SuperFunctional. grac_alpha(self); GRAC Alpha. grac_beta(self); GRAC Beta. grac_shift(self); Shift of the bulk potenital. is_c_hybrid(self); Requires MP2 correlation?. is_c_lrc(self); Contains range-seperated correlation?. is_c_scs_hybrid(self); Requires SCS-MP2 correlation?. is_gga(self); Is this a GGA?. is_libxc_func(self); A full SuperFunctional definition from LibXC. is_meta(self); Is this a MGGA?. is_x_hybrid(self); Requires exact exchange?. is_x_lrc(self); Contains range-seperated exchange?. max_points(self); Maximum number of grid points per block. name(self); The name of the SuperFunctional. needs_grac(self); Does this functional need GRAC. needs_vv10(self); Does this functional need VV10 dispersion. needs_xc(self); Does this functional need XC quantities. print_density_threshold(self); Queries the LibXCFunctionals for their density thre",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SuperFunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SuperFunctional.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SuperFunctional.html:4249,Energy Efficiency,allocate,allocate,4249,"); Sets how much more long-range exchange than short-range exchange. set_x_omega(self, arg0); Sets the range-seperation exchange parameter. test_functional(self, arg0, arg1, arg2, ...); Quick testing capabilities. value(self, arg0); Returns a given internal value. values(self); Return all internal values. vv10_b(self); The VV10 b parameter. vv10_c(self); The VV10 c parameter. x_alpha(self); Amount of exact HF exchange. x_beta(self); Amount of exact HF exchange. x_functional(self, arg0); Returns the desired X Functional. x_functionals(self); Returns all X Functionals. x_omega(self); Range-seperated exchange parameter. Methods Documentation. static XC_build(arg0: str, arg1: bool) → psi4.core.SuperFunctional¶; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None¶; Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self: psi4.core.SuperFunctional) → int¶; SuperFunctional rung. static blank() → psi4.core.SuperFunctional¶; Initialize a blank SuperFunctional. c_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of MP2 correlation. c_functional(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Functional¶; Returns the desired C Functional. c_functionals(self: psi4.core.SuperFunctional) → List[psi4.core.Functional]¶; Returns all C Functionals. c_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated correlation parameter. c_os_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of SS MP2 correlation. c_ss_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of OS MP2 correlation. citation(self: psi4.core.SuperFunctional) → str¶; SuperFunctional citation. compute_functional(self: psi4.core.SuperFunctional, arg0: Dict[str, psi4.core.Vector], arg1: int) → Dic",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SuperFunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SuperFunctional.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SuperFunctional.html:4300,Energy Efficiency,Allocate,Allocates,4300,"nge. set_x_omega(self, arg0); Sets the range-seperation exchange parameter. test_functional(self, arg0, arg1, arg2, ...); Quick testing capabilities. value(self, arg0); Returns a given internal value. values(self); Return all internal values. vv10_b(self); The VV10 b parameter. vv10_c(self); The VV10 c parameter. x_alpha(self); Amount of exact HF exchange. x_beta(self); Amount of exact HF exchange. x_functional(self, arg0); Returns the desired X Functional. x_functionals(self); Returns all X Functionals. x_omega(self); Range-seperated exchange parameter. Methods Documentation. static XC_build(arg0: str, arg1: bool) → psi4.core.SuperFunctional¶; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None¶; Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self: psi4.core.SuperFunctional) → int¶; SuperFunctional rung. static blank() → psi4.core.SuperFunctional¶; Initialize a blank SuperFunctional. c_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of MP2 correlation. c_functional(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Functional¶; Returns the desired C Functional. c_functionals(self: psi4.core.SuperFunctional) → List[psi4.core.Functional]¶; Returns all C Functionals. c_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated correlation parameter. c_os_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of SS MP2 correlation. c_ss_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of OS MP2 correlation. citation(self: psi4.core.SuperFunctional) → str¶; SuperFunctional citation. compute_functional(self: psi4.core.SuperFunctional, arg0: Dict[str, psi4.core.Vector], arg1: int) → Dict[str, psi4.core.Vector]¶; Computes the SuperFunctional. density",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SuperFunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SuperFunctional.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SuperFunctional.html:3450,Testability,test,testing,3450,"n. set_density_tolerance(self, arg0); Sets the density threshold for LibXC. set_deriv(self, arg0); Sets the derivative level. set_description(self, arg0); Sets the SuperFunctional description. set_do_vv10(self, arg0); Sets whether to do VV10 correction. set_grac_alpha(self, arg0); Sets the GRAC alpha parameter. set_grac_beta(self, arg0); Sets the GRAC beta parameter. set_grac_shift(self, arg0); Sets the GRAC bulk shift value. set_lock(self, arg0); Locks the functional to prevent changes. set_max_points(self, arg0); Sets the maximum number of points. set_name(self, arg0); Sets the SuperFunctional name. set_vv10_b(self, arg0); Sets the VV10 b parameter. set_vv10_c(self, arg0); Sets the VV10 c parameter. set_x_alpha(self, arg0); Sets the amount of exact global HF exchange. set_x_beta(self, arg0); Sets how much more long-range exchange than short-range exchange. set_x_omega(self, arg0); Sets the range-seperation exchange parameter. test_functional(self, arg0, arg1, arg2, ...); Quick testing capabilities. value(self, arg0); Returns a given internal value. values(self); Return all internal values. vv10_b(self); The VV10 b parameter. vv10_c(self); The VV10 c parameter. x_alpha(self); Amount of exact HF exchange. x_beta(self); Amount of exact HF exchange. x_functional(self, arg0); Returns the desired X Functional. x_functionals(self); Returns all X Functionals. x_omega(self); Range-seperated exchange parameter. Methods Documentation. static XC_build(arg0: str, arg1: bool) → psi4.core.SuperFunctional¶; Builds a SuperFunctional from a XC string. add_c_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a correlation Functional. add_x_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Functional) → None¶; Add a exchange Functional. allocate(self: psi4.core.SuperFunctional) → None¶; Allocates the vectors, should be called after ansatz or npoint changes. ansatz(self: psi4.core.SuperFunctional) → int¶; SuperFunctional rung. static blank()",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SuperFunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SuperFunctional.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SuperFunctional.html:9545,Testability,test,testing,9545,"unctional to prevent changes. set_max_points(self: psi4.core.SuperFunctional, arg0: int) → None¶; Sets the maximum number of points. set_name(self: psi4.core.SuperFunctional, arg0: str) → None¶; Sets the SuperFunctional name. set_vv10_b(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 b parameter. set_vv10_c(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the VV10 c parameter. set_x_alpha(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the amount of exact global HF exchange. set_x_beta(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets how much more long-range exchange than short-range exchange. set_x_omega(self: psi4.core.SuperFunctional, arg0: float) → None¶; Sets the range-seperation exchange parameter. test_functional(self: psi4.core.SuperFunctional, arg0: psi4.core.Vector, arg1: psi4.core.Vector, arg2: psi4.core.Vector, arg3: psi4.core.Vector, arg4: psi4.core.Vector, arg5: psi4.core.Vector, arg6: psi4.core.Vector) → None¶; Quick testing capabilities. value(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Vector¶; Returns a given internal value. values(self: psi4.core.SuperFunctional) → Dict[str, psi4.core.Vector]¶; Return all internal values. vv10_b(self: psi4.core.SuperFunctional) → float¶; The VV10 b parameter. vv10_c(self: psi4.core.SuperFunctional) → float¶; The VV10 c parameter. x_alpha(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_beta(self: psi4.core.SuperFunctional) → float¶; Amount of exact HF exchange. x_functional(self: psi4.core.SuperFunctional, arg0: str) → psi4.core.Functional¶; Returns the desired X Functional. x_functionals(self: psi4.core.SuperFunctional) → List[psi4.core.Functional]¶; Returns all X Functionals. x_omega(self: psi4.core.SuperFunctional) → float¶; Range-seperated exchange parameter. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SuperFunctional. © Copyrigh",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SuperFunctional.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SuperFunctional.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html:3102,Deployability,update,updated,3102,"rix. zero(self); Zero out the symmetry operation. Methods Documentation. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out the symmetry operation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SymmetryOperation. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html:633,Performance,Perform,Performs,633,"﻿. SymmetryOperation. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SymmetryOperation. SymmetryOperation¶. class psi4.core.SymmetryOperation¶; Bases: pybind11_object; Class to provide a 3 by 3 matrix representation of a symmetry operation, such as a rotation or reflection.; Methods Summary. E(self); Set equal to E. c2_x(self); Set equal to C2 about the x axis. c2_y(self); Set equal to C2 about the y axis. c2_z(self); Set equal to C2 about the z axis. i(self); Set equal to an inversion. matrix(self); Return the matrix for the operation on Cartesians. operate(self, arg0); Performs the operation arg2 * arg1. rotate_n(self, arg0); Set equal to a clockwise rotation by 2pi/n. rotate_theta(self, arg0); Set equal to a clockwise rotation by theta. sigma_xy(self); Set equal to reflection in xy plane. sigma_xz(self); Set equal to reflection in xz plane. sigma_yz(self); Set equal to reflection in yz plane. trace(self); Returns trace of transformation matrix. transform(self, arg0); Performs the transform arg2 * arg1 * arg2~. transpose(self); Performs transposition of matrix operation. unit(self); Set equal to a unit matrix. zero(self); Zero out the symmetry operation. Methods Documentation. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html:1040,Performance,Perform,Performs,1040,"   .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SymmetryOperation. SymmetryOperation¶. class psi4.core.SymmetryOperation¶; Bases: pybind11_object; Class to provide a 3 by 3 matrix representation of a symmetry operation, such as a rotation or reflection.; Methods Summary. E(self); Set equal to E. c2_x(self); Set equal to C2 about the x axis. c2_y(self); Set equal to C2 about the y axis. c2_z(self); Set equal to C2 about the z axis. i(self); Set equal to an inversion. matrix(self); Return the matrix for the operation on Cartesians. operate(self, arg0); Performs the operation arg2 * arg1. rotate_n(self, arg0); Set equal to a clockwise rotation by 2pi/n. rotate_theta(self, arg0); Set equal to a clockwise rotation by theta. sigma_xy(self); Set equal to reflection in xy plane. sigma_xz(self); Set equal to reflection in xz plane. sigma_yz(self); Set equal to reflection in yz plane. trace(self); Returns trace of transformation matrix. transform(self, arg0); Performs the transform arg2 * arg1 * arg2~. transpose(self); Performs transposition of matrix operation. unit(self); Set equal to a unit matrix. zero(self); Zero out the symmetry operation. Methods Documentation. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryO",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html:1101,Performance,Perform,Performs,1101,"nd Python; SymmetryOperation. SymmetryOperation¶. class psi4.core.SymmetryOperation¶; Bases: pybind11_object; Class to provide a 3 by 3 matrix representation of a symmetry operation, such as a rotation or reflection.; Methods Summary. E(self); Set equal to E. c2_x(self); Set equal to C2 about the x axis. c2_y(self); Set equal to C2 about the y axis. c2_z(self); Set equal to C2 about the z axis. i(self); Set equal to an inversion. matrix(self); Return the matrix for the operation on Cartesians. operate(self, arg0); Performs the operation arg2 * arg1. rotate_n(self, arg0); Set equal to a clockwise rotation by 2pi/n. rotate_theta(self, arg0); Set equal to a clockwise rotation by theta. sigma_xy(self); Set equal to reflection in xy plane. sigma_xz(self); Set equal to reflection in xz plane. sigma_yz(self); Set equal to reflection in yz plane. trace(self); Returns trace of transformation matrix. transform(self, arg0); Performs the transform arg2 * arg1 * arg2~. transpose(self); Performs transposition of matrix operation. unit(self); Set equal to a unit matrix. zero(self); Zero out the symmetry operation. Methods Documentation. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotatio",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html:1868,Performance,Perform,Performs,1868,"et equal to reflection in xz plane. sigma_yz(self); Set equal to reflection in yz plane. trace(self); Returns trace of transformation matrix. transform(self, arg0); Performs the transform arg2 * arg1 * arg2~. transpose(self); Performs transposition of matrix operation. unit(self); Set equal to a unit matrix. zero(self); Zero out the symmetry operation. Methods Documentation. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html:2599,Performance,Perform,Performs,2599,"rix. zero(self); Zero out the symmetry operation. Methods Documentation. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out the symmetry operation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SymmetryOperation. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html:2697,Performance,Perform,Performs,2697,"rix. zero(self); Zero out the symmetry operation. Methods Documentation. E(self: psi4.core.SymmetryOperation) → None¶; Set equal to E. c2_x(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the x axis. c2_y(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the y axis. c2_z(self: psi4.core.SymmetryOperation) → None¶; Set equal to C2 about the z axis. i(self: psi4.core.SymmetryOperation) → None¶; Set equal to an inversion. matrix(self: psi4.core.SymmetryOperation) → List[List[float[3]][3]]¶; Return the matrix for the operation on Cartesians. operate(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the operation arg2 * arg1. rotate_n(self: psi4.core.SymmetryOperation, arg0: int) → None¶; Set equal to a clockwise rotation by 2pi/n. rotate_theta(self: psi4.core.SymmetryOperation, arg0: float) → None¶; Set equal to a clockwise rotation by theta. sigma_xy(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xy plane. sigma_xz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in xz plane. sigma_yz(self: psi4.core.SymmetryOperation) → None¶; Set equal to reflection in yz plane. trace(self: psi4.core.SymmetryOperation) → float¶; Returns trace of transformation matrix. transform(self: psi4.core.SymmetryOperation, arg0: psi4.core.SymmetryOperation) → psi4.core.SymmetryOperation¶; Performs the transform arg2 * arg1 * arg2~. transpose(self: psi4.core.SymmetryOperation) → None¶; Performs transposition of matrix operation. unit(self: psi4.core.SymmetryOperation) → None¶; Set equal to a unit matrix. zero(self: psi4.core.SymmetryOperation) → None¶; Zero out the symmetry operation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SymmetryOperation. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.SymmetryOperation.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.test_matrix_dpd_interface.html:444,Deployability,update,updated,444,"﻿. test_matrix_dpd_interface. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; test_matrix_dpd_interface. test_matrix_dpd_interface¶. psi4.core.test_matrix_dpd_interface() → bool¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; test_matrix_dpd_interface. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.test_matrix_dpd_interface.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.test_matrix_dpd_interface.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.ThreeCenterOverlapInt.html:737,Deployability,update,updated,737,"﻿. ThreeCenterOverlapInt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ThreeCenterOverlapInt. ThreeCenterOverlapInt¶. class psi4.core.ThreeCenterOverlapInt¶; Bases: pybind11_object; Three center overlap integrals; Methods Summary. compute_shell(self, arg0, arg1, arg2); Compute the integrals of the form (a|b|c). Methods Documentation. compute_shell(self: psi4.core.ThreeCenterOverlapInt, arg0: int, arg1: int, arg2: int) → None¶; Compute the integrals of the form (a|b|c). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ThreeCenterOverlapInt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.ThreeCenterOverlapInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.ThreeCenterOverlapInt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.timer_off.html:397,Deployability,update,updated,397,"﻿. timer_off. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; timer_off. timer_off¶. psi4.core.timer_off(label: str) → None¶; Stop timer with label. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; timer_off. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.timer_off.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.timer_off.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.timer_on.html:440,Deployability,update,updated,440,"﻿. timer_on. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; timer_on. timer_on¶. psi4.core.timer_on(label: str) → None¶; Start timer with label. Needs to be paired with psi4.core.timer_off(). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; timer_on. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.timer_on.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.timer_on.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.TLaplaceDenominator.html:1183,Deployability,update,updated,1183,"﻿. TLaplaceDenominator. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TLaplaceDenominator. TLaplaceDenominator¶. class psi4.core.TLaplaceDenominator¶; Bases: pybind11_object; Computer class for a Laplace factorization of the six-index energy denominator in coupled-cluster theory; Methods Summary. denominator_occ(self); Returns the occupied orbital Laplace weights of the factorized triples denominator (nweights * nocc). denominator_vir(self); Returns the virtual orbital Laplace weights of the factorized triples denominator (nweights * nvirt). Methods Documentation. denominator_occ(self: psi4.core.TLaplaceDenominator) → psi4.core.Matrix¶; Returns the occupied orbital Laplace weights of the factorized triples denominator (nweights * nocc). denominator_vir(self: psi4.core.TLaplaceDenominator) → psi4.core.Matrix¶; Returns the virtual orbital Laplace weights of the factorized triples denominator (nweights * nvirt). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TLaplaceDenominator. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.TLaplaceDenominator.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.TLaplaceDenominator.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.TLaplaceDenominator.html:291,Energy Efficiency,energy,energy,291,"﻿. TLaplaceDenominator. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TLaplaceDenominator. TLaplaceDenominator¶. class psi4.core.TLaplaceDenominator¶; Bases: pybind11_object; Computer class for a Laplace factorization of the six-index energy denominator in coupled-cluster theory; Methods Summary. denominator_occ(self); Returns the occupied orbital Laplace weights of the factorized triples denominator (nweights * nocc). denominator_vir(self); Returns the virtual orbital Laplace weights of the factorized triples denominator (nweights * nvirt). Methods Documentation. denominator_occ(self: psi4.core.TLaplaceDenominator) → psi4.core.Matrix¶; Returns the occupied orbital Laplace weights of the factorized triples denominator (nweights * nocc). denominator_vir(self: psi4.core.TLaplaceDenominator) → psi4.core.Matrix¶; Returns the virtual orbital Laplace weights of the factorized triples denominator (nweights * nvirt). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TLaplaceDenominator. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.TLaplaceDenominator.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.TLaplaceDenominator.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.TracelessQuadrupoleInt.html:488,Deployability,update,updated,488,"﻿. TracelessQuadrupoleInt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TracelessQuadrupoleInt. TracelessQuadrupoleInt¶. class psi4.core.TracelessQuadrupoleInt¶; Bases: OneBodyAOInt; Computes traceless quadrupole integrals. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TracelessQuadrupoleInt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.TracelessQuadrupoleInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.TracelessQuadrupoleInt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.triplet.html:1065,Deployability,update,updated,1065,"﻿. triplet. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; triplet. triplet¶. psi4.core.triplet(A: psi4.core.Matrix, B: psi4.core.Matrix, C: psi4.core.Matrix, transA: bool = False, transB: bool = False, transC: bool = False) → psi4.core.Matrix¶; Returns the multiplication of three matrices, with options to transpose each beforehand. Parameters:. A – First matrix to multiply.; B – Second matrix to multiply.; C – Third matrix to multiply.; transA – Transpose the first matrix before operations?; transB – Transpose the second matrix before operations?; transC – Transpose the third matrix before operations?. Returns:; New matrix of ABC. Return type:; Matrix. Notes. (AB)C vs. A(BC) selected by cost analysis of overall (not per-irrep) dimensions.; If A, B, C not of the the same symmetry, always computed as (AB)C. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; triplet. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.triplet.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.triplet.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.tstart.html:400,Deployability,update,updated,400,"﻿. tstart. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; tstart. tstart¶. psi4.core.tstart() → None¶; Start module-level timer. Only one active at once. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; tstart. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.tstart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.tstart.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.tstop.html:418,Deployability,update,updated,418,"﻿. tstop. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; tstop. tstop¶. psi4.core.tstop() → None¶; Stop module-level timer. Prints user, system, and total times to outfile. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; tstop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.tstop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.tstop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.TwoBodyAOInt.html:463,Deployability,Update,Update,463,"﻿. TwoBodyAOInt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TwoBodyAOInt. TwoBodyAOInt¶. class psi4.core.TwoBodyAOInt¶; Bases: pybind11_object; Two body integral base class; Methods Summary. compute_shell(self, arg0, arg1, arg2, arg3); Compute ERIs between 4 shells. shell_significant(self, arg0, arg1, arg2, arg3); Determines if the P,Q,R,S shell combination is significant. update_density(self, arg0); Update density matrix (c1 symmetry) for Density-matrix based integral screening. Methods Documentation. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. shell_significant(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → bool¶; Determines if the P,Q,R,S shell combination is significant. update_density(self: psi4.core.TwoBodyAOInt, arg0: List[psi4.core.Matrix]) → None¶; Update density matrix (c1 symmetry) for Density-matrix based integral screening. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TwoBodyAOInt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.TwoBodyAOInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.TwoBodyAOInt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.TwoBodyAOInt.html:939,Deployability,Update,Update,939,"﻿. TwoBodyAOInt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TwoBodyAOInt. TwoBodyAOInt¶. class psi4.core.TwoBodyAOInt¶; Bases: pybind11_object; Two body integral base class; Methods Summary. compute_shell(self, arg0, arg1, arg2, arg3); Compute ERIs between 4 shells. shell_significant(self, arg0, arg1, arg2, arg3); Determines if the P,Q,R,S shell combination is significant. update_density(self, arg0); Update density matrix (c1 symmetry) for Density-matrix based integral screening. Methods Documentation. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. shell_significant(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → bool¶; Determines if the P,Q,R,S shell combination is significant. update_density(self: psi4.core.TwoBodyAOInt, arg0: List[psi4.core.Matrix]) → None¶; Update density matrix (c1 symmetry) for Density-matrix based integral screening. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TwoBodyAOInt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.TwoBodyAOInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.TwoBodyAOInt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.TwoBodyAOInt.html:1217,Deployability,update,updated,1217,"﻿. TwoBodyAOInt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TwoBodyAOInt. TwoBodyAOInt¶. class psi4.core.TwoBodyAOInt¶; Bases: pybind11_object; Two body integral base class; Methods Summary. compute_shell(self, arg0, arg1, arg2, arg3); Compute ERIs between 4 shells. shell_significant(self, arg0, arg1, arg2, arg3); Determines if the P,Q,R,S shell combination is significant. update_density(self, arg0); Update density matrix (c1 symmetry) for Density-matrix based integral screening. Methods Documentation. compute_shell(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. shell_significant(self: psi4.core.TwoBodyAOInt, arg0: int, arg1: int, arg2: int, arg3: int) → bool¶; Determines if the P,Q,R,S shell combination is significant. update_density(self: psi4.core.TwoBodyAOInt, arg0: List[psi4.core.Matrix]) → None¶; Update density matrix (c1 symmetry) for Density-matrix based integral screening. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TwoBodyAOInt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.TwoBodyAOInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.TwoBodyAOInt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.TwoElectronInt.html:967,Deployability,update,updated,967,"﻿. TwoElectronInt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TwoElectronInt. TwoElectronInt¶. class psi4.core.TwoElectronInt¶; Bases: TwoBodyAOInt; Computes two-electron repulsion integrals; Methods Summary. compute_shell(self, arg0, arg1, arg2, arg3); Compute ERIs between 4 shells. shell_significant(self, arg0, arg1, arg2, arg3); Determines if the P,Q,R,S shell combination is significant. Methods Documentation. compute_shell(self: psi4.core.TwoElectronInt, arg0: int, arg1: int, arg2: int, arg3: int) → int¶; Compute ERIs between 4 shells. shell_significant(self: psi4.core.TwoElectronInt, arg0: int, arg1: int, arg2: int, arg3: int) → bool¶; Determines if the P,Q,R,S shell combination is significant. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TwoElectronInt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.TwoElectronInt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.TwoElectronInt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.UHF.html:1310,Deployability,update,updated,1310,"﻿. UHF. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UHF. UHF¶. class psi4.core.UHF¶; Bases: HF; docstring; Methods Summary. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_orbital_gradient(save_fock, ...); docstring. diis(self, arg0); docstring. mintshelper(self); The MintsHelper object. stability_analysis(self); Assess wfn stability and correct if requested. Methods Documentation. c1_deep_copy(self: psi4.core.UHF, basis: psi4.core.BasisSet) → psi4.core.UHF¶; Returns a new wavefunction with internal data converted to C_1 symmetry, using pre-c1-constructed BasisSet basis. compute_orbital_gradient(save_fock, max_diis_vectors)¶; docstring. Return type:; float. Parameters:. save_fock (bool) – ; max_diis_vectors (int) – . diis(self: psi4.core.HF, arg0: float) → bool¶; docstring. mintshelper(self: psi4.core.UHF) → psi4.core.MintsHelper¶; The MintsHelper object. stability_analysis(self: psi4.core.HF) → bool¶; Assess wfn stability and correct if requested. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UHF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.UHF.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.UHF.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.UKSFunctions.html:410,Deployability,update,updated,410,"﻿. UKSFunctions. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UKSFunctions. UKSFunctions¶. class psi4.core.UKSFunctions¶; Bases: PointFunctions; docstring. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UKSFunctions. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.UKSFunctions.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.UKSFunctions.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html:1325,Deployability,update,updated,1325,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html:472,Energy Efficiency,charge,charges,472,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html:794,Energy Efficiency,ENERGY,ENERGY,794,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html:3,Modifiability,variab,variable,3,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html:115,Modifiability,variab,variable,115,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html:125,Modifiability,variab,variable,125,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html:146,Modifiability,variab,variable,146,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html:375,Modifiability,variab,variables,375,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html:416,Modifiability,variab,variables,416,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html:546,Modifiability,variab,variables,546,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html:776,Modifiability,variab,variable,776,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html:834,Modifiability,variab,variable,834,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html:904,Modifiability,variab,variable,904,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html:985,Modifiability,variab,variable,985,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html:1268,Modifiability,variab,variable,1268,"﻿. variable. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. variable¶. psi4.core.variable(key)¶; Return copy of scalar or array QCVariable; key from global memory. Parameters:; key (str) – Case-insensitive key to global double or Matrix; storage maps. Returns:; Requested QCVariable from global memory. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> psi4.gradient(""hf/cc-pvdz""); >>> psi4.variable(""CURRENT ENERGY""); -100.00985995185668; >>> psi4.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> psi4.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> psi4.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variable. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variable.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variable.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html:938,Deployability,update,updated,938,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html:522,Energy Efficiency,charge,charges,522,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html:3,Modifiability,variab,variables,3,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html:116,Modifiability,variab,variables,116,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html:127,Modifiability,variab,variables,127,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html:149,Modifiability,variab,variables,149,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html:425,Modifiability,variab,variables,425,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html:466,Modifiability,variab,variables,466,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html:596,Modifiability,variab,variables,596,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html:880,Modifiability,variab,variables,880,"﻿. variables. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. variables¶. psi4.core.variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from global memory. Parameters:; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; variables. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.variables.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.variables.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html:3925,Deployability,update,updated,3925,"psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None¶; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs)¶; Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional¶; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi4.core.BlockOPoints¶; Returns the requested BlockOPoints. get_np_xyzw()¶; Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. Parameters:; self (VBase) – VBase instance. Return type:; Tuple[ndarray, ndarray, ndarray, ndarray]. grid(self: psi4.core.VBase) → psi4.core.DFTGrid¶; Returns the grid object. initialize(*args, **kwargs)¶; Overloaded function. initialize(self: psi4.core.VBase) -> None. doctsring. initialize(self: psi4.core.VBase) -> None. Initializes the V object. nblocks(self: psi4.core.VBase) → int¶; Total number of blocks. print_header(self: psi4.core.VBase) → None¶; Prints the objects header. properties(self: psi4.core.VBase) → List[psi4.core.PointFunctions]¶; Returns the properties computer. quadrature_values(self: psi4.core.VBase) → Dict[str, float]¶; Returns the quadrature values. set_D(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Sets the internal density. set_debug(self: psi4.core.VBase, arg0: int) → None¶; Sets the debug level of the object. set_print(self: psi4.core.VBase, arg0: int) → None¶; Sets the print level of the object. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; VBase. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.VBase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html:381,Performance,cache,cache,381,"﻿. VBase. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; VBase. VBase¶. class psi4.core.VBase¶; Bases: pybind11_object; docstring; Methods Summary. Dao(self, arg0); Returns internal AO density. basis(self); Returns the internal basis set. build(arg0, arg1, arg2). build_collocation_cache(self, arg0); Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self); Clears the collocation cache. compute_V(self, arg0); doctsring. compute_Vx(self, arg0, arg1); doctsring. compute_gradient(self); Compute the DFT nuclear gradient contribution. compute_hessain(self); Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs); Overloaded function. functional(self); Returns the interal superfunctional. get_block(self, arg0); Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. static build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_Vx(self",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.VBase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html:467,Performance,cache,cache,467,"﻿. VBase. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; VBase. VBase¶. class psi4.core.VBase¶; Bases: pybind11_object; docstring; Methods Summary. Dao(self, arg0); Returns internal AO density. basis(self); Returns the internal basis set. build(arg0, arg1, arg2). build_collocation_cache(self, arg0); Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self); Clears the collocation cache. compute_V(self, arg0); doctsring. compute_Vx(self, arg0, arg1); doctsring. compute_gradient(self); Compute the DFT nuclear gradient contribution. compute_hessain(self); Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs); Overloaded function. functional(self); Returns the interal superfunctional. get_block(self, arg0); Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. static build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_Vx(self",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.VBase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html:1785,Performance,cache,cache,1785," superfunctional. get_block(self, arg0); Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. static build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_Vx(self: psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None¶; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs)¶; Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional¶; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi4.core.BlockOPoints¶; Returns the requested BlockOPoints. get_np_xyzw()¶; Returns the x, y, z, and weights of a grid as a tuple of NumPy array ob",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.VBase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html:1896,Performance,cache,cache,1896,", y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. static build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_Vx(self: psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None¶; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs)¶; Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional¶; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi4.core.BlockOPoints¶; Returns the requested BlockOPoints. get_np_xyzw()¶; Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. Parameters:; self (VBase) – VBase instance. Return type:; Tuple[ndarray, ndarray, ndarray, ndarray",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.VBase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html:444,Usability,Clear,Clears,444,"﻿. VBase. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; VBase. VBase¶. class psi4.core.VBase¶; Bases: pybind11_object; docstring; Methods Summary. Dao(self, arg0); Returns internal AO density. basis(self); Returns the internal basis set. build(arg0, arg1, arg2). build_collocation_cache(self, arg0); Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self); Clears the collocation cache. compute_V(self, arg0); doctsring. compute_Vx(self, arg0, arg1); doctsring. compute_gradient(self); Compute the DFT nuclear gradient contribution. compute_hessain(self); Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs); Overloaded function. functional(self); Returns the interal superfunctional. get_block(self, arg0); Returns the requested BlockOPoints. get_np_xyzw(); Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. static build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_Vx(self",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.VBase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html:1873,Usability,Clear,Clears,1873,", y, z, and weights of a grid as a tuple of NumPy array objects. grid(self); Returns the grid object. initialize(*args, **kwargs); Overloaded function. nblocks(self); Total number of blocks. print_header(self); Prints the objects header. properties(self); Returns the properties computer. quadrature_values(self); Returns the quadrature values. set_D(self, arg0); Sets the internal density. set_debug(self, arg0); Sets the debug level of the object. set_print(self, arg0); Sets the print level of the object. Methods Documentation. Dao(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; Returns internal AO density. basis(self: psi4.core.VBase) → psi4.core.BasisSet¶; Returns the internal basis set. static build(arg0: psi4.core.BasisSet, arg1: psi4.core.SuperFunctional, arg2: str) → psi4.core.VBase¶. build_collocation_cache(self: psi4.core.VBase, arg0: int) → None¶; Constructs a collocation cache to prevent recomputation. clear_collocation_cache(self: psi4.core.VBase) → None¶; Clears the collocation cache. compute_V(self: psi4.core.VBase, arg0: List[psi4.core.Matrix]) → None¶; doctsring. compute_Vx(self: psi4.core.VBase, arg0: List[psi4.core.Matrix], arg1: List[psi4.core.Matrix]) → None¶; doctsring. compute_gradient(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear gradient contribution. compute_hessain(self: psi4.core.VBase) → psi4.core.Matrix¶; Compute the DFT nuclear Hessian contribution. finalize(*args, **kwargs)¶; Overloaded function. finalize(self: psi4.core.VBase) -> None. doctsring. finalize(self: psi4.core.VBase) -> None. Finalizes the V object. functional(self: psi4.core.VBase) → psi4.core.SuperFunctional¶; Returns the interal superfunctional. get_block(self: psi4.core.VBase, arg0: int) → psi4.core.BlockOPoints¶; Returns the requested BlockOPoints. get_np_xyzw()¶; Returns the x, y, z, and weights of a grid as a tuple of NumPy array objects. Parameters:; self (VBase) – VBase instance. Return type:; Tuple[ndarray, ndarray, ndarray, ndarray",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.VBase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.VBase.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html:7902,Deployability,update,updated,7902,".Vector, psio: psi4.core.IO, file: int) → None¶; Save the vector to disk. scale(self: psi4.core.Vector, sc: float) → None¶; Scales the elements of a vector by sc. set(*args, **kwargs)¶; Overloaded function. set(self: psi4.core.Vector, m: int, val: float) -> None. Sets a single element value located at m. set(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.ProtoVector) → None¶; Set a vector block. to_array(copy=True, dense=False)¶; Converts a PSI4 Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters:. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irrepped Psi4 objects to diagonally blocked dense arrays if; True. Returns a list of arrays otherwise. Returns:; Returns a single or list of NumPy arrays depending on options. Return type:; ndarray or List[ndarray]. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. Parameters:; self (Union[Matrix, Vector]) – Matrix or Vector instance. Returns:; Serialized dictionary with keys:. shape; data : List[str]; type : {‘matrix’, ‘vector’}. Return type:; Dict[str, Any]. vector_dot(self: psi4.core.Vector, other: psi4.core.Vector) → float¶; Take the dot product of two vectors. zero(self: psi4.core.Vector) → None¶; Zeros the vector. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Vector. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html:7017,Integrability,depend,depending,7017,".Vector, psio: psi4.core.IO, file: int) → None¶; Save the vector to disk. scale(self: psi4.core.Vector, sc: float) → None¶; Scales the elements of a vector by sc. set(*args, **kwargs)¶; Overloaded function. set(self: psi4.core.Vector, m: int, val: float) -> None. Sets a single element value located at m. set(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.ProtoVector) → None¶; Set a vector block. to_array(copy=True, dense=False)¶; Converts a PSI4 Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters:. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irrepped Psi4 objects to diagonally blocked dense arrays if; True. Returns a list of arrays otherwise. Returns:; Returns a single or list of NumPy arrays depending on options. Return type:; ndarray or List[ndarray]. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. Parameters:; self (Union[Matrix, Vector]) – Matrix or Vector instance. Returns:; Serialized dictionary with keys:. shape; data : List[str]; type : {‘matrix’, ‘vector’}. Return type:; Dict[str, Any]. vector_dot(self: psi4.core.Vector, other: psi4.core.Vector) → float¶; Take the dot product of two vectors. zero(self: psi4.core.Vector) → None¶; Zeros the vector. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Vector. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html:1054,Performance,load,load,1054," PSI4 API: Linking C++ and Python; Vector. Vector¶. class psi4.core.Vector¶; Bases: ProtoVector; Class for creating and manipulating vectors; Attributes Summary. name; The name of the Vector. np; View with single irrep. nph; View with irreps. shape; Shape of the Psi4 data object. Methods Summary. add(*args, **kwargs); Overloaded function. array_interface(self). axpy(self, a, other); Adds to this vector another vector scaled by a. clone(self); Clone the vector. copy(self, arg0); Copy another vector into this. dim(self[, h]); Returns the dimensions of the vector per irrep h. dimpi(self); Returns the Dimension object. from_array([name, dim1, dim2]); Converts a NumPy array or list of NumPy arrays into a PSI4 Matrix or Vector (irrepped if list). from_list(x). from_serial(); Converts serialized data to the correct Psi4 data type. get(*args, **kwargs); Overloaded function. get_block(self, slice); Get a vector block. init(self, arg0); Reallocate the data of the Vector. load(self, psio, file); Load the vector from disk. nirrep(self); Returns the number of irreps. np_read([prefix]); Reads the data from a NumPy compressed or uncompressed file using numpy.load(). np_write([filename, prefix]); Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez(). print_out(self); Prints the vector to the output file. save(self, psio, file); Save the vector to disk. scale(self, sc); Scales the elements of a vector by sc. set(*args, **kwargs); Overloaded function. set_block(self, slice, block); Set a vector block. to_array([copy, dense]); Converts a PSI4 Matrix or Vector to a NumPy array. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. vector_dot(self, other); Take the dot product of two vectors. zero(self); Zeros the vector. Attributes Documentation. name¶; The name of the Vector. Used in printing. np¶; View with single irrep. nph¶; View with irreps. shape¶; Shape of the Psi4 data object. Methods Documentation. add(*args, **kwargs)¶; Overload",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html:1078,Performance,Load,Load,1078," PSI4 API: Linking C++ and Python; Vector. Vector¶. class psi4.core.Vector¶; Bases: ProtoVector; Class for creating and manipulating vectors; Attributes Summary. name; The name of the Vector. np; View with single irrep. nph; View with irreps. shape; Shape of the Psi4 data object. Methods Summary. add(*args, **kwargs); Overloaded function. array_interface(self). axpy(self, a, other); Adds to this vector another vector scaled by a. clone(self); Clone the vector. copy(self, arg0); Copy another vector into this. dim(self[, h]); Returns the dimensions of the vector per irrep h. dimpi(self); Returns the Dimension object. from_array([name, dim1, dim2]); Converts a NumPy array or list of NumPy arrays into a PSI4 Matrix or Vector (irrepped if list). from_list(x). from_serial(); Converts serialized data to the correct Psi4 data type. get(*args, **kwargs); Overloaded function. get_block(self, slice); Get a vector block. init(self, arg0); Reallocate the data of the Vector. load(self, psio, file); Load the vector from disk. nirrep(self); Returns the number of irreps. np_read([prefix]); Reads the data from a NumPy compressed or uncompressed file using numpy.load(). np_write([filename, prefix]); Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez(). print_out(self); Prints the vector to the output file. save(self, psio, file); Save the vector to disk. scale(self, sc); Scales the elements of a vector by sc. set(*args, **kwargs); Overloaded function. set_block(self, slice, block); Set a vector block. to_array([copy, dense]); Converts a PSI4 Matrix or Vector to a NumPy array. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. vector_dot(self, other); Take the dot product of two vectors. zero(self); Zeros the vector. Attributes Documentation. name¶; The name of the Vector. Used in printing. np¶; View with single irrep. nph¶; View with irreps. shape¶; Shape of the Psi4 data object. Methods Documentation. add(*args, **kwargs)¶; Overload",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html:1240,Performance,load,load,1240,"e; The name of the Vector. np; View with single irrep. nph; View with irreps. shape; Shape of the Psi4 data object. Methods Summary. add(*args, **kwargs); Overloaded function. array_interface(self). axpy(self, a, other); Adds to this vector another vector scaled by a. clone(self); Clone the vector. copy(self, arg0); Copy another vector into this. dim(self[, h]); Returns the dimensions of the vector per irrep h. dimpi(self); Returns the Dimension object. from_array([name, dim1, dim2]); Converts a NumPy array or list of NumPy arrays into a PSI4 Matrix or Vector (irrepped if list). from_list(x). from_serial(); Converts serialized data to the correct Psi4 data type. get(*args, **kwargs); Overloaded function. get_block(self, slice); Get a vector block. init(self, arg0); Reallocate the data of the Vector. load(self, psio, file); Load the vector from disk. nirrep(self); Returns the number of irreps. np_read([prefix]); Reads the data from a NumPy compressed or uncompressed file using numpy.load(). np_write([filename, prefix]); Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez(). print_out(self); Prints the vector to the output file. save(self, psio, file); Save the vector to disk. scale(self, sc); Scales the elements of a vector by sc. set(*args, **kwargs); Overloaded function. set_block(self, slice, block); Set a vector block. to_array([copy, dense]); Converts a PSI4 Matrix or Vector to a NumPy array. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. vector_dot(self, other); Take the dot product of two vectors. zero(self); Zeros the vector. Attributes Documentation. name¶; The name of the Vector. Used in printing. np¶; View with single irrep. nph¶; View with irreps. shape¶; Shape of the Psi4 data object. Methods Documentation. add(*args, **kwargs)¶; Overloaded function. add(self: psi4.core.Vector, m: int, val: float) -> None. Add to a single element value located at m. add(self: psi4.core.Vector, h: int, m: int, val: fl",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html:4792,Performance,load,load,4792,"4.core.Matrix.from_array(data). >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = psi4.core.Matrix.from_array(irrep_data); >>> print(matrix.rowdim().to_tuple()); (2, 0, 4). classmethod from_list(x)¶. classmethod from_serial()¶; Converts serialized data to the correct Psi4 data type. Parameters:. self – Pointer to which class to be constructed.; json_data (Dict[str, Any]) – Serialization of class. See to_serial() for data layout. Return type:; Union[Matrix, Vector]. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Vector, m: int) -> float. Returns a single element value located at m. get(self: psi4.core.Vector, h: int, m: int) -> float. Returns a single element value located at m in irrep h. get_block(self: psi4.core.Vector, slice: psi4.core.Slice) → psi4.core.Vector¶; Get a vector block. init(self: psi4.core.Vector, arg0: psi4.core.Dimension) → None¶; Reallocate the data of the Vector. Consider making a new object. load(self: psi4.core.Vector, psio: psi4.core.IO, file: int) → None¶; Load the vector from disk. nirrep(self: psi4.core.Vector) → int¶; Returns the number of irreps. classmethod np_read(prefix='')¶; Reads the data from a NumPy compressed or uncompressed file using; numpy.load(). Parameters:. self (Union[Matrix, Vector]) – Pointer to which class to be constructed.; filename (str) – File name to read.; prefix (str) – Name under which array was saved for NumPy. Return type:; Union[Matrix, Vector]. np_write(filename=None, prefix='')¶; Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez().; Can return the packed data for saving many matrices into the same file. Parameters:. self (Union[Matrix, Vector]) – Instance to be serialized.; filename (Optional[str]) – File name where the data will be saved.; prefix (str) – Name of instance prepared for NumPy. Returns:; When filename given, it and dict serialization passed to; numpy.savez(), so .npz file saved and None returned.; When fil",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html:4861,Performance,Load,Load,4861,"d(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = psi4.core.Matrix.from_array(irrep_data); >>> print(matrix.rowdim().to_tuple()); (2, 0, 4). classmethod from_list(x)¶. classmethod from_serial()¶; Converts serialized data to the correct Psi4 data type. Parameters:. self – Pointer to which class to be constructed.; json_data (Dict[str, Any]) – Serialization of class. See to_serial() for data layout. Return type:; Union[Matrix, Vector]. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Vector, m: int) -> float. Returns a single element value located at m. get(self: psi4.core.Vector, h: int, m: int) -> float. Returns a single element value located at m in irrep h. get_block(self: psi4.core.Vector, slice: psi4.core.Slice) → psi4.core.Vector¶; Get a vector block. init(self: psi4.core.Vector, arg0: psi4.core.Dimension) → None¶; Reallocate the data of the Vector. Consider making a new object. load(self: psi4.core.Vector, psio: psi4.core.IO, file: int) → None¶; Load the vector from disk. nirrep(self: psi4.core.Vector) → int¶; Returns the number of irreps. classmethod np_read(prefix='')¶; Reads the data from a NumPy compressed or uncompressed file using; numpy.load(). Parameters:. self (Union[Matrix, Vector]) – Pointer to which class to be constructed.; filename (str) – File name to read.; prefix (str) – Name under which array was saved for NumPy. Return type:; Union[Matrix, Vector]. np_write(filename=None, prefix='')¶; Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez().; Can return the packed data for saving many matrices into the same file. Parameters:. self (Union[Matrix, Vector]) – Instance to be serialized.; filename (Optional[str]) – File name where the data will be saved.; prefix (str) – Name of instance prepared for NumPy. Returns:; When filename given, it and dict serialization passed to; numpy.savez(), so .npz file saved and None returned.; When filename None, dict serialization returned. Return type:; None or",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html:5063,Performance,load,load,5063,"erial()¶; Converts serialized data to the correct Psi4 data type. Parameters:. self – Pointer to which class to be constructed.; json_data (Dict[str, Any]) – Serialization of class. See to_serial() for data layout. Return type:; Union[Matrix, Vector]. get(*args, **kwargs)¶; Overloaded function. get(self: psi4.core.Vector, m: int) -> float. Returns a single element value located at m. get(self: psi4.core.Vector, h: int, m: int) -> float. Returns a single element value located at m in irrep h. get_block(self: psi4.core.Vector, slice: psi4.core.Slice) → psi4.core.Vector¶; Get a vector block. init(self: psi4.core.Vector, arg0: psi4.core.Dimension) → None¶; Reallocate the data of the Vector. Consider making a new object. load(self: psi4.core.Vector, psio: psi4.core.IO, file: int) → None¶; Load the vector from disk. nirrep(self: psi4.core.Vector) → int¶; Returns the number of irreps. classmethod np_read(prefix='')¶; Reads the data from a NumPy compressed or uncompressed file using; numpy.load(). Parameters:. self (Union[Matrix, Vector]) – Pointer to which class to be constructed.; filename (str) – File name to read.; prefix (str) – Name under which array was saved for NumPy. Return type:; Union[Matrix, Vector]. np_write(filename=None, prefix='')¶; Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez().; Can return the packed data for saving many matrices into the same file. Parameters:. self (Union[Matrix, Vector]) – Instance to be serialized.; filename (Optional[str]) – File name where the data will be saved.; prefix (str) – Name of instance prepared for NumPy. Returns:; When filename given, it and dict serialization passed to; numpy.savez(), so .npz file saved and None returned.; When filename None, dict serialization returned. Return type:; None or Dict[str, Any]. print_out(self: psi4.core.Vector) → None¶; Prints the vector to the output file. save(self: psi4.core.Vector, psio: psi4.core.IO, file: int) → None¶; Save the vector to disk. scale(self: p",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html:1729,Security,access,accessor,1729,"umPy array or list of NumPy arrays into a PSI4 Matrix or Vector (irrepped if list). from_list(x). from_serial(); Converts serialized data to the correct Psi4 data type. get(*args, **kwargs); Overloaded function. get_block(self, slice); Get a vector block. init(self, arg0); Reallocate the data of the Vector. load(self, psio, file); Load the vector from disk. nirrep(self); Returns the number of irreps. np_read([prefix]); Reads the data from a NumPy compressed or uncompressed file using numpy.load(). np_write([filename, prefix]); Writes the irrepped matrix to a NumPy uncompressed file using numpy.savez(). print_out(self); Prints the vector to the output file. save(self, psio, file); Save the vector to disk. scale(self, sc); Scales the elements of a vector by sc. set(*args, **kwargs); Overloaded function. set_block(self, slice, block); Set a vector block. to_array([copy, dense]); Converts a PSI4 Matrix or Vector to a NumPy array. to_serial(); Converts an object with a .nph accessor to a serialized dictionary. vector_dot(self, other); Take the dot product of two vectors. zero(self); Zeros the vector. Attributes Documentation. name¶; The name of the Vector. Used in printing. np¶; View with single irrep. nph¶; View with irreps. shape¶; Shape of the Psi4 data object. Methods Documentation. add(*args, **kwargs)¶; Overloaded function. add(self: psi4.core.Vector, m: int, val: float) -> None. Add to a single element value located at m. add(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Add to a single element value located at m in irrep h. array_interface(self: psi4.core.Vector) → list¶. axpy(self: psi4.core.Vector, a: float, other: psi4.core.Vector) → None¶; Adds to this vector another vector scaled by a. clone(self: psi4.core.Vector) → psi4.core.Vector¶; Clone the vector. copy(self: psi4.core.Vector, arg0: psi4.core.ProtoVector) → None¶; Copy another vector into this. dim(self: psi4.core.Vector, h: int = 0) → int¶; Returns the dimensions of the vector per irrep ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html:7312,Security,access,accessor,7312,".Vector, psio: psi4.core.IO, file: int) → None¶; Save the vector to disk. scale(self: psi4.core.Vector, sc: float) → None¶; Scales the elements of a vector by sc. set(*args, **kwargs)¶; Overloaded function. set(self: psi4.core.Vector, m: int, val: float) -> None. Sets a single element value located at m. set(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.ProtoVector) → None¶; Set a vector block. to_array(copy=True, dense=False)¶; Converts a PSI4 Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters:. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irrepped Psi4 objects to diagonally blocked dense arrays if; True. Returns a list of arrays otherwise. Returns:; Returns a single or list of NumPy arrays depending on options. Return type:; ndarray or List[ndarray]. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. Parameters:; self (Union[Matrix, Vector]) – Matrix or Vector instance. Returns:; Serialized dictionary with keys:. shape; data : List[str]; type : {‘matrix’, ‘vector’}. Return type:; Dict[str, Any]. vector_dot(self: psi4.core.Vector, other: psi4.core.Vector) → float¶; Take the dot product of two vectors. zero(self: psi4.core.Vector) → None¶; Zeros the vector. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Vector. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html:6634,Usability,simpl,simply,6634," Name of instance prepared for NumPy. Returns:; When filename given, it and dict serialization passed to; numpy.savez(), so .npz file saved and None returned.; When filename None, dict serialization returned. Return type:; None or Dict[str, Any]. print_out(self: psi4.core.Vector) → None¶; Prints the vector to the output file. save(self: psi4.core.Vector, psio: psi4.core.IO, file: int) → None¶; Save the vector to disk. scale(self: psi4.core.Vector, sc: float) → None¶; Scales the elements of a vector by sc. set(*args, **kwargs)¶; Overloaded function. set(self: psi4.core.Vector, m: int, val: float) -> None. Sets a single element value located at m. set(self: psi4.core.Vector, h: int, m: int, val: float) -> None. Sets a single element value located at m in irrep h. set_block(self: psi4.core.Vector, slice: psi4.core.Slice, block: psi4.core.ProtoVector) → None¶; Set a vector block. to_array(copy=True, dense=False)¶; Converts a PSI4 Matrix or Vector to a NumPy array. Either copies the; data or simply constructs a view. Parameters:. matrix (Union[Matrix, Vector]) – Pointers to which Psi4 core class should be used in the construction.; copy (bool) – Copy the data if True, return a view otherwise; dense (bool) – Converts irrepped Psi4 objects to diagonally blocked dense arrays if; True. Returns a list of arrays otherwise. Returns:; Returns a single or list of NumPy arrays depending on options. Return type:; ndarray or List[ndarray]. Notes; This is a generalized function to convert a Psi4 object to a NumPy array; Examples; >>> data = psi4.core.Matrix(3, 3); >>> data.to_array(); [[ 0. 0. 0.]; [ 0. 0. 0.]; [ 0. 0. 0.]]. to_serial()¶; Converts an object with a .nph accessor to a serialized dictionary. Parameters:; self (Union[Matrix, Vector]) – Matrix or Vector instance. Returns:; Serialized dictionary with keys:. shape; data : List[str]; type : {‘matrix’, ‘vector’}. Return type:; Dict[str, Any]. vector_dot(self: psi4.core.Vector, other: psi4.core.Vector) → float¶; Take the dot pr",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Vector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector3.html:1349,Deployability,update,updated,1349,"﻿. Vector3. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Vector3. Vector3¶. class psi4.core.Vector3¶; Bases: pybind11_object; Class for vectors of length three, often Cartesian coordinate vectors, and their common operations; Methods Summary. cross(self, arg0); Returns cross product of arg1 and arg2. distance(self, arg0); Returns distance between two points represented by arg1 and arg2. dot(self, arg0); Returns dot product of arg1 and arg2. norm(self); Returns Euclidean norm of arg1. normalize(self); Returns vector of unit length and arg1 direction. Methods Documentation. cross(self: psi4.core.Vector3, arg0: psi4.core.Vector3) → psi4.core.Vector3¶; Returns cross product of arg1 and arg2. distance(self: psi4.core.Vector3, arg0: psi4.core.Vector3) → float¶; Returns distance between two points represented by arg1 and arg2. dot(self: psi4.core.Vector3, arg0: psi4.core.Vector3) → float¶; Returns dot product of arg1 and arg2. norm(self: psi4.core.Vector3) → float¶; Returns Euclidean norm of arg1. normalize(self: psi4.core.Vector3) → None¶; Returns vector of unit length and arg1 direction. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Vector3. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Vector3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Vector3.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.version.html:384,Deployability,update,updated,384,"﻿. version. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; version. version¶. psi4.core.version() → None¶. Deprecated since version 1.4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; version. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.version.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.version.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:29499,Deployability,update,updated,29499,"nal[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.; do_virtual (Optional[bool]) – Do write all the MOs to the MOLDEN file (True) or discard the unoccupied; MOs (False). Not valid for NO’s. If unspecified (None), value taken from; MOLDEN_WITH_VIRTUAL.; use_natural (bool) – Write natural orbitals determined from density on wavefunction.; self (Wavefunction) – . Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.; The first two arguments of get_opdm(); can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶; Write wavefunction information in wfn to name in NBO format. Parameters:; name (str) – Destination file name for NBO file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Wavefunction. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:1560,Energy Efficiency,charge,charges,1560,"sted Alpha Density subset. Db(self); Returns the Beta Density Matrix. Db_subset(self, arg0); Returns the requested Beta Density subset. Fa(self); Returns the Alpha Fock Matrix. Fa_subset(self, arg0); Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self); Returns the Beta Fock Matrix. Fb_subset(self, arg0); Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self); Returns the 'Core' Matrix (Potential + Kinetic) Integrals. PCM_enabled(self); Whether running a PCM calculation. S(self); Returns the One-electron Overlap Matrix. alpha_orbital_space(self, id, basis, subset); Creates OrbitalSpace with information about the requested alpha orbital space. aotoso(self); Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). Deprecated since version 1.4. atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) doubl",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:2041,Energy Efficiency,energy,energy,2041,"ation. S(self); Returns the One-electron Overlap Matrix. alpha_orbital_space(self, id, basis, subset); Creates OrbitalSpace with information about the requested alpha orbital space. aotoso(self); Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). Deprecated since version 1.4. atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key); Removes scalar or array QCVariable key from self if present. doccpi(self[, assume_socc_alpha]); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction's energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, basis, subset); Returns the requested Alpha orbital energies subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, basis, subs",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:2759,Energy Efficiency,energy,energy,2759,", arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key); Removes scalar or array QCVariable key from self if present. doccpi(self[, assume_socc_alpha]); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction's energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, basis, subset); Returns the requested Alpha orbital energies subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, basis, subset); Returns the requested Beta orbital energies subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. external_pot(self); Gets the requested external potential. force_occpi(self, arg0, arg1); Specialized expert use only. frequencies(); Returns the results of a frequency analysis. from_file(wfn_data); Build Wavefunction from data laid out like to_file(). frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). Deprecated since version 1.4. get_basisset(self, arg0); Returns the requested auxiliary basis. get_density(self, arg0); Experimental!. get_dipole_field_strength(self); Returns ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:2767,Energy Efficiency,energy,energy,2767,"sis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key); Removes scalar or array QCVariable key from self if present. doccpi(self[, assume_socc_alpha]); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction's energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, basis, subset); Returns the requested Alpha orbital energies subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, basis, subset); Returns the requested Beta orbital energies subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. external_pot(self); Gets the requested external potential. force_occpi(self, arg0, arg1); Specialized expert use only. frequencies(); Returns the results of a frequency analysis. from_file(wfn_data); Build Wavefunction from data laid out like to_file(). frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). Deprecated since version 1.4. get_basisset(self, arg0); Returns the requested auxiliary basis. get_density(self, arg0); Experimental!. get_dipole_field_strength(self); Returns a vector of length 3, containing the x, y, and ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:2808,Energy Efficiency,energy,energy,2808,"sis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key); Removes scalar or array QCVariable key from self if present. doccpi(self[, assume_socc_alpha]); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction's energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, basis, subset); Returns the requested Alpha orbital energies subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, basis, subset); Returns the requested Beta orbital energies subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. external_pot(self); Gets the requested external potential. force_occpi(self, arg0, arg1); Specialized expert use only. frequencies(); Returns the results of a frequency analysis. from_file(wfn_data); Build Wavefunction from data laid out like to_file(). frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). Deprecated since version 1.4. get_basisset(self, arg0); Returns the requested auxiliary basis. get_density(self, arg0); Experimental!. get_dipole_field_strength(self); Returns a vector of length 3, containing the x, y, and ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:6511,Energy Efficiency,energy,energy,6511,". nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. options(self); Returns the Wavefunction's options object. potential_variable(self, key); Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. potential_variables(self); Returns the dictionary of all ExternalPotential QC variables. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val); Sets scalar or array QCVariable key to val on self. shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmet",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:11653,Energy Efficiency,charge,charges,11653,"ut the requested alpha orbital space. Parameters:. id – Unique name for the orbital space.; basis – {‘SO’, ‘AO’}; Should the subspace be of symmetry orbitals or atomic orbitals?; subset – {ALL, ACTIVE, FROZEN, OCC, VIR, FROZEN_OCC, ACTIVE_OCC, ACTIVE_VIR, FROZEN_VIR}; Which subspace of orbitals should be returned?. Returns:; Information on subset alpha orbitals. Return type:; OrbitalSpace. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. Prefer variable(). array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. Prefer variables(). arrays()¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variables() instead. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None, *, quiet=False)¶; Build a wavefunction from minimal inputs, molecule and basis set. Parameters:. mol (Molecule) – Molecule for which to build the wavefunction instance.; basis (Union[None, str, BasisSet]) – Basis set for which to build the wavefunction instance. If a; BasisSet, taken as-is. If a string, taken as a name for the; primary basis. If None, name taken from BASIS.; quiet (bool) – When True, do not print to the output file. Return type:; Wavefunction. c1_deep_copy(self: psi4.core.Wavefunctio",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:12872,Energy Efficiency,energy,energy,12872," basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None, *, quiet=False)¶; Build a wavefunction from minimal inputs, molecule and basis set. Parameters:. mol (Molecule) – Molecule for which to build the wavefunction instance.; basis (Union[None, str, BasisSet]) – Basis set for which to build the wavefunction instance. If a; BasisSet, taken as-is. If a string, taken as a name for the; primary basis. If None, name taken from BASIS.; quiet (bool) – When True, do not print to the output file. Return type:; Wavefunction. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. Prefer del_variable(). del_potential_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. Prefer del_variable(). del_variable(key)¶; Removes scalar or array QCVariable key; from self if present. Parameters:. self (Wavefunction) – Wav",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:14207,Energy Efficiency,energy,energy,14207,"on) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. Prefer del_variable(). del_potential_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. Prefer del_variable(). del_variable(key)¶; Removes scalar or array QCVariable key; from self if present. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; None. doccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.Vector¶; Returns the requested Alpha orbital energies subset. Parameters:. basis – {‘AO’, ‘SO’, ‘MO’}; MO or SO select for Pitzer-ordering the return vector in the full computational point group symmetry.; AO selects for Pitzer-ordering the return vector without point group symmetry.; subset – {‘ALL’, ‘ACTIVE’, ‘FROZEN’, ‘OCC’, ‘VIR’, ‘FROZEN_OCC’, ‘ACTIVE_OCC’, ‘ACTIVE_VIR’, ‘FROZEN_VIR’}; Which subspace of orbital energies should be returned?. Returns:; A Pitzer-ordered vector of the orbitals. Return type:; Vector. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.Vector¶; Returns",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:14215,Energy Efficiency,energy,energy,14215," data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. Prefer del_variable(). del_potential_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. Prefer del_variable(). del_variable(key)¶; Removes scalar or array QCVariable key; from self if present. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; None. doccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.Vector¶; Returns the requested Alpha orbital energies subset. Parameters:. basis – {‘AO’, ‘SO’, ‘MO’}; MO or SO select for Pitzer-ordering the return vector in the full computational point group symmetry.; AO selects for Pitzer-ordering the return vector without point group symmetry.; subset – {‘ALL’, ‘ACTIVE’, ‘FROZEN’, ‘OCC’, ‘VIR’, ‘FROZEN_OCC’, ‘ACTIVE_OCC’, ‘ACTIVE_VIR’, ‘FROZEN_VIR’}; Which subspace of orbital energies should be returned?. Returns:; A Pitzer-ordered vector of the orbitals. Return type:; Vector. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.Vector¶; Returns the requested Beta orbital energies ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:14289,Energy Efficiency,energy,energy,14289,"vefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. Prefer del_variable(). del_potential_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. Prefer del_variable(). del_variable(key)¶; Removes scalar or array QCVariable key; from self if present. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; None. doccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.Vector¶; Returns the requested Alpha orbital energies subset. Parameters:. basis – {‘AO’, ‘SO’, ‘MO’}; MO or SO select for Pitzer-ordering the return vector in the full computational point group symmetry.; AO selects for Pitzer-ordering the return vector without point group symmetry.; subset – {‘ALL’, ‘ACTIVE’, ‘FROZEN’, ‘OCC’, ‘VIR’, ‘FROZEN_OCC’, ‘ACTIVE_OCC’, ‘ACTIVE_VIR’, ‘FROZEN_VIR’}; Which subspace of orbital energies should be returned?. Returns:; A Pitzer-ordered vector of the orbitals. Return type:; Vector. epsilon_b(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Beta Eigenvalues. epsilon_b_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.Vector¶; Returns the requested Beta orbital energies subset. Parameters:. basis – {‘AO’, ‘SO’, ‘",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:22260,Energy Efficiency,energy,energy,22260,"l¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefuncti",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:22314,Energy Efficiency,ENERGY,ENERGY,22314,". same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; S",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:23823,Energy Efficiency,ENERGY,ENERGY,23823,".Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; Sets the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Retur",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:24081,Energy Efficiency,ENERGY,ENERGY,24081,"core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; Sets the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Par",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:24348,Energy Efficiency,charge,charge,24348,". (This function is provisional and might be removed in the future.). set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (Optional[str]) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:25705,Energy Efficiency,charge,charges,25705," Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (Optional[str]) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:26052,Energy Efficiency,ENERGY,ENERGY,26052,"object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (Optional[str]) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:26790,Energy Efficiency,charge,charges,26790," are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. filename (Optional[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.; do_virtual (Optional[bool]) – Do write all the MOs to the MOLDEN file (True) or d",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:27320,Energy Efficiency,energy,energy,27320,"np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. filename (Optional[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.; do_virtual (Optional[bool]) – Do write all the MOs to the MOLDEN file (True) or discard the unoccupied; MOs (False). Not valid for NO’s. If unspecified (None), value taken from; MOLDEN_WITH_VIRTUAL.; use_natural (bool) – Write natural orbitals determined from density on wavefunction.; self (Wavefunction) – . Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:28104,Energy Efficiency,energy,energy,28104,"to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. filename (Optional[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.; do_virtual (Optional[bool]) – Do write all the MOs to the MOLDEN file (True) or discard the unoccupied; MOs (False). Not valid for NO’s. If unspecified (None), value taken from; MOLDEN_WITH_VIRTUAL.; use_natural (bool) – Write natural orbitals determined from density on wavefunction.; self (Wavefunction) – . Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.; The first two arguments of get_opdm(); can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:28259,Energy Efficiency,energy,energy,28259,"he density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. filename (Optional[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.; do_virtual (Optional[bool]) – Do write all the MOs to the MOLDEN file (True) or discard the unoccupied; MOs (False). Not valid for NO’s. If unspecified (None), value taken from; MOLDEN_WITH_VIRTUAL.; use_natural (bool) – Write natural orbitals determined from density on wavefunction.; self (Wavefunction) – . Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.; The first two arguments of get_opdm(); can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶; Write wavefunction information in wfn to name in NBO format. Parameters:; name (str) – ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:28981,Energy Efficiency,energy,energy,28981,"nal[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.; do_virtual (Optional[bool]) – Do write all the MOs to the MOLDEN file (True) or discard the unoccupied; MOs (False). Not valid for NO’s. If unspecified (None), value taken from; MOLDEN_WITH_VIRTUAL.; use_natural (bool) – Write natural orbitals determined from density on wavefunction.; self (Wavefunction) – . Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> wfn.molden('mycalc.molden'). Molden file with the natural orbitals of a CCSD computation. For correlated methods, an energy call will not compute the density.; “properties” or “gradient” must be called.; >>> E, wfn = properties('ccsd', return_wfn=True); >>> wfn.molden('ccsd_no.molden', use_natural=True). To supply a custom density matrix, manually set the Da and Db of the wavefunction.; This is used, for example, to write natural orbitals coming from a root computed; by a CIWavefunction computation, e.g., detci, fci, casscf.; The first two arguments of get_opdm(); can be set to n, n where n => 0 selects the root to; write out, provided these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> wfn.Da() = wfn.get_opdm(0, 0, ""A"", True); >>> wfn.Db() = wfn.get_opdm(0, 0, ""B"", True); >>> molden(wfn, 'no_root1.molden', use_natural=True). write_nbo(name)¶; Write wavefunction information in wfn to name in NBO format. Parameters:; name (str) – Destination file name for NBO file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Wavefunction. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:1379,Modifiability,variab,variable,1379,"t. Cb(self); Returns the Beta Orbitals. Cb_subset(self, arg0, arg1); Returns the requested Beta orbital subset. Da(self); Returns the Alpha Density Matrix. Da_subset(self, arg0); Returns the requested Alpha Density subset. Db(self); Returns the Beta Density Matrix. Db_subset(self, arg0); Returns the requested Beta Density subset. Fa(self); Returns the Alpha Fock Matrix. Fa_subset(self, arg0); Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self); Returns the Beta Fock Matrix. Fb_subset(self, arg0); Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self); Returns the 'Core' Matrix (Potential + Kinetic) Integrals. PCM_enabled(self); Whether running a PCM calculation. S(self); Returns the One-electron Overlap Matrix. alpha_orbital_space(self, id, basis, subset); Creates OrbitalSpace with information about the requested alpha orbital space. aotoso(self); Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). Deprecated since version 1.4. atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC va",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:1452,Modifiability,variab,variables,1452,"sted Beta orbital subset. Da(self); Returns the Alpha Density Matrix. Da_subset(self, arg0); Returns the requested Alpha Density subset. Db(self); Returns the Beta Density Matrix. Db_subset(self, arg0); Returns the requested Beta Density subset. Fa(self); Returns the Alpha Fock Matrix. Fa_subset(self, arg0); Returns the Alpha Fock Matrix in the requested basis (AO,SO). Fb(self); Returns the Beta Fock Matrix. Fb_subset(self, arg0); Returns the Beta Fock Matrix in the requested basis (AO,SO). H(self); Returns the 'Core' Matrix (Potential + Kinetic) Integrals. PCM_enabled(self); Whether running a PCM calculation. S(self); Returns the One-electron Overlap Matrix. alpha_orbital_space(self, id, basis, subset); Creates OrbitalSpace with information about the requested alpha orbital space. aotoso(self); Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). Deprecated since version 1.4. atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:2338,Modifiability,variab,variable,2338,"riable(self, arg0); Returns copy of the requested (case-insensitive) Matrix QC variable. array_variables(self); Returns the dictionary of all Matrix QC variables. arrays(). Deprecated since version 1.4. atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key); Removes scalar or array QCVariable key from self if present. doccpi(self[, assume_socc_alpha]); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction's energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, basis, subset); Returns the requested Alpha orbital energies subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, basis, subset); Returns the requested Beta orbital energies subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. external_pot(self); Gets the requested external potential. force_occpi(self, arg0, arg1); Specialized expert use only. frequencies(); Returns ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:2446,Modifiability,variab,variable,2446,"les(self); Returns the dictionary of all Matrix QC variables. arrays(). Deprecated since version 1.4. atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key); Removes scalar or array QCVariable key from self if present. doccpi(self[, assume_socc_alpha]); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction's energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, basis, subset); Returns the requested Alpha orbital energies subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, basis, subset); Returns the requested Beta orbital energies subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. external_pot(self); Gets the requested external potential. force_occpi(self, arg0, arg1); Specialized expert use only. frequencies(); Returns the results of a frequency analysis. from_file(wfn_data); Build Wavefunction from data laid out like",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:2540,Modifiability,variab,variable,2540," atomic_point_charges(self); Returns the set atomic point charges. basis_projection(self, arg0, arg1, arg2, arg3); Projects a orbital matrix from one basis to another. basisset(self); Returns the current orbital basis. beta_orbital_space(self, arg0, arg1, arg2); docstring. build(mol[, basis, quiet]); Build a wavefunction from minimal inputs, molecule and basis set. c1_deep_copy(self, basis); Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self); Computes the energy of the Wavefunction. compute_gradient(self); Computes the gradient of the Wavefunction. compute_hessian(self); Computes the Hessian of the Wavefunction. deep_copy(self, arg0); Deep copies the internal data. del_array_variable(self, arg0); Removes the requested (case-insensitive) Matrix QC variable. del_potential_variable(self, arg0); Removes the requested (case-insensitive) ExternalPotential QC variable. del_scalar_variable(self, arg0); Removes the requested (case-insensitive) double QC variable. del_variable(key); Removes scalar or array QCVariable key from self if present. doccpi(self[, assume_socc_alpha]); Returns the number of doubly occupied orbitals per irrep. efzc(self); Returns the frozen-core energy. energy(self); Returns the Wavefunction's energy. epsilon_a(self); Returns the Alpha Eigenvalues. epsilon_a_subset(self, basis, subset); Returns the requested Alpha orbital energies subset. epsilon_b(self); Returns the Beta Eigenvalues. epsilon_b_subset(self, basis, subset); Returns the requested Beta orbital energies subset. esp_at_nuclei(self); returns electrostatic potentials at nuclei. external_pot(self); Gets the requested external potential. force_occpi(self, arg0, arg1); Specialized expert use only. frequencies(); Returns the results of a frequency analysis. from_file(wfn_data); Build Wavefunction from data laid out like to_file(). frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:4136,Modifiability,variab,variable,4136,"otentials at nuclei. external_pot(self); Gets the requested external potential. force_occpi(self, arg0, arg1); Specialized expert use only. frequencies(); Returns the results of a frequency analysis. from_file(wfn_data); Build Wavefunction from data laid out like to_file(). frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). Deprecated since version 1.4. get_basisset(self, arg0); Returns the requested auxiliary basis. get_density(self, arg0); Experimental!. get_dipole_field_strength(self); Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self); Get the print level of the Wavefunction. get_scratch_filename(filenumber); Return canonical path to scratch file filenumber based on molecule on self. get_variable(key). Deprecated since version 1.4. gradient(self); Returns the Wavefunction's gradient. has_array_variable(self, arg0); Is the Matrix QC variable (case-insensitive) set? Prefer has_variable(). has_potential_variable(self, arg0); Is the ExternalPotential QC variable (case-insensitive) set? (This function is provisional and might be removed in the future.). has_scalar_variable(self, arg0); Is the double QC variable (case-insensitive) set? Prefer has_variable(). has_variable(key); Whether scalar or array QCVariable key has been set on self. hessian(self); Returns the Wavefunction's Hessian. lagrangian(self); Returns the Lagrangian Matrix. mintshelper(self); Returns the current MintsHelper object. mo_extents(self); returns the wavefunction's electronic orbital extents. module(self); Name of the last/highest level of theory module (internal or external) touching the wavefunction. molecule(self); Returns the Wavefunction's molecule. nalpha(self); Number of Alpha electrons. nalphapi(self); Returns the number of alpha orbitals per irrep. name(self); The level of theory this wavefunction corresponds to. nbeta(self); Number of Beta ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:4256,Modifiability,variab,variable,4256,"only. frequencies(); Returns the results of a frequency analysis. from_file(wfn_data); Build Wavefunction from data laid out like to_file(). frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). Deprecated since version 1.4. get_basisset(self, arg0); Returns the requested auxiliary basis. get_density(self, arg0); Experimental!. get_dipole_field_strength(self); Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self); Get the print level of the Wavefunction. get_scratch_filename(filenumber); Return canonical path to scratch file filenumber based on molecule on self. get_variable(key). Deprecated since version 1.4. gradient(self); Returns the Wavefunction's gradient. has_array_variable(self, arg0); Is the Matrix QC variable (case-insensitive) set? Prefer has_variable(). has_potential_variable(self, arg0); Is the ExternalPotential QC variable (case-insensitive) set? (This function is provisional and might be removed in the future.). has_scalar_variable(self, arg0); Is the double QC variable (case-insensitive) set? Prefer has_variable(). has_variable(key); Whether scalar or array QCVariable key has been set on self. hessian(self); Returns the Wavefunction's Hessian. lagrangian(self); Returns the Lagrangian Matrix. mintshelper(self); Returns the current MintsHelper object. mo_extents(self); returns the wavefunction's electronic orbital extents. module(self); Name of the last/highest level of theory module (internal or external) touching the wavefunction. molecule(self); Returns the Wavefunction's molecule. nalpha(self); Number of Alpha electrons. nalphapi(self); Returns the number of alpha orbitals per irrep. name(self); The level of theory this wavefunction corresponds to. nbeta(self); Number of Beta electrons. nbetapi(self); Returns the number of beta orbitals per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); N",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:4407,Modifiability,variab,variable,4407,"(). frzcpi(self); Returns the number of frozen core orbitals per irrep. frzvpi(self); Returns the number of frozen virtual orbitals per irrep. get_array(key). Deprecated since version 1.4. get_basisset(self, arg0); Returns the requested auxiliary basis. get_density(self, arg0); Experimental!. get_dipole_field_strength(self); Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self); Get the print level of the Wavefunction. get_scratch_filename(filenumber); Return canonical path to scratch file filenumber based on molecule on self. get_variable(key). Deprecated since version 1.4. gradient(self); Returns the Wavefunction's gradient. has_array_variable(self, arg0); Is the Matrix QC variable (case-insensitive) set? Prefer has_variable(). has_potential_variable(self, arg0); Is the ExternalPotential QC variable (case-insensitive) set? (This function is provisional and might be removed in the future.). has_scalar_variable(self, arg0); Is the double QC variable (case-insensitive) set? Prefer has_variable(). has_variable(key); Whether scalar or array QCVariable key has been set on self. hessian(self); Returns the Wavefunction's Hessian. lagrangian(self); Returns the Lagrangian Matrix. mintshelper(self); Returns the current MintsHelper object. mo_extents(self); returns the wavefunction's electronic orbital extents. module(self); Name of the last/highest level of theory module (internal or external) touching the wavefunction. molecule(self); Returns the Wavefunction's molecule. nalpha(self); Number of Alpha electrons. nalphapi(self); Returns the number of alpha orbitals per irrep. name(self); The level of theory this wavefunction corresponds to. nbeta(self); Number of Beta electrons. nbetapi(self); Returns the number of beta orbitals per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:5755,Modifiability,variab,variable,5755,"ts(self); returns the wavefunction's electronic orbital extents. module(self); Name of the last/highest level of theory module (internal or external) touching the wavefunction. molecule(self); Returns the Wavefunction's molecule. nalpha(self); Number of Alpha electrons. nalphapi(self); Returns the number of alpha orbitals per irrep. name(self); The level of theory this wavefunction corresponds to. nbeta(self); Number of Beta electrons. nbetapi(self); Returns the number of beta orbitals per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. options(self); Returns the Wavefunction's options object. potential_variable(self, key); Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. potential_variables(self); Returns the dictionary of all ExternalPotential QC variables. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian.",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:5847,Modifiability,variab,variables,5847,"t level of theory module (internal or external) touching the wavefunction. molecule(self); Returns the Wavefunction's molecule. nalpha(self); Number of Alpha electrons. nalphapi(self); Returns the number of alpha orbitals per irrep. name(self); The level of theory this wavefunction corresponds to. nbeta(self); Number of Beta electrons. nbetapi(self); Returns the number of beta orbitals per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. options(self); Returns the Wavefunction's options object. potential_variable(self, key); Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. potential_variables(self); Returns the dictionary of all ExternalPotential QC variables. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name o",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:6163,Modifiability,variab,variable,6163,"ber of Beta electrons. nbetapi(self); Returns the number of beta orbitals per irrep. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. options(self); Returns the Wavefunction's options object. potential_variable(self, key); Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. potential_variables(self); Returns the dictionary of all ExternalPotential QC variables. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets th",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:6237,Modifiability,variab,variables,6237,"p. nfrzc(self); Number of frozen core electrons. nirrep(self); Number of irreps in the system. nmo(self); Number of molecule orbitals. nmopi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. options(self); Returns the Wavefunction's options object. potential_variable(self, key); Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. potential_variables(self); Returns the dictionary of all ExternalPotential QC variables. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstrin",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:6385,Modifiability,variab,variable,6385,"opi(self); Returns the number of molecular orbitals per irrep. no_occupations(self); returns the natural orbital occupations on the wavefunction. nso(self); Number of symmetry orbitals. nsopi(self); Returns the number of symmetry orbitals per irrep. options(self); Returns the Wavefunction's options object. potential_variable(self, key); Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. potential_variables(self); Returns the dictionary of all ExternalPotential QC variables. reference_wavefunction(self); Returns the reference wavefunction. same_a_b_dens(self); Returns true if the alpha and beta densities are the same. same_a_b_orbs(self); Returns true if the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val); Sets scalar ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:7087,Modifiability,variab,variable,7087," the alpha and beta orbitals are the same. scalar_variable(self, arg0); Returns the requested (case-insensitive) double QC variable. scalar_variables(self); Returns the dictionary of all double QC variables. set_array(key, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val); Sets scalar or array QCVariable key to val on self. shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmetry orbitals basis. soccpi(self[, assume_socc_alpha]); Returns the number of singly occupied orbitals per irrep. to_file([filename]); Serialize a Wavefunction object. variable(key); Return copy of scalar or array QCVariable key from self. variables([include_deprecated_keys]); Return all scalar or array QCVariables from self. write_molden([filename, do_virtual, use_natural]); Writes wavefunction information in wfn to filename in molden format. write_nbo(name); Write wavefunction information in wfn to name in NBO format. Methods Documentation. Ca(s",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:7300,Modifiability,variab,variable,7300,"y, val). Deprecated since version 1.4. set_array_variable(self, arg0, arg1); Sets the requested (case-insensitive) Matrix QC variable. set_basisset(self, arg0, arg1); Sets the requested auxiliary basis. set_energy(self, arg0); Sets the Wavefunction's energy. set_external_potential(self, arg0); Sets the requested external potential. set_gradient(self, arg0); Sets the Wavefunction's gradient. set_hessian(self, arg0); Sets the Wavefunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val); Sets scalar or array QCVariable key to val on self. shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmetry orbitals basis. soccpi(self[, assume_socc_alpha]); Returns the number of singly occupied orbitals per irrep. to_file([filename]); Serialize a Wavefunction object. variable(key); Return copy of scalar or array QCVariable key from self. variables([include_deprecated_keys]); Return all scalar or array QCVariables from self. write_molden([filename, do_virtual, use_natural]); Writes wavefunction information in wfn to filename in molden format. write_nbo(name); Write wavefunction information in wfn to name in NBO format. Methods Documentation. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Alpha orbital subset. Parameters:. ba",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:7656,Modifiability,variab,variable,7656,"efunction's Hessian. set_lagrangian(self, arg0); Sets the orbital Lagrangian matrix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val); Sets scalar or array QCVariable key to val on self. shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmetry orbitals basis. soccpi(self[, assume_socc_alpha]); Returns the number of singly occupied orbitals per irrep. to_file([filename]); Serialize a Wavefunction object. variable(key); Return copy of scalar or array QCVariable key from self. variables([include_deprecated_keys]); Return all scalar or array QCVariables from self. write_molden([filename, do_virtual, use_natural]); Writes wavefunction information in wfn to filename in molden format. write_nbo(name); Write wavefunction information in wfn to name in NBO format. Methods Documentation. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Alpha orbital subset. Parameters:. basis (str) – {‘SO’, AO’}; Should the subset be of symmetry orbitals or atomic orbitals?; subset (str) – {‘ALL’, ‘ACTIVE’, ‘FROZEN’, ‘OCC’, ‘VIR’, ‘FROZEN_OCC’, ‘ACTIVE_OCC’, ‘ACTIVE_VIR’, ‘FROZEN_VIR’}; Which subspace of orbitals should be returned?. Returns:; A Pitzer-ordered matrix of the orbitals, (# basis functions, # orbitals in the subset).; Pitzer-ordering is with respect to c1 symmetry if basis is AO. Return type:; Matr",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:7728,Modifiability,variab,variables,7728,"rix. set_module(self, module); Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self, arg0); Sets the level of theory this wavefunction corresponds to. set_potential_variable(self, arg0, arg1); Sets the requested (case-insensitive) ExternalPotential QC variable. set_print(self, arg0); Sets the print level of the Wavefunction. set_reference_wavefunction(self, arg0); docstring. set_scalar_variable(self, arg0, arg1); Sets the requested (case-insensitive) double QC variable. set_variable(key, val); Sets scalar or array QCVariable key to val on self. shallow_copy(self, arg0); Copies the pointers to the internal data. sobasisset(self); Returns the symmetry orbitals basis. soccpi(self[, assume_socc_alpha]); Returns the number of singly occupied orbitals per irrep. to_file([filename]); Serialize a Wavefunction object. variable(key); Return copy of scalar or array QCVariable key from self. variables([include_deprecated_keys]); Return all scalar or array QCVariables from self. write_molden([filename, do_virtual, use_natural]); Writes wavefunction information in wfn to filename in molden format. write_nbo(name); Write wavefunction information in wfn to name in NBO format. Methods Documentation. Ca(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Alpha Orbitals. Ca_subset(self: psi4.core.Wavefunction, arg0: str, arg1: str) → psi4.core.Matrix¶; Returns the requested Alpha orbital subset. Parameters:. basis (str) – {‘SO’, AO’}; Should the subset be of symmetry orbitals or atomic orbitals?; subset (str) – {‘ALL’, ‘ACTIVE’, ‘FROZEN’, ‘OCC’, ‘VIR’, ‘FROZEN_OCC’, ‘ACTIVE_OCC’, ‘ACTIVE_VIR’, ‘FROZEN_VIR’}; Which subspace of orbitals should be returned?. Returns:; A Pitzer-ordered matrix of the orbitals, (# basis functions, # orbitals in the subset).; Pitzer-ordering is with respect to c1 symmetry if basis is AO. Return type:; Matrix. Cb(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Beta Orbit",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:11285,Modifiability,variab,variable,11285,"the ‘Core’ Matrix (Potential + Kinetic) Integrals. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, id: str, basis: str, subset: str) → psi4.core.OrbitalSpace¶; Creates OrbitalSpace with information about the requested alpha orbital space. Parameters:. id – Unique name for the orbital space.; basis – {‘SO’, ‘AO’}; Should the subspace be of symmetry orbitals or atomic orbitals?; subset – {ALL, ACTIVE, FROZEN, OCC, VIR, FROZEN_OCC, ACTIVE_OCC, ACTIVE_VIR, FROZEN_VIR}; Which subspace of orbitals should be returned?. Returns:; Information on subset alpha orbitals. Return type:; OrbitalSpace. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. Prefer variable(). array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. Prefer variables(). arrays()¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variables() instead. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None, *, quiet=False)¶; Build a wavefunction from minimal inputs, molecule and basis set. Parameters:. mol (Molecule) – Molecule ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:11302,Modifiability,variab,variable,11302,"s. PCM_enabled(self: psi4.core.Wavefunction) → bool¶; Whether running a PCM calculation. S(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, id: str, basis: str, subset: str) → psi4.core.OrbitalSpace¶; Creates OrbitalSpace with information about the requested alpha orbital space. Parameters:. id – Unique name for the orbital space.; basis – {‘SO’, ‘AO’}; Should the subspace be of symmetry orbitals or atomic orbitals?; subset – {ALL, ACTIVE, FROZEN, OCC, VIR, FROZEN_OCC, ACTIVE_OCC, ACTIVE_VIR, FROZEN_VIR}; Which subspace of orbitals should be returned?. Returns:; Information on subset alpha orbitals. Return type:; OrbitalSpace. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. Prefer variable(). array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. Prefer variables(). arrays()¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variables() instead. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None, *, quiet=False)¶; Build a wavefunction from minimal inputs, molecule and basis set. Parameters:. mol (Molecule) – Molecule for which to build the wavefunction instance.; b",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:11432,Modifiability,variab,variables,11432,"vefunction) → psi4.core.Matrix¶; Returns the One-electron Overlap Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, id: str, basis: str, subset: str) → psi4.core.OrbitalSpace¶; Creates OrbitalSpace with information about the requested alpha orbital space. Parameters:. id – Unique name for the orbital space.; basis – {‘SO’, ‘AO’}; Should the subspace be of symmetry orbitals or atomic orbitals?; subset – {ALL, ACTIVE, FROZEN, OCC, VIR, FROZEN_OCC, ACTIVE_OCC, ACTIVE_VIR, FROZEN_VIR}; Which subspace of orbitals should be returned?. Returns:; Information on subset alpha orbitals. Return type:; OrbitalSpace. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. Prefer variable(). array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. Prefer variables(). arrays()¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variables() instead. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None, *, quiet=False)¶; Build a wavefunction from minimal inputs, molecule and basis set. Parameters:. mol (Molecule) – Molecule for which to build the wavefunction instance.; basis (Union[None, str, BasisSet]) – Basis set for which to build the wavefunction instance. If a; BasisSet, ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:11450,Modifiability,variab,variables,11450," the One-electron Overlap Matrix. alpha_orbital_space(self: psi4.core.Wavefunction, id: str, basis: str, subset: str) → psi4.core.OrbitalSpace¶; Creates OrbitalSpace with information about the requested alpha orbital space. Parameters:. id – Unique name for the orbital space.; basis – {‘SO’, ‘AO’}; Should the subspace be of symmetry orbitals or atomic orbitals?; subset – {ALL, ACTIVE, FROZEN, OCC, VIR, FROZEN_OCC, ACTIVE_OCC, ACTIVE_VIR, FROZEN_VIR}; Which subspace of orbitals should be returned?. Returns:; Information on subset alpha orbitals. Return type:; OrbitalSpace. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. Prefer variable(). array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. Prefer variables(). arrays()¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variables() instead. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None, *, quiet=False)¶; Build a wavefunction from minimal inputs, molecule and basis set. Parameters:. mol (Molecule) – Molecule for which to build the wavefunction instance.; basis (Union[None, str, BasisSet]) – Basis set for which to build the wavefunction instance. If a; BasisSet, taken as-is. If a string, taken as a nam",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:11531,Modifiability,variab,variables,11531,"tr, basis: str, subset: str) → psi4.core.OrbitalSpace¶; Creates OrbitalSpace with information about the requested alpha orbital space. Parameters:. id – Unique name for the orbital space.; basis – {‘SO’, ‘AO’}; Should the subspace be of symmetry orbitals or atomic orbitals?; subset – {ALL, ACTIVE, FROZEN, OCC, VIR, FROZEN_OCC, ACTIVE_OCC, ACTIVE_VIR, FROZEN_VIR}; Which subspace of orbitals should be returned?. Returns:; Information on subset alpha orbitals. Return type:; OrbitalSpace. aotoso(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Atomic Orbital to Symmetry Orbital transformer. array_variable(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Returns copy of the requested (case-insensitive) Matrix QC variable. Prefer variable(). array_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.Matrix]¶; Returns the dictionary of all Matrix QC variables. Prefer variables(). arrays()¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variables() instead. atomic_point_charges(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the set atomic point charges. basis_projection(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix, arg1: psi4.core.Dimension, arg2: psi4.core.BasisSet, arg3: psi4.core.BasisSet) → psi4.core.Matrix¶; Projects a orbital matrix from one basis to another. basisset(self: psi4.core.Wavefunction) → psi4.core.BasisSet¶; Returns the current orbital basis. beta_orbital_space(self: psi4.core.Wavefunction, arg0: str, arg1: str, arg2: str) → psi4.core.OrbitalSpace¶; docstring. static build(mol, basis=None, *, quiet=False)¶; Build a wavefunction from minimal inputs, molecule and basis set. Parameters:. mol (Molecule) – Molecule for which to build the wavefunction instance.; basis (Union[None, str, BasisSet]) – Basis set for which to build the wavefunction instance. If a; BasisSet, taken as-is. If a string, taken as a name for the; primary basis. If None, name taken from BASIS.; quiet (bool) – When True, do n",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:13349,Modifiability,variab,variable,13349,"nion[None, str, BasisSet]) – Basis set for which to build the wavefunction instance. If a; BasisSet, taken as-is. If a string, taken as a name for the; primary basis. If None, name taken from BASIS.; quiet (bool) – When True, do not print to the output file. Return type:; Wavefunction. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. Prefer del_variable(). del_potential_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. Prefer del_variable(). del_variable(key)¶; Removes scalar or array QCVariable key; from self if present. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; None. doccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self:",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:13516,Modifiability,variab,variable,13516,"sis. If None, name taken from BASIS.; quiet (bool) – When True, do not print to the output file. Return type:; Wavefunction. c1_deep_copy(self: psi4.core.Wavefunction, basis: psi4.core.BasisSet) → psi4.core.Wavefunction¶; Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. Prefer del_variable(). del_potential_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. Prefer del_variable(). del_variable(key)¶; Removes scalar or array QCVariable key; from self if present. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; None. doccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:13714,Modifiability,variab,variable,13714,"ore.Wavefunction¶; Returns a new wavefunction with internal data converted to \(C_1\) symmetry, using pre-c1-constructed basis. compute_energy(self: psi4.core.Wavefunction) → float¶; Computes the energy of the Wavefunction. compute_gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the gradient of the Wavefunction. compute_hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Computes the Hessian of the Wavefunction. deep_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Deep copies the internal data. del_array_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) Matrix QC variable. Prefer del_variable(). del_potential_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). del_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → int¶; Removes the requested (case-insensitive) double QC variable. Prefer del_variable(). del_variable(key)¶; Removes scalar or array QCVariable key; from self if present. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; None. doccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of doubly occupied orbitals per irrep. efzc(self: psi4.core.Wavefunction) → float¶; Returns the frozen-core energy. energy(self: psi4.core.Wavefunction) → float¶; Returns the Wavefunction’s energy. epsilon_a(self: psi4.core.Wavefunction) → psi4.core.Vector¶; Returns the Alpha Eigenvalues. epsilon_a_subset(self: psi4.core.Wavefunction, basis: str, subset: str) → psi4.core.Vector¶; Returns the requested Alpha orbital energies subset. Parameters:. basis – {‘AO’, ‘SO’, ‘MO’}; MO or SO select for Pitzer-ordering the return vector in the full computational point group symmetry.",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:17061,Modifiability,variab,variable,17061,"oubly and singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. frequencies()¶; Returns the results of a frequency analysis. Parameters:; self – Wavefunction instance. Returns:; A dictionary of vibrational information. See psi4.driver.qcdb.vib.harmonic_analysis(). Return type:; Optional[Dict[str, ndarray]]. static from_file(wfn_data)¶; Build Wavefunction from data laid out like; to_file(). Parameters:; wfn_data (Union[str, Dict, Path]) – If a dict, use data directly. Otherwise, path-like passed to; numpy.load() to read from disk. Returns:; A deserialized Wavefunction object. Return type:; Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. get_array(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_density(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Experimental!. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Return canonical path to scratch file filenumber based on molecule on self. Parameters:. self (Wavefunction) – Wavefunction instance.; filenumber (int) – Scratch file number from psi4/psi4/include/psi4/psifiles.h. Return type:; str. get_variable(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Ma",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:17876,Modifiability,variab,variable,17876,"4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. get_array(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_density(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Experimental!. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Return canonical path to scratch file filenumber based on molecule on self. Parameters:. self (Wavefunction) – Wavefunction instance.; filenumber (int) – Scratch file number from psi4/psi4/include/psi4/psifiles.h. Return type:; str. get_variable(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set? Prefer has_variable(). has_potential_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the ExternalPotential QC variable (case-insensitive) set? (This function is provisional and might be removed in the future.). has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set? Prefer has_variable(). has_variable(key)¶; Whether scalar or array QCVariable key; has been set on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; bool. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. lagrangian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns t",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:18079,Modifiability,variab,variable,18079,"get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_density(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Experimental!. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Return canonical path to scratch file filenumber based on molecule on self. Parameters:. self (Wavefunction) – Wavefunction instance.; filenumber (int) – Scratch file number from psi4/psi4/include/psi4/psifiles.h. Return type:; str. get_variable(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set? Prefer has_variable(). has_potential_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the ExternalPotential QC variable (case-insensitive) set? (This function is provisional and might be removed in the future.). has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set? Prefer has_variable(). has_variable(key)¶; Whether scalar or array QCVariable key; has been set on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; bool. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. lagrangian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. mintshelper(self: psi4.core.Wavefunction) → psi4.core.MintsHelper¶; Returns the current MintsHelper object. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:18236,Modifiability,variab,variable,18236,"i4.core.Matrix¶; Experimental!. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Return canonical path to scratch file filenumber based on molecule on self. Parameters:. self (Wavefunction) – Wavefunction instance.; filenumber (int) – Scratch file number from psi4/psi4/include/psi4/psifiles.h. Return type:; str. get_variable(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set? Prefer has_variable(). has_potential_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the ExternalPotential QC variable (case-insensitive) set? (This function is provisional and might be removed in the future.). has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set? Prefer has_variable(). has_variable(key)¶; Whether scalar or array QCVariable key; has been set on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; bool. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. lagrangian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. mintshelper(self: psi4.core.Wavefunction) → psi4.core.MintsHelper¶; Returns the current MintsHelper object. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. module(self: psi4.core.Wavefunction) → str¶; Name of the last/highest level of theory module (internal or external)",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:18424,Modifiability,variab,variable,18424,"ield strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Return canonical path to scratch file filenumber based on molecule on self. Parameters:. self (Wavefunction) – Wavefunction instance.; filenumber (int) – Scratch file number from psi4/psi4/include/psi4/psifiles.h. Return type:; str. get_variable(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. gradient(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s gradient. has_array_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the Matrix QC variable (case-insensitive) set? Prefer has_variable(). has_potential_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the ExternalPotential QC variable (case-insensitive) set? (This function is provisional and might be removed in the future.). has_scalar_variable(self: psi4.core.Wavefunction, arg0: str) → bool¶; Is the double QC variable (case-insensitive) set? Prefer has_variable(). has_variable(key)¶; Whether scalar or array QCVariable key; has been set on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or; Matrix storage maps. Return type:; bool. hessian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Wavefunction’s Hessian. lagrangian(self: psi4.core.Wavefunction) → psi4.core.Matrix¶; Returns the Lagrangian Matrix. mintshelper(self: psi4.core.Wavefunction) → psi4.core.MintsHelper¶; Returns the current MintsHelper object. mo_extents(self: psi4.core.Wavefunction) → List[psi4.core.Vector]¶; returns the wavefunction’s electronic orbital extents. module(self: psi4.core.Wavefunction) → str¶; Name of the last/highest level of theory module (internal or external) touching the wavefunction. molecule(self: psi4.core.Wavefunction) → psi4.core.Molecule¶; Returns the Wavefunction’s molecule. nalpha(self: psi4.core.Wavefunction) → int¶; ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:20763,Modifiability,variab,variable,20763,"trons. nbetapi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of beta orbitals per irrep. nfrzc(self: psi4.core.Wavefunction) → int¶; Number of frozen core electrons. nirrep(self: psi4.core.Wavefunction) → int¶; Number of irreps in the system. nmo(self: psi4.core.Wavefunction) → int¶; Number of molecule orbitals. nmopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of molecular orbitals per irrep. no_occupations(self: psi4.core.Wavefunction) → List[List[Tuple[float, int, int]]]¶; returns the natural orbital occupations on the wavefunction. nso(self: psi4.core.Wavefunction) → int¶; Number of symmetry orbitals. nsopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of symmetry orbitals per irrep. options(self: psi4.core.Wavefunction) → psi::Options¶; Returns the Wavefunction’s options object. potential_variable(self: psi4.core.Wavefunction, key: str) → psi4.core.ExternalPotential¶; Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. (This function is provisional and might be removed in the future.). potential_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.ExternalPotential]¶; Returns the dictionary of all ExternalPotential QC variables. (This function is provisional and might be removed in the future.). reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:20989,Modifiability,variab,variables,20989,"t¶; Number of irreps in the system. nmo(self: psi4.core.Wavefunction) → int¶; Number of molecule orbitals. nmopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of molecular orbitals per irrep. no_occupations(self: psi4.core.Wavefunction) → List[List[Tuple[float, int, int]]]¶; returns the natural orbital occupations on the wavefunction. nso(self: psi4.core.Wavefunction) → int¶; Number of symmetry orbitals. nsopi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of symmetry orbitals per irrep. options(self: psi4.core.Wavefunction) → psi::Options¶; Returns the Wavefunction’s options object. potential_variable(self: psi4.core.Wavefunction, key: str) → psi4.core.ExternalPotential¶; Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. (This function is provisional and might be removed in the future.). potential_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.ExternalPotential]¶; Returns the dictionary of all ExternalPotential QC variables. (This function is provisional and might be removed in the future.). reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:21525,Modifiability,variab,variable,21525,"bitals per irrep. options(self: psi4.core.Wavefunction) → psi::Options¶; Returns the Wavefunction’s options object. potential_variable(self: psi4.core.Wavefunction, key: str) → psi4.core.ExternalPotential¶; Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. (This function is provisional and might be removed in the future.). potential_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.ExternalPotential]¶; Returns the dictionary of all ExternalPotential QC variables. (This function is provisional and might be removed in the future.). reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:21542,Modifiability,variab,variable,21542," psi::Options¶; Returns the Wavefunction’s options object. potential_variable(self: psi4.core.Wavefunction, key: str) → psi4.core.ExternalPotential¶; Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. (This function is provisional and might be removed in the future.). potential_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.ExternalPotential]¶; Returns the dictionary of all ExternalPotential QC variables. (This function is provisional and might be removed in the future.). reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the W",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:21662,Modifiability,variab,variables,21662,"i4.core.Wavefunction, key: str) → psi4.core.ExternalPotential¶; Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. (This function is provisional and might be removed in the future.). potential_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.ExternalPotential]¶; Returns the dictionary of all ExternalPotential QC variables. (This function is provisional and might be removed in the future.). reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_he",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:21680,Modifiability,variab,variables,21680,"otential¶; Returns copy of the requested (case-insensitive) ExternalPotential QC variable key. (This function is provisional and might be removed in the future.). potential_variables(self: psi4.core.Wavefunction) → Dict[str, psi4.core.ExternalPotential]¶; Returns the dictionary of all ExternalPotential QC variables. (This function is provisional and might be removed in the future.). reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:21937,Modifiability,variab,variable,21937,"i4.core.ExternalPotential]¶; Returns the dictionary of all ExternalPotential QC variables. (This function is provisional and might be removed in the future.). reference_wavefunction(self: psi4.core.Wavefunction) → psi4.core.Wavefunction¶; Returns the reference wavefunction. same_a_b_dens(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta densities are the same. same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_modu",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:22297,Modifiability,variab,variable,22297,". same_a_b_orbs(self: psi4.core.Wavefunction) → bool¶; Returns true if the alpha and beta orbitals are the same. scalar_variable(self: psi4.core.Wavefunction, arg0: str) → float¶; Returns the requested (case-insensitive) double QC variable. Prefer variable(). scalar_variables(self: psi4.core.Wavefunction) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; S",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:22597,Modifiability,variab,variable,22597,"tion) → Dict[str, float]¶; Returns the dictionary of all double QC variables. Prefer variables(). set_array(key, val)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; Sets the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:22761,Modifiability,variab,variable,22761,".Wavefunction.set_variable() instead. set_array_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.Matrix) → None¶; Sets the requested (case-insensitive) Matrix QC variable. Syncs with Wavefunction.gradient_ or hessian_ if CURRENT GRADIENT or HESSIAN. Prefer set_variable(). set_basisset(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.BasisSet) → None¶; Sets the requested auxiliary basis. set_energy(self: psi4.core.Wavefunction, arg0: float) → None¶; Sets the Wavefunction’s energy. Syncs with Wavefunction’s QC variable CURRENT ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; Sets the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive)",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:23352,Modifiability,variab,variable,23352," ENERGY. set_external_potential(self: psi4.core.Wavefunction, arg0: psi4.core.ExternalPotential) → None¶; Sets the requested external potential. set_gradient(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s gradient. Syncs with Wavefunction’s QC variable CURRENT GRADIENT. set_hessian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the Wavefunction’s Hessian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; Sets the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:23770,Modifiability,variab,variable,23770,"ian. Syncs with Wavefunction’s QC variable CURRENT HESSIAN. set_lagrangian(self: psi4.core.Wavefunction, arg0: psi4.core.Matrix) → None¶; Sets the orbital Lagrangian matrix. set_module(self: psi4.core.Wavefunction, module: str) → None¶; Sets name of the last/highest level of theory module (internal or external) touching the wavefunction. set_name(self: psi4.core.Wavefunction, arg0: str) → None¶; Sets the level of theory this wavefunction corresponds to. set_potential_variable(self: psi4.core.Wavefunction, arg0: str, arg1: psi4.core.ExternalPotential) → None¶; Sets the requested (case-insensitive) ExternalPotential QC variable. (This function is provisional and might be removed in the future.). set_print(self: psi4.core.Wavefunction, arg0: int) → None¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:24524,Modifiability,variab,variable,24524,"¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (Optional[str]) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:24592,Modifiability,variab,variable,24592,"i4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (Optional[str]) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:25134,Modifiability,inherit,inherited,25134,"RADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (Optional[str]) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:25347,Modifiability,variab,variable,25347," it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (Optional[str]) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:25608,Modifiability,variab,variables,25608,". shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (Optional[str]) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecat",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:25649,Modifiability,variab,variables,25649," Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (Optional[str]) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:25779,Modifiability,variab,variables,25779,"s the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (Optional[str]) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as nd",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:26034,Modifiability,variab,variable,26034,"object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (Optional[str]) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:26091,Modifiability,variab,variable,26091,"tion) – Wavefunction or inherited class instance.; filename (Optional[str]) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:26160,Modifiability,variab,variable,26160,"l[str]) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals fr",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:26240,Modifiability,variab,variable,26240,"onary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do n",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:26387,Modifiability,variab,variables,26387," self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. Returns:; Requested QCVariable from self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transform",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:26693,Modifiability,variab,variables,26693,"charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. filename (Optional[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.;",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:26734,Modifiability,variab,variables,26734," are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; float or ndarray or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. filename (Optional[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.; do_virtual (Optional[bool]) – Do write all the MOs to the MOLDEN file (True) or d",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:26864,Modifiability,variab,variables,26864,"or Matrix. Raises:; KeyError – If key not set on self. Example; >>> g, wfn = psi4.gradient(""hf/cc-pvdz"", return_wfn=True); >>> wfn.variable(""CURRENT ENERGY""); -100.00985995185668; >>> wfn.variable(""CURRENT DIPOLE""); array([ 0. , 0. , -0.83217802]); >>> wfn.variable(""CURRENT GRADIENT""); <psi4.core.Matrix object at 0x12d884fc0>; >>> wfn.variable(""CURRENT GRADIENT"").np; array([[ 6.16297582e-33, 6.16297582e-33, -9.41037138e-02],; [-6.16297582e-33, -6.16297582e-33, 9.41037138e-02]]). variables(include_deprecated_keys=False)¶; Return all scalar or array QCVariables; from self. Parameters:. self – Wavefunction instance.; include_deprecated_keys (bool) – Also return duplicate entries with keys that have been deprecated. Returns:; Map of all QCVariables that have been set on self. Scalar variables are returned as floats.; Array variables not naturally 2D (like multipoles or per-atom charges); are returned as ndarray of natural dimensionality.; Other array variables are returned as Matrix and; may have an extra dimension with symmetry information. Return type:; Dict[str, Union[float, ndarray, Matrix]. write_molden(filename=None, do_virtual=None, use_natural=False)¶; Writes wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! most post-SCF wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. filename (Optional[str]) – Destination file name for MOLDEN file. If unspecified (None), a file; name will be generated from the molecule name.; do_virtual (Optional[bool]) – Do write all the MOs to the MOLDEN file (True) or discard the unoccupied; MOs (False). Not valid for NO’s. If unspecified (None), value taken from; MOLDEN_WITH_VIRTUA",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:16654,Performance,load,load,16654,"als. Return type:; Vector. esp_at_nuclei(self: psi4.core.Wavefunction) → psi4.core.Vector¶; returns electrostatic potentials at nuclei. external_pot(self: psi4.core.Wavefunction) → psi4.core.ExternalPotential¶; Gets the requested external potential. force_occpi(self: psi4.core.Wavefunction, arg0: psi4.core.Dimension, arg1: psi4.core.Dimension) → None¶; Specialized expert use only. Sets the number of doubly and singly occupied oribtals per irrep. Note that this results in inconsistent Wavefunction objects for SCF, so caution is advised. frequencies()¶; Returns the results of a frequency analysis. Parameters:; self – Wavefunction instance. Returns:; A dictionary of vibrational information. See psi4.driver.qcdb.vib.harmonic_analysis(). Return type:; Optional[Dict[str, ndarray]]. static from_file(wfn_data)¶; Build Wavefunction from data laid out like; to_file(). Parameters:; wfn_data (Union[str, Dict, Path]) – If a dict, use data directly. Otherwise, path-like passed to; numpy.load() to read from disk. Returns:; A deserialized Wavefunction object. Return type:; Wavefunction. frzcpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen core orbitals per irrep. frzvpi(self: psi4.core.Wavefunction) → psi4.core.Dimension¶; Returns the number of frozen virtual orbitals per irrep. get_array(key)¶. Deprecated since version 1.4: Use psi4.core.Wavefunction.variable() instead. get_basisset(self: psi4.core.Wavefunction, arg0: str) → psi4.core.BasisSet¶; Returns the requested auxiliary basis. get_density(self: psi4.core.Wavefunction, arg0: str) → psi4.core.Matrix¶; Experimental!. get_dipole_field_strength(self: psi4.core.Wavefunction) → List[float[3]]¶; Returns a vector of length 3, containing the x, y, and z dipole field strengths. get_print(self: psi4.core.Wavefunction) → int¶; Get the print level of the Wavefunction. get_scratch_filename(filenumber)¶; Return canonical path to scratch file filenumber based on molecule on self. Parameters:. self (Wavefu",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html:24452,Security,Validat,ValidationError,24452,"¶; Sets the print level of the Wavefunction. set_reference_wavefunction(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; docstring. set_scalar_variable(self: psi4.core.Wavefunction, arg0: str, arg1: float) → None¶; Sets the requested (case-insensitive) double QC variable. Syncs with Wavefunction.energy_ if CURRENT ENERGY. Prefer set_variable(). set_variable(key, val)¶; Sets scalar or array QCVariable key to; val on self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str) – Case-insensitive key to instance’s double or Matrix; storage maps. If CURRENT ENERGY, syncs with self.energy_.; If CURRENT GRADIENT, syncs with gradient_.; If CURRENT HESSIAN, syncs with self.hessian_. val (Union[Matrix, ndarray, float]) – Scalar or array to be stored in key. If ndarray and; data key does not naturally fit in 2D Matrix (often charge and; multipole QCVariables), it will be reshaped, as all; ndarray are stored as Matrix. Raises:; ValidationError – If val is a scalar but key already exists as an array variable. Or; if val is an array but key already exists as a scalar variable. Return type:; None. shallow_copy(self: psi4.core.Wavefunction, arg0: psi4.core.Wavefunction) → None¶; Copies the pointers to the internal data. sobasisset(self: psi4.core.Wavefunction) → psi4.core.SOBasisSet¶; Returns the symmetry orbitals basis. soccpi(self: psi4.core.Wavefunction, assume_socc_alpha: bool = True) → psi4.core.Dimension¶; Returns the number of singly occupied orbitals per irrep. to_file(filename=None)¶; Serialize a Wavefunction object. Opposite of; from_file(). Parameters:. wfn (Wavefunction) – Wavefunction or inherited class instance.; filename (Optional[str]) – An optional filename to which to write the data. Returns:; A dictionary and NumPy representation of the Wavefunction. Return type:; Dict[str, Dict[str, Any]]. variable(key)¶; Return copy of scalar or array QCVariable; key from self. Parameters:. self (Wavefunction) – Wavefunction instance.; key (str",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.core.Wavefunction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.core.Wavefunction.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.activate.html:554,Deployability,update,updated,554,"﻿. activate. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; activate. activate¶. psi4.driver.activate(mol)[source]¶; Function to set molecule object mol as the current active molecule.; Permitted for user use but deprecated in driver in favor of explicit; molecule-passing. Parameters:; mol (Molecule) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; activate. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.activate.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.activate.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html:3698,Deployability,update,updated,3698,"rties""; ],; ""type"": ""string""; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); result (Any); result_id (Optional[str]). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (Optional[qcportal.client.FractalClient]) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Return type:; AtomicResult. Parameters:; client (Optional[FractalClient]) – . plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html:860,Energy Efficiency,energy,energy,860,"﻿. AtomicComputer. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. AtomicComputer¶. pydantic model psi4.driver.AtomicComputer[source]¶; Computer for analytic single-geometry computations. Show JSON schema{; ""title"": ""AtomicComputer"",; ""description"": ""Computer for analytic single-geometry computations."",; ""type"": ""object"",; ""properties"": {; ""molecule"": {; ""title"": ""Molecule"",; ""description"": ""The molecule to use in the computation.""; },; ""basis"": {; ""title"": ""Basis"",; ""description"": ""The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, ...)."",; ""type"": ""string""; },; ""method"": {; ""title"": ""Method"",; ""description"": ""The quantum chemistry method to evaluate (e.g., B3LYP, MP2, ...)."",; ""type"": ""string""; },; ""driver"": {; ""description"": ""The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver."",; ""allOf"": [; {; ""$ref"": ""#/definitions/DriverEnum""; }; ]; },; ""keywords"": {; ""title"": ""Keywords"",; ""description"": ""The keywords to use in the computation."",; ""type"": ""object""; },; ""computed"": {; ""title"": ""Computed"",; ""description"": ""Whether quantum chemistry has been run on this task."",; ""default"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ""molecule"",; ""basis"",; ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); result (Any); result_id (Optional[st",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html:1735,Energy Efficiency,energy,energy,1735,"..)."",; ""type"": ""string""; },; ""driver"": {; ""description"": ""The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver."",; ""allOf"": [; {; ""$ref"": ""#/definitions/DriverEnum""; }; ]; },; ""keywords"": {; ""title"": ""Keywords"",; ""description"": ""The keywords to use in the computation."",; ""type"": ""object""; },; ""computed"": {; ""title"": ""Computed"",; ""description"": ""Whether quantum chemistry has been run on this task."",; ""default"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ""molecule"",; ""basis"",; ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); result (Any); result_id (Optional[str]). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The m",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html:2368,Energy Efficiency,energy,energy,2368,"; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ""molecule"",; ""basis"",; ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); result (Any); result_id (Optional[str]). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (Optional[qcportal.client.FractalClient]) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Return type:; AtomicResult. Parameters:; client (Optional[FractalClient]) – . plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[sou",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html:2006,Security,Validat,Validators,2006," ""#/definitions/DriverEnum""; }; ]; },; ""keywords"": {; ""title"": ""Keywords"",; ""description"": ""The keywords to use in the computation."",; ""type"": ""object""; },; ""computed"": {; ""title"": ""Computed"",; ""description"": ""Whether quantum chemistry has been run on this task."",; ""default"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ""molecule"",; ""basis"",; ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); result (Any); result_id (Optional[str]). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (Option",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html:2185,Security,Validat,Validated,2185," ""Computed"",; ""description"": ""Whether quantum chemistry has been run on this task."",; ""default"": false,; ""type"": ""boolean""; },; ""result"": {; ""title"": ""Result"",; ""description"": "":py:class:`~qcelemental.models.AtomicResult` return.""; },; ""result_id"": {; ""title"": ""Result Id"",; ""description"": ""The optional ID for the computation."",; ""type"": ""string""; }; },; ""required"": [; ""molecule"",; ""basis"",; ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); result (Any); result_id (Optional[str]). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (Optional[qcportal.client.FractalClient]) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Return type:; AtomicResult. Parameters:; client (Optional[Frac",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html:2578,Security,Validat,Validated,2578," ""method"",; ""driver""; ],; ""definitions"": {; ""DriverEnum"": {; ""title"": ""DriverEnum"",; ""description"": ""Allowed computation driver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); result (Any); result_id (Optional[str]). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (Optional[qcportal.client.FractalClient]) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Return type:; AtomicResult. Parameters:; client (Optional[FractalClient]) – . plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html:2702,Security,Validat,Validated,2702,"ver values."",; ""enum"": [; ""energy"",; ""gradient"",; ""hessian"",; ""properties""; ],; ""type"": ""string""; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); result (Any); result_id (Optional[str]). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (Optional[qcportal.client.FractalClient]) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Return type:; AtomicResult. Parameters:; client (Optional[FractalClient]) – . plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. © Copyright 2007-2022, The Psi4 Project.; Last updated on ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html:3290,Security,validat,validator,3290,"rties""; ],; ""type"": ""string""; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); result (Any); result_id (Optional[str]). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (Optional[qcportal.client.FractalClient]) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Return type:; AtomicResult. Parameters:; client (Optional[FractalClient]) – . plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html:3357,Security,validat,validator,3357,"rties""; ],; ""type"": ""string""; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); result (Any); result_id (Optional[str]). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (Optional[qcportal.client.FractalClient]) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Return type:; AtomicResult. Parameters:; client (Optional[FractalClient]) – . plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html:3430,Security,validat,validator,3430,"rties""; ],; ""type"": ""string""; }; }; }. Fields:. basis (str); computed (bool); driver (qcelemental.models.common_models.DriverEnum); keywords (Dict[str, Any]); method (str); molecule (Any); result (Any); result_id (Optional[str]). Validators:. set_basis » basis; set_keywords » keywords; set_method » method. field basis: str [Required]¶; The quantum chemistry basis set to evaluate (e.g., 6-31g, cc-pVDZ, …). Validated by:. set_basis. field computed: bool = False¶; Whether quantum chemistry has been run on this task. field driver: DriverEnum [Required]¶; The resulting type of computation: energy, gradient, hessian, properties.Note for finite difference that this should be the target driver, not the means driver. field keywords: Dict[str, Any] [Optional]¶; The keywords to use in the computation. Validated by:. set_keywords. field method: str [Required]¶; The quantum chemistry method to evaluate (e.g., B3LYP, MP2, …). Validated by:. set_method. field molecule: Any [Required]¶; The molecule to use in the computation. field result: Any [Optional]¶; AtomicResult return. field result_id: Optional[str] = None¶; The optional ID for the computation. compute(client=None)[source]¶; Run quantum chemistry. Parameters:; client (Optional[qcportal.client.FractalClient]) – . get_results(client=None)[source]¶; Return results as Atomic-flavored QCSchema. Return type:; AtomicResult. Parameters:; client (Optional[FractalClient]) – . plan()[source]¶; Form QCSchema input from member data. Return type:; AtomicInput. validator set_basis  »  psi4.driver.AtomicComputer.basis[source]¶. validator set_keywords  »  psi4.driver.AtomicComputer.keywords[source]¶. validator set_method  »  psi4.driver.AtomicComputer.method[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; AtomicComputer. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.AtomicComputer.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.banner.html:837,Deployability,update,updated,837,"﻿. banner. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; banner. banner¶. psi4.driver.banner(text, type=1, width=35, strNotOutfile=False)[source]¶; Format text into a banner style and print or return it. Parameters:. text (str) – String to be emphasized.; type (int) – Style 1 has minimum three-line height. Style 2 has minimum one-light; height.; width (int) – Minimum length of banner string.; strNotOutfile (bool) – Controls mode of return. Return type:; Optional[str]. Returns:. str – If strNotOutfile is True, return string.; None – If strNotOutfile is False, print it to output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; banner. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.banner.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.banner.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.basis_helper.html:1058,Deployability,update,updated,1058,"﻿. basis_helper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. basis_helper¶. psi4.driver.basis_helper(block, name='', key='BASIS', set_option=True)[source]¶; Helper to specify a custom basis set in PsiAPI mode.; This function forms a basis specification function from block; and associates it with keyword key under handle name. Registers; the basis spec with Psi4 so that it can be applied again to future; molecules. For usage, see mints2, mints9, and; cc54 test cases. Parameters:. block (str) – Text that goes in a PSIthon basis {...} block.; name (str) – Name label to associated with basis specified by block.; key (str) – Basis keyword specified by block.; set_option (bool) – When True, execute the equivalent of set key name or set_option({key: name}). When False, skip execution. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.basis_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.basis_helper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.basis_helper.html:531,Testability,test,test,531,"﻿. basis_helper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. basis_helper¶. psi4.driver.basis_helper(block, name='', key='BASIS', set_option=True)[source]¶; Helper to specify a custom basis set in PsiAPI mode.; This function forms a basis specification function from block; and associates it with keyword key under handle name. Registers; the basis spec with Psi4 so that it can be applied again to future; molecules. For usage, see mints2, mints9, and; cc54 test cases. Parameters:. block (str) – Text that goes in a PSIthon basis {...} block.; name (str) – Name label to associated with basis specified by block.; key (str) – Basis keyword specified by block.; set_option (bool) – When True, execute the equivalent of set key name or set_option({key: name}). When False, skip execution. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.basis_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.basis_helper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:7740,Availability,avail,available,7740,"]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta_scheme (str) – \(\Rightarrow\) 'xtpl",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:7785,Availability,avail,available,7785," basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:11942,Availability,avail,available,11942," default it is worked out from the number of basis sets (1 - 3) supplied as `basis`.; `alpha`: alpha for the above scheme, if the default is to be overriden; `options`: if special options are required for a step, they should be entered as a dict here. If some options should be used for both parts of the stage, they should be entered in both `options` and `options_lo`. This is helpful for calculating all electron corrections in otherwise frozen core calculations, or relativistic (DKH) Hamiltionian corrections for otherwise nonrelativistic.; `options_lo`: special options for lower method in a given stage. This is useful to calculate a direct stage in an otherwise density-fitted calculation, or similar.; `treatment`: treat extrapolation stage as `scf` or `corl`, by default only the first stage is `scf` and every later one is `corl`.; `stage`: tag for the stage used in tables. The next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 co",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:14898,Deployability,update,updated,14898,"p a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:202,Energy Efficiency,energy,energy,202,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textb",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:422,Energy Efficiency,energy,energy,422,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textb",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:468,Energy Efficiency,ENERGY,ENERGY,468,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textb",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:490,Energy Efficiency,ENERGY,ENERGY,490,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textb",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:514,Energy Efficiency,ENERGY,ENERGY,514,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textb",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:530,Energy Efficiency,ENERGY,ENERGY,530,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textb",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:556,Energy Efficiency,ENERGY,ENERGY,556,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textb",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:584,Energy Efficiency,ENERGY,ENERGY,584,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textb",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:825,Energy Efficiency,energy,energy,825,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textb",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:955,Energy Efficiency,energy,energy,955,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textb",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:979,Energy Efficiency,energy,energy,979,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textb",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:1026,Energy Efficiency,energy,energy,1026,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textb",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:1804,Energy Efficiency,energy,energy,1804,"ENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right)\]. \[\delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right)\]. \[\delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:1814,Energy Efficiency,energy,energy,1814,"ENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn}}^{\textbf{delta_basis}}\right) - \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textbf{delta_wfn_lesser}}^{\textbf{delta_basis}}\right)\]. \[\delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; = \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn}}^{\textbf{delta2_basis}}\right) - \mathcal{F}_{\textbf{delta2_scheme}} \left(E_{\text{corl},\; \textbf{delta2_wfn_lesser}}^{\textbf{delta2_basis}}\right)\]. \[\delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; = \mathcal",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:3667,Energy Efficiency,energy,energy,3667,"orl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy MethodsThe presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step onl",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:3715,Energy Efficiency,energy,energy,3715,"orl},\; \textbf{delta3_wfn}}^{\textbf{delta3_basis}}\right) - \mathcal{F}_{\textbf{delta3_scheme}} \left(E_{\text{corl},\; \textbf{delta3_wfn_lesser}}^{\textbf{delta3_basis}}\right)\]. \[\delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; = \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn}}^{\textbf{delta4_basis}}\right) - \mathcal{F}_{\textbf{delta4_scheme}} \left(E_{\text{corl},\; \textbf{delta4_wfn_lesser}}^{\textbf{delta4_basis}}\right)\]. \[\delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}} \; = \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn}}^{\textbf{delta5_basis}}\right) - \mathcal{F}_{\textbf{delta5_scheme}} \left(E_{\text{corl},\; \textbf{delta5_wfn_lesser}}^{\textbf{delta5_basis}}\right)\]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy MethodsThe presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step onl",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:4283,Energy Efficiency,Energy,Energy,4283,"]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy MethodsThe presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the referenc",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:4464,Energy Efficiency,energy,energy,4464,"]; A translation of this ungainly equation to example [5] below is as; follows. In words, this is a double- and triple-zeta 2-point; Helgaker-extrapolated CCSD(T) coupled-cluster correlation correction; appended to a triple- and quadruple-zeta 2-point; Helgaker-extrapolated MP2 correlation energy appended to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy MethodsThe presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the referenc",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:4666,Energy Efficiency,energy,energy,4666,"ded to a SCF/aug-cc-pVQZ; reference energy. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\text{highest_1}} \left(E_{\text{total},\; \text{SCF}}^{\text{aug-cc-pVQZ}}\right) \; + \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[TQ]Z}}\right) \; + \delta_{\text{MP2}}^{\text{CCSD(T)}}\]. \[\delta_{\text{MP2}}^{\text{CCSD(T)}} \; = \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{CCSD(T)}}^{\text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy MethodsThe presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to b",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:5127,Energy Efficiency,energy,energy,5127,"text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy MethodsThe presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:5341,Energy Efficiency,energy,energy,5341," (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarro",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:5379,Energy Efficiency,energy,energy,5379," (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarro",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:5625,Energy Efficiency,energy,energy,5625,"; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) –",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:5665,Energy Efficiency,energy,energy,5665,"; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) –",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:5849,Energy Efficiency,energy,energy,5849,"t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can de",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:5912,Energy Efficiency,energy,energy,5912,"t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can de",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:6044,Energy Efficiency,energy,energy,6044,"cates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basi",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:6107,Energy Efficiency,energy,energy,6107,"cates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basi",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:6206,Energy Efficiency,energy,energy,6206,"ds supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:6276,Energy Efficiency,energy,energy,6276,"ds supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:6414,Energy Efficiency,energy,energy,6414,"in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransform",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:6484,Energy Efficiency,energy,energy,6484,"in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransform",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:6815,Energy Efficiency,energy,energy,6815,"n (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:7051,Energy Efficiency,energy,energy,7051," Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xt",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:7234,Energy Efficiency,energy,energy,7234,"the (superior) energy method for which a second delta correction; to the correlation energy is to be obtained. delta2_wfn_lesser (str) – \(\Rightarrow\) delta_wfn \(\Leftarrow\) || 'ccsd(t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_high",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:7425,Energy Efficiency,energy,energy,7425,"t)' || etc.; Indicates the inferior energy method for which a second delta correction; to the correlation energy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftar",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:7463,Energy Efficiency,energy,energy,7463,"ergy is to be obtained. Basis SetsCurrently, the basis set set through set commands have no influence; on a cbs calculation. Parameters:. scf_basis (basis string) – \(\Rightarrow\) corl_basis \(\Leftarrow\) || 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the reference energy.; If any correlation method is specified, scf_basis can default; to corl_basis. corl_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:7994,Energy Efficiency,energy,energy,7994,"q5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the correlation energy. delta_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the delta correction; to the correlation energy. delta2_basis (basis string) – 'cc-pV[TQ]Z' || 'jun-cc-pv[tq5]z' || '6-31G*' || etc.; Indicates the sequence of basis sets employed for the second delta correction; to the correlation energy. SchemesTransformations of the energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_bas",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:8498,Energy Efficiency,energy,energy,8498,"e energy through basis set extrapolation for each; stage of the CBS definition. A complaint is generated if number of basis; sets in stage_basis does not exactly satisfy requirements of stage_scheme.; An exception is the default, 'xtpl_highest_1', which uses the best basis; set available. See Extrapolation Schemes for all available schemes. Parameters:. scf_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta2_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). scf_alpha (float) – \(\Rightarrow\) 1.63 \(\",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:8870,Energy Efficiency,energy,energy,8870,"scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'scf_xtpl_helgaker_3' || etc.; Indicates the basis set extrapolation scheme to be applied to the reference energy.; Defaults to scf_xtpl_helgaker_3() if three valid basis sets; present in psi4.driver.driver_cbs.scf_basis, scf_xtpl_helgaker_2() if two valid basis; sets present in scf_basis, and xtpl_highest_1() otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta2_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). scf_alpha (float) – \(\Rightarrow\) 1.63 \(\Leftarrow\); Overrides the default alpha parameter used in the listed SCF extrapolation procedures.; Has no effect on others, including xtpl_highest_1() and scf_xtpl_helgaker_3(). scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the liste",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:9251,Energy Efficiency,energy,energy,9251," otherwise. xtpl_highest_1(); scf_xtpl_helgaker_3(); scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in corl_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). delta2_scheme (str) – \(\Rightarrow\) 'xtpl_highest_1' \(\Leftarrow\) || 'corl_xtpl_helgaker_2' || etc.; Indicates the basis set extrapolation scheme to be applied to the second delta correction; to the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). scf_alpha (float) – \(\Rightarrow\) 1.63 \(\Leftarrow\); Overrides the default alpha parameter used in the listed SCF extrapolation procedures.; Has no effect on others, including xtpl_highest_1() and scf_xtpl_helgaker_3(). scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed corl_xtpl_helgaker_2() correlation; extrapolation to the corl stage. The supplied alpha does not impact delta or any further stages. corl_xtpl_helgaker_2(). delta_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed; corl_xtpl_helgaker_2() correlation extrapolation for the delta correction. Useful when; delta correcti",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:10661,Energy Efficiency,energy,energy,10661,"xtpl_helgaker_3(). scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed corl_xtpl_helgaker_2() correlation; extrapolation to the corl stage. The supplied alpha does not impact delta or any further stages. corl_xtpl_helgaker_2(). delta_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed; corl_xtpl_helgaker_2() correlation extrapolation for the delta correction. Useful when; delta correction is performed using smaller basis sets for which a different alpha might; be more appropriate. corl_xtpl_helgaker_2(). Combined interface. Parameters:; cbs_metadata (List[Dict]) – \(\Rightarrow\) autogenerated from above keywords \(\Leftarrow\) || [{""wfn"": ""hf"", ""basis"": ""cc-pv[TQ5]z""}] || etc.; This is the interface to which all of the above calls are internally translated. The first item in; the array is always defining the SCF contribution to the total energy. The required items in the; dictionary are:. `wfn`: typically `HF`, which is subsumed in correlated methods anyway.; `basis`: basis set, can be in a bracketed form (eg. `cc-pv[tq]z`). Other supported arguments for the first dictionary are:. `scheme`: scf extrapolation scheme function, by default it is worked out from the number of basis sets (1 - 3) supplied as `basis`.; `alpha`: alpha for the above scheme, if the default is to be overriden; `options`: if special options are required for a step, they should be entered as a dict here. If some options should be used for both parts of the stage, they should be entered in both `options` and `options_lo`. This is helpful for calculating all electron corrections in otherwise frozen core calculations, or relativistic (DKH) Hamiltionian corrections for otherwise nonrelativistic.; `options_lo`: special options for lower method in a given stage. This is useful to calculate a direct stage in an otherwi",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:12532,Energy Efficiency,energy,energy,12532,"ial options for lower method in a given stage. This is useful to calculate a direct stage in an otherwise density-fitted calculation, or similar.; `treatment`: treat extrapolation stage as `scf` or `corl`, by default only the first stage is `scf` and every later one is `corl`.; `stage`: tag for the stage used in tables. The next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_s",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:12551,Energy Efficiency,energy,energy,12551,"ial options for lower method in a given stage. This is useful to calculate a direct stage in an otherwise density-fitted calculation, or similar.; `treatment`: treat extrapolation stage as `scf` or `corl`, by default only the first stage is `scf` and every later one is `corl`.; `stage`: tag for the stage used in tables. The next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_s",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:12698,Energy Efficiency,energy,energy,12698," extrapolation stage as `scf` or `corl`, by default only the first stage is `scf` and every later one is `corl`.; `stage`: tag for the stage used in tables. The next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:12717,Energy Efficiency,energy,energy,12717," extrapolation stage as `scf` or `corl`, by default only the first stage is `scf` and every later one is `corl`.; `stage`: tag for the stage used in tables. The next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:12818,Energy Efficiency,energy,energy,12818,"e next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:12830,Energy Efficiency,energy,energy,12830,"e next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:12966,Energy Efficiency,energy,energy,12966,"ther supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calcul",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:13002,Energy Efficiency,energy,energy,13002,"ther supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calcul",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:13198,Energy Efficiency,energy,energy,13198,"thers. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:13252,Energy Efficiency,energy,energy,13252,"thers. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:13367,Energy Efficiency,energy,energy,13367,"thers. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:13685,Energy Efficiency,energy,energy,13685,"c-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:13721,Energy Efficiency,energy,energy,13721,"c-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:14127,Energy Efficiency,energy,energy,14127,"p a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:10329,Integrability,interface,interface,10329,"n delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). scf_alpha (float) – \(\Rightarrow\) 1.63 \(\Leftarrow\); Overrides the default alpha parameter used in the listed SCF extrapolation procedures.; Has no effect on others, including xtpl_highest_1() and scf_xtpl_helgaker_3(). scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed corl_xtpl_helgaker_2() correlation; extrapolation to the corl stage. The supplied alpha does not impact delta or any further stages. corl_xtpl_helgaker_2(). delta_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed; corl_xtpl_helgaker_2() correlation extrapolation for the delta correction. Useful when; delta correction is performed using smaller basis sets for which a different alpha might; be more appropriate. corl_xtpl_helgaker_2(). Combined interface. Parameters:; cbs_metadata (List[Dict]) – \(\Rightarrow\) autogenerated from above keywords \(\Leftarrow\) || [{""wfn"": ""hf"", ""basis"": ""cc-pv[TQ5]z""}] || etc.; This is the interface to which all of the above calls are internally translated. The first item in; the array is always defining the SCF contribution to the total energy. The required items in the; dictionary are:. `wfn`: typically `HF`, which is subsumed in correlated methods anyway.; `basis`: basis set, can be in a bracketed form (eg. `cc-pv[tq]z`). Other supported arguments for the first dictionary are:. `scheme`: scf extrapolation scheme function, by default it is worked out from the number of basis sets (1 - 3) supplied as `basis`.; `alpha`: alpha for the above scheme, if the default is to be overriden; `options`: if special options are required for a step, they should be entered as a dict here. If some options should be used for both parts of the stage, they should be entered in both `options` and `options_lo`. Th",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:10510,Integrability,interface,interface,10510,"xtrapolation procedures.; Has no effect on others, including xtpl_highest_1() and scf_xtpl_helgaker_3(). scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed corl_xtpl_helgaker_2() correlation; extrapolation to the corl stage. The supplied alpha does not impact delta or any further stages. corl_xtpl_helgaker_2(). delta_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed; corl_xtpl_helgaker_2() correlation extrapolation for the delta correction. Useful when; delta correction is performed using smaller basis sets for which a different alpha might; be more appropriate. corl_xtpl_helgaker_2(). Combined interface. Parameters:; cbs_metadata (List[Dict]) – \(\Rightarrow\) autogenerated from above keywords \(\Leftarrow\) || [{""wfn"": ""hf"", ""basis"": ""cc-pv[TQ5]z""}] || etc.; This is the interface to which all of the above calls are internally translated. The first item in; the array is always defining the SCF contribution to the total energy. The required items in the; dictionary are:. `wfn`: typically `HF`, which is subsumed in correlated methods anyway.; `basis`: basis set, can be in a bracketed form (eg. `cc-pv[tq]z`). Other supported arguments for the first dictionary are:. `scheme`: scf extrapolation scheme function, by default it is worked out from the number of basis sets (1 - 3) supplied as `basis`.; `alpha`: alpha for the above scheme, if the default is to be overriden; `options`: if special options are required for a step, they should be entered as a dict here. If some options should be used for both parts of the stage, they should be entered in both `options` and `options_lo`. This is helpful for calculating all electron corrections in otherwise frozen core calculations, or relativistic (DKH) Hamiltionian corrections for otherwise nonrelativistic.; `options_lo`: special options for l",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:446,Modifiability,variab,variables,446,"﻿. cbs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. cbs¶. psi4.driver.cbs(func, label, **kwargs)[source]¶; Function to define a multistage energy method from combinations of; basis set extrapolations and delta corrections and condense the; components into a minimum number of calculations. Aliases:; complete_basis_set(). Returns:; (float) – Total electronic energy in Hartrees. PSI variables:. CBS TOTAL ENERGY; CBS REFERENCE ENERGY; CBS CORRELATION ENERGY; CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Caution; Some features are not yet implemented. Buy a developer a coffee. No way to tell function to boost fitting basis size for all calculations.; Need to add more extrapolation schemes. As represented in the equation below, a CBS energy method is defined in several; sequential stages (scf, corl, delta1, delta2, … ) covering treatment; of the reference total energy, the correlation energy, a delta correction to the; correlation energy, and a second delta correction, etc.. Each is activated by its; stage_wfn keyword, or as a field in the `cbs_metadata` list, and is only; allowed if all preceding stages are active. \[E_{\text{total}}^{\text{CBS}} = \mathcal{F}_{\textbf{scf_scheme}} \left(E_{\text{total},\; \text{SCF}}^{\textbf{scf_basis}}\right) \; + \mathcal{F}_{\textbf{corl_scheme}} \left(E_{\text{corl},\; \textbf{corl_wfn}}^{\textbf{corl_basis}}\right) \; + \delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; + \delta_{\textbf{delta2_wfn_lesser}}^{\textbf{delta2_wfn}} \; + \delta_{\textbf{delta3_wfn_lesser}}^{\textbf{delta3_wfn}} \; + \delta_{\textbf{delta4_wfn_lesser}}^{\textbf{delta4_wfn}} \; + \delta_{\textbf{delta5_wfn_lesser}}^{\textbf{delta5_wfn}}\]; Here, \(\mathcal{F}\) is an energy or energy extrapolation scheme, and the following also hold. \[\delta_{\textbf{delta_wfn_lesser}}^{\textbf{delta_wfn}} \; = \mathcal{F}_{\textbf{delta_scheme}} \left(E_{\text{corl},\; \textb",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:5168,Performance,perform,performed,5168,"text{aug-cc-pV[DT]Z}}\right) - \mathcal{F}_{\text{corl_xtpl_helgaker_2}} \left(E_{\text{corl},\; \text{MP2}}^{\text{aug-cc-pV[DT]Z}}\right)\]. Energy MethodsThe presence of a stage_wfn keyword is the indicator to incorporate; (and check for stage_basis and stage_scheme keywords) and compute; that stage in defining the CBS energy.; The cbs() function requires, at a minimum, name='scf' and scf_basis; keywords to be specified for reference-step only jobs and name and; corl_basis keywords for correlated jobs.; The following energy methods have been set up for cbs(). scf; hf; mp2; mp2.5; mp3; mp4(sdq); mp4; mpn. omp2; omp2.5; omp3; olccd; lccd; lccsd; cepa(0); cepa(1). cepa(3); acpf; aqcc; qcisd; cc2; ccsd; fno-ccsd; bccd. cc3; qcisd(t); ccsd(t); fno-ccsd(t); bccd(t); cisd; cisdt. cisdtq; cin; fci; mrccsd; mrccsd(t); mrccsdt; mrccsdt(q). Parameters:. name (str) – 'scf' || 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; for the correlation energy, unless only reference step to be performed,; in which case should be 'scf'. Overruled if stage_wfn keywords supplied. scf_wfn (str) – \(\Rightarrow\) 'scf' \(\Leftarrow\) || 'c4-scf' || etc.; Indicates the energy method for which the reference energy is to be; obtained. Generally unnecessary, as ‘scf’ is the scf in PSI4 but; can be used to direct lone scf components to run in PSI4 or Cfour; in a mixed-program composite method. corl_wfn (str) – 'mp2' || 'ccsd(t)' || etc.; Indicates the energy method for which the correlation energy is to be; obtained. Can also be specified with name or as the unlabeled; first argument to the function. delta_wfn (str) – 'ccsd' || 'ccsd(t)' || etc.; Indicates the (superior) energy method for which a delta correction; to the correlation energy is to be obtained. delta_wfn_lesser (str) – \(\Rightarrow\) corl_wfn \(\Leftarrow\) || 'mp2' || etc.; Indicates the inferior energy method for which a delta correction; to the correlation energy is to be obtained. delta2_",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:10205,Performance,perform,performed,10205,"o the correlation energy.; Defaults to corl_xtpl_helgaker_2() if two valid basis sets; present in delta2_basis and xtpl_highest_1() otherwise. xtpl_highest_1(); corl_xtpl_helgaker_2(). scf_alpha (float) – \(\Rightarrow\) 1.63 \(\Leftarrow\); Overrides the default alpha parameter used in the listed SCF extrapolation procedures.; Has no effect on others, including xtpl_highest_1() and scf_xtpl_helgaker_3(). scf_xtpl_helgaker_2(); scf_xtpl_truhlar_2(); scf_xtpl_karton_2(). corl_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed corl_xtpl_helgaker_2() correlation; extrapolation to the corl stage. The supplied alpha does not impact delta or any further stages. corl_xtpl_helgaker_2(). delta_alpha (float) – \(\Rightarrow\) 3.00 \(\Leftarrow\); Overrides the default alpha parameter used in the listed; corl_xtpl_helgaker_2() correlation extrapolation for the delta correction. Useful when; delta correction is performed using smaller basis sets for which a different alpha might; be more appropriate. corl_xtpl_helgaker_2(). Combined interface. Parameters:; cbs_metadata (List[Dict]) – \(\Rightarrow\) autogenerated from above keywords \(\Leftarrow\) || [{""wfn"": ""hf"", ""basis"": ""cc-pv[TQ5]z""}] || etc.; This is the interface to which all of the above calls are internally translated. The first item in; the array is always defining the SCF contribution to the total energy. The required items in the; dictionary are:. `wfn`: typically `HF`, which is subsumed in correlated methods anyway.; `basis`: basis set, can be in a bracketed form (eg. `cc-pv[tq]z`). Other supported arguments for the first dictionary are:. `scheme`: scf extrapolation scheme function, by default it is worked out from the number of basis sets (1 - 3) supplied as `basis`.; `alpha`: alpha for the above scheme, if the default is to be overriden; `options`: if special options are required for a step, they should be entered as a dict here. If some options should be",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:14601,Performance,optimiz,optimize,14601,"p a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:14622,Performance,optimiz,optimize,14622,"p a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme=corl_xtpl_helgaker_2, delta_wfn='ccsd', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2', delta2_wfn='ccsd(t)', delta2_wfn_lesser='ccsd', delta2_basis='aug-cc-pvdz'). >>> # [7] a Q5-zeta MP2 calculation, corrected by CCSD(T) at the TQ-zeta extrapolated level, and all-electron CCSD(T) correlation at T-zeta level; >>> energy(cbs, cbs_metadata=[{""wfn"": ""hf"", ""basis"": ""cc-pv5z""}, {""wfn"": ""mp2"", ""basis"": ""cc-pv[q5]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pv[tq]z""}, {""wfn"": ""ccsd(t)"", ""basis"": ""cc-pvtz"", ""options"": {""freeze_core"": ""False""}}]). >>> # [8] cbs() coupled with database(); >>> TODO database('mp2', 'BASIC', subset=['h2o','nh3'], symm='on', func=cbs, corl_basis='cc-pV[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='sto-3g'). >>> # [9] cbs() coupled with optimize(); >>> TODO optimize('mp2', corl_basis='cc-pV[DT]Z', corl_scheme='corl_xtpl_helgaker_2', func=cbs). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cbs. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:12478,Usability,simpl,simple,12478,"ial options for lower method in a given stage. This is useful to calculate a direct stage in an otherwise density-fitted calculation, or similar.; `treatment`: treat extrapolation stage as `scf` or `corl`, by default only the first stage is `scf` and every later one is `corl`.; `stage`: tag for the stage used in tables. The next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_s",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html:12636,Usability,simpl,simple,12636," extrapolation stage as `scf` or `corl`, by default only the first stage is `scf` and every later one is `corl`.; `stage`: tag for the stage used in tables. The next items in the `cbs_metadata` array extrapolate correlation. All of the above parameters are available, with only the `wfn` and `basis` keywords required. Other supported parameters are:. `wfn_lo`: the lower method from which the delta correction is to be calculated. By default, it is set to `wfn` from the previous field in the `cbs_metadata` array.; `basis_lo`: basis set to be used for the delta correction. By default, it is the same as the `basis` specified above. Others. Parameters:; molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] replicates with cbs() the simple model chemistry scf/cc-pVDZ: set basis cc-pVDZ energy('scf'); >>> energy(cbs, scf_wfn='scf', scf_basis='cc-pVDZ'). >>> # [2] replicates with cbs() the simple model chemistry mp2/jun-cc-pVDZ: set basis jun-cc-pVDZ energy('mp2'); >>> energy(cbs, corl_wfn='mp2', corl_basis='jun-cc-pVDZ'). >>> # [3] DTQ-zeta extrapolated scf reference energy; >>> energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3'). >>> # [4] DT-zeta extrapolated mp2 correlation energy atop a T-zeta reference; >>> energy('cbs', corl_wfn='mp2', corl_basis='cc-pv[dt]z', corl_scheme='corl_xtpl_helgaker_2'). >>> # [5] a DT-zeta extrapolated coupled-cluster correction atop a TQ-zeta extrapolated mp2 correlation energy atop a Q-zeta reference (both equivalent); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z'); >>> energy('cbs', corl_wfn='mp2', corl_basis='aug-cc-pv[tq]z', corl_scheme='corl_xtpl_helgaker_2', delta_wfn='ccsd(t)', delta_basis='aug-cc-pv[dt]z', delta_scheme='corl_xtpl_helgaker_2'). >>> # [6] a D-zeta ccsd(t) correction atop a DT-zeta extrapolated ccsd cluster correction atop a TQ-zeta extrapolated mp2 correlation ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cbs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cbs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html:300,Availability,checkpoint,checkpoint,300,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html:530,Availability,avail,available,530,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html:1067,Availability,toler,tolerance,1067,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html:1399,Availability,error,error,1399,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html:1617,Deployability,update,updated,1617,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html:1405,Integrability,message,messages,1405,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html:680,Testability,log,logical,680,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html:731,Testability,test,test,731,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html:1206,Deployability,update,updated,1206,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html:635,Energy Efficiency,ENERGY,ENERGY,635,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html:662,Energy Efficiency,energy,energy,662,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html:684,Energy Efficiency,ENERGY,ENERGY,684,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html:711,Energy Efficiency,energy,energy,711,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html:730,Energy Efficiency,ENERGY,ENERGY,730,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html:750,Energy Efficiency,energy,energy,750,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html:775,Energy Efficiency,ENERGY,ENERGY,775,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html:801,Energy Efficiency,energy,energy,801,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html:999,Testability,test,test,999,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_moldenfiles.html:500,Availability,avail,available,500,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_moldenfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_moldenfiles.html:810,Availability,toler,tolerance,810,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_moldenfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_moldenfiles.html:1142,Availability,error,error,1142,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_moldenfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_moldenfiles.html:1362,Deployability,update,updated,1362,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_moldenfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_moldenfiles.html:1148,Integrability,message,messages,1148,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.compare_moldenfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html:259,Availability,Error,Error,259,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html:888,Deployability,update,updated,888,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html:370,Integrability,rout,routine,370,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html:466,Integrability,rout,routine,466,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html:532,Integrability,message,message,532,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html:551,Integrability,message,message,551,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html:659,Integrability,rout,routine,659,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html:406,Performance,optimiz,optimization,406,"﻿. ConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. ConvergenceError¶. exception psi4.driver.ConvergenceError(eqn_description, iteration, additional_info=None)[source]¶; Error called for problems with converging an iterative method. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF, optimization).; iteration (int) – Iteration number on which routine failed.; additional_info (Optional[str]) – Any additional message to convey. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.copy_file_from_scratch.html:1304,Deployability,update,updated,1304,"﻿. copy_file_from_scratch. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_from_scratch. copy_file_from_scratch¶. psi4.driver.copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Move a file out of scratch following the naming convention. Parameters:. filename (str) – Full path to target file.; prefix (str) – Computation prefix, usually ‘psi’.; namespace (str) – Context namespace, usually molecule name.; unit (int) – Unit number, e.g. 32; move (bool) – Whether to copy (default) or move?. Examples; >>> # Assume PID is 12345 and SCRATCH is /scratch/parrish/; >>> copy_file_to_scratch('temp', 'psi', 'h2o', 32):; Out[1]: -cp /scratch/parrish/psi.12345.h2o.32 .temp; >>> copy_file_to_scratch('/tmp/temp', 'psi', 'h2o', 32):; Out[2]: -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32):; Out[3]: -cp /scratch/parrish/psi.12345.32 /tmp/temp; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32, True):; Out[4]: -mv /scratch/parrish/psi.12345.32 /tmp/temp. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_from_scratch. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.copy_file_from_scratch.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.copy_file_from_scratch.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.copy_file_to_scratch.html:1287,Deployability,update,updated,1287,"﻿. copy_file_to_scratch. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_to_scratch. copy_file_to_scratch¶. psi4.driver.copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Move a file into scratch following the naming convention. Parameters:. filename (str) – Full path to file.; prefix (str) – Computation prefix, usually ‘psi’.; namespace (str) – Context namespace, usually molecule name.; unit (int) – Unit number, e.g. 32.; move (bool) – Whether to copy (default) or move?. Examples; >>> # Assume PID is 12345 and SCRATCH is /scratch/parrish/; >>> copy_file_to_scratch('temp', 'psi', 'h2o', 32):; Out[1]: -cp ./temp /scratch/parrish/psi.12345.h2o.32; >>> copy_file_to_scratch('/tmp/temp', 'psi', 'h2o', 32):; Out[2]: -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32):; Out[3]: -cp /tmp/temp /scratch/parrish/psi.12345.32; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32, True):; Out[4]: -mv /tmp/temp /scratch/parrish/psi.12345.32. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_to_scratch. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.copy_file_to_scratch.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.copy_file_to_scratch.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.create_plugin.html:468,Deployability,update,updated,468,"﻿. create_plugin. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; create_plugin. create_plugin¶. psi4.driver.create_plugin(name, template)[source]¶. Return type:; None. Parameters:. name (str) – ; template (str) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; create_plugin. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.create_plugin.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.create_plugin.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cubeprop.html:979,Deployability,update,updated,979,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. cubeprop¶. psi4.driver.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cubeprop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cubeprop.html:471,Energy Efficiency,energy,energy,471,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. cubeprop¶. psi4.driver.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cubeprop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cubeprop.html:735,Energy Efficiency,energy,energy,735,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. cubeprop¶. psi4.driver.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.cubeprop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.docs_table_link.html:694,Deployability,update,updated,694,"﻿. docs_table_link. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; docs_table_link. docs_table_link¶. psi4.driver.docs_table_link(name, mode)[source]¶; Compose a link to mode documentation table.; For modes {“summary”, “details”}, link will be anchored at the table row for method name. (Method row not guaranteed to exist.); For other modes, link will be to table in general. Return type:; str. Parameters:. name (str) – ; mode (str) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; docs_table_link. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.docs_table_link.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.docs_table_link.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.dynamic_variable_bind.html:501,Deployability,update,updated,501,"﻿. dynamic_variable_bind. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; dynamic_variable_bind. dynamic_variable_bind¶. psi4.driver.dynamic_variable_bind(cls)[source]¶; Function to dynamically add extra members to; the core.Molecule class. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; dynamic_variable_bind. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.dynamic_variable_bind.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.dynamic_variable_bind.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html:3203,Availability,error,error,3203,"y present for engine =libdisp. Psi4 class instance prepared; to compute dispersion. Type:; Dispersion. ordered_params¶; Fixed-order list of relevant parameters for dashlevel. Matches; DISPERSION CORRECTION ENERGY ordering. Used for printing. Type:; list. Parameters:. name_hint (Optional[str]) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; dashcoeff[dashlevel][functional-without-dashlevel] or; dashcoeff_supplement[dashlevel][functional-with-dashlevel]; can be overwritten via param_tweaks.; level_hint (Optional[str]) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; param_tweaks (Union[Dict, List, None]) – Values for the same keys as dashcoeff[dashlevel][‘default’]; (and same order if list) used to override any or all values; initialized by name_hint. Extra parameters will error.; engine (Optional[str]) – Override which code computes dispersion. See above for allowed; values. Formerly (pre Nov 2022) only relevant for -D2, which can be computed by; libdisp or dftd3. Now (post Nov 2022) also relevant for -D3 variants,; which can be computed by dftd3 executable or simple-dftd3 Python module.; gcp_engine (Optional[str]) – Override which code computes the gcp correction. Now can use; classic gcp or mctc-gcp executables.; save_pairwise_disp (bool) – Whether to request atomic pairwise analysis. Methods Summary. compute_energy(molecule[, wfn]); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule[, wfn]); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule[, wfn]); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html:5811,Deployability,update,updated,5811,", wfn]); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule[, wfn]); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule, wfn=None)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location to set QCVariables. Returns:; Dispersion energy [Eh]. Return type:; float. Notes. DISPERSION CORRECTION ENERGYDisp always set. Overridden in SCF finalization, but that only changes for “-3C” methods. fctl DISPERSION CORRECTION ENERGYSet if fctldash nonempty. compute_gradient(molecule, wfn=None)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location to set QCVariables. Returns:; (nat, 3) dispersion gradient [Eh/a0]. Return type:; Matrix. compute_hessian(molecule, wfn=None)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location to set QCVariables. Returns:; (3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. Return type:; Matrix. print_out()[source]¶; Format dispersion parameters of self for output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; EmpiricalDispersion. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html:2400,Energy Efficiency,ENERGY,ENERGY,2400,"dashparams_citation¶; Literature reference for dispersion parameters, if dashparams; corresponds to a defined, named, untweaked “functional-dashlevel”; set with a citation. Otherwise, empty string. Type:; str. dashcoeff_supplement¶; See description in qcengine.programs.empirical_dispersion_resources.from_arrays. Used; here to “bless” the dispersion definitions attached to; the procedures/dft/<rung>_functionals-defined dictionaries; as legit, non-custom, and of equal validity to; qcengine.programs.empirical_dispersion_resources.dashcoeff itself for purposes of; validating fctldash. Type:; dict. engine¶; {‘libdisp’, “s-dftd3”, ‘dftd3’, ‘nl’, ‘mp2d’, “dftd4”}; Compute engine for dispersion. One of Psi4’s internal libdisp; library, external Grimme or Beran projects, or nl. Type:; str. disp¶; Only present for engine =libdisp. Psi4 class instance prepared; to compute dispersion. Type:; Dispersion. ordered_params¶; Fixed-order list of relevant parameters for dashlevel. Matches; DISPERSION CORRECTION ENERGY ordering. Used for printing. Type:; list. Parameters:. name_hint (Optional[str]) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; dashcoeff[dashlevel][functional-without-dashlevel] or; dashcoeff_supplement[dashlevel][functional-with-dashlevel]; can be overwritten via param_tweaks.; level_hint (Optional[str]) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; param_tweaks (Union[Dict, List, None]) – Values for the same keys as dashcoeff[dashlevel][‘default’]; (and same order if list) used to override any or all values; initialized by name_hint. Extra parameters will error.; engine (Optional[str]) – Override which code computes dispersion. See above for allowed; values. Formerly (pre Nov 2022) only relevant for -D2, which can be computed by; libdisp or ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html:3797,Energy Efficiency,energy,energy,3797,"itten via param_tweaks.; level_hint (Optional[str]) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; param_tweaks (Union[Dict, List, None]) – Values for the same keys as dashcoeff[dashlevel][‘default’]; (and same order if list) used to override any or all values; initialized by name_hint. Extra parameters will error.; engine (Optional[str]) – Override which code computes dispersion. See above for allowed; values. Formerly (pre Nov 2022) only relevant for -D2, which can be computed by; libdisp or dftd3. Now (post Nov 2022) also relevant for -D3 variants,; which can be computed by dftd3 executable or simple-dftd3 Python module.; gcp_engine (Optional[str]) – Override which code computes the gcp correction. Now can use; classic gcp or mctc-gcp executables.; save_pairwise_disp (bool) – Whether to request atomic pairwise analysis. Methods Summary. compute_energy(molecule[, wfn]); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule[, wfn]); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule[, wfn]); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule, wfn=None)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location to set QCVariables. Returns:; Dispersion energy [Eh]. Return type:; float. Notes. DISPERSION CORRECTION ENERGYDisp always set. Overridden in SCF finalization, but that only changes for “-3C” methods. fctl DISPERSION CORRECTION ENERGYSet if fctldash nonempty. compute_gradient(molecule, wfn=None)[source]¶; Compute dispersion gradient based o",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html:4259,Energy Efficiency,energy,energy,4259,"putes dispersion. See above for allowed; values. Formerly (pre Nov 2022) only relevant for -D2, which can be computed by; libdisp or dftd3. Now (post Nov 2022) also relevant for -D3 variants,; which can be computed by dftd3 executable or simple-dftd3 Python module.; gcp_engine (Optional[str]) – Override which code computes the gcp correction. Now can use; classic gcp or mctc-gcp executables.; save_pairwise_disp (bool) – Whether to request atomic pairwise analysis. Methods Summary. compute_energy(molecule[, wfn]); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule[, wfn]); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule[, wfn]); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule, wfn=None)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location to set QCVariables. Returns:; Dispersion energy [Eh]. Return type:; float. Notes. DISPERSION CORRECTION ENERGYDisp always set. Overridden in SCF finalization, but that only changes for “-3C” methods. fctl DISPERSION CORRECTION ENERGYSet if fctldash nonempty. compute_gradient(molecule, wfn=None)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location to set QCVariables. Returns:; (nat, 3) dispersion gradient [Eh/a0]. Return type:; Matrix. compute_hessian(molecule, wfn=None)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion eng",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html:4503,Energy Efficiency,energy,energy,4503,"imple-dftd3 Python module.; gcp_engine (Optional[str]) – Override which code computes the gcp correction. Now can use; classic gcp or mctc-gcp executables.; save_pairwise_disp (bool) – Whether to request atomic pairwise analysis. Methods Summary. compute_energy(molecule[, wfn]); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule[, wfn]); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule[, wfn]); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule, wfn=None)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location to set QCVariables. Returns:; Dispersion energy [Eh]. Return type:; float. Notes. DISPERSION CORRECTION ENERGYDisp always set. Overridden in SCF finalization, but that only changes for “-3C” methods. fctl DISPERSION CORRECTION ENERGYSet if fctldash nonempty. compute_gradient(molecule, wfn=None)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location to set QCVariables. Returns:; (nat, 3) dispersion gradient [Eh/a0]. Return type:; Matrix. compute_hessian(molecule, wfn=None)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location to set QCVariables. Returns:; (3*nat, 3*nat) dispersion Hessian [",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html:4566,Energy Efficiency,ENERGY,ENERGYDisp,4566,"hich code computes the gcp correction. Now can use; classic gcp or mctc-gcp executables.; save_pairwise_disp (bool) – Whether to request atomic pairwise analysis. Methods Summary. compute_energy(molecule[, wfn]); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule[, wfn]); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule[, wfn]); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule, wfn=None)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location to set QCVariables. Returns:; Dispersion energy [Eh]. Return type:; float. Notes. DISPERSION CORRECTION ENERGYDisp always set. Overridden in SCF finalization, but that only changes for “-3C” methods. fctl DISPERSION CORRECTION ENERGYSet if fctldash nonempty. compute_gradient(molecule, wfn=None)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location to set QCVariables. Returns:; (nat, 3) dispersion gradient [Eh/a0]. Return type:; Matrix. compute_hessian(molecule, wfn=None)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location to set QCVariables. Returns:; (3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. Return type:; Matrix. print_out()[source]¶; Format disper",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html:4689,Energy Efficiency,ENERGY,ENERGYSet,4689," to request atomic pairwise analysis. Methods Summary. compute_energy(molecule[, wfn]); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule[, wfn]); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule[, wfn]); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule, wfn=None)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location to set QCVariables. Returns:; Dispersion energy [Eh]. Return type:; float. Notes. DISPERSION CORRECTION ENERGYDisp always set. Overridden in SCF finalization, but that only changes for “-3C” methods. fctl DISPERSION CORRECTION ENERGYSet if fctldash nonempty. compute_gradient(molecule, wfn=None)[source]¶; Compute dispersion gradient based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location to set QCVariables. Returns:; (nat, 3) dispersion gradient [Eh/a0]. Return type:; Matrix. compute_hessian(molecule, wfn=None)[source]¶; Compute dispersion Hessian based on engine, dispersion level, and parameters in self.; Uses finite difference, as no dispersion engine has analytic second derivatives. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location to set QCVariables. Returns:; (3*nat, 3*nat) dispersion Hessian [Eh/a0/a0]. Return type:; Matrix. print_out()[source]¶; Format dispersion parameters of self for output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html:805,Modifiability,flexible,flexible,805,"﻿. EmpiricalDispersion. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; EmpiricalDispersion. EmpiricalDispersion¶. class psi4.driver.EmpiricalDispersion(*, name_hint=None, level_hint=None, param_tweaks=None, engine=None, gcp_engine=None, save_pairwise_disp=False)[source]¶; Bases: object; Lightweight unification of empirical dispersion calculation modes. dashlevel¶; {“d1”, “d2”, “chg”, “das2009”, “das2010”, “nl”, “dmp2”, “d3zero2b”, “d3bj2b”, “d3mzero2b”, “d3mbj2b”, “d3zeroatm”, “d3bjatm”, “d3mzeroatm”, “d3mbjatm”, “d4bjeeqatm”}; Name of dispersion correction to be applied. Resolved; from name_hint and/or level_hint into a key of; empirical_dispersion_resources.dashcoeff. Type:; str. dashparams¶; Complete set of parameter values defining the flexible parts; of dashlevel. Number and parameter names vary by; dashlevel. Resolved into a complete set (keys of; dashcoeff[dashlevel][‘default’]) from name_hint and/or; dashcoeff_supplement and/or user param_tweaks. Type:; dict. fctldash¶; If dashparams for dashlevel corresponds to a defined,; named, untweaked “functional-dashlevel” set, then that; functional. Otherwise, empty string. Type:; str. description¶; Tagline for dispersion dashlevel. Type:; str. dashlevel_citation¶; Literature reference for dispersion dashlevel in general,; not necessarily for dashparams. Type:; str. dashparams_citation¶; Literature reference for dispersion parameters, if dashparams; corresponds to a defined, named, untweaked “functional-dashlevel”; set with a citation. Otherwise, empty string. Type:; str. dashcoeff_supplement¶; See description in qcengine.programs.empirical_dispersion_resources.from_arrays. Used; here to “bless” the dispersion definitions attached to; the procedures/dft/<rung>_functionals-defined dictionaries; as legit, non-custom, and of equal validity to; qcengine.programs.empirical_dispersion_resources.dashcoeff itself for purposes of; validating fctldash. Type:; dict. engine¶;",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html:1959,Security,validat,validating,1959,") from name_hint and/or; dashcoeff_supplement and/or user param_tweaks. Type:; dict. fctldash¶; If dashparams for dashlevel corresponds to a defined,; named, untweaked “functional-dashlevel” set, then that; functional. Otherwise, empty string. Type:; str. description¶; Tagline for dispersion dashlevel. Type:; str. dashlevel_citation¶; Literature reference for dispersion dashlevel in general,; not necessarily for dashparams. Type:; str. dashparams_citation¶; Literature reference for dispersion parameters, if dashparams; corresponds to a defined, named, untweaked “functional-dashlevel”; set with a citation. Otherwise, empty string. Type:; str. dashcoeff_supplement¶; See description in qcengine.programs.empirical_dispersion_resources.from_arrays. Used; here to “bless” the dispersion definitions attached to; the procedures/dft/<rung>_functionals-defined dictionaries; as legit, non-custom, and of equal validity to; qcengine.programs.empirical_dispersion_resources.dashcoeff itself for purposes of; validating fctldash. Type:; dict. engine¶; {‘libdisp’, “s-dftd3”, ‘dftd3’, ‘nl’, ‘mp2d’, “dftd4”}; Compute engine for dispersion. One of Psi4’s internal libdisp; library, external Grimme or Beran projects, or nl. Type:; str. disp¶; Only present for engine =libdisp. Psi4 class instance prepared; to compute dispersion. Type:; Dispersion. ordered_params¶; Fixed-order list of relevant parameters for dashlevel. Matches; DISPERSION CORRECTION ENERGY ordering. Used for printing. Type:; list. Parameters:. name_hint (Optional[str]) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; dashcoeff[dashlevel][functional-without-dashlevel] or; dashcoeff_supplement[dashlevel][functional-with-dashlevel]; can be overwritten via param_tweaks.; level_hint (Optional[str]) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in das",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html:3497,Usability,simpl,simple-,3497," name_hint (Optional[str]) – Name of functional (func only, func & disp, or disp only) for; which to compute dispersion (e.g., blyp, BLYP-D2, blyp-d3bj,; blyp-d3(bj), hf+d). Any or all parameters initialized from; dashcoeff[dashlevel][functional-without-dashlevel] or; dashcoeff_supplement[dashlevel][functional-with-dashlevel]; can be overwritten via param_tweaks.; level_hint (Optional[str]) – Name of dispersion correction to be applied (e.g., d, D2,; d3(bj), das2010). Must be key in dashcoeff or “alias” or; “formal” to one.; param_tweaks (Union[Dict, List, None]) – Values for the same keys as dashcoeff[dashlevel][‘default’]; (and same order if list) used to override any or all values; initialized by name_hint. Extra parameters will error.; engine (Optional[str]) – Override which code computes dispersion. See above for allowed; values. Formerly (pre Nov 2022) only relevant for -D2, which can be computed by; libdisp or dftd3. Now (post Nov 2022) also relevant for -D3 variants,; which can be computed by dftd3 executable or simple-dftd3 Python module.; gcp_engine (Optional[str]) – Override which code computes the gcp correction. Now can use; classic gcp or mctc-gcp executables.; save_pairwise_disp (bool) – Whether to request atomic pairwise analysis. Methods Summary. compute_energy(molecule[, wfn]); Compute dispersion energy based on engine, dispersion level, and parameters in self. compute_gradient(molecule[, wfn]); Compute dispersion gradient based on engine, dispersion level, and parameters in self. compute_hessian(molecule[, wfn]); Compute dispersion Hessian based on engine, dispersion level, and parameters in self. print_out(); Format dispersion parameters of self for output file. Methods Documentation. compute_energy(molecule, wfn=None)[source]¶; Compute dispersion energy based on engine, dispersion level, and parameters in self. Parameters:. molecule (Molecule) – System for which to compute empirical dispersion correction.; wfn (Optional[Wavefunction]) – Location",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.EmpiricalDispersion.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html:705,Deployability,update,updated,705,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html:398,Energy Efficiency,ENERGY,ENERGY,398,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html:421,Energy Efficiency,ENERGY,ENERGY,421,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html:444,Energy Efficiency,ENERGY,ENERGY,444,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html:464,Energy Efficiency,ENERGY,ENERGY,464,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html:490,Energy Efficiency,ENERGY,ENERGY,490,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energies_from_fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:5357,Deployability,configurat,configuration,5357,"s]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual] [details]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual] [details]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. a-ccsd(t); CCSD with asymmetric perturbative triples (A-CCSD(T)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual] [details]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual] [details]. ccenergy; expert full control over ccenergy module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual] [details]. fci; full configuration interaction (FCI) [manual] [details]. detci; expert full control over detci module. gaussian-2, g2; Gaussian-2 composite method [manual]. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. psimrcc_scf; Mk-MRCC with regular SCF module (convenience function) [manual]. dmrg-scf; (with CheMPS2) density matrix renormalization group SCF [manual]. dmrg-caspt2; (with CheMPS2) density matrix renormalization group CASPT2 [manual]. dmrg-ci; (with CheMPS2) density matrix renormalization gr",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:5667,Deployability,configurat,configuration,5667,"ual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual] [details]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual] [details]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. a-ccsd(t); CCSD with asymmetric perturbative triples (A-CCSD(T)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual] [details]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual] [details]. ccenergy; expert full control over ccenergy module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual] [details]. fci; full configuration interaction (FCI) [manual] [details]. detci; expert full control over detci module. gaussian-2, g2; Gaussian-2 composite method [manual]. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. psimrcc_scf; Mk-MRCC with regular SCF module (convenience function) [manual]. dmrg-scf; (with CheMPS2) density matrix renormalization group SCF [manual]. dmrg-caspt2; (with CheMPS2) density matrix renormalization group CASPT2 [manual]. dmrg-ci; (with CheMPS2) density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sf-sapt; 0th-order spin-flip SAPT [manual]. sapt(dft); 0th-order SAPT upon KS",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:37762,Deployability,update,updated,37762,"nd doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:3,Energy Efficiency,energy,energy,3,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-co",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:113,Energy Efficiency,energy,energy,113,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-co",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:121,Energy Efficiency,energy,energy,121,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-co",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:142,Energy Efficiency,energy,energy,142,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-co",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:223,Energy Efficiency,energy,energy,223,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-co",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:266,Energy Efficiency,energy,energy,266,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-co",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:316,Energy Efficiency,energy,energy,316,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-co",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:358,Energy Efficiency,energy,energy,358,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-co",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:433,Energy Efficiency,ENERGY,ENERGY,433,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-co",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:459,Energy Efficiency,ENERGY,ENERGY,459,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-co",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:487,Energy Efficiency,ENERGY,ENERGY,487,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-co",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:917,Energy Efficiency,energy,energy,917,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-co",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:6435,Energy Efficiency,adapt,adapted,6435,"; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual] [details]. fci; full configuration interaction (FCI) [manual] [details]. detci; expert full control over detci module. gaussian-2, g2; Gaussian-2 composite method [manual]. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. psimrcc_scf; Mk-MRCC with regular SCF module (convenience function) [manual]. dmrg-scf; (with CheMPS2) density matrix renormalization group SCF [manual]. dmrg-caspt2; (with CheMPS2) density matrix renormalization group CASPT2 [manual]. dmrg-ci; (with CheMPS2) density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sf-sapt; 0th-order spin-flip SAPT [manual]. sapt(dft); 0th-order SAPT upon KS reference [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispersion [manual]. sapt2+(3)(ccd); SAPT2+(3) with CC-based dispersion [manual]. sapt2+3(ccd); SAPT2+3 with CC-based dispersion [manual]. sapt2+dmp2; SAPT including all 2nd-order terms and MP2 correction [manual]. sapt2+(3)dmp2; SAPT including perturbative triples and MP2 correction [manual]. sapt2+3dmp2; SAPT including all 3rd-order terms and MP2 correction [manual]. sapt2+(ccd)dmp2; SAPT2+ with CC-based dispersion and MP2 correction [manual]. sapt2+(3)(ccd)dmp2; SAPT2+(3) wi",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:7606,Energy Efficiency,charge,charge,7606,"f-sapt; 0th-order spin-flip SAPT [manual]. sapt(dft); 0th-order SAPT upon KS reference [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispersion [manual]. sapt2+(3)(ccd); SAPT2+(3) with CC-based dispersion [manual]. sapt2+3(ccd); SAPT2+3 with CC-based dispersion [manual]. sapt2+dmp2; SAPT including all 2nd-order terms and MP2 correction [manual]. sapt2+(3)dmp2; SAPT including perturbative triples and MP2 correction [manual]. sapt2+3dmp2; SAPT including all 3rd-order terms and MP2 correction [manual]. sapt2+(ccd)dmp2; SAPT2+ with CC-based dispersion and MP2 correction [manual]. sapt2+(3)(ccd)dmp2; SAPT2+(3) with CC-based dispersion and MP2 correction [manual]. sapt2+3(ccd)dmp2; SAPT2+3 with CC-based dispersion and MP2 correction [manual]. sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation [manual]. sapt2-ct; SAPT2 plus CT [manual]. sapt2+-ct; SAPT2+ plus CT [manual]. sapt2+(3)-ct; SAPT2+(3) plus CT [manual]. sapt2+3-ct; SAPT2+3 plus CT [manual]. sapt2+(ccd)-ct; SAPT2+(CCD) plus CT [manual]. sapt2+(3)(ccd)-ct; SAPT2+(3)(CCD) plus CT [manual]. sapt2+3(ccd)-ct; SAPT2+3(CCD) plus CT [manual]. adc; 2nd-order algebraic diagrammatic construction (ADC), deprecated [manual]. adc(1); (with ADCC) 1st-order algebraic diagrammatic construction (ADC) [manual]. adc(2); (with ADCC) 2nd-order ADC [manual]. adc(2)-x; (with ADCC) extended 2nd-order ADC [manual]. adc(3); (with ADCC) 3rd-order ADC [manual]. cvs-adc(1); (with ADCC) core-valence separation (CVS) 1st-order ADC [manual]. cvs-adc(2); (with ADCC) CVS 2nd-order ADC [manual]. cvs-adc(2)-x; (with ADCC) CVS extended 2nd-order ADC [manual]. cvs-adc(3); (with ADCC) CVS 3rd-order ADC [manual]. ep2; 2nd-order electron propagator theory. eom-cc2; equation of motion (EOM) CC2 [manual]. eom-ccsd; EOM-CCSD [manual]",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:36173,Energy Efficiency,energy,energy,36173,". ccsdtq-3; CC through triples with iterative quadruples (all but the most expensive terms). ccsdtqp-3; CC through quadruples with iterative quintuples (all but the most expensive terms). ccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:36199,Energy Efficiency,Charge,Charge-transfer,36199,"most expensive terms). ccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:36405,Energy Efficiency,energy,energy,36405,"most expensive terms). ccsdtqph-3; CC through quintuples with iterative sextuples (all but the most expensive terms). name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:36472,Energy Efficiency,energy,energy,36472,"nd Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for mo",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:36789,Energy Efficiency,energy,energy,36789,"cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2022, The Psi4 Project.; Last updated o",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:36907,Energy Efficiency,energy,energy,36907,"nd doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:37099,Energy Efficiency,energy,energy,37099,"nd doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:37136,Energy Efficiency,energy,energy,37136,"nd doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:37244,Energy Efficiency,energy,energy,37244,"nd doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:37492,Energy Efficiency,energy,energy,37492,"nd doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:37707,Energy Efficiency,energy,energy,37707,"nd doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:413,Modifiability,variab,variables,413,"﻿. energy. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. energy¶. psi4.driver.energy(name, **kwargs)[source]¶; Function to compute the single-point electronic energy. Returns:; float – Total electronic energy in Hartrees. SAPT & EFP return interaction energy. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. PSI variables:. CURRENT ENERGY; CURRENT REFERENCE ENERGY; CURRENT CORRELATION ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. write_orbitals (str, boolean) – filename || \(\Rightarrow\) 'on' \(\Leftarrow\) || 'off'; (str) Save wfn containing current orbitals to the given file name after each SCF iteration; and retain after PSI4 finishes.; (boolean) Turns writing the orbitals after the converged SCF on/off.; Orbital file will be deleted unless PSI4 is called with -m flag. restart_file (str) – ['file.1, file.32] || ./file || etc.; Existing files to be renamed and copied for calculation restart, e.g. a serialized wfn or module-specific binary data. name; calls method. efp; (with LibEFP) effective fragment potential (EFP) [manual]. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. qchf; quadratically-convergent HF. hf3c; HF with dispersion, BSSE, and basis set corrections [manual]. pbeh3c; PBEh with dispersion, BSSE, and basis set corrections [manual]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. scs-mp2; spin-co",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:5357,Modifiability,config,configuration,5357,"s]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual] [details]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual] [details]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. a-ccsd(t); CCSD with asymmetric perturbative triples (A-CCSD(T)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual] [details]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual] [details]. ccenergy; expert full control over ccenergy module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual] [details]. fci; full configuration interaction (FCI) [manual] [details]. detci; expert full control over detci module. gaussian-2, g2; Gaussian-2 composite method [manual]. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. psimrcc_scf; Mk-MRCC with regular SCF module (convenience function) [manual]. dmrg-scf; (with CheMPS2) density matrix renormalization group SCF [manual]. dmrg-caspt2; (with CheMPS2) density matrix renormalization group CASPT2 [manual]. dmrg-ci; (with CheMPS2) density matrix renormalization gr",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:5667,Modifiability,config,configuration,5667,"ual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual] [details]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual] [details]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. a-ccsd(t); CCSD with asymmetric perturbative triples (A-CCSD(T)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual] [details]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual] [details]. ccenergy; expert full control over ccenergy module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual] [details]. fci; full configuration interaction (FCI) [manual] [details]. detci; expert full control over detci module. gaussian-2, g2; Gaussian-2 composite method [manual]. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. psimrcc_scf; Mk-MRCC with regular SCF module (convenience function) [manual]. dmrg-scf; (with CheMPS2) density matrix renormalization group SCF [manual]. dmrg-caspt2; (with CheMPS2) density matrix renormalization group CASPT2 [manual]. dmrg-ci; (with CheMPS2) density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sf-sapt; 0th-order spin-flip SAPT [manual]. sapt(dft); 0th-order SAPT upon KS",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:6435,Modifiability,adapt,adapted,6435,"; CISD with frozen natural orbitals [manual]. cisdt; CI singles, doubles, and triples (CISDT) [manual]. cisdtq; CI singles, doubles, triples, and quadruples (CISDTQ) [manual]. cin; nth-order CI [manual] [details]. fci; full configuration interaction (FCI) [manual] [details]. detci; expert full control over detci module. gaussian-2, g2; Gaussian-2 composite method [manual]. casscf; complete active space self consistent field (CASSCF) [manual]. rasscf; restricted active space self consistent field (RASSCF) [manual]. mcscf; multiconfigurational self consistent field (SCF) [manual]. psimrcc; Mukherjee multireference coupled cluster (Mk-MRCC) [manual]. psimrcc_scf; Mk-MRCC with regular SCF module (convenience function) [manual]. dmrg-scf; (with CheMPS2) density matrix renormalization group SCF [manual]. dmrg-caspt2; (with CheMPS2) density matrix renormalization group CASPT2 [manual]. dmrg-ci; (with CheMPS2) density matrix renormalization group CI [manual]. sapt0; 0th-order symmetry adapted perturbation theory (SAPT) [manual]. ssapt0; 0th-order SAPT with special exchange scaling [manual]. fisapt0; 0th-order functional and/or intramolecular SAPT [manual]. sf-sapt; 0th-order spin-flip SAPT [manual]. sapt(dft); 0th-order SAPT upon KS reference [manual]. sapt2; 2nd-order SAPT, traditional definition [manual]. sapt2+; SAPT including all 2nd-order terms [manual]. sapt2+(3); SAPT including perturbative triples [manual]. sapt2+3; SAPT including all 3rd-order terms [manual]. sapt2+(ccd); SAPT2+ with CC-based dispersion [manual]. sapt2+(3)(ccd); SAPT2+(3) with CC-based dispersion [manual]. sapt2+3(ccd); SAPT2+3 with CC-based dispersion [manual]. sapt2+dmp2; SAPT including all 2nd-order terms and MP2 correction [manual]. sapt2+(3)dmp2; SAPT including perturbative triples and MP2 correction [manual]. sapt2+3dmp2; SAPT including all 3rd-order terms and MP2 correction [manual]. sapt2+(ccd)dmp2; SAPT2+ with CC-based dispersion and MP2 correction [manual]. sapt2+(3)(ccd)dmp2; SAPT2+(3) wi",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:8172,Modifiability,extend,extended,8172," sapt2+(3)dmp2; SAPT including perturbative triples and MP2 correction [manual]. sapt2+3dmp2; SAPT including all 3rd-order terms and MP2 correction [manual]. sapt2+(ccd)dmp2; SAPT2+ with CC-based dispersion and MP2 correction [manual]. sapt2+(3)(ccd)dmp2; SAPT2+(3) with CC-based dispersion and MP2 correction [manual]. sapt2+3(ccd)dmp2; SAPT2+3 with CC-based dispersion and MP2 correction [manual]. sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation [manual]. sapt2-ct; SAPT2 plus CT [manual]. sapt2+-ct; SAPT2+ plus CT [manual]. sapt2+(3)-ct; SAPT2+(3) plus CT [manual]. sapt2+3-ct; SAPT2+3 plus CT [manual]. sapt2+(ccd)-ct; SAPT2+(CCD) plus CT [manual]. sapt2+(3)(ccd)-ct; SAPT2+(3)(CCD) plus CT [manual]. sapt2+3(ccd)-ct; SAPT2+3(CCD) plus CT [manual]. adc; 2nd-order algebraic diagrammatic construction (ADC), deprecated [manual]. adc(1); (with ADCC) 1st-order algebraic diagrammatic construction (ADC) [manual]. adc(2); (with ADCC) 2nd-order ADC [manual]. adc(2)-x; (with ADCC) extended 2nd-order ADC [manual]. adc(3); (with ADCC) 3rd-order ADC [manual]. cvs-adc(1); (with ADCC) core-valence separation (CVS) 1st-order ADC [manual]. cvs-adc(2); (with ADCC) CVS 2nd-order ADC [manual]. cvs-adc(2)-x; (with ADCC) CVS extended 2nd-order ADC [manual]. cvs-adc(3); (with ADCC) CVS 3rd-order ADC [manual]. ep2; 2nd-order electron propagator theory. eom-cc2; equation of motion (EOM) CC2 [manual]. eom-ccsd; EOM-CCSD [manual]. eom-cc3; EOM-CC3 [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. td-b1lyp; TDDFT B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. td-b1pw91; TDDFT B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. td-b1wc; TDDFT B1WC Hyb-GGA Exchange-Correlation Functional. b2gpplyp; B2GPPLYP Double Hybrid Exchange-Correlation Functional. b2gpplyp-d3bj2b. b2gpply",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:8409,Modifiability,extend,extended,8409,"]. sapt2+(3)(ccd)dmp2; SAPT2+(3) with CC-based dispersion and MP2 correction [manual]. sapt2+3(ccd)dmp2; SAPT2+3 with CC-based dispersion and MP2 correction [manual]. sapt0-ct; 0th-order SAPT plus charge transfer (CT) calculation [manual]. sapt2-ct; SAPT2 plus CT [manual]. sapt2+-ct; SAPT2+ plus CT [manual]. sapt2+(3)-ct; SAPT2+(3) plus CT [manual]. sapt2+3-ct; SAPT2+3 plus CT [manual]. sapt2+(ccd)-ct; SAPT2+(CCD) plus CT [manual]. sapt2+(3)(ccd)-ct; SAPT2+(3)(CCD) plus CT [manual]. sapt2+3(ccd)-ct; SAPT2+3(CCD) plus CT [manual]. adc; 2nd-order algebraic diagrammatic construction (ADC), deprecated [manual]. adc(1); (with ADCC) 1st-order algebraic diagrammatic construction (ADC) [manual]. adc(2); (with ADCC) 2nd-order ADC [manual]. adc(2)-x; (with ADCC) extended 2nd-order ADC [manual]. adc(3); (with ADCC) 3rd-order ADC [manual]. cvs-adc(1); (with ADCC) core-valence separation (CVS) 1st-order ADC [manual]. cvs-adc(2); (with ADCC) CVS 2nd-order ADC [manual]. cvs-adc(2)-x; (with ADCC) CVS extended 2nd-order ADC [manual]. cvs-adc(3); (with ADCC) CVS 3rd-order ADC [manual]. ep2; 2nd-order electron propagator theory. eom-cc2; equation of motion (EOM) CC2 [manual]. eom-ccsd; EOM-CCSD [manual]. eom-cc3; EOM-CC3 [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. td-b1lyp; TDDFT B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. td-b1pw91; TDDFT B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. td-b1wc; TDDFT B1WC Hyb-GGA Exchange-Correlation Functional. b2gpplyp; B2GPPLYP Double Hybrid Exchange-Correlation Functional. b2gpplyp-d3bj2b. b2gpplyp-d3bjatm. b2gpplyp-d3zero2b. b2gpplyp-d3zeroatm. b2gpplyp-nl; B2GPPLYP Double Hybrid Exchange-Correlation Functional. b2plyp; B2PLYP Double Hybrid Exchange-Correlation Functional. b2plyp-d3bj2b. b2plyp-d3bjatm. b2plyp-d3mbj2b. b2ply",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:18977,Modifiability,Parameteriz,Parameterized,18977,p; KMLYP Hyb-GGA Exchange-Correlation Functional. td-kmlyp; TDDFT KMLYP Hyb-GGA Exchange-Correlation Functional. ksdt; KSDT Exchange-Correlation Functional. td-ksdt; TDDFT KSDT Exchange-Correlation Functional. kt2; KT2 GGA Exchange-Correlation Functional. td-kt2; TDDFT KT2 GGA Exchange-Correlation Functional. lc-bop; LC-BOP GGA Exchange-Correlation Functional. td-lc-bop; TDDFT LC-BOP GGA Exchange-Correlation Functional. lc-vv10; LC-VV10 GGA Exchange-Correlation Functional. td-lc-vv10; TDDFT LC-VV10 GGA Exchange-Correlation Functional. lda0; LDA0 Exchange-Correlation Functional. td-lda0; TDDFT LDA0 Exchange-Correlation Functional. lrc-wpbe; LRC-WPBE GGA Exchange-Correlation Functional. td-lrc-wpbe; TDDFT LRC-WPBE GGA Exchange-Correlation Functional. lrc-wpbeh; LRC-wPBEh Hyb-GGA Exchange-Correlation Functional. td-lrc-wpbeh; TDDFT LRC-wPBEh Hyb-GGA Exchange-Correlation Functional. m05; M05 Meta-GGA XC Functional. td-m05; TDDFT M05 Meta-GGA XC Functional. m05-2x; Heavily Parameterized Hybrid M05-2X Meta-GGA XC Functional. td-m05-2x; TDDFT Heavily Parameterized Hybrid M05-2X Meta-GGA XC Functional. m05-2x-d3zero2b. m05-2x-d3zeroatm. m05-d3zero2b. m05-d3zeroatm. m06; M06 Meta-GGA XC Functional. td-m06; TDDFT M06 Meta-GGA XC Functional. m06-2x; Hybrid M06-2X Meta-GGA XC Functional. td-m06-2x; TDDFT Hybrid M06-2X Meta-GGA XC Functional. m06-2x-d3zero2b. m06-2x-d3zeroatm. m06-d3zero2b. m06-d3zeroatm. m06-hf; Minnesota M06-HF Hybrid XC Functional. td-m06-hf; TDDFT Minnesota M06-HF Hybrid XC Functional. m06-hf-d3zero2b. m06-hf-d3zeroatm. m06-l; M06-L Meta-GGA XC Functional. td-m06-l; TDDFT M06-L Meta-GGA XC Functional. m06-l-d3zero2b. m06-l-d3zeroatm. m08-hx; Minnesota M08-HX Hybrid XC Functional. td-m08-hx; TDDFT Minnesota M08-HX Hybrid XC Functional. m08-hx-d3zero2b. m08-hx-d3zeroatm. m08-so; Minnesota M08-SO Hybrid XC Functional. td-m08-so; TDDFT Minnesota M08-SO Hybrid XC Functional. m11; M11 Meta-GGA XC Functional. td-m11; TDDFT M11 Meta-GGA XC Functional. m11-d3bj2b. m1,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:19054,Modifiability,Parameteriz,Parameterized,19054,Hyb-GGA Exchange-Correlation Functional. ksdt; KSDT Exchange-Correlation Functional. td-ksdt; TDDFT KSDT Exchange-Correlation Functional. kt2; KT2 GGA Exchange-Correlation Functional. td-kt2; TDDFT KT2 GGA Exchange-Correlation Functional. lc-bop; LC-BOP GGA Exchange-Correlation Functional. td-lc-bop; TDDFT LC-BOP GGA Exchange-Correlation Functional. lc-vv10; LC-VV10 GGA Exchange-Correlation Functional. td-lc-vv10; TDDFT LC-VV10 GGA Exchange-Correlation Functional. lda0; LDA0 Exchange-Correlation Functional. td-lda0; TDDFT LDA0 Exchange-Correlation Functional. lrc-wpbe; LRC-WPBE GGA Exchange-Correlation Functional. td-lrc-wpbe; TDDFT LRC-WPBE GGA Exchange-Correlation Functional. lrc-wpbeh; LRC-wPBEh Hyb-GGA Exchange-Correlation Functional. td-lrc-wpbeh; TDDFT LRC-wPBEh Hyb-GGA Exchange-Correlation Functional. m05; M05 Meta-GGA XC Functional. td-m05; TDDFT M05 Meta-GGA XC Functional. m05-2x; Heavily Parameterized Hybrid M05-2X Meta-GGA XC Functional. td-m05-2x; TDDFT Heavily Parameterized Hybrid M05-2X Meta-GGA XC Functional. m05-2x-d3zero2b. m05-2x-d3zeroatm. m05-d3zero2b. m05-d3zeroatm. m06; M06 Meta-GGA XC Functional. td-m06; TDDFT M06 Meta-GGA XC Functional. m06-2x; Hybrid M06-2X Meta-GGA XC Functional. td-m06-2x; TDDFT Hybrid M06-2X Meta-GGA XC Functional. m06-2x-d3zero2b. m06-2x-d3zeroatm. m06-d3zero2b. m06-d3zeroatm. m06-hf; Minnesota M06-HF Hybrid XC Functional. td-m06-hf; TDDFT Minnesota M06-HF Hybrid XC Functional. m06-hf-d3zero2b. m06-hf-d3zeroatm. m06-l; M06-L Meta-GGA XC Functional. td-m06-l; TDDFT M06-L Meta-GGA XC Functional. m06-l-d3zero2b. m06-l-d3zeroatm. m08-hx; Minnesota M08-HX Hybrid XC Functional. td-m08-hx; TDDFT Minnesota M08-HX Hybrid XC Functional. m08-hx-d3zero2b. m08-hx-d3zeroatm. m08-so; Minnesota M08-SO Hybrid XC Functional. td-m08-so; TDDFT Minnesota M08-SO Hybrid XC Functional. m11; M11 Meta-GGA XC Functional. td-m11; TDDFT M11 Meta-GGA XC Functional. m11-d3bj2b. m11-d3bjatm. m11-d3zero2b. m11-d3zeroatm. m11-l; M11-L Meta-GGA XC Function,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:3054,Performance,optimiz,optimized,3054,"eobase interactions [manual]. scs-mp2-vdw; a special version of SCS-MP2 (from ethene dimers) [manual]. sos-mp2; spin-opposite scaled MP2 [manual]. dlpno-mp2; local MP2 with pair natural orbital domains (DLPNO) [manual]. scs-dlpno-mp2; spin-component-scaled DLPNO MP2 [manual]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. scs-mp3; spin-component scaled MP3 [manual]. sos-pi-mp2; A special version of SOS-MP2 for pi systems [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual] [details]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual] [details]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. scs-omp2; spin-component scaled OMP2 [manual]. sos-omp2; spin-opposite scaled OMP2 [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. scs-omp3; spin-component scaled OMP3 [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. omp2.5; orbital-optimized MP2.5 [manual] [details]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual] [details]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual] [details]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual] [details]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual] [details]. fno-aqcc; AQCC with frozen natural orbitals [",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:3227,Performance,optimiz,optimized,3227," pair natural orbital domains (DLPNO) [manual]. scs-dlpno-mp2; spin-component-scaled DLPNO MP2 [manual]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. scs-mp3; spin-component scaled MP3 [manual]. sos-pi-mp2; A special version of SOS-MP2 for pi systems [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual] [details]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual] [details]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. scs-omp2; spin-component scaled OMP2 [manual]. sos-omp2; spin-opposite scaled OMP2 [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. scs-omp3; spin-component scaled OMP3 [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. omp2.5; orbital-optimized MP2.5 [manual] [details]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual] [details]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual] [details]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual] [details]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual] [details]. fno-aqcc; AQCC with frozen natural orbitals [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual] [details]. fno-qcisd; QCISD with frozen natural orbitals [manual]. remp2; 2nd-order retaining-the-excitation-de",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:3401,Performance,optimiz,optimized,3401,"ory (MP3) [manual] [details]. fno-mp3; MP3 with frozen natural orbitals [manual]. scs-mp3; spin-component scaled MP3 [manual]. sos-pi-mp2; A special version of SOS-MP2 for pi systems [manual]. mp2.5; average of MP2 and MP3 [manual] [details]. mp4(sdq); 4th-order MP perturbation theory (MP4) less triples [manual] [details]. fno-mp4(sdq); MP4 (less triples) with frozen natural orbitals [manual]. mp4; full MP4 [manual] [details]. fno-mp4; full MP4 with frozen natural orbitals [manual]. mpn; nth-order Møller–Plesset (MP) perturbation theory [manual] [details]. zaptn; nth-order z-averaged perturbation theory (ZAPT) [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. scs-omp2; spin-component scaled OMP2 [manual]. sos-omp2; spin-opposite scaled OMP2 [manual]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. scs-omp3; spin-component scaled OMP3 [manual]. sos-omp3; spin-opposite scaled OMP3 [manual]. omp2.5; orbital-optimized MP2.5 [manual] [details]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual] [details]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual] [details]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual] [details]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual] [details]. fno-aqcc; AQCC with frozen natural orbitals [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual] [details]. fno-qcisd; QCISD with frozen natural orbitals [manual]. remp2; 2nd-order retaining-the-excitation-degree MP hybrid perturbation theory [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. fno-lcc",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:4323,Performance,optimiz,optimized,4323,"nual]. sos-omp3; spin-opposite scaled OMP3 [manual]. omp2.5; orbital-optimized MP2.5 [manual] [details]. lccsd, cepa(0); coupled electron pair approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual] [details]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual] [details]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual] [details]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual] [details]. fno-aqcc; AQCC with frozen natural orbitals [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual] [details]. fno-qcisd; QCISD with frozen natural orbitals [manual]. remp2; 2nd-order retaining-the-excitation-degree MP hybrid perturbation theory [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual] [details]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual] [details]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. a-ccsd(t); CCSD with asymmetric perturbative triples (A-CCSD(T)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual] [details]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual] [details]. ccenergy; expert full control ove",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:4465,Performance,optimiz,optimized,4465," approximation variant 0 [manual] [details]. fno-lccsd, fno-cepa(0); CEPA(0) with frozen natural orbitals [manual]. cepa(1); coupled electron pair approximation variant 1 [manual] [details]. fno-cepa(1); CEPA(1) with frozen natural orbitals [manual]. cepa(3); coupled electron pair approximation variant 3 [manual] [details]. fno-cepa(3); CEPA(3) with frozen natural orbitals [manual]. acpf; averaged coupled-pair functional [manual] [details]. fno-acpf; ACPF with frozen natural orbitals [manual]. aqcc; averaged quadratic coupled cluster [manual] [details]. fno-aqcc; AQCC with frozen natural orbitals [manual]. qcisd; quadratic CI singles doubles (QCISD) [manual] [details]. fno-qcisd; QCISD with frozen natural orbitals [manual]. remp2; 2nd-order retaining-the-excitation-degree MP hybrid perturbation theory [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. fno-lccd; LCCD with frozen natural orbitals [manual]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. bccd; Brueckner coupled cluster doubles (BCCD) [manual] [details]. fno-ccsd; CCSD with frozen natural orbitals [manual]. qcisd(t); QCISD with perturbative triples [manual] [details]. fno-qcisd(t); QCISD(T) with frozen natural orbitals [manual]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. a-ccsd(t); CCSD with asymmetric perturbative triples (A-CCSD(T)) [manual] [details]. bccd(t); BCCD with perturbative triples [manual] [details]. fno-ccsd(t); CCSD(T) with frozen natural orbitals [manual]. cc3; approximate CC singles, doubles, and triples (CC3) [manual] [details]. ccenergy; expert full control over ccenergy module. cisd; configuration interaction (CI) singles and doubles (CISD) [manual] [details]. fno-cisd; CISD with frozen natural orbi",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:31605,Performance,tune,tuned-cam-,31605,relation Functional. th1; TH1 GGA Exchange-Correlation Functional. td-th1; TDDFT TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. td-th2; TDDFT TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. td-th3; TDDFT TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. td-th4; TDDFT TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. td-tpss; TDDFT TPSS Meta-GGA XC Functional. tpss-d3bj2b. tpss-d3bjatm. tpss-d3zero2b. tpss-d3zeroatm. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. td-tpssh; TDDFT TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj2b. tpssh-d3bjatm. tpssh-d3zero2b. tpssh-d3zeroatm. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. td-tpsslyp1w; TDDFT TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. td-tuned-cam-b3lyp; TDDFT TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. td-vsxc; TDDFT VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. td-vv10; TDDFT VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. td-wb97; TDDFT wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. td-wb97m-v; TDDFT wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. td-wb97x; TDDFT wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-d3zero2b. wb97x-d3zeroatm. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. td-wb97x-v; TDDFT wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). td-wpbe; TDDFT PBE SR-XC Functional (HJS Model). wpbe-d3bj2b. wpbe-d3bjatm. wpbe-d3mbj2b. wpbe-d3mbjatm. wp,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:31622,Performance,TUNE,TUNED-CAM-,31622,relation Functional. th1; TH1 GGA Exchange-Correlation Functional. td-th1; TDDFT TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. td-th2; TDDFT TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. td-th3; TDDFT TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. td-th4; TDDFT TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. td-tpss; TDDFT TPSS Meta-GGA XC Functional. tpss-d3bj2b. tpss-d3bjatm. tpss-d3zero2b. tpss-d3zeroatm. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. td-tpssh; TDDFT TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj2b. tpssh-d3bjatm. tpssh-d3zero2b. tpssh-d3zeroatm. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. td-tpsslyp1w; TDDFT TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. td-tuned-cam-b3lyp; TDDFT TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. td-vsxc; TDDFT VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. td-vv10; TDDFT VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. td-wb97; TDDFT wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. td-wb97m-v; TDDFT wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. td-wb97x; TDDFT wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-d3zero2b. wb97x-d3zeroatm. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. td-wb97x-v; TDDFT wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). td-wpbe; TDDFT PBE SR-XC Functional (HJS Model). wpbe-d3bj2b. wpbe-d3bjatm. wpbe-d3mbj2b. wpbe-d3mbjatm. wp,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:31682,Performance,tune,tuned-cam-,31682,FT TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. td-th2; TDDFT TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. td-th3; TDDFT TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. td-th4; TDDFT TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. td-tpss; TDDFT TPSS Meta-GGA XC Functional. tpss-d3bj2b. tpss-d3bjatm. tpss-d3zero2b. tpss-d3zeroatm. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. td-tpssh; TDDFT TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj2b. tpssh-d3bjatm. tpssh-d3zero2b. tpssh-d3zeroatm. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. td-tpsslyp1w; TDDFT TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. td-tuned-cam-b3lyp; TDDFT TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. td-vsxc; TDDFT VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. td-vv10; TDDFT VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. td-wb97; TDDFT wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. td-wb97m-v; TDDFT wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. td-wb97x; TDDFT wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-d3zero2b. wb97x-d3zeroatm. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. td-wb97x-v; TDDFT wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). td-wpbe; TDDFT PBE SR-XC Functional (HJS Model). wpbe-d3bj2b. wpbe-d3bjatm. wpbe-d3mbj2b. wpbe-d3mbjatm. wpbe-d3mzero2b. wpbe-d3mzeroatm. wpbe-d3zero2b. wpbe-d3zeroatm. wpbe0; PBE0 SR-XC,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:31705,Performance,TUNE,TUNED-CAM-,31705,FT TH1 GGA Exchange-Correlation Functional. th2; TH2 GGA Exchange-Correlation Functional. td-th2; TDDFT TH2 GGA Exchange-Correlation Functional. th3; TH3 GGA Exchange-Correlation Functional. td-th3; TDDFT TH3 GGA Exchange-Correlation Functional. th4; TH4 GGA Exchange-Correlation Functional. td-th4; TDDFT TH4 GGA Exchange-Correlation Functional. tpss; TPSS Meta-GGA XC Functional. td-tpss; TDDFT TPSS Meta-GGA XC Functional. tpss-d3bj2b. tpss-d3bjatm. tpss-d3zero2b. tpss-d3zeroatm. tpss-nl; TPSS Meta-GGA XC Functional. tpssh; TPSSh Hyb-GGA Exchange-Correlation Functional. td-tpssh; TDDFT TPSSh Hyb-GGA Exchange-Correlation Functional. tpssh-d3bj2b. tpssh-d3bjatm. tpssh-d3zero2b. tpssh-d3zeroatm. tpssh-nl; TPSSh-nl Hyb-GGA Exchange-Correlation Functional. tpsslyp1w; TPSSLYP1W GGA Exchange-Correlation Functional. td-tpsslyp1w; TDDFT TPSSLYP1W GGA Exchange-Correlation Functional. tuned-cam-b3lyp; TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. td-tuned-cam-b3lyp; TDDFT TUNED-CAM-B3LYP Hyb-GGA Exchange-Correlation Functional. vsxc; VSXC Meta-GGA XC Functional. td-vsxc; TDDFT VSXC Meta-GGA XC Functional. vv10; VV10 GGA Exchange-Correlation Functional. td-vv10; TDDFT VV10 GGA Exchange-Correlation Functional. wb97; wB97 GGA Exchange-Correlation Functional. td-wb97; TDDFT wB97 GGA Exchange-Correlation Functional. wb97m-d3bj. wb97m-v; wB97M-V Hyb-GGA Exchange-Correlation Functional. td-wb97m-v; TDDFT wB97M-V Hyb-GGA Exchange-Correlation Functional. wb97x; wB97X Hyb-GGA Exchange-Correlation Functional. td-wb97x; TDDFT wB97X Hyb-GGA Exchange-Correlation Functional. wb97x-d. wb97x-d3. wb97x-d3bj. wb97x-d3zero2b. wb97x-d3zeroatm. wb97x-v; wB97X-V Hyb-GGA Exchange-Correlation Functional. td-wb97x-v; TDDFT wB97X-V Hyb-GGA Exchange-Correlation Functional. wpbe; PBE SR-XC Functional (HJS Model). td-wpbe; TDDFT PBE SR-XC Functional (HJS Model). wpbe-d3bj2b. wpbe-d3bjatm. wpbe-d3mbj2b. wpbe-d3mbjatm. wpbe-d3mzero2b. wpbe-d3mzeroatm. wpbe-d3zero2b. wpbe-d3zeroatm. wpbe0; PBE0 SR-XC,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:37197,Performance,perform,perform,37197,"nd doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html:37299,Performance,perform,perform,37299,"nd doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Coupled-cluster singles and doubles calculation with psi code; >>> energy('ccsd'). >>> # [2] Charge-transfer SAPT calculation with scf projection from small into; >>> # requested basis, with specified projection fitting basis; >>> set basis_guess true; >>> set df_basis_guess jun-cc-pVDZ-JKFIT; >>> energy('sapt0-ct'). >>> # [3] Arbitrary-order MPn calculation; >>> energy('mp7'). >>> # [4] Converge scf as singlet, then run detci as triplet upon singlet reference; >>> # Note that the integral transformation is not done automatically when detci is run in a separate step.; >>> molecule H2 {\n0 1\nH\nH 1 0.74\n}; >>> set basis cc-pVDZ; >>> set reference rohf; >>> scf_e, scf_wfn = energy('scf', return_wfn=True); >>> H2.set_multiplicity(3); >>> core.MintsHelper(scf_wfn.basisset()).integrals(); >>> energy('detci', ref_wfn=scf_wfn). >>> # [5] Run two CI calculations, keeping the integrals generated in the first one.; >>> molecule ne {\nNe\n}; >>> set basis cc-pVDZ; >>> cisd_e, cisd_wfn = energy('cisd', return_wfn=True); >>> energy('fci', ref_wfn=cisd_wfn). >>> # [6] Can automatically perform complete basis set extrapolations; >>> energy(""CCSD/cc-pV[DT]Z""). >>> # [7] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> energy(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energy. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.energy.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.energy.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fchk.html:2025,Deployability,update,updated,2025,"Python; fchk. fchk¶. psi4.driver.fchk(wfn, filename, *, debug=False, strict_label=True)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file; filename (str) – destination file name for FCHK file; debug (bool) – returns a dictionary to aid with debugging; strict_label (bool) – If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; PSI4 will try to find the right one for the current calculation. If strict_label=False the PSI4 method name will be used as label.; Not all theory modules in PSI4 are compatible with the FCHK writer.; A warning will be printed if a theory module is not supported.; Caution! For orbital-optimized correlated methods (e.g. DCT, OMP2) the ‘Orbital Energy’ field contains ambiguous data. Examples:. Parameters:. wfn (Wavefunction) – ; filename (str) – ; debug (bool) – ; strict_label (bool) – . >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] FCHK file for correlated densities; >>> E, wfn = gradient('ccsd', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] Write FCHK file with non-standard label.; >>> E, wfn = gradient('mp2.5', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk', strict_label=False). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fchk. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fchk.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fchk.html:1297,Energy Efficiency,Energy,Energy,1297,"Python; fchk. fchk¶. psi4.driver.fchk(wfn, filename, *, debug=False, strict_label=True)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file; filename (str) – destination file name for FCHK file; debug (bool) – returns a dictionary to aid with debugging; strict_label (bool) – If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; PSI4 will try to find the right one for the current calculation. If strict_label=False the PSI4 method name will be used as label.; Not all theory modules in PSI4 are compatible with the FCHK writer.; A warning will be printed if a theory module is not supported.; Caution! For orbital-optimized correlated methods (e.g. DCT, OMP2) the ‘Orbital Energy’ field contains ambiguous data. Examples:. Parameters:. wfn (Wavefunction) – ; filename (str) – ; debug (bool) – ; strict_label (bool) – . >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] FCHK file for correlated densities; >>> E, wfn = gradient('ccsd', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] Write FCHK file with non-standard label.; >>> E, wfn = gradient('mp2.5', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk', strict_label=False). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fchk. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fchk.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fchk.html:1497,Energy Efficiency,energy,energy,1497,"Python; fchk. fchk¶. psi4.driver.fchk(wfn, filename, *, debug=False, strict_label=True)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file; filename (str) – destination file name for FCHK file; debug (bool) – returns a dictionary to aid with debugging; strict_label (bool) – If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; PSI4 will try to find the right one for the current calculation. If strict_label=False the PSI4 method name will be used as label.; Not all theory modules in PSI4 are compatible with the FCHK writer.; A warning will be printed if a theory module is not supported.; Caution! For orbital-optimized correlated methods (e.g. DCT, OMP2) the ‘Orbital Energy’ field contains ambiguous data. Examples:. Parameters:. wfn (Wavefunction) – ; filename (str) – ; debug (bool) – ; strict_label (bool) – . >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] FCHK file for correlated densities; >>> E, wfn = gradient('ccsd', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] Write FCHK file with non-standard label.; >>> E, wfn = gradient('mp2.5', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk', strict_label=False). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fchk. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fchk.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fchk.html:1238,Performance,optimiz,optimized,1238,"Python; fchk. fchk¶. psi4.driver.fchk(wfn, filename, *, debug=False, strict_label=True)[source]¶; Function to write wavefunction information in wfn to filename in; Gaussian FCHK format. New in version 0.6. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate fchk file; filename (str) – destination file name for FCHK file; debug (bool) – returns a dictionary to aid with debugging; strict_label (bool) – If true set a density label compliant with what Gaussian would write. A warning will be printed if this is not possible.; Otherwise set the density label according to the method name. Notes. A description of the FCHK format is http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; The allowed headers for methods are general and limited, i.e., “Total SCF|MP2|CI|CC Density”,; PSI4 will try to find the right one for the current calculation. If strict_label=False the PSI4 method name will be used as label.; Not all theory modules in PSI4 are compatible with the FCHK writer.; A warning will be printed if a theory module is not supported.; Caution! For orbital-optimized correlated methods (e.g. DCT, OMP2) the ‘Orbital Energy’ field contains ambiguous data. Examples:. Parameters:. wfn (Wavefunction) – ; filename (str) – ; debug (bool) – ; strict_label (bool) – . >>> # [1] FCHK file for DFT calculation; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] FCHK file for correlated densities; >>> E, wfn = gradient('ccsd', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk'). >>> # [2] Write FCHK file with non-standard label.; >>> E, wfn = gradient('mp2.5', return_wfn=True); >>> fchk(wfn, 'mycalc.fchk', strict_label=False). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fchk. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.fchk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fchk.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fcidump.html:1351,Deployability,update,updated,1351,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fcidump.html:954,Energy Efficiency,energy,energy,954,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fcidump.html:1084,Energy Efficiency,energy,energy,1084,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fcidump.html:804,Security,Validat,ValidationError,804,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fcidump_from_file.html:986,Deployability,update,updated,986,"﻿. fcidump_from_file. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. fcidump_from_file¶. psi4.driver.fcidump_from_file(fname)[source]¶; Function to read in a FCIDUMP file. Return type:; Dict[str, Any]. Returns:; a dictionary with FCIDUMP header and integrals. ’norb’ : number of basis functions; ’nelec’ : number of electrons; ’ms2’ : spin polarization of the system; ’isym’ : symmetry of state (if present in FCIDUMP); ’orbsym’ : list of symmetry labels of each orbital; ’uhf’ : whether restricted or unrestricted; ’enuc’ : nuclear repulsion plus frozen core energy; ’epsilon’ : orbital energies; ’hcore’ : core Hamiltonian; ’eri’ : electron-repulsion integrals. Parameters:; fname (str) – FCIDUMP file name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.fcidump_from_file.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fcidump_from_file.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fcidump_from_file.html:634,Energy Efficiency,energy,energy,634,"﻿. fcidump_from_file. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. fcidump_from_file¶. psi4.driver.fcidump_from_file(fname)[source]¶; Function to read in a FCIDUMP file. Return type:; Dict[str, Any]. Returns:; a dictionary with FCIDUMP header and integrals. ’norb’ : number of basis functions; ’nelec’ : number of electrons; ’ms2’ : spin polarization of the system; ’isym’ : symmetry of state (if present in FCIDUMP); ’orbsym’ : list of symmetry labels of each orbital; ’uhf’ : whether restricted or unrestricted; ’enuc’ : nuclear repulsion plus frozen core energy; ’epsilon’ : orbital energies; ’hcore’ : core Hamiltonian; ’eri’ : electron-repulsion integrals. Parameters:; fname (str) – FCIDUMP file name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.fcidump_from_file.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.fcidump_from_file.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.find_approximate_string_matches.html:837,Deployability,update,updated,837,"﻿. find_approximate_string_matches. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; find_approximate_string_matches. find_approximate_string_matches¶. psi4.driver.find_approximate_string_matches(seq1, options, max_distance)[source]¶; Find list of approximate (within max_distance) matches to string seq1 among options. Parameters:. seq1 (str) – Target string to look for near matches to.; options (List[str]) – Alternatives among which to look for near matches to seq1.; max_distance (int) – Maximum Levenshtein distance from seq1 to return. Return type:; List[str]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; find_approximate_string_matches. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.find_approximate_string_matches.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.find_approximate_string_matches.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:1410,Availability,avail,available,1410,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:1471,Availability,avail,available,1471,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:1874,Availability,avail,available,1874," be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> f",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:1990,Availability,avail,availability,1990,"\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. I",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:2205,Availability,avail,available,2205," series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; freq. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:3106,Deployability,update,updated,3106," series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; freq. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:281,Energy Efficiency,energy,energy,281,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availabilit",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:335,Energy Efficiency,energy,energy,335,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availabilit",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:808,Energy Efficiency,energy,energy,808,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availabilit",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:970,Energy Efficiency,energy,energy,970,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availabilit",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:1097,Energy Efficiency,energy,energy,1097,"freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:1370,Energy Efficiency,energy,energy,1370,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:1025,Performance,perform,performed,1025,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availabilit",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:1119,Performance,perform,performs,1119,"freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:1525,Performance,perform,performed,1525,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:2832,Performance,optimiz,optimize,2832," series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; freq. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:874,Security,access,accessed,874,"﻿. freq. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availabilit",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html:1073,Security,access,accesses,1073,"freq. freq¶. psi4.driver.freq(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.freq.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.freq.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:1438,Availability,avail,available,1438,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:1499,Availability,avail,available,1499,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:1902,Availability,avail,available,1902," be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> f",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:2018,Availability,avail,availability,2018,"\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. I",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:2233,Availability,avail,available,2233," of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:3141,Deployability,update,updated,3141," of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:309,Energy Efficiency,energy,energy,309,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differen",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:363,Energy Efficiency,energy,energy,363,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differen",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:836,Energy Efficiency,energy,energy,836,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differen",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:998,Energy Efficiency,energy,energy,998,"uencies. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences acc",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:1125,Energy Efficiency,energy,energy,1125,"ies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:1398,Energy Efficiency,energy,energy,1398,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:1053,Performance,perform,performed,1053,"uencies. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences acc",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:1147,Performance,perform,performs,1147,"ies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:1553,Performance,perform,performed,1553,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:2860,Performance,optimiz,optimize,2860," of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:902,Security,access,accessed,902,"﻿. frequencies. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequencies. frequencies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differen",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html:1101,Security,access,accesses,1101,"ies¶. psi4.driver.frequencies(name, **kwargs)¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequencies.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequencies.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:1438,Availability,avail,available,1438,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:1499,Availability,avail,available,1499,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:1902,Availability,avail,available,1902," be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> f",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:2018,Availability,avail,availability,2018,"\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. I",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:2233,Availability,avail,available,2233,"es of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:3139,Deployability,update,updated,3139,"es of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:309,Energy Efficiency,energy,energy,309,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differen",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:363,Energy Efficiency,energy,energy,363,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differen",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:836,Energy Efficiency,energy,energy,836,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differen",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:998,Energy Efficiency,energy,energy,998,"uency. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences acc",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:1125,Energy Efficiency,energy,energy,1125,"psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:1398,Energy Efficiency,energy,energy,1398,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:1053,Performance,perform,performed,1053,"uency. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences acc",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:1147,Performance,perform,performs,1147,"psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:1553,Performance,perform,performed,1553,"'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:2860,Performance,optimiz,optimize,2860,"es of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT) [manual] [details]. Examples:. >>> # [1] Frequency calculation for all modes through highest available derivatives; >>> frequency('ccsd'). >>> # [2] Frequency calculation for b2 modes through finite difference of gradients; >>> # printing lowest mode frequency to screen and Hessian to output; >>> E, wfn = frequencies('scf', dertype=1, irrep=4, return_wfn=True); >>> print wfn.frequencies().get(0, 0); >>> wfn.hessian().print_out(). >>> # [3] Frequency calculation at default conditions and Hessian reuse at STP; >>> E, wfn = freq('mp2', return_wfn=True); >>> set t 273.15; >>> set p 100000; >>> thermo(wfn, wfn.frequencies()). >>> # [4] Opt+Freq, skipping the gradient recalc at the start of the Hessian; >>> e, wfn = optimize('hf', return_wfn=True); >>> frequencies('hf', ref_gradient=wfn.gradient()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:902,Security,access,accessed,902,"﻿. frequency. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; frequency. frequency¶. psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differen",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html:1101,Security,access,accesses,1101,"psi4.driver.frequency(name, **kwargs)[source]¶; Function to compute harmonic vibrational frequencies. Aliases:; frequencies(), freq(). Returns:; float – Total electronic energy in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple.; Arrays of frequencies and the Hessian can be accessed through the wavefunction. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword freq_func instead of func. dertype (dertype) – \(\Rightarrow\) 'hessian' \(\Leftarrow\) || 'gradient' || 'energy'; Indicates whether analytic (if available- they’re not), finite; difference of gradients (if available) or finite difference of; energies is to be performed. irrep (int or str) – \(\Rightarrow\) -1 \(\Leftarrow\) || 1 || 'b2' || 'App' || etc.; Indicates which symmetry block (Cotton ordering) of vibrational; frequencies to be computed. 1, '1', or 'a1' represents; \(a_1\), requesting only the totally symmetric modes.; -1 indicates a full frequency calculation. Note; Analytic hessians are only available for RHF and UHF. For all other methods, Frequencies will; proceed through finite differences according to availability of gradients or energies. name; calls method. scf; Hartree–Fock (HF) or LSDA density functional theory (DFT)",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.frequency.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.frequency.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.gdma.html:1028,Deployability,update,updated,1028,"﻿. gdma. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; gdma. gdma¶. psi4.driver.gdma(wfn, datafile='')[source]¶; Function to use wavefunction information in wfn and, if specified,; additional commands in filename to run GDMA analysis. New in version 0.6. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate DMA analysis; datafile (str) – optional control file (see GDMA manual) to peform more complicated DMA; analyses. If this option is used, the File keyword must be set to read; a filename.fchk, where filename is provided by WRITER_FILE_LABEL . Examples:. >>> # [1] DMA analysis from MP2 wavefunction. N.B. gradient must be requested to generate MP2 density.; >>> grad, wfn = gradient('mp2', return_wfn=True); >>> gdma(wfn). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; gdma. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.gdma.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.gdma.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.geometry.html:664,Deployability,update,updated,664,"﻿. geometry. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; geometry. geometry¶. psi4.driver.geometry(geom, name='default')[source]¶; Function to create a molecule object of name name from the; geometry in string geom. Permitted for user use but deprecated; in driver in favor of explicit molecule-passing. Comments within; the string are filtered. Return type:; Molecule. Parameters:. geom (str) – ; name (str) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; geometry. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.geometry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.geometry.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.get_memory.html:436,Deployability,update,updated,436,"﻿. get_memory. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; get_memory. get_memory¶. psi4.driver.get_memory()[source]¶; Return the total memory allocation in bytes. Return type:; int. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; get_memory. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.get_memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.get_memory.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.gradient.html:881,Deployability,update,updated,881,"﻿. gradient. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; gradient. gradient¶. psi4.driver.gradient(name, **kwargs)[source]¶; Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns:; Matrix – Total electronic gradient in Hartrees/Bohr. Returns:; (Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples:. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; gradient. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.gradient.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.gradient.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.gradient.html:209,Performance,optimiz,optimize,209,"﻿. gradient. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; gradient. gradient¶. psi4.driver.gradient(name, **kwargs)[source]¶; Function complementary to optimize(). Carries out one gradient pass,; deciding analytic or finite difference. Returns:; Matrix – Total electronic gradient in Hartrees/Bohr. Returns:; (Matrix, Wavefunction) – gradient and wavefunction when return_wfn specified. Examples:. >>> # [1] Single-point dft gradient getting the gradient; >>> # in file, core.Matrix, and np.array forms; >>> set gradient_write on; >>> G, wfn = gradient('b3lyp-d', return_wfn=True); >>> wfn.gradient().print_out(); >>> np.array(G). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; gradient. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.gradient.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.gradient.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.hessian.html:1026,Deployability,update,updated,1026,"﻿. hessian. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; hessian. hessian¶. psi4.driver.hessian(name, **kwargs)[source]¶; Function complementary to frequency(). Computes force; constants, deciding analytic, finite difference of gradients, or; finite difference of energies. Returns:; Matrix – Total non-mass-weighted electronic Hessian in Hartrees/Bohr/Bohr. Returns:; (Matrix, Wavefunction) – Hessian and wavefunction when return_wfn specified. Examples:. >>> # [1] Frequency calculation without thermochemical analysis; >>> hessian('mp3'). >>> # [2] Frequency calc w/o thermo analysis getting the Hessian; >>> # in file, core.Matrix, and np.array forms; >>> set hessian_write on; >>> H, wfn = hessian('ccsd', return_wfn=True); >>> wfn.hessian().print_out(); >>> np.array(H). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; hessian. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.hessian.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.hessian.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ipi_broker.html:410,Deployability,Configurat,Configuration,410,"﻿. ipi_broker. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ipi_broker. ipi_broker¶. psi4.driver.ipi_broker(LOT, molecule=None, serverdata=False, options=None)[source]¶; Runs IPIBroker to connect to i-PI (https://ipi-code.org/). Parameters:. LOT (str) – level of theory; molecule (Optional[Molecule]) – Initial molecule; serverdata (Union[str, bool]) – Configuration where to connect to ipi; options (Optional[Dict]) – any additional Psi4 options. Return type:; IPIBroker. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ipi_broker. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ipi_broker.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ipi_broker.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ipi_broker.html:725,Deployability,update,updated,725,"﻿. ipi_broker. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ipi_broker. ipi_broker¶. psi4.driver.ipi_broker(LOT, molecule=None, serverdata=False, options=None)[source]¶; Runs IPIBroker to connect to i-PI (https://ipi-code.org/). Parameters:. LOT (str) – level of theory; molecule (Optional[Molecule]) – Initial molecule; serverdata (Union[str, bool]) – Configuration where to connect to ipi; options (Optional[Dict]) – any additional Psi4 options. Return type:; IPIBroker. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ipi_broker. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ipi_broker.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ipi_broker.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ipi_broker.html:410,Modifiability,Config,Configuration,410,"﻿. ipi_broker. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ipi_broker. ipi_broker¶. psi4.driver.ipi_broker(LOT, molecule=None, serverdata=False, options=None)[source]¶; Runs IPIBroker to connect to i-PI (https://ipi-code.org/). Parameters:. LOT (str) – level of theory; molecule (Optional[Molecule]) – Initial molecule; serverdata (Union[str, bool]) – Configuration where to connect to ipi; options (Optional[Dict]) – any additional Psi4 options. Return type:; IPIBroker. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ipi_broker. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ipi_broker.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ipi_broker.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.levenshtein.html:529,Deployability,update,updated,529,"﻿. levenshtein. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; levenshtein. levenshtein¶. psi4.driver.levenshtein(seq1, seq2)[source]¶; Compute the Levenshtein distance between two strings. Parameters:. seq1 (str) – First string.; seq2 (str) – Second string. Return type:; int. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; levenshtein. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.levenshtein.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.levenshtein.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html:224,Availability,Error,Error,224,"﻿. ManagedMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. ManagedMethodError¶. exception psi4.driver.ManagedMethodError(circs)[source]¶; Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters:; circs (List[str]) – List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. message¶; Human readable string describing the exception. Type:; str. stats¶; Dictionary of conditions for which method request was made.; Keys are:. driver : {“energy”, “gradient”, “hessian”, “properties”}; derivative_int : {0, 1, 2, “prop”}, integer representation of driver; method : str, model/method/level-of-theory; link : str, link address to table in docs; method_type : (str, str), raw value and str repr of governing variable and algorithm; reference : (str, str), raw value and str repr of reference type; qc_module : (str, str), raw value and str repr of targeted implementation; fcae : (str, str), raw value and str repr of all-electron/frozen-core status. Type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html:306,Availability,avail,available,306,"﻿. ManagedMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. ManagedMethodError¶. exception psi4.driver.ManagedMethodError(circs)[source]¶; Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters:; circs (List[str]) – List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. message¶; Human readable string describing the exception. Type:; str. stats¶; Dictionary of conditions for which method request was made.; Keys are:. driver : {“energy”, “gradient”, “hessian”, “properties”}; derivative_int : {0, 1, 2, “prop”}, integer representation of driver; method : str, model/method/level-of-theory; link : str, link address to table in docs; method_type : (str, str), raw value and str repr of governing variable and algorithm; reference : (str, str), raw value and str repr of reference type; qc_module : (str, str), raw value and str repr of targeted implementation; fcae : (str, str), raw value and str repr of all-electron/frozen-core status. Type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html:1498,Deployability,update,updated,1498,"﻿. ManagedMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. ManagedMethodError¶. exception psi4.driver.ManagedMethodError(circs)[source]¶; Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters:; circs (List[str]) – List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. message¶; Human readable string describing the exception. Type:; str. stats¶; Dictionary of conditions for which method request was made.; Keys are:. driver : {“energy”, “gradient”, “hessian”, “properties”}; derivative_int : {0, 1, 2, “prop”}, integer representation of driver; method : str, model/method/level-of-theory; link : str, link address to table in docs; method_type : (str, str), raw value and str repr of governing variable and algorithm; reference : (str, str), raw value and str repr of reference type; qc_module : (str, str), raw value and str repr of targeted implementation; fcae : (str, str), raw value and str repr of all-electron/frozen-core status. Type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html:763,Energy Efficiency,energy,energy,763,"﻿. ManagedMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. ManagedMethodError¶. exception psi4.driver.ManagedMethodError(circs)[source]¶; Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters:; circs (List[str]) – List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. message¶; Human readable string describing the exception. Type:; str. stats¶; Dictionary of conditions for which method request was made.; Keys are:. driver : {“energy”, “gradient”, “hessian”, “properties”}; derivative_int : {0, 1, 2, “prop”}, integer representation of driver; method : str, model/method/level-of-theory; link : str, link address to table in docs; method_type : (str, str), raw value and str repr of governing variable and algorithm; reference : (str, str), raw value and str repr of reference type; qc_module : (str, str), raw value and str repr of targeted implementation; fcae : (str, str), raw value and str repr of all-electron/frozen-core status. Type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html:602,Integrability,message,message,602,"﻿. ManagedMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. ManagedMethodError¶. exception psi4.driver.ManagedMethodError(circs)[source]¶; Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters:; circs (List[str]) – List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. message¶; Human readable string describing the exception. Type:; str. stats¶; Dictionary of conditions for which method request was made.; Keys are:. driver : {“energy”, “gradient”, “hessian”, “properties”}; derivative_int : {0, 1, 2, “prop”}, integer representation of driver; method : str, model/method/level-of-theory; link : str, link address to table in docs; method_type : (str, str), raw value and str repr of governing variable and algorithm; reference : (str, str), raw value and str repr of reference type; qc_module : (str, str), raw value and str repr of targeted implementation; fcae : (str, str), raw value and str repr of all-electron/frozen-core status. Type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html:1029,Modifiability,variab,variable,1029,"﻿. ManagedMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. ManagedMethodError¶. exception psi4.driver.ManagedMethodError(circs)[source]¶; Error called when a requested level of theory and derivative level are; nominally available but not for the particular conditions (e.g., reference,; algorithm, active orbitals, QC module, etc.) requested. Parameters:; circs (List[str]) – List providing calling function name, level of theory, algorithm,; reference, QC module, and frozen-core/all-electron requested conditions. message¶; Human readable string describing the exception. Type:; str. stats¶; Dictionary of conditions for which method request was made.; Keys are:. driver : {“energy”, “gradient”, “hessian”, “properties”}; derivative_int : {0, 1, 2, “prop”}, integer representation of driver; method : str, model/method/level-of-theory; link : str, link address to table in docs; method_type : (str, str), raw value and str repr of governing variable and algorithm; reference : (str, str), raw value and str repr of reference type; qc_module : (str, str), raw value and str repr of targeted implementation; fcae : (str, str), raw value and str repr of all-electron/frozen-core status. Type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ManagedMethodError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ManagedMethodError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.mdi_run.html:715,Deployability,update,updated,715,"﻿. mdi_run. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; mdi_run. mdi_run¶. psi4.driver.mdi_run(scf_method, **kwargs)[source]¶; Begin functioning as an MDI (MolSSI driver interface) engine. Parameters:. scf_method (str) – Method (SCF or post-SCF) used when calculating energies or gradients.; molecule – The target molecule, if not the last molecule defined.; kwargs – Any additional arguments to pass to psi4.driver.energy() or; psi4.driver.gradient() computation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; mdi_run. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.mdi_run.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.mdi_run.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.mdi_run.html:474,Energy Efficiency,energy,energy,474,"﻿. mdi_run. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; mdi_run. mdi_run¶. psi4.driver.mdi_run(scf_method, **kwargs)[source]¶; Begin functioning as an MDI (MolSSI driver interface) engine. Parameters:. scf_method (str) – Method (SCF or post-SCF) used when calculating energies or gradients.; molecule – The target molecule, if not the last molecule defined.; kwargs – Any additional arguments to pass to psi4.driver.energy() or; psi4.driver.gradient() computation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; mdi_run. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.mdi_run.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.mdi_run.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.mdi_run.html:228,Integrability,interface,interface,228,"﻿. mdi_run. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; mdi_run. mdi_run¶. psi4.driver.mdi_run(scf_method, **kwargs)[source]¶; Begin functioning as an MDI (MolSSI driver interface) engine. Parameters:. scf_method (str) – Method (SCF or post-SCF) used when calculating energies or gradients.; molecule – The target molecule, if not the last molecule defined.; kwargs – Any additional arguments to pass to psi4.driver.energy() or; psi4.driver.gradient() computation. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; mdi_run. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.mdi_run.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.mdi_run.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.message_box.html:711,Deployability,update,updated,711,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.message_box.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.message_box.html:169,Integrability,message,message,169,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.message_box.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.message_box.html:222,Integrability,message,message,222,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.message_box.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.message_box.html:282,Integrability,message,message,282,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.message_box.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.message_box.html:298,Integrability,Message,Message,298,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.message_box.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.message_box.html:465,Integrability,message,message,465,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.message_box.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.MissingMethodError.html:222,Availability,Error,Error,222,"﻿. MissingMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. MissingMethodError¶. exception psi4.driver.MissingMethodError(msg)[source]¶; Error called when requested level or theory or derivative level are not; available. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.MissingMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.MissingMethodError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.MissingMethodError.html:295,Availability,avail,available,295,"﻿. MissingMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. MissingMethodError¶. exception psi4.driver.MissingMethodError(msg)[source]¶; Error called when requested level or theory or derivative level are not; available. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.MissingMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.MissingMethodError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.MissingMethodError.html:652,Deployability,update,updated,652,"﻿. MissingMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. MissingMethodError¶. exception psi4.driver.MissingMethodError(msg)[source]¶; Error called when requested level or theory or derivative level are not; available. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.MissingMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.MissingMethodError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.MissingMethodError.html:379,Integrability,message,message,379,"﻿. MissingMethodError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. MissingMethodError¶. exception psi4.driver.MissingMethodError(msg)[source]¶; Error called when requested level or theory or derivative level are not; available. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; MissingMethodError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.MissingMethodError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.MissingMethodError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.molden.html:2835,Deployability,update,updated,2835," MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). Molden file for CI/MCSCF computation using NO roots.; Any method returning a CIWavefunction object will work: detci,; fci, casscf, etc. The first two arguments of get_opdm can be; set to n, n where n => 0 selects the root to write out, provided; these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). The following produces an INCORRECT Molden file, because the; molden function needs orbitals in the MO basis (which are internally; converted and written to the Molden file in the AO basis). The correct; usage is given in the next point.; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). Molden file with the natural orbitals of the ground-state 1RDM of a; Post-HF calculation. Note the required transformation of Da (SO->MO).; >>> E, wfn = properties('ccsd', return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; molden. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.molden.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.molden.html:480,Energy Efficiency,energy,energy,480,"﻿. molden. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; molden. molden¶. psi4.driver.molden(wfn, filename=None, density_a=None, density_b=None, dovirtual=None)[source]¶; Function to write wavefunction information in wfn to filename in; molden format. Will write natural orbitals from density (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (str) – destination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). Molden file for CI/MCSCF computation using NO roots.; Any method returning a CIWavefunction object will work: detci,; fci, casscf, etc. The first two arguments of get_opdm can be; set to n, n where n => 0 selects the root to write out, provided; these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). The following produces an INCORRECT Molden file, because the; molden function nee",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.molden.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.molden.html:1300,Energy Efficiency,energy,energy,1300,"tural orbitals from density (MO basis) if supplied.; Warning! Most post-SCF Wavefunctions do not build the density as this is often; much more costly than the energy. In addition, the Wavefunction density attributes; (Da and Db) return the SO density and must be transformed to the MO basis; to use with this function. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files; filename (str) – destination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). Molden file for CI/MCSCF computation using NO roots.; Any method returning a CIWavefunction object will work: detci,; fci, casscf, etc. The first two arguments of get_opdm can be; set to n, n where n => 0 selects the root to write out, provided; these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). The following produces an INCORRECT Molden file, because the; molden function needs orbitals in the MO basis (which are internally; converted and written to the Molden file in the AO basis). The correct; usage is given in the next point.; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). Molden file with the natural orbitals of the ground-state 1RDM",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.molden.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.molden.html:1809,Energy Efficiency,energy,energy,1809,"tination file name for MOLDEN file (optional); density_a (Matrix) – density in the MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). Molden file for CI/MCSCF computation using NO roots.; Any method returning a CIWavefunction object will work: detci,; fci, casscf, etc. The first two arguments of get_opdm can be; set to n, n where n => 0 selects the root to write out, provided; these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). The following produces an INCORRECT Molden file, because the; molden function needs orbitals in the MO basis (which are internally; converted and written to the Molden file in the AO basis). The correct; usage is given in the next point.; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). Molden file with the natural orbitals of the ground-state 1RDM of a; Post-HF calculation. Note the required transformation of Da (SO->MO).; >>> E, wfn = properties('ccsd', return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; molden. © Copyright 2007-2022, The Psi4 Project.; La",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.molden.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.molden.html:2172,Energy Efficiency,energy,energy,2172," MO basis to build alpha NO’s from (optional); density_b (Matrix) – density in the MO basis to build beta NO’s from, assumes restricted if not supplied (optional); dovirtual (bool) – do write all the MOs to the MOLDEN file (true) or discard the unoccupied MOs, not valid for NO’s (false) (optional). Examples:. Molden file with the Kohn-Sham orbitals of a DFT calculation.; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> molden(wfn, 'mycalc.molden'). Molden file for CI/MCSCF computation using NO roots.; Any method returning a CIWavefunction object will work: detci,; fci, casscf, etc. The first two arguments of get_opdm can be; set to n, n where n => 0 selects the root to write out, provided; these roots were computed, see NUM_ROOTS. The; third argument controls the spin (""A"", ""B"" or ""SUM"") and the final; boolean option determines whether inactive orbitals are included.; >>> E, wfn = energy('detci', return_wfn=True); >>> molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)). The following produces an INCORRECT Molden file, because the; molden function needs orbitals in the MO basis (which are internally; converted and written to the Molden file in the AO basis). The correct; usage is given in the next point.; >>> E, wfn = energy('ccsd', return_wfn=True); >>> molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). Molden file with the natural orbitals of the ground-state 1RDM of a; Post-HF calculation. Note the required transformation of Da (SO->MO).; >>> E, wfn = properties('ccsd', return_wfn=True); >>> Da_so = wfn.Da(); >>> SCa = core.doublet(wfn.S(), wfn.Ca(), False, False); >>> Da_mo = core.triplet(SCa, Da_so, SCa, True, False, False); >>> molden(wfn, 'ccsd_no.molden', density_a=Da_mo). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; molden. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.molden.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.molden.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.molecule_get_attr.html:476,Deployability,update,updated,476,"﻿. molecule_get_attr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; molecule_get_attr. molecule_get_attr¶. psi4.driver.molecule_get_attr(self, name)[source]¶; Function to redefine __getattr__ method of molecule class. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; molecule_get_attr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.molecule_get_attr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.molecule_get_attr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.molecule_set_attr.html:483,Deployability,update,updated,483,"﻿. molecule_set_attr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; molecule_set_attr. molecule_set_attr¶. psi4.driver.molecule_set_attr(self, name, value)[source]¶; Function to redefine __setattr__ method of molecule class. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; molecule_set_attr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.molecule_set_attr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.molecule_set_attr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.oeprop.html:412,Availability,Avail,Available,412,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. oeprop¶. psi4.driver.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties; args (List[str]) – Arbitrary-number of properties to be computed from wfn.; See Available One-Electron Properties.; title (str) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.oeprop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.oeprop.html:847,Deployability,update,updated,847,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. oeprop¶. psi4.driver.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties; args (List[str]) – Arbitrary-number of properties to be computed from wfn.; See Available One-Electron Properties.; title (str) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.oeprop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.oeprop.html:566,Energy Efficiency,energy,energy,566,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. oeprop¶. psi4.driver.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties; args (List[str]) – Arbitrary-number of properties to be computed from wfn.; See Available One-Electron Properties.; title (str) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.oeprop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:2161,Availability,avail,available,2161,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:2582,Availability,avail,available,2582," optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; couple",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:16981,Deployability,update,updated,16981,"e; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:252,Energy Efficiency,energy,energy,252,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python fun",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:329,Energy Efficiency,energy,energy,329,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python fun",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:518,Energy Efficiency,ENERGY,ENERGY,518,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python fun",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:729,Energy Efficiency,energy,energy,729,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python fun",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:1002,Energy Efficiency,energy,energy,1002,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python fun",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:1766,Energy Efficiency,energy,energy,1766,"he target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:1893,Energy Efficiency,energy,energy,1893,"to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; densit",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:2121,Energy Efficiency,energy,energy,2121,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:2669,Energy Efficiency,energy,energy,2669," not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and dou",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:16403,Energy Efficiency,energy,energy,16403,"e; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:16465,Energy Efficiency,energy,energy,16465,"e; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:498,Modifiability,variab,variables,498,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python fun",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:8002,Modifiability,Parameteriz,Parameterized,8002,"d3bjatm. hcth120-d3zero2b. hcth120-d3zeroatm. hcth147; HCTH147 GGA Exchange-Correlation Functional. hcth407; HCTH407 GGA Exchange-Correlation Functional. hcth407-d3bj2b. hcth407-d3bjatm. hcth407-d3zero2b. hcth407-d3zeroatm. hcth407p; HCTH407P GGA Exchange-Correlation Functional. hcth93; HCTH93 GGA Exchange-Correlation Functional. hcthp14; HCTHP14 GGA Exchange-Correlation Functional. hcthp76; HCTHP76 GGA Exchange-Correlation Functional. hf; Hartree–Fock theory. hf+d. hf-d3bj2b. hf-d3bjatm. hf-d3mbj2b. hf-d3mbjatm. hf-d3mzero2b. hf-d3mzeroatm. hf-d3zero2b. hf-d3zeroatm. hf-nl; Hartree–Fock theory. hf3c; Hartree Fock based 3C composite method with minimal basis set, gCP and D3(BJ). hpbeint; HPBEINT Hyb-GGA Exchange-Correlation Functional. kmlyp; KMLYP Hyb-GGA Exchange-Correlation Functional. ksdt; KSDT Exchange-Correlation Functional. kt2; KT2 GGA Exchange-Correlation Functional. lda0; LDA0 Exchange-Correlation Functional. m05; M05 Meta-GGA XC Functional. m05-2x; Heavily Parameterized Hybrid M05-2X Meta-GGA XC Functional. m05-2x-d3zero2b. m05-2x-d3zeroatm. m05-d3zero2b. m05-d3zeroatm. m06; M06 Meta-GGA XC Functional. m06-2x; Hybrid M06-2X Meta-GGA XC Functional. m06-2x-d3zero2b. m06-2x-d3zeroatm. m06-d3zero2b. m06-d3zeroatm. m06-hf; Minnesota M06-HF Hybrid XC Functional. m06-hf-d3zero2b. m06-hf-d3zeroatm. m06-l; M06-L Meta-GGA XC Functional. m06-l-d3zero2b. m06-l-d3zeroatm. m08-hx; Minnesota M08-HX Hybrid XC Functional. m08-hx-d3zero2b. m08-hx-d3zeroatm. m08-so; Minnesota M08-SO Hybrid XC Functional. m11-l; M11-L Meta-GGA XC Functional. m11-l-d3bj2b. m11-l-d3bjatm. m11-l-d3zero2b. m11-l-d3zeroatm. mb3lyp-rc04; MB3LYP-RC04 Hyb-GGA Exchange-Correlation Functional. mgga_ms0; MGGA_MS0 Meta-GGA XC Functional. mgga_ms1; MGGA_MS1 Meta-GGA XC Functional. mgga_ms2; MGGA_MS2 Meta-GGA XC Functional. mgga_ms2h; MGGA_MS2h Hybrid Meta-GGA XC Functional. mgga_mvs; MGGA_MVS Meta-GGA XC Functional. mgga_mvsh; MGGA_MV2h Hybrid Meta-GGA XC Functional. mn12-l; MN12-L Meta-GGA XC Functiona",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:167,Performance,perform,perform,167,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python fun",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:186,Performance,optimiz,optimization,186,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python fun",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:262,Performance,optimiz,optimized,262,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python fun",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:401,Performance,Optimiz,OptimizationConvergenceError,401,"﻿. opt. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. opt¶. psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python fun",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:1207,Performance,optimiz,optimization,1207," psi4.driver.opt(name, **kwargs)¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || '",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:1307,Performance,optimiz,optimization,1307,"efunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:1378,Performance,optimiz,optimizer,1378,"efunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:1491,Performance,optimiz,optimizers,1491,"URRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being c",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:1562,Performance,optimiz,optimizer,1562,"URRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being c",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:1590,Performance,optimiz,optimization,1590,"URRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being c",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:1821,Performance,perform,performed,1821,"he target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:1915,Performance,perform,performs,1915,"to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; densit",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:2194,Performance,optimiz,optimization,2194,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:2216,Performance,perform,performed,2216,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:2321,Performance,perform,perform,2321,"to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-op",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:2371,Performance,optimiz,optimization,2371,"to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-op",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:2394,Performance,Optimiz,Optimizations,2394,"he GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital opt",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:2629,Performance,Optimiz,Optimizations,2629," not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and dou",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:2748,Performance,optimiz,optimizations,2748," \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:3164,Performance,optimiz,optimized,3164,nce; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbj,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:3244,Performance,optimiz,optimized,3244,c.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-n,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:3325,Performance,optimiz,optimized,3325,rm a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Functional. b3lyp,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:3377,Performance,optimiz,optimized,3377,arning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Functional. b3lyp5; B3LYP5 Hyb-GGA Exchange-Correlation Functional. b3lyps; ,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:3465,Performance,optimiz,optimized,3465,ms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Functional. b3lyp5; B3LYP5 Hyb-GGA Exchange-Correlation Functional. b3lyps; B3LYPs Hyb-GGA Exchange-Correlation Functional. b3p86; B3P86 Hyb-GGA Exchange-Correlatio,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:15750,Performance,optimiz,optimization,15750,"A Exchange-Correlation Functional. x3lyp-d3bj2b. x3lyp-d3bjatm. x3lyp-d3zero2b. x3lyp-d3zeroatm. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj2b. xlyp-d3bjatm. xlyp-d3zero2b. xlyp-d3zeroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:15768,Performance,optimiz,optimize,15768,"A Exchange-Correlation Functional. x3lyp-d3bj2b. x3lyp-d3bjatm. x3lyp-d3zero2b. x3lyp-d3zeroatm. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj2b. xlyp-d3bjatm. xlyp-d3zero2b. xlyp-d3zeroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:15816,Performance,optimiz,optimization,15816,"1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj2b. xlyp-d3bjatm. xlyp-d3zero2b. xlyp-d3zeroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:15977,Performance,perform,perform,15977,"eroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 0",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:16024,Performance,optimiz,optimize,16024,"eroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 0",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:16085,Performance,perform,perform,16085,"e; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:16278,Performance,optimiz,optimize,16278,"e; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:16431,Performance,optimiz,optimization,16431,"e; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:16515,Performance,optimiz,optimization,16515,"e; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:16602,Performance,optimiz,optimization,16602,"e; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:16636,Performance,optimiz,optimize,16636,"e; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:16676,Performance,Optimiz,OptimizationConvergenceError,16676,"e; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; opt. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:1869,Security,access,accesses,1869,"to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; densit",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html:2352,Usability,guid,guide,2352,"to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-op",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.opt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.opt.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html:290,Availability,Error,Error,290,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html:993,Deployability,update,updated,993,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html:389,Integrability,rout,routine,389,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html:489,Integrability,rout,routine,489,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html:572,Integrability,message,message,572,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html:680,Integrability,rout,routine,680,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html:3,Performance,Optimiz,OptimizationConvergenceError,3,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html:135,Performance,Optimiz,OptimizationConvergenceError,135,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html:165,Performance,Optimiz,OptimizationConvergenceError,165,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html:218,Performance,Optimiz,OptimizationConvergenceError,218,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html:330,Performance,optimiz,optimizer,330,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html:429,Performance,optimiz,optimization,429,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html:916,Performance,Optimiz,OptimizationConvergenceError,916,"﻿. OptimizationConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. OptimizationConvergenceError¶. exception psi4.driver.OptimizationConvergenceError(eqn_description, iteration, wfn)[source]¶; Error called for problems with geometry optimizer. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., geometry optimization).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptimizationConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.OptimizationConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:2189,Availability,avail,available,2189,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:2610,Availability,avail,available,2610," optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; couple",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:17014,Deployability,update,updated,17014,"lls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:280,Energy Efficiency,energy,energy,280,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:357,Energy Efficiency,energy,energy,357,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:546,Energy Efficiency,ENERGY,ENERGY,546,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:757,Energy Efficiency,energy,energy,757,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:1030,Energy Efficiency,energy,energy,1030,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:1794,Energy Efficiency,energy,energy,1794,"he target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:1921,Energy Efficiency,energy,energy,1921,"to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; densit",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:2149,Energy Efficiency,energy,energy,2149,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:2697,Energy Efficiency,energy,energy,2697," not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and dou",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:16431,Energy Efficiency,energy,energy,16431,"lls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:16493,Energy Efficiency,energy,energy,16493,"lls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:526,Modifiability,variab,variables,526,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:8030,Modifiability,Parameteriz,Parameterized,8030,"d3bjatm. hcth120-d3zero2b. hcth120-d3zeroatm. hcth147; HCTH147 GGA Exchange-Correlation Functional. hcth407; HCTH407 GGA Exchange-Correlation Functional. hcth407-d3bj2b. hcth407-d3bjatm. hcth407-d3zero2b. hcth407-d3zeroatm. hcth407p; HCTH407P GGA Exchange-Correlation Functional. hcth93; HCTH93 GGA Exchange-Correlation Functional. hcthp14; HCTHP14 GGA Exchange-Correlation Functional. hcthp76; HCTHP76 GGA Exchange-Correlation Functional. hf; Hartree–Fock theory. hf+d. hf-d3bj2b. hf-d3bjatm. hf-d3mbj2b. hf-d3mbjatm. hf-d3mzero2b. hf-d3mzeroatm. hf-d3zero2b. hf-d3zeroatm. hf-nl; Hartree–Fock theory. hf3c; Hartree Fock based 3C composite method with minimal basis set, gCP and D3(BJ). hpbeint; HPBEINT Hyb-GGA Exchange-Correlation Functional. kmlyp; KMLYP Hyb-GGA Exchange-Correlation Functional. ksdt; KSDT Exchange-Correlation Functional. kt2; KT2 GGA Exchange-Correlation Functional. lda0; LDA0 Exchange-Correlation Functional. m05; M05 Meta-GGA XC Functional. m05-2x; Heavily Parameterized Hybrid M05-2X Meta-GGA XC Functional. m05-2x-d3zero2b. m05-2x-d3zeroatm. m05-d3zero2b. m05-d3zeroatm. m06; M06 Meta-GGA XC Functional. m06-2x; Hybrid M06-2X Meta-GGA XC Functional. m06-2x-d3zero2b. m06-2x-d3zeroatm. m06-d3zero2b. m06-d3zeroatm. m06-hf; Minnesota M06-HF Hybrid XC Functional. m06-hf-d3zero2b. m06-hf-d3zeroatm. m06-l; M06-L Meta-GGA XC Functional. m06-l-d3zero2b. m06-l-d3zeroatm. m08-hx; Minnesota M08-HX Hybrid XC Functional. m08-hx-d3zero2b. m08-hx-d3zeroatm. m08-so; Minnesota M08-SO Hybrid XC Functional. m11-l; M11-L Meta-GGA XC Functional. m11-l-d3bj2b. m11-l-d3bjatm. m11-l-d3zero2b. m11-l-d3zeroatm. mb3lyp-rc04; MB3LYP-RC04 Hyb-GGA Exchange-Correlation Functional. mgga_ms0; MGGA_MS0 Meta-GGA XC Functional. mgga_ms1; MGGA_MS1 Meta-GGA XC Functional. mgga_ms2; MGGA_MS2 Meta-GGA XC Functional. mgga_ms2h; MGGA_MS2h Hybrid Meta-GGA XC Functional. mgga_mvs; MGGA_MVS Meta-GGA XC Functional. mgga_mvsh; MGGA_MV2h Hybrid Meta-GGA XC Functional. mn12-l; MN12-L Meta-GGA XC Functiona",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:3,Performance,optimiz,optimize,3,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:115,Performance,optimiz,optimize,115,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:125,Performance,optimiz,optimize,125,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:148,Performance,optimiz,optimize,148,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:195,Performance,perform,perform,195,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:214,Performance,optimiz,optimization,214,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:290,Performance,optimiz,optimized,290,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:429,Performance,Optimiz,OptimizationConvergenceError,429,"﻿. optimize. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. optimize¶. psi4.driver.optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:1235,Performance,optimiz,optimization,1235,"optimize(name, **kwargs)[source]¶; Function to perform a geometry optimization. Aliases:; opt(). Returns:; float – Total electronic energy of optimized structure in Hartrees. Returns:; (float, Wavefunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || '",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:1335,Performance,optimiz,optimization,1335,"efunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:1406,Performance,optimiz,optimizer,1406,"efunction) – energy and wavefunction when return_wfn specified. Raises:; psi4.driver.OptimizationConvergenceError if GEOM_MAXITER exceeded without reaching geometry convergence. PSI variables:. CURRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:1519,Performance,optimiz,optimizers,1519,"URRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being c",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:1590,Performance,optimiz,optimizer,1590,"URRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being c",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:1618,Performance,optimiz,optimization,1618,"URRENT ENERGY. Parameters:. name (str) – 'scf' || 'mp2' || 'ci5' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the database. May be any valid argument to; psi4.driver.energy(). molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being c",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:1849,Performance,perform,performed,1849,"he target molecule, if not the last molecule defined. return_wfn (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:1943,Performance,perform,performs,1943,"to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; densit",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:2222,Performance,optimiz,optimization,2222,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:2244,Performance,perform,performed,2244,"tries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:2349,Performance,perform,perform,2349,"to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-op",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:2399,Performance,optimiz,optimization,2399,"to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-op",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:2422,Performance,Optimiz,Optimizations,2422,"he GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital opt",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:2657,Performance,Optimiz,Optimizations,2657," not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and dou",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:2776,Performance,optimiz,optimizations,2776," \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:3192,Performance,optimiz,optimized,3192,nce; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbj,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:3272,Performance,optimiz,optimized,3272,c.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-n,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:3353,Performance,optimiz,optimized,3353,rm a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Functional. b3lyp,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:3405,Performance,optimiz,optimized,3405,arning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Functional. b3lyp5; B3LYP5 Hyb-GGA Exchange-Correlation Functional. b3lyps; ,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:3493,Performance,optimiz,optimized,3493,ms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-optimized MP2.5 [manual] [details]. oremp2; orbital-optimized REMP2 [manual] [details]. lccd; Linear CCD [manual] [details]. olccd; orbital optimized LCCD [manual] [details]. cc2; approximate coupled cluster singles and doubles (CC2) [manual] [details]. ccd; coupled cluster doubles (CCD) [manual] [details]. ccsd; coupled cluster singles and doubles (CCSD) [manual] [details]. ccsd(t); CCSD with perturbative triples (CCSD(T)) [manual] [details]. eom-ccsd; equation of motion (EOM) CCSD [manual]. name; calls method DFT [manual]. b1lyp; B1LYP Hyb-GGA Exchange-Correlation Functional. b1lyp-d3bj2b. b1lyp-d3bjatm. b1lyp-d3zero2b. b1lyp-d3zeroatm. b1pw91; B1PW91 Hyb-GGA Exchange-Correlation Functional. b1wc; B1WC Hyb-GGA Exchange-Correlation Functional. b3lyp; B3LYP Hyb-GGA Exchange-Correlation Functional. b3lyp-d3bj2b. b3lyp-d3bjatm. b3lyp-d3mbj2b. b3lyp-d3mbjatm. b3lyp-d3mzero2b. b3lyp-d3mzeroatm. b3lyp-d3zero2b. b3lyp-d3zeroatm. b3lyp-nl; B3LYP-nl Hyb-GGA Exchange-Correlation Functional. b3lyp5; B3LYP5 Hyb-GGA Exchange-Correlation Functional. b3lyps; B3LYPs Hyb-GGA Exchange-Correlation Functional. b3p86; B3P86 Hyb-GGA Exchange-Correlatio,MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:15778,Performance,optimiz,optimization,15778,"A Exchange-Correlation Functional. x3lyp-d3bj2b. x3lyp-d3bjatm. x3lyp-d3zero2b. x3lyp-d3zeroatm. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj2b. xlyp-d3bjatm. xlyp-d3zero2b. xlyp-d3zeroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:15796,Performance,optimiz,optimize,15796,"A Exchange-Correlation Functional. x3lyp-d3bj2b. x3lyp-d3bjatm. x3lyp-d3zero2b. x3lyp-d3zeroatm. xb1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj2b. xlyp-d3bjatm. xlyp-d3zero2b. xlyp-d3zeroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:15844,Performance,optimiz,optimization,15844,"1k; XB1K Hyb-GGA Exchange-Correlation Functional. xlyp; XLYP GGA Exchange-Correlation Functional. xlyp-d3bj2b. xlyp-d3bjatm. xlyp-d3zero2b. xlyp-d3zeroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:16005,Performance,perform,perform,16005,"eroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesd",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:16052,Performance,optimiz,optimize,16052,"eroatm. zlp; ZLP GGA Exchange-Correlation Functional. name; calls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesd",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:16113,Performance,perform,perform,16113,"lls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:16306,Performance,optimiz,optimize,16306,"lls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:16459,Performance,optimiz,optimization,16459,"lls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:16543,Performance,optimiz,optimization,16543,"lls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:16630,Performance,optimiz,optimization,16630,"lls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:16664,Performance,optimiz,optimize,16664,"lls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:16704,Performance,Optimiz,OptimizationConvergenceError,16704,"lls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:16957,Performance,optimiz,optimize,16957,"lls method in Stanton and Gauss’s CFOUR program [manual]. c4-scf; Hartree–Fock (HF). c4-mp2; 2nd-order Møller–Plesset perturbation theory (non-density-fitting) (MP2). c4-mp3; 3rd-order Møller–Plesset perturbation theory (MP3). c4-mp4(sdq); 4th-order MP perturbation theory (MP4) less triples. c4-mp4; full MP4. c4-cc2; approximate coupled cluster singles and doubles (CC2). c4-ccsd; coupled cluster singles and doubles (CCSD). c4-cc3; approximate CC singles, doubles, and triples (CC3). c4-ccsd(t); CCSD with perturbative triples (CCSD(T)). c4-ccsdt; coupled cluster singles, doubles, and triples (CCSDT). cfour; expert full control over cfour program. Examples:. >>> # [1] Analytic hf optimization; >>> optimize('hf'). >>> # [2] Finite difference mp5 optimization with gradient; >>> # printed to output file; >>> e, wfn = opt('mp5', return_wfn='yes'); >>> wfn.gradient().print_out(). >>> # [3] Can automatically perform complete basis set extrapolations; >>> optimize('MP2/cc-pV([D,T]+d)Z'). >>> # [4] Can automatically perform delta corrections that include extrapolations; >>> # even with a user-defined extrapolation formula. See sample inputs named; >>> # cbs-xtpl* for more examples of this input style; >>> optimize(""MP2/aug-cc-pv([d,t]+d)z + d:ccsd(t)/cc-pvdz"", corl_scheme=myxtplfn_2). >>> # [5] Get info like geometry, gradient, energy back after an; >>> # optimization fails. Note that the energy and gradient; >>> # correspond to the last optimization cycle, whereas the; >>> # geometry (by default) is the anticipated *next* optimization step.; >>> try:; >>> optimize('hf/cc-pvtz'); >>> except psi4.OptimizationConvergenceError as ex:; >>> next_geom_coords_as_numpy_array = np.asarray(ex.wfn.molecule().geometry()). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:1897,Security,access,accesses,1897,"to additionally return the Wavefunction; calculation result as the second element (after float energy) of a tuple. return_history (boolean) – 'on' || \(\Rightarrow\) 'off' \(\Leftarrow\); Indicate to additionally return dictionary of lists of geometries,; energies, and gradients at each step in the optimization. engine (str) – \(\Rightarrow\) 'optking' \(\Leftarrow\) || 'geometric'; Indicates the optimization engine to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; densit",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html:2380,Usability,guid,guide,2380,"to use, which can be either Psi4’s; native Optking optimizer or the GeomeTRIC program. optimizer_keywords (dict) – Extra options passed to the GeomeTRIC or optking optimizers; Indicates additional options to be passed to the GeomeTRIC optimizer if; chosen as the optimization engine. Alternatively, can be used to set optking options; that are not currently recognized by Psi4. func (function) – \(\Rightarrow\) gradient \(\Leftarrow\) || energy || cbs; Indicates the type of calculation to be performed on the molecule.; The default dertype accesses 'gradient' or 'energy', while; 'cbs' performs a multistage finite difference calculation.; If a nested series of python functions is intended (see Function Intercalls),; use keyword opt_func instead of func. dertype (dertype) – 'gradient' || 'energy'; Indicates whether analytic (if available) or finite difference; optimization is to be performed. hessian_with (str) – 'scf' || 'mp2' || etc.; Indicates the computational method with which to perform a hessian; analysis to guide the geometry optimization. Warning; Optimizations where the molecule is specified in Z-matrix format; with dummy atoms will result in the geometry being converted to a Cartesian representation. Note; Analytic gradients area available for all methods in the table; below. Optimizations with other methods in the energy table proceed; by finite differences. name; calls method. efp; efp-only optimizations. scf; Hartree–Fock (HF) or density functional theory (DFT) [manual] [details]. hf; HF self consistent field (SCF) [manual] [details]. dct; density cumulant (functional) theory [manual]. mp2; 2nd-order Møller–Plesset perturbation theory (MP2) [manual] [details]. mp3; 3rd-order Møller–Plesset perturbation theory (MP3) [manual] [details]. mp2.5; average of MP2 and MP3 [manual] [details]. omp2; orbital-optimized second-order MP perturbation theory [manual] [details]. omp3; orbital-optimized third-order MP perturbation theory [manual] [details]. omp2.5; orbital-op",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize_geometric.html:426,Deployability,update,updated,426,"﻿. optimize_geometric. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize_geometric. optimize_geometric¶. psi4.driver.optimize_geometric(name, **kwargs)[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; optimize_geometric. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.optimize_geometric.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.optimize_geometric.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.all_casings.html:563,Deployability,update,updated,563,"﻿. all_casings. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; all_casings. all_casings¶. psi4.driver.p4util.all_casings(input_string)[source]¶; Return a generator of all lettercase permutations of input_string. Parameters:; input_string (str) – String of which to permute the case. Return type:; Iterator[str]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; all_casings. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.all_casings.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.all_casings.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.array_to_matrix.html:1577,Deployability,update,updated,1577,"﻿. array_to_matrix. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; array_to_matrix. array_to_matrix¶. psi4.driver.p4util.array_to_matrix(self, arr, name='New Matrix', dim1=None, dim2=None)[source]¶; Converts a NumPy array or list of; NumPy arrays into a PSI4 Matrix or; Vector (irrepped if list). Parameters:. self (Union[Matrix, Vector]) – Matrix or Vector class.; arr (Union[ndarray, List[ndarray]]) – NumPy array or list of arrays to use as the data for a new; Matrix or Vector.; name (str) – Name to give the new Matrix.; dim1 (Union[List, Tuple, Dimension, None]) – If a single dense NumPy array is given, a dimension can be supplied to; apply irreps to this array. Note that this discards all extra information; given in the matrix besides the diagonal blocks determined by the passed; dimension.; dim2 (Optional[Dimension]) – Same as dim1 only if using a Dimension object. Returns:; Returns the given (self) Psi4 object. Return type:; Matrix or Vector. Notes; This is a generalized function to convert a NumPy array to a Psi4 object; Examples; >>> data = np.random.rand(20,1); >>> vector = psi4.core.Matrix.from_array(data). >>> irrep_data = [np.random.rand(2, 2), np.empty(shape=(0,3)), np.random.rand(4, 4)]; >>> matrix = psi4.core.Matrix.from_array(irrep_data); >>> print(matrix.rowdim().to_tuple()); (2, 0, 4). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; array_to_matrix. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.array_to_matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.array_to_matrix.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.banner.html:844,Deployability,update,updated,844,"﻿. banner. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; banner. banner¶. psi4.driver.p4util.banner(text, type=1, width=35, strNotOutfile=False)[source]¶; Format text into a banner style and print or return it. Parameters:. text (str) – String to be emphasized.; type (int) – Style 1 has minimum three-line height. Style 2 has minimum one-light; height.; width (int) – Minimum length of banner string.; strNotOutfile (bool) – Controls mode of return. Return type:; Optional[str]. Returns:. str – If strNotOutfile is True, return string.; None – If strNotOutfile is False, print it to output file. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; banner. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.banner.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.banner.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.basis_helper.html:1065,Deployability,update,updated,1065,"﻿. basis_helper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. basis_helper¶. psi4.driver.p4util.basis_helper(block, name='', key='BASIS', set_option=True)[source]¶; Helper to specify a custom basis set in PsiAPI mode.; This function forms a basis specification function from block; and associates it with keyword key under handle name. Registers; the basis spec with Psi4 so that it can be applied again to future; molecules. For usage, see mints2, mints9, and; cc54 test cases. Parameters:. block (str) – Text that goes in a PSIthon basis {...} block.; name (str) – Name label to associated with basis specified by block.; key (str) – Basis keyword specified by block.; set_option (bool) – When True, execute the equivalent of set key name or set_option({key: name}). When False, skip execution. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.basis_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.basis_helper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.basis_helper.html:538,Testability,test,test,538,"﻿. basis_helper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. basis_helper¶. psi4.driver.p4util.basis_helper(block, name='', key='BASIS', set_option=True)[source]¶; Helper to specify a custom basis set in PsiAPI mode.; This function forms a basis specification function from block; and associates it with keyword key under handle name. Registers; the basis spec with Psi4 so that it can be applied again to future; molecules. For usage, see mints2, mints9, and; cc54 test cases. Parameters:. block (str) – Text that goes in a PSIthon basis {...} block.; name (str) – Name label to associated with basis specified by block.; key (str) – Basis keyword specified by block.; set_option (bool) – When True, execute the equivalent of set key name or set_option({key: name}). When False, skip execution. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; basis_helper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.basis_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.basis_helper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.block_diagonal_array.html:634,Deployability,update,updated,634,"﻿. block_diagonal_array. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; block_diagonal_array. block_diagonal_array¶. psi4.driver.p4util.block_diagonal_array(*args)[source]¶; Convert square NumPy array to a single block diagonal array.; Mimic of SciPy’s scipy.linalg.block_diag(). Parameters:; args (List[ndarray]) – Arbitrary number of square arrays. Return type:; ndarray. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; block_diagonal_array. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.block_diagonal_array.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.block_diagonal_array.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.cg_solver.html:543,Availability,mask,mask,543,"﻿. cg_solver. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cg_solver. cg_solver¶. psi4.driver.p4util.cg_solver(rhs_vec, hx_function, preconditioner, guess=None, printer=None, printlvl=1, maxiter=20, rcond=1e-06)[source]¶; Solves the \(Ax = b\) linear equations via Conjugate Gradient. The A matrix must be a hermitian, positive definite matrix. Parameters:. rhs_vec (List[Matrix]) – The RHS vector in the Ax=b equation.; hx_function (Callable) – Takes in a list of Matrix objects and a mask of active indices. Returns the Hessian-vector product.; preconditioner (Callable) – Takes in a list of Matrix objects and a mask of active indices. Returns the preconditioned value.; guess (Optional[List[Matrix]]) – Starting vectors. If None, use a preconditioner (rhs) guess; printer (Optional[Callable]) – Takes in a list of current x and residual vectors and provides a print function. This function can also; return a value that represents the current residual.; printlvl (int) – The level of printing provided by this function.; maxiter (int) – The maximum number of iterations this function will take.; rcond (float) – The residual norm for convergence. Returns:; ret – Solved x vectors and r vectors. Return type:; List[Matrix]. Notes; This is a generalized cg solver that can also take advantage of solving multiple RHS’s simultaneously when; it is advantageous to do so. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cg_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.cg_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.cg_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.cg_solver.html:672,Availability,mask,mask,672,"﻿. cg_solver. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cg_solver. cg_solver¶. psi4.driver.p4util.cg_solver(rhs_vec, hx_function, preconditioner, guess=None, printer=None, printlvl=1, maxiter=20, rcond=1e-06)[source]¶; Solves the \(Ax = b\) linear equations via Conjugate Gradient. The A matrix must be a hermitian, positive definite matrix. Parameters:. rhs_vec (List[Matrix]) – The RHS vector in the Ax=b equation.; hx_function (Callable) – Takes in a list of Matrix objects and a mask of active indices. Returns the Hessian-vector product.; preconditioner (Callable) – Takes in a list of Matrix objects and a mask of active indices. Returns the preconditioned value.; guess (Optional[List[Matrix]]) – Starting vectors. If None, use a preconditioner (rhs) guess; printer (Optional[Callable]) – Takes in a list of current x and residual vectors and provides a print function. This function can also; return a value that represents the current residual.; printlvl (int) – The level of printing provided by this function.; maxiter (int) – The maximum number of iterations this function will take.; rcond (float) – The residual norm for convergence. Returns:; ret – Solved x vectors and r vectors. Return type:; List[Matrix]. Notes; This is a generalized cg solver that can also take advantage of solving multiple RHS’s simultaneously when; it is advantageous to do so. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cg_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.cg_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.cg_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.cg_solver.html:1622,Deployability,update,updated,1622,"﻿. cg_solver. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cg_solver. cg_solver¶. psi4.driver.p4util.cg_solver(rhs_vec, hx_function, preconditioner, guess=None, printer=None, printlvl=1, maxiter=20, rcond=1e-06)[source]¶; Solves the \(Ax = b\) linear equations via Conjugate Gradient. The A matrix must be a hermitian, positive definite matrix. Parameters:. rhs_vec (List[Matrix]) – The RHS vector in the Ax=b equation.; hx_function (Callable) – Takes in a list of Matrix objects and a mask of active indices. Returns the Hessian-vector product.; preconditioner (Callable) – Takes in a list of Matrix objects and a mask of active indices. Returns the preconditioned value.; guess (Optional[List[Matrix]]) – Starting vectors. If None, use a preconditioner (rhs) guess; printer (Optional[Callable]) – Takes in a list of current x and residual vectors and provides a print function. This function can also; return a value that represents the current residual.; printlvl (int) – The level of printing provided by this function.; maxiter (int) – The maximum number of iterations this function will take.; rcond (float) – The residual norm for convergence. Returns:; ret – Solved x vectors and r vectors. Return type:; List[Matrix]. Notes; This is a generalized cg solver that can also take advantage of solving multiple RHS’s simultaneously when; it is advantageous to do so. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cg_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.cg_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.cg_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html:307,Availability,checkpoint,checkpoint,307,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html:537,Availability,avail,available,537,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html:1074,Availability,toler,tolerance,1074,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html:1406,Availability,error,error,1406,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html:1624,Deployability,update,updated,1624,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html:1412,Integrability,message,messages,1412,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html:687,Testability,log,logical,687,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html:738,Testability,test,test,738,"﻿. compare_fchkfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. compare_fchkfiles¶. psi4.driver.p4util.compare_fchkfiles(expected, computed, atol_exponent, label)[source]¶; Comparison function for output data in FCHK (formatted checkpoint) file; format. Compares many fields including number of electrons, highest angular; momentum, basis set exponents, densities, final gradient.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; An older format description can be found here; http://wild.life.nctu.edu.tw/~jsyu/compchem/g09/g09ur/f_formchk.htm; It lists more fields (logical, character) that are not included in this; test function. They should be covered by the string comparison.; This function is only meant to work with PSI4’s FCHK files. Parameters:. expected (str) – Path to reference FCHK file against which computed is compared.; computed (str) – Path to input FCHK file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fchkfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fchkfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html:1213,Deployability,update,updated,1213,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html:642,Energy Efficiency,ENERGY,ENERGY,642,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html:669,Energy Efficiency,energy,energy,669,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html:691,Energy Efficiency,ENERGY,ENERGY,691,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html:718,Energy Efficiency,energy,energy,718,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html:737,Energy Efficiency,ENERGY,ENERGY,737,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html:757,Energy Efficiency,energy,energy,757,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html:782,Energy Efficiency,ENERGY,ENERGY,782,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html:808,Energy Efficiency,energy,energy,808,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html:1006,Testability,test,test,1006,"﻿. compare_fcidumps. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. compare_fcidumps¶. psi4.driver.p4util.compare_fcidumps(expected, computed, label)[source]¶; Comparison function for FCIDUMP files.; Compares the first six below, then computes energies from MO integrals and compares the last four. ‘norb’ : number of basis functions; ‘nelec’ : number of electrons; ‘ms2’ : spin polarization of the system; ‘isym’ : symmetry of state (if present in FCIDUMP); ‘orbsym’ : list of symmetry labels of each orbital; ‘uhf’ : whether restricted or unrestricted; ‘ONE-ELECTRON ENERGY’ : SCF one-electron energy; ‘TWO-ELECTRON ENERGY’ : SCF two-electron energy; ‘SCF TOTAL ENERGY’ : SCF total energy; ‘MP2 CORRELATION ENERGY’ : MP2 correlation energy. Parameters:. expected (str) – Reference FCIDUMP file against which computed is compared.; computed (str) – Input FCIDUMP file to compare against expected.; label (str) – string labeling the test. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_fcidumps. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_fcidumps.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_moldenfiles.html:507,Availability,avail,available,507,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.p4util.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_moldenfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_moldenfiles.html:817,Availability,toler,tolerance,817,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.p4util.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_moldenfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_moldenfiles.html:1149,Availability,error,error,1149,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.p4util.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_moldenfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_moldenfiles.html:1369,Deployability,update,updated,1369,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.p4util.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_moldenfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_moldenfiles.html:1155,Integrability,message,messages,1155,"﻿. compare_moldenfiles. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. compare_moldenfiles¶. psi4.driver.p4util.compare_moldenfiles(expected, computed, atol_exponent=1e-07, label='Compare Molden')[source]¶; Comparison function for output data in Molden file format.; Compares many fields including geometry, basis set, occupations, symmetries, energies.; Note only Psi4-style signature ((expected, computed, atol_exponent, label)) available.; A format description is found https://www3.cmbi.umcn.nl/molden/molden_format.html. Parameters:. expected (str) – Path to reference Molden file against which computed is compared.; computed (str) – Path to input Molden file to compare against expected.; atol_exponent (Union[int, float]) – Absolute tolerance for high accuracy fields – 1.e-8 or 1.e-9 is suitable.; Values less than one are taken literally; one or greater taken as decimal digits for comparison.; So 1 means atol=0.1 and 2 means atol=0.01 but 0.04 means atol=0.04; Note that the largest expressable processed atol will be ~0.99.; label (str) – Label for passed and error messages. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; compare_moldenfiles. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.compare_moldenfiles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.compare_moldenfiles.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.copy_file_from_scratch.html:1311,Deployability,update,updated,1311,"﻿. copy_file_from_scratch. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_from_scratch. copy_file_from_scratch¶. psi4.driver.p4util.copy_file_from_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Move a file out of scratch following the naming convention. Parameters:. filename (str) – Full path to target file.; prefix (str) – Computation prefix, usually ‘psi’.; namespace (str) – Context namespace, usually molecule name.; unit (int) – Unit number, e.g. 32; move (bool) – Whether to copy (default) or move?. Examples; >>> # Assume PID is 12345 and SCRATCH is /scratch/parrish/; >>> copy_file_to_scratch('temp', 'psi', 'h2o', 32):; Out[1]: -cp /scratch/parrish/psi.12345.h2o.32 .temp; >>> copy_file_to_scratch('/tmp/temp', 'psi', 'h2o', 32):; Out[2]: -cp /scratch/parrish/psi.12345.h2o.32 /tmp/temp; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32):; Out[3]: -cp /scratch/parrish/psi.12345.32 /tmp/temp; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32, True):; Out[4]: -mv /scratch/parrish/psi.12345.32 /tmp/temp. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_from_scratch. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.copy_file_from_scratch.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.copy_file_from_scratch.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.copy_file_to_scratch.html:1294,Deployability,update,updated,1294,"﻿. copy_file_to_scratch. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_to_scratch. copy_file_to_scratch¶. psi4.driver.p4util.copy_file_to_scratch(filename, prefix, namespace, unit, move=False)[source]¶; Move a file into scratch following the naming convention. Parameters:. filename (str) – Full path to file.; prefix (str) – Computation prefix, usually ‘psi’.; namespace (str) – Context namespace, usually molecule name.; unit (int) – Unit number, e.g. 32.; move (bool) – Whether to copy (default) or move?. Examples; >>> # Assume PID is 12345 and SCRATCH is /scratch/parrish/; >>> copy_file_to_scratch('temp', 'psi', 'h2o', 32):; Out[1]: -cp ./temp /scratch/parrish/psi.12345.h2o.32; >>> copy_file_to_scratch('/tmp/temp', 'psi', 'h2o', 32):; Out[2]: -cp /tmp/temp /scratch/parrish/psi.12345.h2o.32; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32):; Out[3]: -cp /tmp/temp /scratch/parrish/psi.12345.32; >>> copy_file_to_scratch('/tmp/temp', 'psi', '', 32, True):; Out[4]: -mv /tmp/temp /scratch/parrish/psi.12345.32. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; copy_file_to_scratch. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.copy_file_to_scratch.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.copy_file_to_scratch.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.cubeprop.html:986,Deployability,update,updated,986,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. cubeprop¶. psi4.driver.p4util.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.cubeprop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.cubeprop.html:478,Energy Efficiency,energy,energy,478,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. cubeprop¶. psi4.driver.p4util.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.cubeprop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.cubeprop.html:742,Energy Efficiency,energy,energy,742,"﻿. cubeprop. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. cubeprop¶. psi4.driver.p4util.cubeprop(wfn, **kwargs)[source]¶; Evaluate properties on a grid and generate cube files. New in version 0.5: wfn parameter passed explicitly. Returns:; None. Parameters:; wfn (Wavefunction) – set of molecule, basis, orbitals from which to generate cube files. Examples:. >>> # [1] Cube files for all orbitals; >>> E, wfn = energy('b3lyp', return_wfn=True); >>> cubeprop(wfn). >>> # [2] Cube files for density (alpha, beta, total, spin) and four orbitals; >>> # (two alpha, two beta); >>> set cubeprop_tasks ['orbitals', 'density']; >>> set cubeprop_orbitals [5, 6, -5, -6]; >>> E, wfn = energy('scf', return_wfn=True); >>> cubeprop(wfn). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; cubeprop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.cubeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.cubeprop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html:745,Availability,down,down,745,"﻿. davidson_solver. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; davidson_solver. davidson_solver¶. psi4.driver.p4util.davidson_solver(engine, guess, *, nroot, r_convergence=0.0001, max_ss_size=100, maxiter=60, verbose=1, nonneg_only=False)[source]¶; Solves for the lowest few eigenvalues and eigenvectors of a large problem emulated through an engine.; If the large matrix A has dimension {NxN} and N is very large, and only; a small number of roots, k are desired this algorithm is preferable to; standard methods as uses on the order of N * k memory. One only needs to; have the ability to compute the product of a times a vector.; For non-hermitan A the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant A such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : in",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html:1242,Availability,toler,tolerance,1242,"ence=0.0001, max_ss_size=100, maxiter=60, verbose=1, nonneg_only=False)[source]¶; Solves for the lowest few eigenvalues and eigenvectors of a large problem emulated through an engine.; If the large matrix A has dimension {NxN} and N is very large, and only; a small number of roots, k are desired this algorithm is preferable to; standard methods as uses on the order of N * k memory. One only needs to; have the ability to compute the product of a times a vector.; For non-hermitan A the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant A such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigen",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html:2630,Availability,failure,failure,2630,"he engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; davidson_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html:2872,Deployability,update,updated,2872,"he engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; davidson_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html:1113,Integrability,depend,dependent,1113,"ence=0.0001, max_ss_size=100, maxiter=60, verbose=1, nonneg_only=False)[source]¶; Solves for the lowest few eigenvalues and eigenvectors of a large problem emulated through an engine.; If the large matrix A has dimension {NxN} and N is very large, and only; a small number of roots, k are desired this algorithm is preferable to; standard methods as uses on the order of N * k memory. One only needs to; have the ability to compute the product of a times a vector.; For non-hermitan A the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant A such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigen",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html:2314,Performance,perform,performed,2314,"he engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; davidson_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html:2396,Performance,perform,performed,2396,"he engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; davidson_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html:2554,Performance,perform,performed,2554,"he engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; davidson_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html:1485,Testability,log,logging,1485,"are desired this algorithm is preferable to; standard methods as uses on the order of N * k memory. One only needs to; have the ability to compute the product of a times a vector.; For non-hermitan A the basis of the algorithm breaks down. However in; practice, for strongly diagonally-dominant A such as the; similarity-transformed Hamiltonian in EOM-CC this algorithm is commonly still; used. Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, >1 -> everything); nonneg_only (bool) – Should eigenpairs with eigenvalue < 0 be ignored?. Return type:; Dict[str, Any]. Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of A, computed on the last iteration of the solver; best_vectors (List[vector]) – (nroots) The best approximation of the eigenvectors of A, computed on the last iteration of the solver; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver wil",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.davidson_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html:322,Availability,error,error,322,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html:467,Availability,error,error,467,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html:647,Availability,error,error,647,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html:677,Availability,error,error,677,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html:795,Availability,error,error,795,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html:844,Availability,error,error,844,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html:883,Availability,error,error,883,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html:973,Availability,error,error,973,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html:1002,Availability,error,error,1002,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html:1113,Availability,error,error,1113,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html:1473,Deployability,update,updated,1473,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. DIIS¶. class psi4.driver.p4util.DIIS(max_vec=6, removal_policy='OLDEST')[source]¶; Bases: object; An object to assist in the DIIS extrpolation procedure. Parameters:. max_vec (int) – The maximum number of error and state vectors to hold. These are pruned based off the removal policy.; removal_policy (str) – {“OLDEST”, “LARGEST”}; How the state and error vectors are removed once at the maximum. OLDEST will remove the oldest vector while; largest will remove the residual with the largest RMS value. Methods Summary. add(state, error); Adds a DIIS state and error vector to the DIIS object. extrapolate([out]); Extrapolates next state vector from the current set of state and error vectors. Methods Documentation. add(state, error)[source]¶; Adds a DIIS state and error vector to the DIIS object. Parameters:. state (Matrix) – The current state vector.; error (Matrix) – The current error vector. extrapolate(out=None)[source]¶; Extrapolates next state vector from the current set of state and error vectors. Parameters:; out (Optional[Matrix]) – A array in which to place the next state vector. Returns:; ret – Returns the next state vector. Return type:; Matrix. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; DIIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.DIIS.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.docs_table_link.html:701,Deployability,update,updated,701,"﻿. docs_table_link. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; docs_table_link. docs_table_link¶. psi4.driver.p4util.docs_table_link(name, mode)[source]¶; Compose a link to mode documentation table.; For modes {“summary”, “details”}, link will be anchored at the table row for method name. (Method row not guaranteed to exist.); For other modes, link will be to table in general. Return type:; str. Parameters:. name (str) – ; mode (str) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; docs_table_link. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.docs_table_link.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.docs_table_link.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.drop_duplicates.html:612,Deployability,update,updated,612,"﻿. drop_duplicates. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; drop_duplicates. drop_duplicates¶. psi4.driver.p4util.drop_duplicates(seq)[source]¶; Return a copy of collection seq without any duplicate entries. Parameters:; seq (Iterable) – Collection to be de-duplicated. There is no guarantee of which; duplicate entry is dropped. Return type:; List. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; drop_duplicates. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.drop_duplicates.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.drop_duplicates.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html:712,Deployability,update,updated,712,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.p4util.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html:405,Energy Efficiency,ENERGY,ENERGY,405,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.p4util.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html:428,Energy Efficiency,ENERGY,ENERGY,428,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.p4util.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html:451,Energy Efficiency,ENERGY,ENERGY,451,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.p4util.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html:471,Energy Efficiency,ENERGY,ENERGY,471,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.p4util.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html:497,Energy Efficiency,ENERGY,ENERGY,497,"﻿. energies_from_fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. energies_from_fcidump¶. psi4.driver.p4util.energies_from_fcidump(intdump)[source]¶; From integrals dictionary generated from fcidump_from_file(),; compute energies. Return type:; Dict[str, float]. Returns:; a dictionary with energies. ’NUCLEAR REPULSION ENERGY’; ’ONE-ELECTRON ENERGY’; ’TWO-ELECTRON ENERGY’; ’SCF TOTAL ENERGY’; ’MP2 CORRELATION ENERGY’. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; energies_from_fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.energies_from_fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html:323,Availability,avail,available,323,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html:1302,Deployability,update,updated,1302,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html:896,Energy Efficiency,ENERGY,ENERGY,896,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html:922,Energy Efficiency,ENERGY,ENERGY,922,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html:953,Energy Efficiency,ENERGY,ENERGY,953,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html:987,Energy Efficiency,ENERGY,ENERGY,987,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html:1018,Energy Efficiency,ENERGY,ENERGY,1018,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html:1067,Energy Efficiency,ENERGY,ENERGY,1067,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html:276,Modifiability,variab,variables,276,"﻿. expand_psivars. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. expand_psivars¶. psi4.driver.p4util.expand_psivars(pvdefs, verbose=None)[source]¶; From rules on building QCVariables from others, set new variables to; P::e if all the contributors are available. Parameters:. pvdefs (Dict[str, Dict[str, Union[List[str], Callable]]]) – Dictionary with keys with names of QCVariables to be created and values; with dictionary of two keys: ‘args’, the QCVariables that contribute to; the key and ‘func’, a function (or lambda) to combine them.; verbose (Optional[int]) – Control print level. If unspecified (None), value taken from; PRINT. Status printing when verbose > 2. Examples; >>> pv1 = dict(); >>> pv1['SAPT CCD DISP'] = {'func': lambda x: x[0] * x[1] + x[2] + x[3] + x[4],; 'args': ['SAPT EXCHSCAL', 'SAPT EXCH-DISP20 ENERGY', 'SAPT DISP2(CCD) ENERGY',; 'SAPT DISP22(S)(CCD) ENERGY', 'SAPT EST.DISP22(T)(CCD) ENERGY']}; >>> pv1['SAPT0 ELST ENERGY'] = {'func': sum, 'args': ['SAPT ELST10,R ENERGY']}; >>> expand_psivars(pv1). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; expand_psivars. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.expand_psivars.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.fcidump.html:1358,Deployability,update,updated,1358,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.p4util.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.fcidump.html:961,Energy Efficiency,energy,energy,961,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.p4util.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.fcidump.html:1091,Energy Efficiency,energy,energy,1091,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.p4util.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.fcidump.html:811,Security,Validat,ValidationError,811,"﻿. fcidump. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. fcidump¶. psi4.driver.p4util.fcidump(wfn, fname='INTDUMP', oe_ints=None)[source]¶; Save integrals to file in FCIDUMP format as defined in Comp. Phys. Commun. 54 75 (1989),; https://doi.org/10.1016/0010-4655(89)90033-7 .; Additional one-electron integrals, including orbital energies, can also be saved.; This latter format can be used with the HANDE QMC code but is not standard. Parameters:. wfn (Wavefunction) – Set of molecule, basis, orbitals from which to generate FCIDUMP file.; fname (str) – Name of the integrals file, defaults to INTDUMP.; oe_ints (Optional[List]) – List of additional one-electron integrals to save to file. So far only; EIGENVALUES is a valid option. Raises:; ValidationError – When SCF wavefunction is not RHF. Examples; >>> # [1] Save one- and two-electron integrals to standard FCIDUMP format; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn). >>> # [2] Save orbital energies, one- and two-electron integrals.; >>> E, wfn = energy('scf', return_wfn=True); >>> fcidump(wfn, oe_ints=['EIGENVALUES']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.fcidump.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.fcidump.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.fcidump_from_file.html:993,Deployability,update,updated,993,"﻿. fcidump_from_file. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. fcidump_from_file¶. psi4.driver.p4util.fcidump_from_file(fname)[source]¶; Function to read in a FCIDUMP file. Return type:; Dict[str, Any]. Returns:; a dictionary with FCIDUMP header and integrals. ’norb’ : number of basis functions; ’nelec’ : number of electrons; ’ms2’ : spin polarization of the system; ’isym’ : symmetry of state (if present in FCIDUMP); ’orbsym’ : list of symmetry labels of each orbital; ’uhf’ : whether restricted or unrestricted; ’enuc’ : nuclear repulsion plus frozen core energy; ’epsilon’ : orbital energies; ’hcore’ : core Hamiltonian; ’eri’ : electron-repulsion integrals. Parameters:; fname (str) – FCIDUMP file name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.fcidump_from_file.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.fcidump_from_file.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.fcidump_from_file.html:641,Energy Efficiency,energy,energy,641,"﻿. fcidump_from_file. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. fcidump_from_file¶. psi4.driver.p4util.fcidump_from_file(fname)[source]¶; Function to read in a FCIDUMP file. Return type:; Dict[str, Any]. Returns:; a dictionary with FCIDUMP header and integrals. ’norb’ : number of basis functions; ’nelec’ : number of electrons; ’ms2’ : spin polarization of the system; ’isym’ : symmetry of state (if present in FCIDUMP); ’orbsym’ : list of symmetry labels of each orbital; ’uhf’ : whether restricted or unrestricted; ’enuc’ : nuclear repulsion plus frozen core energy; ’epsilon’ : orbital energies; ’hcore’ : core Hamiltonian; ’eri’ : electron-repulsion integrals. Parameters:; fname (str) – FCIDUMP file name. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; fcidump_from_file. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.fcidump_from_file.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.fcidump_from_file.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.find_approximate_string_matches.html:844,Deployability,update,updated,844,"﻿. find_approximate_string_matches. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; find_approximate_string_matches. find_approximate_string_matches¶. psi4.driver.p4util.find_approximate_string_matches(seq1, options, max_distance)[source]¶; Find list of approximate (within max_distance) matches to string seq1 among options. Parameters:. seq1 (str) – Target string to look for near matches to.; options (List[str]) – Alternatives among which to look for near matches to seq1.; max_distance (int) – Maximum Levenshtein distance from seq1 to return. Return type:; List[str]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; find_approximate_string_matches. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.find_approximate_string_matches.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.find_approximate_string_matches.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.format_molecule_for_input.html:1023,Deployability,update,updated,1023,"﻿. format_molecule_for_input. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; format_molecule_for_input. format_molecule_for_input¶. psi4.driver.p4util.format_molecule_for_input(mol, name='', forcexyz=False)[source]¶; Function to return a string of the output of; process_input() applied to the XYZ; format of molecule, passed as either fragmented; geometry string mol or molecule instance mol.; Used to capture molecule information from database; modules and for distributed (sow/reap) input files.; For the reverse, see geometry(). Parameters:. mol (Union[str, Molecule]) – Fragmented geometry string or molecule instance.; name (str) – Name to call the resulting molecule.; forcexyz (bool) – Use Cartesians, even for Z-Matrix molecules. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; format_molecule_for_input. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.format_molecule_for_input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.format_molecule_for_input.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.format_options_for_input.html:844,Deployability,update,updated,844,"﻿. format_options_for_input. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; format_options_for_input. format_options_for_input¶. psi4.driver.p4util.format_options_for_input(molecule=None, **kwargs)[source]¶; Function to return a string of commands to replicate the; current state of user-modified options. Used to capture C++; options information for distributed (sow/reap) input files. Caution; Some features are not yet implemented. Buy a developer a coffee. Does not cover local (as opposed to global) options. Return type:; str. Parameters:; molecule (Optional[Molecule]) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; format_options_for_input. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.format_options_for_input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.format_options_for_input.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.free_atom_volumes.html:1008,Deployability,update,updated,1008,"﻿. free_atom_volumes. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; free_atom_volumes. free_atom_volumes¶. psi4.driver.p4util.free_atom_volumes(wfn, **kwargs)[source]¶; Computes free-atom volumes using MBIS density partitioning.; The free-atom volumes are computed for all unique (inc. basis set); atoms in a molecule and stored as wavefunction variables, MBIS FREE ATOM n VOLUME.; Free-atom densities are computed at the same level of theory as the molecule,; and we use unrestricted references as needed in computing the ground-state.; The free-atom volumes are used to compute volume ratios in routine MBIS computations. Parameters:; wfn (Wavefunction) – The wave function associated with the molecule, method, and basis for; atomic computations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; free_atom_volumes. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.free_atom_volumes.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.free_atom_volumes.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.free_atom_volumes.html:653,Integrability,rout,routine,653,"﻿. free_atom_volumes. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; free_atom_volumes. free_atom_volumes¶. psi4.driver.p4util.free_atom_volumes(wfn, **kwargs)[source]¶; Computes free-atom volumes using MBIS density partitioning.; The free-atom volumes are computed for all unique (inc. basis set); atoms in a molecule and stored as wavefunction variables, MBIS FREE ATOM n VOLUME.; Free-atom densities are computed at the same level of theory as the molecule,; and we use unrestricted references as needed in computing the ground-state.; The free-atom volumes are used to compute volume ratios in routine MBIS computations. Parameters:; wfn (Wavefunction) – The wave function associated with the molecule, method, and basis for; atomic computations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; free_atom_volumes. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.free_atom_volumes.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.free_atom_volumes.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.free_atom_volumes.html:401,Modifiability,variab,variables,401,"﻿. free_atom_volumes. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; free_atom_volumes. free_atom_volumes¶. psi4.driver.p4util.free_atom_volumes(wfn, **kwargs)[source]¶; Computes free-atom volumes using MBIS density partitioning.; The free-atom volumes are computed for all unique (inc. basis set); atoms in a molecule and stored as wavefunction variables, MBIS FREE ATOM n VOLUME.; Free-atom densities are computed at the same level of theory as the molecule,; and we use unrestricted references as needed in computing the ground-state.; The free-atom volumes are used to compute volume ratios in routine MBIS computations. Parameters:; wfn (Wavefunction) – The wave function associated with the molecule, method, and basis for; atomic computations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; free_atom_volumes. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.free_atom_volumes.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.free_atom_volumes.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.Gaussian.html:1399,Deployability,update,updated,1399,"﻿. Gaussian. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Gaussian. Gaussian¶. class psi4.driver.p4util.Gaussian(domain, gamma)[source]¶; Bases: Lineshape; Gaussian function on domain, centered at x_0 with broadening gamma. Parameters:. domain (Union[numpy.ndarray, List[float]]) – The domain of the Gaussian profile.; gamma (Callable[[float], float]) – Broadening parameter.; This is related to the full width at half maximum as \(\mathrm{FWHM} = \gamma \sqrt{2\ln 2}\). Notes; Use this profile to model inhomegenous broadening.; Methods Summary. lineshape(x_0); Gaussian function on Lineshape.domain, centered at x_0 with broadening Lineshape.gamma. maximum(x_0); Maximum value of Gaussian profile centered at x_0. Methods Documentation. lineshape(x_0)[source]¶; Gaussian function on Lineshape.domain, centered at x_0 with broadening Lineshape.gamma. Parameters:; x_0 (float) – Center of the Gaussian, i.e. its maximum. Returns:; The Gaussian profile. Return type:; numpy.ndarray. maximum(x_0)[source]¶; Maximum value of Gaussian profile centered at x_0. Parameters:; x_0 (float) – Center of the Lorentzian, i.e. its maximum. Return type:; float. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Gaussian. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.Gaussian.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.Gaussian.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.getattr_ignorecase.html:275,Availability,avail,available,275,"﻿. getattr_ignorecase. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; getattr_ignorecase. getattr_ignorecase¶. psi4.driver.p4util.getattr_ignorecase(module, attr)[source]¶; Extract attribute attr from module if attr; is available in any possible lettercase permutation. Parameters:. module (str) – Object on which to seek attr.; attr (str) – Name of attribute with uncertain case. Returns:; attribute – Module attribute returned if available. None if not. Return type:; Any. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; getattr_ignorecase. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.getattr_ignorecase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.getattr_ignorecase.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.getattr_ignorecase.html:487,Availability,avail,available,487,"﻿. getattr_ignorecase. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; getattr_ignorecase. getattr_ignorecase¶. psi4.driver.p4util.getattr_ignorecase(module, attr)[source]¶; Extract attribute attr from module if attr; is available in any possible lettercase permutation. Parameters:. module (str) – Object on which to seek attr.; attr (str) – Name of attribute with uncertain case. Returns:; attribute – Module attribute returned if available. None if not. Return type:; Any. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; getattr_ignorecase. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.getattr_ignorecase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.getattr_ignorecase.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.getattr_ignorecase.html:733,Deployability,update,updated,733,"﻿. getattr_ignorecase. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; getattr_ignorecase. getattr_ignorecase¶. psi4.driver.p4util.getattr_ignorecase(module, attr)[source]¶; Extract attribute attr from module if attr; is available in any possible lettercase permutation. Parameters:. module (str) – Object on which to seek attr.; attr (str) – Name of attribute with uncertain case. Returns:; attribute – Module attribute returned if available. None if not. Return type:; Any. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; getattr_ignorecase. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.getattr_ignorecase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.getattr_ignorecase.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.get_memory.html:443,Deployability,update,updated,443,"﻿. get_memory. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; get_memory. get_memory¶. psi4.driver.p4util.get_memory()[source]¶; Return the total memory allocation in bytes. Return type:; int. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; get_memory. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.get_memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.get_memory.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.get_psifile.html:647,Deployability,update,updated,647,"﻿. get_psifile. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; get_psifile. get_psifile¶. psi4.driver.p4util.get_psifile(fileno, pidspace='15727')[source]¶; Form full path and filename for psi scratch file. Parameters:. fileno (int) – Psi file, e.g., psi.32.; pidspace (str) – Current namespace. Defaults to os.getpid(). Returns:; flpath – Full path and filename for psi file. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; get_psifile. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.get_psifile.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.get_psifile.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html:1841,Availability,toler,tolerance,1841,")\) is positive definite, we can transform the problem to arrive at the hermitian NxN EVP:; \((A-B)^{1/2}(A+B)(A-B)^{1/2} = w^2 T\); Where \(T = (A-B)^{-1/2}(X+Y)\).; We use a Davidson like iteration where we transform \((A+B)\) (H1) and \((A-B)\); (H2) in to the subspace defined by the trial vectors.; The subspace analog of the NxN hermitian EVP is diagonalized and left \((X-Y)\); and right \((X+Y)\) eigenvectors of the NxN non-hermitian EVP are approximated.; Residual vectors are formed for both and the guess space is augmented with; two correction vectors per iteration. The advantages and properties of this; algorithm are described in the literature [stratmann:1998] . Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue correspo",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html:3303,Availability,failure,failure,3303,"ctors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html:3788,Deployability,update,updated,3788,"ctors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html:3415,Energy Efficiency,efficient,efficient,3415,"ctors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html:1712,Integrability,depend,dependent,1712,")\) is positive definite, we can transform the problem to arrive at the hermitian NxN EVP:; \((A-B)^{1/2}(A+B)(A-B)^{1/2} = w^2 T\); Where \(T = (A-B)^{-1/2}(X+Y)\).; We use a Davidson like iteration where we transform \((A+B)\) (H1) and \((A-B)\); (H2) in to the subspace defined by the trial vectors.; The subspace analog of the NxN hermitian EVP is diagonalized and left \((X-Y)\); and right \((X+Y)\) eigenvectors of the NxN non-hermitian EVP are approximated.; Residual vectors are formed for both and the guess space is augmented with; two correction vectors per iteration. The advantages and properties of this; algorithm are described in the literature [stratmann:1998] . Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue correspo",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html:3449,Integrability,depend,dependent,3449,"ctors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html:2987,Performance,perform,performed,2987,"ctors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html:3069,Performance,perform,performed,3069,"ctors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html:3227,Performance,perform,performed,3227,"ctors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. Notes; The solution vector is normalized to 1/2; The solver will return even when maxiter iterations are performed without convergence.; The caller must check stats[-1]['done'] for failure and handle each case accordingly.; References; R. Eric Stratmann, G. E. Scuseria, and M. J. Frisch, “An efficient; implementation of time-dependent density-functional theory for the; calculation of excitation energies of large molecules.” J. Chem. Phys.,; 109, 8218 (1998). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; hamiltonian_solver. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html:2084,Testability,log,logging,2084,"he subspace defined by the trial vectors.; The subspace analog of the NxN hermitian EVP is diagonalized and left \((X-Y)\); and right \((X+Y)\) eigenvectors of the NxN non-hermitian EVP are approximated.; Residual vectors are formed for both and the guess space is augmented with; two correction vectors per iteration. The advantages and properties of this; algorithm are described in the literature [stratmann:1998] . Parameters:. engine (Type[SolverEngine]) – The engine drive all operations involving data structures that have at; least one “large” dimension. See SolverEngine for requirements; guess (List) – list {engine dependent}; At least nroot initial expansion vectors; nroot (int) – Number of roots desired; r_convergence (float) – Convergence tolerance for residual vectors; max_ss_size (int) – The maximum number of trial vectors in the iterative subspace that will; be stored before a collapse is done.; maxiter (int) – The maximum number of iterations; verbose (int) – The amount of logging info to print (0 -> none, 1 -> some, 2 -> all but matrices, >2 -> everything). Returns:. best_values (numpy.ndarray) – (nroots, ) The best approximation of the eigenvalues of w, computed on the last iteration of the solver; best_R (List[vector]) – (nroots) The best approximation of the right hand eigenvectors, \(X+Y\), computed on the last iteration of the solver.; best_L (List[vector]) – (nroots) The best approximation of the left hand eigenvectors, \(X-Y\), computed on the last iteration of the solver.; stats (List[Dict]) – Statistics collected on each iteration. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done :",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hamiltonian_solver.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hold_options_state.html:658,Deployability,update,updated,658,"﻿. hold_options_state. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; hold_options_state. hold_options_state¶. psi4.driver.p4util.hold_options_state()[source]¶; Return a context manager that will collect the current state of; Process:environment.options on entry to the with-statement and clear; and restore the collected keywords state when exiting the with-statement. Return type:; Iterator[None]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; hold_options_state. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.hold_options_state.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hold_options_state.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hold_options_state.html:344,Usability,clear,clear,344,"﻿. hold_options_state. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; hold_options_state. hold_options_state¶. psi4.driver.p4util.hold_options_state()[source]¶; Return a context manager that will collect the current state of; Process:environment.options on entry to the with-statement and clear; and restore the collected keywords state when exiting the with-statement. Return type:; Iterator[None]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; hold_options_state. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.hold_options_state.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.hold_options_state.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.import_ignorecase.html:606,Deployability,update,updated,606,"﻿. import_ignorecase. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; import_ignorecase. import_ignorecase¶. psi4.driver.p4util.import_ignorecase(module)[source]¶; Import loader for module in any possible lettercase permutation. Parameters:; module (str) – Name of module with uncertain case. Returns:; Module object. Return type:; types.ModuleType. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; import_ignorecase. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.import_ignorecase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.import_ignorecase.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.import_ignorecase.html:225,Performance,load,loader,225,"﻿. import_ignorecase. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; import_ignorecase. import_ignorecase¶. psi4.driver.p4util.import_ignorecase(module)[source]¶; Import loader for module in any possible lettercase permutation. Parameters:; module (str) – Name of module with uncertain case. Returns:; Module object. Return type:; types.ModuleType. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; import_ignorecase. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.import_ignorecase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.import_ignorecase.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.InPsight.html:4507,Deployability,update,updated,4507,", 0, 56], [230, 0, 46], [235, 0, 38]]¶. defines = {'Antialias': 'true', 'Antialias_Threshold': '0.1', 'Background_Color': '<0.6,0.6,0.6>', 'Filename': 'inpsight', 'Filepath': '/home/runner/work/psi4/psi4/code/objdir/doc/sphinxman/source', 'Light_Color': '<1,1,1>', 'Output_Alpha': 'true', 'Output_File_Type': 'N', 'Shadows': 'false'}¶. elevation = 0.0¶. height = 900¶. light = [1.0, 0.0, 0.0]¶. light_color = [0.6, 0.6, 0.6]¶. location = [1.0, 0.0, 0.0]¶. look_at = [0.0, 0.0, 0.0]¶. radial_scale = 0.25¶. radii = [2.0, 1.001, 1.012, 0.825, 1.408, 1.485, 1.452, 1.397, 1.342, 1.287, 1.243, 1.144, 1.364, 1.639, 1.716, 1.705, 1.683, 1.639, 1.595, 1.485, 1.474, 1.562, 1.562, 1.562, 1.562, 1.562, 1.562, 1.562, 1.562, 1.562, 1.562, 1.65, 1.727, 1.76, 1.771, 1.749, 1.727, 1.628, 1.606, 1.639, 1.639, 1.639, 1.639, 1.639, 1.639, 1.639, 1.639, 1.639, 1.639, 1.672, 1.804, 1.881, 1.892, 1.892, 1.881, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]¶. right = [1.0, 0.0, 0.0]¶. sky = [0.0, -1.0, 0.0]¶. up = [0.0, 0.75, 0.0]¶. width = 1200¶. zoom = 0.5¶. Methods Documentation. position_camera()[source]¶. save_density(filename='rho', overlap=2.0, n=[40, 40, 40], caxis=[0.0, 1.0])[source]¶. save_molecule(filename)[source]¶. set_camera(location, sky, up, right, look_at, light, light_color)[source]¶. set_color(Z, color)[source]¶. set_define(key, value)[source]¶. set_radius(Z, radius)[source]¶. set_size(width, height)[source]¶. set_view(azimuth, elevation, zoom=0.7)[source]¶. update_geometry()[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; InPsight. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.InPsight.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.InPsight.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.kwargs_lower.html:808,Deployability,update,updated,808,"﻿. kwargs_lower. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; kwargs_lower. kwargs_lower¶. psi4.driver.p4util.kwargs_lower(kwargs)[source]¶; Function to rebuild and return kwargs dictionary sanitized. Should be; called by every function that could be called directly by the user. Parameters:; kwargs (Dict[str, Any]) – Input kwargs for any user-facing function. Returns:; lowered – Sanitized kwargs with all keys made lowercase. Also turns boolean-like; values into actual booleans. Also turns values lowercase if sensible. Return type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; kwargs_lower. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.kwargs_lower.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.kwargs_lower.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.kwargs_lower.html:247,Security,sanitiz,sanitized,247,"﻿. kwargs_lower. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; kwargs_lower. kwargs_lower¶. psi4.driver.p4util.kwargs_lower(kwargs)[source]¶; Function to rebuild and return kwargs dictionary sanitized. Should be; called by every function that could be called directly by the user. Parameters:; kwargs (Dict[str, Any]) – Input kwargs for any user-facing function. Returns:; lowered – Sanitized kwargs with all keys made lowercase. Also turns boolean-like; values into actual booleans. Also turns values lowercase if sensible. Return type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; kwargs_lower. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.kwargs_lower.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.kwargs_lower.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.kwargs_lower.html:439,Security,Sanitiz,Sanitized,439,"﻿. kwargs_lower. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; kwargs_lower. kwargs_lower¶. psi4.driver.p4util.kwargs_lower(kwargs)[source]¶; Function to rebuild and return kwargs dictionary sanitized. Should be; called by every function that could be called directly by the user. Parameters:; kwargs (Dict[str, Any]) – Input kwargs for any user-facing function. Returns:; lowered – Sanitized kwargs with all keys made lowercase. Also turns boolean-like; values into actual booleans. Also turns values lowercase if sensible. Return type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; kwargs_lower. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.kwargs_lower.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.kwargs_lower.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.levenshtein.html:536,Deployability,update,updated,536,"﻿. levenshtein. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; levenshtein. levenshtein¶. psi4.driver.p4util.levenshtein(seq1, seq2)[source]¶; Compute the Levenshtein distance between two strings. Parameters:. seq1 (str) – First string.; seq2 (str) – Second string. Return type:; int. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; levenshtein. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.levenshtein.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.levenshtein.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.Lineshape.html:1107,Deployability,update,updated,1107,"﻿. Lineshape. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Lineshape. Lineshape¶. class psi4.driver.p4util.Lineshape(domain, gamma)[source]¶; Bases: object; Lineshape ABC. Parameters:. domain (Union[ndarray, List[float]]) – ; gamma (Callable[[float], float]) – . domain¶; Domain of the spectral band. Type:; Union[numpy.ndarray, List[float]]. gamma¶; A function returning the broadening factor. Type:; Callable[[float], float]. Notes; Why do we use a callable broadening factor?; For plots in the wavelength domain, the broadening factor depends on the location of the band’s maximum.; Methods Summary. lineshape(x_0). rtype:; ndarray. maximum(x_0). rtype:; float. Methods Documentation. abstract lineshape(x_0)[source]¶. Return type:; ndarray. Parameters:; x_0 (float) – . abstract maximum(x_0)[source]¶. Return type:; float. Parameters:; x_0 (float) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Lineshape. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.Lineshape.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.Lineshape.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.Lineshape.html:595,Integrability,depend,depends,595,"﻿. Lineshape. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Lineshape. Lineshape¶. class psi4.driver.p4util.Lineshape(domain, gamma)[source]¶; Bases: object; Lineshape ABC. Parameters:. domain (Union[ndarray, List[float]]) – ; gamma (Callable[[float], float]) – . domain¶; Domain of the spectral band. Type:; Union[numpy.ndarray, List[float]]. gamma¶; A function returning the broadening factor. Type:; Callable[[float], float]. Notes; Why do we use a callable broadening factor?; For plots in the wavelength domain, the broadening factor depends on the location of the band’s maximum.; Methods Summary. lineshape(x_0). rtype:; ndarray. maximum(x_0). rtype:; float. Methods Documentation. abstract lineshape(x_0)[source]¶. Return type:; ndarray. Parameters:; x_0 (float) – . abstract maximum(x_0)[source]¶. Return type:; float. Parameters:; x_0 (float) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Lineshape. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.Lineshape.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.Lineshape.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.Lorentzian.html:1376,Deployability,update,updated,1376,"﻿. Lorentzian. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Lorentzian. Lorentzian¶. class psi4.driver.p4util.Lorentzian(domain, gamma)[source]¶; Bases: Lineshape; Lorentzian function on domain, centered at x_0 with broadening gamma. Parameters:. domain (Union[numpy.ndarray, List[float]]) – The domain of the Lorentzian profile.; gamma (Callable[[float], float]) – Broadening parameter.; This is the full width at half maximum (FWHM). Notes; Use this profile to model homogeneous broadening.; Methods Summary. lineshape(x_0); Lorentzian function on Lineshape.domain, centered at x_0 with broadening Lineshape.gamma. maximum(x_0); Maximum value of Lorentzian profile centered at x_0. Methods Documentation. lineshape(x_0)[source]¶; Lorentzian function on Lineshape.domain, centered at x_0 with broadening Lineshape.gamma. Parameters:; x_0 (float) – Center of the Lorentzian, i.e. its maximum. Returns:; The Lorentzian profile. Return type:; numpy.ndarray. maximum(x_0)[source]¶; Maximum value of Lorentzian profile centered at x_0. Parameters:; x_0 (float) – Center of the Lorentzian, i.e. its maximum. Return type:; float. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; Lorentzian. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.Lorentzian.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.Lorentzian.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.mat2arr.html:551,Deployability,update,updated,551,"﻿. mat2arr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; mat2arr. mat2arr¶. psi4.driver.p4util.mat2arr(mat)[source]¶; Convert Matrix to List. Parameters:; mat (Matrix) – PSI4 matrix. Should be flat with respect to symmetry. Returns:; Pure Python representation of mat. Return type:; List[List[float]]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; mat2arr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.mat2arr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.mat2arr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html:718,Deployability,update,updated,718,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.p4util.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html:176,Integrability,message,message,176,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.p4util.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html:229,Integrability,message,message,229,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.p4util.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html:289,Integrability,message,message,289,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.p4util.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html:305,Integrability,Message,Message,305,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.p4util.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html:472,Integrability,message,message,472,"﻿. message_box. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. message_box¶. psi4.driver.p4util.message_box(message, max_width=80, min_width=30)[source]¶; Put a message string into a box for extra attention. Parameters:. message (str) – Message string to be boxed.; max_width (int) – Maximal character width of the box.; min_width (int) – Minimal character width of the box. Returns:; Box containing the message as a multiline string. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; message_box. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.message_box.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.oeprop.html:419,Availability,Avail,Available,419,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. oeprop¶. psi4.driver.p4util.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties; args (List[str]) – Arbitrary-number of properties to be computed from wfn.; See Available One-Electron Properties.; title (str) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.oeprop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.oeprop.html:854,Deployability,update,updated,854,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. oeprop¶. psi4.driver.p4util.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties; args (List[str]) – Arbitrary-number of properties to be computed from wfn.; See Available One-Electron Properties.; title (str) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.oeprop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.oeprop.html:573,Energy Efficiency,energy,energy,573,"﻿. oeprop. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. oeprop¶. psi4.driver.p4util.oeprop(wfn, *args, **kwargs)[source]¶; Evaluate one-electron properties. Returns:; None. Parameters:. wfn (Wavefunction) – set of molecule, basis, orbitals from which to compute properties; args (List[str]) – Arbitrary-number of properties to be computed from wfn.; See Available One-Electron Properties.; title (str) – label prepended to all psivars computed. Examples:. >>> # [1] Moments with specific label; >>> E, wfn = energy('hf', return_wfn=True); >>> oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', title='H3O+ SCF'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; oeprop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.oeprop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.oeprop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.OptionsState.html:1284,Deployability,update,updated,1284,"﻿. OptionsState. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptionsState. OptionsState¶. class psi4.driver.p4util.OptionsState(*largs)[source]¶; Bases: object; Store multiple OptionState() objects.; Use in driver functions to collect several keywords before altering them,; then restore them before function return. Parameters:; largs (List[List[str]]) – Specify which keywords to store value and has_changed state. Examples; >>> optstash = OptionsState(; ['DF_BASIS_SCF'],; ['SCF_TYPE'],; ['SCF', 'REFERENCE']). >>> print(optstash). >>> optstash.restore(). Methods Summary. add_option(item); Store info for another keyword, item. restore(); Restore value and has_changed status of each keyword to saved condition. Methods Documentation. add_option(item)[source]¶; Store info for another keyword, item. Parameters:; item (List[str]) – A one-membered list with a global keyword or a two-membered list; with a module keyword and module. restore()[source]¶; Restore value and has_changed status of each keyword to saved condition. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptionsState. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.OptionsState.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.OptionsState.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.OptionsStateCM.html:670,Deployability,update,updated,670,"﻿. OptionsStateCM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptionsStateCM. OptionsStateCM¶. psi4.driver.p4util.OptionsStateCM(osd)[source]¶; Return a context manager that will collect the state (value and changed; status) of a list of keywords osd that can initialize; OptionsState on entry to the with-statement and restore the; collected state when exiting the with-statement. Return type:; Iterator[None]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptionsStateCM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.OptionsStateCM.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.OptionsStateCM.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.OptionState.html:1105,Deployability,update,updated,1105,"﻿. OptionState. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptionState. OptionState¶. class psi4.driver.p4util.OptionState(option, module=None)[source]¶; Bases: object; Store the state (value and changed status) of a single option. Parameters:. option (str) – Name of read_options keyword. All caps.; module (Optional[str]) – Name of read_options module or None if global. All caps.; If module given, the option value and has_changed value is stored; for global, local to module, and used by module scopes. Otherwise; (used for BASIS keywords), only global scope is stored. Examples; >>> OptionState('E_CONVERGENCE', 'SCF'). >>> print(OptionState('DF_BASIS_MP2')). Methods Summary. restore(); Restore value and has_changed status to saved condition. Methods Documentation. restore()[source]¶; Restore value and has_changed status to saved condition. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; OptionState. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.OptionState.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.OptionState.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.pcm_helper.html:568,Deployability,update,updated,568,"﻿. pcm_helper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; pcm_helper. pcm_helper¶. psi4.driver.p4util.pcm_helper(block)[source]¶; Helper to specify the multiline PCMSolver syntax for PCM.; Prefer to use set_options() with key ""PCM__INPUT"". Parameters:; block (str) – Text that goes in a PSIthon pcm = {...} block. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; pcm_helper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.pcm_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.pcm_helper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.plump_qcvar.html:1000,Deployability,update,updated,1000,"﻿. plump_qcvar. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; plump_qcvar. plump_qcvar¶. psi4.driver.p4util.plump_qcvar(val, shape_clue, ret='np')[source]¶; Prepare serialized QCVariable for set_variable() by; converting flat arrays into shaped ones and floating strings. Parameters:. val (Union[float, str, List]) – flat (?, ) list or scalar or string, probably from JSON storage.; shape_clue (str) – Label that includes (case insensitive) one of the following as; a clue to the array’s natural dimensions: ‘gradient’, ‘hessian’; ret (str) – {‘np’, ‘psi4’}; Whether for arrays to return numpy.ndarray or; psi4.core.Matrix. Returns:; Reshaped array of type ret with natural dimensions of shape_clue. Return type:; float or numpy.ndarray or Matrix. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; plump_qcvar. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.plump_qcvar.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.plump_qcvar.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.prefactor_ecd.html:1012,Deployability,update,updated,1012,"﻿. prefactor_ecd. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_ecd. prefactor_ecd¶. psi4.driver.p4util.prefactor_ecd()[source]¶; Prefactor for converting microscopic observable to decadic molar; extinction coefficient in electronic circular dichroism.; Notes; This function implements the calculation of the following prefactor:. \[k = \frac{16\pi^{2}N_{\mathrm{A}}}{3\times 1000\times \ln(10) (4 \pi \epsilon_{0}) n \hbar c^{2}}\]; The prefactor is computed in SI units and then adjusted for the fact that; we use atomic units to express microscopic observables: excitation energies; and transition dipole moments.; The refractive index \(n\) is, in general, frequency-dependent. We; assume it to be constant and equal to 1. Return type:; float. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_ecd. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.prefactor_ecd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.prefactor_ecd.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.prefactor_ecd.html:737,Integrability,depend,dependent,737,"﻿. prefactor_ecd. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_ecd. prefactor_ecd¶. psi4.driver.p4util.prefactor_ecd()[source]¶; Prefactor for converting microscopic observable to decadic molar; extinction coefficient in electronic circular dichroism.; Notes; This function implements the calculation of the following prefactor:. \[k = \frac{16\pi^{2}N_{\mathrm{A}}}{3\times 1000\times \ln(10) (4 \pi \epsilon_{0}) n \hbar c^{2}}\]; The prefactor is computed in SI units and then adjusted for the fact that; we use atomic units to express microscopic observables: excitation energies; and transition dipole moments.; The refractive index \(n\) is, in general, frequency-dependent. We; assume it to be constant and equal to 1. Return type:; float. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_ecd. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.prefactor_ecd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.prefactor_ecd.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.prefactor_opa.html:999,Deployability,update,updated,999,"﻿. prefactor_opa. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_opa. prefactor_opa¶. psi4.driver.p4util.prefactor_opa()[source]¶; Prefactor for converting microscopic observable to decadic molar; extinction coefficient in one-photon absorption.; Notes; This function implements the calculation of the following prefactor:. \[k = \frac{4\pi^{2}N_{\mathrm{A}}}{3\times 1000\times \ln(10) (4 \pi \epsilon_{0}) n \hbar c}\]; The prefactor is computed in SI units and then adjusted for the fact that; we use atomic units to express microscopic observables: excitation energies; and transition dipole moments.; The refractive index \(n\) is, in general, frequency-dependent. We; assume it to be constant and equal to 1. Return type:; float. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_opa. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.prefactor_opa.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.prefactor_opa.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.prefactor_opa.html:724,Integrability,depend,dependent,724,"﻿. prefactor_opa. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_opa. prefactor_opa¶. psi4.driver.p4util.prefactor_opa()[source]¶; Prefactor for converting microscopic observable to decadic molar; extinction coefficient in one-photon absorption.; Notes; This function implements the calculation of the following prefactor:. \[k = \frac{4\pi^{2}N_{\mathrm{A}}}{3\times 1000\times \ln(10) (4 \pi \epsilon_{0}) n \hbar c}\]; The prefactor is computed in SI units and then adjusted for the fact that; we use atomic units to express microscopic observables: excitation energies; and transition dipole moments.; The refractive index \(n\) is, in general, frequency-dependent. We; assume it to be constant and equal to 1. Return type:; float. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prefactor_opa. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.prefactor_opa.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.prefactor_opa.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.prepare_options_for_modules.html:1854,Deployability,update,updated,1854,"﻿. prepare_options_for_modules. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_modules. prepare_options_for_modules¶. psi4.driver.p4util.prepare_options_for_modules(changedOnly=False, commandsInsteadDict=False, globalsOnly=False, stateInsteadMediated=False)[source]¶; Capture current state of psi4.core.Options information. Parameters:. changedOnly (bool) – Record info only for options that have been set (may still be default).; When False, records values for every option.; commandsInsteadDict (bool) – Return string of commands to exec to reset options in current form.; When False, return nested dictionary with globals in ‘GLOBALS’ subdictionary; and locals in subdictionaries by module.; globalsOnly (bool) – Record only global options to save time querying the; Options object.; When False, record module-level options, too.; stateInsteadMediated (bool) – When True, querying this function for options to be later reset into the same; state – the raw values and has_changed status at the global and local levels.; When False, querying this function for mediated options to be used – the results; of the globals/locals handshake as computed by the Options object itself. Here,; dict[module][option][value] is the value to be used by module. Return type:; Union[Dict, str]. Returns:. Dict – When commandsInsteadDict is False.; str – When commandsInsteadDict is True. Caution; Some features are not yet implemented. Buy a developer a coffee. command return doesn’t revoke has_changed setting for unchanged with changedOnly=False; not all kwargs are independent. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_modules. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.prepare_options_for_modules.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.prepare_options_for_modules.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.prepare_options_for_modules.html:1136,Integrability,mediat,mediated,1136,"﻿. prepare_options_for_modules. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_modules. prepare_options_for_modules¶. psi4.driver.p4util.prepare_options_for_modules(changedOnly=False, commandsInsteadDict=False, globalsOnly=False, stateInsteadMediated=False)[source]¶; Capture current state of psi4.core.Options information. Parameters:. changedOnly (bool) – Record info only for options that have been set (may still be default).; When False, records values for every option.; commandsInsteadDict (bool) – Return string of commands to exec to reset options in current form.; When False, return nested dictionary with globals in ‘GLOBALS’ subdictionary; and locals in subdictionaries by module.; globalsOnly (bool) – Record only global options to save time querying the; Options object.; When False, record module-level options, too.; stateInsteadMediated (bool) – When True, querying this function for options to be later reset into the same; state – the raw values and has_changed status at the global and local levels.; When False, querying this function for mediated options to be used – the results; of the globals/locals handshake as computed by the Options object itself. Here,; dict[module][option][value] is the value to be used by module. Return type:; Union[Dict, str]. Returns:. Dict – When commandsInsteadDict is False.; str – When commandsInsteadDict is True. Caution; Some features are not yet implemented. Buy a developer a coffee. command return doesn’t revoke has_changed setting for unchanged with changedOnly=False; not all kwargs are independent. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_modules. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.prepare_options_for_modules.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.prepare_options_for_modules.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.prepare_options_for_set_options.html:786,Deployability,update,updated,786,"﻿. prepare_options_for_set_options. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_set_options. prepare_options_for_set_options¶. psi4.driver.p4util.prepare_options_for_set_options()[source]¶; Collect current state of psi4.core.Options information for; reloading by set_options(). Returns:; Dictionary where keys are keyword names, either plain for those to be; set globally or mangled “module__keyword” for those to be set locally,; and values are keyword values. Return type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prepare_options_for_set_options. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.prepare_options_for_set_options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.prepare_options_for_set_options.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.provenance_stamp.html:861,Deployability,update,updated,861,"﻿. provenance_stamp. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; provenance_stamp. provenance_stamp¶. psi4.driver.p4util.provenance_stamp(routine, module=None)[source]¶; Prepare QCSchema Provenance with PSI4 credentials. Parameters:. routine (str) – Name of driver function generating the QCSchema.; module (Optional[str]) – Primary contributing PSI4 library, like ccenergy or dfmp2. Returns:; provenance – Dictionary satisfying QCSchema, with PSI4 credentials for creator; and version.; https://github.com/MolSSI/QCSchema/blob/master/qcschema/dev/definitions.py#L23-L41. Return type:; Dict[str, str]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; provenance_stamp. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.provenance_stamp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.provenance_stamp.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.provenance_stamp.html:196,Integrability,rout,routine,196,"﻿. provenance_stamp. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; provenance_stamp. provenance_stamp¶. psi4.driver.p4util.provenance_stamp(routine, module=None)[source]¶; Prepare QCSchema Provenance with PSI4 credentials. Parameters:. routine (str) – Name of driver function generating the QCSchema.; module (Optional[str]) – Primary contributing PSI4 library, like ccenergy or dfmp2. Returns:; provenance – Dictionary satisfying QCSchema, with PSI4 credentials for creator; and version.; https://github.com/MolSSI/QCSchema/blob/master/qcschema/dev/definitions.py#L23-L41. Return type:; Dict[str, str]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; provenance_stamp. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.provenance_stamp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.provenance_stamp.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.provenance_stamp.html:292,Integrability,rout,routine,292,"﻿. provenance_stamp. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; provenance_stamp. provenance_stamp¶. psi4.driver.p4util.provenance_stamp(routine, module=None)[source]¶; Prepare QCSchema Provenance with PSI4 credentials. Parameters:. routine (str) – Name of driver function generating the QCSchema.; module (Optional[str]) – Primary contributing PSI4 library, like ccenergy or dfmp2. Returns:; provenance – Dictionary satisfying QCSchema, with PSI4 credentials for creator; and version.; https://github.com/MolSSI/QCSchema/blob/master/qcschema/dev/definitions.py#L23-L41. Return type:; Dict[str, str]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; provenance_stamp. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.provenance_stamp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.provenance_stamp.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.sanitize_method.html:629,Deployability,update,updated,629,"﻿. sanitize_method. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_method. sanitize_method¶. psi4.driver.p4util.sanitize_method(name)[source]¶; Replace characters in method name so that suitable for function name or Sphinx table anchor; (both as-is) or HTML table link (replace underscore in returned string by dash). Return type:; str. Parameters:; name (str) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_method. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.sanitize_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.sanitize_method.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.set_memory.html:1921,Deployability,update,updated,1921,"﻿. set_memory. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. set_memory¶. psi4.driver.p4util.set_memory(inputval, execute=True, quiet=False)[source]¶; Reset the total memory allocation. Parameters:. inputval (Union[str, int, float]) – Memory value. An Integer or float is taken literally as bytes to be set.; A string is taken as a unit-containing value (e.g., 30 mb), which is; case-insensitive.; execute (bool) – When False, interpret inputval without setting in Psi4 core.; quiet (bool) – When True, do not print to the output file. Returns:; Number of bytes of memory set. Return type:; int. Raises:; ValidationError – When <500MiB or disallowed type or misformatted. Examples; >>> # [1] Passing absolute number of bytes; >>> psi4.set_memory(600000000); >>> psi4.get_memory(); Out[1]: 600000000L. >>> # [2] Passing memory value as string with units; >>> psi4.set_memory('30 GB'); >>> psi4.get_memory(); Out[2]: 30000000000L. >>> # Good examples; >>> psi4.set_memory(800000000) # 800000000; >>> psi4.set_memory(2004088624.9) # 2004088624; >>> psi4.set_memory(1.0e9) # 1000000000; >>> psi4.set_memory('600 mb') # 600000000; >>> psi4.set_memory('600.0 MiB') # 629145600; >>> psi4.set_memory('.6 Gb') # 600000000; >>> psi4.set_memory(' 100000000kB ') # 100000000000; >>> psi4.set_memory('2 eb') # 2000000000000000000. >>> # Bad examples; >>> psi4.set_memory({}) # odd type; >>> psi4.set_memory('') # no info; >>> psi4.set_memory(""8 dimms"") # unacceptable units; >>> psi4.set_memory(""1e5 gb"") # string w/ exponent; >>> psi4.set_memory(""5e5"") # string w/o units; >>> psi4.set_memory(2000) # mem too small; >>> psi4.set_memory(-5e5) # negative (and too small). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.set_memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.set_memory.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.set_memory.html:673,Security,Validat,ValidationError,673,"﻿. set_memory. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. set_memory¶. psi4.driver.p4util.set_memory(inputval, execute=True, quiet=False)[source]¶; Reset the total memory allocation. Parameters:. inputval (Union[str, int, float]) – Memory value. An Integer or float is taken literally as bytes to be set.; A string is taken as a unit-containing value (e.g., 30 mb), which is; case-insensitive.; execute (bool) – When False, interpret inputval without setting in Psi4 core.; quiet (bool) – When True, do not print to the output file. Returns:; Number of bytes of memory set. Return type:; int. Raises:; ValidationError – When <500MiB or disallowed type or misformatted. Examples; >>> # [1] Passing absolute number of bytes; >>> psi4.set_memory(600000000); >>> psi4.get_memory(); Out[1]: 600000000L. >>> # [2] Passing memory value as string with units; >>> psi4.set_memory('30 GB'); >>> psi4.get_memory(); Out[2]: 30000000000L. >>> # Good examples; >>> psi4.set_memory(800000000) # 800000000; >>> psi4.set_memory(2004088624.9) # 2004088624; >>> psi4.set_memory(1.0e9) # 1000000000; >>> psi4.set_memory('600 mb') # 600000000; >>> psi4.set_memory('600.0 MiB') # 629145600; >>> psi4.set_memory('.6 Gb') # 600000000; >>> psi4.set_memory(' 100000000kB ') # 100000000000; >>> psi4.set_memory('2 eb') # 2000000000000000000. >>> # Bad examples; >>> psi4.set_memory({}) # odd type; >>> psi4.set_memory('') # no info; >>> psi4.set_memory(""8 dimms"") # unacceptable units; >>> psi4.set_memory(""1e5 gb"") # string w/ exponent; >>> psi4.set_memory(""5e5"") # string w/o units; >>> psi4.set_memory(2000) # mem too small; >>> psi4.set_memory(-5e5) # negative (and too small). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.set_memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.set_memory.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.set_module_options.html:674,Deployability,update,updated,674,"﻿. set_module_options. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_module_options. set_module_options¶. psi4.driver.p4util.set_module_options(module, options_dict)[source]¶; Sets Psi4 module options from a module specification and input dictionary. Deprecated since version 1.5: Use psi4.driver.p4util.set_options() instead. Return type:; None. Parameters:. module (str) – ; options_dict (Dict[str, Any]) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_module_options. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.set_module_options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.set_module_options.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.set_options.html:982,Deployability,update,updated,982,"﻿. set_options. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_options. set_options¶. psi4.driver.p4util.set_options(options_dict, verbose=1)[source]¶; Sets Psi4 options from an input dictionary. Parameters:. options_dict (Dict[str, Any]) – Dictionary where keys are case insensitive and values are the option value. For global options, keys are ""<option_name>"".; For option local to “<module_name>”, keys are ""<module_name>__<option_name>""; (double underscore separation).; For contents that would be in pcm = {...}, use ""PCM__INPUT"" key. verbose (int) – Control print volume. Return type:; None. Examples; >>> psi4.set_options({; ""basis"": ""cc-pvtz"",; ""df_basis_scf"": ""cc-pvtz-jkfit"",; ""scf__reference"": ""uhf"",; ""print"": 2}). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_options. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.set_options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.set_options.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html:3873,Deployability,update,updated,3873,"- D_{i})^-1\) where; D is an approximation of the diagonal of the matrix that is being; diagonalized. Parameters:. R_k (single vector) – The residual vector; w_k (float) – The eigenvalue associated with this vector. Returns:; new_X_k – The preconditioned residual vector, a correction vector that will be; used to augment the guess space. Return type:; single vector. abstract residue(X, so_prop_ints)[source]¶; Compute residue. Parameters:. X – The single vector to use to compute the property.; so_prop_ints – Property integrals in SO basis for the desired transition property.; prefactor – Optional float scaling factor. Returns:; residue – The transition property. Return type:; Any. abstract vector_axpy(X, Y)[source]¶; Compute scaled vector addition operation a*X + Y. Parameters:. a (float) – The scale factor applied to X; X (singlet vector) – The vector which will be scaled and added to Y; Y (single vector) – The vector which the result of a*X is added to. Returns:; Y – The solver assumes that Y is updated, and returned. So it is safe to; avoid a copy of Y if possible. Return type:; single vector. abstract vector_copy()[source]¶; Make a copy of a vector. Parameters:; X (single vector) – The vector to copy. Returns:; X’ – A copy of X should be distinct object that can be modified; independently of the passed object, Has the same data when returned. Return type:; single vector. abstract static vector_dot(X, Y)[source]¶; Compute a dot product between two vectors. Parameters:. X (single vector) – ; Y (single vector) – . Returns:; a – The dot product (X x Y). Return type:; float. abstract vector_scale(X)[source]¶; Scale a vector by some factor. Parameters:. a (float) – The scale facor; X (single vector) – The vector that will be scaled. Returns:; X – The solver assumes that the passed vector is modifed. So it is save; to avoid a copy of X if possible. Return type:; single vector. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · .",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html:4964,Deployability,update,updated,4964,"nvalue associated with this vector. Returns:; new_X_k – The preconditioned residual vector, a correction vector that will be; used to augment the guess space. Return type:; single vector. abstract residue(X, so_prop_ints)[source]¶; Compute residue. Parameters:. X – The single vector to use to compute the property.; so_prop_ints – Property integrals in SO basis for the desired transition property.; prefactor – Optional float scaling factor. Returns:; residue – The transition property. Return type:; Any. abstract vector_axpy(X, Y)[source]¶; Compute scaled vector addition operation a*X + Y. Parameters:. a (float) – The scale factor applied to X; X (singlet vector) – The vector which will be scaled and added to Y; Y (single vector) – The vector which the result of a*X is added to. Returns:; Y – The solver assumes that Y is updated, and returned. So it is safe to; avoid a copy of Y if possible. Return type:; single vector. abstract vector_copy()[source]¶; Make a copy of a vector. Parameters:; X (single vector) – The vector to copy. Returns:; X’ – A copy of X should be distinct object that can be modified; independently of the passed object, Has the same data when returned. Return type:; single vector. abstract static vector_dot(X, Y)[source]¶; Compute a dot product between two vectors. Parameters:. X (single vector) – ; Y (single vector) – . Returns:; a – The dot product (X x Y). Return type:; float. abstract vector_scale(X)[source]¶; Scale a vector by some factor. Parameters:. a (float) – The scale facor; X (single vector) – The vector that will be scaled. Returns:; X – The solver assumes that the passed vector is modifed. So it is save; to avoid a copy of X if possible. Return type:; single vector. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SolverEngine. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html:528,Modifiability,inherit,inherit,528,"﻿. SolverEngine. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SolverEngine. SolverEngine¶. class psi4.driver.p4util.SolverEngine[source]¶; Bases: ABC; Abstract Base Class defining the API for a matrix-vector product object; required by solvers.; Engines implement the correct product functions for iterative solvers that; do not require the target matrix be stored directly.; Classes intended to be used as an engine for davidson_solver() or; hamiltonian_solver() should inherit from this base class to ensure; that the required methods are defined. Note; The vector referred to here is intentionally vague, the solver; does not care what it is and only holds individual or sets of; them. In fact an individual vector could be split across two; elements in a list, such as for different spin.; Whatever data type is used and individual vector should be a; single element in a list such that len(list) returns the number; of vector-like objects. Methods Summary. compute_products(X); Compute a Matrix * trial vector products. new_vector(); Return a new vector object. precondition(R_k, w_k); Apply the preconditioner to a Residual vector. residue(X, so_prop_ints); Compute residue. vector_axpy(X, Y); Compute scaled vector addition operation a*X + Y. vector_copy(); Make a copy of a vector. vector_dot(X, Y); Compute a dot product between two vectors. vector_scale(X); Scale a vector by some factor. Methods Documentation. abstract compute_products(X)[source]¶; Compute a Matrix * trial vector products. Parameters:; X (List[vector]) – Trial vectors. Returns:. Expected by davidson_solver(); AX (List[vector]) – The product \(A x X_{i}\) for each X_{i} in X, in that; order. Where A is the hermitian matrix to be diagonalized.; len(AX) == len(X); n (int) – The number of products that were evaluated. If the object implements; product caching this may be less than len(X); Expected by hamiltonian_solver(); H1X (List[vector]) – The product \(H1 ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html:3905,Safety,safe,safe,3905,"l of the matrix that is being; diagonalized. Parameters:. R_k (single vector) – The residual vector; w_k (float) – The eigenvalue associated with this vector. Returns:; new_X_k – The preconditioned residual vector, a correction vector that will be; used to augment the guess space. Return type:; single vector. abstract residue(X, so_prop_ints)[source]¶; Compute residue. Parameters:. X – The single vector to use to compute the property.; so_prop_ints – Property integrals in SO basis for the desired transition property.; prefactor – Optional float scaling factor. Returns:; residue – The transition property. Return type:; Any. abstract vector_axpy(X, Y)[source]¶; Compute scaled vector addition operation a*X + Y. Parameters:. a (float) – The scale factor applied to X; X (singlet vector) – The vector which will be scaled and added to Y; Y (single vector) – The vector which the result of a*X is added to. Returns:; Y – The solver assumes that Y is updated, and returned. So it is safe to; avoid a copy of Y if possible. Return type:; single vector. abstract vector_copy()[source]¶; Make a copy of a vector. Parameters:; X (single vector) – The vector to copy. Returns:; X’ – A copy of X should be distinct object that can be modified; independently of the passed object, Has the same data when returned. Return type:; single vector. abstract static vector_dot(X, Y)[source]¶; Compute a dot product between two vectors. Parameters:. X (single vector) – ; Y (single vector) – . Returns:; a – The dot product (X x Y). Return type:; float. abstract vector_scale(X)[source]¶; Scale a vector by some factor. Parameters:. a (float) – The scale facor; X (single vector) – The vector that will be scaled. Returns:; X – The solver assumes that the passed vector is modifed. So it is save; to avoid a copy of X if possible. Return type:; single vector. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SolverEngine. © C",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html:3914,Safety,avoid,avoid,3914,"l of the matrix that is being; diagonalized. Parameters:. R_k (single vector) – The residual vector; w_k (float) – The eigenvalue associated with this vector. Returns:; new_X_k – The preconditioned residual vector, a correction vector that will be; used to augment the guess space. Return type:; single vector. abstract residue(X, so_prop_ints)[source]¶; Compute residue. Parameters:. X – The single vector to use to compute the property.; so_prop_ints – Property integrals in SO basis for the desired transition property.; prefactor – Optional float scaling factor. Returns:; residue – The transition property. Return type:; Any. abstract vector_axpy(X, Y)[source]¶; Compute scaled vector addition operation a*X + Y. Parameters:. a (float) – The scale factor applied to X; X (singlet vector) – The vector which will be scaled and added to Y; Y (single vector) – The vector which the result of a*X is added to. Returns:; Y – The solver assumes that Y is updated, and returned. So it is safe to; avoid a copy of Y if possible. Return type:; single vector. abstract vector_copy()[source]¶; Make a copy of a vector. Parameters:; X (single vector) – The vector to copy. Returns:; X’ – A copy of X should be distinct object that can be modified; independently of the passed object, Has the same data when returned. Return type:; single vector. abstract static vector_dot(X, Y)[source]¶; Compute a dot product between two vectors. Parameters:. X (single vector) – ; Y (single vector) – . Returns:; a – The dot product (X x Y). Return type:; float. abstract vector_scale(X)[source]¶; Scale a vector by some factor. Parameters:. a (float) – The scale facor; X (single vector) – The vector that will be scaled. Returns:; X – The solver assumes that the passed vector is modifed. So it is save; to avoid a copy of X if possible. Return type:; single vector. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SolverEngine. © C",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html:4707,Safety,avoid,avoid,4707,"nvalue associated with this vector. Returns:; new_X_k – The preconditioned residual vector, a correction vector that will be; used to augment the guess space. Return type:; single vector. abstract residue(X, so_prop_ints)[source]¶; Compute residue. Parameters:. X – The single vector to use to compute the property.; so_prop_ints – Property integrals in SO basis for the desired transition property.; prefactor – Optional float scaling factor. Returns:; residue – The transition property. Return type:; Any. abstract vector_axpy(X, Y)[source]¶; Compute scaled vector addition operation a*X + Y. Parameters:. a (float) – The scale factor applied to X; X (singlet vector) – The vector which will be scaled and added to Y; Y (single vector) – The vector which the result of a*X is added to. Returns:; Y – The solver assumes that Y is updated, and returned. So it is safe to; avoid a copy of Y if possible. Return type:; single vector. abstract vector_copy()[source]¶; Make a copy of a vector. Parameters:; X (single vector) – The vector to copy. Returns:; X’ – A copy of X should be distinct object that can be modified; independently of the passed object, Has the same data when returned. Return type:; single vector. abstract static vector_dot(X, Y)[source]¶; Compute a dot product between two vectors. Parameters:. X (single vector) – ; Y (single vector) – . Returns:; a – The dot product (X x Y). Return type:; float. abstract vector_scale(X)[source]¶; Scale a vector by some factor. Parameters:. a (float) – The scale facor; X (single vector) – The vector that will be scaled. Returns:; X – The solver assumes that the passed vector is modifed. So it is save; to avoid a copy of X if possible. Return type:; single vector. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SolverEngine. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.SolverEngine.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.spectrum.html:3607,Deployability,update,updated,3607,"sian”, “lorentzian”}; The lineshape function to use in the fitting. Default is gaussian.; gamma (float) – Full width at half maximum of the lineshape function.; Default is 0.2 au of angular frequency.; This value is expected in atomic units of angular frequency.; npoints (int) – How many points to generate for the x axis. Default is 5000.; out_units (str) – Units for the output array x, the x axis of the spectrum plot.; Default is wavelengths in nanometers.; Valid (and case-insensitive) values for the units are:. au atomic units of angular frequency; Eh atomic units of energy; eV; nm; THz. Returns:; spectrum – The fitted electronic absorption spectrum, with units for the x axis specified by the out_units parameter.; This is a dictionary containing the convoluted (key: convolution) and the infinitely narrow spectra (key: sticks).; {""convolution"": {""x"": np.ndarray, ""y"": np.ndarray},; ""sticks"": {""poles"": np.ndarray, ""residues"": np.ndarray}}. Return type:; Dict[str, numpy.ndarray]. Notes. Conversion of the broadening parameter \(\gamma\).; The lineshape functions are formulated as functions of the angular frequency \(\omega\).; When converting to other physical quantities, the broadening parameter has to be modified accordingly.; If \(\gamma_{\omega}\) is the chosen broadening parameter then:. Wavelength: \(gamma_{\lambda} = \frac{\lambda_{ij}^{2}}{2\pi c}\gamma_{\omega}\); Frequency: \(gamma_{\nu} = \frac{\gamma_{\omega}}{2\pi}\); Energy: \(gamma_{E} = \gamma_{\omega}\hbar\). References; A. Rizzo, S. Coriani, K. Ruud, “Response Function Theory Computational Approaches to Linear and Nonlinear Optical Spectroscopy”. In Computational Strategies for Spectroscopy.; https://doi.org/10.1002/9781118008720.ch2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; spectrum. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.spectrum.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.spectrum.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.spectrum.html:2261,Energy Efficiency,energy,energy,2261,"ation energies.; These are expected in atomic units of angular frequency.; residues (Union[List[float], ndarray]) – Residues of the linear response functions, i.e. transition dipole moments (OPA) and rotatory strengths (ECD).; These are expected in atomic units.; kind (str) – {“opa”, “ecd”}; Which kind of spectrum to generate, one-photon absorption (“opa”) or electronic circular dichroism (“ecd”).; Default is opa.; lineshape (str) – {“gaussian”, “lorentzian”}; The lineshape function to use in the fitting. Default is gaussian.; gamma (float) – Full width at half maximum of the lineshape function.; Default is 0.2 au of angular frequency.; This value is expected in atomic units of angular frequency.; npoints (int) – How many points to generate for the x axis. Default is 5000.; out_units (str) – Units for the output array x, the x axis of the spectrum plot.; Default is wavelengths in nanometers.; Valid (and case-insensitive) values for the units are:. au atomic units of angular frequency; Eh atomic units of energy; eV; nm; THz. Returns:; spectrum – The fitted electronic absorption spectrum, with units for the x axis specified by the out_units parameter.; This is a dictionary containing the convoluted (key: convolution) and the infinitely narrow spectra (key: sticks).; {""convolution"": {""x"": np.ndarray, ""y"": np.ndarray},; ""sticks"": {""poles"": np.ndarray, ""residues"": np.ndarray}}. Return type:; Dict[str, numpy.ndarray]. Notes. Conversion of the broadening parameter \(\gamma\).; The lineshape functions are formulated as functions of the angular frequency \(\omega\).; When converting to other physical quantities, the broadening parameter has to be modified accordingly.; If \(\gamma_{\omega}\) is the chosen broadening parameter then:. Wavelength: \(gamma_{\lambda} = \frac{\lambda_{ij}^{2}}{2\pi c}\gamma_{\omega}\); Frequency: \(gamma_{\nu} = \frac{\gamma_{\omega}}{2\pi}\); Energy: \(gamma_{E} = \gamma_{\omega}\hbar\). References; A. Rizzo, S. Coriani, K. Ruud, “Response Functi",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.spectrum.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.spectrum.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.spectrum.html:3137,Energy Efficiency,Energy,Energy,3137,"sian”, “lorentzian”}; The lineshape function to use in the fitting. Default is gaussian.; gamma (float) – Full width at half maximum of the lineshape function.; Default is 0.2 au of angular frequency.; This value is expected in atomic units of angular frequency.; npoints (int) – How many points to generate for the x axis. Default is 5000.; out_units (str) – Units for the output array x, the x axis of the spectrum plot.; Default is wavelengths in nanometers.; Valid (and case-insensitive) values for the units are:. au atomic units of angular frequency; Eh atomic units of energy; eV; nm; THz. Returns:; spectrum – The fitted electronic absorption spectrum, with units for the x axis specified by the out_units parameter.; This is a dictionary containing the convoluted (key: convolution) and the infinitely narrow spectra (key: sticks).; {""convolution"": {""x"": np.ndarray, ""y"": np.ndarray},; ""sticks"": {""poles"": np.ndarray, ""residues"": np.ndarray}}. Return type:; Dict[str, numpy.ndarray]. Notes. Conversion of the broadening parameter \(\gamma\).; The lineshape functions are formulated as functions of the angular frequency \(\omega\).; When converting to other physical quantities, the broadening parameter has to be modified accordingly.; If \(\gamma_{\omega}\) is the chosen broadening parameter then:. Wavelength: \(gamma_{\lambda} = \frac{\lambda_{ij}^{2}}{2\pi c}\gamma_{\omega}\); Frequency: \(gamma_{\nu} = \frac{\gamma_{\omega}}{2\pi}\); Energy: \(gamma_{E} = \gamma_{\omega}\hbar\). References; A. Rizzo, S. Coriani, K. Ruud, “Response Function Theory Computational Approaches to Linear and Nonlinear Optical Spectroscopy”. In Computational Strategies for Spectroscopy.; https://doi.org/10.1002/9781118008720.ch2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; spectrum. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.spectrum.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.spectrum.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.state_to_atomicinput.html:1084,Deployability,update,updated,1084,"﻿. state_to_atomicinput. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; state_to_atomicinput. state_to_atomicinput¶. psi4.driver.p4util.state_to_atomicinput(*, driver, method, basis=None, molecule=None, function_kwargs=None)[source]¶; Form a QCSchema for job input from the current state of PSI4 settings. Parameters:. driver (str) – {‘energy’, ‘gradient’, ‘hessian’}; Target derivative level.; method (str) – Level of theory for job.; basis (Optional[str]) – Basis set for job, if not to be extracted from BASIS.; molecule (Optional[Molecule]) – Molecule for job, if not the active one from; get_active_molecule().; function_kwargs (Optional[Dict[str, Any]]) – Additional keyword arguments to pass to the driver function. Returns:; QCSchema instance including current keyword set and provenance. Return type:; AtomicInput. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; state_to_atomicinput. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.state_to_atomicinput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.state_to_atomicinput.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.state_to_atomicinput.html:391,Energy Efficiency,energy,energy,391,"﻿. state_to_atomicinput. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; state_to_atomicinput. state_to_atomicinput¶. psi4.driver.p4util.state_to_atomicinput(*, driver, method, basis=None, molecule=None, function_kwargs=None)[source]¶; Form a QCSchema for job input from the current state of PSI4 settings. Parameters:. driver (str) – {‘energy’, ‘gradient’, ‘hessian’}; Target derivative level.; method (str) – Level of theory for job.; basis (Optional[str]) – Basis set for job, if not to be extracted from BASIS.; molecule (Optional[Molecule]) – Molecule for job, if not the active one from; get_active_molecule().; function_kwargs (Optional[Dict[str, Any]]) – Additional keyword arguments to pass to the driver function. Returns:; QCSchema instance including current keyword set and provenance. Return type:; AtomicInput. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; state_to_atomicinput. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.state_to_atomicinput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.state_to_atomicinput.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.temp_circular_import_blocker.html:469,Deployability,update,updated,469,"﻿. temp_circular_import_blocker. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; temp_circular_import_blocker. temp_circular_import_blocker¶. psi4.driver.p4util.temp_circular_import_blocker()[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; temp_circular_import_blocker. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.p4util.temp_circular_import_blocker.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.p4util.temp_circular_import_blocker.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ParsingError.html:198,Availability,Error,Error,198,"﻿. ParsingError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. ParsingError¶. exception psi4.driver.ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file.; Only used by untested distributed CC response machinery. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ParsingError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ParsingError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ParsingError.html:252,Availability,error,error,252,"﻿. ParsingError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. ParsingError¶. exception psi4.driver.ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file.; Only used by untested distributed CC response machinery. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ParsingError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ParsingError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ParsingError.html:569,Deployability,update,updated,569,"﻿. ParsingError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. ParsingError¶. exception psi4.driver.ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file.; Only used by untested distributed CC response machinery. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ParsingError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ParsingError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ParsingError.html:258,Integrability,message,message,258,"﻿. ParsingError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. ParsingError¶. exception psi4.driver.ParsingError(msg)[source]¶; Error called for problems parsing a text file. Prints error message; msg to standard output stream and output file.; Only used by untested distributed CC response machinery. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ParsingError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ParsingError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ParsingError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.PastureRequiredError.html:233,Availability,Error,Error,233,"﻿. PastureRequiredError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; PastureRequiredError. PastureRequiredError¶. exception psi4.driver.PastureRequiredError(option)[source]¶; Error called when the specified value of option requires some; module(s) from Psi4Pasture, but could not be imported. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; PastureRequiredError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.PastureRequiredError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.PastureRequiredError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.PastureRequiredError.html:556,Deployability,update,updated,556,"﻿. PastureRequiredError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; PastureRequiredError. PastureRequiredError¶. exception psi4.driver.PastureRequiredError(option)[source]¶; Error called when the specified value of option requires some; module(s) from Psi4Pasture, but could not be imported. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; PastureRequiredError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.PastureRequiredError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.PastureRequiredError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.pcm_helper.html:561,Deployability,update,updated,561,"﻿. pcm_helper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; pcm_helper. pcm_helper¶. psi4.driver.pcm_helper(block)[source]¶; Helper to specify the multiline PCMSolver syntax for PCM.; Prefer to use set_options() with key ""PCM__INPUT"". Parameters:; block (str) – Text that goes in a PSIthon pcm = {...} block. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; pcm_helper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.pcm_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.pcm_helper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.process_input.html:1075,Deployability,update,updated,1075,"﻿. process_input. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; process_input. process_input¶. psi4.driver.process_input(raw_input, print_level=1)[source]¶; Function to preprocess raw input, the text of the input file, then; parse it, validate it for format, and convert it into legitimate Python.; Does a series of regular expression filters, where the matching portion of the; input is replaced by the output of the corresponding function (in this; module) call. Returns a string concatenating module import lines, a copy; of the user’s .psi4rc files, a setting of the scratch directory, a dummy; molecule, and the processed raw_input. Parameters:. raw_input (str) – Input in a mixture of Python and PSIthon syntax.; print_level (int) – raw_input is printed to the output file unless print_level =0. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; process_input. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.process_input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.process_input.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.process_input.html:291,Security,validat,validate,291,"﻿. process_input. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; process_input. process_input¶. psi4.driver.process_input(raw_input, print_level=1)[source]¶; Function to preprocess raw input, the text of the input file, then; parse it, validate it for format, and convert it into legitimate Python.; Does a series of regular expression filters, where the matching portion of the; input is replaced by the output of the corresponding function (in this; module) call. Returns a string concatenating module import lines, a copy; of the user’s .psi4rc files, a setting of the scratch directory, a dummy; molecule, and the processed raw_input. Parameters:. raw_input (str) – Input in a mixture of Python and PSIthon syntax.; print_level (int) – raw_input is printed to the output file unless print_level =0. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; process_input. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.process_input.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.process_input.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html:1605,Deployability,Configurat,Configuration,1605," mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html:1720,Deployability,configurat,configurational,1720,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 0",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html:2731,Deployability,update,updated,2731,"luster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html:1605,Modifiability,Config,Configuration,1605," mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html:1720,Modifiability,config,configurational,1720,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prop. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 0",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html:996,Performance,optimiz,optimized,996," .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; prop. prop¶. psi4.driver.prop(*args, **kwargs)¶; Function to compute various properties. Aliases:; prop(). Returns:; none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html:1111,Performance,optimiz,optimized,1111,"rgs)¶; Function to compute various properties. Aliases:; prop(). Returns:; none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (Li",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html:1227,Performance,optimiz,optimized,1227,"none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html:1312,Performance,optimiz,optimized,1312," limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.prop.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html:1637,Deployability,Configurat,Configuration,1637," mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html:1752,Deployability,configurat,configurational,1752,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tues",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html:2769,Deployability,update,updated,2769," singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html:1637,Modifiability,Config,Configuration,1637," mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html:1752,Modifiability,config,configurational,1752,"ole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole and quadrupole. molecule (molecule) – h2o || etc.; The target molecule, if not the last molecule defined. Examples:. >>> # [1] Optical rotation calculation; >>> properties('cc2', properties=['rotation']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; properties. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tues",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html:1028,Performance,optimiz,optimized,1028,";  · . PSI4. PSI4 API: Linking C++ and Python; properties. properties¶. psi4.driver.properties(*args, **kwargs)[source]¶; Function to compute various properties. Aliases:; prop(). Returns:; none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html:1143,Performance,optimiz,optimized,1143,"rce]¶; Function to compute various properties. Aliases:; prop(). Returns:; none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (Li",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html:1259,Performance,optimiz,optimized,1259,"none. Caution; Some features are not yet implemented. Buy a developer a coffee. This function at present has a limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html:1344,Performance,optimiz,optimized,1344," limited functionality.; Consult the keywords sections of other modules for further property capabilities. Name; Calls Method; Reference; Supported Properties. scf; Self-consistent field method(s); RHF/ROHF/UHF; Listed here. hf; HF Self-consistent field method(s); RHF/ROHF/UHF; Listed here. mp2; MP2 with density fitting only (mp2_type df); RHF; Listed here. cc2; 2nd-order approximate CCSD; RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. ccsd; Coupled cluster singles and doubles (CCSD); RHF; dipole, quadrupole, polarizability, rotation, roa_tensor. dct; density cumulant (functional) theory; [manual]; RHF/UHF; Listed here. omp2; orbital-optimized second-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp3; orbital-optimized third-order; MP perturbation theory; [manual]; RHF/UHF; Listed here; Density fitted only. omp2.5; orbital-optimized MP2.5; [manual]; RHF/UHF; Listed here; Density fitted only. olccd; orbital optimized LCCD; [manual]; RHF/UHF; Listed here; Density fitted only. eom-cc2; 2nd-order approximate EOM-CCSD; RHF; oscillator_strength, rotational_strength. eom-ccsd; Equation-of-motion CCSD (EOM-CCSD); RHF; oscillator_strength, rotational_strength. cisd, cisdt,; cisdt, cisdtq,; ci5, …, fci; Configuration interaction; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. casscf, rasscf; Multi-configurational SCF; RHF/ROHF; Listed here, transition_dipole,; transition_quadrupole. adc(0), adc(1),; …, adc(3),; cvs-adc(0), …; cvs-adc(3); Algebraic-diagrammatic construction methods; [manual]; RHF/UHF; dipole, transition_dipole, oscillator_strength,; rotational_strength. Parameters:. name (str) – 'ccsd' || etc.; First argument, usually unlabeled. Indicates the computational method; to be applied to the system. properties (List[str]) – \(\Rightarrow\) [] \(\Leftarrow\) || ['rotation', 'polarizability', 'oscillator_strength', 'roa'] || etc.; Indicates which properties should be computed. Defaults to dipole a",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.properties.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.properties.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.PsiException.html:193,Availability,Error,Error,193,"﻿. PsiException. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; PsiException. PsiException¶. exception psi4.driver.PsiException[source]¶; Error class for PSI4. Flags success as False (triggering coffee). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; PsiException. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.PsiException.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.PsiException.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.PsiException.html:456,Deployability,update,updated,456,"﻿. PsiException. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; PsiException. PsiException¶. exception psi4.driver.PsiException[source]¶; Error class for PSI4. Flags success as False (triggering coffee). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; PsiException. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.PsiException.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.PsiException.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:480,Availability,toler,tolerance,480,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (Optional[List]) – Keys in top level which may change between expected and computed without triggering failure.; required (Optional[List]) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:719,Availability,toler,tolerance,719,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (Optional[List]) – Keys in top level which may change between expected and computed without triggering failure.; required (Optional[List]) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:766,Availability,error,error,766,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (Optional[List]) – Keys in top level which may change between expected and computed without triggering failure.; required (Optional[List]) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:929,Availability,failure,failure,929,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (Optional[List]) – Keys in top level which may change between expected and computed without triggering failure.; required (Optional[List]) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:1086,Availability,Toler,Tolerances,1086,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (Optional[List]) – Keys in top level which may change between expected and computed without triggering failure.; required (Optional[List]) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:1192,Availability,toler,tolerance,1192,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (Optional[List]) – Keys in top level which may change between expected and computed without triggering failure.; required (Optional[List]) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:1543,Deployability,update,updated,1543,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (Optional[List]) – Keys in top level which may change between expected and computed without triggering failure.; required (Optional[List]) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html:772,Integrability,message,messages,772,"﻿. compare_vibinfos. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. compare_vibinfos¶. psi4.driver.qcdb.vib.compare_vibinfos(expected, computed, tol, label, verbose=1, forgive=None, required=None, toldict=None)[source]¶; Returns True if two dictionaries of vibration Datum objects are equivalent within a tolerance. Parameters:. expected (Dict[str, Datum]) – Reference value against which computed is compared.; computed (Dict[str, Datum]) – Input value to compare against expected. Must contain all fields of expected.; tol (float) – Absolute tolerance.; label (str) – Label for passed and error messages.; verbose (int) – Control printing.; forgive (Optional[List]) – Keys in top level which may change between expected and computed without triggering failure.; required (Optional[List]) – Keys in top level which must be present in computed. (“omega” recc. for vibs.); toldict (Optional[Dict[str, float]]) – Tolerances for specific keys. Returns:; allclose – Returns True if expected and computed are equal within tolerance; False otherwise. Return type:; bool. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); compare_vibinfos. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.compare_vibinfos.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.filter_nonvib.html:1343,Deployability,update,updated,1343,"﻿. filter_nonvib. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); filter_nonvib. filter_nonvib¶. psi4.driver.qcdb.vib.filter_nonvib(vibinfo, remove=None)[source]¶; From a dictionary of vibration Datum, remove normal coordinates. Parameters:. vibinfo (Dict[str, Datum]) – Results of Hessian analysis.; remove (Optional[List[int]]) – 0-indexed indices of normal modes to remove from vibinfo. If; None, non-vibrations (R, T, or TR as labeled in vibinfo[‘TRV’]); will be removed. Returns:; Copy of input vibinfo with the specified modes removed from all; dictionary entries. Return type:; dict. Examples; >>> # after a harmonic analysis, remove first translations and rotations and then all non-A1 vibs; >>> allnormco = harmonic_analysis(...); >>> allvibs = filter_nonvib(allnormco); >>> a1vibs = filter_nonvib(allvibs, remove=[i for i, d in enumerate(allvibs['gamma'].data) if d != 'A1']). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); filter_nonvib. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.filter_nonvib.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.filter_nonvib.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.filter_omega_to_real.html:796,Deployability,update,updated,796,"﻿. filter_omega_to_real. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); filter_omega_to_real. filter_omega_to_real¶. psi4.driver.qcdb.vib.filter_omega_to_real(omega)[source]¶; Returns ndarray (float) of omega (complex) where imaginary entries are converted to negative reals. Return type:; ndarray. Parameters:; omega (ndarray) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); filter_omega_to_real. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.filter_omega_to_real.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.filter_omega_to_real.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html:2831,Deployability,update,updated,2831,"Optional[ndarray]) – (3, 3 * nat) dipole derivatives in atomic units, [Eh a0/u] or [(e a0/a0)^2/u]; project_trans (bool) – Idealized translations projected out of final vibrational analysis.; project_rot (bool) – Idealized rotations projected out of final vibrational analysis. Returns:; Returns dictionary of vibration Datum objects (fields: label units data comment).; Also returns text suitable for printing. Return type:; dict, str. Notes. key; description (label & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; ndarray(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy. ndarray(ndof) int. TRV; translation/rotation/vibration. ndarray(ndof) str ‘TR’ or ‘V’ or ‘-’ for partial. gamma; irreducible representation. ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1/2; ndarray(ndof) float (+/0). Xtp0; Turning point v=0; a0; ndarray(ndof) float (+/0). theta_vib; char temp; K; ndarray(ndof) float (+/0). IR_intensity; infrared intensity; km/mol; ndarray(ndof) float (+/+). Examples; >>> # displacement of first atom in highest energy mode; >>> vibinfo['x'].data[:, -1].reshape(nat, 3)[0]. >>> # remove translations & rotations; >>> vibonly = filter_nonvib(vibinfo). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); harmonic_analysis. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html:1935,Energy Efficiency,reduce,reduced,1935,"Optional[ndarray]) – (3, 3 * nat) dipole derivatives in atomic units, [Eh a0/u] or [(e a0/a0)^2/u]; project_trans (bool) – Idealized translations projected out of final vibrational analysis.; project_rot (bool) – Idealized rotations projected out of final vibrational analysis. Returns:; Returns dictionary of vibration Datum objects (fields: label units data comment).; Also returns text suitable for printing. Return type:; dict, str. Notes. key; description (label & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; ndarray(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy. ndarray(ndof) int. TRV; translation/rotation/vibration. ndarray(ndof) str ‘TR’ or ‘V’ or ‘-’ for partial. gamma; irreducible representation. ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1/2; ndarray(ndof) float (+/0). Xtp0; Turning point v=0; a0; ndarray(ndof) float (+/0). theta_vib; char temp; K; ndarray(ndof) float (+/0). IR_intensity; infrared intensity; km/mol; ndarray(ndof) float (+/+). Examples; >>> # displacement of first atom in highest energy mode; >>> vibinfo['x'].data[:, -1].reshape(nat, 3)[0]. >>> # remove translations & rotations; >>> vibonly = filter_nonvib(vibinfo). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); harmonic_analysis. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html:2388,Energy Efficiency,energy,energy,2388,"Optional[ndarray]) – (3, 3 * nat) dipole derivatives in atomic units, [Eh a0/u] or [(e a0/a0)^2/u]; project_trans (bool) – Idealized translations projected out of final vibrational analysis.; project_rot (bool) – Idealized rotations projected out of final vibrational analysis. Returns:; Returns dictionary of vibration Datum objects (fields: label units data comment).; Also returns text suitable for printing. Return type:; dict, str. Notes. key; description (label & comment); units; data (real/imaginary modes). omega; frequency; cm^-1; ndarray(ndof) complex (real/imag). q; normal mode, normalized mass-weighted; a0 u^1/2; ndarray(ndof, ndof) float. w; normal mode, un-mass-weighted; a0; ndarray(ndof, ndof) float. x; normal mode, normalized un-mass-weighted; a0; ndarray(ndof, ndof) float. degeneracy; degree of degeneracy. ndarray(ndof) int. TRV; translation/rotation/vibration. ndarray(ndof) str ‘TR’ or ‘V’ or ‘-’ for partial. gamma; irreducible representation. ndarray(ndof) str irrep or None if unclassifiable. mu; reduced mass; u; ndarray(ndof) float (+/+). k; force constant; mDyne/A; ndarray(ndof) float (+/-). DQ0; RMS deviation v=0; a0 u^1/2; ndarray(ndof) float (+/0). Qtp0; Turning point v=0; a0 u^1/2; ndarray(ndof) float (+/0). Xtp0; Turning point v=0; a0; ndarray(ndof) float (+/0). theta_vib; char temp; K; ndarray(ndof) float (+/0). IR_intensity; infrared intensity; km/mol; ndarray(ndof) float (+/+). Examples; >>> # displacement of first atom in highest energy mode; >>> vibinfo['x'].data[:, -1].reshape(nat, 3)[0]. >>> # remove translations & rotations; >>> vibonly = filter_nonvib(vibinfo). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); harmonic_analysis. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.harmonic_analysis.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.hessian_symmetrize.html:936,Deployability,update,updated,936,"﻿. hessian_symmetrize. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); hessian_symmetrize. hessian_symmetrize¶. psi4.driver.qcdb.vib.hessian_symmetrize(hess, mol)[source]¶; Apply Abelian symmetry of mol to Hessian hess. Parameters:. hess (ndarray) – (3 * nat, 3 * nat) Hessian array perhaps with jitter unbecoming a symmetric molecule.; mol (Molecule) – Molecule at which Hessian computed. Returns:; (3 * nat, 3 * nat) symmetrized Hessian array. Return type:; numpy.ndarray. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); hessian_symmetrize. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.hessian_symmetrize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.hessian_symmetrize.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.print_molden_vibs.html:1475,Deployability,update,updated,1475,"﻿. print_molden_vibs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_molden_vibs. print_molden_vibs¶. psi4.driver.qcdb.vib.print_molden_vibs(vibinfo, atom_symbol, geom, standalone=True)[source]¶; Format vibrational analysis for Molden. Parameters:. vibinfo (Dict[str, Datum]) – Holds results of vibrational analysis.; atom_symbol (Union[ndarray, List[str]]) – (nat,) element symbols for geometry of vibrational analysis.; geom (Union[ndarray, List[List[float]]]) – (nat, 3) geometry of vibrational analysis [a0].; standalone (bool) – Whether returned string prefixed “[Molden Format]” for standalone rather than append. Returns:; vibinfo formatted for Molden, including FREQ, FR-COORD, & FR-NORM-COORD fields. Return type:; str. Notes; Molden format spec from http://www.cmbi.ru.nl/molden/molden_format.html; Specifies “atomic coordinates x,y,z and atomic displacements dx,dy,dz are all in Bohr (Atomic Unit of length)”; Despite it being quite wrong, imaginary modes are represented by a negative frequency. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_molden_vibs. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.print_molden_vibs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.print_molden_vibs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.print_vibs.html:1660,Deployability,update,updated,1660,"﻿. print_vibs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_vibs. print_vibs¶. psi4.driver.qcdb.vib.print_vibs(vibinfo, atom_lbl=None, *, normco='x', shortlong=True, groupby=None, prec=4, ncprec=None)[source]¶; Pretty printer for vibrational analysis. Parameters:. vibinfo (Dict[str, Datum]) – Results of a Hessian solution.; atom_lbl (Optional[List[str]]) – Atomic symbols for printing. If None, integers used.; normco (str) – {‘q’, ‘w’, ‘x’}; Which normal coordinate definition to print (reduced mass, etc. unaffected by this parameter). Must be. q [a0 u^1/2], the mass-weighted normalized eigenvectors of the Hessian,; w [a0], the un-mass-weighted (Cartesian) of q, or; x [a0], the normalized w. shortlong (bool) – Whether normal coordinates should be in (nat, 3) True or (nat * 3, 1) False format.; groupby (Optional[int]) – How many normal coordinates per row. Defaults to 3/6 for shortlong=T/F. Value of -1 uses one row.; prec (int) – Number of decimal places for frequencies, reduced masses, etc.; ncprec (Optional[int]) – Number of decimal places for normal coordinates. Defaults to 2 for shortlong=short and 4 for shortlong=long. Returns:; String suitable for printing. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_vibs. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.print_vibs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.print_vibs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.print_vibs.html:655,Energy Efficiency,reduce,reduced,655,"﻿. print_vibs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_vibs. print_vibs¶. psi4.driver.qcdb.vib.print_vibs(vibinfo, atom_lbl=None, *, normco='x', shortlong=True, groupby=None, prec=4, ncprec=None)[source]¶; Pretty printer for vibrational analysis. Parameters:. vibinfo (Dict[str, Datum]) – Results of a Hessian solution.; atom_lbl (Optional[List[str]]) – Atomic symbols for printing. If None, integers used.; normco (str) – {‘q’, ‘w’, ‘x’}; Which normal coordinate definition to print (reduced mass, etc. unaffected by this parameter). Must be. q [a0 u^1/2], the mass-weighted normalized eigenvectors of the Hessian,; w [a0], the un-mass-weighted (Cartesian) of q, or; x [a0], the normalized w. shortlong (bool) – Whether normal coordinates should be in (nat, 3) True or (nat * 3, 1) False format.; groupby (Optional[int]) – How many normal coordinates per row. Defaults to 3/6 for shortlong=T/F. Value of -1 uses one row.; prec (int) – Number of decimal places for frequencies, reduced masses, etc.; ncprec (Optional[int]) – Number of decimal places for normal coordinates. Defaults to 2 for shortlong=short and 4 for shortlong=long. Returns:; String suitable for printing. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_vibs. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.print_vibs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.print_vibs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.print_vibs.html:1148,Energy Efficiency,reduce,reduced,1148,"﻿. print_vibs. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_vibs. print_vibs¶. psi4.driver.qcdb.vib.print_vibs(vibinfo, atom_lbl=None, *, normco='x', shortlong=True, groupby=None, prec=4, ncprec=None)[source]¶; Pretty printer for vibrational analysis. Parameters:. vibinfo (Dict[str, Datum]) – Results of a Hessian solution.; atom_lbl (Optional[List[str]]) – Atomic symbols for printing. If None, integers used.; normco (str) – {‘q’, ‘w’, ‘x’}; Which normal coordinate definition to print (reduced mass, etc. unaffected by this parameter). Must be. q [a0 u^1/2], the mass-weighted normalized eigenvectors of the Hessian,; w [a0], the un-mass-weighted (Cartesian) of q, or; x [a0], the normalized w. shortlong (bool) – Whether normal coordinates should be in (nat, 3) True or (nat * 3, 1) False format.; groupby (Optional[int]) – How many normal coordinates per row. Defaults to 3/6 for shortlong=T/F. Value of -1 uses one row.; prec (int) – Number of decimal places for frequencies, reduced masses, etc.; ncprec (Optional[int]) – Number of decimal places for normal coordinates. Defaults to 2 for shortlong=short and 4 for shortlong=long. Returns:; String suitable for printing. Return type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); print_vibs. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.print_vibs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.print_vibs.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.thermo.html:1548,Deployability,update,updated,1548,"﻿. thermo. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. thermo¶. psi4.driver.qcdb.vib.thermo(vibinfo, T, P, multiplicity, molecular_mass, E0, sigma, rot_const, rotor_type=None)[source]¶; Perform thermochemical analysis from vibrational output. Parameters:. E0 (float) – Electronic energy [Eh] at well bottom at 0 [K], CURRENT ENERGY.; molecular_mass (float) – Mass in [u] of molecule under analysis.; multiplicity (int) – Spin multiplicity of molecule under analysis.; rot_const (ndarray) – (3,) rotational constants in [cm^-1] of molecule under analysis.; sigma (int) – The rotational or external symmetry number determined from the point group.; rotor_type (Optional[str]) – The rotor type for rotational stat mech purposes: RT_ATOM, RT_LINEAR, other.; T (float) – Temperature in [K]. Psi default 298.15. Note that 273.15 is IUPAC STP.; P (float) – Pressure in [Pa]. Psi default 101325. Note that 100000 is IUPAC STP. Returns:; First is every thermochemistry component in atomic units along with input conditions.; Second is formatted presentation of analysis. Return type:; dict, str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.thermo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.thermo.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.thermo.html:448,Energy Efficiency,energy,energy,448,"﻿. thermo. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. thermo¶. psi4.driver.qcdb.vib.thermo(vibinfo, T, P, multiplicity, molecular_mass, E0, sigma, rot_const, rotor_type=None)[source]¶; Perform thermochemical analysis from vibrational output. Parameters:. E0 (float) – Electronic energy [Eh] at well bottom at 0 [K], CURRENT ENERGY.; molecular_mass (float) – Mass in [u] of molecule under analysis.; multiplicity (int) – Spin multiplicity of molecule under analysis.; rot_const (ndarray) – (3,) rotational constants in [cm^-1] of molecule under analysis.; sigma (int) – The rotational or external symmetry number determined from the point group.; rotor_type (Optional[str]) – The rotor type for rotational stat mech purposes: RT_ATOM, RT_LINEAR, other.; T (float) – Temperature in [K]. Psi default 298.15. Note that 273.15 is IUPAC STP.; P (float) – Pressure in [Pa]. Psi default 101325. Note that 100000 is IUPAC STP. Returns:; First is every thermochemistry component in atomic units along with input conditions.; Second is formatted presentation of analysis. Return type:; dict, str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.thermo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.thermo.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.thermo.html:493,Energy Efficiency,ENERGY,ENERGY,493,"﻿. thermo. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. thermo¶. psi4.driver.qcdb.vib.thermo(vibinfo, T, P, multiplicity, molecular_mass, E0, sigma, rot_const, rotor_type=None)[source]¶; Perform thermochemical analysis from vibrational output. Parameters:. E0 (float) – Electronic energy [Eh] at well bottom at 0 [K], CURRENT ENERGY.; molecular_mass (float) – Mass in [u] of molecule under analysis.; multiplicity (int) – Spin multiplicity of molecule under analysis.; rot_const (ndarray) – (3,) rotational constants in [cm^-1] of molecule under analysis.; sigma (int) – The rotational or external symmetry number determined from the point group.; rotor_type (Optional[str]) – The rotor type for rotational stat mech purposes: RT_ATOM, RT_LINEAR, other.; T (float) – Temperature in [K]. Psi default 298.15. Note that 273.15 is IUPAC STP.; P (float) – Pressure in [Pa]. Psi default 101325. Note that 100000 is IUPAC STP. Returns:; First is every thermochemistry component in atomic units along with input conditions.; Second is formatted presentation of analysis. Return type:; dict, str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.thermo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.thermo.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.thermo.html:354,Performance,Perform,Perform,354,"﻿. thermo. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. thermo¶. psi4.driver.qcdb.vib.thermo(vibinfo, T, P, multiplicity, molecular_mass, E0, sigma, rot_const, rotor_type=None)[source]¶; Perform thermochemical analysis from vibrational output. Parameters:. E0 (float) – Electronic energy [Eh] at well bottom at 0 [K], CURRENT ENERGY.; molecular_mass (float) – Mass in [u] of molecule under analysis.; multiplicity (int) – Spin multiplicity of molecule under analysis.; rot_const (ndarray) – (3,) rotational constants in [cm^-1] of molecule under analysis.; sigma (int) – The rotational or external symmetry number determined from the point group.; rotor_type (Optional[str]) – The rotor type for rotational stat mech purposes: RT_ATOM, RT_LINEAR, other.; T (float) – Temperature in [K]. Psi default 298.15. Note that 273.15 is IUPAC STP.; P (float) – Pressure in [Pa]. Psi default 101325. Note that 100000 is IUPAC STP. Returns:; First is every thermochemistry component in atomic units along with input conditions.; Second is formatted presentation of analysis. Return type:; dict, str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Psithon Functions: Invoking a Calculation; Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); thermo. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.qcdb.vib.thermo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.qcdb.vib.thermo.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMM.html:441,Deployability,update,updated,441,"﻿. QMMM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMM. QMMM¶. class psi4.driver.QMMM[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. Use psi4.driver.QMMMbohr instead. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMM.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMM.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMM.html:177,Energy Efficiency,charge,charges,177,"﻿. QMMM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMM. QMMM¶. class psi4.driver.QMMM[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. Use psi4.driver.QMMMbohr instead. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMM.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMM.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html:1425,Deployability,update,updated,1425,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html:193,Energy Efficiency,charge,charges,193,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html:250,Energy Efficiency,charge,charges,250,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html:305,Energy Efficiency,charge,charges,305,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html:441,Energy Efficiency,charge,charge,441,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html:547,Energy Efficiency,charge,charge,547,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html:644,Energy Efficiency,charge,charge,644,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html:705,Energy Efficiency,charge,charge,705,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html:769,Energy Efficiency,charge,charges,769,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html:865,Energy Efficiency,charge,charge,865,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html:981,Energy Efficiency,charge,charge,981,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html:1088,Energy Efficiency,charge,charge,1088,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html:1158,Energy Efficiency,charge,charge,1158,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html:1223,Energy Efficiency,charge,charges,1223,"﻿. QMMMbohr. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. QMMMbohr¶. class psi4.driver.QMMMbohr[source]¶; Bases: object; Hold charges and psi4.core.ExternalPotential. To add external charges to a calculation, prefer; passing the array of charges with kwarg external_potentials, as in extern2 example.; Methods Summary. addChargeAngstrom(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z); Function to add a point charge of magnitude Q at position (x, y, z) Bohr. addDiffuse(diffuse); Function to add a diffuse charge field diffuse. populateExtern(); Function to define a charge field external to the molecule through point and diffuse charges. Methods Documentation. addChargeAngstrom(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Angstroms. addChargeBohr(Q, x, y, z)[source]¶; Function to add a point charge of magnitude Q at; position (x, y, z) Bohr. addDiffuse(diffuse)[source]¶; Function to add a diffuse charge field diffuse. populateExtern()[source]¶; Function to define a charge field external to the; molecule through point and diffuse charges. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; QMMMbohr. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.QMMMbohr.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.sanitize_method.html:622,Deployability,update,updated,622,"﻿. sanitize_method. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_method. sanitize_method¶. psi4.driver.sanitize_method(name)[source]¶; Replace characters in method name so that suitable for function name or Sphinx table anchor; (both as-is) or HTML table link (replace underscore in returned string by dash). Return type:; str. Parameters:; name (str) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_method. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.sanitize_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.sanitize_method.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.sanitize_name.html:674,Deployability,update,updated,674,"﻿. sanitize_name. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_name. sanitize_name¶. psi4.driver.sanitize_name(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), -,; & , into _.; Also checks the sanitized name against a list of restricted C++ keywords. Return type:; str. Parameters:; name (str) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_name. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.sanitize_name.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.sanitize_name.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.sanitize_name.html:371,Security,sanitiz,sanitized,371,"﻿. sanitize_name. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_name. sanitize_name¶. psi4.driver.sanitize_name(name)[source]¶; Function to return name in coded form, stripped of; characters that confuse filenames, characters into lowercase,; + into p, * into s, and (, ), -,; & , into _.; Also checks the sanitized name against a list of restricted C++ keywords. Return type:; str. Parameters:; name (str) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; sanitize_name. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.sanitize_name.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.sanitize_name.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html:270,Availability,Error,Error,270,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. e_conv¶; Change in energy for last iteration. Type:; float. d_conv¶; RMS change in density for last iteration. Type:; float. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html:1196,Deployability,update,updated,1196,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. e_conv¶; Change in energy for last iteration. Type:; float. d_conv¶; RMS change in density for last iteration. Type:; float. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html:572,Energy Efficiency,energy,energy,572,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. e_conv¶; Change in energy for last iteration. Type:; float. d_conv¶; RMS change in density for last iteration. Type:; float. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html:886,Energy Efficiency,energy,energy,886,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. e_conv¶; Change in energy for last iteration. Type:; float. d_conv¶; RMS change in density for last iteration. Type:; float. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html:365,Integrability,rout,routine,365,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. e_conv¶; Change in energy for last iteration. Type:; float. d_conv¶; RMS change in density for last iteration. Type:; float. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html:461,Integrability,rout,routine,461,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. e_conv¶; Change in energy for last iteration. Type:; float. d_conv¶; RMS change in density for last iteration. Type:; float. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html:659,Integrability,message,message,659,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. e_conv¶; Change in energy for last iteration. Type:; float. d_conv¶; RMS change in density for last iteration. Type:; float. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html:767,Integrability,rout,routine,767,"﻿. SCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. SCFConvergenceError¶. exception psi4.driver.SCFConvergenceError(eqn_description, iteration, wfn, e_conv, d_conv)[source]¶; Error called for problems with SCF iterations. Parameters:. eqn_description (str) – Type of QC routine that has failed (e.g., SCF preiterations).; iteration (int) – Iteration number on which routine failed.; wfn (psi4.core.Wavefunction) – Wavefunction at time of exception.; e_conv (float) – Change in energy for last iteration.; d_conv (float) – RMS change in density for last iteration. message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. e_conv¶; Change in energy for last iteration. Type:; float. d_conv¶; RMS change in density for last iteration. Type:; float. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; SCFConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.SCFConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.scf_helper.html:753,Deployability,update,updated,753,"﻿. scf_helper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scf_helper. scf_helper¶. psi4.driver.scf_helper(name, post_scf=True, **kwargs)[source]¶; Function serving as helper to SCF, choosing whether to cast; up or just run SCF with a standard guess. This preserves; previous SCF options set by other procedures (e.g., SAPT; output file types for SCF). Most run_* functions should call; this function, common exceptions being when multireference; SCF is needed or when restarting from converged SCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scf_helper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.scf_helper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.scf_helper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.scf_wavefunction_factory.html:640,Deployability,update,updated,640,"﻿. scf_wavefunction_factory. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scf_wavefunction_factory. scf_wavefunction_factory¶. psi4.driver.scf_wavefunction_factory(name, ref_wfn, reference, **kwargs)[source]¶; Builds the correct (R/U/RO/CU HF/KS) wavefunction from the; provided information, sets relevant auxiliary basis sets on it,; and prepares any empirical dispersion. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; scf_wavefunction_factory. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.scf_wavefunction_factory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.scf_wavefunction_factory.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.set_memory.html:1914,Deployability,update,updated,1914,"﻿. set_memory. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. set_memory¶. psi4.driver.set_memory(inputval, execute=True, quiet=False)[source]¶; Reset the total memory allocation. Parameters:. inputval (Union[str, int, float]) – Memory value. An Integer or float is taken literally as bytes to be set.; A string is taken as a unit-containing value (e.g., 30 mb), which is; case-insensitive.; execute (bool) – When False, interpret inputval without setting in Psi4 core.; quiet (bool) – When True, do not print to the output file. Returns:; Number of bytes of memory set. Return type:; int. Raises:; ValidationError – When <500MiB or disallowed type or misformatted. Examples; >>> # [1] Passing absolute number of bytes; >>> psi4.set_memory(600000000); >>> psi4.get_memory(); Out[1]: 600000000L. >>> # [2] Passing memory value as string with units; >>> psi4.set_memory('30 GB'); >>> psi4.get_memory(); Out[2]: 30000000000L. >>> # Good examples; >>> psi4.set_memory(800000000) # 800000000; >>> psi4.set_memory(2004088624.9) # 2004088624; >>> psi4.set_memory(1.0e9) # 1000000000; >>> psi4.set_memory('600 mb') # 600000000; >>> psi4.set_memory('600.0 MiB') # 629145600; >>> psi4.set_memory('.6 Gb') # 600000000; >>> psi4.set_memory(' 100000000kB ') # 100000000000; >>> psi4.set_memory('2 eb') # 2000000000000000000. >>> # Bad examples; >>> psi4.set_memory({}) # odd type; >>> psi4.set_memory('') # no info; >>> psi4.set_memory(""8 dimms"") # unacceptable units; >>> psi4.set_memory(""1e5 gb"") # string w/ exponent; >>> psi4.set_memory(""5e5"") # string w/o units; >>> psi4.set_memory(2000) # mem too small; >>> psi4.set_memory(-5e5) # negative (and too small). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.set_memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.set_memory.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.set_memory.html:666,Security,Validat,ValidationError,666,"﻿. set_memory. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. set_memory¶. psi4.driver.set_memory(inputval, execute=True, quiet=False)[source]¶; Reset the total memory allocation. Parameters:. inputval (Union[str, int, float]) – Memory value. An Integer or float is taken literally as bytes to be set.; A string is taken as a unit-containing value (e.g., 30 mb), which is; case-insensitive.; execute (bool) – When False, interpret inputval without setting in Psi4 core.; quiet (bool) – When True, do not print to the output file. Returns:; Number of bytes of memory set. Return type:; int. Raises:; ValidationError – When <500MiB or disallowed type or misformatted. Examples; >>> # [1] Passing absolute number of bytes; >>> psi4.set_memory(600000000); >>> psi4.get_memory(); Out[1]: 600000000L. >>> # [2] Passing memory value as string with units; >>> psi4.set_memory('30 GB'); >>> psi4.get_memory(); Out[2]: 30000000000L. >>> # Good examples; >>> psi4.set_memory(800000000) # 800000000; >>> psi4.set_memory(2004088624.9) # 2004088624; >>> psi4.set_memory(1.0e9) # 1000000000; >>> psi4.set_memory('600 mb') # 600000000; >>> psi4.set_memory('600.0 MiB') # 629145600; >>> psi4.set_memory('.6 Gb') # 600000000; >>> psi4.set_memory(' 100000000kB ') # 100000000000; >>> psi4.set_memory('2 eb') # 2000000000000000000. >>> # Bad examples; >>> psi4.set_memory({}) # odd type; >>> psi4.set_memory('') # no info; >>> psi4.set_memory(""8 dimms"") # unacceptable units; >>> psi4.set_memory(""1e5 gb"") # string w/ exponent; >>> psi4.set_memory(""5e5"") # string w/o units; >>> psi4.set_memory(2000) # mem too small; >>> psi4.set_memory(-5e5) # negative (and too small). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_memory. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.set_memory.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.set_memory.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.set_module_options.html:667,Deployability,update,updated,667,"﻿. set_module_options. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_module_options. set_module_options¶. psi4.driver.set_module_options(module, options_dict)[source]¶; Sets Psi4 module options from a module specification and input dictionary. Deprecated since version 1.5: Use psi4.driver.p4util.set_options() instead. Return type:; None. Parameters:. module (str) – ; options_dict (Dict[str, Any]) – . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_module_options. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.set_module_options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.set_module_options.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.set_options.html:975,Deployability,update,updated,975,"﻿. set_options. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_options. set_options¶. psi4.driver.set_options(options_dict, verbose=1)[source]¶; Sets Psi4 options from an input dictionary. Parameters:. options_dict (Dict[str, Any]) – Dictionary where keys are case insensitive and values are the option value. For global options, keys are ""<option_name>"".; For option local to “<module_name>”, keys are ""<module_name>__<option_name>""; (double underscore separation).; For contents that would be in pcm = {...}, use ""PCM__INPUT"" key. verbose (int) – Control print volume. Return type:; None. Examples; >>> psi4.set_options({; ""basis"": ""cc-pvtz"",; ""df_basis_scf"": ""cc-pvtz-jkfit"",; ""scf__reference"": ""uhf"",; ""print"": 2}). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; set_options. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.set_options.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.set_options.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.tdscf.html:360,Deployability,update,updated,360,"﻿. tdscf. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; tdscf. tdscf¶. psi4.driver.tdscf(wfn, **kwargs)[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; tdscf. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.tdscf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.tdscf.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html:258,Availability,Error,Error,258,"﻿. TDSCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. TDSCFConvergenceError¶. exception psi4.driver.TDSCFConvergenceError(iteration, wfn, what, stats)[source]¶; Error called for problems with TDSCF iterations. Parameters:. wfn (psi4.core.Wavefunction) – Wavefunction at time of exception; what (str) – What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats (Dict[str, Any]) – Dictionary of convergence statistics of last iteration.; Keys are:. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. iteration (int) – . message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. what¶; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge. Type:; str. stats¶; Dictionary of convergence statistics of last iteration. See keys above. Type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html:1683,Deployability,update,updated,1683,"﻿. TDSCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. TDSCFConvergenceError¶. exception psi4.driver.TDSCFConvergenceError(iteration, wfn, what, stats)[source]¶; Error called for problems with TDSCF iterations. Parameters:. wfn (psi4.core.Wavefunction) – Wavefunction at time of exception; what (str) – What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats (Dict[str, Any]) – Dictionary of convergence statistics of last iteration.; Keys are:. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. iteration (int) – . message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. what¶; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge. Type:; str. stats¶; Dictionary of convergence statistics of last iteration. See keys above. Type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html:1058,Integrability,message,message,1058,"﻿. TDSCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. TDSCFConvergenceError¶. exception psi4.driver.TDSCFConvergenceError(iteration, wfn, what, stats)[source]¶; Error called for problems with TDSCF iterations. Parameters:. wfn (psi4.core.Wavefunction) – Wavefunction at time of exception; what (str) – What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats (Dict[str, Any]) – Dictionary of convergence statistics of last iteration.; Keys are:. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. iteration (int) – . message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. what¶; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge. Type:; str. stats¶; Dictionary of convergence statistics of last iteration. See keys above. Type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html:1166,Integrability,rout,routine,1166,"﻿. TDSCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. TDSCFConvergenceError¶. exception psi4.driver.TDSCFConvergenceError(iteration, wfn, what, stats)[source]¶; Error called for problems with TDSCF iterations. Parameters:. wfn (psi4.core.Wavefunction) – Wavefunction at time of exception; what (str) – What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats (Dict[str, Any]) – Dictionary of convergence statistics of last iteration.; Keys are:. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. iteration (int) – . message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. what¶; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge. Type:; str. stats¶; Dictionary of convergence statistics of last iteration. See keys above. Type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html:903,Performance,perform,performed,903,"﻿. TDSCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. TDSCFConvergenceError¶. exception psi4.driver.TDSCFConvergenceError(iteration, wfn, what, stats)[source]¶; Error called for problems with TDSCF iterations. Parameters:. wfn (psi4.core.Wavefunction) – Wavefunction at time of exception; what (str) – What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats (Dict[str, Any]) – Dictionary of convergence statistics of last iteration.; Keys are:. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. iteration (int) – . message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. what¶; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge. Type:; str. stats¶; Dictionary of convergence statistics of last iteration. See keys above. Type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html:985,Performance,perform,performed,985,"﻿. TDSCFConvergenceError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. TDSCFConvergenceError¶. exception psi4.driver.TDSCFConvergenceError(iteration, wfn, what, stats)[source]¶; Error called for problems with TDSCF iterations. Parameters:. wfn (psi4.core.Wavefunction) – Wavefunction at time of exception; what (str) – What we were trying to solve for (singlets/triplets, irrep) when we failed to converge; stats (Dict[str, Any]) – Dictionary of convergence statistics of last iteration.; Keys are:. count : int, iteration number; res_norm : np.ndarray (nroots, ), the norm of residual vector for each roots; val : np.ndarray (nroots, ), the eigenvalue corresponding to each root; delta_val : np.ndarray (nroots, ), the change in eigenvalue from the last iteration to this ones; collapse : bool, if a subspace collapse was performed; product_count : int, the running total of product evaluations that was performed; done : bool, if all roots were converged. iteration (int) – . message¶; Human readable string describing the exception. Type:; str. iteration¶; Iteration number on which routine failed. Type:; int. wfn¶; Wavefunction at time of exception. Type:; psi4.core.Wavefunction. what¶; What we were trying to solve for (singlets/triplets, irrep) when we; failed to converge. Type:; str. stats¶; Dictionary of convergence statistics of last iteration. See keys above. Type:; Dict[str, Any]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TDSCFConvergenceError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TDSCFConvergenceError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.temp_circular_import_blocker.html:462,Deployability,update,updated,462,"﻿. temp_circular_import_blocker. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; temp_circular_import_blocker. temp_circular_import_blocker¶. psi4.driver.temp_circular_import_blocker()[source]¶. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; temp_circular_import_blocker. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.temp_circular_import_blocker.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.temp_circular_import_blocker.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html:226,Availability,Error,Error,226,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html:301,Availability,Error,Error,301,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html:1293,Deployability,update,updated,1293,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html:307,Integrability,message,message,307,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html:448,Integrability,message,message,448,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html:3,Testability,Test,TestComparisonError,3,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html:126,Testability,Test,TestComparisonError,126,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html:147,Testability,Test,TestComparisonError,147,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html:191,Testability,Test,TestComparisonError,191,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html:693,Testability,Test,TestComparisonError,693,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html:1225,Testability,Test,TestComparisonError,1225,"﻿. TestComparisonError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. TestComparisonError¶. exception psi4.driver.TestComparisonError(msg)[source]¶; Error called when a compare_values() or other comparison; function fails.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. Example; >>> psi4.compare_values(2, 3, 2, ""asdf""); asdf..................................................................................FAILED; psi4.driver.p4util.exceptions.TestComparisonError: asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by difference (1.0000).; !----------------------------------------------------------------------------------!; ! !; ! asdf: computed value (3.0000) does not match (2.0000) to atol=0.01 by !; ! difference (1.0000). !; ! !; !----------------------------------------------------------------------------------!. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; TestComparisonError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.TestComparisonError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:229,Availability,Error,Error,229,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:569,Availability,error,error,569,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:3,Deployability,Upgrade,UpgradeHelper,3,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:120,Deployability,Upgrade,UpgradeHelper,120,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:135,Deployability,Upgrade,UpgradeHelper,135,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:173,Deployability,Upgrade,UpgradeHelper,173,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:387,Deployability,release,release,387,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:510,Deployability,Upgrade,UpgradeHelper,510,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:600,Deployability,Upgrade,UpgradeHelper,600,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:769,Deployability,Upgrade,UpgradeHelper,769,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:1035,Deployability,release,release,1035,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:1280,Deployability,Upgrade,UpgradeHelper,1280,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:1342,Deployability,update,updated,1342,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:1098,Integrability,message,message,1098,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:291,Usability,simpl,simple,291,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html:815,Usability,guid,guide,815,"﻿. UpgradeHelper. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. UpgradeHelper¶. exception psi4.driver.UpgradeHelper(old, new, version, elaboration)[source]¶; Error called on previously valid syntax that now isn’t and a; simple syntax transition is possible.; It is much preferred to leave the old syntax valid for a release; cycle and have the old syntax raise a deprecation FutureWarning.; For cases where the syntax just has to jump, an UpgradeHelper can be used; to trap the old syntax at first error and suggest the new.; An UpgradeHelper can also be used after the FutureWarning; described above has expired. Then the body of the code can be deleted while; the definition is preserved, and an UpgradeHelper called in place of the; body to guide users with lagging syntax. Parameters:. old (str) – Previously valid syntax.; new (str) – Suggested replacement syntax.; version (str) – First Major.minor version at which old syntax won’t run. Generally; the next release at time of commit.; elaboration (str) – Any additional message to convey. Should start with a space. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; UpgradeHelper. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.UpgradeHelper.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html:245,Availability,Error,Error,245,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html:662,Deployability,update,updated,662,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html:251,Integrability,message,message,251,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html:392,Integrability,message,message,392,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html:3,Security,Validat,ValidationError,3,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html:122,Security,Validat,ValidationError,122,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html:139,Security,Validat,ValidationError,139,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html:179,Security,Validat,ValidationError,179,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html:598,Security,Validat,ValidationError,598,"﻿. ValidationError. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. ValidationError¶. exception psi4.driver.ValidationError(msg)[source]¶; Input specification has problems.; Error message msg directed both to standard output stream and to outfile. Parameters:; msg (str) – Human readable string describing the exception. message¶; Human readable string describing the exception. Type:; str. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; ValidationError. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.ValidationError.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.ValidationError.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.vibanal_wfn.html:1579,Deployability,update,updated,1579,"﻿. vibanal_wfn. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; vibanal_wfn. vibanal_wfn¶. psi4.driver.vibanal_wfn(wfn, hess=None, irrep=None, molecule=None, project_trans=True, project_rot=True)[source]¶; Function to perform analysis of a hessian or hessian block, specifically…; calling for and printing vibrational and thermochemical analysis, setting thermochemical variables,; and writing the vibrec and normal mode files. Parameters:. wfn (Wavefunction) – The wavefunction which had its Hessian computed.; hess (Optional[ndarray]) – Hessian to analyze, if not the hessian in wfn.; (3*nat, 3*nat) non-mass-weighted Hessian in atomic units, [Eh/a0/a0].; irrep (Union[int, str, None]) – The irrep for which frequencies are calculated. Thermochemical analysis; is skipped if this is specified (non-None),; as only one symmetry block of the hessian has been computed.; molecule (Molecule or qcdb.Molecule, optional) – The molecule to pull information from, if not the molecule in wfn. Must at least have similar; geometry to the molecule in wfn.; project_trans (bool) – Should translations be projected in the harmonic analysis?; project_rot (bool) – Should rotations be projected in the harmonic analysis?. Returns:; vibinfo – A dictionary of vibrational information. See harmonic_analysis(). Return type:; Dict[str, ndarray]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; vibanal_wfn. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.vibanal_wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.vibanal_wfn.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.vibanal_wfn.html:424,Modifiability,variab,variables,424,"﻿. vibanal_wfn. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; vibanal_wfn. vibanal_wfn¶. psi4.driver.vibanal_wfn(wfn, hess=None, irrep=None, molecule=None, project_trans=True, project_rot=True)[source]¶; Function to perform analysis of a hessian or hessian block, specifically…; calling for and printing vibrational and thermochemical analysis, setting thermochemical variables,; and writing the vibrec and normal mode files. Parameters:. wfn (Wavefunction) – The wavefunction which had its Hessian computed.; hess (Optional[ndarray]) – Hessian to analyze, if not the hessian in wfn.; (3*nat, 3*nat) non-mass-weighted Hessian in atomic units, [Eh/a0/a0].; irrep (Union[int, str, None]) – The irrep for which frequencies are calculated. Thermochemical analysis; is skipped if this is specified (non-None),; as only one symmetry block of the hessian has been computed.; molecule (Molecule or qcdb.Molecule, optional) – The molecule to pull information from, if not the molecule in wfn. Must at least have similar; geometry to the molecule in wfn.; project_trans (bool) – Should translations be projected in the harmonic analysis?; project_rot (bool) – Should rotations be projected in the harmonic analysis?. Returns:; vibinfo – A dictionary of vibrational information. See harmonic_analysis(). Return type:; Dict[str, ndarray]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; vibanal_wfn. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.vibanal_wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.vibanal_wfn.html
https://psicode.org/psi4manual/1.7.x/api/psi4.driver.vibanal_wfn.html:272,Performance,perform,perform,272,"﻿. vibanal_wfn. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; vibanal_wfn. vibanal_wfn¶. psi4.driver.vibanal_wfn(wfn, hess=None, irrep=None, molecule=None, project_trans=True, project_rot=True)[source]¶; Function to perform analysis of a hessian or hessian block, specifically…; calling for and printing vibrational and thermochemical analysis, setting thermochemical variables,; and writing the vibrec and normal mode files. Parameters:. wfn (Wavefunction) – The wavefunction which had its Hessian computed.; hess (Optional[ndarray]) – Hessian to analyze, if not the hessian in wfn.; (3*nat, 3*nat) non-mass-weighted Hessian in atomic units, [Eh/a0/a0].; irrep (Union[int, str, None]) – The irrep for which frequencies are calculated. Thermochemical analysis; is skipped if this is specified (non-None),; as only one symmetry block of the hessian has been computed.; molecule (Molecule or qcdb.Molecule, optional) – The molecule to pull information from, if not the molecule in wfn. Must at least have similar; geometry to the molecule in wfn.; project_trans (bool) – Should translations be projected in the harmonic analysis?; project_rot (bool) – Should rotations be projected in the harmonic analysis?. Returns:; vibinfo – A dictionary of vibrational information. See harmonic_analysis(). Return type:; Dict[str, ndarray]. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. PSI4 API: Linking C++ and Python; vibanal_wfn. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/api/psi4.driver.vibanal_wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/api/psi4.driver.vibanal_wfn.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__cutoff_amps_print.html:166,Availability,Toler,Tolerance,166,"﻿. CUTOFF_AMPS_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; CUTOFF_AMPS_PRINT. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; CUTOFF_AMPS_PRINT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/adc__cutoff_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__cutoff_amps_print.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__cutoff_amps_print.html:233,Availability,avail,available,233,"﻿. CUTOFF_AMPS_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; CUTOFF_AMPS_PRINT. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; CUTOFF_AMPS_PRINT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/adc__cutoff_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__cutoff_amps_print.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__cutoff_amps_print.html:499,Deployability,update,updated,499,"﻿. CUTOFF_AMPS_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; CUTOFF_AMPS_PRINT. CUTOFF_AMPS_PRINT¶. Tolerance for extracted or printed amplitudes. This option is only available for the adcc backend. Type: double; Default: 0.01. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; CUTOFF_AMPS_PRINT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/adc__cutoff_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__cutoff_amps_print.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__gauge.html:516,Deployability,update,updated,516,"﻿. GAUGE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; GAUGE. GAUGE¶. Specifies the choice of representation of the electric dipole operator. * Acceptable values are LENGTH (default) and VELOCITY. Type: string; Possible Values: LENGTH, VELOCITY; Default: LENGTH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; GAUGE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/adc__gauge.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__gauge.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__kind.html:433,Deployability,update,updated,433,"﻿. KIND. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; KIND. KIND¶. The kind of states to compute. Type: string; Possible Values: SINGLET, TRIPLET, SPIN_FLIP, ANY; Default: SINGLET. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; KIND. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/adc__kind.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__kind.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__maxiter.html:389,Deployability,update,updated,389,"﻿. MAXITER. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; MAXITER. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; MAXITER. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/adc__maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__maxiter.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__max_num_vecs.html:288,Availability,avail,available,288,"﻿. MAX_NUM_VECS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; MAX_NUM_VECS. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; MAX_NUM_VECS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/adc__max_num_vecs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__max_num_vecs.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__max_num_vecs.html:548,Deployability,update,updated,548,"﻿. MAX_NUM_VECS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; MAX_NUM_VECS. MAX_NUM_VECS¶. Maximum number of subspace vectors. A negative value uses * the adcc default (roughly between 20 and 5 * N_GUESSES). This option is only available for the adcc backend. Type: integer; Default: -1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; MAX_NUM_VECS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/adc__max_num_vecs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__max_num_vecs.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__num_core_orbitals.html:227,Availability,avail,available,227,"﻿. NUM_CORE_ORBITALS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_CORE_ORBITALS. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_CORE_ORBITALS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/adc__num_core_orbitals.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__num_core_orbitals.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__num_core_orbitals.html:491,Deployability,update,updated,491,"﻿. NUM_CORE_ORBITALS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_CORE_ORBITALS. NUM_CORE_ORBITALS¶. Number of orbitals to place in the core. This option is only available for the adcc backend. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_CORE_ORBITALS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/adc__num_core_orbitals.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__num_core_orbitals.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__num_guesses.html:286,Availability,avail,available,286,"﻿. NUM_GUESSES. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_GUESSES. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_GUESSES. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/adc__num_guesses.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__num_guesses.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__num_guesses.html:545,Deployability,update,updated,545,"﻿. NUM_GUESSES. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_GUESSES. NUM_GUESSES¶. Number of guess vectors to generate and use. Negative values keep * the adcc default (currently 2 * ROOTS_PER_IRREP). This option is only available for the adcc backend. Type: integer; Default: -1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; NUM_GUESSES. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/adc__num_guesses.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__num_guesses.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__reference.html:423,Deployability,update,updated,423,"﻿. REFERENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; REFERENCE. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, UHF; Default: RHF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; REFERENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/adc__reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__reference.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__roots_per_irrep.html:462,Deployability,update,updated,462,"﻿. ROOTS_PER_IRREP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; ROOTS_PER_IRREP. ROOTS_PER_IRREP¶. The number of poles / excited states to obtain per irrep vector. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; ROOTS_PER_IRREP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/adc__roots_per_irrep.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__roots_per_irrep.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__r_convergence.html:489,Deployability,update,updated,489,"﻿. R_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; R_CONVERGENCE. R_CONVERGENCE¶. Convergence threshold for ADC matrix diagonalisation. Negative values keep the * adcc default (1e-6). Type: conv double; Default: -1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; ADC; R_CONVERGENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/adc__r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/adc__r_convergence.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__ao_basis.html:487,Deployability,update,updated,487,"﻿. AO_BASIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; AO_BASIS. AO_BASIS¶. The algorithm to use for the \(\left\langle VV||VV\right \rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; AO_BASIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__ao_basis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__ao_basis.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html:424,Deployability,update,updated,424,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. CACHELEVEL¶. The amount of caching of data to perform. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html:3,Performance,CACHE,CACHELEVEL,3,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. CACHELEVEL¶. The amount of caching of data to perform. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html:126,Performance,CACHE,CACHELEVEL,126,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. CACHELEVEL¶. The amount of caching of data to perform. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html:138,Performance,CACHE,CACHELEVEL,138,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. CACHELEVEL¶. The amount of caching of data to perform. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html:184,Performance,perform,perform,184,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. CACHELEVEL¶. The amount of caching of data to perform. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html:365,Performance,CACHE,CACHELEVEL,365,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. CACHELEVEL¶. The amount of caching of data to perform. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__debug.html:401,Deployability,update,updated,401,"﻿. DEBUG. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; DEBUG. DEBUG¶. Reproducing energies from densities ?. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; DEBUG. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__debug.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__debug.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__gauge.html:407,Deployability,update,updated,407,"﻿. GAUGE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; GAUGE. GAUGE¶. The type of gauge to use for properties. Type: string; Default: LENGTH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; GAUGE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__gauge.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__gauge.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__ints_tolerance.html:489,Deployability,update,updated,489,"﻿. INTS_TOLERANCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; INTS_TOLERANCE. INTS_TOLERANCE¶. Schwarz screening threshold. Mininum absolute value below which TEI are neglected. Type: conv double; Default: 1e-14. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; INTS_TOLERANCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__ints_tolerance.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__ints_tolerance.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__opdm_only.html:487,Deployability,update,updated,487,"﻿. OPDM_ONLY. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; OPDM_ONLY. OPDM_ONLY¶. For internal use only! Compute the one-particle density matrix, but not the two-particle density matrix. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; OPDM_ONLY. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__opdm_only.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__opdm_only.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__opdm_relax.html:429,Deployability,update,updated,429,"﻿. OPDM_RELAX. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; OPDM_RELAX. OPDM_RELAX¶. Do relax the one-particle density matrix?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; OPDM_RELAX. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__opdm_relax.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__opdm_relax.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__prop_all.html:432,Deployability,update,updated,432,"﻿. PROP_ALL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; PROP_ALL. PROP_ALL¶. Compute non-relaxed properties for all excited states. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; PROP_ALL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__prop_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__prop_all.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__prop_root.html:435,Deployability,update,updated,435,"﻿. PROP_ROOT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; PROP_ROOT. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; PROP_ROOT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__prop_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__prop_root.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__prop_sym.html:398,Deployability,update,updated,398,"﻿. PROP_SYM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; PROP_SYM. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; PROP_SYM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__prop_sym.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__prop_sym.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__reference.html:408,Deployability,update,updated,408,"﻿. REFERENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; REFERENCE. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; REFERENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__reference.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__roots_per_irrep.html:486,Deployability,update,updated,486,"﻿. ROOTS_PER_IRREP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; ROOTS_PER_IRREP. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; ROOTS_PER_IRREP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__roots_per_irrep.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__roots_per_irrep.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__wfn.html:374,Deployability,update,updated,374,"﻿. WFN. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; WFN. WFN¶. Wavefunction type. Type: string; Default: SCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; WFN. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__wfn.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__write_nos.html:418,Deployability,update,updated,418,"﻿. WRITE_NOS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; WRITE_NOS. WRITE_NOS¶. Do write natural orbitals (molden). Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; WRITE_NOS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__write_nos.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__write_nos.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__xi.html:370,Deployability,update,updated,370,"﻿. XI. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; XI. XI¶. Do compute Xi?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; XI. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__xi.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__xi.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__xi_connect.html:437,Deployability,update,updated,437,"﻿. XI_CONNECT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; XI_CONNECT. XI_CONNECT¶. Do require \(\bar{H}\) and \(R\) to be connected?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; XI_CONNECT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__xi_connect.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__xi_connect.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__zeta.html:376,Deployability,update,updated,376,"﻿. ZETA. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; ZETA. ZETA¶. Do use zeta?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCDENSITY; ZETA. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccdensity__zeta.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccdensity__zeta.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__abcd.html:421,Deployability,update,updated,421,"﻿. ABCD. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; ABCD. ABCD¶. Type of ABCD algorithm will be used. Type: string; Possible Values: NEW, OLD; Default: NEW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; ABCD. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__abcd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__abcd.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__analyze.html:398,Deployability,update,updated,398,"﻿. ANALYZE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; ANALYZE. ANALYZE¶. Do analyze T2 amplitudes. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; ANALYZE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__analyze.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__analyze.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__ao_basis.html:1079,Deployability,update,updated,1079,"﻿. AO_BASIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; AO_BASIS. AO_BASIS¶. The algorithm to use for the \(\left\langle VV||VV\right\rangle\) terms If AO_BASIS is NONE, the MO-basis integrals will be used; if AO_BASIS is DISK, the AO-basis integrals stored on disk will be used; if AO_BASIS is DIRECT, the AO-basis integrals will be computed on the fly as necessary. NB: The DIRECT option is not fully implemented and should only be used by experts. Default is NONE. Note: The developers recommend use of this keyword only as a last resort because it significantly slows the calculation. The current algorithms for handling the MO-basis four-virtual-index integrals have been significantly improved and are preferable to the AO-based approach. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; AO_BASIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__ao_basis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__ao_basis.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__bccd_maxiter.html:437,Deployability,update,updated,437,"﻿. BCCD_MAXITER. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; BCCD_MAXITER. BCCD_MAXITER¶. Maximum number of iterations for Brueckner CCD. Type: integer; Default: 50. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; BCCD_MAXITER. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__bccd_maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__bccd_maxiter.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html:619,Deployability,update,updated,619,"﻿. BRUECKNER_ORBS_R_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; BRUECKNER_ORBS_R_CONVERGENCE. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; BRUECKNER_ORBS_R_CONVERGENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html:336,Integrability,depend,depending,336,"﻿. BRUECKNER_ORBS_R_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; BRUECKNER_ORBS_R_CONVERGENCE. BRUECKNER_ORBS_R_CONVERGENCE¶. Convergence criterion for Brueckner orbitals. The convergence is determined based on the largest \(T_1\) amplitude. Default adjusts depending on E_CONVERGENCE. Type: conv double; Default: 1e-5. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; BRUECKNER_ORBS_R_CONVERGENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__brueckner_orbs_r_convergence.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html:869,Deployability,update,updated,869,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html:3,Performance,CACHE,CACHELEVEL,3,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html:125,Performance,CACHE,CACHELEVEL,125,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html:137,Performance,CACHE,CACHELEVEL,137,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html:300,Performance,cache,cache,300,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html:362,Performance,cache,cache,362,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html:632,Performance,cache,cache,632,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html:810,Performance,CACHE,CACHELEVEL,810,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html:754,Deployability,update,updated,754,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html:3,Performance,CACHE,CACHETYPE,3,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html:124,Performance,CACHE,CACHETYPE,124,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html:135,Performance,CACHE,CACHETYPE,135,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html:210,Performance,cache,cache,210,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html:329,Performance,cache,cache,329,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html:460,Performance,cache,cache,460,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html:696,Performance,CACHE,CACHETYPE,696,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. CACHETYPE¶. Selects the priority type for maintaining the automatic memory cache used by the libdpd codes. A value of LOW selects a “low priority” scheme in which the deletion of items from the cache is based on pre-programmed priorities. A value of LRU selects a “least recently used” scheme in which the oldest item in the cache will be the first one deleted. Type: string; Possible Values: LOW, LRU; Default: LOW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CACHETYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cachetype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cc_num_threads.html:415,Deployability,update,updated,415,"﻿. CC_NUM_THREADS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CC_NUM_THREADS. CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CC_NUM_THREADS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cc_num_threads.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cc_num_threads.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cc_os_scale.html:431,Deployability,update,updated,431,"﻿. CC_OS_SCALE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CC_OS_SCALE. CC_OS_SCALE¶. Coupled-cluster opposite-spin scaling value. Type: double; Default: 1.27. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CC_OS_SCALE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cc_os_scale.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cc_os_scale.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cc_ss_scale.html:427,Deployability,update,updated,427,"﻿. CC_SS_SCALE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CC_SS_SCALE. CC_SS_SCALE¶. Coupled-cluster same-spin scaling value. Type: double; Default: 1.13. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; CC_SS_SCALE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__cc_ss_scale.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__cc_ss_scale.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__diis.html:413,Deployability,update,updated,413,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; DIIS. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; DIIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__diis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__diis.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__e_convergence.html:530,Deployability,update,updated,530,"﻿. E_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; E_CONVERGENCE. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; E_CONVERGENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__e_convergence.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__e_convergence.html:185,Energy Efficiency,energy,energy,185,"﻿. E_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; E_CONVERGENCE. E_CONVERGENCE¶. Convergence criterion for energy. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; E_CONVERGENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__e_convergence.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__force_restart.html:473,Deployability,update,updated,473,"﻿. FORCE_RESTART. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; FORCE_RESTART. FORCE_RESTART¶. Do restart the coupled-cluster iterations even if MO phases are screwed up?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; FORCE_RESTART. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__force_restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__force_restart.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__local.html:422,Deployability,update,updated,422,"﻿. LOCAL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL. LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__local.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__local.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__local_cphf_cutoff.html:465,Deployability,update,updated,465,"﻿. LOCAL_CPHF_CUTOFF. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_CPHF_CUTOFF. LOCAL_CPHF_CUTOFF¶. Cutoff value for local-coupled-perturbed-Hartree-Fock. Type: double; Default: 0.10. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_CPHF_CUTOFF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__local_cphf_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__local_cphf_cutoff.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__local_cutoff.html:664,Deployability,update,updated,664,"﻿. LOCAL_CUTOFF. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_CUTOFF. LOCAL_CUTOFF¶. Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.02. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_CUTOFF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__local_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__local_cutoff.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__local_method.html:635,Deployability,update,updated,635,"﻿. LOCAL_METHOD. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_METHOD. LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_METHOD. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__local_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__local_method.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__local_pairdef.html:488,Deployability,update,updated,488,"﻿. LOCAL_PAIRDEF. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_PAIRDEF. LOCAL_PAIRDEF¶. Definition of local pair domains, default is BP, Boughton-Pulay. Type: string; Possible Values: BP, RESPONSE; Default: BP. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_PAIRDEF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__local_pairdef.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__local_pairdef.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__local_weakp.html:721,Deployability,update,updated,721,"﻿. LOCAL_WEAKP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_WEAKP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_WEAKP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__local_weakp.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__local_weakp.html:410,Energy Efficiency,energy,energy,410,"﻿. LOCAL_WEAKP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_WEAKP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, NEGLECT, MP2; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; LOCAL_WEAKP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__local_weakp.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__maxiter.html:425,Deployability,update,updated,425,"﻿. MAXITER. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MAXITER. MAXITER¶. Maximum number of iterations to solve the CC equations. Type: integer; Default: 50. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MAXITER. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__maxiter.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__mp2_amps_print.html:497,Deployability,update,updated,497,"﻿. MP2_AMPS_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MP2_AMPS_PRINT. MP2_AMPS_PRINT¶. Do print the MP2 amplitudes which are the starting guesses for RHF and UHF reference functions?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MP2_AMPS_PRINT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__mp2_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__mp2_amps_print.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__mp2_os_scale.html:423,Deployability,update,updated,423,"﻿. MP2_OS_SCALE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MP2_OS_SCALE. MP2_OS_SCALE¶. MP2 opposite-spin scaling value. Type: double; Default: 1.20. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MP2_OS_SCALE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__mp2_os_scale.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__mp2_os_scale.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__mp2_ss_scale.html:418,Deployability,update,updated,418,"﻿. MP2_SS_SCALE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MP2_SS_SCALE. MP2_SS_SCALE¶. MP2 same-spin scaling value. Type: double; Default: 1.0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; MP2_SS_SCALE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__mp2_ss_scale.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__mp2_ss_scale.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__new_triples.html:408,Deployability,update,updated,408,"﻿. NEW_TRIPLES. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; NEW_TRIPLES. NEW_TRIPLES¶. Do use new triples?. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; NEW_TRIPLES. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__new_triples.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__new_triples.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__num_amps_print.html:458,Deployability,update,updated,458,"﻿. NUM_AMPS_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; NUM_AMPS_PRINT. NUM_AMPS_PRINT¶. Number of important \(t_1\) and \(t_2\) amplitudes to print. Type: integer; Default: 10. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; NUM_AMPS_PRINT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__num_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__num_amps_print.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__pair_energies_print.html:477,Deployability,update,updated,477,"﻿. PAIR_ENERGIES_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; PAIR_ENERGIES_PRINT. PAIR_ENERGIES_PRINT¶. Do print MP2 and CCSD pair energies for RHF references?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; PAIR_ENERGIES_PRINT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__pair_energies_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__pair_energies_print.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__property.html:656,Deployability,update,updated,656,"﻿. PROPERTY. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; PROPERTY. PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole-polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity, and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, MAGNETIZABILITY, ROA, ALL; Default: POLARIZABILITY. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; PROPERTY. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__property.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__property.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__reference.html:439,Deployability,update,updated,439,"﻿. REFERENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; REFERENCE. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; REFERENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__reference.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__restart.html:454,Deployability,update,updates,454,"﻿. RESTART. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; RESTART. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; RESTART. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__restart.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__restart.html:782,Deployability,update,updated,782,"﻿. RESTART. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; RESTART. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; RESTART. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__restart.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__restart.html:237,Performance,optimiz,optimizations,237,"﻿. RESTART. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; RESTART. RESTART¶. Do restart the coupled-cluster iterations from old \(t_1\) and \(t_2\) amplitudes? For geometry optimizations, Brueckner calculations, etc. the iterative solution of the CC amplitude equations may benefit considerably by reusing old vectors as initial guesses. Assuming that the MO phases remain the same between updates, the CC codes will, by default, re-use old vectors, unless the user sets RESTART = false. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; RESTART. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__restart.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__r_convergence.html:474,Deployability,update,updated,474,"﻿. R_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; R_CONVERGENCE. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC amplitude equations. Type: conv double; Default: 1e-7. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; R_CONVERGENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__r_convergence.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__scsn_mp2.html:433,Deployability,update,updated,433,"﻿. SCSN_MP2. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCSN_MP2. SCSN_MP2¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCSN_MP2. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__scsn_mp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__scsn_mp2.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__scsn_mp2.html:171,Performance,optimiz,optimized,171,"﻿. SCSN_MP2. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCSN_MP2. SCSN_MP2¶. Do SCS-MP2 with parameters optimized for nucleic acids?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCSN_MP2. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__scsn_mp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__scsn_mp2.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__scs_ccsd.html:407,Deployability,update,updated,407,"﻿. SCS_CCSD. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCS_CCSD. SCS_CCSD¶. Do spin-component-scaled CCSD. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCS_CCSD. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__scs_ccsd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__scs_ccsd.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__scs_mp2.html:413,Deployability,update,updated,413,"﻿. SCS_MP2. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCS_MP2. SCS_MP2¶. Do spin-component-scaled MP2 (SCS-MP2)?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SCS_MP2. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__scs_mp2.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__scs_mp2.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__semicanonical.html:434,Deployability,update,updated,434,"﻿. SEMICANONICAL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SEMICANONICAL. SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; SEMICANONICAL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__semicanonical.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__semicanonical.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__t2_coupled.html:384,Deployability,update,updated,384,"﻿. T2_COUPLED. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; T2_COUPLED. T2_COUPLED¶. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; T2_COUPLED. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__t2_coupled.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__t2_coupled.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__t3_ws_incore.html:451,Deployability,update,updated,451,"﻿. T3_WS_INCORE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; T3_WS_INCORE. T3_WS_INCORE¶. Do build W intermediates required for cc3 in core memory?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; T3_WS_INCORE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__t3_ws_incore.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__t3_ws_incore.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__wfn.html:373,Deployability,update,updated,373,"﻿. WFN. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; WFN. WFN¶. Wavefunction type. Type: string; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCENERGY; WFN. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccenergy__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccenergy__wfn.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__abcd.html:415,Deployability,update,updated,415,"﻿. ABCD. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; ABCD. ABCD¶. Type of ABCD algorithm will be used. Type: string; Possible Values: NEW, OLD; Default: NEW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; ABCD. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__abcd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__abcd.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html:874,Deployability,update,updated,874,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html:3,Performance,CACHE,CACHELEVEL,3,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html:122,Performance,CACHE,CACHELEVEL,122,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html:134,Performance,CACHE,CACHELEVEL,134,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html:297,Performance,cache,cache,297,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html:359,Performance,cache,cache,359,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html:640,Performance,cache,cache,640,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html:815,Performance,CACHE,CACHELEVEL,815,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html:173,Deployability,release,release,173,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html:448,Deployability,update,updated,448,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html:3,Performance,CACHE,CACHETYPE,3,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html:121,Performance,CACHE,CACHETYPE,121,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html:132,Performance,CACHE,CACHETYPE,132,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html:181,Performance,cache,cached,181,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html:390,Performance,CACHE,CACHETYPE,390,"﻿. CACHETYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. CACHETYPE¶. The criterion used to retain/release cached data. Type: string; Possible Values: LOW, LRU; Default: LRU. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CACHETYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cachetype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cc3_follow_root.html:433,Deployability,update,updated,433,"﻿. CC3_FOLLOW_ROOT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CC3_FOLLOW_ROOT. CC3_FOLLOW_ROOT¶. Do turn on root following for CC3. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CC3_FOLLOW_ROOT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cc3_follow_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cc3_follow_root.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cc_num_threads.html:409,Deployability,update,updated,409,"﻿. CC_NUM_THREADS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CC_NUM_THREADS. CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; CC_NUM_THREADS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__cc_num_threads.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__cc_num_threads.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__collapse_with_last.html:600,Deployability,update,updated,600,"﻿. COLLAPSE_WITH_LAST. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; COLLAPSE_WITH_LAST. COLLAPSE_WITH_LAST¶. When collapsing Davidson subspace, whether to also include the previous approximate solution (for each root)? This doubles the number of resulting vectors but generally improves convergence. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; COLLAPSE_WITH_LAST. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__collapse_with_last.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__collapse_with_last.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__collapse_with_last_cc3.html:609,Deployability,update,updated,609,"﻿. COLLAPSE_WITH_LAST_CC3. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; COLLAPSE_WITH_LAST_CC3. COLLAPSE_WITH_LAST_CC3¶. Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; COLLAPSE_WITH_LAST_CC3. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__collapse_with_last_cc3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__collapse_with_last_cc3.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__collapse_with_last_cc3.html:325,Safety,hazard,hazardous,325,"﻿. COLLAPSE_WITH_LAST_CC3. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; COLLAPSE_WITH_LAST_CC3. COLLAPSE_WITH_LAST_CC3¶. Has the same effect as “COLLAPSE_WITH_LAST” but only in CC3 computations and after the initial solution of EOM CCSD. May help efficiency, but hazardous when solving for higher roots. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; COLLAPSE_WITH_LAST_CC3. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__collapse_with_last_cc3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__collapse_with_last_cc3.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__complex_tolerance.html:176,Availability,toler,tolerance,176,"﻿. COMPLEX_TOLERANCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; COMPLEX_TOLERANCE. COMPLEX_TOLERANCE¶. Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; COMPLEX_TOLERANCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__complex_tolerance.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__complex_tolerance.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__complex_tolerance.html:459,Deployability,update,updated,459,"﻿. COMPLEX_TOLERANCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; COMPLEX_TOLERANCE. COMPLEX_TOLERANCE¶. Complex tolerance applied in CCEOM computations. Type: conv double; Default: 1e-12. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; COMPLEX_TOLERANCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__complex_tolerance.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__complex_tolerance.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__eom_guess.html:540,Availability,avail,available,540,"﻿. EOM_GUESS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; EOM_GUESS. EOM_GUESS¶. Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; EOM_GUESS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__eom_guess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__eom_guess.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__eom_guess.html:821,Deployability,update,updated,821,"﻿. EOM_GUESS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; EOM_GUESS. EOM_GUESS¶. Specifies a set of single-excitation guess vectors for the EOM-CC procedure. If EOM_GUESS = SINGLES, the guess will be taken from the singles-singles block of the similarity-transformed Hamiltonian, Hbar. If EOM_GUESS = DISK, guess vectors from a previous computation will be read from disk. If EOM_GUESS = INPUT, guess vectors will be specified in user input. The latter method is not currently available. Type: string; Possible Values: SINGLES, DISK, INPUT; Default: SINGLES. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; EOM_GUESS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__eom_guess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__eom_guess.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__eom_reference.html:470,Deployability,update,updated,470,"﻿. EOM_REFERENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; EOM_REFERENCE. EOM_REFERENCE¶. Reference wavefunction type for EOM computations. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; EOM_REFERENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__eom_reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__eom_reference.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__excitation_range.html:744,Deployability,update,updated,744,"﻿. EXCITATION_RANGE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; EXCITATION_RANGE. EXCITATION_RANGE¶. The depth into the occupied and valence spaces from which one-electron excitations are seeded into the Davidson guess to the CIS (the default of 2 includes all single excitations between HOMO-1, HOMO, LUMO, and LUMO+1). This CIS is in turn the Davidson guess to the EOM-CC. Expand to capture more exotic excited states in the EOM-CC calculation. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; EXCITATION_RANGE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__excitation_range.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__excitation_range.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__e_convergence.html:581,Deployability,update,updated,581,"﻿. E_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; E_CONVERGENCE. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; E_CONVERGENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__e_convergence.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__e_convergence.html:193,Energy Efficiency,energy,energy,193,"﻿. E_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; E_CONVERGENCE. E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for CC-EOM. See Table Post-SCF Convergence for default convergence criteria for different calculation types. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; E_CONVERGENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__e_convergence.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__full_matrix.html:425,Deployability,update,updated,425,"﻿. FULL_MATRIX. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; FULL_MATRIX. FULL_MATRIX¶. Do use full effective Hamiltonian matrix?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; FULL_MATRIX. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__full_matrix.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__full_matrix.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local.html:416,Deployability,update,updated,416,"﻿. LOCAL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL. LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__local.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local_cutoff.html:658,Deployability,update,updated,658,"﻿. LOCAL_CUTOFF. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_CUTOFF. LOCAL_CUTOFF¶. Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.02. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_CUTOFF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__local_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local_cutoff.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local_do_singles.html:401,Deployability,update,updated,401,"﻿. LOCAL_DO_SINGLES. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_DO_SINGLES. LOCAL_DO_SINGLES¶. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_DO_SINGLES. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__local_do_singles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local_do_singles.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local_filter_singles.html:466,Deployability,update,updated,466,"﻿. LOCAL_FILTER_SINGLES. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_FILTER_SINGLES. LOCAL_FILTER_SINGLES¶. Do apply local filtering to singles amplitudes?. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_FILTER_SINGLES. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__local_filter_singles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local_filter_singles.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local_method.html:629,Deployability,update,updated,629,"﻿. LOCAL_METHOD. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_METHOD. LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER selects the method developed by H.-J. Werner and co-workers, and AOBASIS selects the method developed by G.E. Scuseria and co-workers (currently inoperative). Type: string; Possible Values: WERNER, AOBASIS; Default: WERNER. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_METHOD. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__local_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local_method.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local_preconditioner.html:499,Deployability,update,updated,499,"﻿. LOCAL_PRECONDITIONER. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_PRECONDITIONER. LOCAL_PRECONDITIONER¶. Preconditioner will be used in local CC computations. Type: string; Possible Values: HBAR, FOCK; Default: HBAR. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_PRECONDITIONER. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__local_preconditioner.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local_preconditioner.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local_weakp.html:715,Deployability,update,updated,715,"﻿. LOCAL_WEAKP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_WEAKP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_WEAKP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local_weakp.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local_weakp.html:407,Energy Efficiency,energy,energy,407,"﻿. LOCAL_WEAKP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_WEAKP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. A value of NEGLECT ignores weak pairs entirely. A value of NONE treats weak pairs in the same manner as strong pairs. A value of MP2 uses second-order perturbation theory to correct the local-CCSD energy computed with weak pairs ignored. Type: string; Possible Values: NONE, MP2, NEGLECT; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; LOCAL_WEAKP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__local_weakp.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__maxiter.html:393,Deployability,update,updated,393,"﻿. MAXITER. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; MAXITER. MAXITER¶. Maximum number of iterations. Type: integer; Default: 80. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; MAXITER. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__maxiter.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__new_triples.html:402,Deployability,update,updated,402,"﻿. NEW_TRIPLES. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; NEW_TRIPLES. NEW_TRIPLES¶. Do use new triples?. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; NEW_TRIPLES. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__new_triples.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__new_triples.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__num_amps_print.html:434,Deployability,update,updated,434,"﻿. NUM_AMPS_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; NUM_AMPS_PRINT. NUM_AMPS_PRINT¶. Number of important CC amplitudes to print. Type: integer; Default: 5. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; NUM_AMPS_PRINT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__num_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__num_amps_print.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__overlap_check.html:214,Availability,avail,available,214,"﻿. OVERLAP_CHECK. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; OVERLAP_CHECK. OVERLAP_CHECK¶. Report overlaps with old excited-state wave functions, if available, and store current wave functions for later use. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; OVERLAP_CHECK. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__overlap_check.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__overlap_check.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__overlap_check.html:507,Deployability,update,updated,507,"﻿. OVERLAP_CHECK. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; OVERLAP_CHECK. OVERLAP_CHECK¶. Report overlaps with old excited-state wave functions, if available, and store current wave functions for later use. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; OVERLAP_CHECK. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__overlap_check.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__overlap_check.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__prop_root.html:463,Deployability,update,updated,463,"﻿. PROP_ROOT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; PROP_ROOT. PROP_ROOT¶. Root number (within its irrep) for computing properties. Defaults to highest root requested. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; PROP_ROOT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__prop_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__prop_root.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__prop_sym.html:466,Deployability,update,updated,466,"﻿. PROP_SYM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; PROP_SYM. PROP_SYM¶. Symmetry of the state to compute properties. Defaults to last irrep for which states are requested. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; PROP_SYM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__prop_sym.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__prop_sym.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__reference.html:433,Deployability,update,updated,433,"﻿. REFERENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; REFERENCE. REFERENCE¶. Reference wavefunction type. Type: string; Possible Values: RHF, ROHF, UHF; Default: RHF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; REFERENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__reference.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__restart_eom_cc3.html:424,Deployability,update,updated,424,"﻿. RESTART_EOM_CC3. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; RESTART_EOM_CC3. RESTART_EOM_CC3¶. Do restart from on-disk?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; RESTART_EOM_CC3. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__restart_eom_cc3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__restart_eom_cc3.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__rhf_triplets.html:431,Deployability,update,updated,431,"﻿. RHF_TRIPLETS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; RHF_TRIPLETS. RHF_TRIPLETS¶. Do form a triplet state from RHF reference?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; RHF_TRIPLETS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__rhf_triplets.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__rhf_triplets.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__roots_per_irrep.html:568,Deployability,update,updated,568,"﻿. ROOTS_PER_IRREP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; ROOTS_PER_IRREP. ROOTS_PER_IRREP¶. Number of excited states per irreducible representation for EOM-CC and CC-LR calculations. Irreps denote the final state symmetry, not the symmetry of the transition. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; ROOTS_PER_IRREP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__roots_per_irrep.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__roots_per_irrep.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__r_convergence.html:485,Deployability,update,updated,485,"﻿. R_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; R_CONVERGENCE. R_CONVERGENCE¶. Convergence criterion for norm of the residual vector in the Davidson algorithm for CC-EOM. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; R_CONVERGENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__r_convergence.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__schmidt_add_residual_tolerance.html:591,Deployability,update,updated,591,"﻿. SCHMIDT_ADD_RESIDUAL_TOLERANCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SCHMIDT_ADD_RESIDUAL_TOLERANCE. SCHMIDT_ADD_RESIDUAL_TOLERANCE¶. Minimum absolute value above which a guess vector to a root is added to the Davidson algorithm in the EOM-CC iterative procedure. Type: conv double; Default: 1e-3. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SCHMIDT_ADD_RESIDUAL_TOLERANCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__schmidt_add_residual_tolerance.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__schmidt_add_residual_tolerance.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__semicanonical.html:428,Deployability,update,updated,428,"﻿. SEMICANONICAL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SEMICANONICAL. SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SEMICANONICAL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__semicanonical.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__semicanonical.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__singles_print.html:510,Deployability,update,updated,510,"﻿. SINGLES_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SINGLES_PRINT. SINGLES_PRINT¶. Do print information on the iterative solution to the single-excitation EOM-CC problem used as a guess to full EOM-CC?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SINGLES_PRINT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__singles_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__singles_print.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__ss_e_convergence.html:513,Deployability,update,updated,513,"﻿. SS_E_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_E_CONVERGENCE. SS_E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_E_CONVERGENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__ss_e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__ss_e_convergence.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__ss_e_convergence.html:202,Energy Efficiency,energy,energy,202,"﻿. SS_E_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_E_CONVERGENCE. SS_E_CONVERGENCE¶. Convergence criterion for excitation energy (change) in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_E_CONVERGENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__ss_e_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__ss_e_convergence.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__ss_r_convergence.html:514,Deployability,update,updated,514,"﻿. SS_R_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_R_CONVERGENCE. SS_R_CONVERGENCE¶. Convergence criterion for norm of the residual vector in the Davidson algorithm for the CIS guess to CC-EOM. Type: conv double; Default: 1e-6. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_R_CONVERGENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__ss_r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__ss_r_convergence.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__ss_skip_diag.html:429,Deployability,update,updated,429,"﻿. SS_SKIP_DIAG. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_SKIP_DIAG. SS_SKIP_DIAG¶. Do skip diagonalization of Hbar SS block?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_SKIP_DIAG. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__ss_skip_diag.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__ss_skip_diag.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__ss_vecs_per_root.html:426,Deployability,update,updated,426,"﻿. SS_VECS_PER_ROOT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_VECS_PER_ROOT. SS_VECS_PER_ROOT¶. SS vectors stored per root. Type: integer; Default: 5. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; SS_VECS_PER_ROOT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__ss_vecs_per_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__ss_vecs_per_root.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__t3_ws_incore.html:449,Deployability,update,updated,449,"﻿. T3_WS_INCORE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; T3_WS_INCORE. T3_WS_INCORE¶. Do build W intermediates required for eom_cc3 in core memory?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; T3_WS_INCORE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__t3_ws_incore.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__t3_ws_incore.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__vecs_cc3.html:403,Deployability,update,updated,403,"﻿. VECS_CC3. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; VECS_CC3. VECS_CC3¶. Vectors stored in CC3 computations. Type: integer; Default: 10. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; VECS_CC3. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__vecs_cc3.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__vecs_cc3.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__vecs_per_root.html:412,Deployability,update,updated,412,"﻿. VECS_PER_ROOT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; VECS_PER_ROOT. VECS_PER_ROOT¶. Vectors stored per root. Type: integer; Default: 12. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; VECS_PER_ROOT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__vecs_per_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__vecs_per_root.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__wfn.html:416,Deployability,update,updated,416,"﻿. WFN. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; WFN. WFN¶. Wavefunction type. Type: string; Possible Values: EOM_CCSD, EOM_CC2, EOM_CC3; Default: EOM_CCSD. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCEOM; WFN. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cceom__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cceom__wfn.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html:865,Deployability,update,updated,865,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html:3,Performance,CACHE,CACHELEVEL,3,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html:123,Performance,CACHE,CACHELEVEL,123,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html:135,Performance,CACHE,CACHELEVEL,135,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html:298,Performance,cache,cache,298,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html:360,Performance,cache,cache,360,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html:630,Performance,cache,cache,630,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html:806,Performance,CACHE,CACHELEVEL,806,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\langle ij | ab \rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__eom_reference.html:439,Deployability,update,updated,439,"﻿. EOM_REFERENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; EOM_REFERENCE. EOM_REFERENCE¶. Reference wavefunction type for EOM computations. Type: string; Default: RHF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; EOM_REFERENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cchbar__eom_reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__eom_reference.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__t_amps.html:418,Deployability,update,updated,418,"﻿. T_AMPS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; T_AMPS. T_AMPS¶. Do compute the T amplitude equation matrix elements?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; T_AMPS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cchbar__t_amps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__t_amps.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__wabei_lowdisk.html:454,Deployability,update,updated,454,"﻿. WABEI_LOWDISK. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; WABEI_LOWDISK. WABEI_LOWDISK¶. Do use the minimal-disk algorithm for Wabei? It’s VERY slow!. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; WABEI_LOWDISK. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cchbar__wabei_lowdisk.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__wabei_lowdisk.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__wfn.html:368,Deployability,update,updated,368,"﻿. WFN. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; WFN. WFN¶. Wavefunction type. Type: string; Default: SCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCHBAR; WFN. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cchbar__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cchbar__wfn.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__abcd.html:394,Deployability,update,updated,394,"﻿. ABCD. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; ABCD. ABCD¶. Type of ABCD algorithm will be used. Type: string; Default: NEW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; ABCD. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__abcd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__abcd.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__ao_basis.html:485,Deployability,update,updated,485,"﻿. AO_BASIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; AO_BASIS. AO_BASIS¶. The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; AO_BASIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__ao_basis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__ao_basis.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html:880,Deployability,update,updated,880,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html:3,Performance,CACHE,CACHELEVEL,3,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html:125,Performance,CACHE,CACHELEVEL,125,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html:137,Performance,CACHE,CACHELEVEL,137,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html:300,Performance,cache,cache,300,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html:362,Performance,cache,cache,362,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html:643,Performance,cache,cache,643,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html:821,Performance,CACHE,CACHELEVEL,821,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd governing the storage of amplitudes, integrals, and intermediates in the CC procedure. A value of 0 retains no quantities in cache, while a level of 6 attempts to store all quantities in cache. For particularly large calculations, a value of 0 may help with certain types of memory problems. The default is 2, which means that all four-index quantities with up to two virtual-orbital indices (e.g., \(\left\langle ij | ab \right\rangle\) integrals) may be held in the cache. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__diis.html:413,Deployability,update,updated,413,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; DIIS. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; DIIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__diis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__diis.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__jobtype.html:405,Deployability,update,updated,405,"﻿. JOBTYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; JOBTYPE. JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; JOBTYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__jobtype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__jobtype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__jobtype.html:159,Performance,perform,performed,159,"﻿. JOBTYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; JOBTYPE. JOBTYPE¶. Type of job being performed. Type: string; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; JOBTYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__jobtype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__jobtype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local.html:422,Deployability,update,updated,422,"﻿. LOCAL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL. LOCAL¶. Do simulate the effects of local correlation techniques?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__local.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_cphf_cutoff.html:465,Deployability,update,updated,465,"﻿. LOCAL_CPHF_CUTOFF. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_CPHF_CUTOFF. LOCAL_CPHF_CUTOFF¶. Cutoff value for local-coupled-perturbed-Hartree-Fock. Type: double; Default: 0.10. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_CPHF_CUTOFF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__local_cphf_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_cphf_cutoff.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_cutoff.html:664,Deployability,update,updated,664,"﻿. LOCAL_CUTOFF. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_CUTOFF. LOCAL_CUTOFF¶. Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.02. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_CUTOFF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__local_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_cutoff.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_filter_singles.html:500,Deployability,update,updated,500,"﻿. LOCAL_FILTER_SINGLES. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_FILTER_SINGLES. LOCAL_FILTER_SINGLES¶. Do apply local filtering to single de-excitation (\(\lambda 1\) amplitudes?. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_FILTER_SINGLES. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__local_filter_singles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_filter_singles.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_method.html:214,Availability,avail,available,214,"﻿. LOCAL_METHOD. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_METHOD. LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_METHOD. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__local_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_method.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_method.html:529,Deployability,update,updated,529,"﻿. LOCAL_METHOD. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_METHOD. LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_METHOD. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__local_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_method.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_pairdef.html:434,Deployability,update,updated,434,"﻿. LOCAL_PAIRDEF. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_PAIRDEF. LOCAL_PAIRDEF¶. Definition of local pair domains. Type: string; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_PAIRDEF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__local_pairdef.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_pairdef.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_weakp.html:239,Availability,avail,available,239,"﻿. LOCAL_WEAKP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_WEAKP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_WEAKP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_weakp.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_weakp.html:544,Deployability,update,updated,544,"﻿. LOCAL_WEAKP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_WEAKP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; LOCAL_WEAKP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__local_weakp.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__maxiter.html:399,Deployability,update,updated,399,"﻿. MAXITER. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; MAXITER. MAXITER¶. Maximum number of iterations. Type: integer; Default: 50. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; MAXITER. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__maxiter.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__num_amps_print.html:491,Deployability,update,updated,491,"﻿. NUM_AMPS_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; NUM_AMPS_PRINT. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 10. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; NUM_AMPS_PRINT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__num_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__num_amps_print.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__prop_all.html:428,Deployability,update,updated,428,"﻿. PROP_ALL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; PROP_ALL. PROP_ALL¶. Compute unrelaxed properties for all excited states. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; PROP_ALL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__prop_all.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__prop_all.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__prop_root.html:433,Deployability,update,updated,433,"﻿. PROP_ROOT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; PROP_ROOT. PROP_ROOT¶. Root number (within its irrep) for computing properties. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; PROP_ROOT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__prop_root.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__prop_root.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__prop_sym.html:396,Deployability,update,updated,396,"﻿. PROP_SYM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; PROP_SYM. PROP_SYM¶. The symmetry of states. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; PROP_SYM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__prop_sym.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__prop_sym.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__restart.html:468,Deployability,update,updated,468,"﻿. RESTART. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; RESTART. RESTART¶. Do restart the coupled-cluster iterations from old \(\lambda_1\) and \(\lambda_2\) amplitudes?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; RESTART. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__restart.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__roots_per_irrep.html:484,Deployability,update,updated,484,"﻿. ROOTS_PER_IRREP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; ROOTS_PER_IRREP. ROOTS_PER_IRREP¶. The number of electronic states to computed, per irreducible representation. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; ROOTS_PER_IRREP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__roots_per_irrep.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__roots_per_irrep.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__r_convergence.html:481,Deployability,update,updated,481,"﻿. R_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; R_CONVERGENCE. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in CC lambda-amplitude equations. Type: conv double; Default: 1e-7. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; R_CONVERGENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__r_convergence.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__sekino.html:414,Deployability,update,updated,414,"﻿. SEKINO. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; SEKINO. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; SEKINO. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__sekino.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__sekino.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__wfn.html:372,Deployability,update,updated,372,"﻿. WFN. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; WFN. WFN¶. Wavefunction type. Type: string; Default: SCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; WFN. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__wfn.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__zeta.html:374,Deployability,update,updated,374,"﻿. ZETA. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; ZETA. ZETA¶. Do use zeta?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCLAMBDA; ZETA. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cclambda__zeta.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cclambda__zeta.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__abcd.html:398,Deployability,update,updated,398,"﻿. ABCD. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; ABCD. ABCD¶. Type of ABCD algorithm will be used. Type: string; Default: NEW. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; ABCD. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__abcd.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__abcd.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__analyze.html:402,Deployability,update,updated,402,"﻿. ANALYZE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; ANALYZE. ANALYZE¶. Do analyze X2 amplitudes. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; ANALYZE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__analyze.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__analyze.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__cachelevel.html:410,Deployability,update,updated,410,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__cachelevel.html:3,Performance,CACHE,CACHELEVEL,3,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__cachelevel.html:127,Performance,CACHE,CACHELEVEL,127,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__cachelevel.html:139,Performance,CACHE,CACHELEVEL,139,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__cachelevel.html:351,Performance,CACHE,CACHELEVEL,351,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__diis.html:417,Deployability,update,updated,417,"﻿. DIIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; DIIS. DIIS¶. Do use DIIS extrapolation to accelerate convergence?. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; DIIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__diis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__diis.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__gauge.html:1035,Deployability,update,updated,1035,"﻿. GAUGE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; GAUGE. GAUGE¶. Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usual length-gauge representation, VELOCITY``(default) for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or ``BOTH. Note that, for optical rotation and raman optical activity calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: VELOCITY. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; GAUGE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__gauge.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__gauge.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__gauge.html:583,Integrability,depend,dependent,583,"﻿. GAUGE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; GAUGE. GAUGE¶. Specifies the choice of representation of the electric dipole operator. For polarizability, this keyword is ignored and LENGTH gauge is computed. For optical rotation and raman optical activity, this keyword is active, and acceptable values are LENGTH for the usual length-gauge representation, VELOCITY``(default) for the modified velocity-gauge representation in which the static-limit optical rotation tensor is subtracted from the frequency- dependent tensor, or ``BOTH. Note that, for optical rotation and raman optical activity calculations, only the choices of VELOCITY or BOTH will yield origin-independent results. Type: string; Possible Values: LENGTH, VELOCITY, BOTH; Default: VELOCITY. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; GAUGE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__gauge.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__gauge.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__linear.html:414,Deployability,update,updated,414,"﻿. LINEAR. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LINEAR. LINEAR¶. Do Bartlett size-extensive linear model?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LINEAR. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__linear.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__linear.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local.html:400,Deployability,update,updated,400,"﻿. LOCAL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL. LOCAL¶. Do simulate local correlation?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__local.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_cphf_cutoff.html:469,Deployability,update,updated,469,"﻿. LOCAL_CPHF_CUTOFF. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_CPHF_CUTOFF. LOCAL_CPHF_CUTOFF¶. Cutoff value for local-coupled-perturbed-Hartree-Fock. Type: double; Default: 0.10. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_CPHF_CUTOFF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__local_cphf_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_cphf_cutoff.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_cutoff.html:668,Deployability,update,updated,668,"﻿. LOCAL_CUTOFF. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_CUTOFF. LOCAL_CUTOFF¶. Value (always between one and zero) for the Broughton-Pulay completeness check used to contruct orbital domains for local-CC calculations. See J. Broughton and P. Pulay, J. Comp. Chem. 14, 736-740 (1993) and C. Hampel and H.-J. Werner, J. Chem. Phys. 104, 6286-6297 (1996). Type: double; Default: 0.01. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_CUTOFF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__local_cutoff.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_cutoff.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_filter_singles.html:487,Deployability,update,updated,487,"﻿. LOCAL_FILTER_SINGLES. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_FILTER_SINGLES. LOCAL_FILTER_SINGLES¶. Do apply local filtering to single excitation amplitudes?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_FILTER_SINGLES. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__local_filter_singles.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_filter_singles.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_method.html:216,Availability,avail,available,216,"﻿. LOCAL_METHOD. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_METHOD. LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_METHOD. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__local_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_method.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_method.html:533,Deployability,update,updated,533,"﻿. LOCAL_METHOD. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_METHOD. LOCAL_METHOD¶. Type of local-CCSD scheme to be simulated. WERNER (unique available option) selects the method developed by H.-J. Werner and co-workers. Type: string; Default: WERNER. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_METHOD. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__local_method.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_method.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_pairdef.html:432,Deployability,update,updated,432,"﻿. LOCAL_PAIRDEF. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_PAIRDEF. LOCAL_PAIRDEF¶. Definition of local pair domains. Type: string; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_PAIRDEF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__local_pairdef.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_pairdef.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_weakp.html:241,Availability,avail,available,241,"﻿. LOCAL_WEAKP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_WEAKP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_WEAKP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_weakp.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_weakp.html:548,Deployability,update,updated,548,"﻿. LOCAL_WEAKP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_WEAKP. LOCAL_WEAKP¶. Desired treatment of “weak pairs” in the local-CCSD method. The value of NONE (unique available option) treats weak pairs in the same manner as strong pairs. Type: string; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; LOCAL_WEAKP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__local_weakp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__local_weakp.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__maxiter.html:445,Deployability,update,updated,445,"﻿. MAXITER. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; MAXITER. MAXITER¶. Maximum number of iterations to converge perturbed amplitude equations. Type: integer; Default: 50. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; MAXITER. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__maxiter.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__maxiter.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__num_amps_print.html:494,Deployability,update,updated,494,"﻿. NUM_AMPS_PRINT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; NUM_AMPS_PRINT. NUM_AMPS_PRINT¶. Number of important CC amplitudes per excitation level to print. CC analog to NUM_DETS_PRINT. Type: integer; Default: 5. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; NUM_AMPS_PRINT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__num_amps_print.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__num_amps_print.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__omega.html:690,Deployability,update,updated,690,"﻿. OMEGA. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; OMEGA. OMEGA¶. Array that specifies the desired frequencies of the incident radiation field in CCLR calculations. If only one element is given, the units will be assumed to be atomic units. If more than one element is given, then the units must be specified as the final element of the array. Acceptable units are HZ, NM, EV, and AU. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; OMEGA. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__omega.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__omega.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__property.html:690,Deployability,update,updated,690,"﻿. PROPERTY. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; PROPERTY. PROPERTY¶. The response property desired. Acceptable values are POLARIZABILITY (default) for dipole polarizabilities, ROTATION for specific rotations, ROA for Raman Optical Activity (ROA_TENSOR for each displacement), and ALL for all of the above. Type: string; Possible Values: POLARIZABILITY, ROTATION, ROA, ROA_TENSOR, ALL; Default: POLARIZABILITY. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; PROPERTY. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__property.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__property.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__reference.html:410,Deployability,update,updated,410,"﻿. REFERENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; REFERENCE. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; REFERENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__reference.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__restart.html:412,Deployability,update,updated,412,"﻿. RESTART. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; RESTART. RESTART¶. Do restart from on-disk amplitudes?. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; RESTART. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__restart.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__restart.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__r_convergence.html:478,Deployability,update,updated,478,"﻿. R_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; R_CONVERGENCE. R_CONVERGENCE¶. Convergence criterion for wavefunction (change) in perturbed CC equations. Type: conv double; Default: 1e-7. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; R_CONVERGENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__r_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__r_convergence.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__sekino.html:418,Deployability,update,updated,418,"﻿. SEKINO. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; SEKINO. SEKINO¶. Do Sekino-Bartlett size-extensive model-III?. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; SEKINO. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__sekino.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__sekino.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__wfn.html:376,Deployability,update,updated,376,"﻿. WFN. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; WFN. WFN¶. Wavefunction type. Type: string; Default: SCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCRESPONSE; WFN. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/ccresponse__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/ccresponse__wfn.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__ao_basis.html:489,Deployability,update,updated,489,"﻿. AO_BASIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; AO_BASIS. AO_BASIS¶. The algorithm to use for the \(\left\langle VV||VV \right\rangle\) terms. Type: string; Possible Values: NONE, DISK, DIRECT; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; AO_BASIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctransort__ao_basis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__ao_basis.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__cachelevel.html:410,Deployability,update,updated,410,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctransort__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__cachelevel.html:3,Performance,CACHE,CACHELEVEL,3,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctransort__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__cachelevel.html:127,Performance,CACHE,CACHELEVEL,127,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctransort__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__cachelevel.html:139,Performance,CACHE,CACHELEVEL,139,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctransort__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__cachelevel.html:351,Performance,CACHE,CACHELEVEL,351,"﻿. CACHELEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; CACHELEVEL. CACHELEVEL¶. Caching level for libdpd. Type: integer; Default: 2. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; CACHELEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctransort__cachelevel.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__cachelevel.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__delete_tei.html:451,Deployability,update,updated,451,"﻿. DELETE_TEI. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; DELETE_TEI. DELETE_TEI¶. Delete the SO two-electron integrals after the transformation?. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; DELETE_TEI. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctransort__delete_tei.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__delete_tei.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__reference.html:410,Deployability,update,updated,410,"﻿. REFERENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; REFERENCE. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; REFERENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctransort__reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__reference.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__run_cctransort.html:234,Deployability,install,installation,234,"﻿. RUN_CCTRANSORT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; RUN_CCTRANSORT. RUN_CCTRANSORT¶. Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; RUN_CCTRANSORT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctransort__run_cctransort.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__run_cctransort.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__run_cctransort.html:558,Deployability,update,updated,558,"﻿. RUN_CCTRANSORT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; RUN_CCTRANSORT. RUN_CCTRANSORT¶. Use cctransort module NOTE: Turning this option off requires separate installation of ccsort and transqt2 modules, see http://github.com/psi4/psi4pasture. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; RUN_CCTRANSORT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctransort__run_cctransort.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__run_cctransort.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__semicanonical.html:477,Deployability,update,updated,477,"﻿. SEMICANONICAL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; SEMICANONICAL. SEMICANONICAL¶. Force conversion of ROHF MOs to semicanonical MOs to run UHF-based energies. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; SEMICANONICAL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctransort__semicanonical.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__semicanonical.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__wfn.html:383,Deployability,update,updated,383,"﻿. WFN. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; WFN. WFN¶. Wavefunction type. Type: string; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRANSORT; WFN. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctransort__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctransort__wfn.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctriples__cc_num_threads.html:417,Deployability,update,updated,417,"﻿. CC_NUM_THREADS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRIPLES; CC_NUM_THREADS. CC_NUM_THREADS¶. Number of threads. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRIPLES; CC_NUM_THREADS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctriples__cc_num_threads.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctriples__cc_num_threads.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctriples__reference.html:408,Deployability,update,updated,408,"﻿. REFERENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRIPLES; REFERENCE. REFERENCE¶. Reference wavefunction type. Type: string; Default: RHF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRIPLES; REFERENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctriples__reference.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctriples__reference.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctriples__semicanonical.html:436,Deployability,update,updated,436,"﻿. SEMICANONICAL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRIPLES; SEMICANONICAL. SEMICANONICAL¶. Convert ROHF MOs to semicanonical MOs. Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRIPLES; SEMICANONICAL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctriples__semicanonical.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctriples__semicanonical.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctriples__wfn.html:374,Deployability,update,updated,374,"﻿. WFN. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRIPLES; WFN. WFN¶. Wavefunction type. Type: string; Default: SCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CCTRIPLES; WFN. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cctriples__wfn.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cctriples__wfn.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_abcdtype.html:1139,Deployability,update,updated,1139,"﻿. CFOUR_ABCDTYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ABCDTYPE. CFOUR_ABCDTYPE¶. Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ABCDTYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_abcdtype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_abcdtype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_abcdtype.html:638,Energy Efficiency,reduce,reduces,638,"﻿. CFOUR_ABCDTYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ABCDTYPE. CFOUR_ABCDTYPE¶. Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ABCDTYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_abcdtype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_abcdtype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_abcdtype.html:793,Energy Efficiency,energy,energy,793,"﻿. CFOUR_ABCDTYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ABCDTYPE. CFOUR_ABCDTYPE¶. Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ABCDTYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_abcdtype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_abcdtype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_abcdtype.html:845,Energy Efficiency,energy,energy,845,"﻿. CFOUR_ABCDTYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ABCDTYPE. CFOUR_ABCDTYPE¶. Specifies the way the \(\langle ab||cd \rangle\) molecular orbital integrals are handled in post-MP2 calculations. STANDARD (= 0) uses directly the corresponding MO integrals and thus results in an algorithm which in particular for large-scale calculations results in excessive use of disk space (storage of all \(\langle ab||cd\rangle\) integrals. AOBASIS (=2) uses an AO-based algorithm to evaluate all terms involving the \(\langle ab||cd\rangle\) integrals and significantly reduces the amount of disk storage. The use of ABCDTYPE=AOBASIS is strongly recommended for all CC calculations up to CCSD(T) and has been implemented for energy, gradient, second-derivative, and excitation energy calculations. Type: string; Possible Values: STANDARD, AOBASIS; Default: STANDARD. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ABCDTYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_abcdtype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_abcdtype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_active_orbi.html:904,Deployability,update,updated,904,"﻿. CFOUR_ACTIVE_ORBI. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ACTIVE_ORBI. CFOUR_ACTIVE_ORBI¶. Specifies the active orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_CORE_ORBITALS The active orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of active orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION . Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ACTIVE_ORBI. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_active_orbi.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_active_orbi.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anharmonic.html:1246,Deployability,release,release,1246,"﻿. CFOUR_ANHARMONIC. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANHARMONIC. CFOUR_ANHARMONIC¶. Specifies treatment of anharmonic effects by calculating cubic and/or quartic force fields. VIBROT (=3) requests calculation of only those cubic constants of the form \(\phi_{nij}\), where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form \(\phi_{ijkl}\), which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANHARMONIC. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_anharmonic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anharmonic.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anharmonic.html:1749,Deployability,update,updated,1749,"﻿. CFOUR_ANHARMONIC. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANHARMONIC. CFOUR_ANHARMONIC¶. Specifies treatment of anharmonic effects by calculating cubic and/or quartic force fields. VIBROT (=3) requests calculation of only those cubic constants of the form \(\phi_{nij}\), where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form \(\phi_{ijkl}\), which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANHARMONIC. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_anharmonic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anharmonic.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anharmonic.html:1057,Energy Efficiency,energy,energy,1057,"﻿. CFOUR_ANHARMONIC. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANHARMONIC. CFOUR_ANHARMONIC¶. Specifies treatment of anharmonic effects by calculating cubic and/or quartic force fields. VIBROT (=3) requests calculation of only those cubic constants of the form \(\phi_{nij}\), where n is a totally symmetric coordinate. These are sufficient to determine the vibration-rotation interaction constants needed to calculate vibrational corrections to rotational constants, but are not sufficient to generate the corresponding cubic constants of isotopologs that have a lower point-group symmetry (i.e. HOD isotopolog of water). VPT2 (=1, note that the old value CUBIC can be still used and is equivalent to VPT2) generates all cubic constants and all quartic constants apart from those of the form \(\phi_{ijkl}\), which is enough for: 1) generation of cubic constants of isotopologs (see manual entries associated with anharmonic calculations for an example); 2) calculation of vibrational energy levels with VPT2. This keyword also directs the program to analyze resonances and calculate intensities of one- and two-quantum transitions. FULLQUARTIC (=2) (not part of the public release) is largely self-explanatory; it directs the program to calculate all quartic constants. This is sufficient (but this has not been implemented) to generate the full quartic force field of all isotopologs. Type: string; Possible Values: CUBIC, VPT2, FULLQUARTIC, VIBROT, OFF; Default: OFF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANHARMONIC. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_anharmonic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anharmonic.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_algorithm.html:1094,Deployability,update,updated,1094,"﻿. CFOUR_ANH_ALGORITHM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANH_ALGORITHM. CFOUR_ANH_ALGORITHM¶. Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANH_ALGORITHM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_algorithm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_algorithm.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_algorithm.html:307,Usability,simpl,simply,307,"﻿. CFOUR_ANH_ALGORITHM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANH_ALGORITHM. CFOUR_ANH_ALGORITHM¶. Specifies which algorithm is used for CFOUR_ANHARMONIC =VIBROT, VPT2, and FULLQUARTIC calculations. If STANDARD (=0) is chosen, then simply invoking xcfour will cause a complete job to be run with all second-derivative calculations being done in series. If PARALLEL (=1), then the job stops after the second-derivative calculation at the reference geometry and generates out all input geometries for the remaining calculation. These can be then processed in “parallel” (currently not recommended). Note that it is recommended to carry out all calculations with PARALLEL, even when the actual calculation is carried out in a sequential mode. Type: string; Possible Values: STANDARD, PARALLEL; Default: STANDARD. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANH_ALGORITHM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_algorithm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_algorithm.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_derivatives.html:579,Deployability,update,updated,579,"﻿. CFOUR_ANH_DERIVATIVES. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANH_DERIVATIVES. CFOUR_ANH_DERIVATIVES¶. Specifies whether the anharmonic force field is calculated using analytic gradients (=FIRST) or analytic Hessians (=SECOND). Type: string; Possible Values: FIRST, SECOND; Default: SECOND. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANH_DERIVATIVES. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_derivatives.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_derivatives.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_stepsize.html:648,Deployability,update,updated,648,"﻿. CFOUR_ANH_STEPSIZE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANH_STEPSIZE. CFOUR_ANH_STEPSIZE¶. Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is \(\times 10^6\) the integer value specified. Type: integer; Default: 50000. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANH_STEPSIZE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_stepsize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_stepsize.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_stepsize.html:264,Energy Efficiency,reduce,reduced,264,"﻿. CFOUR_ANH_STEPSIZE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANH_STEPSIZE. CFOUR_ANH_STEPSIZE¶. Controls the stepsize used in anharmonic force field calculations. The value is specified in reduced normal coordinates, which are dimensionless. The actual stepsize used in the calculation is \(\times 10^6\) the integer value specified. Type: integer; Default: 50000. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANH_STEPSIZE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_stepsize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_stepsize.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_symmetry.html:1173,Deployability,update,updated,1173,"﻿. CFOUR_ANH_SYMMETRY. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANH_SYMMETRY. CFOUR_ANH_SYMMETRY¶. Specifies whether non-abelian symmetry is to be exploited in determining displacements for CFOUR_ANHARMONIC =VIBROT or VPT2 calculations. If set to NONABELIAN (=0), maximum advantage will be taken of symmetry and the full set of cubic force constants will be generated from a skeleton set by application of the totally symmetric projection operator. If set to ABELIAN (=1), only the operations of the abelian subgroup will be exploited. Note: It is important to point out that the symmetrization currently works only for cubic constants. Therefore, if you require quartic force constants (for frequency calculations), you must use the ABELIAN option. Moreover, the latter work for only asymmetric tops and linear molecules. Type: string; Possible Values: ABELIAN, NONABELIAN; Default: ABELIAN. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ANH_SYMMETRY. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_symmetry.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_anh_symmetry.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_ao_ladders.html:1706,Deployability,update,updated,1706,"﻿. CFOUR_AO_LADDERS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_AO_LADDERS. CFOUR_AO_LADDERS¶. Can be used to control the algorithm used by CFOUR when terms involving \(\langle ab||cd\rangle\) molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE . MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_AO_LADDERS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_ao_ladders.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_ao_ladders.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_ao_ladders.html:667,Energy Efficiency,reduce,reduced,667,"﻿. CFOUR_AO_LADDERS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_AO_LADDERS. CFOUR_AO_LADDERS¶. Can be used to control the algorithm used by CFOUR when terms involving \(\langle ab||cd\rangle\) molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE . MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_AO_LADDERS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_ao_ladders.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_ao_ladders.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_ao_ladders.html:1266,Energy Efficiency,reduce,reduced,1266,"﻿. CFOUR_AO_LADDERS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_AO_LADDERS. CFOUR_AO_LADDERS¶. Can be used to control the algorithm used by CFOUR when terms involving \(\langle ab||cd\rangle\) molecular orbital integrals are calculated in the atomic orbital basis (see CFOUR_ABCDTYPE . MULTIPASS (= 0) uses an approach where the AO integral file is read a number of times in order to ensure maximal vectorization and is usually the optimal strategy on supercomputers; SINGLEPASS (= 1) determines the contributions with only a single pass through the AO integrals, but at the cost of significantly reduced vectorization. In general, however, SINGLEPASS is definitely preferable on workstations with RISC architectures. (Default : MULTIPASS on all 64-bit machines (e.g., CRAY-YMP) ; SINGLEPASS on all 32-bit machines (e.g., IBM-RS6000, HP-735, SGI-Indigo, DEC alphastations)). SPARSE_AO (=2) uses a sparse matrix algorithm which first rearranges the integral matrix in order to get “well-occupied” and “very sparse” blocks. “Well-occupied” blocks will be multiplied by matrix multiplication while in “very sparse” blocks only the non-zero elements are considered. The computational time is further reduced using symmetrized and anti-symmetrized integral and amplitude matrices in the multiplication. Substantial saving is assumed if SPARSE_AO (=2) is used. Type: string; Possible Values: MULTIPASS, SINGLEPASS; Default: SINGLEPASS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_AO_LADDERS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_ao_ladders.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_ao_ladders.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_av_scf.html:549,Deployability,update,updated,549,"﻿. CFOUR_AV_SCF. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_AV_SCF. CFOUR_AV_SCF¶. Experimental Use! ON (=1) requests and averaged SCF over two states. So far only implemented for degenerate doublet-Pi states and used in conjunction with SOPERT. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_AV_SCF. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_av_scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_av_scf.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_basis.html:362,Availability,avail,available,362,"﻿. CFOUR_BASIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_BASIS. CFOUR_BASIS¶. Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_BASIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_basis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_basis.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_basis.html:453,Availability,avail,available,453,"﻿. CFOUR_BASIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_BASIS. CFOUR_BASIS¶. Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_BASIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_basis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_basis.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_basis.html:857,Deployability,update,updated,857,"﻿. CFOUR_BASIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_BASIS. CFOUR_BASIS¶. Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_BASIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_basis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_basis.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_basis.html:469,Integrability,Interface,Interface,469,"﻿. CFOUR_BASIS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_BASIS. CFOUR_BASIS¶. Specifies the AO basis used in the calculation. One can either specify a basis known to CFOUR or via BASIS=SPECIAL (=0) requests an arbitrary basis (see non-standard basis-set input). However, the latter must be available in the supplied GENBAS file. As standard basis sets, currently the following are available. Psi4 Interface: Recommended to use instead BASIS for larger basis set selection and greater flexibility. When BASIS used, CFOUR_SPHERICAL is set appropriately. Type: string; Default: SPECIAL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_BASIS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_basis.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_basis.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_bruck_conv.html:416,Deployability,update,updated,416,"﻿. CFOUR_BRUCK_CONV. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_BRUCK_CONV. CFOUR_BRUCK_CONV¶. experimental use. Type: integer; Default: 4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_BRUCK_CONV. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_bruck_conv.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_bruck_conv.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_brueckner.html:573,Deployability,update,updated,573,"﻿. CFOUR_BRUECKNER. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_BRUECKNER. CFOUR_BRUECKNER¶. Specifies whether Brueckner orbitals are to be determined for the specified CC method. OFF(=0) Brueckner orbitals are not to be determined, ON (=1) they are to be determined. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_BRUECKNER. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_brueckner.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_brueckner.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cache_recs.html:530,Deployability,update,updated,530,"﻿. CFOUR_CACHE_RECS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CACHE_RECS. CFOUR_CACHE_RECS¶. The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CACHE_RECS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cache_recs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cache_recs.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cache_recs.html:203,Performance,cache,cache,203,"﻿. CFOUR_CACHE_RECS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CACHE_RECS. CFOUR_CACHE_RECS¶. The number of records held in the i/o cache used by the post-SCF programs. The maximum number of records which can be held is 100. Type: integer; Default: 10. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CACHE_RECS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cache_recs.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cache_recs.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html:362,Availability,avail,available,362,"﻿. CFOUR_CALC_LEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CALC_LEVEL. CFOUR_CALC_LEVEL¶. Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CALC_LEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html:607,Deployability,update,updated,607,"﻿. CFOUR_CALC_LEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CALC_LEVEL. CFOUR_CALC_LEVEL¶. Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CALC_LEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html:289,Energy Efficiency,energy,energy,289,"﻿. CFOUR_CALC_LEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CALC_LEVEL. CFOUR_CALC_LEVEL¶. Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CALC_LEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html:317,Energy Efficiency,Energy,Energy,317,"﻿. CFOUR_CALC_LEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CALC_LEVEL. CFOUR_CALC_LEVEL¶. Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CALC_LEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html:220,Integrability,Interface,Interface,220,"﻿. CFOUR_CALC_LEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CALC_LEVEL. CFOUR_CALC_LEVEL¶. Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CALC_LEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html:204,Performance,perform,performed,204,"﻿. CFOUR_CALC_LEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CALC_LEVEL. CFOUR_CALC_LEVEL¶. Defines the level of calculation to be performed. Psi4 Interface: Keyword set from argument of computation command: CCSD if energy('c4-ccsd'), etc. See Energy (CFOUR) and Gradient (CFOUR). for all available. Type: string; Default: SCF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CALC_LEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_calc_level.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_conv.html:638,Deployability,update,updated,638,"﻿. CFOUR_CC_CONV. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_CONV. CFOUR_CC_CONV¶. Specifies the convergence criterion for the CC amplitude equations. The amplitudes are considered to be converged when the maximum of all (absolute) changes in the amplitudes is less than \(10^N\), where \(N\) is the value associated with the keyword. Type: integer; Default: 7. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_CONV. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_conv.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_conv.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_exporder.html:543,Deployability,update,updated,543,"﻿. CFOUR_CC_EXPORDER. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_EXPORDER. CFOUR_CC_EXPORDER¶. Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_EXPORDER. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_exporder.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_exporder.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_exporder.html:252,Modifiability,enhance,enhance,252,"﻿. CFOUR_CC_EXPORDER. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_EXPORDER. CFOUR_CC_EXPORDER¶. Specifies the maximum number of expansion vectors used in the iterative subspace to enhance convergence in the solution of the CC equations. Type: integer; Default: 5. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_EXPORDER. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_exporder.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_exporder.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_extrapolation.html:387,Deployability,continuous,continuous,387,"﻿. CFOUR_CC_EXTRAPOLATION. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_EXTRAPOLATION. CFOUR_CC_EXTRAPOLATION¶. Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_EXTRAPOLATION. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_extrapolation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_extrapolation.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_extrapolation.html:879,Deployability,update,updated,879,"﻿. CFOUR_CC_EXTRAPOLATION. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_EXTRAPOLATION. CFOUR_CC_EXTRAPOLATION¶. Specifies the type of convergence acceleration used to solve the CC equations. RLE (=0) uses the RLE methods of Purvis and Bartlett, DIIS (=1) uses the DIIS approach by Pulay, NOJACOBI (=2) uses RLE with continuous extrapolation, OFF (=3) uses no convergence acceleration. In general, DIIS provides the best results and is recommended, while OFF often results in poor convergence and thus cannot be recommended. Type: string; Possible Values: RLE, DIIS, NOJACOBI, OFF; Default: DIIS. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_EXTRAPOLATION. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_extrapolation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_extrapolation.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_maxcyc.html:477,Deployability,update,updated,477,"﻿. CFOUR_CC_MAXCYC. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_MAXCYC. CFOUR_CC_MAXCYC¶. Specifies the maximum number of iterations in solving the CC amplitude equations. Type: integer; Default: 50. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_MAXCYC. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_maxcyc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_maxcyc.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html:205,Availability,avail,available,205,"﻿. CFOUR_CC_PROGRAM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. CFOUR_CC_PROGRAM¶. Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html:467,Availability,avail,available,467,"﻿. CFOUR_CC_PROGRAM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. CFOUR_CC_PROGRAM¶. Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html:1576,Deployability,update,updated,1576,"﻿. CFOUR_CC_PROGRAM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. CFOUR_CC_PROGRAM¶. Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html:1189,Energy Efficiency,energy,energy,1189,"﻿. CFOUR_CC_PROGRAM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. CFOUR_CC_PROGRAM¶. Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html:1230,Energy Efficiency,energy,energy,1230,"﻿. CFOUR_CC_PROGRAM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. CFOUR_CC_PROGRAM¶. Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html:919,Integrability,Interface,Interface,919,"﻿. CFOUR_CC_PROGRAM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. CFOUR_CC_PROGRAM¶. Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html:446,Performance,perform,performance,446,"﻿. CFOUR_CC_PROGRAM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. CFOUR_CC_PROGRAM¶. Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html:820,Performance,optimiz,optimization,820,"﻿. CFOUR_CC_PROGRAM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. CFOUR_CC_PROGRAM¶. Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html:886,Safety,safe,safe,886,"﻿. CFOUR_CC_PROGRAM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. CFOUR_CC_PROGRAM¶. Specifies which CC program is used. The available options are VCC (=0), ECC (=1), MRCC (=2), and EXTERNAL (=3). The default for all calculations is currently VCC which requests usage of xvcc, but in many cases (e.g., for CCSD and CCSD(T)) ECC should be preferred due to the better performance of xecc (available currently for CCSD, CCSD+T, CCSD(T), and closed-shell CCSDT-n, CC3, and CCSDT). MRCC and External are intended for CC programs outside the CFOUR suite, e.g., the general CC module mrcc written by M. Kallay (Budapest, Hungary). Default: VCC Note: Using the option ECC is not recommended for ROHF gradients. That is, if you are doing a geometry optimization with ROHF as your reference wave function then it is safe to use the option VCC. Psi4 Interface: Keyword set according to best practice for the computational method CFOUR_CALC_LEVEL reference CFOUR_REFERENCE (NYI) and derivative level CFOUR_DERIV_LEVEL according to Table Best Practices when method specified by argument to computation command (e.g., when energy('c4-ccsd') requested but not when energy('cfour') requested). Value can always be set explicitly. Type: string; Possible Values: VCC, ECC, NCC, MRCC, EXTERNAL; Default: VCC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CC_PROGRAM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cc_program.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_charge.html:464,Deployability,update,updated,464,"﻿. CFOUR_CHARGE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CHARGE. CFOUR_CHARGE¶. Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CHARGE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_charge.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_charge.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_charge.html:177,Energy Efficiency,charge,charge,177,"﻿. CFOUR_CHARGE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CHARGE. CFOUR_CHARGE¶. Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CHARGE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_charge.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_charge.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_charge.html:190,Integrability,Interface,Interface,190,"﻿. CFOUR_CHARGE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CHARGE. CFOUR_CHARGE¶. Specifies the molecular charge. Psi4 Interface: Keyword set from active molecule. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CHARGE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_charge.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_charge.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cis_conv.html:463,Deployability,update,updated,463,"﻿. CFOUR_CIS_CONV. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CIS_CONV. CFOUR_CIS_CONV¶. Specifies the convergence threshold as \(10^{-N}\) for CIS calculations. Type: integer; Default: 5. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CIS_CONV. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cis_conv.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cis_conv.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_continuum.html:747,Deployability,update,updated,747,"﻿. CFOUR_CONTINUUM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CONTINUUM. CFOUR_CONTINUUM¶. Signifies that one or more “continuum” orbitals should be added to the calculation. VIRTUAL and DVIRTUAL specify one or two orbital which should be initially unoccupied (in the SCF calculation), while OCCUPIED and DOCCUPIED specify one or two orbitals which should be initially occupied. Type: string; Possible Values: NONE, VIRTUAL, DVIRTUAL, OCCUPIED, DOCCUPIED; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CONTINUUM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_continuum.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_continuum.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_contraction.html:824,Deployability,update,updated,824,"﻿. CFOUR_CONTRACTION. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CONTRACTION. CFOUR_CONTRACTION¶. Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CONTRACTION. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_contraction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_contraction.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_contraction.html:182,Integrability,contract,contraction,182,"﻿. CFOUR_CONTRACTION. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CONTRACTION. CFOUR_CONTRACTION¶. Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CONTRACTION. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_contraction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_contraction.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_contraction.html:287,Integrability,contract,contraction,287,"﻿. CFOUR_CONTRACTION. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CONTRACTION. CFOUR_CONTRACTION¶. Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CONTRACTION. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_contraction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_contraction.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_contraction.html:335,Integrability,contract,contraction,335,"﻿. CFOUR_CONTRACTION. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CONTRACTION. CFOUR_CONTRACTION¶. Specifies the contraction scheme used by the integral and integral derivative program. SEGMENTED (=0) uses a segmented contraction scheme; GENERAL (=1) uses a general contraction scheme, and UNCONTRACTED (=2) uses the corresponding uncontracted sets. Note that even for truly segmented basis sets, the integral programs run significantly faster in the GENERAL mode. Type: string; Possible Values: SEGMENTED, GENERAL, UNCONTRACTED; Default: GENERAL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CONTRACTION. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_contraction.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_contraction.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_convergence.html:431,Deployability,update,updated,431,"﻿. CFOUR_CONVERGENCE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CONVERGENCE. CFOUR_CONVERGENCE¶. Identical to CFOUR_GEO_CONV. Type: integer; Default: 4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CONVERGENCE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_convergence.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_convergence.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_coordinates.html:1075,Deployability,update,updated,1075,"﻿. CFOUR_COORDINATES. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_COORDINATES. CFOUR_COORDINATES¶. Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_COORDINATES. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_coordinates.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_coordinates.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_coordinates.html:664,Integrability,Interface,Interface,664,"﻿. CFOUR_COORDINATES. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_COORDINATES. CFOUR_COORDINATES¶. Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_COORDINATES. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_coordinates.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_coordinates.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_coordinates.html:591,Performance,optimiz,optimizations,591,"﻿. CFOUR_COORDINATES. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_COORDINATES. CFOUR_COORDINATES¶. Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_COORDINATES. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_coordinates.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_coordinates.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_coordinates.html:758,Performance,optimiz,optimizations,758,"﻿. CFOUR_COORDINATES. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_COORDINATES. CFOUR_COORDINATES¶. Specifies the type of coordinates used in the input file ZMAT. Value INTERNAL (=0) means that the geometry is supplied in the usual Z-matrix format, while CARTESIAN (=1) means that the geometry is given in Cartesian coordinates. A third option is XYZINT (=2) for which a Z-matrix connectivity is defined, but with values of the internal coordinates defined implicitly by supplying Cartesian coordinates. Note that geometry optimizations are currently only possible for INTERNAL and XYZ2INT. Psi4 Interface: Keyword set from active molecule, always CARTESIAN. Above restrictions on geometry optimizations no longer apply. Type: string; Possible Values: INTERNAL, CARTESIAN, XYZINT; Default: INTERNAL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_COORDINATES. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_coordinates.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_coordinates.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_core_orbitals.html:903,Deployability,update,updated,903,"﻿. CFOUR_CORE_ORBITALS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CORE_ORBITALS. CFOUR_CORE_ORBITALS¶. Specifies the core orbitals used in a TCSCF calculation and has to be used in combination with the keyword CFOUR_ACTIVE_ORBI The core orbitals are specified by either NIRREP or 2*NIRREP integers specifying the number of core orbitals of each symmetry type, where NIRREP is the number of irreducible representations in the computational point group. If there are no orbitals of a particular symmetry type a zero must be entered. For more information and an example see CFOUR_OCCUPATION. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CORE_ORBITALS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_core_orbitals.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_core_orbitals.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cphf_conver.html:342,Availability,error,error,342,"﻿. CFOUR_CPHF_CONVER. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CPHF_CONVER. CFOUR_CPHF_CONVER¶. Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CPHF_CONVER. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cphf_conver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cphf_conver.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cphf_conver.html:612,Deployability,update,updated,612,"﻿. CFOUR_CPHF_CONVER. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CPHF_CONVER. CFOUR_CPHF_CONVER¶. Specifies the convergence criterion for the iterative solution of the CPHF and Z-vector equations. The solutions are considered to be converged when the residual norm of the error vector falls below \(10^N\). Type: integer; Default: 12. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CPHF_CONVER. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cphf_conver.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cphf_conver.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cphf_maxcyc.html:507,Deployability,update,updated,507,"﻿. CFOUR_CPHF_MAXCYC. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CPHF_MAXCYC. CFOUR_CPHF_MAXCYC¶. Specifies the maximum number of cycles allowed for the solution of the CPHF- and/or Z-vector equations. Type: integer; Default: 64. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CPHF_MAXCYC. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_cphf_maxcyc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_cphf_maxcyc.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_curvilinear.html:365,Availability,avail,available,365,"﻿. CFOUR_CURVILINEAR. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CURVILINEAR. CFOUR_CURVILINEAR¶. Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CURVILINEAR. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_curvilinear.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_curvilinear.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_curvilinear.html:540,Availability,avail,available,540,"﻿. CFOUR_CURVILINEAR. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CURVILINEAR. CFOUR_CURVILINEAR¶. Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CURVILINEAR. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_curvilinear.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_curvilinear.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_curvilinear.html:804,Deployability,update,updated,804,"﻿. CFOUR_CURVILINEAR. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CURVILINEAR. CFOUR_CURVILINEAR¶. Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CURVILINEAR. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_curvilinear.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_curvilinear.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_curvilinear.html:395,Performance,perform,performed,395,"﻿. CFOUR_CURVILINEAR. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CURVILINEAR. CFOUR_CURVILINEAR¶. Specifies whether or not Hessian matrix is transformed (nonlinearly) to curvilinear internal coordinates. A value of 0 (or OFF) turns the transformation off if the analytic force constants are not available, while it is always performed if CURVILINEAR=1 (or ON). Values higher than 1 (or NO) unconditionally turn the transformation off.(Default: ON if analytic Hessian is available, OFF otherwise). Type: boolean; Default: true. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_CURVILINEAR. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_curvilinear.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_curvilinear.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dboc.html:302,Availability,avail,available,302,"﻿. CFOUR_DBOC. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DBOC. CFOUR_DBOC¶. Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DBOC. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_dboc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dboc.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dboc.html:601,Deployability,update,updated,601,"﻿. CFOUR_DBOC. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DBOC. CFOUR_DBOC¶. Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DBOC. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_dboc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dboc.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dboc.html:220,Energy Efficiency,energy,energy,220,"﻿. CFOUR_DBOC. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DBOC. CFOUR_DBOC¶. Specifies whether the diagonal Born-Oppenheimer correction (DBOC) to the energy is evaluated (ON =1) or not (OFF =0). DBOC calculations are currently only available for HF-SCF and CCSD using RHF or UHF reference functions. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DBOC. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_dboc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dboc.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dct.html:464,Deployability,update,updated,464,"﻿. CFOUR_DCT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DCT. CFOUR_DCT¶. Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DCT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dct.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dct.html:173,Modifiability,Coupling,Coupling,173,"﻿. CFOUR_DCT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DCT. CFOUR_DCT¶. Specifies whether the Dipole Coupling Tensor (DCT) is calculated (ON =1) or not (OFF =0). Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DCT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_dct.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dct.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_deriv_level.html:989,Deployability,update,updated,989,"﻿. CFOUR_DERIV_LEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DERIV_LEVEL. CFOUR_DERIV_LEVEL¶. Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DERIV_LEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_deriv_level.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_deriv_level.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_deriv_level.html:193,Energy Efficiency,energy,energy,193,"﻿. CFOUR_DERIV_LEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DERIV_LEVEL. CFOUR_DERIV_LEVEL¶. Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DERIV_LEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_deriv_level.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_deriv_level.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_deriv_level.html:665,Energy Efficiency,energy,energy,665,"﻿. CFOUR_DERIV_LEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DERIV_LEVEL. CFOUR_DERIV_LEVEL¶. Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DERIV_LEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_deriv_level.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_deriv_level.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_deriv_level.html:600,Integrability,Interface,Interface,600,"﻿. CFOUR_DERIV_LEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DERIV_LEVEL. CFOUR_DERIV_LEVEL¶. Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DERIV_LEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_deriv_level.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_deriv_level.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_deriv_level.html:698,Performance,optimiz,optimize,698,"﻿. CFOUR_DERIV_LEVEL. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DERIV_LEVEL. CFOUR_DERIV_LEVEL¶. Specifies whether or not energy derivatives are to be calculated and if so whether first or second derivatives are computed. ZERO (= 0) derivatives are not calculated, FIRST (=1) first derivatives are calculated, SECOND (=2) second derivatives are calculated. Note that this keyword usually needs not be set in any calculation since it is automatically set if the appropriate other options in the CFOUR namelist are turned on. Psi4 Interface: Keyword set from type of computation command: ZERO if energy(), FIRST if gradient() or optimize(), etc. Type: string; Possible Values: ZERO, FIRST, SECOND; Default: ZERO. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DERIV_LEVEL. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_deriv_level.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_deriv_level.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_diff_type.html:567,Deployability,update,updated,567,"﻿. CFOUR_DIFF_TYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DIFF_TYPE. CFOUR_DIFF_TYPE¶. Specifies whether orbital-relaxed (RELAXED =0) or orbital-unrelaxed (UNRELAXED =1) derivatives are computed in the CC calculation. Type: string; Possible Values: RELAXED, UNRELAXED; Default: RELAXED. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DIFF_TYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_diff_type.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_diff_type.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dropmo.html:826,Availability,toler,tolerant,826,"﻿. CFOUR_DROPMO. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DROPMO. CFOUR_DROPMO¶. Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64]. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DROPMO. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_dropmo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dropmo.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dropmo.html:1120,Deployability,update,updated,1120,"﻿. CFOUR_DROPMO. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DROPMO. CFOUR_DROPMO¶. Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64]. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DROPMO. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_dropmo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dropmo.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dropmo.html:311,Energy Efficiency,energy,energy,311,"﻿. CFOUR_DROPMO. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DROPMO. CFOUR_DROPMO¶. Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64]. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DROPMO. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_dropmo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dropmo.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dropmo.html:358,Energy Efficiency,energy,energy,358,"﻿. CFOUR_DROPMO. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DROPMO. CFOUR_DROPMO¶. Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64]. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DROPMO. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_dropmo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dropmo.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dropmo.html:763,Integrability,Interface,Interface,763,"﻿. CFOUR_DROPMO. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DROPMO. CFOUR_DROPMO¶. Specifies which molecular orbitals will be dropped from the post-SCF calculation. The orbitals are numbered in ascending order from the most stable (negative energy) to the most unstable (largest positive energy). Individual orbitals must be separated with a dash, while x>y means orbitals x through y inclusive. For example, the string 1>10-55-58>64, would result in orbitals 1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63 and 64 being dropped. For UHF calculations, the appropriate orbitals are deleted for both spin cases. No dropped virtual MOs are currently allowed for gradient or property calculations. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [1,2,3,4,5,6,7,8,9,10,55,58,59,60,61,62,63,64]. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_DROPMO. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_dropmo.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_dropmo.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_ecp.html:473,Deployability,update,updated,473,"﻿. CFOUR_ECP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ECP. CFOUR_ECP¶. Specifies whether effective core potentials (pseudopotentials) are used (ON, =1) or not (OFF, =0). Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ECP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_ecp.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_ecp.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_eigenvector.html:1020,Deployability,update,updated,1020,"﻿. CFOUR_EIGENVECTOR. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EIGENVECTOR. CFOUR_EIGENVECTOR¶. Specifies which eigenvector of the totally symmetric part of the block-factored Hessian is to be followed uphill in a transition state search. Eigenvectors are indexed by their eigenvalues – the lowest eigenvalue is 1, the next lowest is 2, etc. The default is 1, which should always be used if you are not looking for a specific transition state which you know corresponds to motion along a different mode. In the future, relatively sophisticated generation of a guessed eigenvector will be implemented, but this is the way things are for now. Of course, this keyword has no meaning if CFOUR_METHOD is not set to TS. Type: integer; Default: 1. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EIGENVECTOR. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_eigenvector.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_eigenvector.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_el_anharm.html:478,Deployability,update,updated,478,"﻿. CFOUR_EL_ANHARM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EL_ANHARM. CFOUR_EL_ANHARM¶. Experimental use, ON = 1 requests the evaluation of electrical anharmonicities. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EL_ANHARM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_el_anharm.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_el_anharm.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_eom_nonit.html:664,Deployability,update,updated,664,"﻿. CFOUR_EOM_NONIT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EOM_NONIT. CFOUR_EOM_NONIT¶. Controls whether non-iterative triples corrections are applied after various types of EOM-CCSD calculation. Works with CFOUR_EXCITE set to EOMIP, might work with EOMEE, certainly doesn’t work with EOMEA. Use with great caution, preferably after having a few drinks. Type: boolean; Default: false. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EOM_NONIT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_eom_nonit.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_eom_nonit.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_conv.html:615,Deployability,update,updated,615,"﻿. CFOUR_ESTATE_CONV. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_CONV. CFOUR_ESTATE_CONV¶. Specifies the threshold used in converging CC-LR/EOM-CC calculations. The iterative diagonalization is continued until the RMS residual falls below \(10^{-N}\) with \(N\) as the value specified with this keyword. Type: integer; Default: 5. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_CONV. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_conv.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_conv.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_maxcyc.html:547,Deployability,update,updated,547,"﻿. CFOUR_ESTATE_MAXCYC. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_MAXCYC. CFOUR_ESTATE_MAXCYC¶. The maximum number of expansion vectors used in the solution of EOMCC equations (Default: 20, hard-coded to 4 in triples calculations). Type: integer; Default: 20. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_MAXCYC. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_maxcyc.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_maxcyc.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_prop.html:411,Availability,avail,available,411,"﻿. CFOUR_ESTATE_PROP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_PROP. CFOUR_ESTATE_PROP¶. This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_PROP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_prop.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_prop.html:1889,Deployability,update,updated,1889,"﻿. CFOUR_ESTATE_PROP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_PROP. CFOUR_ESTATE_PROP¶. This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_PROP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_prop.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_prop.html:923,Energy Efficiency,energy,energy,923,"﻿. CFOUR_ESTATE_PROP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_PROP. CFOUR_ESTATE_PROP¶. This keyword applies only to EOM-CC calculations and specifies whether any excited or ionized state one-electron properties are to be calculated. Proper use of this keyword requires a relatively advanced knowledge of quantum chemistry and the available options are discussed here. The options are: OFF (=0) [no properties or transition moments are calculated]; EXPECTATION (=1) [transition moments and dipole strengths are calculated along with selected one-electron properties which are evaluated as expectation values]; UNRELAXED (=2) [selected one-electron properties are calculated in an approximation that neglects relaxation of molecular orbitals]; RESPONSE (=3) [selected one-electron properties are calculated as analytic first derivatives of the energy]. Except for EOMCC calculations on two-electron systems (which are exact), properties obtained by the three approaches will not be equivalent. The default value for this keyword is slightly complicated. For TDA calculations, the default is EXPECTATION since the evaluation of transition moments involves only a negligible amount of additional computation relative to the evaluation of the excitation energies. For EOMCC, the default is OFF since evaluation of any transition moments or properties requires approximately twice the computational time. Transition moments and dipole strengths are evaluated by default for all values of ESTATE_PROP other than OFF. Type: string; Possible Values: OFF, EXPECTATION, UNRELAXED, RESPONSE; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_PROP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_prop.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_prop.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_sym.html:1495,Availability,toler,tolerant,1495,"﻿. CFOUR_ESTATE_SYM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_SYM. CFOUR_ESTATE_SYM¶. Specifies the number of excited states which are to be determined in each irreducible representation of the computational subgroup. The program attempts to find all of the lowest roots, but this is not guaranteed because the eigenvalue problem is not solved by direct matrix diagonalization, but rather by an iterative (modified Davidson) algorithm. For excited state gradient calculations, only one root (clearly) is used. In such a case, one and only one non-zero entry in the string can be used, and this value is usually set to one (i.e. 0/1/0/0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_SYM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_sym.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_sym.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_sym.html:1756,Deployability,update,updated,1756,"﻿. CFOUR_ESTATE_SYM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_SYM. CFOUR_ESTATE_SYM¶. Specifies the number of excited states which are to be determined in each irreducible representation of the computational subgroup. The program attempts to find all of the lowest roots, but this is not guaranteed because the eigenvalue problem is not solved by direct matrix diagonalization, but rather by an iterative (modified Davidson) algorithm. For excited state gradient calculations, only one root (clearly) is used. In such a case, one and only one non-zero entry in the string can be used, and this value is usually set to one (i.e. 0/1/0/0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_SYM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_sym.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_sym.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_sym.html:1432,Integrability,Interface,Interface,1432,"﻿. CFOUR_ESTATE_SYM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_SYM. CFOUR_ESTATE_SYM¶. Specifies the number of excited states which are to be determined in each irreducible representation of the computational subgroup. The program attempts to find all of the lowest roots, but this is not guaranteed because the eigenvalue problem is not solved by direct matrix diagonalization, but rather by an iterative (modified Davidson) algorithm. For excited state gradient calculations, only one root (clearly) is used. In such a case, one and only one non-zero entry in the string can be used, and this value is usually set to one (i.e. 0/1/0/0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_SYM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_sym.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_sym.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_sym.html:571,Usability,clear,clearly,571,"﻿. CFOUR_ESTATE_SYM. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_SYM. CFOUR_ESTATE_SYM¶. Specifies the number of excited states which are to be determined in each irreducible representation of the computational subgroup. The program attempts to find all of the lowest roots, but this is not guaranteed because the eigenvalue problem is not solved by direct matrix diagonalization, but rather by an iterative (modified Davidson) algorithm. For excited state gradient calculations, only one root (clearly) is used. In such a case, one and only one non-zero entry in the string can be used, and this value is usually set to one (i.e. 0/1/0/0). (However sometimes one wants to calculate the gradient for, say, the second root of a given symmetry, and in such a case, one could use 0/2/0/0. What happens is that both roots are calculated, but only the second one is used in the subsequent density matrix and gradient calculation.) The format used for this keyword is identical to that used in CFOUR_OCCUPATION For example, for a computational subgroup having four symmetry species, the string 3/1/0/2 specifies that 6 total roots should be searched for, three in the first block, one in the second block, and two in the fourth block. It is also important to note that the %excite* input, if present, takes precedence over this keyword. Default: All zeros. Psi4 Interface: The array above is specified in PSI as (white space tolerant) [3,1,0,2]. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_SYM. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_sym.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_sym.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_trans.html:446,Availability,avail,available,446,"﻿. CFOUR_ESTATE_TRANS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_TRANS. CFOUR_ESTATE_TRANS¶. Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_TRANS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_trans.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_trans.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_trans.html:749,Deployability,update,updated,749,"﻿. CFOUR_ESTATE_TRANS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_TRANS. CFOUR_ESTATE_TRANS¶. Specifies whether just the excitation energies (OFF, =0) or in addition transition moments (EXPECTATION, =1) are calculated. Note that this keyword should not be used in excited-state calculations involving analytic gradients and that transition moments are essentially only available for EOM-CCSD/CCSD-LR. Type: string; Possible Values: OFF, EXPECTATION; Default: OFF. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_ESTATE_TRANS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_trans.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_estate_trans.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_eval_hess.html:740,Deployability,update,updated,740,"﻿. CFOUR_EVAL_HESS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EVAL_HESS. CFOUR_EVAL_HESS¶. Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EVAL_HESS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_eval_hess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_eval_hess.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_eval_hess.html:317,Integrability,Interface,Interface,317,"﻿. CFOUR_EVAL_HESS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EVAL_HESS. CFOUR_EVAL_HESS¶. Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EVAL_HESS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_eval_hess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_eval_hess.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_eval_hess.html:209,Performance,optimiz,optimization,209,"﻿. CFOUR_EVAL_HESS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EVAL_HESS. CFOUR_EVAL_HESS¶. Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EVAL_HESS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_eval_hess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_eval_hess.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_eval_hess.html:337,Performance,optimiz,optimizations,337,"﻿. CFOUR_EVAL_HESS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EVAL_HESS. CFOUR_EVAL_HESS¶. Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EVAL_HESS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_eval_hess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_eval_hess.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_eval_hess.html:403,Performance,optimiz,optimizer,403,"﻿. CFOUR_EVAL_HESS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EVAL_HESS. CFOUR_EVAL_HESS¶. Tells the program, in the course of a geometry optimization, to calculate the Hessian explicitly every N cycles. 0 means never calculated explicitly. Psi4 Interface: Geometry optimizations run through PSI (except in sandwich mode) use PSI’s optimizer and so this keyword has no effect. Use optking keywords instead, particularly FULL_HESS_EVERY. Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EVAL_HESS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_eval_hess.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_eval_hess.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_excitation.html:528,Deployability,update,updated,528,"﻿. CFOUR_EXCITATION. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EXCITATION. CFOUR_EXCITATION¶. Specifies in CC calculations using mrcc the excitation level if the calculation level has been chosen as CC(n), CI(n), or CCn(n). Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EXCITATION. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_excitation.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_excitation.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_excite.html:215,Availability,Avail,Available,215,"﻿. CFOUR_EXCITE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EXCITE. CFOUR_EXCITE¶. Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EXCITE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_excite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_excite.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_excite.html:758,Deployability,update,updated,758,"﻿. CFOUR_EXCITE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EXCITE. CFOUR_EXCITE¶. Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EXCITE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_excite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_excite.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_excite.html:204,Performance,perform,performed,204,"﻿. CFOUR_EXCITE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EXCITE. CFOUR_EXCITE¶. Specifies the type of EOM-CC/LR-CC treatment to be performed. Available options are NONE (=0), EOMEE (=3, the EOM-CC/CC-LR approach for the treatment of excited states), EOMIP (=4, the EOM-CC/CC-LR approach for the treatment of ionized states), EOMEA (=7, the EOM-CC/CC-LR approach for the treatment of electron-attached states). Type: string; Possible Values: NONE, EOMEE, EOMIP, EOMEA; Default: NONE. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_EXCITE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_excite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_excite.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fc_field.html:1101,Deployability,update,updated,1101,"﻿. CFOUR_FC_FIELD. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FC_FIELD. CFOUR_FC_FIELD¶. Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword \(\times 10^{-6}\). The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the calculation has to be run in lower symmetry or even without symmetry. (Default : 0). Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FC_FIELD. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_fc_field.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fc_field.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fc_field.html:321,Modifiability,coupling,coupling,321,"﻿. CFOUR_FC_FIELD. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FC_FIELD. CFOUR_FC_FIELD¶. Specifies the strength of a Fermi-Contact perturbation as required for finite-field calculations of spin densities and the FC contributions to indirect spin-spin coupling constants. The value must be specified as an integer and the FC strength used by the program will be the value of the keyword \(\times 10^{-6}\). The atom for which the FC perturbation is switched on is specified in the ZMAT file after the CFOUR command line and potential basis set input, as follows %spin density N with N as the number of atom (in (X5,I3) format) in the order they are written by JODA to the MOL file. Be aware that for some atoms, the calculation has to be run in lower symmetry or even without symmetry. (Default : 0). Type: integer; Default: 0. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FC_FIELD. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_fc_field.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fc_field.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_calctype.html:817,Availability,avail,available,817,"﻿. CFOUR_FD_CALCTYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_CALCTYPE. CFOUR_FD_CALCTYPE¶. Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1 blocks of symmetry-blocked force constants by second differences pf energies and all other elements by first differences of gradients. the GRADONLY and MIXED approaches may, of course, only be used hwen using computational methods for which analytic gradients are available. Type: string; Possible Values: GRADONLY, ENERONLY, MIXED; Default: GRADONLY. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_CALCTYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_calctype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_calctype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_calctype.html:1112,Deployability,update,updated,1112,"﻿. CFOUR_FD_CALCTYPE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_CALCTYPE. CFOUR_FD_CALCTYPE¶. Specifies the algorithm used to compute the harmonic force constants in finite-difference calculations.GRADONLY (=0) evaluates the force constants and dipole moment derivatives by numerical differentiation of analytic gradients; ENERONLY (=1) evaluates the force constants by second differences of energies (dipole moment derivatives are not evaluated); while MIXED (=2) evaluates 1x1 blocks of symmetry-blocked force constants by second differences pf energies and all other elements by first differences of gradients. the GRADONLY and MIXED approaches may, of course, only be used hwen using computational methods for which analytic gradients are available. Type: string; Possible Values: GRADONLY, ENERONLY, MIXED; Default: GRADONLY. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_CALCTYPE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_calctype.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_calctype.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_irreps.html:1513,Deployability,update,updated,1513,"﻿. CFOUR_FD_IRREPS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_IRREPS. CFOUR_FD_IRREPS¶. Requests that only vibrational frequencies of certain symmetry types are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible representations for which vibrational analysis is to be performed are separated by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_IRREPS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_irreps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_irreps.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_irreps.html:367,Performance,perform,performed,367,"﻿. CFOUR_FD_IRREPS. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_IRREPS. CFOUR_FD_IRREPS¶. Requests that only vibrational frequencies of certain symmetry types are evaluated in a VIBRATION=FINDIF calculation. The numbers of the irreducible representations for which vibrational analysis is to be performed are separated by slashes. For example, FD_IRREP=1/3/4 means compute the frequencies of modes transforming as the first, third, and fourth irreducible representations. If a symmetry is specified for which there are no vibrational modes, the program will terminate. The labels of the irreducible representations for this keyword are not usually the same as those used in the rest of the calculation. Moreover, for some point groups, for example, those of linear molecules, the two sets of labels refer to different subgroups. There is as yet no straightforward way to determine what they will be without starting a calculation. If one runs the xjoda and then the xsymcor executables, the relevant irreducible representations will be listed. If all vibrational frequencies are desired, this keyword need not be included. Default : compute vibrational frequencies for all irreducible representations. Type: array; Default: No Default. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_IRREPS. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_irreps.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_irreps.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_project.html:841,Deployability,update,updated,841,"﻿. CFOUR_FD_PROJECT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_PROJECT. CFOUR_FD_PROJECT¶. Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_PROJECT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_project.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_project.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_project.html:257,Energy Efficiency,adapt,adapted,257,"﻿. CFOUR_FD_PROJECT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_PROJECT. CFOUR_FD_PROJECT¶. Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_PROJECT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_project.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_project.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_project.html:460,Energy Efficiency,energy,energy,460,"﻿. CFOUR_FD_PROJECT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_PROJECT. CFOUR_FD_PROJECT¶. Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_PROJECT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_project.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_project.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_project.html:257,Modifiability,adapt,adapted,257,"﻿. CFOUR_FD_PROJECT. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_PROJECT. CFOUR_FD_PROJECT¶. Specifies whether or not rotational degrees of freedoms are projected out from the symmetry-adapted coordinates in a finite difference calculations. ON (=0) uses rotationally projected coordinates, while OFF (=1) retains the rotational degrees of freedom. At a stationary point on the potential energy surface, both options will give equivalent harmonic force fields, but OFF should be used at non-stationary points. Type: string; Possible Values: ON, OFF; Default: ON. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_PROJECT. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_project.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_project.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_stepsize.html:580,Deployability,update,updated,580,"﻿. CFOUR_FD_STEPSIZE. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_STEPSIZE. CFOUR_FD_STEPSIZE¶. Specifies the step length in mass-weighted coordinates (in \(10^{-4} amu^{1/2} bohr\) ) used in generating the force constant matrix by finite difference of Cartesian gradients. Type: integer; Default: 5. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_STEPSIZE. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_stepsize.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_stepsize.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_usegroup.html:743,Deployability,update,updated,743,"﻿. CFOUR_FD_USEGROUP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_USEGROUP. CFOUR_FD_USEGROUP¶. In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_USEGROUP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_usegroup.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_usegroup.html
https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_usegroup.html:304,Energy Efficiency,adapt,adapted,304,"﻿. CFOUR_FD_USEGROUP. Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_USEGROUP. CFOUR_FD_USEGROUP¶. In finite difference calculations using the FINDIF option, this keyword specifies the point group to be used in generating the symmetry-adapted vibrational coordinates. FULL (= 0) specifies the full molecular point group, COMP (= 1) specifies the Abelian subgroup used in the electronic structure calculation. Type: string; Possible Values: FULL, COMP; Default: FULL. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.7;  · . PSI4. Appendices; Keywords by Module; CFOUR; CFOUR_FD_USEGROUP. © Copyright 2007-2022, The Psi4 Project.; Last updated on Tuesday, 06 December 2022 10:44PM.; Created using Sphinx 5.1.1.; . ",MatchSource.WIKI,psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_usegroup.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.7.x/autodir_options_c/cfour__cfour_fd_usegroup.html
