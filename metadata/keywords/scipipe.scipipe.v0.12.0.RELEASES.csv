quality_attribute,keyword,matched_word,sentence,source,author,repo,version,wiki,url
Availability,avail,available,"This is a bug fix release, fixing a number of bugs: #93, #104, #105, #106 . The biggest change is that path modifiers such as `basename` and `%.ext` for trimming file name extensions, are now available for all placeholders in the main command as well as in the `SetOut()` function. The available modifiers are now documented here in the docs: [Available path modifiers](https://scipipe.org/writing_workflows/#available-path-modifiers). It also now has support for go modules (a simple change, as scipipe has zero dependencies :)). Thanks to @dwmunster for some contributions, and @jonalv for providing input leading to discovering most of, the fixes in this release.",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.9.7
Deployability,release,release,"This is a bug fix release, fixing a number of bugs: #93, #104, #105, #106 . The biggest change is that path modifiers such as `basename` and `%.ext` for trimming file name extensions, are now available for all placeholders in the main command as well as in the `SetOut()` function. The available modifiers are now documented here in the docs: [Available path modifiers](https://scipipe.org/writing_workflows/#available-path-modifiers). It also now has support for go modules (a simple change, as scipipe has zero dependencies :)). Thanks to @dwmunster for some contributions, and @jonalv for providing input leading to discovering most of, the fixes in this release.",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.9.7
Integrability,depend,dependencies,"This is a bug fix release, fixing a number of bugs: #93, #104, #105, #106 . The biggest change is that path modifiers such as `basename` and `%.ext` for trimming file name extensions, are now available for all placeholders in the main command as well as in the `SetOut()` function. The available modifiers are now documented here in the docs: [Available path modifiers](https://scipipe.org/writing_workflows/#available-path-modifiers). It also now has support for go modules (a simple change, as scipipe has zero dependencies :)). Thanks to @dwmunster for some contributions, and @jonalv for providing input leading to discovering most of, the fixes in this release.",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.9.7
Usability,simpl,simple,"This is a bug fix release, fixing a number of bugs: #93, #104, #105, #106 . The biggest change is that path modifiers such as `basename` and `%.ext` for trimming file name extensions, are now available for all placeholders in the main command as well as in the `SetOut()` function. The available modifiers are now documented here in the docs: [Available path modifiers](https://scipipe.org/writing_workflows/#available-path-modifiers). It also now has support for go modules (a simple change, as scipipe has zero dependencies :)). Thanks to @dwmunster for some contributions, and @jonalv for providing input leading to discovering most of, the fixes in this release.",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.9.7
Deployability,release,release,"This release contains a very large number of improvements, too large to list individually here, but a few selected one are covered further below. This release brings in another contributor, @jonalv, who did fantastic work on the TeX template for the audit report conversion feature. # Notable new features. ## A simplified API. Each task are now executed in its own isolated temporary folder, so that extra files generated by commands are properly captured and handled in an atomic way (to avoid mixing up non-finished and finished files). Among the improved areas is that setting paths is now not even required. If you still want to set the output file extension for outputs, you can do that with the following syntax in an out-port placeholder in commands: `{o:portname|.csv}`, for the `.csv` extension. Furthermore, the many different `Process.SetPath...` methods are now unified to only two: `Process.SetOut(portName string, pattern string)` and `Process.SetOutFunc(portName string, pathFunc func(Task) string)`. `SetOut()` takes placeholder similar to those used to define the command pattern, such as `{i:portname}` for input files and `{p:param1}` for parameters. It also allows certain modifiers after the port name, separated by `|` characters, such as for trimming the end of a string, which is done like so: `{i:bamfile|%.bam}`, given that we have an in-port named ""bamfile"", for which we want to re-use its filename, but without the `.bam` file extension. As always, for more information about this, see the [documentation](http://scipipe.org). ## Graph plotting. SciPipe can now plot the graph of a workflow to a .dot file, which can be converted to PDF with the GraphViz dot command (See [the documentation for this feature](http://scipipe.org/howtos/plot_workflow_graph/)). This can be done by adding this line in the workflow Go file:. ```go; myWorkflow.PlotGraph(""myworkflow.dot""); ```. One can also let SciPipe execute the `dot` command as well to convert to PDF in one go (requires ",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.8.0
Safety,avoid,avoid,"This release contains a very large number of improvements, too large to list individually here, but a few selected one are covered further below. This release brings in another contributor, @jonalv, who did fantastic work on the TeX template for the audit report conversion feature. # Notable new features. ## A simplified API. Each task are now executed in its own isolated temporary folder, so that extra files generated by commands are properly captured and handled in an atomic way (to avoid mixing up non-finished and finished files). Among the improved areas is that setting paths is now not even required. If you still want to set the output file extension for outputs, you can do that with the following syntax in an out-port placeholder in commands: `{o:portname|.csv}`, for the `.csv` extension. Furthermore, the many different `Process.SetPath...` methods are now unified to only two: `Process.SetOut(portName string, pattern string)` and `Process.SetOutFunc(portName string, pathFunc func(Task) string)`. `SetOut()` takes placeholder similar to those used to define the command pattern, such as `{i:portname}` for input files and `{p:param1}` for parameters. It also allows certain modifiers after the port name, separated by `|` characters, such as for trimming the end of a string, which is done like so: `{i:bamfile|%.bam}`, given that we have an in-port named ""bamfile"", for which we want to re-use its filename, but without the `.bam` file extension. As always, for more information about this, see the [documentation](http://scipipe.org). ## Graph plotting. SciPipe can now plot the graph of a workflow to a .dot file, which can be converted to PDF with the GraphViz dot command (See [the documentation for this feature](http://scipipe.org/howtos/plot_workflow_graph/)). This can be done by adding this line in the workflow Go file:. ```go; myWorkflow.PlotGraph(""myworkflow.dot""); ```. One can also let SciPipe execute the `dot` command as well to convert to PDF in one go (requires ",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.8.0
Security,audit,audit,"This release contains a very large number of improvements, too large to list individually here, but a few selected one are covered further below. This release brings in another contributor, @jonalv, who did fantastic work on the TeX template for the audit report conversion feature. # Notable new features. ## A simplified API. Each task are now executed in its own isolated temporary folder, so that extra files generated by commands are properly captured and handled in an atomic way (to avoid mixing up non-finished and finished files). Among the improved areas is that setting paths is now not even required. If you still want to set the output file extension for outputs, you can do that with the following syntax in an out-port placeholder in commands: `{o:portname|.csv}`, for the `.csv` extension. Furthermore, the many different `Process.SetPath...` methods are now unified to only two: `Process.SetOut(portName string, pattern string)` and `Process.SetOutFunc(portName string, pathFunc func(Task) string)`. `SetOut()` takes placeholder similar to those used to define the command pattern, such as `{i:portname}` for input files and `{p:param1}` for parameters. It also allows certain modifiers after the port name, separated by `|` characters, such as for trimming the end of a string, which is done like so: `{i:bamfile|%.bam}`, given that we have an in-port named ""bamfile"", for which we want to re-use its filename, but without the `.bam` file extension. As always, for more information about this, see the [documentation](http://scipipe.org). ## Graph plotting. SciPipe can now plot the graph of a workflow to a .dot file, which can be converted to PDF with the GraphViz dot command (See [the documentation for this feature](http://scipipe.org/howtos/plot_workflow_graph/)). This can be done by adding this line in the workflow Go file:. ```go; myWorkflow.PlotGraph(""myworkflow.dot""); ```. One can also let SciPipe execute the `dot` command as well to convert to PDF in one go (requires ",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.8.0
Usability,simpl,simplified,"This release contains a very large number of improvements, too large to list individually here, but a few selected one are covered further below. This release brings in another contributor, @jonalv, who did fantastic work on the TeX template for the audit report conversion feature. # Notable new features. ## A simplified API. Each task are now executed in its own isolated temporary folder, so that extra files generated by commands are properly captured and handled in an atomic way (to avoid mixing up non-finished and finished files). Among the improved areas is that setting paths is now not even required. If you still want to set the output file extension for outputs, you can do that with the following syntax in an out-port placeholder in commands: `{o:portname|.csv}`, for the `.csv` extension. Furthermore, the many different `Process.SetPath...` methods are now unified to only two: `Process.SetOut(portName string, pattern string)` and `Process.SetOutFunc(portName string, pathFunc func(Task) string)`. `SetOut()` takes placeholder similar to those used to define the command pattern, such as `{i:portname}` for input files and `{p:param1}` for parameters. It also allows certain modifiers after the port name, separated by `|` characters, such as for trimming the end of a string, which is done like so: `{i:bamfile|%.bam}`, given that we have an in-port named ""bamfile"", for which we want to re-use its filename, but without the `.bam` file extension. As always, for more information about this, see the [documentation](http://scipipe.org). ## Graph plotting. SciPipe can now plot the graph of a workflow to a .dot file, which can be converted to PDF with the GraphViz dot command (See [the documentation for this feature](http://scipipe.org/howtos/plot_workflow_graph/)). This can be done by adding this line in the workflow Go file:. ```go; myWorkflow.PlotGraph(""myworkflow.dot""); ```. One can also let SciPipe execute the `dot` command as well to convert to PDF in one go (requires ",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.8.0
Availability,error,error,"This is a smaller release, following up to the [0.6 release](https://github.com/scipipe/scipipe/releases/tag/v0.6) where we removed all external dependencies. ## New features. - New `wf.RunToRegex(""process_name_pattern.*"")`. See 2d231ff74532659aa3d3c9d3d5759834c2b192c2. ## Minor fixes. - Add start/stop time stamps to audit log (081576c21ecc13c49ba1b051c5780418b40390fe); - Ensure directories are created for outputs also in custom components (ea2b56d24c6c0d9a6b358a1b5cbee72790ddd33a); - Fail completely on existing `.tmp` file, for clearer behavior and error messages (57ddb33b836a3f09a9f839073e26b34163745a62); - Add process names in audit logs (not just commands) (7f8db5c573a8f815f75b64eb87ae5b7c2e7714bc)",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.6.1
Deployability,release,release,"This is a smaller release, following up to the [0.6 release](https://github.com/scipipe/scipipe/releases/tag/v0.6) where we removed all external dependencies. ## New features. - New `wf.RunToRegex(""process_name_pattern.*"")`. See 2d231ff74532659aa3d3c9d3d5759834c2b192c2. ## Minor fixes. - Add start/stop time stamps to audit log (081576c21ecc13c49ba1b051c5780418b40390fe); - Ensure directories are created for outputs also in custom components (ea2b56d24c6c0d9a6b358a1b5cbee72790ddd33a); - Fail completely on existing `.tmp` file, for clearer behavior and error messages (57ddb33b836a3f09a9f839073e26b34163745a62); - Add process names in audit logs (not just commands) (7f8db5c573a8f815f75b64eb87ae5b7c2e7714bc)",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.6.1
Integrability,depend,dependencies,"This is a smaller release, following up to the [0.6 release](https://github.com/scipipe/scipipe/releases/tag/v0.6) where we removed all external dependencies. ## New features. - New `wf.RunToRegex(""process_name_pattern.*"")`. See 2d231ff74532659aa3d3c9d3d5759834c2b192c2. ## Minor fixes. - Add start/stop time stamps to audit log (081576c21ecc13c49ba1b051c5780418b40390fe); - Ensure directories are created for outputs also in custom components (ea2b56d24c6c0d9a6b358a1b5cbee72790ddd33a); - Fail completely on existing `.tmp` file, for clearer behavior and error messages (57ddb33b836a3f09a9f839073e26b34163745a62); - Add process names in audit logs (not just commands) (7f8db5c573a8f815f75b64eb87ae5b7c2e7714bc)",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.6.1
Security,audit,audit,"This is a smaller release, following up to the [0.6 release](https://github.com/scipipe/scipipe/releases/tag/v0.6) where we removed all external dependencies. ## New features. - New `wf.RunToRegex(""process_name_pattern.*"")`. See 2d231ff74532659aa3d3c9d3d5759834c2b192c2. ## Minor fixes. - Add start/stop time stamps to audit log (081576c21ecc13c49ba1b051c5780418b40390fe); - Ensure directories are created for outputs also in custom components (ea2b56d24c6c0d9a6b358a1b5cbee72790ddd33a); - Fail completely on existing `.tmp` file, for clearer behavior and error messages (57ddb33b836a3f09a9f839073e26b34163745a62); - Add process names in audit logs (not just commands) (7f8db5c573a8f815f75b64eb87ae5b7c2e7714bc)",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.6.1
Testability,log,log,"This is a smaller release, following up to the [0.6 release](https://github.com/scipipe/scipipe/releases/tag/v0.6) where we removed all external dependencies. ## New features. - New `wf.RunToRegex(""process_name_pattern.*"")`. See 2d231ff74532659aa3d3c9d3d5759834c2b192c2. ## Minor fixes. - Add start/stop time stamps to audit log (081576c21ecc13c49ba1b051c5780418b40390fe); - Ensure directories are created for outputs also in custom components (ea2b56d24c6c0d9a6b358a1b5cbee72790ddd33a); - Fail completely on existing `.tmp` file, for clearer behavior and error messages (57ddb33b836a3f09a9f839073e26b34163745a62); - Add process names in audit logs (not just commands) (7f8db5c573a8f815f75b64eb87ae5b7c2e7714bc)",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.6.1
Usability,clear,clearer,"This is a smaller release, following up to the [0.6 release](https://github.com/scipipe/scipipe/releases/tag/v0.6) where we removed all external dependencies. ## New features. - New `wf.RunToRegex(""process_name_pattern.*"")`. See 2d231ff74532659aa3d3c9d3d5759834c2b192c2. ## Minor fixes. - Add start/stop time stamps to audit log (081576c21ecc13c49ba1b051c5780418b40390fe); - Ensure directories are created for outputs also in custom components (ea2b56d24c6c0d9a6b358a1b5cbee72790ddd33a); - Fail completely on existing `.tmp` file, for clearer behavior and error messages (57ddb33b836a3f09a9f839073e26b34163745a62); - Add process names in audit logs (not just commands) (7f8db5c573a8f815f75b64eb87ae5b7c2e7714bc)",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.6.1
Deployability,release,release,"This release adds two big improments:. 1. The audit log feature will now include upstream audit info from tasks that are already finished when running the workflow, by reading in their (existing) audit log files. The field names have also been made shorter and more succinct. 2. Ports now support connecting multiple upstream ports to in-ports. This makes it much easier to create components for various merge and reduce operations, among other things. Note though that it will require to go-run port.RunMergeInputs() on all input ports, which contains code that will merge from multiple inputs into the ports `InChan` channel, which can still be used to do range operations on, for simplicity. ## Full list of new commits in this release. - a584425e3387798026cecb48671d30df29f8adef Implement new feature: Allow multiple inputs in ports ; - 067df02e52a6424271b0dff8a2396346af7c511b Add ReadAuditFile() method in ip; - 5a38927672b01bd25900c4b8c2f7793ac4613b1e New feature: Read upstream audit info from existing audit log files, for files that exist; - ff94caf9c950afe39cfe1d3339671c37ceb018af Shorten method name: Port.{ConnectStrings -> ConnectStr}(); - 4433cf55b1a3e1c7967cad11b8129073b17f0863 API change: Shorter more sensible field names in audit log; - 55a193aea2c2e965c79b56a5f8136d00501630e6 Back to not create channel for new paramports, except in ConnectStrings(), to not trip up connect logic; - 0a4fb82784d0be51395c2c3f69268a8db9ffeb3a API change in task: new Param() accessor method; - 0d38b89c07d91e9935da66fe8c706a7bbce43ddd API change in task: GetInPath()->InPath(); - 3dd17bae89633ac833a96db6907ec73f54dcb673 New convenience method ParamPort.ConnectStrings() for simply sending one or more strings; - 183eab934d3f86e93789926b22cdb33085788acc Create chan in NewParamPort",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.3.0-alpha
Energy Efficiency,reduce,reduce,"This release adds two big improments:. 1. The audit log feature will now include upstream audit info from tasks that are already finished when running the workflow, by reading in their (existing) audit log files. The field names have also been made shorter and more succinct. 2. Ports now support connecting multiple upstream ports to in-ports. This makes it much easier to create components for various merge and reduce operations, among other things. Note though that it will require to go-run port.RunMergeInputs() on all input ports, which contains code that will merge from multiple inputs into the ports `InChan` channel, which can still be used to do range operations on, for simplicity. ## Full list of new commits in this release. - a584425e3387798026cecb48671d30df29f8adef Implement new feature: Allow multiple inputs in ports ; - 067df02e52a6424271b0dff8a2396346af7c511b Add ReadAuditFile() method in ip; - 5a38927672b01bd25900c4b8c2f7793ac4613b1e New feature: Read upstream audit info from existing audit log files, for files that exist; - ff94caf9c950afe39cfe1d3339671c37ceb018af Shorten method name: Port.{ConnectStrings -> ConnectStr}(); - 4433cf55b1a3e1c7967cad11b8129073b17f0863 API change: Shorter more sensible field names in audit log; - 55a193aea2c2e965c79b56a5f8136d00501630e6 Back to not create channel for new paramports, except in ConnectStrings(), to not trip up connect logic; - 0a4fb82784d0be51395c2c3f69268a8db9ffeb3a API change in task: new Param() accessor method; - 0d38b89c07d91e9935da66fe8c706a7bbce43ddd API change in task: GetInPath()->InPath(); - 3dd17bae89633ac833a96db6907ec73f54dcb673 New convenience method ParamPort.ConnectStrings() for simply sending one or more strings; - 183eab934d3f86e93789926b22cdb33085788acc Create chan in NewParamPort",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.3.0-alpha
Security,audit,audit,"This release adds two big improments:. 1. The audit log feature will now include upstream audit info from tasks that are already finished when running the workflow, by reading in their (existing) audit log files. The field names have also been made shorter and more succinct. 2. Ports now support connecting multiple upstream ports to in-ports. This makes it much easier to create components for various merge and reduce operations, among other things. Note though that it will require to go-run port.RunMergeInputs() on all input ports, which contains code that will merge from multiple inputs into the ports `InChan` channel, which can still be used to do range operations on, for simplicity. ## Full list of new commits in this release. - a584425e3387798026cecb48671d30df29f8adef Implement new feature: Allow multiple inputs in ports ; - 067df02e52a6424271b0dff8a2396346af7c511b Add ReadAuditFile() method in ip; - 5a38927672b01bd25900c4b8c2f7793ac4613b1e New feature: Read upstream audit info from existing audit log files, for files that exist; - ff94caf9c950afe39cfe1d3339671c37ceb018af Shorten method name: Port.{ConnectStrings -> ConnectStr}(); - 4433cf55b1a3e1c7967cad11b8129073b17f0863 API change: Shorter more sensible field names in audit log; - 55a193aea2c2e965c79b56a5f8136d00501630e6 Back to not create channel for new paramports, except in ConnectStrings(), to not trip up connect logic; - 0a4fb82784d0be51395c2c3f69268a8db9ffeb3a API change in task: new Param() accessor method; - 0d38b89c07d91e9935da66fe8c706a7bbce43ddd API change in task: GetInPath()->InPath(); - 3dd17bae89633ac833a96db6907ec73f54dcb673 New convenience method ParamPort.ConnectStrings() for simply sending one or more strings; - 183eab934d3f86e93789926b22cdb33085788acc Create chan in NewParamPort",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.3.0-alpha
Testability,log,log,"This release adds two big improments:. 1. The audit log feature will now include upstream audit info from tasks that are already finished when running the workflow, by reading in their (existing) audit log files. The field names have also been made shorter and more succinct. 2. Ports now support connecting multiple upstream ports to in-ports. This makes it much easier to create components for various merge and reduce operations, among other things. Note though that it will require to go-run port.RunMergeInputs() on all input ports, which contains code that will merge from multiple inputs into the ports `InChan` channel, which can still be used to do range operations on, for simplicity. ## Full list of new commits in this release. - a584425e3387798026cecb48671d30df29f8adef Implement new feature: Allow multiple inputs in ports ; - 067df02e52a6424271b0dff8a2396346af7c511b Add ReadAuditFile() method in ip; - 5a38927672b01bd25900c4b8c2f7793ac4613b1e New feature: Read upstream audit info from existing audit log files, for files that exist; - ff94caf9c950afe39cfe1d3339671c37ceb018af Shorten method name: Port.{ConnectStrings -> ConnectStr}(); - 4433cf55b1a3e1c7967cad11b8129073b17f0863 API change: Shorter more sensible field names in audit log; - 55a193aea2c2e965c79b56a5f8136d00501630e6 Back to not create channel for new paramports, except in ConnectStrings(), to not trip up connect logic; - 0a4fb82784d0be51395c2c3f69268a8db9ffeb3a API change in task: new Param() accessor method; - 0d38b89c07d91e9935da66fe8c706a7bbce43ddd API change in task: GetInPath()->InPath(); - 3dd17bae89633ac833a96db6907ec73f54dcb673 New convenience method ParamPort.ConnectStrings() for simply sending one or more strings; - 183eab934d3f86e93789926b22cdb33085788acc Create chan in NewParamPort",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.3.0-alpha
Usability,simpl,simplicity,"This release adds two big improments:. 1. The audit log feature will now include upstream audit info from tasks that are already finished when running the workflow, by reading in their (existing) audit log files. The field names have also been made shorter and more succinct. 2. Ports now support connecting multiple upstream ports to in-ports. This makes it much easier to create components for various merge and reduce operations, among other things. Note though that it will require to go-run port.RunMergeInputs() on all input ports, which contains code that will merge from multiple inputs into the ports `InChan` channel, which can still be used to do range operations on, for simplicity. ## Full list of new commits in this release. - a584425e3387798026cecb48671d30df29f8adef Implement new feature: Allow multiple inputs in ports ; - 067df02e52a6424271b0dff8a2396346af7c511b Add ReadAuditFile() method in ip; - 5a38927672b01bd25900c4b8c2f7793ac4613b1e New feature: Read upstream audit info from existing audit log files, for files that exist; - ff94caf9c950afe39cfe1d3339671c37ceb018af Shorten method name: Port.{ConnectStrings -> ConnectStr}(); - 4433cf55b1a3e1c7967cad11b8129073b17f0863 API change: Shorter more sensible field names in audit log; - 55a193aea2c2e965c79b56a5f8136d00501630e6 Back to not create channel for new paramports, except in ConnectStrings(), to not trip up connect logic; - 0a4fb82784d0be51395c2c3f69268a8db9ffeb3a API change in task: new Param() accessor method; - 0d38b89c07d91e9935da66fe8c706a7bbce43ddd API change in task: GetInPath()->InPath(); - 3dd17bae89633ac833a96db6907ec73f54dcb673 New convenience method ParamPort.ConnectStrings() for simply sending one or more strings; - 183eab934d3f86e93789926b22cdb33085788acc Create chan in NewParamPort",MatchSource.RELEASES,scipipe,scipipe,v0.12.0,https://scipipe.org,https://github.com/scipipe/scipipe/releases/tag/v0.3.0-alpha
