id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:1794,Security,access,access,1794,"pply (std::unique_ptr< StateDelta > &&delta);  Re-apply a delta. ;  ; std::unique_ptr< State > GetStateBefore ();  Get the lock state before the most recent write lock was taken. ;  ; TVirtualRWMutex::Hint_t * ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in read mode. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState);  Rewind to an earlier mutex state, returning the delta. ;  ; TVirtualRWMutex::Hint_t * WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in write mode. ;  . Private Member Functions; void AssertReadCountLocIsFromCurrentThread (const size_t *presumedLocalReadersCount);  Assert that presumedLocalReadersCount really matches the local read count. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; MutexT fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; RecurseCountsT fRecurseCounts;  ! Trackers for re-entry in the lock by the same thread. ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/thread/src/TReentrantRWLock.hxx>; Member Typedef Documentation. ◆ State. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::State = TVirtualRWMutex::State. Definition at line 299 of file TReentrantRWLock.hxx. ◆ StateDelta. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::StateDelta = TVirtualRWMutex::StateDelta. Definition at line 300 of file TReentrantRWLock.hxx. Constructor & Destr",MatchSource.WIKI,doc/v632/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:2067,Security,access,access,2067," read mode. ;  ; void ReadUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in read mode. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState);  Rewind to an earlier mutex state, returning the delta. ;  ; TVirtualRWMutex::Hint_t * WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock (TVirtualRWMutex::Hint_t *);  Release the lock in write mode. ;  . Private Member Functions; void AssertReadCountLocIsFromCurrentThread (const size_t *presumedLocalReadersCount);  Assert that presumedLocalReadersCount really matches the local read count. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; MutexT fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; RecurseCountsT fRecurseCounts;  ! Trackers for re-entry in the lock by the same thread. ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/thread/src/TReentrantRWLock.hxx>; Member Typedef Documentation. ◆ State. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::State = TVirtualRWMutex::State. Definition at line 299 of file TReentrantRWLock.hxx. ◆ StateDelta. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . using ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::StateDelta = TVirtualRWMutex::StateDelta. Definition at line 300 of file TReentrantRWLock.hxx. Constructor & Destructor Documentation. ◆ TReentrantRWLock(). template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::TReentrantRWLock ; (; ). inline . Regular construct",MatchSource.WIKI,doc/v632/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:5954,Security,access,access,5954,"T > . void TReentrantRWLock::WriteUnLock ; (; TVirtualRWMutex::Hint_t * ; ). Release the lock in write mode. ; Definition at line 217 of file TReentrantRWLock.cxx. Member Data Documentation. ◆ fCond. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::condition_variable_any ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fCond. private . ! RWlock internal condition variable ; Definition at line 287 of file TReentrantRWLock.hxx. ◆ fMutex. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . MutexT ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fMutex. private . ! RWlock internal mutex ; Definition at line 286 of file TReentrantRWLock.hxx. ◆ fReaderReservation. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaderReservation. private . ! A reader wants access ; Definition at line 283 of file TReentrantRWLock.hxx. ◆ fReaders. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaders. private . ! Number of readers ; Definition at line 282 of file TReentrantRWLock.hxx. ◆ fRecurseCounts. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . RecurseCountsT ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fRecurseCounts. private . ! Trackers for re-entry in the lock by the same thread. ; Definition at line 289 of file TReentrantRWLock.hxx. ◆ fWriter. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<bool> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fWriter. private . ! Is there a writer? ; Definition at line 285 of file TReentrantRWLock.hxx. ◆ fWriterReservation. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Int",MatchSource.WIKI,doc/v632/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:7112,Security,access,access,7112,"internal condition variable ; Definition at line 287 of file TReentrantRWLock.hxx. ◆ fMutex. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . MutexT ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fMutex. private . ! RWlock internal mutex ; Definition at line 286 of file TReentrantRWLock.hxx. ◆ fReaderReservation. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaderReservation. private . ! A reader wants access ; Definition at line 283 of file TReentrantRWLock.hxx. ◆ fReaders. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaders. private . ! Number of readers ; Definition at line 282 of file TReentrantRWLock.hxx. ◆ fRecurseCounts. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . RecurseCountsT ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fRecurseCounts. private . ! Trackers for re-entry in the lock by the same thread. ; Definition at line 289 of file TReentrantRWLock.hxx. ◆ fWriter. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<bool> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fWriter. private . ! Is there a writer? ; Definition at line 285 of file TReentrantRWLock.hxx. ◆ fWriterReservation. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fWriterReservation. private . ! A writer wants access ; Definition at line 284 of file TReentrantRWLock.hxx. core/thread/src/TReentrantRWLock.hxx; core/thread/src/TReentrantRWLock.cxx. ROOTTReentrantRWLock. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1TReentrantRWLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html
https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html:2771,Deployability,patch,patches,2771,"  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from ROOT::TVirtualRWMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; ROOT::TReentrantRWLock< MutexT, RecurseCountsT > fMutexImp;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/thread/src/TRWMutexImp.h>. Inheritance diagram for ROOT::TRWMutexImp< MutexT, RecurseCountsT >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Apply(). template<typename MutexT , typename RecurseCountsT > . void ROOT::TRWMutexImp< MutexT, RecurseCountsT >::Apply ; (; std::unique_ptr< StateDelta > && ; delta). overridevirtual . Apply the mutex state delta. ; In pseudo-code: current_lock_count += delta; ; Implements ROOT::TVirtualRWMutex.; Definition at line 95 of file TRWMutexImp.cxx. ◆ Class(). template<typename MutexT , typename RecurseCountsT = ROOT::Internal::RecurseCounts> . static TClass * ROOT::TRWMutexImp< MutexT, RecurseCountsT >::Class ; (; ). inlinestatic . ReturnsTClass describing this class ; Definition at line 36 of file TRWMutexImp.h. ◆ Class_Name(). template<typename MutexT , typename RecurseCountsT = ROOT::Internal::RecurseCounts> . static const char ",MatchSource.WIKI,doc/v632/classROOT_1_1TRWMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html
https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html:1454,Modifiability,inherit,inherited,1454,"E) override;  Create mutex and return pointer to it. ;  ; std::unique_ptr< State > GetStateBefore () override;  Get the mutex state before the current lock was taken. ;  ; TClass * IsA () const override;  ; Hint_t * ReadLock () override;  Take the Read Lock of the mutex. ;  ; void ReadUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState) override;  Restore the mutex state to state. ;  ; void Streamer (TBuffer &R__b) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Hint_t * WriteLock () override;  Take the Write Lock of the mutex. ;  ; void WriteUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ;  Public Member Functions inherited from ROOT::TVirtualRWMutex; Int_t CleanUp () override;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from ROOT::TVirtualRWMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; ROOT::TReentrantRWLock< MutexT, RecurseCountsT > fMutexImp;  . #include </h",MatchSource.WIKI,doc/v632/classROOT_1_1TRWMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html
https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html:1772,Modifiability,inherit,inherited,1772,"E) override;  Create mutex and return pointer to it. ;  ; std::unique_ptr< State > GetStateBefore () override;  Get the mutex state before the current lock was taken. ;  ; TClass * IsA () const override;  ; Hint_t * ReadLock () override;  Take the Read Lock of the mutex. ;  ; void ReadUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ; std::unique_ptr< StateDelta > Rewind (const State &earlierState) override;  Restore the mutex state to state. ;  ; void Streamer (TBuffer &R__b) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Hint_t * WriteLock () override;  Take the Write Lock of the mutex. ;  ; void WriteUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ;  Public Member Functions inherited from ROOT::TVirtualRWMutex; Int_t CleanUp () override;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from ROOT::TVirtualRWMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; ROOT::TReentrantRWLock< MutexT, RecurseCountsT > fMutexImp;  . #include </h",MatchSource.WIKI,doc/v632/classROOT_1_1TRWMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html
https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html:2193,Modifiability,inherit,inherited,2193,"riteLock () override;  Take the Write Lock of the mutex. ;  ; void WriteUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ;  Public Member Functions inherited from ROOT::TVirtualRWMutex; Int_t CleanUp () override;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from ROOT::TVirtualRWMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; ROOT::TReentrantRWLock< MutexT, RecurseCountsT > fMutexImp;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/thread/src/TRWMutexImp.h>. Inheritance diagram for ROOT::TRWMutexImp< MutexT, RecurseCountsT >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Apply(). template<typename MutexT , typename RecurseCountsT > . void ROOT::TRWMutexImp< MutexT, RecurseCountsT >::Apply ; (; std::unique_ptr< StateDelta > && ; delta). overridevirtual . Apply the mutex state delta. ; In pseudo-code: current_lock_count += delta; ; Implements ROO",MatchSource.WIKI,doc/v632/classROOT_1_1TRWMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html
https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html:2418,Modifiability,inherit,inherited,2418,"riteLock () override;  Take the Write Lock of the mutex. ;  ; void WriteUnLock (Hint_t *) override;  Release the read lock of the mutex. ;  ;  Public Member Functions inherited from ROOT::TVirtualRWMutex; Int_t CleanUp () override;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from ROOT::TVirtualRWMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; ROOT::TReentrantRWLock< MutexT, RecurseCountsT > fMutexImp;  . #include </home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/src/v6-32-00-patches/core/thread/src/TRWMutexImp.h>. Inheritance diagram for ROOT::TRWMutexImp< MutexT, RecurseCountsT >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Apply(). template<typename MutexT , typename RecurseCountsT > . void ROOT::TRWMutexImp< MutexT, RecurseCountsT >::Apply ; (; std::unique_ptr< StateDelta > && ; delta). overridevirtual . Apply the mutex state delta. ; In pseudo-code: current_lock_count += delta; ; Implements ROO",MatchSource.WIKI,doc/v632/classROOT_1_1TRWMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWMutexImp.html
https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html:682,Modifiability,variab,variable,682,. ROOT: ROOT::TRWSpinLock Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLock Class Reference. . Definition at line 22 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLock ();  Regular constructor. ;  ; void ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock ();  Release the lock in read mode. ;  ; void WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock ();  Release the lock in write mode. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; ROOT::TSpinMutex fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock:,MatchSource.WIKI,doc/v632/classROOT_1_1TRWSpinLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html
https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html:1898,Modifiability,variab,variable,1898,there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock::fMutex. private . ! RWlock internal mutex ; Definition at line 28 of file TRWSpinLock.hxx. ◆ fReaderReservation. std::atomic<int> ROOT::TRWSpinLock::fReaderReservation. private . ! A reader wants access ; Definition at line 25 of file TRWSpinLock.hxx. ◆ fReaders. std::atomic<int> ROOT::TRWSpinLock::fReaders. private . ! Number of readers ; Definition at line 24 of file TRWSpinLock.hxx. ◆ fWriter. std::atomic<bool> ROOT::TRWSpinLock::fWriter. private . ! Is there a writer? ; Definition at line 27 of file TRWSpinLock.hxx. ◆ fWriterReservation. std::atomic<int> ROOT::TRWSpinLock::fWriterReservation. private . ! A writer wants access ; Definition at line 26 of file TRWSpinLock.hxx. Libraries for ROOT::TRWSpinLock:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/TRWSpinLock.hxx; core/thread/src/TRWSpinLock.cxx. ROOTTRWSpinLock. ROOT v6-32 - Re,MatchSource.WIKI,doc/v632/classROOT_1_1TRWSpinLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html
https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html:808,Security,access,access,808,. ROOT: ROOT::TRWSpinLock Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLock Class Reference. . Definition at line 22 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLock ();  Regular constructor. ;  ; void ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock ();  Release the lock in read mode. ;  ; void WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock ();  Release the lock in write mode. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; ROOT::TSpinMutex fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock:,MatchSource.WIKI,doc/v632/classROOT_1_1TRWSpinLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html
https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html:988,Security,access,access,988,. ROOT: ROOT::TRWSpinLock Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TRWSpinLock Class Reference. . Definition at line 22 of file TRWSpinLock.hxx. Public Member Functions;  TRWSpinLock ();  Regular constructor. ;  ; void ReadLock ();  Acquire the lock in read mode. ;  ; void ReadUnLock ();  Release the lock in read mode. ;  ; void WriteLock ();  Acquire the lock in write mode. ;  ; void WriteUnLock ();  Release the lock in write mode. ;  . Private Attributes; std::condition_variable_any fCond;  ! RWlock internal condition variable ;  ; ROOT::TSpinMutex fMutex;  ! RWlock internal mutex ;  ; std::atomic< int > fReaderReservation;  ! A reader wants access ;  ; std::atomic< int > fReaders;  ! Number of readers ;  ; std::atomic< bool > fWriter;  ! Is there a writer? ;  ; std::atomic< int > fWriterReservation;  ! A writer wants access ;  . #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock:,MatchSource.WIKI,doc/v632/classROOT_1_1TRWSpinLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html
https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html:2198,Security,access,access,2198,. #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock::fMutex. private . ! RWlock internal mutex ; Definition at line 28 of file TRWSpinLock.hxx. ◆ fReaderReservation. std::atomic<int> ROOT::TRWSpinLock::fReaderReservation. private . ! A reader wants access ; Definition at line 25 of file TRWSpinLock.hxx. ◆ fReaders. std::atomic<int> ROOT::TRWSpinLock::fReaders. private . ! Number of readers ; Definition at line 24 of file TRWSpinLock.hxx. ◆ fWriter. std::atomic<bool> ROOT::TRWSpinLock::fWriter. private . ! Is there a writer? ; Definition at line 27 of file TRWSpinLock.hxx. ◆ fWriterReservation. std::atomic<int> ROOT::TRWSpinLock::fWriterReservation. private . ! A writer wants access ; Definition at line 26 of file TRWSpinLock.hxx. Libraries for ROOT::TRWSpinLock:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/TRWSpinLock.hxx; core/thread/src/TRWSpinLock.cxx. ROOTTRWSpinLock. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/v632/classROOT_1_1TRWSpinLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html
https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html:2633,Security,access,access,2633,. #include <ROOT/TRWSpinLock.hxx>; Constructor & Destructor Documentation. ◆ TRWSpinLock(). ROOT::TRWSpinLock::TRWSpinLock ; (; ). inline . Regular constructor. ; Definition at line 34 of file TRWSpinLock.hxx. Member Function Documentation. ◆ ReadLock(). void TRWSpinLock::ReadLock ; (; ). Acquire the lock in read mode. ; Definition at line 35 of file TRWSpinLock.cxx. ◆ ReadUnLock(). void TRWSpinLock::ReadUnLock ; (; ). Release the lock in read mode. ; Definition at line 61 of file TRWSpinLock.cxx. ◆ WriteLock(). void TRWSpinLock::WriteLock ; (; ). Acquire the lock in write mode. ; Definition at line 77 of file TRWSpinLock.cxx. ◆ WriteUnLock(). void TRWSpinLock::WriteUnLock ; (; ). Release the lock in write mode. ; Definition at line 102 of file TRWSpinLock.cxx. Member Data Documentation. ◆ fCond. std::condition_variable_any ROOT::TRWSpinLock::fCond. private . ! RWlock internal condition variable ; Definition at line 29 of file TRWSpinLock.hxx. ◆ fMutex. ROOT::TSpinMutex ROOT::TRWSpinLock::fMutex. private . ! RWlock internal mutex ; Definition at line 28 of file TRWSpinLock.hxx. ◆ fReaderReservation. std::atomic<int> ROOT::TRWSpinLock::fReaderReservation. private . ! A reader wants access ; Definition at line 25 of file TRWSpinLock.hxx. ◆ fReaders. std::atomic<int> ROOT::TRWSpinLock::fReaders. private . ! Number of readers ; Definition at line 24 of file TRWSpinLock.hxx. ◆ fWriter. std::atomic<bool> ROOT::TRWSpinLock::fWriter. private . ! Is there a writer? ; Definition at line 27 of file TRWSpinLock.hxx. ◆ fWriterReservation. std::atomic<int> ROOT::TRWSpinLock::fWriterReservation. private . ! A writer wants access ; Definition at line 26 of file TRWSpinLock.hxx. Libraries for ROOT::TRWSpinLock:. [legend]; The documentation for this class was generated from the following files:; core/thread/inc/ROOT/TRWSpinLock.hxx; core/thread/src/TRWSpinLock.cxx. ROOTTRWSpinLock. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,doc/v632/classROOT_1_1TRWSpinLock.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TRWSpinLock.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:7714,Availability,error,error,7714,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:7803,Availability,error,error,7803,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:7958,Availability,error,error,7958,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:8255,Availability,error,error,8255,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:12711,Availability,error,error,12711," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:7720,Integrability,message,message,7720,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:8261,Integrability,message,message,8261,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:9463,Integrability,message,message,9463,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle again",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:12717,Integrability,message,message,12717," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:13090,Integrability,message,message,13090," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Priva",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:675,Modifiability,inherit,inherited,675,". ROOT: ROOT::TSchemaRule Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; ROOT::TSchemaRule Class Reference. . Definition at line 19 of file TSchemaRule.h. Classes; class  TSources;  . Public Types; typedef void(* ReadFuncPtr_t) (char *, TVirtualObject *);  ; typedef void(* ReadRawFuncPtr_t) (char *, TBuffer &);  ; enum  RuleType_t { kReadRule = 0; , kReadRawRule = 1; , kNone = 99999; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSchemaRule ();  Default Constructor. ;  ;  TSchemaRule (const TSchemaRule &rhs);  Copy Constructor. ;  ; virtual ~TSchemaRule ();  Destructor. ;  ; void AsString (TString &out, const char *options="""") const;  Add to the string 'out' the string representation of the rule. ;  ; void Clear (Option_t *="""") override;  Zero out this rule object. ;  ; Bool_t Conflicts (const TSchemaRule *rule) const;  Check if this rule conflicts with the given one. ;  ; const char * GetAttributes () const;  Get the attributes code of this rule. ;  ; const char * GetCode () const;  Get the source code of this rule. ;  ; Bool_t GetEmbed () const;  Return true if this rule should be saved in ",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:5992,Modifiability,inherit,inherited,5992,"e). ;  ; void SetRuleType (RuleType_t type);  Set the type of the rule. ;  ; void SetSource (const TString &source);  Set the list of source members. ;  ; void SetSourceClass (const TString &classname);  Set the source class of this rule (i.e. the onfile class). ;  ; void SetTarget (const TString &target);  Set the target member of this rule (i.e. the in memory data member). ;  ; void SetTargetClass (const TString &classname);  Set the target class of this rule (i.e. the in memory class). ;  ; Bool_t SetVersion (const TString &version);  Set the version string - returns kFALSE if the format is incorrect. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestChecksum (UInt_t checksum) const;  Check if given checksum is defined in this rule. ;  ; Bool_t TestVersion (Int_t version) const;  Check if given version number is defined in this rule. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object)",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:7350,Modifiability,inherit,inheritance,7350,""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:9561,Modifiability,inherit,inherits,9561,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality th",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:9678,Modifiability,inherit,inherits,9678,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden t",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:13591,Modifiability,inherit,inherited,13591,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; UInt_t ParseChecksum (const char *checksum) const;  Parse the checksum in the given string. ;  ; Bool_t ProcessChecksum (const TString &checksum) const;  Check if specified checksum string is correct and build checksum vector. ;  ; Bool_t ProcessVersion (const TString &version) const;  Check if specified version string is correct and build version vector. ;  . Static Private Member Functions; static void ProcessDeclaration (TObjArray *array, const TString &list);  Split the list as a declaratio",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:15680,Modifiability,inherit,inherited,15680,"String. ;  . Private Attributes; TString fAttributes;  ; TString fChecksum;  Source version vector (for searching purposes) ;  ; std::vector< UInt_t > * fChecksumVect;  ; TString fCode;  Includes vector. ;  ; Bool_t fEmbed;  ; TString fInclude;  Source data member vector (for searching purposes) ;  ; TObjArray * fIncludeVect;  ; ReadFuncPtr_t fReadFuncPtr;  ; ReadRawFuncPtr_t fReadRawFuncPtr;  Conversion function pointer for read rule. ;  ; RuleType_t fRuleType;  Conversion function pointer for readraw rule. ;  ; TString fSource;  Target data member vector (for searching purposes) ;  ; TString fSourceClass;  Source checksum vector (for searching purposes) ;  ; TObjArray * fSourceVect;  ; TString fTarget;  ; TString fTargetClass;  ; TObjArray * fTargetVect;  ; TString fVersion;  ; std::vector< std::pair< Int_t, Int_t > > * fVersionVect;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSchemaRule.h>. Inheritance diagram for ROOT::TSchemaRule:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ReadFuncPtr_t. typedef void(* ROOT::TSchemaRule::ReadFuncPtr_t) (char *, TVirtualObject *). Definition at line 40 of file TSchemaRule.h. ◆ ReadRawFuncPtr_t. typedef void(* ROOT::TSchemaRule::ReadRawFuncPtr_t) (char *, TBuffer &). Definition at line 41 of file TSchemaRule.h. Member Enumeration Documentation. ◆ RuleType_t. enum ROOT::TSchemaRule::RuleType_t. EnumeratorkReadRule ; kReadRawRule ; kNone . Definition at line 33 of file TSchemaRule.h. Constructor & Destructor Documentation. ◆ TSchemaRule() [1/2]. TSchemaRule::TSchemaRule ; (; ). Default Constructor. ; Definition at line 89 of file TSchemaRule.cxx. ◆ ~TSche",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:15779,Modifiability,inherit,inherited,15779,"String. ;  . Private Attributes; TString fAttributes;  ; TString fChecksum;  Source version vector (for searching purposes) ;  ; std::vector< UInt_t > * fChecksumVect;  ; TString fCode;  Includes vector. ;  ; Bool_t fEmbed;  ; TString fInclude;  Source data member vector (for searching purposes) ;  ; TObjArray * fIncludeVect;  ; ReadFuncPtr_t fReadFuncPtr;  ; ReadRawFuncPtr_t fReadRawFuncPtr;  Conversion function pointer for read rule. ;  ; RuleType_t fRuleType;  Conversion function pointer for readraw rule. ;  ; TString fSource;  Target data member vector (for searching purposes) ;  ; TString fSourceClass;  Source checksum vector (for searching purposes) ;  ; TObjArray * fSourceVect;  ; TString fTarget;  ; TString fTargetClass;  ; TObjArray * fTargetVect;  ; TString fVersion;  ; std::vector< std::pair< Int_t, Int_t > > * fVersionVect;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSchemaRule.h>. Inheritance diagram for ROOT::TSchemaRule:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ReadFuncPtr_t. typedef void(* ROOT::TSchemaRule::ReadFuncPtr_t) (char *, TVirtualObject *). Definition at line 40 of file TSchemaRule.h. ◆ ReadRawFuncPtr_t. typedef void(* ROOT::TSchemaRule::ReadRawFuncPtr_t) (char *, TBuffer &). Definition at line 41 of file TSchemaRule.h. Member Enumeration Documentation. ◆ RuleType_t. enum ROOT::TSchemaRule::RuleType_t. EnumeratorkReadRule ; kReadRawRule ; kNone . Definition at line 33 of file TSchemaRule.h. Constructor & Destructor Documentation. ◆ TSchemaRule() [1/2]. TSchemaRule::TSchemaRule ; (; ). Default Constructor. ; Definition at line 89 of file TSchemaRule.cxx. ◆ ~TSche",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:4199,Security,checksum,checksum,4199,"Bool_t HasSource (const TString &source) const;  Return true if one of the rule's data member source is 'source'. ;  ; Bool_t HasTarget (const TString &target) const;  Return true if one of the rule's data member target is 'target'. ;  ; TClass * IsA () const override;  ; Bool_t IsAliasRule () const;  Return kTRUE if the rule is a strict renaming of one of the data member of the class. ;  ; Bool_t IsRenameRule () const;  Return kTRUE if the rule is a strict renaming of the class to a new name. ;  ; Bool_t IsValid () const;  Return kTRUE if this rule is valid. ;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; TSchemaRule & operator= (const TSchemaRule &rhs);  Copy operator. ;  ; Bool_t operator== (const TSchemaRule &rhs) const;  Return true if the rule have the same effects. ;  ; void SetAttributes (const TString &attributes);  Set the attributes code of this rule. ;  ; Bool_t SetChecksum (const TString &checksum);  Set the checksum string - returns kFALSE if the format is incorrect. ;  ; void SetCode (const TString &code);  Set the source code of this rule. ;  ; void SetEmbed (Bool_t embed);  Set whether this rule should be save in the ROOT file (if true) ;  ; Bool_t SetFromRule (const char *rule);  Set the content fot this object from the rule See TClass::AddRule for details on the syntax. ;  ; void SetInclude (const TString &include);  Set the comma separated list of header files to include to be able to compile this rule. ;  ; void SetReadFunctionPointer (ReadFuncPtr_t ptr);  Set the pointer to the function to be run for the rule (if it is a read rule). ;  ; void SetReadRawFunctionPointer (ReadRawFuncPtr_t ptr);  Set the pointer to the function to be run for the rule (if it is a raw read rule). ;  ; void SetRuleType (RuleType_t type);  Set the type of the rule. ;  ; void SetSource (const TString &source);  Set the list of source members. ;  ; void SetSourceClass (const TString &classname);  Set the so",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:4219,Security,checksum,checksum,4219,"Bool_t HasSource (const TString &source) const;  Return true if one of the rule's data member source is 'source'. ;  ; Bool_t HasTarget (const TString &target) const;  Return true if one of the rule's data member target is 'target'. ;  ; TClass * IsA () const override;  ; Bool_t IsAliasRule () const;  Return kTRUE if the rule is a strict renaming of one of the data member of the class. ;  ; Bool_t IsRenameRule () const;  Return kTRUE if the rule is a strict renaming of the class to a new name. ;  ; Bool_t IsValid () const;  Return kTRUE if this rule is valid. ;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; TSchemaRule & operator= (const TSchemaRule &rhs);  Copy operator. ;  ; Bool_t operator== (const TSchemaRule &rhs) const;  Return true if the rule have the same effects. ;  ; void SetAttributes (const TString &attributes);  Set the attributes code of this rule. ;  ; Bool_t SetChecksum (const TString &checksum);  Set the checksum string - returns kFALSE if the format is incorrect. ;  ; void SetCode (const TString &code);  Set the source code of this rule. ;  ; void SetEmbed (Bool_t embed);  Set whether this rule should be save in the ROOT file (if true) ;  ; Bool_t SetFromRule (const char *rule);  Set the content fot this object from the rule See TClass::AddRule for details on the syntax. ;  ; void SetInclude (const TString &include);  Set the comma separated list of header files to include to be able to compile this rule. ;  ; void SetReadFunctionPointer (ReadFuncPtr_t ptr);  Set the pointer to the function to be run for the rule (if it is a read rule). ;  ; void SetReadRawFunctionPointer (ReadRawFuncPtr_t ptr);  Set the pointer to the function to be run for the rule (if it is a raw read rule). ;  ; void SetRuleType (RuleType_t type);  Set the type of the rule. ;  ; void SetSource (const TString &source);  Set the list of source members. ;  ; void SetSourceClass (const TString &classname);  Set the so",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:5792,Security,checksum,checksum,5792,"r_t ptr);  Set the pointer to the function to be run for the rule (if it is a read rule). ;  ; void SetReadRawFunctionPointer (ReadRawFuncPtr_t ptr);  Set the pointer to the function to be run for the rule (if it is a raw read rule). ;  ; void SetRuleType (RuleType_t type);  Set the type of the rule. ;  ; void SetSource (const TString &source);  Set the list of source members. ;  ; void SetSourceClass (const TString &classname);  Set the source class of this rule (i.e. the onfile class). ;  ; void SetTarget (const TString &target);  Set the target member of this rule (i.e. the in memory data member). ;  ; void SetTargetClass (const TString &classname);  Set the target class of this rule (i.e. the in memory class). ;  ; Bool_t SetVersion (const TString &version);  Set the version string - returns kFALSE if the format is incorrect. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestChecksum (UInt_t checksum) const;  Check if given checksum is defined in this rule. ;  ; Bool_t TestVersion (Int_t version) const;  Check if given version number is defined in this rule. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; vir",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:5825,Security,checksum,checksum,5825,"r_t ptr);  Set the pointer to the function to be run for the rule (if it is a read rule). ;  ; void SetReadRawFunctionPointer (ReadRawFuncPtr_t ptr);  Set the pointer to the function to be run for the rule (if it is a raw read rule). ;  ; void SetRuleType (RuleType_t type);  Set the type of the rule. ;  ; void SetSource (const TString &source);  Set the list of source members. ;  ; void SetSourceClass (const TString &classname);  Set the source class of this rule (i.e. the onfile class). ;  ; void SetTarget (const TString &target);  Set the target member of this rule (i.e. the in memory data member). ;  ; void SetTargetClass (const TString &classname);  Set the target class of this rule (i.e. the in memory class). ;  ; Bool_t SetVersion (const TString &version);  Set the version string - returns kFALSE if the format is incorrect. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestChecksum (UInt_t checksum) const;  Check if given checksum is defined in this rule. ;  ; Bool_t TestVersion (Int_t version) const;  Check if given version number is defined in this rule. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; vir",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:9192,Security,hash,hash,9192," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:14137,Security,checksum,checksum,14137," *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; UInt_t ParseChecksum (const char *checksum) const;  Parse the checksum in the given string. ;  ; Bool_t ProcessChecksum (const TString &checksum) const;  Check if specified checksum string is correct and build checksum vector. ;  ; Bool_t ProcessVersion (const TString &version) const;  Check if specified version string is correct and build version vector. ;  . Static Private Member Functions; static void ProcessDeclaration (TObjArray *array, const TString &list);  Split the list as a declaration into as a TObjArray of TNamed(name,type). ;  ; static void ProcessList (TObjArray *array, const TString &list);  Split the list as a comma separated list into a TObjArray of TObjString. ;  . Private Attributes; TString fAttributes;  ; TString fChecksum;  Source version vector (for searching purposes) ;  ; std::vector< UInt_t > * fChecksumVect;  ; TString fCode;  Includes vector. ;  ; Bool_t fEmbed;  ; TString fInclude;  Source data member vector (for searching purposes) ;  ; TObjArray * fIncludeVect;  ; ReadFuncPtr_t fReadFun",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:14165,Security,checksum,checksum,14165," *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; UInt_t ParseChecksum (const char *checksum) const;  Parse the checksum in the given string. ;  ; Bool_t ProcessChecksum (const TString &checksum) const;  Check if specified checksum string is correct and build checksum vector. ;  ; Bool_t ProcessVersion (const TString &version) const;  Check if specified version string is correct and build version vector. ;  . Static Private Member Functions; static void ProcessDeclaration (TObjArray *array, const TString &list);  Split the list as a declaration into as a TObjArray of TNamed(name,type). ;  ; static void ProcessList (TObjArray *array, const TString &list);  Split the list as a comma separated list into a TObjArray of TObjString. ;  . Private Attributes; TString fAttributes;  ; TString fChecksum;  Source version vector (for searching purposes) ;  ; std::vector< UInt_t > * fChecksumVect;  ; TString fCode;  Includes vector. ;  ; Bool_t fEmbed;  ; TString fInclude;  Source data member vector (for searching purposes) ;  ; TObjArray * fIncludeVect;  ; ReadFuncPtr_t fReadFun",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:14239,Security,checksum,checksum,14239," char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; UInt_t ParseChecksum (const char *checksum) const;  Parse the checksum in the given string. ;  ; Bool_t ProcessChecksum (const TString &checksum) const;  Check if specified checksum string is correct and build checksum vector. ;  ; Bool_t ProcessVersion (const TString &version) const;  Check if specified version string is correct and build version vector. ;  . Static Private Member Functions; static void ProcessDeclaration (TObjArray *array, const TString &list);  Split the list as a declaration into as a TObjArray of TNamed(name,type). ;  ; static void ProcessList (TObjArray *array, const TString &list);  Split the list as a comma separated list into a TObjArray of TObjString. ;  . Private Attributes; TString fAttributes;  ; TString fChecksum;  Source version vector (for searching purposes) ;  ; std::vector< UInt_t > * fChecksumVect;  ; TString fCode;  Includes vector. ;  ; Bool_t fEmbed;  ; TString fInclude;  Source data member vector (for searching purposes) ;  ; TObjArray * fIncludeVect;  ; ReadFuncPtr_t fReadFuncPtr;  ; ReadRawFuncPtr_t fReadRawFuncPtr;  Conversion function pointer for read rule. ;  ; RuleType_t fRuleType;  Conversion f",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:14276,Security,checksum,checksum,14276," char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; UInt_t ParseChecksum (const char *checksum) const;  Parse the checksum in the given string. ;  ; Bool_t ProcessChecksum (const TString &checksum) const;  Check if specified checksum string is correct and build checksum vector. ;  ; Bool_t ProcessVersion (const TString &version) const;  Check if specified version string is correct and build version vector. ;  . Static Private Member Functions; static void ProcessDeclaration (TObjArray *array, const TString &list);  Split the list as a declaration into as a TObjArray of TNamed(name,type). ;  ; static void ProcessList (TObjArray *array, const TString &list);  Split the list as a comma separated list into a TObjArray of TObjString. ;  . Private Attributes; TString fAttributes;  ; TString fChecksum;  Source version vector (for searching purposes) ;  ; std::vector< UInt_t > * fChecksumVect;  ; TString fCode;  Includes vector. ;  ; Bool_t fEmbed;  ; TString fInclude;  Source data member vector (for searching purposes) ;  ; TObjArray * fIncludeVect;  ; ReadFuncPtr_t fReadFuncPtr;  ; ReadRawFuncPtr_t fReadRawFuncPtr;  Conversion function pointer for read rule. ;  ; RuleType_t fRuleType;  Conversion f",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:14313,Security,checksum,checksum,14313," char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; UInt_t ParseChecksum (const char *checksum) const;  Parse the checksum in the given string. ;  ; Bool_t ProcessChecksum (const TString &checksum) const;  Check if specified checksum string is correct and build checksum vector. ;  ; Bool_t ProcessVersion (const TString &version) const;  Check if specified version string is correct and build version vector. ;  . Static Private Member Functions; static void ProcessDeclaration (TObjArray *array, const TString &list);  Split the list as a declaration into as a TObjArray of TNamed(name,type). ;  ; static void ProcessList (TObjArray *array, const TString &list);  Split the list as a comma separated list into a TObjArray of TObjString. ;  . Private Attributes; TString fAttributes;  ; TString fChecksum;  Source version vector (for searching purposes) ;  ; std::vector< UInt_t > * fChecksumVect;  ; TString fCode;  Includes vector. ;  ; Bool_t fEmbed;  ; TString fInclude;  Source data member vector (for searching purposes) ;  ; TObjArray * fIncludeVect;  ; ReadFuncPtr_t fReadFuncPtr;  ; ReadRawFuncPtr_t fReadRawFuncPtr;  Conversion function pointer for read rule. ;  ; RuleType_t fRuleType;  Conversion f",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:15405,Security,checksum,checksum,15405," . Static Private Member Functions; static void ProcessDeclaration (TObjArray *array, const TString &list);  Split the list as a declaration into as a TObjArray of TNamed(name,type). ;  ; static void ProcessList (TObjArray *array, const TString &list);  Split the list as a comma separated list into a TObjArray of TObjString. ;  . Private Attributes; TString fAttributes;  ; TString fChecksum;  Source version vector (for searching purposes) ;  ; std::vector< UInt_t > * fChecksumVect;  ; TString fCode;  Includes vector. ;  ; Bool_t fEmbed;  ; TString fInclude;  Source data member vector (for searching purposes) ;  ; TObjArray * fIncludeVect;  ; ReadFuncPtr_t fReadFuncPtr;  ; ReadRawFuncPtr_t fReadRawFuncPtr;  Conversion function pointer for read rule. ;  ; RuleType_t fRuleType;  Conversion function pointer for readraw rule. ;  ; TString fSource;  Target data member vector (for searching purposes) ;  ; TString fSourceClass;  Source checksum vector (for searching purposes) ;  ; TObjArray * fSourceVect;  ; TString fTarget;  ; TString fTargetClass;  ; TObjArray * fTargetVect;  ; TString fVersion;  ; std::vector< std::pair< Int_t, Int_t > > * fVersionVect;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSchemaRule.h>. Inheritance diagram for ROOT::TSchemaRule:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ReadFuncPtr_t. typedef void(* ROOT::TSchemaRule::ReadFuncPtr_t) (char *, TVirtualObject *). Definition at line 40 of file TSchemaRule.h. ◆ ReadRawFuncPtr_t. typedef void(* ROOT::TSchemaRule::ReadRawFuncPtr_t) (char *, TBuffer &). Definition at line 41 of file TSchemaRule.h. Member Enumeration Documentat",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:22723,Security,checksum,checksum,22723,"IsRenameRule(). Bool_t TSchemaRule::IsRenameRule ; (; ); const. Return kTRUE if the rule is a strict renaming of the class to a new name. ; Definition at line 756 of file TSchemaRule.cxx. ◆ IsValid(). Bool_t TSchemaRule::IsValid ; (; ); const. Return kTRUE if this rule is valid. ; Definition at line 632 of file TSchemaRule.cxx. ◆ ls(). void TSchemaRule::ls ; (; Option_t * ; targetname = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). ; Reimplemented from TObject.; Definition at line 177 of file TSchemaRule.cxx. ◆ operator=(). TSchemaRule & TSchemaRule::operator= ; (; const TSchemaRule & ; rhs). Copy operator. ; Definition at line 125 of file TSchemaRule.cxx. ◆ operator==(). Bool_t TSchemaRule::operator== ; (; const TSchemaRule & ; rhs); const. Return true if the rule have the same effects. ; Definition at line 147 of file TSchemaRule.cxx. ◆ ParseChecksum(). UInt_t TSchemaRule::ParseChecksum ; (; const char * ; checksum); const. private . Parse the checksum in the given string. ; Returns either the checksum or zero if the string is not a hex or decimal number. ; Definition at line 933 of file TSchemaRule.cxx. ◆ ProcessChecksum(). Bool_t TSchemaRule::ProcessChecksum ; (; const TString & ; checksum); const. private . Check if specified checksum string is correct and build checksum vector. ; Definition at line 887 of file TSchemaRule.cxx. ◆ ProcessDeclaration(). void TSchemaRule::ProcessDeclaration ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a declaration into as a TObjArray of TNamed(name,type). ; Definition at line 974 of file TSchemaRule.cxx. ◆ ProcessList(). void TSchemaRule::ProcessList ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a comma separated list into a TObjArray of TObjString. ; Definition at line 953 of file TSchemaRule.cxx. ◆ ProcessVersion(). Bool_t TSchemaRule::ProcessVe",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:22761,Security,checksum,checksum,22761,"turn kTRUE if the rule is a strict renaming of the class to a new name. ; Definition at line 756 of file TSchemaRule.cxx. ◆ IsValid(). Bool_t TSchemaRule::IsValid ; (; ); const. Return kTRUE if this rule is valid. ; Definition at line 632 of file TSchemaRule.cxx. ◆ ls(). void TSchemaRule::ls ; (; Option_t * ; targetname = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). ; Reimplemented from TObject.; Definition at line 177 of file TSchemaRule.cxx. ◆ operator=(). TSchemaRule & TSchemaRule::operator= ; (; const TSchemaRule & ; rhs). Copy operator. ; Definition at line 125 of file TSchemaRule.cxx. ◆ operator==(). Bool_t TSchemaRule::operator== ; (; const TSchemaRule & ; rhs); const. Return true if the rule have the same effects. ; Definition at line 147 of file TSchemaRule.cxx. ◆ ParseChecksum(). UInt_t TSchemaRule::ParseChecksum ; (; const char * ; checksum); const. private . Parse the checksum in the given string. ; Returns either the checksum or zero if the string is not a hex or decimal number. ; Definition at line 933 of file TSchemaRule.cxx. ◆ ProcessChecksum(). Bool_t TSchemaRule::ProcessChecksum ; (; const TString & ; checksum); const. private . Check if specified checksum string is correct and build checksum vector. ; Definition at line 887 of file TSchemaRule.cxx. ◆ ProcessDeclaration(). void TSchemaRule::ProcessDeclaration ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a declaration into as a TObjArray of TNamed(name,type). ; Definition at line 974 of file TSchemaRule.cxx. ◆ ProcessList(). void TSchemaRule::ProcessList ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a comma separated list into a TObjArray of TObjString. ; Definition at line 953 of file TSchemaRule.cxx. ◆ ProcessVersion(). Bool_t TSchemaRule::ProcessVersion ; (; const TString & ; version); const. private . Check if s",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:22812,Security,checksum,checksum,22812,"new name. ; Definition at line 756 of file TSchemaRule.cxx. ◆ IsValid(). Bool_t TSchemaRule::IsValid ; (; ); const. Return kTRUE if this rule is valid. ; Definition at line 632 of file TSchemaRule.cxx. ◆ ls(). void TSchemaRule::ls ; (; Option_t * ; targetname = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). ; Reimplemented from TObject.; Definition at line 177 of file TSchemaRule.cxx. ◆ operator=(). TSchemaRule & TSchemaRule::operator= ; (; const TSchemaRule & ; rhs). Copy operator. ; Definition at line 125 of file TSchemaRule.cxx. ◆ operator==(). Bool_t TSchemaRule::operator== ; (; const TSchemaRule & ; rhs); const. Return true if the rule have the same effects. ; Definition at line 147 of file TSchemaRule.cxx. ◆ ParseChecksum(). UInt_t TSchemaRule::ParseChecksum ; (; const char * ; checksum); const. private . Parse the checksum in the given string. ; Returns either the checksum or zero if the string is not a hex or decimal number. ; Definition at line 933 of file TSchemaRule.cxx. ◆ ProcessChecksum(). Bool_t TSchemaRule::ProcessChecksum ; (; const TString & ; checksum); const. private . Check if specified checksum string is correct and build checksum vector. ; Definition at line 887 of file TSchemaRule.cxx. ◆ ProcessDeclaration(). void TSchemaRule::ProcessDeclaration ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a declaration into as a TObjArray of TNamed(name,type). ; Definition at line 974 of file TSchemaRule.cxx. ◆ ProcessList(). void TSchemaRule::ProcessList ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a comma separated list into a TObjArray of TObjString. ; Definition at line 953 of file TSchemaRule.cxx. ◆ ProcessVersion(). Bool_t TSchemaRule::ProcessVersion ; (; const TString & ; version); const. private . Check if specified version string is correct and build version vector. ;",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:23005,Security,checksum,checksum,23005," ; Definition at line 632 of file TSchemaRule.cxx. ◆ ls(). void TSchemaRule::ls ; (; Option_t * ; targetname = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). ; Reimplemented from TObject.; Definition at line 177 of file TSchemaRule.cxx. ◆ operator=(). TSchemaRule & TSchemaRule::operator= ; (; const TSchemaRule & ; rhs). Copy operator. ; Definition at line 125 of file TSchemaRule.cxx. ◆ operator==(). Bool_t TSchemaRule::operator== ; (; const TSchemaRule & ; rhs); const. Return true if the rule have the same effects. ; Definition at line 147 of file TSchemaRule.cxx. ◆ ParseChecksum(). UInt_t TSchemaRule::ParseChecksum ; (; const char * ; checksum); const. private . Parse the checksum in the given string. ; Returns either the checksum or zero if the string is not a hex or decimal number. ; Definition at line 933 of file TSchemaRule.cxx. ◆ ProcessChecksum(). Bool_t TSchemaRule::ProcessChecksum ; (; const TString & ; checksum); const. private . Check if specified checksum string is correct and build checksum vector. ; Definition at line 887 of file TSchemaRule.cxx. ◆ ProcessDeclaration(). void TSchemaRule::ProcessDeclaration ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a declaration into as a TObjArray of TNamed(name,type). ; Definition at line 974 of file TSchemaRule.cxx. ◆ ProcessList(). void TSchemaRule::ProcessList ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a comma separated list into a TObjArray of TObjString. ; Definition at line 953 of file TSchemaRule.cxx. ◆ ProcessVersion(). Bool_t TSchemaRule::ProcessVersion ; (; const TString & ; version); const. private . Check if specified version string is correct and build version vector. ; Definition at line 842 of file TSchemaRule.cxx. ◆ SetAttributes(). void TSchemaRule::SetAttributes ; (; const TString & ; attributes). Set the attribut",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:23052,Security,checksum,checksum,23052,"Option_t * ; targetname = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). ; Reimplemented from TObject.; Definition at line 177 of file TSchemaRule.cxx. ◆ operator=(). TSchemaRule & TSchemaRule::operator= ; (; const TSchemaRule & ; rhs). Copy operator. ; Definition at line 125 of file TSchemaRule.cxx. ◆ operator==(). Bool_t TSchemaRule::operator== ; (; const TSchemaRule & ; rhs); const. Return true if the rule have the same effects. ; Definition at line 147 of file TSchemaRule.cxx. ◆ ParseChecksum(). UInt_t TSchemaRule::ParseChecksum ; (; const char * ; checksum); const. private . Parse the checksum in the given string. ; Returns either the checksum or zero if the string is not a hex or decimal number. ; Definition at line 933 of file TSchemaRule.cxx. ◆ ProcessChecksum(). Bool_t TSchemaRule::ProcessChecksum ; (; const TString & ; checksum); const. private . Check if specified checksum string is correct and build checksum vector. ; Definition at line 887 of file TSchemaRule.cxx. ◆ ProcessDeclaration(). void TSchemaRule::ProcessDeclaration ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a declaration into as a TObjArray of TNamed(name,type). ; Definition at line 974 of file TSchemaRule.cxx. ◆ ProcessList(). void TSchemaRule::ProcessList ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a comma separated list into a TObjArray of TObjString. ; Definition at line 953 of file TSchemaRule.cxx. ◆ ProcessVersion(). Bool_t TSchemaRule::ProcessVersion ; (; const TString & ; version); const. private . Check if specified version string is correct and build version vector. ; Definition at line 842 of file TSchemaRule.cxx. ◆ SetAttributes(). void TSchemaRule::SetAttributes ; (; const TString & ; attributes). Set the attributes code of this rule. ; Definition at line 656 of file TSchemaRule.cxx. ◆ SetChecksum",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:23089,Security,checksum,checksum,23089,"Option_t * ; targetname = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). ; Reimplemented from TObject.; Definition at line 177 of file TSchemaRule.cxx. ◆ operator=(). TSchemaRule & TSchemaRule::operator= ; (; const TSchemaRule & ; rhs). Copy operator. ; Definition at line 125 of file TSchemaRule.cxx. ◆ operator==(). Bool_t TSchemaRule::operator== ; (; const TSchemaRule & ; rhs); const. Return true if the rule have the same effects. ; Definition at line 147 of file TSchemaRule.cxx. ◆ ParseChecksum(). UInt_t TSchemaRule::ParseChecksum ; (; const char * ; checksum); const. private . Parse the checksum in the given string. ; Returns either the checksum or zero if the string is not a hex or decimal number. ; Definition at line 933 of file TSchemaRule.cxx. ◆ ProcessChecksum(). Bool_t TSchemaRule::ProcessChecksum ; (; const TString & ; checksum); const. private . Check if specified checksum string is correct and build checksum vector. ; Definition at line 887 of file TSchemaRule.cxx. ◆ ProcessDeclaration(). void TSchemaRule::ProcessDeclaration ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a declaration into as a TObjArray of TNamed(name,type). ; Definition at line 974 of file TSchemaRule.cxx. ◆ ProcessList(). void TSchemaRule::ProcessList ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a comma separated list into a TObjArray of TObjString. ; Definition at line 953 of file TSchemaRule.cxx. ◆ ProcessVersion(). Bool_t TSchemaRule::ProcessVersion ; (; const TString & ; version); const. private . Check if specified version string is correct and build version vector. ; Definition at line 842 of file TSchemaRule.cxx. ◆ SetAttributes(). void TSchemaRule::SetAttributes ; (; const TString & ; attributes). Set the attributes code of this rule. ; Definition at line 656 of file TSchemaRule.cxx. ◆ SetChecksum",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:24128,Security,checksum,checksum,24128," ; Definition at line 887 of file TSchemaRule.cxx. ◆ ProcessDeclaration(). void TSchemaRule::ProcessDeclaration ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a declaration into as a TObjArray of TNamed(name,type). ; Definition at line 974 of file TSchemaRule.cxx. ◆ ProcessList(). void TSchemaRule::ProcessList ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a comma separated list into a TObjArray of TObjString. ; Definition at line 953 of file TSchemaRule.cxx. ◆ ProcessVersion(). Bool_t TSchemaRule::ProcessVersion ; (; const TString & ; version); const. private . Check if specified version string is correct and build version vector. ; Definition at line 842 of file TSchemaRule.cxx. ◆ SetAttributes(). void TSchemaRule::SetAttributes ; (; const TString & ; attributes). Set the attributes code of this rule. ; Definition at line 656 of file TSchemaRule.cxx. ◆ SetChecksum(). Bool_t TSchemaRule::SetChecksum ; (; const TString & ; checksum). Set the checksum string - returns kFALSE if the format is incorrect. ; Definition at line 425 of file TSchemaRule.cxx. ◆ SetCode(). void TSchemaRule::SetCode ; (; const TString & ; code). Set the source code of this rule. ; Definition at line 640 of file TSchemaRule.cxx. ◆ SetEmbed(). void TSchemaRule::SetEmbed ; (; Bool_t ; embed). Set whether this rule should be save in the ROOT file (if true) ; Definition at line 616 of file TSchemaRule.cxx. ◆ SetFromRule(). Bool_t TSchemaRule::SetFromRule ; (; const char * ; rule). Set the content fot this object from the rule See TClass::AddRule for details on the syntax. ; Definition at line 321 of file TSchemaRule.cxx. ◆ SetInclude(). void TSchemaRule::SetInclude ; (; const TString & ; include). Set the comma separated list of header files to include to be able to compile this rule. ; Definition at line 577 of file TSchemaRule.cxx. ◆ SetReadFunctionPointer(). void TSchemaRule::SetReadFunctionPointer ; (; TSchema",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:24147,Security,checksum,checksum,24147,"tion(). void TSchemaRule::ProcessDeclaration ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a declaration into as a TObjArray of TNamed(name,type). ; Definition at line 974 of file TSchemaRule.cxx. ◆ ProcessList(). void TSchemaRule::ProcessList ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a comma separated list into a TObjArray of TObjString. ; Definition at line 953 of file TSchemaRule.cxx. ◆ ProcessVersion(). Bool_t TSchemaRule::ProcessVersion ; (; const TString & ; version); const. private . Check if specified version string is correct and build version vector. ; Definition at line 842 of file TSchemaRule.cxx. ◆ SetAttributes(). void TSchemaRule::SetAttributes ; (; const TString & ; attributes). Set the attributes code of this rule. ; Definition at line 656 of file TSchemaRule.cxx. ◆ SetChecksum(). Bool_t TSchemaRule::SetChecksum ; (; const TString & ; checksum). Set the checksum string - returns kFALSE if the format is incorrect. ; Definition at line 425 of file TSchemaRule.cxx. ◆ SetCode(). void TSchemaRule::SetCode ; (; const TString & ; code). Set the source code of this rule. ; Definition at line 640 of file TSchemaRule.cxx. ◆ SetEmbed(). void TSchemaRule::SetEmbed ; (; Bool_t ; embed). Set whether this rule should be save in the ROOT file (if true) ; Definition at line 616 of file TSchemaRule.cxx. ◆ SetFromRule(). Bool_t TSchemaRule::SetFromRule ; (; const char * ; rule). Set the content fot this object from the rule See TClass::AddRule for details on the syntax. ; Definition at line 321 of file TSchemaRule.cxx. ◆ SetInclude(). void TSchemaRule::SetInclude ; (; const TString & ; include). Set the comma separated list of header files to include to be able to compile this rule. ; Definition at line 577 of file TSchemaRule.cxx. ◆ SetReadFunctionPointer(). void TSchemaRule::SetReadFunctionPointer ; (; TSchemaRule::ReadFuncPtr_t ; ptr). Set the pointer to the function to be ru",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:27083,Security,checksum,checksum,27083,on at line 456 of file TSchemaRule.cxx. ◆ SetTarget(). void TSchemaRule::SetTarget ; (; const TString & ; target). Set the target member of this rule (i.e. the in memory data member). ; Definition at line 492 of file TSchemaRule.cxx. ◆ SetTargetClass(). void TSchemaRule::SetTargetClass ; (; const TString & ; classname). Set the target class of this rule (i.e. the in memory class). ; Definition at line 474 of file TSchemaRule.cxx. ◆ SetVersion(). Bool_t TSchemaRule::SetVersion ; (; const TString & ; version). Set the version string - returns kFALSE if the format is incorrect. ; Definition at line 381 of file TSchemaRule.cxx. ◆ Streamer(). void ROOT::TSchemaRule::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::TSchemaRule::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 120 of file TSchemaRule.h. ◆ TestChecksum(). Bool_t TSchemaRule::TestChecksum ; (; UInt_t ; checksum); const. Check if given checksum is defined in this rule. ; Definition at line 437 of file TSchemaRule.cxx. ◆ TestVersion(). Bool_t TSchemaRule::TestVersion ; (; Int_t ; version); const. Check if given version number is defined in this rule. ; Definition at line 402 of file TSchemaRule.cxx. Member Data Documentation. ◆ fAttributes. TString ROOT::TSchemaRule::fAttributes. private . Definition at line 118 of file TSchemaRule.h. ◆ fChecksum. TString ROOT::TSchemaRule::fChecksum. private . Source version vector (for searching purposes) ; Definition at line 103 of file TSchemaRule.h. ◆ fChecksumVect. std::vector<UInt_t>* ROOT::TSchemaRule::fChecksumVect. mutableprivate . Definition at line 104 of file TSchemaRule.h. ◆ fCode. TString ROOT::TSchemaRule::fCode. private . Includes vector. ; Definition at line 113 of file TSchemaRule.h. ◆ fEmbed. Bool_t ROOT::TSchemaRule::fEmbed. private . Definition at line 114 of file TSchemaRule.h. ◆ fInclude. TString ROOT::TSchemaRule,MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:27116,Security,checksum,checksum,27116,id TSchemaRule::SetTarget ; (; const TString & ; target). Set the target member of this rule (i.e. the in memory data member). ; Definition at line 492 of file TSchemaRule.cxx. ◆ SetTargetClass(). void TSchemaRule::SetTargetClass ; (; const TString & ; classname). Set the target class of this rule (i.e. the in memory class). ; Definition at line 474 of file TSchemaRule.cxx. ◆ SetVersion(). Bool_t TSchemaRule::SetVersion ; (; const TString & ; version). Set the version string - returns kFALSE if the format is incorrect. ; Definition at line 381 of file TSchemaRule.cxx. ◆ Streamer(). void ROOT::TSchemaRule::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::TSchemaRule::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 120 of file TSchemaRule.h. ◆ TestChecksum(). Bool_t TSchemaRule::TestChecksum ; (; UInt_t ; checksum); const. Check if given checksum is defined in this rule. ; Definition at line 437 of file TSchemaRule.cxx. ◆ TestVersion(). Bool_t TSchemaRule::TestVersion ; (; Int_t ; version); const. Check if given version number is defined in this rule. ; Definition at line 402 of file TSchemaRule.cxx. Member Data Documentation. ◆ fAttributes. TString ROOT::TSchemaRule::fAttributes. private . Definition at line 118 of file TSchemaRule.h. ◆ fChecksum. TString ROOT::TSchemaRule::fChecksum. private . Source version vector (for searching purposes) ; Definition at line 103 of file TSchemaRule.h. ◆ fChecksumVect. std::vector<UInt_t>* ROOT::TSchemaRule::fChecksumVect. mutableprivate . Definition at line 104 of file TSchemaRule.h. ◆ fCode. TString ROOT::TSchemaRule::fCode. private . Includes vector. ; Definition at line 113 of file TSchemaRule.h. ◆ fEmbed. Bool_t ROOT::TSchemaRule::fEmbed. private . Definition at line 114 of file TSchemaRule.h. ◆ fInclude. TString ROOT::TSchemaRule::fInclude. private . Source data member vector (for sear,MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:28992,Security,checksum,checksum,28992,"private . Definition at line 114 of file TSchemaRule.h. ◆ fInclude. TString ROOT::TSchemaRule::fInclude. private . Source data member vector (for searching purposes) ; Definition at line 111 of file TSchemaRule.h. ◆ fIncludeVect. TObjArray* ROOT::TSchemaRule::fIncludeVect. mutableprivate . Definition at line 112 of file TSchemaRule.h. ◆ fReadFuncPtr. ReadFuncPtr_t ROOT::TSchemaRule::fReadFuncPtr. private . Definition at line 115 of file TSchemaRule.h. ◆ fReadRawFuncPtr. ReadRawFuncPtr_t ROOT::TSchemaRule::fReadRawFuncPtr. private . Conversion function pointer for read rule. ; Definition at line 116 of file TSchemaRule.h. ◆ fRuleType. RuleType_t ROOT::TSchemaRule::fRuleType. private . Conversion function pointer for readraw rule. ; Definition at line 117 of file TSchemaRule.h. ◆ fSource. TString ROOT::TSchemaRule::fSource. private . Target data member vector (for searching purposes) ; Definition at line 109 of file TSchemaRule.h. ◆ fSourceClass. TString ROOT::TSchemaRule::fSourceClass. private . Source checksum vector (for searching purposes) ; Definition at line 105 of file TSchemaRule.h. ◆ fSourceVect. TObjArray* ROOT::TSchemaRule::fSourceVect. mutableprivate . Definition at line 110 of file TSchemaRule.h. ◆ fTarget. TString ROOT::TSchemaRule::fTarget. private . Definition at line 107 of file TSchemaRule.h. ◆ fTargetClass. TString ROOT::TSchemaRule::fTargetClass. private . Definition at line 106 of file TSchemaRule.h. ◆ fTargetVect. TObjArray* ROOT::TSchemaRule::fTargetVect. mutableprivate . Definition at line 108 of file TSchemaRule.h. ◆ fVersion. TString ROOT::TSchemaRule::fVersion. private . Definition at line 101 of file TSchemaRule.h. ◆ fVersionVect. std::vector<std::pair<Int_t, Int_t> >* ROOT::TSchemaRule::fVersionVect. mutableprivate . Definition at line 102 of file TSchemaRule.h. core/meta/inc/TSchemaRule.h; core/meta/src/TSchemaRule.cxx. ROOTTSchemaRule. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:3101,Usability,simpl,simple,3101,"turn the list of header files to include to be able to compile this rule as a TObjArray of TObjString. ;  ; ReadFuncPtr_t GetReadFunctionPointer () const;  Get the pointer to the function to be run for the rule (if it is a read rule). ;  ; ReadRawFuncPtr_t GetReadRawFunctionPointer () const;  Get the pointer to the function to be run for the rule (if it is a raw read rule). ;  ; RuleType_t GetRuleType () const;  Return the type of the rule. ;  ; const TObjArray * GetSource () const;  Get the list of source members as a TObjArray of TNamed object, with the name being the member name and the title being its type. ;  ; const char * GetSourceClass () const;  Get the source class of this rule (i.e. the onfile class). ;  ; const TObjArray * GetTarget () const;  Get the target data members of this rule (i.e. the in memory data member). ;  ; const char * GetTargetClass () const;  Get the targte class of this rule (i.e. the in memory class). ;  ; const char * GetTargetString () const;  Get the target data members of this rule as a simple string (i.e. the in memory data member). ;  ; const char * GetVersion () const;  Get the version string. ;  ; Bool_t HasSource (const TString &source) const;  Return true if one of the rule's data member source is 'source'. ;  ; Bool_t HasTarget (const TString &target) const;  Return true if one of the rule's data member target is 'target'. ;  ; TClass * IsA () const override;  ; Bool_t IsAliasRule () const;  Return kTRUE if the rule is a strict renaming of one of the data member of the class. ;  ; Bool_t IsRenameRule () const;  Return kTRUE if the rule is a strict renaming of the class to a new name. ;  ; Bool_t IsValid () const;  Return kTRUE if this rule is valid. ;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; TSchemaRule & operator= (const TSchemaRule &rhs);  Copy operator. ;  ; Bool_t operator== (const TSchemaRule &rhs) const;  Return true if the rule have the same effect",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:20667,Usability,simpl,simple,20667,"he type of the rule. ; Definition at line 764 of file TSchemaRule.cxx. ◆ GetSource(). const TObjArray * TSchemaRule::GetSource ; (; ); const. Get the list of source members as a TObjArray of TNamed object, with the name being the member name and the title being its type. ; Definition at line 560 of file TSchemaRule.cxx. ◆ GetSourceClass(). const char * TSchemaRule::GetSourceClass ; (; ); const. Get the source class of this rule (i.e. the onfile class). ; Definition at line 466 of file TSchemaRule.cxx. ◆ GetTarget(). const TObjArray * TSchemaRule::GetTarget ; (; ); const. Get the target data members of this rule (i.e. the in memory data member). ; Definition at line 520 of file TSchemaRule.cxx. ◆ GetTargetClass(). const char * TSchemaRule::GetTargetClass ; (; ); const. Get the targte class of this rule (i.e. the in memory class). ; Definition at line 484 of file TSchemaRule.cxx. ◆ GetTargetString(). const char * TSchemaRule::GetTargetString ; (; ); const. Get the target data members of this rule as a simple string (i.e. the in memory data member). ; Definition at line 512 of file TSchemaRule.cxx. ◆ GetVersion(). const char * TSchemaRule::GetVersion ; (; ); const. Get the version string. ; Definition at line 393 of file TSchemaRule.cxx. ◆ HasSource(). Bool_t TSchemaRule::HasSource ; (; const TString & ; source); const. Return true if one of the rule's data member source is 'source'. ; Definition at line 690 of file TSchemaRule.cxx. ◆ HasTarget(). Bool_t TSchemaRule::HasTarget ; (; const TString & ; target); const. Return true if one of the rule's data member target is 'target'. ; Definition at line 672 of file TSchemaRule.cxx. ◆ IsA(). TClass * ROOT::TSchemaRule::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 120 of file TSchemaRule.h. ◆ IsAliasRule(). Bool_t TSchemaRule::IsAliasRule ; (; ); const. Return kTRUE if the rule is a strict renaming of one of the data member of the class. ",MatchSource.WIKI,doc/v632/classROOT_1_1TSchemaRule.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html
https://root.cern/doc/v632/classROOT_1_1TSeq.html:1265,Security,access,access,1265," pseudo container class which is a generator of indices. ; Template Parameters. TType of the numerical sequence. A pseudo container class which is a generator of indices. The model is the xrange built-in function of Python. Possible usages: Loop on a sequence of integers for (auto i : TSeqI(10)) {; cout << ""Element "" << i << endl;; }; ROOT::TSeqA pseudo container class which is a generator of indices.Definition TSeq.hxx:67; Loop on a sequence of integers in steps for (auto i : TSeqI(-5, 29, 6)) {; cout << ""Element "" << i << endl;; }; Loop backwards on a sequence of integers for (auto i : TSeqI(50, 30, -3)) {; cout << ""Element "" << i << endl;; }; Use an stl algorithm, for_each TSeqUL ulSeq(2,30,3);; std::for_each(std::begin(ulSeq),std::end(ulSeq),[](ULong_t i){cout << ""For each: "" << i <<endl;});; ULong_tunsigned long ULong_tDefinition RtypesCore.h:55; Random access: cout << ""Random access: 3rd element is "" << ulSeq[2] << endl;; A function to create sequences inferring the type: for (auto i : MakeSeq(1000000000000UL, 1000000000003UL)) {; cout << ""Element "" << i << endl;; }; ROOT::MakeSeqTSeq< T > MakeSeq(T end)Definition TSeq.hxx:209. Definition at line 67 of file TSeq.hxx. Classes; class  iterator;  . Public Types; using difference_type = typename std::make_signed< T >::type;  ; using value_type = T;  . Public Member Functions;  TSeq (T theBegin, T theEnd, T theStep=1);  ;  TSeq (T theEnd);  ; iterator begin () const;  ; bool empty () const;  ; iterator end () const;  ; T const & front () const;  ; T operator[] (T s) const;  ; std::size_t size () const;  ; T step () const;  . Private Member Functions; void checkIntegralType ();  . Private Attributes; const T fBegin;  ; const T fEnd;  ; const T fStep;  . #include <ROOT/TSeq.hxx>; Member Typedef Documentation. ◆ difference_type. template<class T > . using ROOT::TSeq< T >::difference_type = typename std::make_signed<T>::type. Definition at line 77 of file TSeq.hxx. ◆ value_type. template<class T > . using ROOT::TSeq< T ",MatchSource.WIKI,doc/v632/classROOT_1_1TSeq.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSeq.html
https://root.cern/doc/v632/classROOT_1_1TSeq.html:1289,Security,access,access,1289," pseudo container class which is a generator of indices. ; Template Parameters. TType of the numerical sequence. A pseudo container class which is a generator of indices. The model is the xrange built-in function of Python. Possible usages: Loop on a sequence of integers for (auto i : TSeqI(10)) {; cout << ""Element "" << i << endl;; }; ROOT::TSeqA pseudo container class which is a generator of indices.Definition TSeq.hxx:67; Loop on a sequence of integers in steps for (auto i : TSeqI(-5, 29, 6)) {; cout << ""Element "" << i << endl;; }; Loop backwards on a sequence of integers for (auto i : TSeqI(50, 30, -3)) {; cout << ""Element "" << i << endl;; }; Use an stl algorithm, for_each TSeqUL ulSeq(2,30,3);; std::for_each(std::begin(ulSeq),std::end(ulSeq),[](ULong_t i){cout << ""For each: "" << i <<endl;});; ULong_tunsigned long ULong_tDefinition RtypesCore.h:55; Random access: cout << ""Random access: 3rd element is "" << ulSeq[2] << endl;; A function to create sequences inferring the type: for (auto i : MakeSeq(1000000000000UL, 1000000000003UL)) {; cout << ""Element "" << i << endl;; }; ROOT::MakeSeqTSeq< T > MakeSeq(T end)Definition TSeq.hxx:209. Definition at line 67 of file TSeq.hxx. Classes; class  iterator;  . Public Types; using difference_type = typename std::make_signed< T >::type;  ; using value_type = T;  . Public Member Functions;  TSeq (T theBegin, T theEnd, T theStep=1);  ;  TSeq (T theEnd);  ; iterator begin () const;  ; bool empty () const;  ; iterator end () const;  ; T const & front () const;  ; T operator[] (T s) const;  ; std::size_t size () const;  ; T step () const;  . Private Member Functions; void checkIntegralType ();  . Private Attributes; const T fBegin;  ; const T fEnd;  ; const T fStep;  . #include <ROOT/TSeq.hxx>; Member Typedef Documentation. ◆ difference_type. template<class T > . using ROOT::TSeq< T >::difference_type = typename std::make_signed<T>::type. Definition at line 77 of file TSeq.hxx. ◆ value_type. template<class T > . using ROOT::TSeq< T ",MatchSource.WIKI,doc/v632/classROOT_1_1TSeq.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSeq.html
https://root.cern/doc/v632/classROOT_1_1TSequentialExecutor.html:10852,Integrability,wrap,wrapping,10852,"t<F, INTEGER>>. private . Execute a function over a sequence of indexes. ; Implementation of the Map method.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsSequence of indexes to execute func on. . ReturnsA vector with the results of the function calls. ; Definition at line 159 of file TSequentialExecutor.hxx. ◆ MapImpl() [3/4]. template<class F , class T , class Cond > . auto ROOT::TSequentialExecutor::MapImpl ; (; F ; func, . std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of a vector in parallel Implementation of the Map method. ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. . ReturnsA vector with the results of the function calls. ; Definition at line 174 of file TSequentialExecutor.hxx. ◆ MapImpl() [4/4]. template<class F , class Cond > . auto ROOT::TSequentialExecutor::MapImpl ; (; F ; func, . unsigned ; nTimes . ); -> std::vector<InvokeResult_t<F>>. private . Execute a function without arguments several times. ; Implementation of the Map method.; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. Functions that take arguments can be executed (with fixed arguments) by wrapping them in a lambda or with std::bind. ; Definition at line 143 of file TSequentialExecutor.hxx. ◆ operator=(). TSequentialExecutor & ROOT::TSequentialExecutor::operator= ; (; const TSequentialExecutor & ; ). delete . Member Data Documentation. ◆ TExecutorCRTP. friend ROOT::TSequentialExecutor::TExecutorCRTP. private . Definition at line 26 of file TSequentialExecutor.hxx. core/base/inc/ROOT/TSequentialExecutor.hxx. ROOTTSequentialExecutor. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1TSequentialExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSequentialExecutor.html
https://root.cern/doc/v632/classROOT_1_1TSequentialExecutor.html:1556,Modifiability,inherit,inherited,1556,"Chunks. ;  ; template<class F , class INTEGER > ; void Foreach (F func, ROOT::TSeq< INTEGER > args);  Execute a function over a sequence of indexes, dividing the execution in nChunks. ;  ; template<class F , class T > ; void Foreach (F func, std::initializer_list< T > args);  Execute a function over the elements of an initializer_list, dividing the execution in nChunks. ;  ; template<class F , class T > ; void Foreach (F func, std::vector< T > &args);  Execute a function over the elements of a vector, dividing the execution in nChunks. ;  ; template<class F > ; void Foreach (F func, unsigned nTimes);  Execute a function without arguments several times, dividing the execution in nChunks. ;  ; unsigned GetPoolSize () const;  Return the number of workers in the sequential executor: a single one. ;  ; TSequentialExecutor & operator= (const TSequentialExecutor &)=delete;  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TSequentialExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; auto Map (F func, std::initializer_list< T > args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an initializer_list. ;  ; auto Map (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F fun",MatchSource.WIKI,doc/v632/classROOT_1_1TSequentialExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSequentialExecutor.html
https://root.cern/doc/v632/classROOT_1_1TSequentialExecutor.html:2524,Modifiability,inherit,inheriting,2524,"ete;  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TSequentialExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; auto Map (F func, std::initializer_list< T > args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an initializer_list. ;  ; auto Map (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; T * MapReduce (F func, std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -",MatchSource.WIKI,doc/v632/classROOT_1_1TSequentialExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSequentialExecutor.html
https://root.cern/doc/v632/classROOT_1_1TSequentialExecutor.html:3371,Modifiability,inherit,inheriting,3371,"> >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; T * MapReduce (F func, std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >;  Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce). ;  ; TExecutorCRTP & operator= (const TExecutorCRTP &)=delete;  ; T * Reduce (const std::vector< T * > &mergeObjs);  ""Reduce"" an std::vector into a single object by using the object's Merge method. ;  ; auto Reduce (const std::vector< T > &objs, R redfunc) -> decltype(redfunc(objs));  ""Reduce"" an std::vector into a single object by passing a function as the second argument defining the reduction operation. ;  . Private Member Functions; template<class F , class T , class Cond = validMapReturnCond<F, T>> ",MatchSource.WIKI,doc/v632/classROOT_1_1TSequentialExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSequentialExecutor.html
https://root.cern/doc/v632/classROOT_1_1TSequentialExecutor.html:5308,Modifiability,inherit,inherited,5308,"dMapReturnCond<F, T>> ; auto MapImpl (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; template<class F , class INTEGER , class Cond = validMapReturnCond<F, INTEGER>> ; auto MapImpl (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; template<class F , class T , class Cond = validMapReturnCond<F, T>> ; auto MapImpl (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector in parallel Implementation of the Map method. ;  ; template<class F , class Cond = validMapReturnCond<F>> ; auto MapImpl (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  . Private Attributes; friend TExecutorCRTP;  . Additional Inherited Members;  Protected Types inherited from ROOT::TExecutorCRTP< TSequentialExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TSequentialExecutor.hxx>. Inheritance diagram for ROOT::TSequentialExecutor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSequentialExecutor() [1/2]. ROOT::TSequentialExecutor::TSequentialExecutor ; (; ). default . ◆ TSequentialExecutor() [2/2]. ROOT::TSequentialExecutor::TSequentialExecutor ; (; const TSequentialExecutor & ; ). delete . Member Function Documentation. ◆ Foreach() [1/5]. template<class F , class T > . void ROOT::TSequentialExecutor::Foreach ; (; F ; func, . const std::vector< T > & ; args . ). Execute a",MatchSource.WIKI,doc/v632/classROOT_1_1TSequentialExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSequentialExecutor.html
https://root.cern/doc/v632/classROOT_1_1TSpinMutex.html:314,Integrability,interface,interface,314,". ROOT: ROOT::TSpinMutex Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TSpinMutex Class ReferenceParallelized classes. ; A spin mutex class which respects the STL interface for mutexes. ; This class allows to acquire spin locks also in combination with templates in the STL such as std::unique_lock or std::condition_variable_any. For example:; ROOT::TSpinMutex m;; std::condition_variable cv;; bool ready = false;; ; void worker_thread(); {; // Wait until main() sends data; std::unique_lock<ROOT::TSpinMutex> lk(m);; cv.wait(lk, []{return ready;});; [...]; }; worker_threadstatic void * worker_thread(void *thread_func_param)Definition civetweb.c:19086; ROOT::TSpinMutexA spin mutex class which respects the STL interface for mutexes.Definition TSpinMutex.hxx:42; mTMarker mDefinition textangle.C:8; {.cpp} ; Definition at line 42 of file TSpinMutex.hxx. Public Member Functions;  TSpinMutex ()=default;  ;  TSpinMutex (const TSpinMutex &)=delete;  ;  ~TSpinMutex ()=default;  ; void lock ();  ; TSpinMutex & operator= (const TSpinMutex &)=delete;  ; bool try_lock ();  ; void unlock ();  . Private Attributes; std::atomic_flag fAFlag = ATOMIC_FLAG_INIT;  . #include <ROOT/TSpinMutex.hxx>; Constructor & Destructor Documentation. ◆ TSpinMutex() [1/2]. ROOT::TSpinMutex::TSpinMutex ; (; ). default . ◆ TSpinMutex() [2/2]. ROOT::TSpinMutex::TSpinMutex ; (; const TSpinMutex & ; ). delete . ◆ ~TSpinMutex(). ROOT::TSpinMutex::~TSpinMutex ; (; ). default . Member Function Documentation. ◆ lock(). void ROOT::TSpinMutex::lock ; (; ). inline . Definition at line 53 of file TSpinMutex.hxx. ◆ operator=(). TSpinMutex & ROOT::TSpinMutex::operator= ; (; const TSpinMutex & ; ). delete . ◆ try_lock(). bool ROOT::TSpinMutex::try_lock ; (; ). inline . Definition at line 55 of file TSpinMutex.hxx. ◆ unlock(). void ROOT::TSpinMutex::unlock ; (; ). inline . D",MatchSource.WIKI,doc/v632/classROOT_1_1TSpinMutex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSpinMutex.html
https://root.cern/doc/v632/classROOT_1_1TSpinMutex.html:865,Integrability,interface,interface,865,". ROOT: ROOT::TSpinMutex Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; ROOT::TSpinMutex Class ReferenceParallelized classes. ; A spin mutex class which respects the STL interface for mutexes. ; This class allows to acquire spin locks also in combination with templates in the STL such as std::unique_lock or std::condition_variable_any. For example:; ROOT::TSpinMutex m;; std::condition_variable cv;; bool ready = false;; ; void worker_thread(); {; // Wait until main() sends data; std::unique_lock<ROOT::TSpinMutex> lk(m);; cv.wait(lk, []{return ready;});; [...]; }; worker_threadstatic void * worker_thread(void *thread_func_param)Definition civetweb.c:19086; ROOT::TSpinMutexA spin mutex class which respects the STL interface for mutexes.Definition TSpinMutex.hxx:42; mTMarker mDefinition textangle.C:8; {.cpp} ; Definition at line 42 of file TSpinMutex.hxx. Public Member Functions;  TSpinMutex ()=default;  ;  TSpinMutex (const TSpinMutex &)=delete;  ;  ~TSpinMutex ()=default;  ; void lock ();  ; TSpinMutex & operator= (const TSpinMutex &)=delete;  ; bool try_lock ();  ; void unlock ();  . Private Attributes; std::atomic_flag fAFlag = ATOMIC_FLAG_INIT;  . #include <ROOT/TSpinMutex.hxx>; Constructor & Destructor Documentation. ◆ TSpinMutex() [1/2]. ROOT::TSpinMutex::TSpinMutex ; (; ). default . ◆ TSpinMutex() [2/2]. ROOT::TSpinMutex::TSpinMutex ; (; const TSpinMutex & ; ). delete . ◆ ~TSpinMutex(). ROOT::TSpinMutex::~TSpinMutex ; (; ). default . Member Function Documentation. ◆ lock(). void ROOT::TSpinMutex::lock ; (; ). inline . Definition at line 53 of file TSpinMutex.hxx. ◆ operator=(). TSpinMutex & ROOT::TSpinMutex::operator= ; (; const TSpinMutex & ; ). delete . ◆ try_lock(). bool ROOT::TSpinMutex::try_lock ; (; ). inline . Definition at line 55 of file TSpinMutex.hxx. ◆ unlock(). void ROOT::TSpinMutex::unlock ; (; ). inline . D",MatchSource.WIKI,doc/v632/classROOT_1_1TSpinMutex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSpinMutex.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:2049,Availability,avail,available,2049,""", it is also possible to manually select the correct object pointer explicitly. ; Definition at line 151 of file TThreadedObject.hxx. Public Member Functions; template<class ... ARGS> ;  TThreadedObject (ARGS &&... args);  Construct the TThreadedObject and the ""model"" of the thread private objects. ;  ;  TThreadedObject (const TThreadedObject &)=delete;  ; template<class... ARGS> ;  TThreadedObject (TNumSlots initSlots, ARGS &&... args);  Construct the TThreadedObject with initSlots empty slots and the ""model"" of the thread private objects. ;  ; std::shared_ptr< T > Get ();  Access the pointer corresponding to the current slot. ;  ; std::shared_ptr< T > GetAtSlot (unsigned i);  Access a particular processing slot. ;  ; T * GetAtSlotRaw (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; std::shared_ptr< T > GetAtSlotUnchecked (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; unsigned GetNSlots () const;  Return the number of currently available slot. ;  ; std::shared_ptr< T > Merge (TThreadedObjectUtils::MergeFunctionType< T > mergeFunction=TThreadedObjectUtils::MergeTObjects< T >);  Merge all the thread private objects. ;  ; T * operator-> ();  Access the wrapped object and allow to call its methods. ;  ; void SetAtSlot (unsigned i, std::shared_ptr< T > v);  Set the value of a particular slot. ;  ; std::unique_ptr< T > SnapshotMerge (TThreadedObjectUtils::MergeFunctionType< T > mergeFunction=TThreadedObjectUtils::MergeTObjects< T >);  Merge all the thread private objects. ;  . Static Public Attributes; static constexpr const TNumSlots fgMaxSlots {64};  The initial number of empty processing slots that a TThreadedObject is constructed with by default. ;  . Private Member Functions; unsigned GetThisSlotNumber ();  Get the slot number for this threadID, make a slot if needed. ;  . Private Attributes; std::deque< TDirectory * > fDirectories;  A TDirectory per slot. ;  ; bool fIsMerged: 1;  Rem",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:7276,Availability,avail,available,7276,"t which corresponds to a single thread. ; This overload is faster than the GetAtSlotUnchecked method but the caller is responsible to make sure that the slot exists, to check that the contained object is initialized and that the returned pointer will not outlive the TThreadedObject that returned it, which maintains ownership of the actual object. ; Definition at line 260 of file TThreadedObject.hxx. ◆ GetAtSlotUnchecked(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::GetAtSlotUnchecked ; (; unsigned ; i); const. inline . Access a particular slot which corresponds to a single thread. ; This is in general faster than the GetAtSlot method but it is responsibility of the caller to make sure that the slot exists and to check that the contained object is initialized (and not a nullptr). ; Definition at line 249 of file TThreadedObject.hxx. ◆ GetNSlots(). template<class T > . unsigned ROOT::TThreadedObject< T >::GetNSlots ; (; ); const. inline . Return the number of currently available slot. ; The method is safe to call concurrently to other TThreadedObject methods. Note that slots could be available but contain no data (i.e. a nullptr) if they have not been used yet. ; Definition at line 191 of file TThreadedObject.hxx. ◆ GetThisSlotNumber(). template<class T > . unsigned ROOT::TThreadedObject< T >::GetThisSlotNumber ; (; ). inlineprivate . Get the slot number for this threadID, make a slot if needed. ; Definition at line 338 of file TThreadedObject.hxx. ◆ Merge(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::Merge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called once: it does not create any new object but destroys the present bookkeping collapsing all objects into the one at slot 0. ; Definition at line 294 of file TThreadedObject.hxx. ◆ operator->(). template<class T > . T * ROOT::TThreadedObject< T >",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:7393,Availability,avail,available,7393,"e to make sure that the slot exists, to check that the contained object is initialized and that the returned pointer will not outlive the TThreadedObject that returned it, which maintains ownership of the actual object. ; Definition at line 260 of file TThreadedObject.hxx. ◆ GetAtSlotUnchecked(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::GetAtSlotUnchecked ; (; unsigned ; i); const. inline . Access a particular slot which corresponds to a single thread. ; This is in general faster than the GetAtSlot method but it is responsibility of the caller to make sure that the slot exists and to check that the contained object is initialized (and not a nullptr). ; Definition at line 249 of file TThreadedObject.hxx. ◆ GetNSlots(). template<class T > . unsigned ROOT::TThreadedObject< T >::GetNSlots ; (; ); const. inline . Return the number of currently available slot. ; The method is safe to call concurrently to other TThreadedObject methods. Note that slots could be available but contain no data (i.e. a nullptr) if they have not been used yet. ; Definition at line 191 of file TThreadedObject.hxx. ◆ GetThisSlotNumber(). template<class T > . unsigned ROOT::TThreadedObject< T >::GetThisSlotNumber ; (; ). inlineprivate . Get the slot number for this threadID, make a slot if needed. ; Definition at line 338 of file TThreadedObject.hxx. ◆ Merge(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::Merge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called once: it does not create any new object but destroys the present bookkeping collapsing all objects into the one at slot 0. ; Definition at line 294 of file TThreadedObject.hxx. ◆ operator->(). template<class T > . T * ROOT::TThreadedObject< T >::operator-> ; (; ). inline . Access the wrapped object and allow to call its methods. ; Definition at line 286 of file TThreaded",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:419,Integrability,wrap,wrapper,419,". ROOT: ROOT::TThreadedObject< T > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadedObject< T > Class Template ReferenceParallelized classes. ; template<class T>; class ROOT::TThreadedObject< T >A wrapper to make object instances thread private, lazily. ; Template Parameters. TClass of the object to be made thread private (e.g. TH1F). A wrapper which makes objects thread private. The methods of the underlying object can be invoked via the arrow operator. The object is created in a specific thread lazily, i.e. upon invocation of one of its methods. The correct object pointer from within a particular thread can be accessed with the overloaded arrow operator or with the Get method. In case an elaborate thread management is in place, e.g. in presence of stream of operations or ""processing slots"", it is also possible to manually select the correct object pointer explicitly. ; Definition at line 151 of file TThreadedObject.hxx. Public Member Functions; template<class ... ARGS> ;  TThreadedObject (ARGS &&... args);  Construct the TThreadedObject and the ""model"" of the thread private objects. ;  ;  TThreadedObject (const TThreadedObject &)=delete;  ; template<class... ARGS> ;  TThreadedObject (TNumSlots initSlots, ARGS &&... args);  Construct the TThreadedObject with initSlots empty slots and the ""model"" of the thread private objects. ;  ; std::shared_ptr< T > Get ();  Access the pointer corresponding to the current slot. ;  ; std::shared_ptr< T > GetAtSlot (unsigned i);  Access a particular processing slot. ;  ; T * GetAtSlotRaw (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; std::shared_ptr< T > GetAtSlotUnchecked (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; unsigned GetN",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:561,Integrability,wrap,wrapper,561,". ROOT: ROOT::TThreadedObject< T > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadedObject< T > Class Template ReferenceParallelized classes. ; template<class T>; class ROOT::TThreadedObject< T >A wrapper to make object instances thread private, lazily. ; Template Parameters. TClass of the object to be made thread private (e.g. TH1F). A wrapper which makes objects thread private. The methods of the underlying object can be invoked via the arrow operator. The object is created in a specific thread lazily, i.e. upon invocation of one of its methods. The correct object pointer from within a particular thread can be accessed with the overloaded arrow operator or with the Get method. In case an elaborate thread management is in place, e.g. in presence of stream of operations or ""processing slots"", it is also possible to manually select the correct object pointer explicitly. ; Definition at line 151 of file TThreadedObject.hxx. Public Member Functions; template<class ... ARGS> ;  TThreadedObject (ARGS &&... args);  Construct the TThreadedObject and the ""model"" of the thread private objects. ;  ;  TThreadedObject (const TThreadedObject &)=delete;  ; template<class... ARGS> ;  TThreadedObject (TNumSlots initSlots, ARGS &&... args);  Construct the TThreadedObject with initSlots empty slots and the ""model"" of the thread private objects. ;  ; std::shared_ptr< T > Get ();  Access the pointer corresponding to the current slot. ;  ; std::shared_ptr< T > GetAtSlot (unsigned i);  Access a particular processing slot. ;  ; T * GetAtSlotRaw (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; std::shared_ptr< T > GetAtSlotUnchecked (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; unsigned GetN",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:2275,Integrability,wrap,wrapped,2275,"d the ""model"" of the thread private objects. ;  ;  TThreadedObject (const TThreadedObject &)=delete;  ; template<class... ARGS> ;  TThreadedObject (TNumSlots initSlots, ARGS &&... args);  Construct the TThreadedObject with initSlots empty slots and the ""model"" of the thread private objects. ;  ; std::shared_ptr< T > Get ();  Access the pointer corresponding to the current slot. ;  ; std::shared_ptr< T > GetAtSlot (unsigned i);  Access a particular processing slot. ;  ; T * GetAtSlotRaw (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; std::shared_ptr< T > GetAtSlotUnchecked (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; unsigned GetNSlots () const;  Return the number of currently available slot. ;  ; std::shared_ptr< T > Merge (TThreadedObjectUtils::MergeFunctionType< T > mergeFunction=TThreadedObjectUtils::MergeTObjects< T >);  Merge all the thread private objects. ;  ; T * operator-> ();  Access the wrapped object and allow to call its methods. ;  ; void SetAtSlot (unsigned i, std::shared_ptr< T > v);  Set the value of a particular slot. ;  ; std::unique_ptr< T > SnapshotMerge (TThreadedObjectUtils::MergeFunctionType< T > mergeFunction=TThreadedObjectUtils::MergeTObjects< T >);  Merge all the thread private objects. ;  . Static Public Attributes; static constexpr const TNumSlots fgMaxSlots {64};  The initial number of empty processing slots that a TThreadedObject is constructed with by default. ;  . Private Member Functions; unsigned GetThisSlotNumber ();  Get the slot number for this threadID, make a slot if needed. ;  . Private Attributes; std::deque< TDirectory * > fDirectories;  A TDirectory per slot. ;  ; bool fIsMerged: 1;  Remember if the objects have been merged already. ;  ; std::unique_ptr< T > fModel;  Use to store a ""model"" of the object. ;  ; std::deque< std::shared_ptr< T > > fObjPointers;  An object pointer per slot. ;  ; ROOT::TSpinMutex fSpinMutex;  Protects concurren",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:8309,Integrability,wrap,wrapped,8309,"urrently to other TThreadedObject methods. Note that slots could be available but contain no data (i.e. a nullptr) if they have not been used yet. ; Definition at line 191 of file TThreadedObject.hxx. ◆ GetThisSlotNumber(). template<class T > . unsigned ROOT::TThreadedObject< T >::GetThisSlotNumber ; (; ). inlineprivate . Get the slot number for this threadID, make a slot if needed. ; Definition at line 338 of file TThreadedObject.hxx. ◆ Merge(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::Merge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called once: it does not create any new object but destroys the present bookkeping collapsing all objects into the one at slot 0. ; Definition at line 294 of file TThreadedObject.hxx. ◆ operator->(). template<class T > . T * ROOT::TThreadedObject< T >::operator-> ; (; ). inline . Access the wrapped object and allow to call its methods. ; Definition at line 286 of file TThreadedObject.hxx. ◆ SetAtSlot(). template<class T > . void ROOT::TThreadedObject< T >::SetAtSlot ; (; unsigned ; i, . std::shared_ptr< T > ; v . ). inline . Set the value of a particular slot. ; This method is thread-safe as long as concurrent calls access different slots (i.e. pass a different argument) and no thread accesses slot i via the arrow operator, so mixing usage of SetAtSlot with usage of the arrow operator can be dangerous. ; Definition at line 227 of file TThreadedObject.hxx. ◆ SnapshotMerge(). template<class T > . std::unique_ptr< T > ROOT::TThreadedObject< T >::SnapshotMerge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called many times. It does create a new instance of class T to represent the ""Sum"" object. This method is not thread safe: correct or acceptable behaviours depend on the nat",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:9309,Integrability,depend,depend,9309,"s the wrapped object and allow to call its methods. ; Definition at line 286 of file TThreadedObject.hxx. ◆ SetAtSlot(). template<class T > . void ROOT::TThreadedObject< T >::SetAtSlot ; (; unsigned ; i, . std::shared_ptr< T > ; v . ). inline . Set the value of a particular slot. ; This method is thread-safe as long as concurrent calls access different slots (i.e. pass a different argument) and no thread accesses slot i via the arrow operator, so mixing usage of SetAtSlot with usage of the arrow operator can be dangerous. ; Definition at line 227 of file TThreadedObject.hxx. ◆ SnapshotMerge(). template<class T > . std::unique_ptr< T > ROOT::TThreadedObject< T >::SnapshotMerge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called many times. It does create a new instance of class T to represent the ""Sum"" object. This method is not thread safe: correct or acceptable behaviours depend on the nature of T and of the merging function. ; Definition at line 312 of file TThreadedObject.hxx. Member Data Documentation. ◆ fDirectories. template<class T > . std::deque<TDirectory*> ROOT::TThreadedObject< T >::fDirectories. private . A TDirectory per slot. ; Definition at line 332 of file TThreadedObject.hxx. ◆ fgMaxSlots. template<class T > . constexpr const TNumSlots ROOT::TThreadedObject< T >::fgMaxSlots {64}. staticconstexpr . The initial number of empty processing slots that a TThreadedObject is constructed with by default. ; Deprecated: TThreadedObject grows as more slots are required. ; Definition at line 155 of file TThreadedObject.hxx. ◆ fIsMerged. template<class T > . bool ROOT::TThreadedObject< T >::fIsMerged. private . Remember if the objects have been merged already. ; Definition at line 335 of file TThreadedObject.hxx. ◆ fModel. template<class T > . std::unique_ptr<T> ROOT::TThreadedObject< T >::fModel. private . Use to store a ""model"" of the object. ",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:3270,Performance,concurren,concurrent,3270,"he wrapped object and allow to call its methods. ;  ; void SetAtSlot (unsigned i, std::shared_ptr< T > v);  Set the value of a particular slot. ;  ; std::unique_ptr< T > SnapshotMerge (TThreadedObjectUtils::MergeFunctionType< T > mergeFunction=TThreadedObjectUtils::MergeTObjects< T >);  Merge all the thread private objects. ;  . Static Public Attributes; static constexpr const TNumSlots fgMaxSlots {64};  The initial number of empty processing slots that a TThreadedObject is constructed with by default. ;  . Private Member Functions; unsigned GetThisSlotNumber ();  Get the slot number for this threadID, make a slot if needed. ;  . Private Attributes; std::deque< TDirectory * > fDirectories;  A TDirectory per slot. ;  ; bool fIsMerged: 1;  Remember if the objects have been merged already. ;  ; std::unique_ptr< T > fModel;  Use to store a ""model"" of the object. ;  ; std::deque< std::shared_ptr< T > > fObjPointers;  An object pointer per slot. ;  ; ROOT::TSpinMutex fSpinMutex;  Protects concurrent access to fThrIDSlotMap, fObjPointers. ;  ; std::map< std::thread::id, unsigned > fThrIDSlotMap;  A mapping between the thread IDs and the slots. ;  . #include <ROOT/TThreadedObject.hxx>; Constructor & Destructor Documentation. ◆ TThreadedObject() [1/3]. template<class T > . ROOT::TThreadedObject< T >::TThreadedObject ; (; const TThreadedObject< T > & ; ). delete . ◆ TThreadedObject() [2/3]. template<class T > . template<class... ARGS> . ROOT::TThreadedObject< T >::TThreadedObject ; (; TNumSlots ; initSlots, . ARGS &&... ; args . ). inline . Construct the TThreadedObject with initSlots empty slots and the ""model"" of the thread private objects. ; Parameters. initSlotsSet the initial number of slots of the TThreadedObject. . Template Parameters. ARGSArguments' class type of the constructor of T . Parameters. argsvariadic arguments. This form of the constructor is useful to manually pre-set the content of a given number of slots when used in combination with TThreadedObject::SetA",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:5862,Performance,concurren,concurrent,5862,". ; This method is not adequate for being called inside tight loops as it implies a lookup in a mapping between the threadIDs and the slot indices. A good practice consists in copying the pointer onto the stack and proceed with the loop as shown in this work item (psudo-code) which will be sent to different threads: auto workItem = [](){; auto objPtr = tthreadedObject.Get();; for (auto i : ROOT::TSeqI(1000)) {; // tthreadedObject->FastMethod(i); // don't do this! Inefficient!; objPtr->FastMethod(i);; }; }; ROOT::TSeqA pseudo container class which is a generator of indices.Definition TSeq.hxx:67; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. Definition at line 280 of file TThreadedObject.hxx. ◆ GetAtSlot(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::GetAtSlot ; (; unsigned ; i). inline . Access a particular processing slot. ; This method is thread-safe as long as concurrent calls request different slots (i.e. pass a different argument) and no thread accesses slot i via the arrow operator, so mixing usage of GetAtSlot with usage of the arrow operator can be dangerous. ; Definition at line 202 of file TThreadedObject.hxx. ◆ GetAtSlotRaw(). template<class T > . T * ROOT::TThreadedObject< T >::GetAtSlotRaw ; (; unsigned ; i); const. inline . Access a particular slot which corresponds to a single thread. ; This overload is faster than the GetAtSlotUnchecked method but the caller is responsible to make sure that the slot exists, to check that the contained object is initialized and that the returned pointer will not outlive the TThreadedObject that returned it, which maintains ownership of the actual object. ; Definition at line 260 of file TThreadedObject.hxx. ◆ GetAtSlotUnchecked(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::GetAtSlotUnchecked ; (; unsigned ; i); const. inline . Access a particular slot which corresponds to",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:7321,Performance,concurren,concurrently,7321,"ter than the GetAtSlotUnchecked method but the caller is responsible to make sure that the slot exists, to check that the contained object is initialized and that the returned pointer will not outlive the TThreadedObject that returned it, which maintains ownership of the actual object. ; Definition at line 260 of file TThreadedObject.hxx. ◆ GetAtSlotUnchecked(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::GetAtSlotUnchecked ; (; unsigned ; i); const. inline . Access a particular slot which corresponds to a single thread. ; This is in general faster than the GetAtSlot method but it is responsibility of the caller to make sure that the slot exists and to check that the contained object is initialized (and not a nullptr). ; Definition at line 249 of file TThreadedObject.hxx. ◆ GetNSlots(). template<class T > . unsigned ROOT::TThreadedObject< T >::GetNSlots ; (; ); const. inline . Return the number of currently available slot. ; The method is safe to call concurrently to other TThreadedObject methods. Note that slots could be available but contain no data (i.e. a nullptr) if they have not been used yet. ; Definition at line 191 of file TThreadedObject.hxx. ◆ GetThisSlotNumber(). template<class T > . unsigned ROOT::TThreadedObject< T >::GetThisSlotNumber ; (; ). inlineprivate . Get the slot number for this threadID, make a slot if needed. ; Definition at line 338 of file TThreadedObject.hxx. ◆ Merge(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::Merge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called once: it does not create any new object but destroys the present bookkeping collapsing all objects into the one at slot 0. ; Definition at line 294 of file TThreadedObject.hxx. ◆ operator->(). template<class T > . T * ROOT::TThreadedObject< T >::operator-> ; (; ). inline . Access the wrapped object and a",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:8624,Performance,concurren,concurrent,8624,"; (; ). inlineprivate . Get the slot number for this threadID, make a slot if needed. ; Definition at line 338 of file TThreadedObject.hxx. ◆ Merge(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::Merge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called once: it does not create any new object but destroys the present bookkeping collapsing all objects into the one at slot 0. ; Definition at line 294 of file TThreadedObject.hxx. ◆ operator->(). template<class T > . T * ROOT::TThreadedObject< T >::operator-> ; (; ). inline . Access the wrapped object and allow to call its methods. ; Definition at line 286 of file TThreadedObject.hxx. ◆ SetAtSlot(). template<class T > . void ROOT::TThreadedObject< T >::SetAtSlot ; (; unsigned ; i, . std::shared_ptr< T > ; v . ). inline . Set the value of a particular slot. ; This method is thread-safe as long as concurrent calls access different slots (i.e. pass a different argument) and no thread accesses slot i via the arrow operator, so mixing usage of SetAtSlot with usage of the arrow operator can be dangerous. ; Definition at line 227 of file TThreadedObject.hxx. ◆ SnapshotMerge(). template<class T > . std::unique_ptr< T > ROOT::TThreadedObject< T >::SnapshotMerge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called many times. It does create a new instance of class T to represent the ""Sum"" object. This method is not thread safe: correct or acceptable behaviours depend on the nature of T and of the merging function. ; Definition at line 312 of file TThreadedObject.hxx. Member Data Documentation. ◆ fDirectories. template<class T > . std::deque<TDirectory*> ROOT::TThreadedObject< T >::fDirectories. private . A TDirectory per slot. ; Definition at line 332 of file TThreadedOb",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:10678,Performance,concurren,concurrent,10678,"es create a new instance of class T to represent the ""Sum"" object. This method is not thread safe: correct or acceptable behaviours depend on the nature of T and of the merging function. ; Definition at line 312 of file TThreadedObject.hxx. Member Data Documentation. ◆ fDirectories. template<class T > . std::deque<TDirectory*> ROOT::TThreadedObject< T >::fDirectories. private . A TDirectory per slot. ; Definition at line 332 of file TThreadedObject.hxx. ◆ fgMaxSlots. template<class T > . constexpr const TNumSlots ROOT::TThreadedObject< T >::fgMaxSlots {64}. staticconstexpr . The initial number of empty processing slots that a TThreadedObject is constructed with by default. ; Deprecated: TThreadedObject grows as more slots are required. ; Definition at line 155 of file TThreadedObject.hxx. ◆ fIsMerged. template<class T > . bool ROOT::TThreadedObject< T >::fIsMerged. private . Remember if the objects have been merged already. ; Definition at line 335 of file TThreadedObject.hxx. ◆ fModel. template<class T > . std::unique_ptr<T> ROOT::TThreadedObject< T >::fModel. private . Use to store a ""model"" of the object. ; Definition at line 327 of file TThreadedObject.hxx. ◆ fObjPointers. template<class T > . std::deque<std::shared_ptr<T> > ROOT::TThreadedObject< T >::fObjPointers. private . An object pointer per slot. ; Definition at line 329 of file TThreadedObject.hxx. ◆ fSpinMutex. template<class T > . ROOT::TSpinMutex ROOT::TThreadedObject< T >::fSpinMutex. mutableprivate . Protects concurrent access to fThrIDSlotMap, fObjPointers. ; Definition at line 334 of file TThreadedObject.hxx. ◆ fThrIDSlotMap. template<class T > . std::map<std::thread::id, unsigned> ROOT::TThreadedObject< T >::fThrIDSlotMap. private . A mapping between the thread IDs and the slots. ; Definition at line 333 of file TThreadedObject.hxx. core/thread/inc/ROOT/TThreadedObject.hxx. ROOTTThreadedObject. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:5846,Safety,safe,safe,5846,". ; This method is not adequate for being called inside tight loops as it implies a lookup in a mapping between the threadIDs and the slot indices. A good practice consists in copying the pointer onto the stack and proceed with the loop as shown in this work item (psudo-code) which will be sent to different threads: auto workItem = [](){; auto objPtr = tthreadedObject.Get();; for (auto i : ROOT::TSeqI(1000)) {; // tthreadedObject->FastMethod(i); // don't do this! Inefficient!; objPtr->FastMethod(i);; }; }; ROOT::TSeqA pseudo container class which is a generator of indices.Definition TSeq.hxx:67; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. Definition at line 280 of file TThreadedObject.hxx. ◆ GetAtSlot(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::GetAtSlot ; (; unsigned ; i). inline . Access a particular processing slot. ; This method is thread-safe as long as concurrent calls request different slots (i.e. pass a different argument) and no thread accesses slot i via the arrow operator, so mixing usage of GetAtSlot with usage of the arrow operator can be dangerous. ; Definition at line 202 of file TThreadedObject.hxx. ◆ GetAtSlotRaw(). template<class T > . T * ROOT::TThreadedObject< T >::GetAtSlotRaw ; (; unsigned ; i); const. inline . Access a particular slot which corresponds to a single thread. ; This overload is faster than the GetAtSlotUnchecked method but the caller is responsible to make sure that the slot exists, to check that the contained object is initialized and that the returned pointer will not outlive the TThreadedObject that returned it, which maintains ownership of the actual object. ; Definition at line 260 of file TThreadedObject.hxx. ◆ GetAtSlotUnchecked(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::GetAtSlotUnchecked ; (; unsigned ; i); const. inline . Access a particular slot which corresponds to",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:7308,Safety,safe,safe,7308,"ter than the GetAtSlotUnchecked method but the caller is responsible to make sure that the slot exists, to check that the contained object is initialized and that the returned pointer will not outlive the TThreadedObject that returned it, which maintains ownership of the actual object. ; Definition at line 260 of file TThreadedObject.hxx. ◆ GetAtSlotUnchecked(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::GetAtSlotUnchecked ; (; unsigned ; i); const. inline . Access a particular slot which corresponds to a single thread. ; This is in general faster than the GetAtSlot method but it is responsibility of the caller to make sure that the slot exists and to check that the contained object is initialized (and not a nullptr). ; Definition at line 249 of file TThreadedObject.hxx. ◆ GetNSlots(). template<class T > . unsigned ROOT::TThreadedObject< T >::GetNSlots ; (; ); const. inline . Return the number of currently available slot. ; The method is safe to call concurrently to other TThreadedObject methods. Note that slots could be available but contain no data (i.e. a nullptr) if they have not been used yet. ; Definition at line 191 of file TThreadedObject.hxx. ◆ GetThisSlotNumber(). template<class T > . unsigned ROOT::TThreadedObject< T >::GetThisSlotNumber ; (; ). inlineprivate . Get the slot number for this threadID, make a slot if needed. ; Definition at line 338 of file TThreadedObject.hxx. ◆ Merge(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::Merge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called once: it does not create any new object but destroys the present bookkeping collapsing all objects into the one at slot 0. ; Definition at line 294 of file TThreadedObject.hxx. ◆ operator->(). template<class T > . T * ROOT::TThreadedObject< T >::operator-> ; (; ). inline . Access the wrapped object and a",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:8608,Safety,safe,safe,8608,"; (; ). inlineprivate . Get the slot number for this threadID, make a slot if needed. ; Definition at line 338 of file TThreadedObject.hxx. ◆ Merge(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::Merge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called once: it does not create any new object but destroys the present bookkeping collapsing all objects into the one at slot 0. ; Definition at line 294 of file TThreadedObject.hxx. ◆ operator->(). template<class T > . T * ROOT::TThreadedObject< T >::operator-> ; (; ). inline . Access the wrapped object and allow to call its methods. ; Definition at line 286 of file TThreadedObject.hxx. ◆ SetAtSlot(). template<class T > . void ROOT::TThreadedObject< T >::SetAtSlot ; (; unsigned ; i, . std::shared_ptr< T > ; v . ). inline . Set the value of a particular slot. ; This method is thread-safe as long as concurrent calls access different slots (i.e. pass a different argument) and no thread accesses slot i via the arrow operator, so mixing usage of SetAtSlot with usage of the arrow operator can be dangerous. ; Definition at line 227 of file TThreadedObject.hxx. ◆ SnapshotMerge(). template<class T > . std::unique_ptr< T > ROOT::TThreadedObject< T >::SnapshotMerge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called many times. It does create a new instance of class T to represent the ""Sum"" object. This method is not thread safe: correct or acceptable behaviours depend on the nature of T and of the merging function. ; Definition at line 312 of file TThreadedObject.hxx. Member Data Documentation. ◆ fDirectories. template<class T > . std::deque<TDirectory*> ROOT::TThreadedObject< T >::fDirectories. private . A TDirectory per slot. ; Definition at line 332 of file TThreadedOb",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:9270,Safety,safe,safe,9270,"s the wrapped object and allow to call its methods. ; Definition at line 286 of file TThreadedObject.hxx. ◆ SetAtSlot(). template<class T > . void ROOT::TThreadedObject< T >::SetAtSlot ; (; unsigned ; i, . std::shared_ptr< T > ; v . ). inline . Set the value of a particular slot. ; This method is thread-safe as long as concurrent calls access different slots (i.e. pass a different argument) and no thread accesses slot i via the arrow operator, so mixing usage of SetAtSlot with usage of the arrow operator can be dangerous. ; Definition at line 227 of file TThreadedObject.hxx. ◆ SnapshotMerge(). template<class T > . std::unique_ptr< T > ROOT::TThreadedObject< T >::SnapshotMerge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called many times. It does create a new instance of class T to represent the ""Sum"" object. This method is not thread safe: correct or acceptable behaviours depend on the nature of T and of the merging function. ; Definition at line 312 of file TThreadedObject.hxx. Member Data Documentation. ◆ fDirectories. template<class T > . std::deque<TDirectory*> ROOT::TThreadedObject< T >::fDirectories. private . A TDirectory per slot. ; Definition at line 332 of file TThreadedObject.hxx. ◆ fgMaxSlots. template<class T > . constexpr const TNumSlots ROOT::TThreadedObject< T >::fgMaxSlots {64}. staticconstexpr . The initial number of empty processing slots that a TThreadedObject is constructed with by default. ; Deprecated: TThreadedObject grows as more slots are required. ; Definition at line 155 of file TThreadedObject.hxx. ◆ fIsMerged. template<class T > . bool ROOT::TThreadedObject< T >::fIsMerged. private . Remember if the objects have been merged already. ; Definition at line 335 of file TThreadedObject.hxx. ◆ fModel. template<class T > . std::unique_ptr<T> ROOT::TThreadedObject< T >::fModel. private . Use to store a ""model"" of the object. ",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:842,Security,access,accessed,842,". ROOT: ROOT::TThreadedObject< T > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadedObject< T > Class Template ReferenceParallelized classes. ; template<class T>; class ROOT::TThreadedObject< T >A wrapper to make object instances thread private, lazily. ; Template Parameters. TClass of the object to be made thread private (e.g. TH1F). A wrapper which makes objects thread private. The methods of the underlying object can be invoked via the arrow operator. The object is created in a specific thread lazily, i.e. upon invocation of one of its methods. The correct object pointer from within a particular thread can be accessed with the overloaded arrow operator or with the Get method. In case an elaborate thread management is in place, e.g. in presence of stream of operations or ""processing slots"", it is also possible to manually select the correct object pointer explicitly. ; Definition at line 151 of file TThreadedObject.hxx. Public Member Functions; template<class ... ARGS> ;  TThreadedObject (ARGS &&... args);  Construct the TThreadedObject and the ""model"" of the thread private objects. ;  ;  TThreadedObject (const TThreadedObject &)=delete;  ; template<class... ARGS> ;  TThreadedObject (TNumSlots initSlots, ARGS &&... args);  Construct the TThreadedObject with initSlots empty slots and the ""model"" of the thread private objects. ;  ; std::shared_ptr< T > Get ();  Access the pointer corresponding to the current slot. ;  ; std::shared_ptr< T > GetAtSlot (unsigned i);  Access a particular processing slot. ;  ; T * GetAtSlotRaw (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; std::shared_ptr< T > GetAtSlotUnchecked (unsigned i) const;  Access a particular slot which corresponds to a single thread. ;  ; unsigned GetN",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:3281,Security,access,access,3281,"he wrapped object and allow to call its methods. ;  ; void SetAtSlot (unsigned i, std::shared_ptr< T > v);  Set the value of a particular slot. ;  ; std::unique_ptr< T > SnapshotMerge (TThreadedObjectUtils::MergeFunctionType< T > mergeFunction=TThreadedObjectUtils::MergeTObjects< T >);  Merge all the thread private objects. ;  . Static Public Attributes; static constexpr const TNumSlots fgMaxSlots {64};  The initial number of empty processing slots that a TThreadedObject is constructed with by default. ;  . Private Member Functions; unsigned GetThisSlotNumber ();  Get the slot number for this threadID, make a slot if needed. ;  . Private Attributes; std::deque< TDirectory * > fDirectories;  A TDirectory per slot. ;  ; bool fIsMerged: 1;  Remember if the objects have been merged already. ;  ; std::unique_ptr< T > fModel;  Use to store a ""model"" of the object. ;  ; std::deque< std::shared_ptr< T > > fObjPointers;  An object pointer per slot. ;  ; ROOT::TSpinMutex fSpinMutex;  Protects concurrent access to fThrIDSlotMap, fObjPointers. ;  ; std::map< std::thread::id, unsigned > fThrIDSlotMap;  A mapping between the thread IDs and the slots. ;  . #include <ROOT/TThreadedObject.hxx>; Constructor & Destructor Documentation. ◆ TThreadedObject() [1/3]. template<class T > . ROOT::TThreadedObject< T >::TThreadedObject ; (; const TThreadedObject< T > & ; ). delete . ◆ TThreadedObject() [2/3]. template<class T > . template<class... ARGS> . ROOT::TThreadedObject< T >::TThreadedObject ; (; TNumSlots ; initSlots, . ARGS &&... ; args . ). inline . Construct the TThreadedObject with initSlots empty slots and the ""model"" of the thread private objects. ; Parameters. initSlotsSet the initial number of slots of the TThreadedObject. . Template Parameters. ARGSArguments' class type of the constructor of T . Parameters. argsvariadic arguments. This form of the constructor is useful to manually pre-set the content of a given number of slots when used in combination with TThreadedObject::SetA",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:5950,Security,access,accesses,5950," and the slot indices. A good practice consists in copying the pointer onto the stack and proceed with the loop as shown in this work item (psudo-code) which will be sent to different threads: auto workItem = [](){; auto objPtr = tthreadedObject.Get();; for (auto i : ROOT::TSeqI(1000)) {; // tthreadedObject->FastMethod(i); // don't do this! Inefficient!; objPtr->FastMethod(i);; }; }; ROOT::TSeqA pseudo container class which is a generator of indices.Definition TSeq.hxx:67; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. Definition at line 280 of file TThreadedObject.hxx. ◆ GetAtSlot(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::GetAtSlot ; (; unsigned ; i). inline . Access a particular processing slot. ; This method is thread-safe as long as concurrent calls request different slots (i.e. pass a different argument) and no thread accesses slot i via the arrow operator, so mixing usage of GetAtSlot with usage of the arrow operator can be dangerous. ; Definition at line 202 of file TThreadedObject.hxx. ◆ GetAtSlotRaw(). template<class T > . T * ROOT::TThreadedObject< T >::GetAtSlotRaw ; (; unsigned ; i); const. inline . Access a particular slot which corresponds to a single thread. ; This overload is faster than the GetAtSlotUnchecked method but the caller is responsible to make sure that the slot exists, to check that the contained object is initialized and that the returned pointer will not outlive the TThreadedObject that returned it, which maintains ownership of the actual object. ; Definition at line 260 of file TThreadedObject.hxx. ◆ GetAtSlotUnchecked(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::GetAtSlotUnchecked ; (; unsigned ; i); const. inline . Access a particular slot which corresponds to a single thread. ; This is in general faster than the GetAtSlot method but it is responsibility of the caller to make sure t",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:8641,Security,access,access,8641,"; (; ). inlineprivate . Get the slot number for this threadID, make a slot if needed. ; Definition at line 338 of file TThreadedObject.hxx. ◆ Merge(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::Merge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called once: it does not create any new object but destroys the present bookkeping collapsing all objects into the one at slot 0. ; Definition at line 294 of file TThreadedObject.hxx. ◆ operator->(). template<class T > . T * ROOT::TThreadedObject< T >::operator-> ; (; ). inline . Access the wrapped object and allow to call its methods. ; Definition at line 286 of file TThreadedObject.hxx. ◆ SetAtSlot(). template<class T > . void ROOT::TThreadedObject< T >::SetAtSlot ; (; unsigned ; i, . std::shared_ptr< T > ; v . ). inline . Set the value of a particular slot. ; This method is thread-safe as long as concurrent calls access different slots (i.e. pass a different argument) and no thread accesses slot i via the arrow operator, so mixing usage of SetAtSlot with usage of the arrow operator can be dangerous. ; Definition at line 227 of file TThreadedObject.hxx. ◆ SnapshotMerge(). template<class T > . std::unique_ptr< T > ROOT::TThreadedObject< T >::SnapshotMerge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called many times. It does create a new instance of class T to represent the ""Sum"" object. This method is not thread safe: correct or acceptable behaviours depend on the nature of T and of the merging function. ; Definition at line 312 of file TThreadedObject.hxx. Member Data Documentation. ◆ fDirectories. template<class T > . std::deque<TDirectory*> ROOT::TThreadedObject< T >::fDirectories. private . A TDirectory per slot. ; Definition at line 332 of file TThreadedOb",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:8711,Security,access,accesses,8711,"adedObject.hxx. ◆ Merge(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::Merge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called once: it does not create any new object but destroys the present bookkeping collapsing all objects into the one at slot 0. ; Definition at line 294 of file TThreadedObject.hxx. ◆ operator->(). template<class T > . T * ROOT::TThreadedObject< T >::operator-> ; (; ). inline . Access the wrapped object and allow to call its methods. ; Definition at line 286 of file TThreadedObject.hxx. ◆ SetAtSlot(). template<class T > . void ROOT::TThreadedObject< T >::SetAtSlot ; (; unsigned ; i, . std::shared_ptr< T > ; v . ). inline . Set the value of a particular slot. ; This method is thread-safe as long as concurrent calls access different slots (i.e. pass a different argument) and no thread accesses slot i via the arrow operator, so mixing usage of SetAtSlot with usage of the arrow operator can be dangerous. ; Definition at line 227 of file TThreadedObject.hxx. ◆ SnapshotMerge(). template<class T > . std::unique_ptr< T > ROOT::TThreadedObject< T >::SnapshotMerge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called many times. It does create a new instance of class T to represent the ""Sum"" object. This method is not thread safe: correct or acceptable behaviours depend on the nature of T and of the merging function. ; Definition at line 312 of file TThreadedObject.hxx. Member Data Documentation. ◆ fDirectories. template<class T > . std::deque<TDirectory*> ROOT::TThreadedObject< T >::fDirectories. private . A TDirectory per slot. ; Definition at line 332 of file TThreadedObject.hxx. ◆ fgMaxSlots. template<class T > . constexpr const TNumSlots ROOT::TThreadedObject< T >::fgMaxSlots {64}. staticcon",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:10689,Security,access,access,10689,"es create a new instance of class T to represent the ""Sum"" object. This method is not thread safe: correct or acceptable behaviours depend on the nature of T and of the merging function. ; Definition at line 312 of file TThreadedObject.hxx. Member Data Documentation. ◆ fDirectories. template<class T > . std::deque<TDirectory*> ROOT::TThreadedObject< T >::fDirectories. private . A TDirectory per slot. ; Definition at line 332 of file TThreadedObject.hxx. ◆ fgMaxSlots. template<class T > . constexpr const TNumSlots ROOT::TThreadedObject< T >::fgMaxSlots {64}. staticconstexpr . The initial number of empty processing slots that a TThreadedObject is constructed with by default. ; Deprecated: TThreadedObject grows as more slots are required. ; Definition at line 155 of file TThreadedObject.hxx. ◆ fIsMerged. template<class T > . bool ROOT::TThreadedObject< T >::fIsMerged. private . Remember if the objects have been merged already. ; Definition at line 335 of file TThreadedObject.hxx. ◆ fModel. template<class T > . std::unique_ptr<T> ROOT::TThreadedObject< T >::fModel. private . Use to store a ""model"" of the object. ; Definition at line 327 of file TThreadedObject.hxx. ◆ fObjPointers. template<class T > . std::deque<std::shared_ptr<T> > ROOT::TThreadedObject< T >::fObjPointers. private . An object pointer per slot. ; Definition at line 329 of file TThreadedObject.hxx. ◆ fSpinMutex. template<class T > . ROOT::TSpinMutex ROOT::TThreadedObject< T >::fSpinMutex. mutableprivate . Protects concurrent access to fThrIDSlotMap, fObjPointers. ; Definition at line 334 of file TThreadedObject.hxx. ◆ fThrIDSlotMap. template<class T > . std::map<std::thread::id, unsigned> ROOT::TThreadedObject< T >::fThrIDSlotMap. private . A mapping between the thread IDs and the slots. ; Definition at line 333 of file TThreadedObject.hxx. core/thread/inc/ROOT/TThreadedObject.hxx. ROOTTThreadedObject. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadedObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:16033,Availability,avail,available,16033,"adExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TThreadExecutor.hxx>. Inheritance diagram for ROOT::TThreadExecutor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TThreadExecutor() [1/2]. ROOT::TThreadExecutor::TThreadExecutor ; (; UInt_t ; nThreads = 0u). explicit . Class constructor. ; If the scheduler is active (e.g. because another TThreadExecutor is in flight, or ROOT::EnableImplicitMT() was called), work with the current pool of threads. If not, initialize the pool of threads, spawning nThreads. nThreads' default value, 0, initializes the pool with as many logical threads as are available in the system (see NLogicalCores in RTaskArenaWrapper.cxx).; At construction time, TThreadExecutor automatically enables ROOT's thread-safety locks as per calling ROOT::EnableThreadSafety(). ; Definition at line 149 of file TThreadExecutor.cxx. ◆ TThreadExecutor() [2/2]. ROOT::TThreadExecutor::TThreadExecutor ; (; const TThreadExecutor & ; ). delete . Member Function Documentation. ◆ Foreach() [1/5]. template<class F , class T > . void ROOT::TThreadExecutor::Foreach ; (; F ; func, . const std::vector< T > & ; args, . unsigned ; nChunks = 0 . ). Execute a function in parallel over the elements of a immutable vector, dividing the execution in nChunks. ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsImmutable vector of elements passed as an argument to func. ; nChunksNumber of chunks to split the input data for processing. . Definition at line 231 of file TThreadExecutor.hxx. ◆ Foreach() [2/5]. template<class F",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:549,Energy Efficiency,adapt,adapting,549,". ROOT: ROOT::TThreadExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. . ROOT::TThreadExecutor::Map; This class inherits its interfaces from ROOT::TExecutorCRTP; , adapting them for multithreaded parallelism and extends them supporting:; Parallel Foreach operations.; Custom task granularity and partial reduction, by specifying reduction function and the number of chunks as extra parameters for the Map call. This is specially useful to reduce the size of intermediate results when dealing with a sizeable number of elements in the input data. The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of nThreads threads, where nThreads typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all ",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:824,Energy Efficiency,reduce,reduce,824,". ROOT: ROOT::TThreadExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. . ROOT::TThreadExecutor::Map; This class inherits its interfaces from ROOT::TExecutorCRTP; , adapting them for multithreaded parallelism and extends them supporting:; Parallel Foreach operations.; Custom task granularity and partial reduction, by specifying reduction function and the number of chunks as extra parameters for the Map call. This is specially useful to reduce the size of intermediate results when dealing with a sizeable number of elements in the input data. The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of nThreads threads, where nThreads typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all ",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:15737,Energy Efficiency,schedul,scheduler,15737,"nto a single object ;  . Private Attributes; std::shared_ptr< ROOT::Internal::RTaskArenaWrapper > fTaskArenaW = nullptr;  Pointer to the TBB task arena wrapper. ;  ; friend TExecutorCRTP;  . Additional Inherited Members;  Protected Types inherited from ROOT::TExecutorCRTP< TThreadExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TThreadExecutor.hxx>. Inheritance diagram for ROOT::TThreadExecutor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TThreadExecutor() [1/2]. ROOT::TThreadExecutor::TThreadExecutor ; (; UInt_t ; nThreads = 0u). explicit . Class constructor. ; If the scheduler is active (e.g. because another TThreadExecutor is in flight, or ROOT::EnableImplicitMT() was called), work with the current pool of threads. If not, initialize the pool of threads, spawning nThreads. nThreads' default value, 0, initializes the pool with as many logical threads as are available in the system (see NLogicalCores in RTaskArenaWrapper.cxx).; At construction time, TThreadExecutor automatically enables ROOT's thread-safety locks as per calling ROOT::EnableThreadSafety(). ; Definition at line 149 of file TThreadExecutor.cxx. ◆ TThreadExecutor() [2/2]. ROOT::TThreadExecutor::TThreadExecutor ; (; const TThreadExecutor & ; ). delete . Member Function Documentation. ◆ Foreach() [1/5]. template<class F , class T > . void ROOT::TThreadExecutor::Foreach ; (; F ; func, . const std::vector< T > & ; args, . unsigned ; nChunks = 0 . ). Execute a function in parallel over the elements of a immutable vector, dividing the execution in nChunks. ; Parameters. funcFunction to be executed o",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:339,Integrability,interface,interface,339,". ROOT: ROOT::TThreadExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. . ROOT::TThreadExecutor::Map; This class inherits its interfaces from ROOT::TExecutorCRTP; , adapting them for multithreaded parallelism and extends them supporting:; Parallel Foreach operations.; Custom task granularity and partial reduction, by specifying reduction function and the number of chunks as extra parameters for the Map call. This is specially useful to reduce the size of intermediate results when dealing with a sizeable number of elements in the input data. The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of nThreads threads, where nThreads typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all ",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:510,Integrability,interface,interfaces,510,". ROOT: ROOT::TThreadExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. . ROOT::TThreadExecutor::Map; This class inherits its interfaces from ROOT::TExecutorCRTP; , adapting them for multithreaded parallelism and extends them supporting:; Parallel Foreach operations.; Custom task granularity and partial reduction, by specifying reduction function and the number of chunks as extra parameters for the Map call. This is specially useful to reduce the size of intermediate results when dealing with a sizeable number of elements in the input data. The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of nThreads threads, where nThreads typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all ",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:2048,Integrability,wrap,wrapped,2048,"c is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of nThreads threads, where nThreads typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func.; Examples:; root[] ROOT::TThreadExecutor pool; auto hists = pool.Map(CreateHisto, 10);; root[] ROOT::TThreadExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::Mapauto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector< InvokeResult_t< F > >Execute a function nTimes in parallel, dividing the execution in nChunks and providing a result per c...Definition TThreadExecutor.hxx:289. ROOT::TThreadExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This funct",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:2495,Integrability,interface,interface,2495,"T::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func.; Examples:; root[] ROOT::TThreadExecutor pool; auto hists = pool.Map(CreateHisto, 10);; root[] ROOT::TThreadExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::Mapauto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector< InvokeResult_t< F > >Execute a function nTimes in parallel, dividing the execution in nChunks and providing a result per c...Definition TThreadExecutor.hxx:289. ROOT::TThreadExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. This function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; If this function is a binary operator, the ""squashing"" will be performed in parallel. This is exclusive to ROOT::TThreadExecutor and not any other ROOT::TExecutorCRTP-derived classes.; An integer can be passed as the fourth argument indicating t",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:14895,Integrability,wrap,wrapper,14895,"s F , class Cond = validMapReturnCond<F>> ; auto MapImpl (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times in parallel. ;  ; void ParallelFor (unsigned start, unsigned end, unsigned step, const std::function< void(unsigned int i)> &f);  Execute a function in parallel over the indices of a loop. ;  ; double ParallelReduce (const std::vector< double > &objs, const std::function< double(double a, double b)> &redfunc);  ""Reduce"" in parallel an std::vector<double> into a single double value ;  ; float ParallelReduce (const std::vector< float > &objs, const std::function< float(float a, float b)> &redfunc);  ""Reduce"" in parallel an std::vector<float> into a single float value ;  ; template<class T , class R > ; auto SeqReduce (const std::vector< T > &objs, R redfunc) -> decltype(redfunc(objs));  ""Reduce"", sequentially, an std::vector into a single object ;  . Private Attributes; std::shared_ptr< ROOT::Internal::RTaskArenaWrapper > fTaskArenaW = nullptr;  Pointer to the TBB task arena wrapper. ;  ; friend TExecutorCRTP;  . Additional Inherited Members;  Protected Types inherited from ROOT::TExecutorCRTP< TThreadExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TThreadExecutor.hxx>. Inheritance diagram for ROOT::TThreadExecutor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TThreadExecutor() [1/2]. ROOT::TThreadExecutor::TThreadExecutor ; (; UInt_t ; nThreads = 0u). explicit . Class constructor. ; If the scheduler is active (e.g. because another TThreadExecutor is in flight, or ROOT::EnableImplicitMT(",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:23642,Integrability,wrap,wrapping,23642,"s T , class Cond > . auto ROOT::TThreadExecutor::MapImpl ; (; F ; func, . std::vector< T > & ; args . ); -> std::vector<InvokeResult_t<F, T>>. private . Execute a function over the elements of a vector in parallel. ; Implementation of the Map method.; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. . ReturnsA vector with the results of the function calls. ; Definition at line 320 of file TThreadExecutor.hxx. ◆ MapImpl() [4/4]. template<class F , class Cond > . auto ROOT::TThreadExecutor::MapImpl ; (; F ; func, . unsigned ; nTimes . ); -> std::vector<InvokeResult_t<F>>. private . Execute a function without arguments several times in parallel. ; Implementation of the Map method.; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. Functions that take arguments can be executed (with fixed arguments) by wrapping them in a lambda or with std::bind. ; Definition at line 254 of file TThreadExecutor.hxx. ◆ MapReduce() [1/8]. template<class F , class T , class R , class Cond > . auto ROOT::TThreadExecutor::MapReduce ; (; F ; func, . const std::vector< T > & ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function over the elements of an immutable vector in parallel (Map) and accumulate the results into a single value (Reduce). ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsImmutable vector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func. Must return the same type as func. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 535 of file TThreadExecutor.hxx. ◆ MapReduce() [2/8]. template<class F , class T , class R , class Cond > . auto ROOT::TThreadExecutor::MapReduce ; (",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:35705,Integrability,wrap,wrapper,35705," combine. ; redfuncBinary reduction function to combine the elements of the vector objs. . ReturnsA value result of combining the vector elements into a single object of the same type. ; Definition at line 581 of file TThreadExecutor.hxx. ◆ Reduce() [2/2]. template<class T , class R > . auto ROOT::TThreadExecutor::Reduce ; (; const std::vector< T > & ; objs, . R ; redfunc . ); -> decltype(redfunc(objs)). ""Reduce"" an std::vector into a single object by passing a function as the second argument defining the reduction operation. ; Parameters. objsA vector of elements to combine. ; redfuncReduction function to combine the elements of the vector objs . ReturnsA value result of combining the vector elements into a single object of the same type. ; Definition at line 566 of file TThreadExecutor.hxx. ◆ SeqReduce(). template<class T , class R > . auto ROOT::TThreadExecutor::SeqReduce ; (; const std::vector< T > & ; objs, . R ; redfunc . ); -> decltype(redfunc(objs)). private . ""Reduce"", sequentially, an std::vector into a single object ; Parameters. objsA vector of elements to combine. ; redfuncReduction function to combine the elements of the vector objs. . ReturnsA value result of combining the vector elements into a single object of the same type. ; Definition at line 595 of file TThreadExecutor.hxx. Member Data Documentation. ◆ fTaskArenaW. std::shared_ptr<ROOT::Internal::RTaskArenaWrapper> ROOT::TThreadExecutor::fTaskArenaW = nullptr. private . Pointer to the TBB task arena wrapper. ; Definition at line 134 of file TThreadExecutor.hxx. ◆ TExecutorCRTP. friend ROOT::TThreadExecutor::TExecutorCRTP. private . Definition at line 42 of file TThreadExecutor.hxx. Libraries for ROOT::TThreadExecutor:. [legend]; The documentation for this class was generated from the following files:; core/imt/inc/ROOT/TThreadExecutor.hxx; core/imt/src/TThreadExecutor.cxx. ROOTTThreadExecutor. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:497,Modifiability,inherit,inherits,497,". ROOT: ROOT::TThreadExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. . ROOT::TThreadExecutor::Map; This class inherits its interfaces from ROOT::TExecutorCRTP; , adapting them for multithreaded parallelism and extends them supporting:; Parallel Foreach operations.; Custom task granularity and partial reduction, by specifying reduction function and the number of chunks as extra parameters for the Map call. This is specially useful to reduce the size of intermediate results when dealing with a sizeable number of elements in the input data. The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of nThreads threads, where nThreads typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all ",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:549,Modifiability,adapt,adapting,549,". ROOT: ROOT::TThreadExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. . ROOT::TThreadExecutor::Map; This class inherits its interfaces from ROOT::TExecutorCRTP; , adapting them for multithreaded parallelism and extends them supporting:; Parallel Foreach operations.; Custom task granularity and partial reduction, by specifying reduction function and the number of chunks as extra parameters for the Map call. This is specially useful to reduce the size of intermediate results when dealing with a sizeable number of elements in the input data. The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of nThreads threads, where nThreads typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all ",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:597,Modifiability,extend,extends,597,". ROOT: ROOT::TThreadExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. . ROOT::TThreadExecutor::Map; This class inherits its interfaces from ROOT::TExecutorCRTP; , adapting them for multithreaded parallelism and extends them supporting:; Parallel Foreach operations.; Custom task granularity and partial reduction, by specifying reduction function and the number of chunks as extra parameters for the Map call. This is specially useful to reduce the size of intermediate results when dealing with a sizeable number of elements in the input data. The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of nThreads threads, where nThreads typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all ",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:8719,Modifiability,inherit,inherited,8719,"pReturnCond<F>> ; auto MapReduce (F func, unsigned nTimes, R redfunc, unsigned nChunks) -> InvokeResult_t< F >;  Execute a function in parallel over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ;  ; TThreadExecutor & operator= (const TThreadExecutor &)=delete;  ; template<class T , class BINARYOP > ; auto Reduce (const std::vector< T > &objs, BINARYOP redfunc) -> decltype(redfunc(objs.front(), objs.front()));  ""Reduce"" an std::vector into a single object in parallel by passing a binary function as the second argument defining the reduction operation. ;  ; template<class T , class R > ; auto Reduce (const std::vector< T > &objs, R redfunc) -> decltype(redfunc(objs));  ""Reduce"" an std::vector into a single object by passing a function as the second argument defining the reduction operation. ;  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TThreadExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; auto Map (F func, std::initializer_list< T > args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an initializer_list. ;  ; auto Map (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, const std::vector< T > &args, R redf",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:9683,Modifiability,inherit,inheriting,9683,"ation. ;  ;  Public Member Functions inherited from ROOT::TExecutorCRTP< TThreadExecutor >;  TExecutorCRTP ()=default;  ;  TExecutorCRTP (const TExecutorCRTP &)=delete;  ; auto Map (F func, const std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an immutable vector. ;  ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  Execute a function over a sequence of indexes. ;  ; auto Map (F func, std::initializer_list< T > args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of an initializer_list. ;  ; auto Map (F func, std::vector< T > &args) -> std::vector< InvokeResult_t< F, T > >;  Execute a function over the elements of a vector. ;  ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; T * MapReduce (F func, std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:10530,Modifiability,inherit,inheriting,10530,"> >;  Execute a function without arguments several times. ;  ; T * MapReduce (F func, const std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of an immutable vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, const std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Execute a function over a sequence of indexes (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, std::initializer_list< T > args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ;  ; T * MapReduce (F func, std::vector< T * > &args);  Execute a function over the TObject-inheriting elements of a vector (Map) and merge the objects into a single one (Reduce). ;  ; auto MapReduce (F func, std::vector< T > &args, R redfunc) -> InvokeResult_t< F, T >;  Execute a function over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ;  ; auto MapReduce (F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >;  Execute a function without arguments several times (Map) and accumulate the results into a single value (Reduce). ;  ; TExecutorCRTP & operator= (const TExecutorCRTP &)=delete;  ; T * Reduce (const std::vector< T * > &mergeObjs);  ""Reduce"" an std::vector into a single object by using the object's Merge method. ;  ; auto Reduce (const std::vector< T > &objs, R redfunc) -> decltype(redfunc(objs));  ""Reduce"" an std::vector into a single object by passing a function as the second argument defining the reduction operation. ;  . Private Member Functions; template<class F , class T , class R , class Cond = validMapReturnCo",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:14981,Modifiability,inherit,inherited,14981,"lel. ;  ; void ParallelFor (unsigned start, unsigned end, unsigned step, const std::function< void(unsigned int i)> &f);  Execute a function in parallel over the indices of a loop. ;  ; double ParallelReduce (const std::vector< double > &objs, const std::function< double(double a, double b)> &redfunc);  ""Reduce"" in parallel an std::vector<double> into a single double value ;  ; float ParallelReduce (const std::vector< float > &objs, const std::function< float(float a, float b)> &redfunc);  ""Reduce"" in parallel an std::vector<float> into a single float value ;  ; template<class T , class R > ; auto SeqReduce (const std::vector< T > &objs, R redfunc) -> decltype(redfunc(objs));  ""Reduce"", sequentially, an std::vector into a single object ;  . Private Attributes; std::shared_ptr< ROOT::Internal::RTaskArenaWrapper > fTaskArenaW = nullptr;  Pointer to the TBB task arena wrapper. ;  ; friend TExecutorCRTP;  . Additional Inherited Members;  Protected Types inherited from ROOT::TExecutorCRTP< TThreadExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TThreadExecutor.hxx>. Inheritance diagram for ROOT::TThreadExecutor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TThreadExecutor() [1/2]. ROOT::TThreadExecutor::TThreadExecutor ; (; UInt_t ; nThreads = 0u). explicit . Class constructor. ; If the scheduler is active (e.g. because another TThreadExecutor is in flight, or ROOT::EnableImplicitMT() was called), work with the current pool of threads. If not, initialize the pool of threads, spawning nThreads. nThreads' default value, 0, initializes the pool with as many logical",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:3218,Performance,optimiz,optimization,3218,"jects returned by func.; Examples:; root[] ROOT::TThreadExecutor pool; auto hists = pool.Map(CreateHisto, 10);; root[] ROOT::TThreadExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::Mapauto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector< InvokeResult_t< F > >Execute a function nTimes in parallel, dividing the execution in nChunks and providing a result per c...Definition TThreadExecutor.hxx:289. ROOT::TThreadExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. This function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; If this function is a binary operator, the ""squashing"" will be performed in parallel. This is exclusive to ROOT::TThreadExecutor and not any other ROOT::TExecutorCRTP-derived classes.; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. This may be useful to avoid the overhead introduced when running really short tasks.; Examples:; root[] ROOT::TThreadExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the resu",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:3320,Performance,perform,performed,3320," 10);; root[] ROOT::TThreadExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::Mapauto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector< InvokeResult_t< F > >Execute a function nTimes in parallel, dividing the execution in nChunks and providing a result per c...Definition TThreadExecutor.hxx:289. ROOT::TThreadExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. This function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; If this function is a binary operator, the ""squashing"" will be performed in parallel. This is exclusive to ROOT::TThreadExecutor and not any other ROOT::TExecutorCRTP-derived classes.; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. This may be useful to avoid the overhead introduced when running really short tasks.; Examples:; root[] ROOT::TThreadExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:36",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:25101,Performance,perform,performs,25101," funcFunction to be executed on the elements of the vector passed as second parameter. ; argsImmutable vector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func. Must return the same type as func. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 535 of file TThreadExecutor.hxx. ◆ MapReduce() [2/8]. template<class F , class T , class R , class Cond > . auto ROOT::TThreadExecutor::MapReduce ; (; F ; func, . const std::vector< T > & ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function in parallel over the elements of an immutable vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results.; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsImmutable vector, whose elements are passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 557 of file TThreadExecutor.hxx. ◆ MapReduce() [3/8]. template<class F , class INTEGER , class R , class Cond > . auto ROOT::TThreadExecutor::MapReduce ; (; F ; func, . ROOT::TSeq< INTEGER > ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, INTEGER>. Execute a function in parallel over the elements of a vector (Ma",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:26381,Performance,perform,performs,26381," results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 557 of file TThreadExecutor.hxx. ◆ MapReduce() [3/8]. template<class F , class INTEGER , class R , class Cond > . auto ROOT::TThreadExecutor::MapReduce ; (; F ; func, . ROOT::TSeq< INTEGER > ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, INTEGER>. Execute a function in parallel over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results.; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsSequence of indexes to execute func on. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 504 of file TThreadExecutor.hxx. ◆ MapReduce() [4/8]. template<class F , class T , class R , class Cond > . auto ROOT::TThreadExecutor::MapReduce ; (; F ; func, . std::initializer_list< T > ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function in parallel over the elements of an initializer_list (Map) and accumulate the results ",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:27631,Performance,perform,performs,27631,"he results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 504 of file TThreadExecutor.hxx. ◆ MapReduce() [4/8]. template<class F , class T , class R , class Cond > . auto ROOT::TThreadExecutor::MapReduce ; (; F ; func, . std::initializer_list< T > ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function in parallel over the elements of an initializer_list (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results.; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed as second argument as a parameter. ; argsinitializer_list for a vector to apply func on. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 516 of file TThreadExecutor.hxx. ◆ MapReduce() [5/8]. template<class F , class T , class R , class Cond > . auto ROOT::TThreadExecutor::MapReduce ; (; F ; func, . std::vector< T > & ; args, . R ; redfunc . ); -> InvokeResult_t<F, T>. Execute a function over the elements of a vector in parallel (Map) and accumulate the results into a single value (Reduc",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:29621,Performance,perform,performs,29621,"lue (Reduce). ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsVector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func. Must return the same type as func. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 526 of file TThreadExecutor.hxx. ◆ MapReduce() [6/8]. template<class F , class T , class R , class Cond > . auto ROOT::TThreadExecutor::MapReduce ; (; F ; func, . std::vector< T > & ; args, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F, T>. Execute a function in parallel over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results.; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed assecond argument as a parameter. ; argsVector of elements passed as an argument to func. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 546 of file TThreadExecutor.hxx. ◆ MapReduce() [7/8]. template<class F , class R , class Cond > . auto ROOT::TThreadExecutor::MapReduce ; (; F ; func, . unsigned ; nTimes, . R ; redfunc . ); -> InvokeResult_t<F>. Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce). ; Parameters. funcFunction to be execut",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:31555,Performance,perform,performs,31555,"o a single value (Reduce). ; Parameters. funcFunction to be executed. ; nTimesNumber of times function should be called. . ReturnsA vector with the results of the function calls. ; Parameters. redfuncReduction function to combine the results of the calls to func. Must return the same type as func. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 482 of file TThreadExecutor.hxx. ◆ MapReduce() [8/8]. template<class F , class R , class Cond > . auto ROOT::TThreadExecutor::MapReduce ; (; F ; func, . unsigned ; nTimes, . R ; redfunc, . unsigned ; nChunks . ); -> InvokeResult_t<F>. Execute a function in parallel over the elements of a vector (Map) and accumulate the results into a single value (Reduce). ; Benefits from partial reduction into nChunks intermediate results.; Benefits from partial reduction into nChunks intermediate results if the execution policy is multithreaded. Otherwise, it ignores the nChunks argument and performs a normal MapReduce operation.; Parameters. funcFunction to be executed. Must take an element of the sequence passed as second argument as a parameter. ; nTimesNumber of times function should be called. ; redfuncReduction function to combine the results of the calls to func into partial results, and these into a final result. Must return the same type as func and should be callable with const std::vector<T> where T is the output of func. ; nChunksNumber of chunks to split the input data for processing. . ReturnsA value result of ""reducing"" the vector returned by the Map operation into a single object. ; Definition at line 493 of file TThreadExecutor.hxx. ◆ operator=(). TThreadExecutor & ROOT::TThreadExecutor::operator= ; (; const TThreadExecutor & ; ). delete . ◆ ParallelFor(). void ROOT::TThreadExecutor::ParallelFor ; (; unsigned ; start, . unsigned ; end, . unsigned ; step, . const std::function< void(unsigned int i)> & ; f . ). private . Execute a function in parallel o",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:3575,Safety,avoid,avoid,3575,".hxx:41; ROOT::TThreadExecutor::Mapauto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector< InvokeResult_t< F > >Execute a function nTimes in parallel, dividing the execution in nChunks and providing a result per c...Definition TThreadExecutor.hxx:289. ROOT::TThreadExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. This function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; If this function is a binary operator, the ""squashing"" will be performed in parallel. This is exclusive to ROOT::TThreadExecutor and not any other ROOT::TExecutorCRTP-derived classes.; An integer can be passed as the fourth argument indicating the number of chunks we want to divide our work in. This may be useful to avoid the overhead introduced when running really short tasks.; Examples:; root[] ROOT::TThreadExecutor pool; auto ten = pool.MapReduce([]() { return 1; }, 10, [](const std::vector<int> &v) { return std::accumulate(v.begin(), v.end(), 0); }); root[] ROOT::TThreadExecutor pool; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; ROOT::ExecutorUtils::ReduceObjectsMerge collection of TObjects.Definition PoolUtils.h:35; ROOT::TThreadExecutor::MapReduceauto MapReduce(F func, unsigned nTimes, R redfunc) -> InvokeResult_t< F >Execute a function nTimes in parallel (Map) and accumulate the results into a single value (Reduce).Definition TThreadExecutor.hxx:482; v@ vDefinition rootcling_impl.cxx:3687. Definition at line 41 of file TThreadExecutor.hxx. Public Member Functions;  TThreadExecutor (const TThreadExecutor &)=delete;  ;  TThreadExecutor (UInt_t nThreads=0u);  Class constructor. ;  ; template<class F , class T > ; void Foreach (F func, const std::vector< T > &args, unsigned nChunk",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:16178,Safety,safe,safety,16178,"rence< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TThreadExecutor.hxx>. Inheritance diagram for ROOT::TThreadExecutor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TThreadExecutor() [1/2]. ROOT::TThreadExecutor::TThreadExecutor ; (; UInt_t ; nThreads = 0u). explicit . Class constructor. ; If the scheduler is active (e.g. because another TThreadExecutor is in flight, or ROOT::EnableImplicitMT() was called), work with the current pool of threads. If not, initialize the pool of threads, spawning nThreads. nThreads' default value, 0, initializes the pool with as many logical threads as are available in the system (see NLogicalCores in RTaskArenaWrapper.cxx).; At construction time, TThreadExecutor automatically enables ROOT's thread-safety locks as per calling ROOT::EnableThreadSafety(). ; Definition at line 149 of file TThreadExecutor.cxx. ◆ TThreadExecutor() [2/2]. ROOT::TThreadExecutor::TThreadExecutor ; (; const TThreadExecutor & ; ). delete . Member Function Documentation. ◆ Foreach() [1/5]. template<class F , class T > . void ROOT::TThreadExecutor::Foreach ; (; F ; func, . const std::vector< T > & ; args, . unsigned ; nChunks = 0 . ). Execute a function in parallel over the elements of a immutable vector, dividing the execution in nChunks. ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsImmutable vector of elements passed as an argument to func. ; nChunksNumber of chunks to split the input data for processing. . Definition at line 231 of file TThreadExecutor.hxx. ◆ Foreach() [2/5]. template<class F , class INTEGER > . void ROOT::TThreadExecutor::Foreach ; (; F ; func, . ROOT::TSeq< INTEGER > ; args, . unsigned ; nChunks = 0 . ). Execute a fu",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:16010,Testability,log,logical,16010,"adExecutor >; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  ; using validMapReturnCond = std::enable_if_t<!std::is_reference< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TThreadExecutor.hxx>. Inheritance diagram for ROOT::TThreadExecutor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TThreadExecutor() [1/2]. ROOT::TThreadExecutor::TThreadExecutor ; (; UInt_t ; nThreads = 0u). explicit . Class constructor. ; If the scheduler is active (e.g. because another TThreadExecutor is in flight, or ROOT::EnableImplicitMT() was called), work with the current pool of threads. If not, initialize the pool of threads, spawning nThreads. nThreads' default value, 0, initializes the pool with as many logical threads as are available in the system (see NLogicalCores in RTaskArenaWrapper.cxx).; At construction time, TThreadExecutor automatically enables ROOT's thread-safety locks as per calling ROOT::EnableThreadSafety(). ; Definition at line 149 of file TThreadExecutor.cxx. ◆ TThreadExecutor() [2/2]. ROOT::TThreadExecutor::TThreadExecutor ; (; const TThreadExecutor & ; ). delete . Member Function Documentation. ◆ Foreach() [1/5]. template<class F , class T > . void ROOT::TThreadExecutor::Foreach ; (; F ; func, . const std::vector< T > & ; args, . unsigned ; nChunks = 0 . ). Execute a function in parallel over the elements of a immutable vector, dividing the execution in nChunks. ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsImmutable vector of elements passed as an argument to func. ; nChunksNumber of chunks to split the input data for processing. . Definition at line 231 of file TThreadExecutor.hxx. ◆ Foreach() [2/5]. template<class F",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:332,Usability,simpl,simple,332,". ROOT: ROOT::TThreadExecutor Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TThreadExecutor Class ReferenceParallelized classes. ; This class provides a simple interface to execute the same task multiple times in parallel threads, possibly with different arguments every time. . ROOT::TThreadExecutor::Map; This class inherits its interfaces from ROOT::TExecutorCRTP; , adapting them for multithreaded parallelism and extends them supporting:; Parallel Foreach operations.; Custom task granularity and partial reduction, by specifying reduction function and the number of chunks as extra parameters for the Map call. This is specially useful to reduce the size of intermediate results when dealing with a sizeable number of elements in the input data. The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of nThreads threads, where nThreads typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all ",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:1554,Usability,simpl,simply,1554,"readExecutor::Map; This class inherits its interfaces from ROOT::TExecutorCRTP; , adapting them for multithreaded parallelism and extends them supporting:; Parallel Foreach operations.; Custom task granularity and partial reduction, by specifying reduction function and the number of chunks as extra parameters for the Map call. This is specially useful to reduce the size of intermediate results when dealing with a sizeable number of elements in the input data. The two possible usages of the Map method are:. Map(F func, unsigned nTimes): func is executed nTimes with no arguments; Map(F func, T& args): func is executed on each element of the collection of arguments args. For either signature, func is executed as many times as needed by a pool of nThreads threads, where nThreads typically defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func.; Examples:; root[] ROOT::TThreadExecutor pool; auto hists = pool.Map(CreateHisto, 10);; root[] ROOT::TThreadExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TThreadExecutorT",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:2488,Usability,simpl,simple,2488,"T::TThreadExecutor never deletes what it returns, it simply forgets it.; Parameters. funca callable object, such as a lambda expression, an std::function, a functor object or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard vector, a ROOT::TSeq of integer type or an initializer list for the second signature. An integer only for the first. . Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Return value:; An std::vector. The elements in the container will be the objects returned by func.; Examples:; root[] ROOT::TThreadExecutor pool; auto hists = pool.Map(CreateHisto, 10);; root[] ROOT::TThreadExecutor pool(2); auto squares = pool.Map([](int a) { return a*a; }, {1,2,3});; a#define a(i)Definition RSha256.hxx:99; ROOT::TThreadExecutorThis class provides a simple interface to execute the same task multiple times in parallel threads,...Definition TThreadExecutor.hxx:41; ROOT::TThreadExecutor::Mapauto Map(F func, unsigned nTimes, R redfunc, unsigned nChunks) -> std::vector< InvokeResult_t< F > >Execute a function nTimes in parallel, dividing the execution in nChunks and providing a result per c...Definition TThreadExecutor.hxx:289. ROOT::TThreadExecutor::MapReduce; This set of methods behaves exactly like Map, but takes an additional function as a third argument. This function is applied to the set of objects returned by the corresponding Map execution to ""squash"" them into a single object. This function should be independent of the size of the vector returned by Map due to optimization of the number of chunks.; If this function is a binary operator, the ""squashing"" will be performed in parallel. This is exclusive to ROOT::TThreadExecutor and not any other ROOT::TExecutorCRTP-derived classes.; An integer can be passed as the fourth argument indicating t",MatchSource.WIKI,doc/v632/classROOT_1_1TThreadExecutor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:8875,Availability,error,errors,8875,"g64_t jFirst=0) -> InvokeResult_t< F, std::reference_wrapper< TTreeReader > >;  ; TList * Process (TTree &tree, TSelector &selector, TEntryList &entries, ULong64_t nToProcess=0, ULong64_t jFirst=0);  TSelector-based tree processing: memory resident tree. ;  ; TList * Process (TTree &tree, TSelector &selector, ULong64_t nToProcess=0, ULong64_t jFirst=0);  ; void SetNWorkers (unsigned n);  . Private Types; enum class  ETask : unsigned char { kNoTask; , kProcByRange; , kProcByFile; };  A collection of the types of tasks that TTreeProcessorMP can execute. More...;  ; template<typename F , typename... Args> ; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  . Private Member Functions; template<class T > ; void Collect (std::vector< T > &reslist);  Listen for messages sent by the workers and call the appropriate handler function. ;  ; void FixLists (std::vector< TObject * > &lists);  Fix list of lists before merging (to avoid errors about duplicated objects) ;  ; template<class T > ; void HandlePoolCode (MPCodeBufPair &msg, TSocket *sender, std::vector< T > &reslist);  Handle message and reply to the worker. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TTreeProcessorMP's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nM",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:13136,Availability,error,errors,13136,"0). explicit . Class constructor. ; nWorkers is the number of times this ROOT session will be forked, i.e. the number of workers that will be spawned. ; Definition at line 90 of file TTreeProcessorMP.cxx. ◆ ~TTreeProcessorMP(). ROOT::TTreeProcessorMP::~TTreeProcessorMP ; (; ). default . ◆ TTreeProcessorMP() [2/2]. ROOT::TTreeProcessorMP::TTreeProcessorMP ; (; const TTreeProcessorMP & ; ). delete . Member Function Documentation. ◆ Collect(). template<class T > . void ROOT::TTreeProcessorMP::Collect ; (; std::vector< T > & ; reslist). private . Listen for messages sent by the workers and call the appropriate handler function. ; TTreeProcessorMP::HandlePoolCode is called on messages with a code < 1000 and TMPClient::HandleMPCode is called on messages with a code >= 1000. ; Definition at line 433 of file TTreeProcessorMP.hxx. ◆ FixLists(). void ROOT::TTreeProcessorMP::FixLists ; (; std::vector< TObject * > & ; lists). private . Fix list of lists before merging (to avoid errors about duplicated objects) ; Definition at line 324 of file TTreeProcessorMP.cxx. ◆ GetNWorkers(). unsigned ROOT::TTreeProcessorMP::GetNWorkers ; (; ); const. inline . Definition at line 166 of file TTreeProcessorMP.hxx. ◆ HandlePoolCode(). template<class T > . void ROOT::TTreeProcessorMP::HandlePoolCode ; (; MPCodeBufPair & ; msg, . TSocket * ; sender, . std::vector< T > & ; reslist . ). private . Handle message and reply to the worker. ; Definition at line 407 of file TTreeProcessorMP.hxx. ◆ operator=(). TTreeProcessorMP & ROOT::TTreeProcessorMP::operator= ; (; const TTreeProcessorMP & ; ). delete . ◆ Process() [1/20]. template<class F > . auto ROOT::TTreeProcessorMP::Process ; (; const std::string & ; fileName, . F ; procFunc, . const std::string & ; treeName = """", . ULong64_t ; nToProcess = 0, . ULong64_t ; jFirst = 0 . ); -> InvokeResult_t<F, std::reference_wrapper<TTreeReader>>. Definition at line 366 of file TTreeProcessorMP.hxx. ◆ Process() [2/20]. template<class F > . auto ROOT::TTreeProces",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:10577,Energy Efficiency,monitor,monitor,10577," unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void SetNWorkers (unsigned n);  Set the number of workers that will be spawned by the next call to Fork() ;  . Private Attributes; unsigned fNProcessed;  number of arguments already passed to the workers ;  ; unsigned fNToProcess;  total number of arguments to pass to the workers ;  ; ETask fTaskType = ETask::kNoTask;  the kind of task that is being executed, if any ;  . #include <ROOT/TTreeProcessorMP.hxx>. Inheritance diagram for ROOT::TTreeProcessorMP:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ InvokeResult_t. template<typename F , typename... Args> . using ROOT::TTreeProcessorMP::InvokeResult_t = ROOT::TypeTraits::InvokeResult_t<F, Args...>. private . Definition at line 40 of file TTreeProcessorMP.hxx. Member Enumeration Documentation. ◆ ETask. enum class ROOT::TTreeProcessorMP::ETask : unsigned char. strongprivate . A collection of the types of tasks tha",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:352,Integrability,interface,interface,352,". ROOT: ROOT::TTreeProcessorMP Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::TTreeProcessorMP Class ReferenceParallelized classes. ; This class provides an interface to process a TTree dataset in parallel with multi-process technology. . ROOT::TTreeProcessorMP::Process; The possible usages of the Process method are the following:. Process(<dataset>, F func, const std::string& treeName, ULong64_t nToProcess): func is executed nToProcess times with argument a TTreeReader&, initialized for the TTree with name treeName, from the dataset <dataset>. The dataset can be expressed as: const std::string& fileName -> single file name; const std::vector<std::string>& fileNames -> vector of file names; TFileCollection& files -> collection of TFileInfo objects; TChain& files -> TChain with the file paths; TTree& tree -> Reference to an existing TTree object; namechar name[80]Definition TGX11.cxx:110; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries.Definition TFileCollection.h:39; TFileInfoClass describing a generic file including meta information.Definition TFileInfo.h:39; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; For legacy, the following signature is also supported:; Process(<dataset>, TSelector& selector, const std::string& treeName, ULong64_t nToProcess): where selector is a TSelector derived class describing the analysis and the other arguments have the same meaning as above. For either set of signatures, the processing function is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It defaults to the number of cores.; ",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:3195,Integrability,wrap,wrapped,3195,"cution of func, returned objects included: ROOT::TTreeProcessorMP never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TTreeProcessorMP::Process is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Process will outrun the benefits of parallel execution on most machines.; Parameters. funca lambda expression, an std::function, a loaded macro, a functor class or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard container (vector, list, deque), an initializer list or a pointer to a TCollection (TList*, TObjArray*, ...). . Note: the version of ROOT::TTreeProcessorMP::Process that takes a TFileCollection* as argument incurs in the overhead of copying data from the TCollection to an STL container. Only use it when absolutely necessary.; Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Note: the user should take care of initializing random seeds differently in each process (e.g. using the process id in the seed). Otherwise several parallel executions might generate the same sequence of pseudo-random numbers.; Return value:; Methods taking 'F func' return the return type of F. Methods taking a TSelector return a 'TList *' with the selector output list; the output list content is owned by the caller.; Examples:; See tutorials/multicore/mp102_readNtuplesFillHistosAndFit.C and tutorials/multicore/mp103__processSelector.C . ; Definition at line 38 of file TTreeProcessorMP.hxx. Public Member Functions;  TTreeProcessorMP (const TTreeProcessorMP &)=delete;  ;  TTreeProcessorMP (UInt_t nWorkers=0);  Class constructor. ;  ;  ~TTreeProcessorMP ()=default;  ; unsigned GetNWorkers () const;  ; TTreeProcessorMP & operator= (const TTreeProcessorMP &)=delete;  ; template<class F",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:8705,Integrability,message,messages,8705,"procFunc, TEntryList &entries, ULong64_t nToProcess=0, ULong64_t jFirst=0) -> InvokeResult_t< F, std::reference_wrapper< TTreeReader > >;  ; template<class F > ; auto Process (TTree &tree, F procFunc, ULong64_t nToProcess=0, ULong64_t jFirst=0) -> InvokeResult_t< F, std::reference_wrapper< TTreeReader > >;  ; TList * Process (TTree &tree, TSelector &selector, TEntryList &entries, ULong64_t nToProcess=0, ULong64_t jFirst=0);  TSelector-based tree processing: memory resident tree. ;  ; TList * Process (TTree &tree, TSelector &selector, ULong64_t nToProcess=0, ULong64_t jFirst=0);  ; void SetNWorkers (unsigned n);  . Private Types; enum class  ETask : unsigned char { kNoTask; , kProcByRange; , kProcByFile; };  A collection of the types of tasks that TTreeProcessorMP can execute. More...;  ; template<typename F , typename... Args> ; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  . Private Member Functions; template<class T > ; void Collect (std::vector< T > &reslist);  Listen for messages sent by the workers and call the appropriate handler function. ;  ; void FixLists (std::vector< TObject * > &lists);  Fix list of lists before merging (to avoid errors about duplicated objects) ;  ; template<class T > ; void HandlePoolCode (MPCodeBufPair &msg, TSocket *sender, std::vector< T > &reslist);  Handle message and reply to the worker. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TTreeProcessorMP's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<c",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:9028,Integrability,message,message,9028,"g64_t jFirst=0) -> InvokeResult_t< F, std::reference_wrapper< TTreeReader > >;  ; TList * Process (TTree &tree, TSelector &selector, TEntryList &entries, ULong64_t nToProcess=0, ULong64_t jFirst=0);  TSelector-based tree processing: memory resident tree. ;  ; TList * Process (TTree &tree, TSelector &selector, ULong64_t nToProcess=0, ULong64_t jFirst=0);  ; void SetNWorkers (unsigned n);  . Private Types; enum class  ETask : unsigned char { kNoTask; , kProcByRange; , kProcByFile; };  A collection of the types of tasks that TTreeProcessorMP can execute. More...;  ; template<typename F , typename... Args> ; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  . Private Member Functions; template<class T > ; void Collect (std::vector< T > &reslist);  Listen for messages sent by the workers and call the appropriate handler function. ;  ; void FixLists (std::vector< TObject * > &lists);  Fix list of lists before merging (to avoid errors about duplicated objects) ;  ; template<class T > ; void HandlePoolCode (MPCodeBufPair &msg, TSocket *sender, std::vector< T > &reslist);  Handle message and reply to the worker. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TTreeProcessorMP's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nM",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:9475,Integrability,message,message,9475,"reeProcessorMP can execute. More...;  ; template<typename F , typename... Args> ; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  . Private Member Functions; template<class T > ; void Collect (std::vector< T > &reslist);  Listen for messages sent by the workers and call the appropriate handler function. ;  ; void FixLists (std::vector< TObject * > &lists);  Fix list of lists before merging (to avoid errors about duplicated objects) ;  ; template<class T > ; void HandlePoolCode (MPCodeBufPair &msg, TSocket *sender, std::vector< T > &reslist);  Handle message and reply to the worker. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TTreeProcessorMP's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  W",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:9627,Integrability,message,message,9627,">;  . Private Member Functions; template<class T > ; void Collect (std::vector< T > &reslist);  Listen for messages sent by the workers and call the appropriate handler function. ;  ; void FixLists (std::vector< TObject * > &lists);  Fix list of lists before merging (to avoid errors about duplicated objects) ;  ; template<class T > ; void HandlePoolCode (MPCodeBufPair &msg, TSocket *sender, std::vector< T > &reslist);  Handle message and reply to the worker. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TTreeProcessorMP's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void Se",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:9774,Integrability,message,message,9774,"ction. ;  ; void FixLists (std::vector< TObject * > &lists);  Fix list of lists before merging (to avoid errors about duplicated objects) ;  ; template<class T > ; void HandlePoolCode (MPCodeBufPair &msg, TSocket *sender, std::vector< T > &reslist);  Handle message and reply to the worker. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TTreeProcessorMP's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void SetNWorkers (unsigned n);  Set the number of workers that will be spawned by the next call to Fork() ;  . Private Attributes; unsigned fNProcessed;  number of arguments alrea",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:9938,Integrability,message,message,9938,"; void HandlePoolCode (MPCodeBufPair &msg, TSocket *sender, std::vector< T > &reslist);  Handle message and reply to the worker. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TTreeProcessorMP's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void SetNWorkers (unsigned n);  Set the number of workers that will be spawned by the next call to Fork() ;  . Private Attributes; unsigned fNProcessed;  number of arguments already passed to the workers ;  ; unsigned fNToProcess;  total number of arguments to pass to the workers ;  ; ETask fTaskType = ETask::kNoTask;  the kind of task that",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:10335,Integrability,message,messages,10335,")=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers () const;  ; void HandleMPCode (MPCodeBufPair &msg, TSocket *sender);  Handle messages containing an EMPCode. ;  ; TMPClient & operator= (const TMPClient &)=delete;  ; void ReapWorkers ();  Wait on worker processes and remove their pids from fWorkerPids. ;  ; void Remove (TSocket *s);  Remove a certain socket from the monitor. ;  ; void SetNWorkers (unsigned n);  Set the number of workers that will be spawned by the next call to Fork() ;  . Private Attributes; unsigned fNProcessed;  number of arguments already passed to the workers ;  ; unsigned fNToProcess;  total number of arguments to pass to the workers ;  ; ETask fTaskType = ETask::kNoTask;  the kind of task that is being executed, if any ;  . #include <ROOT/TTreeProcessorMP.hxx>. Inheritance diagram for ROOT::TTreeProcessorMP:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ InvokeResult_t. template<typename F , typename... Args> . using ROOT::TTreeProcessorMP::I",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:11649,Integrability,message,messages,11649," that will be spawned by the next call to Fork() ;  . Private Attributes; unsigned fNProcessed;  number of arguments already passed to the workers ;  ; unsigned fNToProcess;  total number of arguments to pass to the workers ;  ; ETask fTaskType = ETask::kNoTask;  the kind of task that is being executed, if any ;  . #include <ROOT/TTreeProcessorMP.hxx>. Inheritance diagram for ROOT::TTreeProcessorMP:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ InvokeResult_t. template<typename F , typename... Args> . using ROOT::TTreeProcessorMP::InvokeResult_t = ROOT::TypeTraits::InvokeResult_t<F, Args...>. private . Definition at line 40 of file TTreeProcessorMP.hxx. Member Enumeration Documentation. ◆ ETask. enum class ROOT::TTreeProcessorMP::ETask : unsigned char. strongprivate . A collection of the types of tasks that TTreeProcessorMP can execute. ; It is used to interpret in the right way and properly reply to the messages received (see, for example, TTreeProcessorMP::HandleInput) . EnumeratorkNoTask no task is being executed . kProcByRange a Process method is being executed and each worker will process a certain range of each file . kProcByFile a Process method is being executed and each worker will process a different file . Definition at line 182 of file TTreeProcessorMP.hxx. Constructor & Destructor Documentation. ◆ TTreeProcessorMP() [1/2]. ROOT::TTreeProcessorMP::TTreeProcessorMP ; (; UInt_t ; nWorkers = 0). explicit . Class constructor. ; nWorkers is the number of times this ROOT session will be forked, i.e. the number of workers that will be spawned. ; Definition at line 90 of file TTreeProcessorMP.cxx. ◆ ~TTreeProcessorMP(). ROOT::TTreeProcessorMP::~TTreeProcessorMP ; (; ). default . ◆ TTreeProcessorMP() [2/2]. ROOT::TTreeProcessorMP::TTreeProcessorMP ; (; const TTreeProcessorMP & ; ). delete . Member Function Documentation. ◆ Collect(). template<class T > . void ROOT::TTreeProcessorMP:",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:12715,Integrability,message,messages,12715," is being executed . kProcByRange a Process method is being executed and each worker will process a certain range of each file . kProcByFile a Process method is being executed and each worker will process a different file . Definition at line 182 of file TTreeProcessorMP.hxx. Constructor & Destructor Documentation. ◆ TTreeProcessorMP() [1/2]. ROOT::TTreeProcessorMP::TTreeProcessorMP ; (; UInt_t ; nWorkers = 0). explicit . Class constructor. ; nWorkers is the number of times this ROOT session will be forked, i.e. the number of workers that will be spawned. ; Definition at line 90 of file TTreeProcessorMP.cxx. ◆ ~TTreeProcessorMP(). ROOT::TTreeProcessorMP::~TTreeProcessorMP ; (; ). default . ◆ TTreeProcessorMP() [2/2]. ROOT::TTreeProcessorMP::TTreeProcessorMP ; (; const TTreeProcessorMP & ; ). delete . Member Function Documentation. ◆ Collect(). template<class T > . void ROOT::TTreeProcessorMP::Collect ; (; std::vector< T > & ; reslist). private . Listen for messages sent by the workers and call the appropriate handler function. ; TTreeProcessorMP::HandlePoolCode is called on messages with a code < 1000 and TMPClient::HandleMPCode is called on messages with a code >= 1000. ; Definition at line 433 of file TTreeProcessorMP.hxx. ◆ FixLists(). void ROOT::TTreeProcessorMP::FixLists ; (; std::vector< TObject * > & ; lists). private . Fix list of lists before merging (to avoid errors about duplicated objects) ; Definition at line 324 of file TTreeProcessorMP.cxx. ◆ GetNWorkers(). unsigned ROOT::TTreeProcessorMP::GetNWorkers ; (; ); const. inline . Definition at line 166 of file TTreeProcessorMP.hxx. ◆ HandlePoolCode(). template<class T > . void ROOT::TTreeProcessorMP::HandlePoolCode ; (; MPCodeBufPair & ; msg, . TSocket * ; sender, . std::vector< T > & ; reslist . ). private . Handle message and reply to the worker. ; Definition at line 407 of file TTreeProcessorMP.hxx. ◆ operator=(). TTreeProcessorMP & ROOT::TTreeProcessorMP::operator= ; (; const TTreeProcessorMP & ; ). del",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:12835,Integrability,message,messages,12835,"f each file . kProcByFile a Process method is being executed and each worker will process a different file . Definition at line 182 of file TTreeProcessorMP.hxx. Constructor & Destructor Documentation. ◆ TTreeProcessorMP() [1/2]. ROOT::TTreeProcessorMP::TTreeProcessorMP ; (; UInt_t ; nWorkers = 0). explicit . Class constructor. ; nWorkers is the number of times this ROOT session will be forked, i.e. the number of workers that will be spawned. ; Definition at line 90 of file TTreeProcessorMP.cxx. ◆ ~TTreeProcessorMP(). ROOT::TTreeProcessorMP::~TTreeProcessorMP ; (; ). default . ◆ TTreeProcessorMP() [2/2]. ROOT::TTreeProcessorMP::TTreeProcessorMP ; (; const TTreeProcessorMP & ; ). delete . Member Function Documentation. ◆ Collect(). template<class T > . void ROOT::TTreeProcessorMP::Collect ; (; std::vector< T > & ; reslist). private . Listen for messages sent by the workers and call the appropriate handler function. ; TTreeProcessorMP::HandlePoolCode is called on messages with a code < 1000 and TMPClient::HandleMPCode is called on messages with a code >= 1000. ; Definition at line 433 of file TTreeProcessorMP.hxx. ◆ FixLists(). void ROOT::TTreeProcessorMP::FixLists ; (; std::vector< TObject * > & ; lists). private . Fix list of lists before merging (to avoid errors about duplicated objects) ; Definition at line 324 of file TTreeProcessorMP.cxx. ◆ GetNWorkers(). unsigned ROOT::TTreeProcessorMP::GetNWorkers ; (; ); const. inline . Definition at line 166 of file TTreeProcessorMP.hxx. ◆ HandlePoolCode(). template<class T > . void ROOT::TTreeProcessorMP::HandlePoolCode ; (; MPCodeBufPair & ; msg, . TSocket * ; sender, . std::vector< T > & ; reslist . ). private . Handle message and reply to the worker. ; Definition at line 407 of file TTreeProcessorMP.hxx. ◆ operator=(). TTreeProcessorMP & ROOT::TTreeProcessorMP::operator= ; (; const TTreeProcessorMP & ; ). delete . ◆ Process() [1/20]. template<class F > . auto ROOT::TTreeProcessorMP::Process ; (; const std::string & ; file",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:12904,Integrability,message,messages,12904,"f each file . kProcByFile a Process method is being executed and each worker will process a different file . Definition at line 182 of file TTreeProcessorMP.hxx. Constructor & Destructor Documentation. ◆ TTreeProcessorMP() [1/2]. ROOT::TTreeProcessorMP::TTreeProcessorMP ; (; UInt_t ; nWorkers = 0). explicit . Class constructor. ; nWorkers is the number of times this ROOT session will be forked, i.e. the number of workers that will be spawned. ; Definition at line 90 of file TTreeProcessorMP.cxx. ◆ ~TTreeProcessorMP(). ROOT::TTreeProcessorMP::~TTreeProcessorMP ; (; ). default . ◆ TTreeProcessorMP() [2/2]. ROOT::TTreeProcessorMP::TTreeProcessorMP ; (; const TTreeProcessorMP & ; ). delete . Member Function Documentation. ◆ Collect(). template<class T > . void ROOT::TTreeProcessorMP::Collect ; (; std::vector< T > & ; reslist). private . Listen for messages sent by the workers and call the appropriate handler function. ; TTreeProcessorMP::HandlePoolCode is called on messages with a code < 1000 and TMPClient::HandleMPCode is called on messages with a code >= 1000. ; Definition at line 433 of file TTreeProcessorMP.hxx. ◆ FixLists(). void ROOT::TTreeProcessorMP::FixLists ; (; std::vector< TObject * > & ; lists). private . Fix list of lists before merging (to avoid errors about duplicated objects) ; Definition at line 324 of file TTreeProcessorMP.cxx. ◆ GetNWorkers(). unsigned ROOT::TTreeProcessorMP::GetNWorkers ; (; ); const. inline . Definition at line 166 of file TTreeProcessorMP.hxx. ◆ HandlePoolCode(). template<class T > . void ROOT::TTreeProcessorMP::HandlePoolCode ; (; MPCodeBufPair & ; msg, . TSocket * ; sender, . std::vector< T > & ; reslist . ). private . Handle message and reply to the worker. ; Definition at line 407 of file TTreeProcessorMP.hxx. ◆ operator=(). TTreeProcessorMP & ROOT::TTreeProcessorMP::operator= ; (; const TTreeProcessorMP & ; ). delete . ◆ Process() [1/20]. template<class F > . auto ROOT::TTreeProcessorMP::Process ; (; const std::string & ; file",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:13551,Integrability,message,message,13551,"Function Documentation. ◆ Collect(). template<class T > . void ROOT::TTreeProcessorMP::Collect ; (; std::vector< T > & ; reslist). private . Listen for messages sent by the workers and call the appropriate handler function. ; TTreeProcessorMP::HandlePoolCode is called on messages with a code < 1000 and TMPClient::HandleMPCode is called on messages with a code >= 1000. ; Definition at line 433 of file TTreeProcessorMP.hxx. ◆ FixLists(). void ROOT::TTreeProcessorMP::FixLists ; (; std::vector< TObject * > & ; lists). private . Fix list of lists before merging (to avoid errors about duplicated objects) ; Definition at line 324 of file TTreeProcessorMP.cxx. ◆ GetNWorkers(). unsigned ROOT::TTreeProcessorMP::GetNWorkers ; (; ); const. inline . Definition at line 166 of file TTreeProcessorMP.hxx. ◆ HandlePoolCode(). template<class T > . void ROOT::TTreeProcessorMP::HandlePoolCode ; (; MPCodeBufPair & ; msg, . TSocket * ; sender, . std::vector< T > & ; reslist . ). private . Handle message and reply to the worker. ; Definition at line 407 of file TTreeProcessorMP.hxx. ◆ operator=(). TTreeProcessorMP & ROOT::TTreeProcessorMP::operator= ; (; const TTreeProcessorMP & ; ). delete . ◆ Process() [1/20]. template<class F > . auto ROOT::TTreeProcessorMP::Process ; (; const std::string & ; fileName, . F ; procFunc, . const std::string & ; treeName = """", . ULong64_t ; nToProcess = 0, . ULong64_t ; jFirst = 0 . ); -> InvokeResult_t<F, std::reference_wrapper<TTreeReader>>. Definition at line 366 of file TTreeProcessorMP.hxx. ◆ Process() [2/20]. template<class F > . auto ROOT::TTreeProcessorMP::Process ; (; const std::string & ; fileName, . F ; procFunc, . TEntryList & ; entries, . const std::string & ; treeName = """", . ULong64_t ; nToProcess = 0, . ULong64_t ; jFirst = 0 . ); -> InvokeResult_t<F, std::reference_wrapper<TTreeReader>>. Definition at line 259 of file TTreeProcessorMP.hxx. ◆ Process() [3/20]. TList * ROOT::TTreeProcessorMP::Process ; (; const std::string & ; fileName, . TSe",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:9213,Modifiability,inherit,inherited,9213,"g64_t jFirst=0);  ; void SetNWorkers (unsigned n);  . Private Types; enum class  ETask : unsigned char { kNoTask; , kProcByRange; , kProcByFile; };  A collection of the types of tasks that TTreeProcessorMP can execute. More...;  ; template<typename F , typename... Args> ; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  . Private Member Functions; template<class T > ; void Collect (std::vector< T > &reslist);  Listen for messages sent by the workers and call the appropriate handler function. ;  ; void FixLists (std::vector< TObject * > &lists);  Fix list of lists before merging (to avoid errors about duplicated objects) ;  ; template<class T > ; void HandlePoolCode (MPCodeBufPair &msg, TSocket *sender, std::vector< T > &reslist);  Handle message and reply to the worker. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TTreeProcessorMP's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nMessages=0);  Send a message with the specified code to at most nMessages workers. ;  ; void DeActivate (TSocket *s);  DeActivate a certain socket. ;  ; bool Fork (TMPWorker &server);  This method forks the ROOT session into fNWorkers children processes. ;  ; bool GetIsParent () const;  ; TMonitor & GetMonitor ();  ; unsigned GetNWorkers (",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:15583,Modifiability,inherit,inheriting,15583,"ring & ; treeName = """", . ULong64_t ; nToProcess = 0, . ULong64_t ; jFirst = 0 . ). Definition at line 296 of file TTreeProcessorMP.cxx. ◆ Process() [4/20]. TList * ROOT::TTreeProcessorMP::Process ; (; const std::string & ; fileName, . TSelector & ; selector, . TEntryList & ; entries, . const std::string & ; treeName = """", . ULong64_t ; nToProcess = 0, . ULong64_t ; jFirst = 0 . ). TSelector-based tree processing: dataset as a single file. ; Definition at line 278 of file TTreeProcessorMP.cxx. ◆ Process() [5/20]. template<class F > . auto ROOT::TTreeProcessorMP::Process ; (; const std::vector< std::string > & ; fileNames, . F ; procFunc, . const std::string & ; treeName = """", . ULong64_t ; nToProcess = 0, . ULong64_t ; jFirst = 0 . ); -> InvokeResult_t<F, std::reference_wrapper<TTreeReader>>. Process a TTree dataset with a functor: version without entry list. ; No TEntryList versions of generic processor.; Template Parameters. Ffunctor returning a pointer to TObject or inheriting classes and taking a TTreeReader& (both enforced at compile-time). Dataset definition: Parameters. [in]fileNamesvector of strings with the paths of the files with the TTree to process ; [in]fileNamestring with the path of the files with the TTree to process ; [in]collectionTFileCollection with the files with the TTree to process ; [in]chainTChain with the files with the TTree to process ; [in]treeTTree to process; [in]treeNameName of the TTree to process ; [in]nToProcessNumber of entries to process (0 means all) ; [in]jFirstFirst entry to process (0 means the first of the first file) . Definition at line 356 of file TTreeProcessorMP.hxx. ◆ Process() [6/20]. template<class F > . auto ROOT::TTreeProcessorMP::Process ; (; const std::vector< std::string > & ; fileNames, . F ; procFunc, . TEntryList & ; entries, . const std::string & ; treeName = """", . ULong64_t ; nToProcess = 0, . ULong64_t ; jFirst = 0 . ); -> InvokeResult_t<F, std::reference_wrapper<TTreeReader>>. Process a TTree dataset with ",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:16677,Modifiability,inherit,inheriting,16677,"[in]fileNamesvector of strings with the paths of the files with the TTree to process ; [in]fileNamestring with the path of the files with the TTree to process ; [in]collectionTFileCollection with the files with the TTree to process ; [in]chainTChain with the files with the TTree to process ; [in]treeTTree to process; [in]treeNameName of the TTree to process ; [in]nToProcessNumber of entries to process (0 means all) ; [in]jFirstFirst entry to process (0 means the first of the first file) . Definition at line 356 of file TTreeProcessorMP.hxx. ◆ Process() [6/20]. template<class F > . auto ROOT::TTreeProcessorMP::Process ; (; const std::vector< std::string > & ; fileNames, . F ; procFunc, . TEntryList & ; entries, . const std::string & ; treeName = """", . ULong64_t ; nToProcess = 0, . ULong64_t ; jFirst = 0 . ); -> InvokeResult_t<F, std::reference_wrapper<TTreeReader>>. Process a TTree dataset with a functor. ; Template Parameters. Ffunctor returning a pointer to TObject or inheriting classes and taking a TTreeReader& (both enforced at compile-time). Dataset definition: Parameters. [in]fileNamesvector of strings with the paths of the files with the TTree to process ; [in]fileNamestring with the path of the files with the TTree to process ; [in]collectionTFileCollection with the files with the TTree to process ; [in]chainTChain with the files with the TTree to process ; [in]treeTTree to process; [in]entriesTEntryList to filter the dataset ; [in]treeNameName of the TTree to process ; [in]nToProcessNumber of entries to process (0 means all) ; [in]jFirstFirst entry to process (0 means the first of the first file) . Definition at line 192 of file TTreeProcessorMP.hxx. ◆ Process() [7/20]. TList * ROOT::TTreeProcessorMP::Process ; (; const std::vector< std::string > & ; fileNames, . TSelector & ; selector, . const std::string & ; treeName = """", . ULong64_t ; nToProcess = 0, . ULong64_t ; jFirst = 0 . ). Process a TTree dataset with a selector: version without entry list. ; No TE",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:2581,Performance,load,loaded,2581,"_t nToProcess): where selector is a TSelector derived class describing the analysis and the other arguments have the same meaning as above. For either set of signatures, the processing function is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TTreeProcessorMP never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TTreeProcessorMP::Process is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Process will outrun the benefits of parallel execution on most machines.; Parameters. funca lambda expression, an std::function, a loaded macro, a functor class or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard container (vector, list, deque), an initializer list or a pointer to a TCollection (TList*, TObjArray*, ...). . Note: the version of ROOT::TTreeProcessorMP::Process that takes a TFileCollection* as argument incurs in the overhead of copying data from the TCollection to an STL container. Only use it when absolutely necessary.; Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/one, the function can be wrapped in a lambda or via std::bind to give it the right signature.; Note: the user should take care of initializing random seeds differently in each process (e.g. using the process id in the seed). Otherwise several parallel executions might generate the same sequence of pseudo-random numbers.; Return value:; Methods taking 'F func' return the return type of F. Methods taking a TSelector return a 'TList *' with the selecto",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:8869,Safety,avoid,avoid,8869,"g64_t jFirst=0) -> InvokeResult_t< F, std::reference_wrapper< TTreeReader > >;  ; TList * Process (TTree &tree, TSelector &selector, TEntryList &entries, ULong64_t nToProcess=0, ULong64_t jFirst=0);  TSelector-based tree processing: memory resident tree. ;  ; TList * Process (TTree &tree, TSelector &selector, ULong64_t nToProcess=0, ULong64_t jFirst=0);  ; void SetNWorkers (unsigned n);  . Private Types; enum class  ETask : unsigned char { kNoTask; , kProcByRange; , kProcByFile; };  A collection of the types of tasks that TTreeProcessorMP can execute. More...;  ; template<typename F , typename... Args> ; using InvokeResult_t = ROOT::TypeTraits::InvokeResult_t< F, Args... >;  . Private Member Functions; template<class T > ; void Collect (std::vector< T > &reslist);  Listen for messages sent by the workers and call the appropriate handler function. ;  ; void FixLists (std::vector< TObject * > &lists);  Fix list of lists before merging (to avoid errors about duplicated objects) ;  ; template<class T > ; void HandlePoolCode (MPCodeBufPair &msg, TSocket *sender, std::vector< T > &reslist);  Handle message and reply to the worker. ;  ; void ReplyToIdle (TSocket *s);  Reply to a worker who is idle. ;  ; void Reset ();  Reset TTreeProcessorMP's state. ;  ;  Private Member Functions inherited from TMPClient;  TMPClient (const TMPClient &)=delete;  ;  TMPClient (unsigned nWorkers=0);  Class constructor. ;  ;  ~TMPClient ();  Class destructor. ;  ; template<class T > ; unsigned Broadcast (unsigned code, const std::vector< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, std::initializer_list< T > &objs);  Send a message with a different object to each server. ;  ; template<class T > ; unsigned Broadcast (unsigned code, T obj, unsigned nMessages=0);  Send a message containing code and obj to each worker, up to a maximum number of nMessages workers. ;  ; unsigned Broadcast (unsigned code, unsigned nM",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:13130,Safety,avoid,avoid,13130,"0). explicit . Class constructor. ; nWorkers is the number of times this ROOT session will be forked, i.e. the number of workers that will be spawned. ; Definition at line 90 of file TTreeProcessorMP.cxx. ◆ ~TTreeProcessorMP(). ROOT::TTreeProcessorMP::~TTreeProcessorMP ; (; ). default . ◆ TTreeProcessorMP() [2/2]. ROOT::TTreeProcessorMP::TTreeProcessorMP ; (; const TTreeProcessorMP & ; ). delete . Member Function Documentation. ◆ Collect(). template<class T > . void ROOT::TTreeProcessorMP::Collect ; (; std::vector< T > & ; reslist). private . Listen for messages sent by the workers and call the appropriate handler function. ; TTreeProcessorMP::HandlePoolCode is called on messages with a code < 1000 and TMPClient::HandleMPCode is called on messages with a code >= 1000. ; Definition at line 433 of file TTreeProcessorMP.hxx. ◆ FixLists(). void ROOT::TTreeProcessorMP::FixLists ; (; std::vector< TObject * > & ; lists). private . Fix list of lists before merging (to avoid errors about duplicated objects) ; Definition at line 324 of file TTreeProcessorMP.cxx. ◆ GetNWorkers(). unsigned ROOT::TTreeProcessorMP::GetNWorkers ; (; ); const. inline . Definition at line 166 of file TTreeProcessorMP.hxx. ◆ HandlePoolCode(). template<class T > . void ROOT::TTreeProcessorMP::HandlePoolCode ; (; MPCodeBufPair & ; msg, . TSocket * ; sender, . std::vector< T > & ; reslist . ). private . Handle message and reply to the worker. ; Definition at line 407 of file TTreeProcessorMP.hxx. ◆ operator=(). TTreeProcessorMP & ROOT::TTreeProcessorMP::operator= ; (; const TTreeProcessorMP & ; ). delete . ◆ Process() [1/20]. template<class F > . auto ROOT::TTreeProcessorMP::Process ; (; const std::string & ; fileName, . F ; procFunc, . const std::string & ; treeName = """", . ULong64_t ; nToProcess = 0, . ULong64_t ; jFirst = 0 . ); -> InvokeResult_t<F, std::reference_wrapper<TTreeReader>>. Definition at line 366 of file TTreeProcessorMP.hxx. ◆ Process() [2/20]. template<class F > . auto ROOT::TTreeProces",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html:2259,Usability,simpl,simply,2259,"TChain.h:33; TFileCollectionClass that contains a list of TFileInfo's and accumulated meta data information about its entries.Definition TFileCollection.h:39; TFileInfoClass describing a generic file including meta information.Definition TFileInfo.h:39; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; For legacy, the following signature is also supported:; Process(<dataset>, TSelector& selector, const std::string& treeName, ULong64_t nToProcess): where selector is a TSelector derived class describing the analysis and the other arguments have the same meaning as above. For either set of signatures, the processing function is executed as many times as needed by a pool of fNWorkers workers; the number of workers can be passed to the constructor or set via SetNWorkers. It defaults to the number of cores.; A collection containing the result of each execution is returned.; Note: the user is responsible for the deletion of any object that might be created upon execution of func, returned objects included: ROOT::TTreeProcessorMP never deletes what it returns, it simply forgets it.; Note: that the usage of ROOT::TTreeProcessorMP::Process is indicated only when the task to be executed takes more than a few seconds, otherwise the overhead introduced by Process will outrun the benefits of parallel execution on most machines.; Parameters. funca lambda expression, an std::function, a loaded macro, a functor class or a function that takes zero arguments (for the first signature) or one (for the second signature). ; argsa standard container (vector, list, deque), an initializer list or a pointer to a TCollection (TList*, TObjArray*, ...). . Note: the version of ROOT::TTreeProcessorMP::Process that takes a TFileCollection* as argument incurs in the overhead of copying data from the TCollection to an STL container. Only use it when absolutely necessary.; Note: in cases where the function to be executed takes more than zero/one argument but all are fixed except zero/on",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMP.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMP.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html:6216,Availability,robust,robust,6216,"nition at line 328 of file TTreeProcessorMT.cxx. ◆ GetTasksPerWorkerHint(). unsigned int TTreeProcessorMT::GetTasksPerWorkerHint ; (; ). static . Retrieve the current value for the desired number of tasks per worker. ; ReturnsThe desired number of tasks to be created per worker. TTreeProcessorMT uses this value as an hint. ; Definition at line 528 of file TTreeProcessorMT.cxx. ◆ Process(). void TTreeProcessorMT::Process ; (; std::function< void(TTreeReader &)> ; func). Process the entries of a TTree in parallel. ; The user-provided function receives a TTreeReader which can be used to iterate on a subrange of entries TTreeProcessorMT::Process([](TTreeReader& readerSubRange) {; // Select branches to read; while (readerSubRange.Next()) {; // Use content of current entry; }; });; ROOT::TTreeProcessorMT::Processvoid Process(std::function< void(TTreeReader &)> func)Process the entries of a TTree in parallel.Definition TTreeProcessorMT.cxx:454; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:44; TTreeReader::Nextbool Next()Move to the next entry (or index of the TEntryList if that is set).Definition TTreeReader.h:209; The user needs to be aware that each of the subranges can potentially be processed in parallel. This means that the code of the user function should be thread safe.; Parameters. [in]funcUser-defined function that processes a subrange of entries . Definition at line 454 of file TTreeProcessorMT.cxx. ◆ SetTasksPerWorkerHint(). void TTreeProcessorMT::SetTasksPerWorkerHint ; (; unsigned int ; tasksPerWorkerHint). static . Set the hint for the desired number of tasks created per worker. ; Parameters. [in]tasksPerWorkerHintDesired number of tasks per worker. This allows to create a reasonable number of tasks even if any of the processed files features a bad clustering, for example with a lot of entries and just a few entries per cluster, or to limit the number of tasks spawned when ",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html:6232,Integrability,interface,interface,6232,"nition at line 328 of file TTreeProcessorMT.cxx. ◆ GetTasksPerWorkerHint(). unsigned int TTreeProcessorMT::GetTasksPerWorkerHint ; (; ). static . Retrieve the current value for the desired number of tasks per worker. ; ReturnsThe desired number of tasks to be created per worker. TTreeProcessorMT uses this value as an hint. ; Definition at line 528 of file TTreeProcessorMT.cxx. ◆ Process(). void TTreeProcessorMT::Process ; (; std::function< void(TTreeReader &)> ; func). Process the entries of a TTree in parallel. ; The user-provided function receives a TTreeReader which can be used to iterate on a subrange of entries TTreeProcessorMT::Process([](TTreeReader& readerSubRange) {; // Select branches to read; while (readerSubRange.Next()) {; // Use content of current entry; }; });; ROOT::TTreeProcessorMT::Processvoid Process(std::function< void(TTreeReader &)> func)Process the entries of a TTree in parallel.Definition TTreeProcessorMT.cxx:454; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:44; TTreeReader::Nextbool Next()Move to the next entry (or index of the TEntryList if that is set).Definition TTreeReader.h:209; The user needs to be aware that each of the subranges can potentially be processed in parallel. This means that the code of the user function should be thread safe.; Parameters. [in]funcUser-defined function that processes a subrange of entries . Definition at line 454 of file TTreeProcessorMT.cxx. ◆ SetTasksPerWorkerHint(). void TTreeProcessorMT::SetTasksPerWorkerHint ; (; unsigned int ; tasksPerWorkerHint). static . Set the hint for the desired number of tasks created per worker. ; Parameters. [in]tasksPerWorkerHintDesired number of tasks per worker. This allows to create a reasonable number of tasks even if any of the processed files features a bad clustering, for example with a lot of entries and just a few entries per cluster, or to limit the number of tasks spawned when ",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html:6615,Safety,safe,safe,6615,"ine 528 of file TTreeProcessorMT.cxx. ◆ Process(). void TTreeProcessorMT::Process ; (; std::function< void(TTreeReader &)> ; func). Process the entries of a TTree in parallel. ; The user-provided function receives a TTreeReader which can be used to iterate on a subrange of entries TTreeProcessorMT::Process([](TTreeReader& readerSubRange) {; // Select branches to read; while (readerSubRange.Next()) {; // Use content of current entry; }; });; ROOT::TTreeProcessorMT::Processvoid Process(std::function< void(TTreeReader &)> func)Process the entries of a TTree in parallel.Definition TTreeProcessorMT.cxx:454; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:44; TTreeReader::Nextbool Next()Move to the next entry (or index of the TEntryList if that is set).Definition TTreeReader.h:209; The user needs to be aware that each of the subranges can potentially be processed in parallel. This means that the code of the user function should be thread safe.; Parameters. [in]funcUser-defined function that processes a subrange of entries . Definition at line 454 of file TTreeProcessorMT.cxx. ◆ SetTasksPerWorkerHint(). void TTreeProcessorMT::SetTasksPerWorkerHint ; (; unsigned int ; tasksPerWorkerHint). static . Set the hint for the desired number of tasks created per worker. ; Parameters. [in]tasksPerWorkerHintDesired number of tasks per worker. This allows to create a reasonable number of tasks even if any of the processed files features a bad clustering, for example with a lot of entries and just a few entries per cluster, or to limit the number of tasks spawned when a very large number of files and workers is used. ; Definition at line 541 of file TTreeProcessorMT.cxx. Member Data Documentation. ◆ fEntryList. TEntryList ROOT::TTreeProcessorMT::fEntryList. private . User-defined selection of entry numbers to be processed, empty if none was provided. ; Definition at line 84 of file TTreeProcessorMT.hxx. ◆",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html
https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html:6208,Usability,simpl,simple,6208,"nition at line 328 of file TTreeProcessorMT.cxx. ◆ GetTasksPerWorkerHint(). unsigned int TTreeProcessorMT::GetTasksPerWorkerHint ; (; ). static . Retrieve the current value for the desired number of tasks per worker. ; ReturnsThe desired number of tasks to be created per worker. TTreeProcessorMT uses this value as an hint. ; Definition at line 528 of file TTreeProcessorMT.cxx. ◆ Process(). void TTreeProcessorMT::Process ; (; std::function< void(TTreeReader &)> ; func). Process the entries of a TTree in parallel. ; The user-provided function receives a TTreeReader which can be used to iterate on a subrange of entries TTreeProcessorMT::Process([](TTreeReader& readerSubRange) {; // Select branches to read; while (readerSubRange.Next()) {; // Use content of current entry; }; });; ROOT::TTreeProcessorMT::Processvoid Process(std::function< void(TTreeReader &)> func)Process the entries of a TTree in parallel.Definition TTreeProcessorMT.cxx:454; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:44; TTreeReader::Nextbool Next()Move to the next entry (or index of the TEntryList if that is set).Definition TTreeReader.h:209; The user needs to be aware that each of the subranges can potentially be processed in parallel. This means that the code of the user function should be thread safe.; Parameters. [in]funcUser-defined function that processes a subrange of entries . Definition at line 454 of file TTreeProcessorMT.cxx. ◆ SetTasksPerWorkerHint(). void TTreeProcessorMT::SetTasksPerWorkerHint ; (; unsigned int ; tasksPerWorkerHint). static . Set the hint for the desired number of tasks created per worker. ; Parameters. [in]tasksPerWorkerHintDesired number of tasks per worker. This allows to create a reasonable number of tasks even if any of the processed files features a bad clustering, for example with a lot of entries and just a few entries per cluster, or to limit the number of tasks spawned when ",MatchSource.WIKI,doc/v632/classROOT_1_1TTreeProcessorMT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TTreeProcessorMT.html
https://root.cern/doc/v632/classROOT_1_1TVirtualRWMutex.html:1306,Modifiability,inherit,inherited,1306,"; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; List of all members ; ROOT::TVirtualRWMutex Class Referenceabstract. . Definition at line 39 of file TVirtualRWMutex.h. Classes; class  State;  Earlier lock state as returned by GetState() that can be passed to Restore() More...;  ; struct  StateAndRecurseCount;  ; class  StateDelta;  State as returned by GetStateDelta() that can be passed to Restore() More...;  . Public Member Functions; virtual void Apply (std::unique_ptr< StateDelta > &&delta)=0;  ; Int_t CleanUp () override;  ; TVirtualRWMutex * Factory (Bool_t=kFALSE) override=0;  ; virtual std::unique_ptr< State > GetStateBefore ()=0;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; virtual Hint_t * ReadLock ()=0;  ; virtual void ReadUnLock (Hint_t *)=0;  ; virtual std::unique_ptr< StateDelta > Rewind (const State &earlierState)=0;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ; virtual Hint_t * WriteLock ()=0;  ; virtual void WriteUnLock (Hint_t *)=0;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TVirtualRWMutex.h>. Inheritance diagram for ROOT::TVirtualRWMutex:. This browser is not able to show SVG: try Firefox, Chrome,",MatchSource.WIKI,doc/v632/classROOT_1_1TVirtualRWMutex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TVirtualRWMutex.html
https://root.cern/doc/v632/classROOT_1_1TVirtualRWMutex.html:1727,Modifiability,inherit,inherited,1727,"TVirtualRWMutex * Factory (Bool_t=kFALSE) override=0;  ; virtual std::unique_ptr< State > GetStateBefore ()=0;  ; TClass * IsA () const override;  ; Int_t Lock () override;  ; virtual Hint_t * ReadLock ()=0;  ; virtual void ReadUnLock (Hint_t *)=0;  ; virtual std::unique_ptr< StateDelta > Rewind (const State &earlierState)=0;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  ; Int_t UnLock () override;  ; virtual Hint_t * WriteLock ()=0;  ; virtual void WriteUnLock (Hint_t *)=0;  ;  Public Member Functions inherited from TVirtualMutex;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; Int_t Release ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TVirtualMutex; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TVirtualRWMutex.h>. Inheritance diagram for ROOT::TVirtualRWMutex:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ Apply(). virtual void ROOT::TVirtualRWMutex::Apply ; (; std::unique_ptr< StateDelta > && ; delta). pure virtual . Implemented in ROOT::TRWMutexImp< MutexT, RecurseCountsT >. ◆ Class(). static TClass * ROOT::TVirtualRWMutex::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::TVirtualRWMutex::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::TVirtualRWMutex::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 90 of file TVirtualRWMute",MatchSource.WIKI,doc/v632/classROOT_1_1TVirtualRWMutex.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TVirtualRWMutex.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:963,Availability,avail,available,963,". ROOT: ROOT::VecOps::RVec< T > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Types |; Friends |; List of all members ; ROOT::VecOps::RVec< T > Class Template ReferenceVecOps. ; template<typename T>; class ROOT::VecOps::RVec< T >A ""std::vector""-like collection of values implementing handy operation to analyse them. ; Template Parameters. TThe type of the contained objects. A RVec is a container designed to make analysis of values' collections fast and easy. Its storage is contiguous in memory and its interface is designed such to resemble to the one of the stl vector. In addition the interface features methods and external functions to ease the manipulation and analysis of the data in the RVec.; NoteROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; RVecB (bool); RVecC (char); RVecD (double); RVecF (float); RVecI (int); RVecL (long); RVecLL (long long); RVecU (unsigned); RVecUL (unsigned long); RVecULL (unsigned long long). RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or other operations will be propagated potentially leaving the RVec object in an invalid state. RVec methods (e.g. at or size) follow the STL naming convention instead of the ROOT naming convention in order to make RVec a drop-in replacement for std::vector. Table of Contents. Example; Arithmetic operations, logical operations and mathematical functions; Owning and adopting memory; Sorting and manipulation of indices; Usage in combination with RDataFrame; Reference for the RVec class; Reference for RVec helper functions. Example; Suppose to have an event featuring a collection of muons with a certain pseudorapidity, momentum and charge, ",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:1047,Availability,avail,available,1047,". List of all members |; Public Types |; Public Member Functions |; Private Types |; Friends |; List of all members ; ROOT::VecOps::RVec< T > Class Template ReferenceVecOps. ; template<typename T>; class ROOT::VecOps::RVec< T >A ""std::vector""-like collection of values implementing handy operation to analyse them. ; Template Parameters. TThe type of the contained objects. A RVec is a container designed to make analysis of values' collections fast and easy. Its storage is contiguous in memory and its interface is designed such to resemble to the one of the stl vector. In addition the interface features methods and external functions to ease the manipulation and analysis of the data in the RVec.; NoteROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; RVecB (bool); RVecC (char); RVecD (double); RVecF (float); RVecI (int); RVecL (long); RVecLL (long long); RVecU (unsigned); RVecUL (unsigned long); RVecULL (unsigned long long). RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or other operations will be propagated potentially leaving the RVec object in an invalid state. RVec methods (e.g. at or size) follow the STL naming convention instead of the ROOT naming convention in order to make RVec a drop-in replacement for std::vector. Table of Contents. Example; Arithmetic operations, logical operations and mathematical functions; Owning and adopting memory; Sorting and manipulation of indices; Usage in combination with RDataFrame; Reference for the RVec class; Reference for RVec helper functions. Example; Suppose to have an event featuring a collection of muons with a certain pseudorapidity, momentum and charge, e.g.: std::vector<short> mu_charge {1, 1, -1, -1, -1, 1, 1, -1};; std::vector<float> mu_pt {56, 45, 32, 24, 12, 8, 7, 6.2};; std::vector",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:4335,Availability,avail,available,4335,"ec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3690; v4@ v4Definition rootcling_impl.cxx:3692; v3@ v3Definition rootcling_impl.cxx:3691; v1@ v1Definition rootcling_impl.cxx:3689; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied in the new memory and preserved. Sorting and manipulation of indices. Sorting; RVec complies to the STL interfaces when it comes to iterations. As a result, ",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:5126,Deployability,release,released,5126,"nc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied in the new memory and preserved. Sorting and manipulation of indices. Sorting; RVec complies to the STL interfaces when it comes to iterations. As a result, standard algorithms can be used, for example sorting: RVec<double> v{6., 4., 5.};; std::sort(v.begin(), v.end());; v@ vDefinition rootcling_impl.cxx:3687; For convenience, helpers are provided too: auto sorted_v = Sort(v);; auto reversed_v = Reverse(v);; ROOT::VecOps::ReverseRVec< T > Reverse(const RVec< T > &v)Return copy of reversed vector.Definition RVec.hxx:2481; ROOT::VecOps::SortRVec< T > Sort(const RVec< T > &v)Return copy of RVec with elements sorted in ascending order.Definition RVec.hxx:2502. Manipulation of indices; It is also possible to manipulated the RVecs acting on their indices. For example, the following syntax RVecD v0 {9., 7., 8.};; auto v1 = Take(v0, {1, 2, 0});; ROOT::VecOps::TakeRVec< T > Take(const RVec< T > &v, const RVec< typename RVec",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:1993,Energy Efficiency,charge,charge,1993,"ROOT::RVecD are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; RVecB (bool); RVecC (char); RVecD (double); RVecF (float); RVecI (int); RVecL (long); RVecLL (long long); RVecU (unsigned); RVecUL (unsigned long); RVecULL (unsigned long long). RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or other operations will be propagated potentially leaving the RVec object in an invalid state. RVec methods (e.g. at or size) follow the STL naming convention instead of the ROOT naming convention in order to make RVec a drop-in replacement for std::vector. Table of Contents. Example; Arithmetic operations, logical operations and mathematical functions; Owning and adopting memory; Sorting and manipulation of indices; Usage in combination with RDataFrame; Reference for the RVec class; Reference for RVec helper functions. Example; Suppose to have an event featuring a collection of muons with a certain pseudorapidity, momentum and charge, e.g.: std::vector<short> mu_charge {1, 1, -1, -1, -1, 1, 1, -1};; std::vector<float> mu_pt {56, 45, 32, 24, 12, 8, 7, 6.2};; std::vector<float> mu_eta {3.1, -.2, -1.1, 1, 4.1, 1.6, 2.4, -.5};; Suppose you want to extract the transverse momenta of the muons satisfying certain criteria, for example consider only negatively charged muons with a pseudorapidity smaller or equal to 2 and with a transverse momentum greater than 10 GeV. Such a selection would require, among the other things, the management of an explicit loop, for example: std::vector<float> goodMuons_pt;; const auto size = mu_charge.size();; for (size_t i=0; i < size; ++i) {; if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; goodMuons_pt.emplace_back(mu_pt[i]);; }; }; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::VecOps::absRVec< PromoteType< T > > abs(const RVec< T > &v)Definition RVec.hxx:18",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:2324,Energy Efficiency,charge,charged,2324,"lement constructors during insertions, swaps or other operations will be propagated potentially leaving the RVec object in an invalid state. RVec methods (e.g. at or size) follow the STL naming convention instead of the ROOT naming convention in order to make RVec a drop-in replacement for std::vector. Table of Contents. Example; Arithmetic operations, logical operations and mathematical functions; Owning and adopting memory; Sorting and manipulation of indices; Usage in combination with RDataFrame; Reference for the RVec class; Reference for RVec helper functions. Example; Suppose to have an event featuring a collection of muons with a certain pseudorapidity, momentum and charge, e.g.: std::vector<short> mu_charge {1, 1, -1, -1, -1, 1, 1, -1};; std::vector<float> mu_pt {56, 45, 32, 24, 12, 8, 7, 6.2};; std::vector<float> mu_eta {3.1, -.2, -1.1, 1, 4.1, 1.6, 2.4, -.5};; Suppose you want to extract the transverse momenta of the muons satisfying certain criteria, for example consider only negatively charged muons with a pseudorapidity smaller or equal to 2 and with a transverse momentum greater than 10 GeV. Such a selection would require, among the other things, the management of an explicit loop, for example: std::vector<float> goodMuons_pt;; const auto size = mu_charge.size();; for (size_t i=0; i < size; ++i) {; if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; goodMuons_pt.emplace_back(mu_pt[i]);; }; }; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::VecOps::absRVec< PromoteType< T > > abs(const RVec< T > &v)Definition RVec.hxx:1832; These operations become straightforward with RVec - we just need to write what we mean: auto goodMuons_pt = mu_pt[ (mu_pt > 10.f && abs(mu_eta) <= 2.f && mu_charge == -1) ]; Now the clean collection of transverse momenta can be used within the rest of the data analysis, for example to fill a histogram. Arithmetic operations, logical operations and mathematical f",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:5150,Energy Efficiency,allocate,allocated,5150,"nc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied in the new memory and preserved. Sorting and manipulation of indices. Sorting; RVec complies to the STL interfaces when it comes to iterations. As a result, standard algorithms can be used, for example sorting: RVec<double> v{6., 4., 5.};; std::sort(v.begin(), v.end());; v@ vDefinition rootcling_impl.cxx:3687; For convenience, helpers are provided too: auto sorted_v = Sort(v);; auto reversed_v = Reverse(v);; ROOT::VecOps::ReverseRVec< T > Reverse(const RVec< T > &v)Return copy of reversed vector.Definition RVec.hxx:2481; ROOT::VecOps::SortRVec< T > Sort(const RVec< T > &v)Return copy of RVec with elements sorted in ascending order.Definition RVec.hxx:2502. Manipulation of indices; It is also possible to manipulated the RVecs acting on their indices. For example, the following syntax RVecD v0 {9., 7., 8.};; auto v1 = Take(v0, {1, 2, 0});; ROOT::VecOps::TakeRVec< T > Take(const RVec< T > &v, const RVec< typename RVec",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:7870,Energy Efficiency,energy,energy,7870,"{1, 2, 0}.; v1 = Take(v0, v1_indices);; ROOT::VecOps::ArgsortRVec< typename RVec< T >::size_type > Argsort(const RVec< T > &v)Return an RVec of indices that sort the input RVec.Definition RVec.hxx:2250; The Take utility allows to extract portions of the RVec. The content to be taken can be specified with an RVec of indices or an integer. If the integer is negative, elements will be picked starting from the end of the container: RVecF vf {1.f, 2.f, 3.f, 4.f};; auto vf_1 = Take(vf, {1, 3}); // The content is {2.f, 4.f}; auto vf_2 = Take(vf, 2); // The content is {1.f, 2.f}; auto vf_3 = Take(vf, -3); // The content is {2.f, 3.f, 4.f}. Usage in combination with RDataFrame; RDataFrame leverages internally RVecs. Suppose to have a dataset stored in a TTree which holds these columns (here we choose C arrays to represent the collections, they could be as well std::vector instances): nPart ""nPart/I"" An integer representing the number of particles; px ""px[nPart]/D"" The C array of the particles' x component of the momentum; py ""py[nPart]/D"" The C array of the particles' y component of the momentum; E ""E[nPart]/D"" The C array of the particles' Energy; Suppose you'd like to plot in a histogram the transverse momenta of all particles for which the energy is greater than 200 MeV. The code required would just be: RDataFrame d(""mytree"", ""myfile.root"");; auto cutPt = [](RVecD &pxs, RVecD &pys, RVecD &Es) {; auto all_pts = sqrt(pxs * pxs + pys * pys);; auto good_pts = all_pts[Es > 200.];; return good_pts;; };; ; auto hpt = d.Define(""pt"", cutPt, {""px"", ""py"", ""E""}); .Histo1D(""pt"");; hpt->Draw();; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; And if you'd like to express your selection as a string: RDataFrame d(""mytree"", ""myfile.root"");; auto hpt = d.Define(""pt"", ""sqrt(pxs * pxs + pys * pys)[E>200]""); .Histo1D(""pt"");; hpt->Draw();; . PyROOT; The ROOT::R",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:17980,Energy Efficiency,allocate,allocated,17980,"xcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Private Types; using SuperClass = RVecN< T, Internal::VecOps::RVecInlineStorageSize< T >::value >;  . Friends; void Internal::VecOps::ResetView (RVec< T > &v, T *addr, std::size_t sz);  ; bool ROOT::Detail::VecOps::IsAdopting (const RVec< T > &v);  ; bool ROOT::Detail::VecOps::IsSmall (const RVec< T > &v);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Detail::VecOps::RVecImpl< T >;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If fals",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:18059,Energy Efficiency,allocate,allocated,18059,"xcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Private Types; using SuperClass = RVecN< T, Internal::VecOps::RVecInlineStorageSize< T >::value >;  . Friends; void Internal::VecOps::ResetView (RVec< T > &v, T *addr, std::size_t sz);  ; bool ROOT::Detail::VecOps::IsAdopting (const RVec< T > &v);  ; bool ROOT::Detail::VecOps::IsSmall (const RVec< T > &v);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Detail::VecOps::RVecImpl< T >;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If fals",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:18369,Energy Efficiency,allocate,allocated,18369,"N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Private Types; using SuperClass = RVecN< T, Internal::VecOps::RVecInlineStorageSize< T >::value >;  . Friends; void Internal::VecOps::ResetView (RVec< T > &v, T *addr, std::size_t sz);  ; bool ROOT::Detail::VecOps::IsAdopting (const RVec< T > &v);  ; bool ROOT::Detail::VecOps::IsSmall (const RVec< T > &v);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Detail::VecOps::RVecImpl< T >;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Co",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:18808,Energy Efficiency,reduce,reduce,18808," T > &v);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Detail::VecOps::RVecImpl< T >;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; st",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:640,Integrability,interface,interface,640,". ROOT: ROOT::VecOps::RVec< T > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Types |; Friends |; List of all members ; ROOT::VecOps::RVec< T > Class Template ReferenceVecOps. ; template<typename T>; class ROOT::VecOps::RVec< T >A ""std::vector""-like collection of values implementing handy operation to analyse them. ; Template Parameters. TThe type of the contained objects. A RVec is a container designed to make analysis of values' collections fast and easy. Its storage is contiguous in memory and its interface is designed such to resemble to the one of the stl vector. In addition the interface features methods and external functions to ease the manipulation and analysis of the data in the RVec.; NoteROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; RVecB (bool); RVecC (char); RVecD (double); RVecF (float); RVecI (int); RVecL (long); RVecLL (long long); RVecU (unsigned); RVecUL (unsigned long); RVecULL (unsigned long long). RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or other operations will be propagated potentially leaving the RVec object in an invalid state. RVec methods (e.g. at or size) follow the STL naming convention instead of the ROOT naming convention in order to make RVec a drop-in replacement for std::vector. Table of Contents. Example; Arithmetic operations, logical operations and mathematical functions; Owning and adopting memory; Sorting and manipulation of indices; Usage in combination with RDataFrame; Reference for the RVec class; Reference for RVec helper functions. Example; Suppose to have an event featuring a collection of muons with a certain pseudorapidity, momentum and charge, ",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:725,Integrability,interface,interface,725,". ROOT: ROOT::VecOps::RVec< T > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Types |; Friends |; List of all members ; ROOT::VecOps::RVec< T > Class Template ReferenceVecOps. ; template<typename T>; class ROOT::VecOps::RVec< T >A ""std::vector""-like collection of values implementing handy operation to analyse them. ; Template Parameters. TThe type of the contained objects. A RVec is a container designed to make analysis of values' collections fast and easy. Its storage is contiguous in memory and its interface is designed such to resemble to the one of the stl vector. In addition the interface features methods and external functions to ease the manipulation and analysis of the data in the RVec.; NoteROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; RVecB (bool); RVecC (char); RVecD (double); RVecF (float); RVecI (int); RVecL (long); RVecLL (long long); RVecU (unsigned); RVecUL (unsigned long); RVecULL (unsigned long long). RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or other operations will be propagated potentially leaving the RVec object in an invalid state. RVec methods (e.g. at or size) follow the STL naming convention instead of the ROOT naming convention in order to make RVec a drop-in replacement for std::vector. Table of Contents. Example; Arithmetic operations, logical operations and mathematical functions; Owning and adopting memory; Sorting and manipulation of indices; Usage in combination with RDataFrame; Reference for the RVec class; Reference for RVec helper functions. Example; Suppose to have an event featuring a collection of muons with a certain pseudorapidity, momentum and charge, ",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:5296,Integrability,interface,interfaces,5296,"gamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied in the new memory and preserved. Sorting and manipulation of indices. Sorting; RVec complies to the STL interfaces when it comes to iterations. As a result, standard algorithms can be used, for example sorting: RVec<double> v{6., 4., 5.};; std::sort(v.begin(), v.end());; v@ vDefinition rootcling_impl.cxx:3687; For convenience, helpers are provided too: auto sorted_v = Sort(v);; auto reversed_v = Reverse(v);; ROOT::VecOps::ReverseRVec< T > Reverse(const RVec< T > &v)Return copy of reversed vector.Definition RVec.hxx:2481; ROOT::VecOps::SortRVec< T > Sort(const RVec< T > &v)Return copy of RVec with elements sorted in ascending order.Definition RVec.hxx:2502. Manipulation of indices; It is also possible to manipulated the RVecs acting on their indices. For example, the following syntax RVecD v0 {9., 7., 8.};; auto v1 = Take(v0, {1, 2, 0});; ROOT::VecOps::TakeRVec< T > Take(const RVec< T > &v, const RVec< typename RVec< T >::size_type > &i)Return elements of a vector at given indices.Definition RVec.hxx:2339; v0@ v0Definition rootcling_impl.cxx:3688; will yield a new RVec<double> the content o",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:8322,Integrability,interface,interface,8322,"ges internally RVecs. Suppose to have a dataset stored in a TTree which holds these columns (here we choose C arrays to represent the collections, they could be as well std::vector instances): nPart ""nPart/I"" An integer representing the number of particles; px ""px[nPart]/D"" The C array of the particles' x component of the momentum; py ""py[nPart]/D"" The C array of the particles' y component of the momentum; E ""E[nPart]/D"" The C array of the particles' Energy; Suppose you'd like to plot in a histogram the transverse momenta of all particles for which the energy is greater than 200 MeV. The code required would just be: RDataFrame d(""mytree"", ""myfile.root"");; auto cutPt = [](RVecD &pxs, RVecD &pys, RVecD &Es) {; auto all_pts = sqrt(pxs * pxs + pys * pys);; auto good_pts = all_pts[Es > 200.];; return good_pts;; };; ; auto hpt = d.Define(""pt"", cutPt, {""px"", ""py"", ""E""}); .Histo1D(""pt"");; hpt->Draw();; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; And if you'd like to express your selection as a string: RDataFrame d(""mytree"", ""myfile.root"");; auto hpt = d.Define(""pt"", ""sqrt(pxs * pxs + pys * pys)[E>200]""); .Histo1D(""pt"");; hpt->Draw();; . PyROOT; The ROOT::RVec class has additional features in Python, which allow to adopt memory from Numpy arrays and vice versa. The purpose of these features is the copyless interfacing of Python and C++ using their most common data containers, Numpy arrays and RVec with a std::vector interface. Conversion of RVecs to Numpy arrays; RVecs of fundamental types (int, float, ...) have in Python the __array_interface__ attribute attached. This information allows Numpy to adopt the memory of RVecs without copying the content. You can find further documentation regarding the Numpy array interface here. The following code example demonstrates the memory adoption mechanism using numpy.asarray.; rvec = ROOT.RVec('do",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:8882,Integrability,interface,interface,8882,"istogram the transverse momenta of all particles for which the energy is greater than 200 MeV. The code required would just be: RDataFrame d(""mytree"", ""myfile.root"");; auto cutPt = [](RVecD &pxs, RVecD &pys, RVecD &Es) {; auto all_pts = sqrt(pxs * pxs + pys * pys);; auto good_pts = all_pts[Es > 200.];; return good_pts;; };; ; auto hpt = d.Define(""pt"", cutPt, {""px"", ""py"", ""E""}); .Histo1D(""pt"");; hpt->Draw();; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; And if you'd like to express your selection as a string: RDataFrame d(""mytree"", ""myfile.root"");; auto hpt = d.Define(""pt"", ""sqrt(pxs * pxs + pys * pys)[E>200]""); .Histo1D(""pt"");; hpt->Draw();; . PyROOT; The ROOT::RVec class has additional features in Python, which allow to adopt memory from Numpy arrays and vice versa. The purpose of these features is the copyless interfacing of Python and C++ using their most common data containers, Numpy arrays and RVec with a std::vector interface. Conversion of RVecs to Numpy arrays; RVecs of fundamental types (int, float, ...) have in Python the __array_interface__ attribute attached. This information allows Numpy to adopt the memory of RVecs without copying the content. You can find further documentation regarding the Numpy array interface here. The following code example demonstrates the memory adoption mechanism using numpy.asarray.; rvec = ROOT.RVec('double')((1, 2, 3)); print(rvec) # { 1.0000000, 2.0000000, 3.0000000 }; ; npy = numpy.asarray(rvec); print(npy) # [1. 2. 3.]; ; rvec[0] = 42; print(npy) # [42. 2. 3.]. Conversion of Numpy arrays to RVecs; Data owned by Numpy arrays with fundamental types (int, float, ...) can be adopted by RVecs. To create an RVec from a Numpy array, ROOT offers the facility ROOT.VecOps.AsRVec, which performs a similar operation to numpy.asarray, but vice versa. A code example demonstrating the feature and the ",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:9183,Integrability,interface,interface,9183,", cutPt, {""px"", ""py"", ""E""}); .Histo1D(""pt"");; hpt->Draw();; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; And if you'd like to express your selection as a string: RDataFrame d(""mytree"", ""myfile.root"");; auto hpt = d.Define(""pt"", ""sqrt(pxs * pxs + pys * pys)[E>200]""); .Histo1D(""pt"");; hpt->Draw();; . PyROOT; The ROOT::RVec class has additional features in Python, which allow to adopt memory from Numpy arrays and vice versa. The purpose of these features is the copyless interfacing of Python and C++ using their most common data containers, Numpy arrays and RVec with a std::vector interface. Conversion of RVecs to Numpy arrays; RVecs of fundamental types (int, float, ...) have in Python the __array_interface__ attribute attached. This information allows Numpy to adopt the memory of RVecs without copying the content. You can find further documentation regarding the Numpy array interface here. The following code example demonstrates the memory adoption mechanism using numpy.asarray.; rvec = ROOT.RVec('double')((1, 2, 3)); print(rvec) # { 1.0000000, 2.0000000, 3.0000000 }; ; npy = numpy.asarray(rvec); print(npy) # [1. 2. 3.]; ; rvec[0] = 42; print(npy) # [42. 2. 3.]. Conversion of Numpy arrays to RVecs; Data owned by Numpy arrays with fundamental types (int, float, ...) can be adopted by RVecs. To create an RVec from a Numpy array, ROOT offers the facility ROOT.VecOps.AsRVec, which performs a similar operation to numpy.asarray, but vice versa. A code example demonstrating the feature and the adoption of the data owned by the Numpy array is shown below.; npy = numpy.array([1.0, 2.0, 3.0]); print(npy) # [1. 2. 3.]; ; rvec = ROOT.VecOps.AsRVec(npy); print(rvec) # { 1.0000000, 2.0000000, 3.0000000 }; ; npy[0] = 42; print(rvec) # { 42.000000, 2.0000000, 3.0000000 }. Definition at line 1529 of file RVec.hxx. Public Types; using const_reference",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:10379,Modifiability,inherit,inherited,10379,"]; ; rvec = ROOT.VecOps.AsRVec(npy); print(rvec) # { 1.0000000, 2.0000000, 3.0000000 }; ; npy[0] = 42; print(rvec) # { 42.000000, 2.0000000, 3.0000000 }. Definition at line 1529 of file RVec.hxx. Public Types; using const_reference = typename SuperClass::const_reference;  ; using reference = typename SuperClass::reference;  ; using size_type = typename SuperClass::size_type;  ; using value_type = typename SuperClass::value_type;  ;  Public Types inherited from ROOT::VecOps::RVecN< T, Internal::VecOps::RVecInlineStorageSize< T >::value >; using const_reference = typename Internal::VecOps::SmallVectorTemplateCommon< T >::const_reference;  ; using reference = typename Internal::VecOps::SmallVectorTemplateCommon< T >::reference;  ; using size_type = typename Internal::VecOps::SmallVectorTemplateCommon< T >::size_type;  ; using value_type = typename Internal::VecOps::SmallVectorTemplateCommon< T >::value_type;  ;  Public Types inherited from ROOT::Detail::VecOps::RVecImpl< T >; using const_iterator = typename SuperClass::const_iterator;  ; using iterator = typename SuperClass::iterator;  ; using reference = typename SuperClass::reference;  ; using size_type = typename SuperClass::size_type;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; using const_iterator = const T *;  ; using const_pointer = const T *;  ; using const_reference = const T &;  ; using const_reverse_iterator = std::reverse_iterator< const_iterator >;  ; using difference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  . Public Member Functions;  RVec ();  ;  RVec (const RVec &RHS);  ; template<unsigned N> ;  RVec (const RVecN< T, N > &RHS);  ;  RVec (const std::vector< T > &RHS);  ;  RVec (Detail::VecOps::RVecI",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:10865,Modifiability,inherit,inherited,10865,"]; ; rvec = ROOT.VecOps.AsRVec(npy); print(rvec) # { 1.0000000, 2.0000000, 3.0000000 }; ; npy[0] = 42; print(rvec) # { 42.000000, 2.0000000, 3.0000000 }. Definition at line 1529 of file RVec.hxx. Public Types; using const_reference = typename SuperClass::const_reference;  ; using reference = typename SuperClass::reference;  ; using size_type = typename SuperClass::size_type;  ; using value_type = typename SuperClass::value_type;  ;  Public Types inherited from ROOT::VecOps::RVecN< T, Internal::VecOps::RVecInlineStorageSize< T >::value >; using const_reference = typename Internal::VecOps::SmallVectorTemplateCommon< T >::const_reference;  ; using reference = typename Internal::VecOps::SmallVectorTemplateCommon< T >::reference;  ; using size_type = typename Internal::VecOps::SmallVectorTemplateCommon< T >::size_type;  ; using value_type = typename Internal::VecOps::SmallVectorTemplateCommon< T >::value_type;  ;  Public Types inherited from ROOT::Detail::VecOps::RVecImpl< T >; using const_iterator = typename SuperClass::const_iterator;  ; using iterator = typename SuperClass::iterator;  ; using reference = typename SuperClass::reference;  ; using size_type = typename SuperClass::size_type;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; using const_iterator = const T *;  ; using const_pointer = const T *;  ; using const_reference = const T &;  ; using const_reverse_iterator = std::reverse_iterator< const_iterator >;  ; using difference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  . Public Member Functions;  RVec ();  ;  RVec (const RVec &RHS);  ; template<unsigned N> ;  RVec (const RVecN< T, N > &RHS);  ;  RVec (const std::vector< T > &RHS);  ;  RVec (Detail::VecOps::RVecI",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:11151,Modifiability,inherit,inherited,11151,"]; ; rvec = ROOT.VecOps.AsRVec(npy); print(rvec) # { 1.0000000, 2.0000000, 3.0000000 }; ; npy[0] = 42; print(rvec) # { 42.000000, 2.0000000, 3.0000000 }. Definition at line 1529 of file RVec.hxx. Public Types; using const_reference = typename SuperClass::const_reference;  ; using reference = typename SuperClass::reference;  ; using size_type = typename SuperClass::size_type;  ; using value_type = typename SuperClass::value_type;  ;  Public Types inherited from ROOT::VecOps::RVecN< T, Internal::VecOps::RVecInlineStorageSize< T >::value >; using const_reference = typename Internal::VecOps::SmallVectorTemplateCommon< T >::const_reference;  ; using reference = typename Internal::VecOps::SmallVectorTemplateCommon< T >::reference;  ; using size_type = typename Internal::VecOps::SmallVectorTemplateCommon< T >::size_type;  ; using value_type = typename Internal::VecOps::SmallVectorTemplateCommon< T >::value_type;  ;  Public Types inherited from ROOT::Detail::VecOps::RVecImpl< T >; using const_iterator = typename SuperClass::const_iterator;  ; using iterator = typename SuperClass::iterator;  ; using reference = typename SuperClass::reference;  ; using size_type = typename SuperClass::size_type;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; using const_iterator = const T *;  ; using const_pointer = const T *;  ; using const_reference = const T &;  ; using const_reverse_iterator = std::reverse_iterator< const_iterator >;  ; using difference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  . Public Member Functions;  RVec ();  ;  RVec (const RVec &RHS);  ; template<unsigned N> ;  RVec (const RVecN< T, N > &RHS);  ;  RVec (const std::vector< T > &RHS);  ;  RVec (Detail::VecOps::RVecI",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:11652,Modifiability,inherit,inherited,11652,"]; ; rvec = ROOT.VecOps.AsRVec(npy); print(rvec) # { 1.0000000, 2.0000000, 3.0000000 }; ; npy[0] = 42; print(rvec) # { 42.000000, 2.0000000, 3.0000000 }. Definition at line 1529 of file RVec.hxx. Public Types; using const_reference = typename SuperClass::const_reference;  ; using reference = typename SuperClass::reference;  ; using size_type = typename SuperClass::size_type;  ; using value_type = typename SuperClass::value_type;  ;  Public Types inherited from ROOT::VecOps::RVecN< T, Internal::VecOps::RVecInlineStorageSize< T >::value >; using const_reference = typename Internal::VecOps::SmallVectorTemplateCommon< T >::const_reference;  ; using reference = typename Internal::VecOps::SmallVectorTemplateCommon< T >::reference;  ; using size_type = typename Internal::VecOps::SmallVectorTemplateCommon< T >::size_type;  ; using value_type = typename Internal::VecOps::SmallVectorTemplateCommon< T >::value_type;  ;  Public Types inherited from ROOT::Detail::VecOps::RVecImpl< T >; using const_iterator = typename SuperClass::const_iterator;  ; using iterator = typename SuperClass::iterator;  ; using reference = typename SuperClass::reference;  ; using size_type = typename SuperClass::size_type;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; using const_iterator = const T *;  ; using const_pointer = const T *;  ; using const_reference = const T &;  ; using const_reverse_iterator = std::reverse_iterator< const_iterator >;  ; using difference_type = ptrdiff_t;  ; using iterator = T *;  ; using pointer = T *;  ; using reference = T &;  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  . Public Member Functions;  RVec ();  ;  RVec (const RVec &RHS);  ; template<unsigned N> ;  RVec (const RVecN< T, N > &RHS);  ;  RVec (const std::vector< T > &RHS);  ;  RVec (Detail::VecOps::RVecI",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:12716,Modifiability,inherit,inherited,12716,"  ; using reverse_iterator = std::reverse_iterator< iterator >;  ; using size_type = size_t;  ; using value_type = T;  ;  Public Types inherited from ROOT::Internal::VecOps::SmallVectorBase; using Size_T = int32_t;  . Public Member Functions;  RVec ();  ;  RVec (const RVec &RHS);  ; template<unsigned N> ;  RVec (const RVecN< T, N > &RHS);  ;  RVec (const std::vector< T > &RHS);  ;  RVec (Detail::VecOps::RVecImpl< T > &&RHS);  ; template<typename ItTy , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<ItTy>::iterator_category, std::input_iterator_tag>::value>::type> ;  RVec (ItTy S, ItTy E);  ;  RVec (RVec &&RHS);  ; template<unsigned N> ;  RVec (RVecN< T, N > &&RHS);  ;  RVec (size_t Size);  ;  RVec (size_t Size, const T &Value);  ;  RVec (std::initializer_list< T > IL);  ;  RVec (T *p, size_t n);  ; template<typename U , typename = std::enable_if<std::is_convertible<T, U>::value>> ;  operator RVec () const;  ; RVec & operator= (const RVec &RHS);  ; RVec & operator= (RVec &&RHS);  ; template<typename V , typename = std::enable_if<std::is_convertible<V, bool>::value>> ; RVec operator[] (const RVec< V > &conds) const;  ;  Public Member Functions inherited from ROOT::VecOps::RVecN< T, Internal::VecOps::RVecInlineStorageSize< T >::value >;  RVecN ();  ;  RVecN (const RVecN &RHS);  ;  RVecN (const std::vector< T > &RHS);  ;  RVecN (Detail::VecOps::RVecImpl< T > &&RHS);  ;  RVecN (ItTy S, ItTy E);  ;  RVecN (RVecN &&RHS);  ;  RVecN (size_t Size);  ;  RVecN (size_t Size, const T &Value);  ;  RVecN (std::initializer_list< T > IL);  ;  RVecN (T *p, size_t n);  ;  ~RVecN ();  ; reference at (size_type pos);  ; const_reference at (size_type pos) const;  ; value_type at (size_type pos, value_type fallback);  No exception thrown. The user specifies the desired value in case the RVecN is shorter than pos. ;  ; value_type at (size_type pos, value_type fallback) const;  No exception thrown. The user specifies the desired value in case the RVecN ",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:13946,Modifiability,inherit,inherited,13946,"  ;  RVecN (ItTy S, ItTy E);  ;  RVecN (RVecN &&RHS);  ;  RVecN (size_t Size);  ;  RVecN (size_t Size, const T &Value);  ;  RVecN (std::initializer_list< T > IL);  ;  RVecN (T *p, size_t n);  ;  ~RVecN ();  ; reference at (size_type pos);  ; const_reference at (size_type pos) const;  ; value_type at (size_type pos, value_type fallback);  No exception thrown. The user specifies the desired value in case the RVecN is shorter than pos. ;  ; value_type at (size_type pos, value_type fallback) const;  No exception thrown. The user specifies the desired value in case the RVecN is shorter than pos. ;  ;  operator RVecN< U, M > () const;  ; RVecN & operator= (const RVecN &RHS);  ; RVecN & operator= (Detail::VecOps::RVecImpl< T > &&RHS);  ; RVecN & operator= (RVecN &&RHS);  ; RVecN & operator= (std::initializer_list< T > IL);  ; RVecN operator[] (const RVecN< V, M > &conds) const;  ; reference operator[] (size_type idx);  ; const_reference operator[] (size_type idx) const;  ;  Public Member Functions inherited from ROOT::Detail::VecOps::RVecImpl< T >;  RVecImpl (const RVecImpl &)=delete;  ;  ~RVecImpl ();  ; template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> ; void append (in_iter in_start, in_iter in_end);  Add the specified range to the end of the SmallVector. ;  ; void append (size_type NumInputs, const T &Elt);  Append NumInputs copies of Elt to the end. ;  ; void append (std::initializer_list< T > IL);  ; template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> ; void assign (in_iter in_start, in_iter in_end);  ; void assign (size_type NumElts, const T &Elt);  ; void assign (std::initializer_list< T > IL);  ; void clear ();  ; template<typename... ArgTypes> ; reference emplace_back (ArgTypes &&...Args);  ; iterator era",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:15788,Modifiability,inherit,inherited,15788,";  ; void assign (size_type NumElts, const T &Elt);  ; void assign (std::initializer_list< T > IL);  ; void clear ();  ; template<typename... ArgTypes> ; reference emplace_back (ArgTypes &&...Args);  ; iterator erase (const_iterator CI);  ; iterator erase (const_iterator CS, const_iterator CE);  ; iterator insert (iterator I, const T &Elt);  ; template<typename ItTy , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<ItTy>::iterator_category, std::input_iterator_tag>::value>::type> ; iterator insert (iterator I, ItTy From, ItTy To);  ; iterator insert (iterator I, size_type NumToInsert, const T &Elt);  ; void insert (iterator I, std::initializer_list< T > IL);  ; iterator insert (iterator I, T &&Elt);  ; RVecImpl & operator= (const RVecImpl &RHS);  ; RVecImpl & operator= (RVecImpl &&RHS);  ; void pop_back_n (size_type NumItems);  ; T pop_back_val ();  ; void reserve (size_type N);  ; void resize (size_type N);  ; void resize (size_type N, const T &NV);  ; void swap (RVecImpl &RHS);  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; void pop_back ();  ; void push_back (const T &Elt);  ; void push_back (T &&Elt);  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; reference back ();  ; const_reference back () const;  ; const_iterator begin () const noexcept;  ; iterator begin () noexcept;  ; size_t capacity () const noexcept;  ; size_t capacity_in_bytes () const;  ; const_iterator cbegin () const noexcept;  ; const_iterator cend () const noexcept;  ; const_reverse_iterator crbegin () const noexcept;  ; const_reverse_iterator crend () const noexcept;  ; const_pointer data () const noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; re",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:15972,Modifiability,inherit,inherited,15972,";  ; void assign (size_type NumElts, const T &Elt);  ; void assign (std::initializer_list< T > IL);  ; void clear ();  ; template<typename... ArgTypes> ; reference emplace_back (ArgTypes &&...Args);  ; iterator erase (const_iterator CI);  ; iterator erase (const_iterator CS, const_iterator CE);  ; iterator insert (iterator I, const T &Elt);  ; template<typename ItTy , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<ItTy>::iterator_category, std::input_iterator_tag>::value>::type> ; iterator insert (iterator I, ItTy From, ItTy To);  ; iterator insert (iterator I, size_type NumToInsert, const T &Elt);  ; void insert (iterator I, std::initializer_list< T > IL);  ; iterator insert (iterator I, T &&Elt);  ; RVecImpl & operator= (const RVecImpl &RHS);  ; RVecImpl & operator= (RVecImpl &&RHS);  ; void pop_back_n (size_type NumItems);  ; T pop_back_val ();  ; void reserve (size_type N);  ; void resize (size_type N);  ; void resize (size_type N, const T &NV);  ; void swap (RVecImpl &RHS);  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; void pop_back ();  ; void push_back (const T &Elt);  ; void push_back (T &&Elt);  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; reference back ();  ; const_reference back () const;  ; const_iterator begin () const noexcept;  ; iterator begin () noexcept;  ; size_t capacity () const noexcept;  ; size_t capacity_in_bytes () const;  ; const_iterator cbegin () const noexcept;  ; const_iterator cend () const noexcept;  ; const_reverse_iterator crbegin () const noexcept;  ; const_reverse_iterator crend () const noexcept;  ; const_pointer data () const noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; re",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:17091,Modifiability,inherit,inherited,17091,"s inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >; reference back ();  ; const_reference back () const;  ; const_iterator begin () const noexcept;  ; iterator begin () noexcept;  ; size_t capacity () const noexcept;  ; size_t capacity_in_bytes () const;  ; const_iterator cbegin () const noexcept;  ; const_iterator cend () const noexcept;  ; const_reverse_iterator crbegin () const noexcept;  ; const_reverse_iterator crend () const noexcept;  ; const_pointer data () const noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Private Types; using SuperClass = RVecN< T, Internal::VecOps::RVecInlineStorageSize< T >::value >;  . Friends; void Internal::VecOps::ResetView (RVec< T > &v, T *addr, std::size_t sz);  ; bool ROOT::Detail::VecOps::IsAdopting (const RVec< T > &v);  ; bool ROOT::Detail::VecOps::IsSmall (const RVec< T > &v);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Detail::VecOps::RVecImpl< T >;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0); ",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:17715,Modifiability,inherit,inherited,17715,"xcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Private Types; using SuperClass = RVecN< T, Internal::VecOps::RVecInlineStorageSize< T >::value >;  . Friends; void Internal::VecOps::ResetView (RVec< T > &v, T *addr, std::size_t sz);  ; bool ROOT::Detail::VecOps::IsAdopting (const RVec< T > &v);  ; bool ROOT::Detail::VecOps::IsSmall (const RVec< T > &v);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Detail::VecOps::RVecImpl< T >;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If fals",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:17822,Modifiability,inherit,inherited,17822,"xcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Private Types; using SuperClass = RVecN< T, Internal::VecOps::RVecInlineStorageSize< T >::value >;  . Friends; void Internal::VecOps::ResetView (RVec< T > &v, T *addr, std::size_t sz);  ; bool ROOT::Detail::VecOps::IsAdopting (const RVec< T > &v);  ; bool ROOT::Detail::VecOps::IsSmall (const RVec< T > &v);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Detail::VecOps::RVecImpl< T >;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If fals",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:18110,Modifiability,inherit,inherited,18110,"N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Private Types; using SuperClass = RVecN< T, Internal::VecOps::RVecInlineStorageSize< T >::value >;  . Friends; void Internal::VecOps::ResetView (RVec< T > &v, T *addr, std::size_t sz);  ; bool ROOT::Detail::VecOps::IsAdopting (const RVec< T > &v);  ; bool ROOT::Detail::VecOps::IsSmall (const RVec< T > &v);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Detail::VecOps::RVecImpl< T >;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Co",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:18491,Modifiability,inherit,inherited,18491," T > &v);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Detail::VecOps::RVecImpl< T >;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; st",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:19012,Modifiability,inherit,inherited,19012,"lVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is already at maximum capacity. ;  ; static void report_size_overflow (size_t MinSize);  Report that MinSize doesn't fit into this vector's size type. ;  ; static constexpr size_t SizeTypeMax ();  The maximum value of the Size_T used. ;  ;  Protected Attributes inherited from ROOT::Internal::VecOps::SmallVectorBase; void * fBeginX;  ; Size_T fCapacity;  Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ;  ; Si",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:19587,Modifiability,inherit,inherited,19587,"ow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is already at maximum capacity. ;  ; static void report_size_overflow (size_t MinSize);  Report that MinSize doesn't fit into this vector's size type. ;  ; static constexpr size_t SizeTypeMax ();  The maximum value of the Size_T used. ;  ;  Protected Attributes inherited from ROOT::Internal::VecOps::SmallVectorBase; void * fBeginX;  ; Size_T fCapacity;  Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ;  ; Size_T fSize = 0;  Always >= 0. ;  . #include <ROOT/RVec.hxx>. Inheritance diagram for ROOT::VecOps::RVec< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ const_reference. template<typename T > . using ROOT::VecOps::RVec< T >::const_reference = typename SuperClass::const_reference. Definition at line 1536 of file RVec.hxx. ◆ reference. template<typename T > . using ROOT::VecOps::RVec< T >::reference = ty",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:19973,Modifiability,inherit,inherited,19973,"inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; static void report_at_maximum_capacity ();  Report that this vector is already at maximum capacity. ;  ; static void report_size_overflow (size_t MinSize);  Report that MinSize doesn't fit into this vector's size type. ;  ; static constexpr size_t SizeTypeMax ();  The maximum value of the Size_T used. ;  ;  Protected Attributes inherited from ROOT::Internal::VecOps::SmallVectorBase; void * fBeginX;  ; Size_T fCapacity;  Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode. ;  ; Size_T fSize = 0;  Always >= 0. ;  . #include <ROOT/RVec.hxx>. Inheritance diagram for ROOT::VecOps::RVec< T >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ const_reference. template<typename T > . using ROOT::VecOps::RVec< T >::const_reference = typename SuperClass::const_reference. Definition at line 1536 of file RVec.hxx. ◆ reference. template<typename T > . using ROOT::VecOps::RVec< T >::reference = typename SuperClass::reference. Definition at line 1535 of file RVec.hxx. ◆ size_type. template<typename T > . using ROOT::VecOps::RVec< T >::size_type = typename SuperClass::size_type. Definition at line 1537 of file RVec.hxx. ◆ SuperClass. template<typename T > . using ROOT::VecOps::RVec< T >::SuperClass = RVecN<T, Internal::VecOps::RVecInlineStorageSize<T>::value>. ",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:3368,Performance,perform,performed,3368," a pseudorapidity smaller or equal to 2 and with a transverse momentum greater than 10 GeV. Such a selection would require, among the other things, the management of an explicit loop, for example: std::vector<float> goodMuons_pt;; const auto size = mu_charge.size();; for (size_t i=0; i < size; ++i) {; if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; goodMuons_pt.emplace_back(mu_pt[i]);; }; }; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::VecOps::absRVec< PromoteType< T > > abs(const RVec< T > &v)Definition RVec.hxx:1832; These operations become straightforward with RVec - we just need to write what we mean: auto goodMuons_pt = mu_pt[ (mu_pt > 10.f && abs(mu_eta) <= 2.f && mu_charge == -1) ]; Now the clean collection of transverse momenta can be used within the rest of the data analysis, for example to fill a histogram. Arithmetic operations, logical operations and mathematical functions; Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3690; v4@ v4Definition rootcling_impl.cxx:3692; v3@ v3Definition rootcling_impl.cxx:3691; v1@ v1Definition rootcling_impl.cxx:3689; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is availab",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:9696,Performance,perform,performs,9696,"and vice versa. The purpose of these features is the copyless interfacing of Python and C++ using their most common data containers, Numpy arrays and RVec with a std::vector interface. Conversion of RVecs to Numpy arrays; RVecs of fundamental types (int, float, ...) have in Python the __array_interface__ attribute attached. This information allows Numpy to adopt the memory of RVecs without copying the content. You can find further documentation regarding the Numpy array interface here. The following code example demonstrates the memory adoption mechanism using numpy.asarray.; rvec = ROOT.RVec('double')((1, 2, 3)); print(rvec) # { 1.0000000, 2.0000000, 3.0000000 }; ; npy = numpy.asarray(rvec); print(npy) # [1. 2. 3.]; ; rvec[0] = 42; print(npy) # [42. 2. 3.]. Conversion of Numpy arrays to RVecs; Data owned by Numpy arrays with fundamental types (int, float, ...) can be adopted by RVecs. To create an RVec from a Numpy array, ROOT offers the facility ROOT.VecOps.AsRVec, which performs a similar operation to numpy.asarray, but vice versa. A code example demonstrating the feature and the adoption of the data owned by the Numpy array is shown below.; npy = numpy.array([1.0, 2.0, 3.0]); print(npy) # [1. 2. 3.]; ; rvec = ROOT.VecOps.AsRVec(npy); print(rvec) # { 1.0000000, 2.0000000, 3.0000000 }; ; npy[0] = 42; print(rvec) # { 42.000000, 2.0000000, 3.0000000 }. Definition at line 1529 of file RVec.hxx. Public Types; using const_reference = typename SuperClass::const_reference;  ; using reference = typename SuperClass::reference;  ; using size_type = typename SuperClass::size_type;  ; using value_type = typename SuperClass::value_type;  ;  Public Types inherited from ROOT::VecOps::RVecN< T, Internal::VecOps::RVecInlineStorageSize< T >::value >; using const_reference = typename Internal::VecOps::SmallVectorTemplateCommon< T >::const_reference;  ; using reference = typename Internal::VecOps::SmallVectorTemplateCommon< T >::reference;  ; using size_type = typename Internal::VecO",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:1283,Safety,safe,safe,1283,"::RVec< T > Class Template ReferenceVecOps. ; template<typename T>; class ROOT::VecOps::RVec< T >A ""std::vector""-like collection of values implementing handy operation to analyse them. ; Template Parameters. TThe type of the contained objects. A RVec is a container designed to make analysis of values' collections fast and easy. Its storage is contiguous in memory and its interface is designed such to resemble to the one of the stl vector. In addition the interface features methods and external functions to ease the manipulation and analysis of the data in the RVec.; NoteROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; RVecB (bool); RVecC (char); RVecD (double); RVecF (float); RVecI (int); RVecL (long); RVecLL (long long); RVecU (unsigned); RVecUL (unsigned long); RVecULL (unsigned long long). RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or other operations will be propagated potentially leaving the RVec object in an invalid state. RVec methods (e.g. at or size) follow the STL naming convention instead of the ROOT naming convention in order to make RVec a drop-in replacement for std::vector. Table of Contents. Example; Arithmetic operations, logical operations and mathematical functions; Owning and adopting memory; Sorting and manipulation of indices; Usage in combination with RDataFrame; Reference for the RVec class; Reference for RVec helper functions. Example; Suppose to have an event featuring a collection of muons with a certain pseudorapidity, momentum and charge, e.g.: std::vector<short> mu_charge {1, 1, -1, -1, -1, 1, 1, -1};; std::vector<float> mu_pt {56, 45, 32, 24, 12, 8, 7, 6.2};; std::vector<float> mu_eta {3.1, -.2, -1.1, 1, 4.1, 1.6, 2.4, -.5};; Suppose you want to extract the transverse momenta of the muons satisfyi",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:1666,Testability,log,logical,1666,"xternal functions to ease the manipulation and analysis of the data in the RVec.; NoteROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; RVecB (bool); RVecC (char); RVecD (double); RVecF (float); RVecI (int); RVecL (long); RVecLL (long long); RVecU (unsigned); RVecUL (unsigned long); RVecULL (unsigned long long). RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or other operations will be propagated potentially leaving the RVec object in an invalid state. RVec methods (e.g. at or size) follow the STL naming convention instead of the ROOT naming convention in order to make RVec a drop-in replacement for std::vector. Table of Contents. Example; Arithmetic operations, logical operations and mathematical functions; Owning and adopting memory; Sorting and manipulation of indices; Usage in combination with RDataFrame; Reference for the RVec class; Reference for RVec helper functions. Example; Suppose to have an event featuring a collection of muons with a certain pseudorapidity, momentum and charge, e.g.: std::vector<short> mu_charge {1, 1, -1, -1, -1, 1, 1, -1};; std::vector<float> mu_pt {56, 45, 32, 24, 12, 8, 7, 6.2};; std::vector<float> mu_eta {3.1, -.2, -1.1, 1, 4.1, 1.6, 2.4, -.5};; Suppose you want to extract the transverse momenta of the muons satisfying certain criteria, for example consider only negatively charged muons with a pseudorapidity smaller or equal to 2 and with a transverse momentum greater than 10 GeV. Such a selection would require, among the other things, the management of an explicit loop, for example: std::vector<float> goodMuons_pt;; const auto size = mu_charge.size();; for (size_t i=0; i < size; ++i) {; if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; goodMuons_pt.emplace_back(mu_pt[i]);; }; }; R",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:3274,Testability,log,logical,3274," a pseudorapidity smaller or equal to 2 and with a transverse momentum greater than 10 GeV. Such a selection would require, among the other things, the management of an explicit loop, for example: std::vector<float> goodMuons_pt;; const auto size = mu_charge.size();; for (size_t i=0; i < size; ++i) {; if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; goodMuons_pt.emplace_back(mu_pt[i]);; }; }; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::VecOps::absRVec< PromoteType< T > > abs(const RVec< T > &v)Definition RVec.hxx:1832; These operations become straightforward with RVec - we just need to write what we mean: auto goodMuons_pt = mu_pt[ (mu_pt > 10.f && abs(mu_eta) <= 2.f && mu_charge == -1) ]; Now the clean collection of transverse momenta can be used within the rest of the data analysis, for example to fill a histogram. Arithmetic operations, logical operations and mathematical functions; Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3690; v4@ v4Definition rootcling_impl.cxx:3692; v3@ v3Definition rootcling_impl.cxx:3691; v1@ v1Definition rootcling_impl.cxx:3689; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is availab",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:4165,Testability,log,log,4165,"est of the data analysis, for example to fill a histogram. Arithmetic operations, logical operations and mathematical functions; Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3690; v4@ v4Definition rootcling_impl.cxx:3692; v3@ v3Definition rootcling_impl.cxx:3691; v1@ v1Definition rootcling_impl.cxx:3689; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied i",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:882,Usability,simpl,simply,882,". ROOT: ROOT::VecOps::RVec< T > Class Template Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Types |; Friends |; List of all members ; ROOT::VecOps::RVec< T > Class Template ReferenceVecOps. ; template<typename T>; class ROOT::VecOps::RVec< T >A ""std::vector""-like collection of values implementing handy operation to analyse them. ; Template Parameters. TThe type of the contained objects. A RVec is a container designed to make analysis of values' collections fast and easy. Its storage is contiguous in memory and its interface is designed such to resemble to the one of the stl vector. In addition the interface features methods and external functions to ease the manipulation and analysis of the data in the RVec.; NoteROOT::VecOps::RVec can also be spelled simply ROOT::RVec. Shorthand aliases such as ROOT::RVecI or ROOT::RVecD are also available as template instantiations of RVec of fundamental types. The full list of available aliases:; RVecB (bool); RVecC (char); RVecD (double); RVecF (float); RVecI (int); RVecL (long); RVecLL (long long); RVecU (unsigned); RVecUL (unsigned long); RVecULL (unsigned long long). RVec does not attempt to be exception safe. Exceptions thrown by element constructors during insertions, swaps or other operations will be propagated potentially leaving the RVec object in an invalid state. RVec methods (e.g. at or size) follow the STL naming convention instead of the ROOT naming convention in order to make RVec a drop-in replacement for std::vector. Table of Contents. Example; Arithmetic operations, logical operations and mathematical functions; Owning and adopting memory; Sorting and manipulation of indices; Usage in combination with RDataFrame; Reference for the RVec class; Reference for RVec helper functions. Example; Suppose to have an event featuring a collection of muons with a certain pseudorapidity, momentum and charge, ",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:4695,Usability,simpl,simply,4695,"ng_impl.cxx:3690; v4@ v4Definition rootcling_impl.cxx:3692; v3@ v3Definition rootcling_impl.cxx:3691; v1@ v1Definition rootcling_impl.cxx:3689; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied in the new memory and preserved. Sorting and manipulation of indices. Sorting; RVec complies to the STL interfaces when it comes to iterations. As a result, standard algorithms can be used, for example sorting: RVec<double> v{6., 4., 5.};; std::sort(v.begin(), v.end());; v@ vDefinition rootcling_impl.cxx:3687; For convenience, helpers are provided too: auto sorted_v = Sort(v);; auto reversed_v = Reverse(v);; ROOT::VecOps::ReverseRVec< T > Reverse(const RVec< T > &v)Return copy of reversed vector.D",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:4999,Usability,simpl,simply,4999,"e most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied in the new memory and preserved. Sorting and manipulation of indices. Sorting; RVec complies to the STL interfaces when it comes to iterations. As a result, standard algorithms can be used, for example sorting: RVec<double> v{6., 4., 5.};; std::sort(v.begin(), v.end());; v@ vDefinition rootcling_impl.cxx:3687; For convenience, helpers are provided too: auto sorted_v = Sort(v);; auto reversed_v = Reverse(v);; ROOT::VecOps::ReverseRVec< T > Reverse(const RVec< T > &v)Return copy of reversed vector.Definition RVec.hxx:2481; ROOT::VecOps::SortRVec< T > Sort(const RVec< T > &v)Return copy of RVec with elements sorted in ascending order.Definition RVec.hxx:2502. Manipulation of indices; It is also possible to manipulated the RVecs acting on their indices. For example, ",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:14835,Usability,clear,clear,14835,"::RVecImpl< T > &&RHS);  ; RVecN & operator= (RVecN &&RHS);  ; RVecN & operator= (std::initializer_list< T > IL);  ; RVecN operator[] (const RVecN< V, M > &conds) const;  ; reference operator[] (size_type idx);  ; const_reference operator[] (size_type idx) const;  ;  Public Member Functions inherited from ROOT::Detail::VecOps::RVecImpl< T >;  RVecImpl (const RVecImpl &)=delete;  ;  ~RVecImpl ();  ; template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> ; void append (in_iter in_start, in_iter in_end);  Add the specified range to the end of the SmallVector. ;  ; void append (size_type NumInputs, const T &Elt);  Append NumInputs copies of Elt to the end. ;  ; void append (std::initializer_list< T > IL);  ; template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> ; void assign (in_iter in_start, in_iter in_end);  ; void assign (size_type NumElts, const T &Elt);  ; void assign (std::initializer_list< T > IL);  ; void clear ();  ; template<typename... ArgTypes> ; reference emplace_back (ArgTypes &&...Args);  ; iterator erase (const_iterator CI);  ; iterator erase (const_iterator CS, const_iterator CE);  ; iterator insert (iterator I, const T &Elt);  ; template<typename ItTy , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<ItTy>::iterator_category, std::input_iterator_tag>::value>::type> ; iterator insert (iterator I, ItTy From, ItTy To);  ; iterator insert (iterator I, size_type NumToInsert, const T &Elt);  ; void insert (iterator I, std::initializer_list< T > IL);  ; iterator insert (iterator I, T &&Elt);  ; RVecImpl & operator= (const RVecImpl &RHS);  ; RVecImpl & operator= (RVecImpl &&RHS);  ; void pop_back_n (size_type NumItems);  ; T pop_back_val ();  ; void reserve (size_type N",MatchSource.WIKI,doc/v632/classROOT_1_1VecOps_1_1RVec.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html
https://root.cern/doc/v632/classTCanvas.html:1383,Availability,avail,available,1383," Graphics pad. ; The Canvas class. ; A Canvas is an area mapped to a window directly under the control of the display manager. A ROOT session may have several canvases open at any given time.; A Canvas may be subdivided into independent graphical areas: the Pads. A canvas has a default pad which has the name of the canvas itself. An example of a Canvas layout is sketched in the picture below. This canvas contains two pads named P1 and P2. Both Canvas, P1 and P2 can be moved, grown, shrunk using the normal rules of the Display manager.; Once objects have been drawn in a canvas, they can be edited/moved by pointing directly to them. The cursor shape is changed to suggest the type of action that one can do on this object. Clicking with the right mouse button on an object pops-up a contextmenu with a complete list of actions possible on this object.; A graphical editor may be started from the canvas ""View"" menu under the menu entry ""Toolbar"".; An interactive HELP is available by clicking on the HELP button at the top right of the canvas. It gives a short explanation about the canvas' menus.; A canvas may be automatically divided into pads via TPad::Divide.; At creation time, no matter if in interactive or batch mode, the constructor defines the size of the canvas window (including the size of the window manager's decoration). To define precisely the graphics area size of a canvas in the interactive mode, the following four lines of code should be used: {; Double_t w = 600;; Double_t h = 600;; auto c = new TCanvas(""c"", ""c"", w, h);; c->SetWindowSize(w + (w - c->GetWw()), h + (h - c->GetWh()));; }; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; TCanvasThe Canvas class.Definition TCanvas.h:23; double; and in the batch mode simply do: c->SetCanvasSize(w,h);; If the canvas size exceeds the window size, scroll bars will be added to the canvas This allows to display very large canvases (even bigg",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:35356,Availability,error,error,35356,"r *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsiste",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:35445,Availability,error,error,35445,"eave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setu",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:35600,Availability,error,error,35600,"whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t Inheri",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:35777,Availability,error,error,35777,"st;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:38906,Availability,error,error,38906,"r delete (void *ptr, void *vp);  Only called by placement new when throwing an exception. ;  ; void operator delete[] (void *ptr);  Operator delete []. ;  ; void operator delete[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:54926,Availability,down,down,54926,"anvas along X in CM. ;  ; Size_t fYsizeReal;  Current size of canvas along Y in CM. ;  ; Size_t fYsizeUser;  User specified size of canvas along Y in CM. ;  ;  Protected Attributes inherited from TPad; Bool_t fAbsCoord;  Use absolute coordinates. ;  ; Double_t fAbsHNDC;  Absolute Height of pad along Y in NDC. ;  ; Double_t fAbsPixeltoXk;  Conversion coefficient for absolute pixel to X World. ;  ; Double_t fAbsPixeltoYk;  Conversion coefficient for absolute pixel to Y World. ;  ; Double_t fAbsWNDC;  Absolute Width of pad along X in NDC. ;  ; Double_t fAbsXlowNDC;  Absolute X top left corner of pad in NDC [0,1]. ;  ; Double_t fAbsYlowNDC;  Absolute Y top left corner of pad in NDC [0,1]. ;  ; Double_t fAspectRatio;  ratio of w/h in case of fixed ratio ;  ; Short_t fBorderMode;  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize;  pad bordersize in pixels ;  ; TCanvas * fCanvas {nullptr};  ! Pointer to mother canvas ;  ; Int_t fCGnx;  ! Size of the collide grid along x ;  ; Int_t fCGny;  ! Size of the collide grid along y ;  ; std::vector< Bool_t > fCollideGrid;  ! Grid used to find empty space when adding a box (Legend) in a pad ;  ; Bool_t fCopyGLDevice;  ! ;  ; Int_t fCrosshair;  Crosshair type (0 if no crosshair requested) ;  ; Int_t fCrosshairPos;  Position of crosshair. ;  ; Bool_t fEditable;  True if canvas is editable. ;  ; Bool_t fEmbeddedGL;  ! ;  ; TList * fExecs {nullptr};  List of commands to be executed when a pad event occurs. ;  ; Bool_t fFixedAspectRatio;  True if fixed aspect ratio. ;  ; TFrame * fFrame {nullptr};  ! Pointer to 2-D frame (if one exists) ;  ; Int_t fGLDevice;  ! OpenGL off-screen pixmap identifier ;  ; Bool_t fGridx;  Set to true if grid along X. ;  ; Bool_t fGridy;  Set to true if grid along Y. ;  ; Double_t fHNDC;  Height of pad along Y in Normalized Coordinates (NDC) ;  ; Int_t fLogx;  (=0 if X linear scale, =1 if log scale) ;  ; Int_t fLogy;  (=0 if Y linear scale, =1 if log scale) ;  ; Int_t fLogz;  (=0 if Z linear s",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:65668,Availability,failure,failure,65668,"t line 456 of file TCanvas.cxx. ◆ TCanvas() [6/6]. TCanvas::TCanvas ; (; const char * ; name, . Int_t ; ww, . Int_t ; wh, . Int_t ; winid . ). Create an embedded canvas, i.e. ; a canvas that is in a TGCanvas widget which is placed in a TGFrame. This ctor is only called via the TRootEmbeddedCanvas class.; If ""name"" starts with ""gl"" the canvas is ready to receive GL output. ; Definition at line 220 of file TCanvas.cxx. ◆ ~TCanvas(). TCanvas::~TCanvas ; (; ). override . Canvas destructor. ; Definition at line 674 of file TCanvas.cxx. Member Function Documentation. ◆ Browse(). void TCanvas::Browse ; (; TBrowser * ; b). overridevirtual . Browse. ; Reimplemented from TObject.; Definition at line 682 of file TCanvas.cxx. ◆ Build(). void TCanvas::Build ; (; ). private . Build a canvas. Called by all constructors. ; Definition at line 584 of file TCanvas.cxx. ◆ cd(). TVirtualPad * TCanvas::cd ; (; Int_t ; subpadnumber = 0). overridevirtual . Set current canvas & pad. ; Returns the new current pad, or 0 in case of failure. See TPad::cd() for an explanation of the parameter. ; Implements TVirtualPad.; Definition at line 716 of file TCanvas.cxx. ◆ Class(). static TClass * TCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 238 of file TCanvas.h. ◆ Clear(). void TCanvas::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all primitives from the canvas. ; If option ""D"" is specified, direct sub-pads are cleared but not deleted. This option is not recursive, i.e. pads in direct sub-pads are deleted. ; Implements TVirtualPad.; Definition at line 734 of file TCanvas.cxx. ◆ Cleared(). void TCanvas::Cleared ; (; TVirtualPad * ; pad). virtual . Emit pad Cleared signal. ; Definition at line 767 of file TCanvas.",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:77912,Availability,down,down,77912," TCanvas::GetWindowTopY ; (; ). Returns current top y position of window on screen. ; Definition at line 1219 of file TCanvas.cxx. ◆ GetWindowWidth(). UInt_t TCanvas::GetWindowWidth ; (; ); const. inline . Definition at line 161 of file TCanvas.h. ◆ GetWw(). UInt_t TCanvas::GetWw ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 163 of file TCanvas.h. ◆ GetXsizeReal(). Size_t TCanvas::GetXsizeReal ; (; ); const. inline . Definition at line 155 of file TCanvas.h. ◆ GetXsizeUser(). Size_t TCanvas::GetXsizeUser ; (; ); const. inline . Definition at line 153 of file TCanvas.h. ◆ GetYsizeReal(). Size_t TCanvas::GetYsizeReal ; (; ); const. inline . Definition at line 156 of file TCanvas.h. ◆ GetYsizeUser(). Size_t TCanvas::GetYsizeUser ; (; ); const. inline . Definition at line 154 of file TCanvas.h. ◆ HandleInput(). void TCanvas::HandleInput ; (; EEventType ; event, . Int_t ; px, . Int_t ; py . ). virtual . Handle Input Events. ; Handle input events, like button up/down in current canvas. ; Definition at line 1232 of file TCanvas.cxx. ◆ HasMenuBar(). Bool_t TCanvas::HasMenuBar ; (; ); const. inline . Definition at line 168 of file TCanvas.h. ◆ HighlightConnect(). void TCanvas::HighlightConnect ; (; const char * ; slot). virtual . This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot. ; Slot has to be defined ""UserFunction(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y)"" all parameters of UserFunction are taken from TCanvas::Highlighted ; Definition at line 1629 of file TCanvas.cxx. ◆ Highlighted(). void TCanvas::Highlighted ; (; TVirtualPad * ; pad, . TObject * ; obj, . Int_t ; x, . Int_t ; y . ). virtual . Emit Highlighted() signal. . pad is pointer to pad with highlighted histogram or graph; obj is pointer to highlighted histogram or graph; x is highlighted x bin for 1D histogram or highlighted x-th point for graph; y is highlighted y bin for 2D histogram (for 1D histogram or graph not in use",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:86717,Availability,avail,available,86717,"cxx. ◆ SetBatch(). void TCanvas::SetBatch ; (; Bool_t ; batch = kTRUE). overridevirtual . Toggle batch mode. ; However, if the canvas is created without a window then batch mode always stays set. ; Implements TVirtualPad.; Definition at line 1953 of file TCanvas.cxx. ◆ SetCanvasImp(). void TCanvas::SetCanvasImp ; (; TCanvasImp * ; i). inline . Definition at line 205 of file TCanvas.h. ◆ SetCanvasSize(). void TCanvas::SetCanvasSize ; (; UInt_t ; ww, . UInt_t ; wh . ). overridevirtual . Set Width and Height of canvas to ww and wh respectively. ; If ww and/or wh are greater than the current canvas window a scroll bar is automatically generated. Use this function to zoom in a canvas and navigate via the scroll bars. The Width and Height in this method are different from those given in the TCanvas constructors where these two dimension include the size of the window decoration whereas they do not in this method. When both ww==0 and wh==0, auto resize mode will be enabled again and canvas drawing area will automatically fit available window size ; Implements TVirtualPad.; Definition at line 1971 of file TCanvas.cxx. ◆ SetClickSelected(). void TCanvas::SetClickSelected ; (; TObject * ; obj). inline . Definition at line 209 of file TCanvas.h. ◆ SetClickSelectedPad(). void TCanvas::SetClickSelectedPad ; (; TPad * ; pad). inline . Definition at line 211 of file TCanvas.h. ◆ SetCursor(). void TCanvas::SetCursor ; (; ECursor ; cursor). overridevirtual . Set cursor. ; Implements TVirtualPad.; Definition at line 1985 of file TCanvas.cxx. ◆ SetDoubleBuffer(). void TCanvas::SetDoubleBuffer ; (; Int_t ; mode = 1). overridevirtual . Set Double Buffer On/Off. ; Implements TVirtualPad.; Definition at line 1994 of file TCanvas.cxx. ◆ SetFixedAspectRatio(). void TCanvas::SetFixedAspectRatio ; (; Bool_t ; fixed = kTRUE). overridevirtual . Fix canvas aspect ratio to current value if fixed is true. ; Implements TVirtualPad.; Definition at line 2012 of file TCanvas.cxx. ◆ SetFolder(). void TC",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:88916,Availability,error,error,88916," whether this canvas should be painted in grayscale, and re-paint it if necessary. ; Definition at line 2563 of file TCanvas.cxx. ◆ SetHighLightColor(). void TCanvas::SetHighLightColor ; (; Color_t ; col). inline . Definition at line 207 of file TCanvas.h. ◆ SetName(). void TCanvas::SetName ; (; const char * ; name = """"). overridevirtual . Set canvas name. In case name is an empty string, a default name is set. ; Implements TVirtualPad.; Reimplemented in TDialogCanvas.; Definition at line 2042 of file TCanvas.cxx. ◆ SetPadSave(). void TCanvas::SetPadSave ; (; TPad * ; pad). inline . Definition at line 216 of file TCanvas.h. ◆ SetRealAspectRatio(). bool TCanvas::SetRealAspectRatio ; (; const Int_t ; axis = 1). Function to resize a canvas so that the plot inside is shown in real aspect ratio. ; Parameters. [in]axis1 for resizing horizontally (x-axis) in order to get real aspect ratio, 2 for the resizing vertically (y-axis) . Returnsfalse if error is encountered, true otherwise; hpxpy->Draw();; c1->SetRealAspectRatio();; c1return c1Definition legend1.C:41. For defining the concept of real aspect ratio, it is assumed that x and y axes are in same units, e.g. both in MeV or both in ns.; You can resize either the width of the canvas or the height, but not both at the same time; Call this function AFTER drawing AND zooming (SetUserRange) your TGraph or Histogram, otherwise it cannot infer your actual axes lengths; This function ensures that the TFrame has a real aspect ratio, this does not mean that the full pad (i.e. the canvas or png output) including margins has exactly the same ratio; This function does not work if the canvas is divided in several subpads . Definition at line 2078 of file TCanvas.cxx. ◆ SetRetained(). void TCanvas::SetRetained ; (; Bool_t ; retained = kTRUE). inline . Definition at line 218 of file TCanvas.h. ◆ SetSelected(). void TCanvas::SetSelected ; (; TObject * ; obj). overridevirtual . Set selected canvas. ; Implements TVirtualPad.; Definition at",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:6526,Deployability,update,update,6526,"get ();  Used by friend class TCanvasImp. ;  ; void Draw (Option_t *option="""") override;  Draw a canvas. ;  ; TObject * DrawClone (Option_t *option="""") const override;  Draw a clone of this canvas A new canvas is created that is a clone of this canvas. ;  ; virtual TObject * DrawClonePad ();  Draw a clone of this canvas into the current pad In an interactive session, select the destination/current pad with the middle mouse button, then point to the canvas area to select the canvas context menu item DrawClonePad. ;  ; virtual void EditorBar ();  Get editor bar. ;  ; void EmbedInto (Int_t winid, Int_t ww, Int_t wh);  Embedded a canvas into a TRootEmbeddedCanvas. ;  ; void EnterLeave (TPad *prevSelPad, TObject *prevSelObj);  Generate kMouseEnter and kMouseLeave events depending on the previously selected object and the currently selected object. ;  ; void FeedbackMode (Bool_t set);  Turn rubberband feedback mode on or off. ;  ; void Flush ();  Flush canvas buffers. ;  ; void ForceUpdate ();  Force canvas update. ;  ; Bool_t GetAutoExec () const;  ; Int_t GetCanvasID () const override;  ; TCanvasImp * GetCanvasImp () const override;  ; TVirtualPadPainter * GetCanvasPainter ();  Access and (probably) creation of pad painter. ;  ; virtual void GetCanvasPar (Int_t &wtopx, Int_t &wtopy, UInt_t &ww, UInt_t &wh);  ; TObject * GetClickSelected () const;  ; TVirtualPad * GetClickSelectedPad () const;  ; TContextMenu * GetContextMenu () const;  ; const char * GetDISPLAY () const;  ; Int_t GetDoubleBuffer () const;  ; Int_t GetEvent () const override;  ; Int_t GetEventX () const override;  ; Int_t GetEventY () const override;  ; Color_t GetHighLightColor () const override;  ; TVirtualPad * GetPadSave () const override;  ; TObject * GetSelected () const override;  ; Option_t * GetSelectedOpt () const;  ; TVirtualPad * GetSelectedPad () const override;  ; Int_t GetSelectedX () const;  ; Int_t GetSelectedY () const;  ; Bool_t GetShowEditor () const;  ; Bool_t GetShowEventStatus () c",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:12389,Deployability,update,update,12389,"j) override;  Set selected canvas. ;  ; void SetSelectedPad (TPad *pad);  ; void SetSupportGL (Bool_t support);  ; void SetTitle (const char *title="""") override;  Set canvas title. ;  ; void SetWindowPosition (Int_t x, Int_t y);  Set canvas window position. ;  ; void SetWindowSize (UInt_t ww, UInt_t wh);  Set canvas window size. ;  ; void Show ();  Show canvas. ;  ; virtual void Size (Float_t xsizeuser=0, Float_t ysizeuser=0);  Set the canvas scale in centimeters. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void ToggleAutoExec ();  Toggle pad auto execution of list of TExecs. ;  ; virtual void ToggleEditor ();  Toggle editor. ;  ; virtual void ToggleEventStatus ();  Toggle event statusbar. ;  ; virtual void ToggleToolBar ();  Toggle toolbar. ;  ; virtual void ToggleToolTips ();  Toggle tooltip display. ;  ; void Update () override;  Update canvas pad buffers. ;  ; void UpdateAsync () override;  Asynchronous pad update. ;  ; void UseCurrentStyle () override;  Force a copy of current style for all objects in canvas. ;  ; Bool_t UseGL () const;  ;  Public Member Functions inherited from TPad;  TPad ();  Pad default constructor. ;  ;  TPad (const char *name, const char *title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color=-1, Short_t bordersize=-1, Short_t bordermode=-2);  Pad constructor. ;  ;  ~TPad () override;  Pad destructor. ;  ; void AbsCoordinates (Bool_t set) override;  ; Double_t AbsPixeltoX (Int_t px) override;  ; virtual void AbsPixeltoXY (Int_t xpixel, Int_t ypixel, Double_t &x, Double_t &y);  Convert absolute pixel into X/Y coordinates. ;  ; Double_t AbsPixeltoY (Int_t py) override;  ; void AddExec (const char *name, const char *command) override;  Add a new TExec object to the list of Execs. ;  ; virtual void AutoExec ();  Execute the list of Execs when a pad event occurs. ;  ; void Browse (TBrowser *b) override;  Browse pad. ;  ; TL",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:31487,Deployability,update,update,31487,"000) override;  Set tool tip text associated with this pad. ;  ; void SetVertical (Bool_t vert=kTRUE) override;  Set pad vertical (default) or horizontal. ;  ; void SetView (TView *view=nullptr) override;  Set the current TView. Delete previous view if view=0. ;  ; void SetViewer3D (TVirtualViewer3D *viewer3d) override;  ; void ShowGuidelines (TObject *object, const Int_t event, const char mode='i', const bool cling=true) override;  Shows lines to indicate if a TAttBBox2D object is aligned to the center or to another object, shows distance arrows if two objects on screen have the same distance to another object Call from primitive in Execute Event, in ButtonMotion after the new coordinates have been set, to 'stick' once when button is up to delete lines. ;  ; virtual void StartEditing ();  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update () override;  Update pad. ;  ; void UpdateAsync () override;  Asynchronous pad update. ;  ; void UseCurrentStyle () override;  Force a copy of current style for all objects in pad. ;  ; Int_t UtoAbsPixel (Double_t u) const override;  Convert X NDC to absolute pixel. ;  ; Int_t UtoPixel (Double_t u) const override;  Convert X NDC to pixel. ;  ; Int_t VtoAbsPixel (Double_t v) const override;  Convert Y NDC to absolute pixel. ;  ; Int_t VtoPixel (Double_t v) const override;  Convert Y NDC to pixel. ;  ; TObject * WaitPrimitive (const char *pname="""", const char *emode="""") override;  Loop and sleep until a primitive with name=pname is found in the pad. ;  ; virtual void x3d (Option_t *type="""");  Deprecated: use TPad::GetViewer3D() instead. ;  ; Int_t XtoAbsPixel (Double_t x) const override;  Convert X coordinate to absolute pixel. ;  ; Double_t XtoPad (Double_t x) const override;  Convert x from X to pad. ;  ; Int_t XtoPixel (Double_t x) const override;  Convert X coordinate to pixel. ;  ; virtual void XYtoAbsPixel (Double_t x, Double_t y, Int_t",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:73120,Deployability,update,update,73120," kMouseEnter and kMouseLeave events depending on the previously selected object and the currently selected object. ; Does nothing if the selected object does not change. ; Definition at line 1072 of file TCanvas.cxx. ◆ ExecuteEvent(). void TCanvas::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overrideprotectedvirtual . Execute action corresponding to one event. ; This member function must be implemented to realize the action corresponding to the mouse click on the object in the canvas; Only handle mouse motion events in TCanvas, all other events are ignored for the time being ; Reimplemented from TObject.; Definition at line 1108 of file TCanvas.cxx. ◆ FeedbackMode(). void TCanvas::FeedbackMode ; (; Bool_t ; set). Turn rubberband feedback mode on or off. ; Definition at line 1126 of file TCanvas.cxx. ◆ Flush(). void TCanvas::Flush ; (; ). Flush canvas buffers. ; Definition at line 1143 of file TCanvas.cxx. ◆ ForceUpdate(). void TCanvas::ForceUpdate ; (; ). Force canvas update. ; Definition at line 1175 of file TCanvas.cxx. ◆ GetAutoExec(). Bool_t TCanvas::GetAutoExec ; (; ); const. inline . Definition at line 152 of file TCanvas.h. ◆ GetCanvasID(). Int_t TCanvas::GetCanvasID ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 157 of file TCanvas.h. ◆ GetCanvasImp(). TCanvasImp * TCanvas::GetCanvasImp ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 158 of file TCanvas.h. ◆ GetCanvasPainter(). TVirtualPadPainter * TCanvas::GetCanvasPainter ; (; ). Access and (probably) creation of pad painter. ; Definition at line 2603 of file TCanvas.cxx. ◆ GetCanvasPar(). virtual void TCanvas::GetCanvasPar ; (; Int_t & ; wtopx, . Int_t & ; wtopy, . UInt_t & ; ww, . UInt_t & ; wh . ). inlinevirtual . Definition at line 165 of file TCanvas.h. ◆ GetClickSelected(). TObject * TCanvas::GetClickSelected ; (; ); const. inline . Definition at line 142 of file TCanvas.h. ◆ GetClickSelectedPad(). TVirtualPad ",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:93213,Deployability,update,update,93213,"arency is supported. ; Definition at line 2463 of file TCanvas.cxx. ◆ ToggleAutoExec(). void TCanvas::ToggleAutoExec ; (; ). virtual . Toggle pad auto execution of list of TExecs. ; Definition at line 2409 of file TCanvas.cxx. ◆ ToggleEditor(). void TCanvas::ToggleEditor ; (; ). virtual . Toggle editor. ; Definition at line 2440 of file TCanvas.cxx. ◆ ToggleEventStatus(). void TCanvas::ToggleEventStatus ; (; ). virtual . Toggle event statusbar. ; Definition at line 2418 of file TCanvas.cxx. ◆ ToggleToolBar(). void TCanvas::ToggleToolBar ; (; ). virtual . Toggle toolbar. ; Definition at line 2429 of file TCanvas.cxx. ◆ ToggleToolTips(). void TCanvas::ToggleToolTips ; (; ). virtual . Toggle tooltip display. ; Definition at line 2451 of file TCanvas.cxx. ◆ Update(). void TCanvas::Update ; (; ). overridevirtual . Update canvas pad buffers. ; Implements TVirtualPad.; Definition at line 2476 of file TCanvas.cxx. ◆ UpdateAsync(). void TCanvas::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2532 of file TCanvas.cxx. ◆ UseCurrentStyle(). void TCanvas::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in canvas. ; Reimplemented from TObject.; Definition at line 1183 of file TCanvas.cxx. ◆ UseGL(). Bool_t TCanvas::UseGL ; (; ); const. inline . Definition at line 228 of file TCanvas.h. Friends And Related Symbol Documentation. ◆ TCanvasImp. friend class TCanvasImp. friend . Definition at line 25 of file TCanvas.h. ◆ TInterpreter. friend class TInterpreter. friend . Definition at line 28 of file TCanvas.h. ◆ TThread. friend class TThread. friend . Definition at line 27 of file TCa",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:93260,Deployability,update,update,93260,"utoExec(). void TCanvas::ToggleAutoExec ; (; ). virtual . Toggle pad auto execution of list of TExecs. ; Definition at line 2409 of file TCanvas.cxx. ◆ ToggleEditor(). void TCanvas::ToggleEditor ; (; ). virtual . Toggle editor. ; Definition at line 2440 of file TCanvas.cxx. ◆ ToggleEventStatus(). void TCanvas::ToggleEventStatus ; (; ). virtual . Toggle event statusbar. ; Definition at line 2418 of file TCanvas.cxx. ◆ ToggleToolBar(). void TCanvas::ToggleToolBar ; (; ). virtual . Toggle toolbar. ; Definition at line 2429 of file TCanvas.cxx. ◆ ToggleToolTips(). void TCanvas::ToggleToolTips ; (; ). virtual . Toggle tooltip display. ; Definition at line 2451 of file TCanvas.cxx. ◆ Update(). void TCanvas::Update ; (; ). overridevirtual . Update canvas pad buffers. ; Implements TVirtualPad.; Definition at line 2476 of file TCanvas.cxx. ◆ UpdateAsync(). void TCanvas::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2532 of file TCanvas.cxx. ◆ UseCurrentStyle(). void TCanvas::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in canvas. ; Reimplemented from TObject.; Definition at line 1183 of file TCanvas.cxx. ◆ UseGL(). Bool_t TCanvas::UseGL ; (; ); const. inline . Definition at line 228 of file TCanvas.h. Friends And Related Symbol Documentation. ◆ TCanvasImp. friend class TCanvasImp. friend . Definition at line 25 of file TCanvas.h. ◆ TInterpreter. friend class TInterpreter. friend . Definition at line 28 of file TCanvas.h. ◆ TThread. friend class TThread. friend . Definition at line 27 of file TCanvas.h. ◆ TWebCanvas. friend class TWebCanvas. friend . Definition at line 26",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:93329,Deployability,update,update,93329,"utoExec(). void TCanvas::ToggleAutoExec ; (; ). virtual . Toggle pad auto execution of list of TExecs. ; Definition at line 2409 of file TCanvas.cxx. ◆ ToggleEditor(). void TCanvas::ToggleEditor ; (; ). virtual . Toggle editor. ; Definition at line 2440 of file TCanvas.cxx. ◆ ToggleEventStatus(). void TCanvas::ToggleEventStatus ; (; ). virtual . Toggle event statusbar. ; Definition at line 2418 of file TCanvas.cxx. ◆ ToggleToolBar(). void TCanvas::ToggleToolBar ; (; ). virtual . Toggle toolbar. ; Definition at line 2429 of file TCanvas.cxx. ◆ ToggleToolTips(). void TCanvas::ToggleToolTips ; (; ). virtual . Toggle tooltip display. ; Definition at line 2451 of file TCanvas.cxx. ◆ Update(). void TCanvas::Update ; (; ). overridevirtual . Update canvas pad buffers. ; Implements TVirtualPad.; Definition at line 2476 of file TCanvas.cxx. ◆ UpdateAsync(). void TCanvas::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2532 of file TCanvas.cxx. ◆ UseCurrentStyle(). void TCanvas::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in canvas. ; Reimplemented from TObject.; Definition at line 1183 of file TCanvas.cxx. ◆ UseGL(). Bool_t TCanvas::UseGL ; (; ); const. inline . Definition at line 228 of file TCanvas.h. Friends And Related Symbol Documentation. ◆ TCanvasImp. friend class TCanvasImp. friend . Definition at line 25 of file TCanvas.h. ◆ TInterpreter. friend class TInterpreter. friend . Definition at line 28 of file TCanvas.h. ◆ TThread. friend class TThread. friend . Definition at line 27 of file TCanvas.h. ◆ TWebCanvas. friend class TWebCanvas. friend . Definition at line 26",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:69532,Energy Efficiency,allocate,allocated,69532," along Y . Definition at line 386 of file TCanvas.cxx. ◆ CopyPixmaps(). void TCanvas::CopyPixmaps ; (; ). overrideprivatevirtual . Copy the canvas pixmap of the pad to the canvas. ; Implements TVirtualPad.; Definition at line 833 of file TCanvas.cxx. ◆ CreatePainter(). void TCanvas::CreatePainter ; (; ). private . Probably, TPadPainter must be placed in a separate ROOT module - ""padpainter"" (the same as ""histpainter""). ; But now, it's directly in a gpad dir, so, in case of default painter, no *.so should be loaded, no need in plugin managers. May change in future. ; Definition at line 2582 of file TCanvas.cxx. ◆ DeclFileName(). static const char * TCanvas::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 238 of file TCanvas.h. ◆ Delete(). void TCanvas::Delete ; (; Option_t * ; option = """"). inlineoverridevirtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Definition at line 120 of file TCanvas.h. ◆ DeleteCanvasPainter(). void TCanvas::DeleteCanvasPainter ; (; ). assert on IsBatch() == false? ; Definition at line 2613 of file TCanvas.cxx. ◆ Destructor(). void TCanvas::Destructor ; (; ). Actual canvas destructor. ; Definition at line 692 of file TCanvas.cxx. ◆ DisconnectWidget(). void TCanvas::DisconnectWidget ; (; ). Used by friend class TCanvasImp. ; Definition at line 2545 of file TCanvas.cxx. ◆ Draw(). void TCanvas::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw a canvas. ; If a canvas with the name is already on the screen, the canvas is repainted. This function is useful when a canvas object has been saved in a Root file. One can then do: Root > TFile::Open(""file.root"");; Root > canvas->Draw();; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledD",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:91639,Energy Efficiency,allocate,allocated,91639,". UInt_t ; wh . ). Set canvas window size. ; Definition at line 2172 of file TCanvas.cxx. ◆ Show(). void TCanvas::Show ; (; ). Show canvas. ; Definition at line 2211 of file TCanvas.cxx. ◆ Size(). void TCanvas::Size ; (; Float_t ; xsize = 0, . Float_t ; ysize = 0 . ). virtual . Set the canvas scale in centimeters. ; This information is used by PostScript to set the page size.; Parameters. [in]xsizesize of the canvas in centimeters along X ; [in]ysizesize of the canvas in centimeters along Y. if xsize and ysize are not equal to 0, then the scale factors will be computed to keep the ratio ysize/xsize independently of the canvas size (parts of the physical canvas will be unused).; if xsize = 0 and ysize is not zero, then xsize will be computed to fit to the current canvas scale. If the canvas is resized, a new value for xsize will be recomputed. In this case the aspect ratio is not preserved.; if both xsize = 0 and ysize = 0, then the scaling is automatic. the largest dimension will be allocated a size of 20 centimeters. ; Definition at line 2200 of file TCanvas.cxx. ◆ Streamer(). void TCanvas::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Reimplemented in TDialogCanvas, and TInspectCanvas.; Definition at line 2220 of file TCanvas.cxx. ◆ StreamerNVirtual(). void TCanvas::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 238 of file TCanvas.h. ◆ SupportAlpha(). Bool_t TCanvas::SupportAlpha ; (; ). static . Static function returning ""true"" if transparency is supported. ; Definition at line 2463 of file TCanvas.cxx. ◆ ToggleAutoExec(). void TCanvas::ToggleAutoExec ; (; ). virtual . Toggle pad auto execution of list of TExecs. ; Definition at line 2409 of file TCanvas.cxx. ◆ ToggleEditor(). void TCanvas::ToggleEditor ; (; ). virtual . Toggle editor. ; Definition at line 2440 of file TCanvas.cxx. ◆ ToggleEventStatus(). void TCanvas::ToggleEventStatus ; (; ). virtual . Toggle ev",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:6285,Integrability,depend,depending,6285,"a new canvas at a random position. ;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; void DeleteCanvasPainter ();  assert on IsBatch() == false? ;  ; void Destructor ();  Actual canvas destructor. ;  ; void DisconnectWidget ();  Used by friend class TCanvasImp. ;  ; void Draw (Option_t *option="""") override;  Draw a canvas. ;  ; TObject * DrawClone (Option_t *option="""") const override;  Draw a clone of this canvas A new canvas is created that is a clone of this canvas. ;  ; virtual TObject * DrawClonePad ();  Draw a clone of this canvas into the current pad In an interactive session, select the destination/current pad with the middle mouse button, then point to the canvas area to select the canvas context menu item DrawClonePad. ;  ; virtual void EditorBar ();  Get editor bar. ;  ; void EmbedInto (Int_t winid, Int_t ww, Int_t wh);  Embedded a canvas into a TRootEmbeddedCanvas. ;  ; void EnterLeave (TPad *prevSelPad, TObject *prevSelObj);  Generate kMouseEnter and kMouseLeave events depending on the previously selected object and the currently selected object. ;  ; void FeedbackMode (Bool_t set);  Turn rubberband feedback mode on or off. ;  ; void Flush ();  Flush canvas buffers. ;  ; void ForceUpdate ();  Force canvas update. ;  ; Bool_t GetAutoExec () const;  ; Int_t GetCanvasID () const override;  ; TCanvasImp * GetCanvasImp () const override;  ; TVirtualPadPainter * GetCanvasPainter ();  Access and (probably) creation of pad painter. ;  ; virtual void GetCanvasPar (Int_t &wtopx, Int_t &wtopy, UInt_t &ww, UInt_t &wh);  ; TObject * GetClickSelected () const;  ; TVirtualPad * GetClickSelectedPad () const;  ; TContextMenu * GetContextMenu () const;  ; const char * GetDISPLAY () const;  ; Int_t GetDoubleBuffer () const;  ; Int_t GetEvent () const override;  ; Int_t GetEventX () const override;  ; Int_t GetEventY () const override;  ; Color_t GetHighLightColor () const override;  ; TVirtualPad * GetPadSave () const override;  ; TObject * GetSelected (",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:13845,Integrability,rout,routine,13845,";  ;  ~TPad () override;  Pad destructor. ;  ; void AbsCoordinates (Bool_t set) override;  ; Double_t AbsPixeltoX (Int_t px) override;  ; virtual void AbsPixeltoXY (Int_t xpixel, Int_t ypixel, Double_t &x, Double_t &y);  Convert absolute pixel into X/Y coordinates. ;  ; Double_t AbsPixeltoY (Int_t py) override;  ; void AddExec (const char *name, const char *command) override;  Add a new TExec object to the list of Execs. ;  ; virtual void AutoExec ();  Execute the list of Execs when a pad event occurs. ;  ; void Browse (TBrowser *b) override;  Browse pad. ;  ; TLegend * BuildLegend (Double_t x1=0.3, Double_t y1=0.21, Double_t x2=0.3, Double_t y2=0.21, const char *title="""", Option_t *option="""") override;  Build a legend from the graphical objects in the pad. ;  ; TVirtualPad * cd (Int_t subpadnumber=0) override;  Set Current pad. ;  ; void Clear (Option_t *option="""") override;  Delete all pad primitives. ;  ; Int_t Clip (Double_t *x, Double_t *y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt) override;  Clipping routine: Cohen Sutherland algorithm. ;  ; virtual Int_t Clip (Float_t *x, Float_t *y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt);  Clipping routine: Cohen Sutherland algorithm. ;  ; virtual Int_t ClippingCode (Double_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2);  Compute the endpoint codes for TPad::Clip. ;  ; virtual Int_t ClipPolygon (Int_t n, Double_t *x, Double_t *y, Int_t nn, Double_t *xc, Double_t *yc, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt);  Clip polygon using the Sutherland-Hodgman algorithm. ;  ; void Close (Option_t *option="""") override;  Delete all primitives in pad and pad itself. ;  ; void CloseToolTip (TObject *tip) override;  Hide tool tip. ;  ; void CopyPixmap () override;  Copy the pixmap of the pad to the canvas. ;  ; void CopyPixmaps () override;  Copy the sub-pixmaps of the pad to the canvas. ;  ; TObject * CreateToolTip (const TBox *b, c",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:14006,Integrability,rout,routine,14006,"(Int_t xpixel, Int_t ypixel, Double_t &x, Double_t &y);  Convert absolute pixel into X/Y coordinates. ;  ; Double_t AbsPixeltoY (Int_t py) override;  ; void AddExec (const char *name, const char *command) override;  Add a new TExec object to the list of Execs. ;  ; virtual void AutoExec ();  Execute the list of Execs when a pad event occurs. ;  ; void Browse (TBrowser *b) override;  Browse pad. ;  ; TLegend * BuildLegend (Double_t x1=0.3, Double_t y1=0.21, Double_t x2=0.3, Double_t y2=0.21, const char *title="""", Option_t *option="""") override;  Build a legend from the graphical objects in the pad. ;  ; TVirtualPad * cd (Int_t subpadnumber=0) override;  Set Current pad. ;  ; void Clear (Option_t *option="""") override;  Delete all pad primitives. ;  ; Int_t Clip (Double_t *x, Double_t *y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt) override;  Clipping routine: Cohen Sutherland algorithm. ;  ; virtual Int_t Clip (Float_t *x, Float_t *y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt);  Clipping routine: Cohen Sutherland algorithm. ;  ; virtual Int_t ClippingCode (Double_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2);  Compute the endpoint codes for TPad::Clip. ;  ; virtual Int_t ClipPolygon (Int_t n, Double_t *x, Double_t *y, Int_t nn, Double_t *xc, Double_t *yc, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt);  Clip polygon using the Sutherland-Hodgman algorithm. ;  ; void Close (Option_t *option="""") override;  Delete all primitives in pad and pad itself. ;  ; void CloseToolTip (TObject *tip) override;  Hide tool tip. ;  ; void CopyPixmap () override;  Copy the pixmap of the pad to the canvas. ;  ; void CopyPixmaps () override;  Copy the sub-pixmaps of the pad to the canvas. ;  ; TObject * CreateToolTip (const TBox *b, const char *text, Long_t delayms) override;  Create a tool tip and return its pointer. ;  ; void DeleteExec (const char *name) override;  Remove TExec name from the l",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:23169,Integrability,rout,routine,23169,"to X. ;  ; Double_t PadtoY (Double_t y) const override;  Convert y from pad to Y. ;  ; void Paint (Option_t *option="""") override;  Paint all primitives in pad. ;  ; void PaintBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Option_t *option="""") override;  Paint box in CurrentPad World coordinates. ;  ; void PaintFillArea (Int_t n, Double_t *x, Double_t *y, Option_t *option="""") override;  Paint fill area in CurrentPad World coordinates. ;  ; void PaintFillArea (Int_t n, Float_t *x, Float_t *y, Option_t *option="""") override;  ; void PaintFillAreaHatches (Int_t n, Double_t *x, Double_t *y, Int_t FillStyle);  This function paints hatched fill area according to the FillStyle value The convention for the Hatch is the following: ;  ; void PaintFillAreaNDC (Int_t n, Double_t *x, Double_t *y, Option_t *option="""") override;  Paint fill area in CurrentPad NDC coordinates. ;  ; void PaintHatches (Double_t dy, Double_t angle, Int_t nn, Double_t *xx, Double_t *yy);  This routine draw hatches inclined with the angle ""angle"" and spaced of ""dy"" in normalized device coordinates in the surface defined by n,xx,yy. ;  ; void PaintLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Paint line in CurrentPad World coordinates. ;  ; void PaintLine3D (Double_t *p1, Double_t *p2) override;  Paint 3-D line in the CurrentPad. ;  ; void PaintLine3D (Float_t *p1, Float_t *p2) override;  Paint 3-D line in the CurrentPad. ;  ; void PaintLineNDC (Double_t u1, Double_t v1, Double_t u2, Double_t v2) override;  Paint line in normalized coordinates. ;  ; void PaintModified () override;  Traverse pad hierarchy and (re)paint only modified pads. ;  ; void PaintPadFrame (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax) override;  Paint histogram/graph frame. ;  ; void PaintPolyLine (Int_t n, Double_t *x, Double_t *y, Option_t *option="""") override;  Paint polyline in CurrentPad World coordinates. ;  ; void PaintPolyLine (Int_t n, Float_t *x, Float_t *y, Option_t *option=""""",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:35362,Integrability,message,message,35362,"r *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsiste",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:35783,Integrability,message,message,35783,"st;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:36573,Integrability,message,message,36573,"method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual B",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:38912,Integrability,message,message,38912,"r delete (void *ptr, void *vp);  Only called by placement new when throwing an exception. ;  ; void operator delete[] (void *ptr);  Operator delete []. ;  ; void operator delete[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:39103,Integrability,message,message,39103,"id *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Ch",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:51037,Integrability,depend,depending,51037,"ts ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; void Init ();  Initialize the TCanvas members. Called by all constructors. ;  ;  Protected Member Functions inherited from TPad; void DestroyExternalViewer3D ();  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a box. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depending on the event type. ;  ; void PaintBorder (Color_t color, Bool_t tops);  Paint the pad border. ;  ; void PaintBorderPS (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t bmode, Int_t bsize, Int_t dark, Int_t light) override;  Paint a frame border with Postscript. ;  ; void PaintDate ();  Paint the current date and time if the option Date is set on via gStyle->SetOptDate() Paint the current file name if the option File is set on via gStyle->SetOptFile() ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitives in this pad on the C++ source file out. ;  ; void SetBatch (Bool_t batch=kTRUE) override;  Set pad in batch mode. ;  ;  Protected Member Functions inherited from TVirtualPad; void * GetSender () override;  true when resizing the pad ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:72152,Integrability,depend,depending,72152,"e canvas context menu item DrawClonePad. ; Note that the original canvas may have subpads. ; Definition at line 921 of file TCanvas.cxx. ◆ DrawEventStatus(). void TCanvas::DrawEventStatus ; (; Int_t ; event, . Int_t ; px, . Int_t ; py, . TObject * ; selected . ). private . Report name and title of primitive below the cursor. ; This function is called when the option ""Event Status"" in the canvas menu ""Options"" is selected. ; Definition at line 976 of file TCanvas.cxx. ◆ EditorBar(). void TCanvas::EditorBar ; (; ). virtual . Get editor bar. ; Definition at line 1037 of file TCanvas.cxx. ◆ EmbedInto(). void TCanvas::EmbedInto ; (; Int_t ; winid, . Int_t ; ww, . Int_t ; wh . ). Embedded a canvas into a TRootEmbeddedCanvas. ; This method is only called via TRootEmbeddedCanvas::AdoptCanvas. ; Definition at line 1046 of file TCanvas.cxx. ◆ EnterLeave(). void TCanvas::EnterLeave ; (; TPad * ; prevSelPad, . TObject * ; prevSelObj . ). Generate kMouseEnter and kMouseLeave events depending on the previously selected object and the currently selected object. ; Does nothing if the selected object does not change. ; Definition at line 1072 of file TCanvas.cxx. ◆ ExecuteEvent(). void TCanvas::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overrideprotectedvirtual . Execute action corresponding to one event. ; This member function must be implemented to realize the action corresponding to the mouse click on the object in the canvas; Only handle mouse motion events in TCanvas, all other events are ignored for the time being ; Reimplemented from TObject.; Definition at line 1108 of file TCanvas.cxx. ◆ FeedbackMode(). void TCanvas::FeedbackMode ; (; Bool_t ; set). Turn rubberband feedback mode on or off. ; Definition at line 1126 of file TCanvas.cxx. ◆ Flush(). void TCanvas::Flush ; (; ). Flush canvas buffers. ; Definition at line 1143 of file TCanvas.cxx. ◆ ForceUpdate(). void TCanvas::ForceUpdate ; (; ). Force canvas update. ; Definition at line 1175 of file TCanvas",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:82443,Integrability,rout,routine,82443,"devirtual . Implements TVirtualPad.; Definition at line 181 of file TCanvas.h. ◆ operator=(). TCanvas & TCanvas::operator= ; (; const TCanvas & ; rhs). privatedelete . ◆ Paint(). void TCanvas::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint canvas. ; Implements TVirtualPad.; Definition at line 1541 of file TCanvas.cxx. ◆ Pick() [1/2]. TPad * TCanvas::Pick ; (; Int_t ; px, . Int_t ; py, . TObject * ; prevSelObj . ). virtual . Prepare for pick, call TPad::Pick() and when selected object is different from previous then emit Picked() signal. ; Definition at line 1551 of file TCanvas.cxx. ◆ Pick() [2/2]. TPad * TCanvas::Pick ; (; Int_t ; px, . Int_t ; py, . TObjLink *& ; pickobj . ). inlineoverridevirtual . Search for an object at pixel position px,py. ; Check if point is in this pad.; If yes, check if it is in one of the sub-pads; If found in the pad, compute closest distance of approach to each primitive.; If one distance of approach is found to be within the limit Distancemaximum the corresponding primitive is selected and the routine returns. ; Reimplemented from TPad.; Definition at line 183 of file TCanvas.h. ◆ Picked(). void TCanvas::Picked ; (; TPad * ; selpad, . TObject * ; selected, . Int_t ; event . ). virtual . Emit Picked() signal. ; Definition at line 1591 of file TCanvas.cxx. ◆ ProcessedEvent(). void TCanvas::ProcessedEvent ; (; Int_t ; event, . Int_t ; x, . Int_t ; y, . TObject * ; selected . ). virtual . Emit ProcessedEvent() signal. ; Definition at line 1651 of file TCanvas.cxx. ◆ RaiseWindow(). void TCanvas::RaiseWindow ; (; ). Raise canvas window. ; Definition at line 1742 of file TCanvas.cxx. ◆ ResetDrawn(). void TCanvas::ResetDrawn ; (; ). inline . Definition at line 192 of file TCanvas.h. ◆ ResetUpdated(). void TCanvas::ResetUpdated ; (; ). inline . Definition at line 193 of file TCanvas.h. ◆ Resize(). void TCanvas::Resize ; (; Option_t * ; option = """"). virtual . Recompute canvas parameters following a X11 Resize. ; Definition at lin",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:2980,Modifiability,inherit,inherited,2980,"nition RSha256.hxx:106; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; TCanvasThe Canvas class.Definition TCanvas.h:23; double; and in the batch mode simply do: c->SetCanvasSize(w,h);; If the canvas size exceeds the window size, scroll bars will be added to the canvas This allows to display very large canvases (even bigger than the screen size). The Following example shows how to proceed. {; auto c = new TCanvas(""c"",""c"");; c->SetCanvasSize(1500, 1500);; c->SetWindowSize(500, 500);; }. Definition at line 23 of file TCanvas.h. Public Types; enum  { ;   kShowEventStatus = (1ULL << ( 15 )); , kAutoExec = (1ULL << ( 16 )); , kMenuBar = (1ULL << ( 17 )); , kShowToolBar = (1ULL << ( 18 )); , ;   kShowEditor = (1ULL << ( 19 )); , kMoveOpaque = (1ULL << ( 20 )); , kResizeOpaque = (1ULL << ( 21 )); , kIsGrayscale = (1ULL << ( 22 )); , ;   kShowToolTips = (1ULL << ( 23 )). };  ;  Public Types inherited from TPad; enum  { ;   kFraming = (1ULL << ( 6 )); , kHori = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kPrintingPS = (1ULL << ( 11 )); , ;   kCannotMove = (1ULL << ( 12 )); , kClearAfterCR = (1ULL << ( 14 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TCanvas (Bool_t build=kTRUE);  Canvas default constructor. ;  ;  TCanvas (const char *name, const char *title, Int_t wtopx, Int_t wtopy, Int_t ww, Int_t wh);  Create a new canvas. ;  ;  TCanvas (const char",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:3229,Modifiability,inherit,inherited,3229,"ndow size, scroll bars will be added to the canvas This allows to display very large canvases (even bigger than the screen size). The Following example shows how to proceed. {; auto c = new TCanvas(""c"",""c"");; c->SetCanvasSize(1500, 1500);; c->SetWindowSize(500, 500);; }. Definition at line 23 of file TCanvas.h. Public Types; enum  { ;   kShowEventStatus = (1ULL << ( 15 )); , kAutoExec = (1ULL << ( 16 )); , kMenuBar = (1ULL << ( 17 )); , kShowToolBar = (1ULL << ( 18 )); , ;   kShowEditor = (1ULL << ( 19 )); , kMoveOpaque = (1ULL << ( 20 )); , kResizeOpaque = (1ULL << ( 21 )); , kIsGrayscale = (1ULL << ( 22 )); , ;   kShowToolTips = (1ULL << ( 23 )). };  ;  Public Types inherited from TPad; enum  { ;   kFraming = (1ULL << ( 6 )); , kHori = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kPrintingPS = (1ULL << ( 11 )); , ;   kCannotMove = (1ULL << ( 12 )); , kClearAfterCR = (1ULL << ( 14 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TCanvas (Bool_t build=kTRUE);  Canvas default constructor. ;  ;  TCanvas (const char *name, const char *title, Int_t wtopx, Int_t wtopy, Int_t ww, Int_t wh);  Create a new canvas. ;  ;  TCanvas (const char *name, const char *title, Int_t ww, Int_t wh);  Create a new canvas at a random position. ;  ;  TCanvas (const char *name, const char *title="""", Int_t form=1);  Create a new canvas with a predefined size form. ;  ;  TCa",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:12550,Modifiability,inherit,inherited,12550,"; void SetWindowPosition (Int_t x, Int_t y);  Set canvas window position. ;  ; void SetWindowSize (UInt_t ww, UInt_t wh);  Set canvas window size. ;  ; void Show ();  Show canvas. ;  ; virtual void Size (Float_t xsizeuser=0, Float_t ysizeuser=0);  Set the canvas scale in centimeters. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void ToggleAutoExec ();  Toggle pad auto execution of list of TExecs. ;  ; virtual void ToggleEditor ();  Toggle editor. ;  ; virtual void ToggleEventStatus ();  Toggle event statusbar. ;  ; virtual void ToggleToolBar ();  Toggle toolbar. ;  ; virtual void ToggleToolTips ();  Toggle tooltip display. ;  ; void Update () override;  Update canvas pad buffers. ;  ; void UpdateAsync () override;  Asynchronous pad update. ;  ; void UseCurrentStyle () override;  Force a copy of current style for all objects in canvas. ;  ; Bool_t UseGL () const;  ;  Public Member Functions inherited from TPad;  TPad ();  Pad default constructor. ;  ;  TPad (const char *name, const char *title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color=-1, Short_t bordersize=-1, Short_t bordermode=-2);  Pad constructor. ;  ;  ~TPad () override;  Pad destructor. ;  ; void AbsCoordinates (Bool_t set) override;  ; Double_t AbsPixeltoX (Int_t px) override;  ; virtual void AbsPixeltoXY (Int_t xpixel, Int_t ypixel, Double_t &x, Double_t &y);  Convert absolute pixel into X/Y coordinates. ;  ; Double_t AbsPixeltoY (Int_t py) override;  ; void AddExec (const char *name, const char *command) override;  Add a new TExec object to the list of Execs. ;  ; virtual void AutoExec ();  Execute the list of Execs when a pad event occurs. ;  ; void Browse (TBrowser *b) override;  Browse pad. ;  ; TLegend * BuildLegend (Double_t x1=0.3, Double_t y1=0.21, Double_t x2=0.3, Double_t y2=0.21, const char *title="""", Option_t *option="""") override;  Build a legend from the graphical objec",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:15531,Modifiability,inherit,inheritance,15531,"and pad itself. ;  ; void CloseToolTip (TObject *tip) override;  Hide tool tip. ;  ; void CopyPixmap () override;  Copy the pixmap of the pad to the canvas. ;  ; void CopyPixmaps () override;  Copy the sub-pixmaps of the pad to the canvas. ;  ; TObject * CreateToolTip (const TBox *b, const char *text, Long_t delayms) override;  Create a tool tip and return its pointer. ;  ; void DeleteExec (const char *name) override;  Remove TExec name from the list of Execs. ;  ; void DeleteToolTip (TObject *tip) override;  Delete tool tip object. ;  ; void Divide (Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) override;  Automatic pad generation by division. ;  ; virtual void DivideSquare (Int_t n, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0);  ""n"" is the total number of sub-pads. ;  ; void Draw (Option_t *option="""") override;  Draw Pad in Current pad (re-parent pad if necessary). ;  ; void DrawClassObject (const TObject *obj, Option_t *option="""") override;  Draw class inheritance tree of the class to which obj belongs. ;  ; void DrawCollideGrid ();  This method draws the collide grid on top of the canvas. ;  ; virtual void DrawCrosshair ();  Function called to draw a crosshair in the canvas. ;  ; TH1F * DrawFrame (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax, const char *title="""") override;  Draw an empty pad frame with X and Y axis. ;  ; virtual void EventPave ();  ; void ExecuteEventAxis (Int_t event, Int_t px, Int_t py, TAxis *axis) override;  Execute action corresponding to one event for a TAxis object (called by TAxis::ExecuteEvent.) This member function is called when an axis is clicked with the locator. ;  ; TObject * FindObject (const char *name) const override;  Search if object named name is inside this pad or in pads inside this pad. ;  ; TObject * FindObject (const TObject *obj) const override;  Search if obj is in pad or in pads inside this pad. ;  ; Double_t GetAbsHNDC () const override;  ; Double_t Ge",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:32949,Modifiability,inherit,inherited,32949,"*emode="""") override;  Loop and sleep until a primitive with name=pname is found in the pad. ;  ; virtual void x3d (Option_t *type="""");  Deprecated: use TPad::GetViewer3D() instead. ;  ; Int_t XtoAbsPixel (Double_t x) const override;  Convert X coordinate to absolute pixel. ;  ; Double_t XtoPad (Double_t x) const override;  Convert x from X to pad. ;  ; Int_t XtoPixel (Double_t x) const override;  Convert X coordinate to pixel. ;  ; virtual void XYtoAbsPixel (Double_t x, Double_t y, Int_t &xpixel, Int_t &ypixel) const;  Convert X/Y into absolute pixel coordinates. ;  ; virtual void XYtoPixel (Double_t x, Double_t y, Int_t &xpixel, Int_t &ypixel) const;  Convert X/Y into pixel coordinates. ;  ; Int_t YtoAbsPixel (Double_t y) const override;  Convert Y coordinate to absolute pixel. ;  ; Double_t YtoPad (Double_t y) const override;  Convert y from Y to pad. ;  ; Int_t YtoPixel (Double_t y) const override;  Convert Y coordinate to pixel. ;  ;  Public Member Functions inherited from TVirtualPad;  TVirtualPad ();  VirtualPad default constructor. ;  ;  TVirtualPad (const char *name, const char *title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color=19, Short_t bordersize=4, Short_t bordermode=1);  VirtualPad constructor. ;  ; virtual ~TVirtualPad ();  VirtualPad destructor. ;  ; TClass * IsA () const override;  ; Bool_t IsBeingResized () const;  ; virtual Bool_t PadInHighlightMode () const;  Should always return false, unless you can highlight selected object in pad. ;  ; virtual Bool_t PadInSelectionMode () const;  Should always return false unless you have non-standard picking. ;  ; virtual void PopTopLevelSelectable ();  Does nothing, unless you implement your own picking. ;  ; virtual void PushSelectableObject (TObject *obj);  Does nothing, unless you implement your own picking. ;  ; virtual void PushTopLevelSelectable (TObject *top);  Does nothing, unless you implement your own picking. ;  ; virtual void RangeAxisChanged ();  ; void Streamer (TB",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:34155,Modifiability,inherit,inherited,34155," xup, Double_t yup, Color_t color=19, Short_t bordersize=4, Short_t bordermode=1);  VirtualPad constructor. ;  ; virtual ~TVirtualPad ();  VirtualPad destructor. ;  ; TClass * IsA () const override;  ; Bool_t IsBeingResized () const;  ; virtual Bool_t PadInHighlightMode () const;  Should always return false, unless you can highlight selected object in pad. ;  ; virtual Bool_t PadInSelectionMode () const;  Should always return false unless you have non-standard picking. ;  ; virtual void PopTopLevelSelectable ();  Does nothing, unless you implement your own picking. ;  ; virtual void PushSelectableObject (TObject *obj);  Does nothing, unless you implement your own picking. ;  ; virtual void PushTopLevelSelectable (TObject *top);  Does nothing, unless you implement your own picking. ;  ; virtual void RangeAxisChanged ();  ; void Streamer (TBuffer &) override;  Stream an object of class TVirtualPad. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UnZoomed ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void DrawClass ",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:35144,Modifiability,inherit,inheritance,35144,"ctions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOptio",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:36671,Modifiability,inherit,inherits,36671,"ject with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notificat",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:36788,Modifiability,inherit,inherits,36788,"const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *re",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:39410,Modifiability,inherit,inherited,39410,"Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:40915,Modifiability,inherit,inherited,40915,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:42095,Modifiability,inherit,inherited,42095,"al ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttPad;  TAttPad ();  Constructor. ;  ; virtual ~TAttPad ();  Destructor. ;  ; virtual void Copy (TAttPad &attpad) const;  copy function ;  ; Float_t GetAfile () const;  ; Float_t GetAstat () const;  ; Float_t GetBottomMargin () const;  ; Int_t GetFrameBorderMode () const;  ; Width_t GetFrameBorderSize () const;  ; Color_t GetFrameFillColor () const;  ; Style_t GetFrameFillStyle () const;  ; Color_t GetFrameLineColor () const;  ; Style_t GetFrameLineStyle () const;  ; Width_t GetFrameLineWidth () const;  ; Float_t GetLeftMargin () const;  ; Float_t GetRightMargin () const;  ; Float_t GetTopMargin () const;  ; Float_t GetXfile () const;  ; Float_t GetXstat () const;  ; Float_t GetYfile () const;  ; Float_t GetYstat () const;  ; virtual void ResetAttPad (Option_t *option="""");  Reset pad attributes. ;  ; virtual void SetAfile (Float_t afile);  ; virtual void SetAstat (Float_t astat);  ; virtual void SetBottomMargin (Float_t bottommargin);  Set Pad bo",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:44111,Modifiability,inherit,inherited,44111,"irtual void SetBottomMargin (Float_t bottommargin);  Set Pad bottom margin in fraction of the pad height. ;  ; void SetFrameBorderMode (Int_t mode=1);  ; void SetFrameBorderSize (Width_t size=1);  ; void SetFrameFillColor (Color_t color=1);  ; void SetFrameFillStyle (Style_t styl=0);  ; void SetFrameLineColor (Color_t color=1);  ; void SetFrameLineStyle (Style_t styl=0);  ; void SetFrameLineWidth (Width_t width=1);  ; virtual void SetLeftMargin (Float_t leftmargin);  Set Pad left margin in fraction of the pad width. ;  ; virtual void SetMargin (Float_t left, Float_t right, Float_t bottom, Float_t top);  Set all margins. ;  ; virtual void SetRightMargin (Float_t rightmargin);  Set Pad right margin in fraction of the pad width. ;  ; virtual void SetTopMargin (Float_t topmargin);  Set Pad top margin in fraction of the pad height. ;  ; virtual void SetXfile (Float_t xfile);  ; virtual void SetXstat (Float_t xstat);  ; virtual void SetYfile (Float_t yfile);  ; virtual void SetYstat (Float_t ystat);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal);  Activate signal without a",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:46079,Modifiability,inherit,inherited,46079," Activate signal with single parameter. ;  ; template<typename... T> ; void EmitVA (const char *signal_name, Int_t, const T &... params);  Emit a signal with a varying number of arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox2D; virtual ~TAttBBox2D ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TCanvas * MakeDefCanvas ();  Static function to build a default canvas. ;  ; static Bool_t SaveAll (const std::vector< TPad * > &={}, const char *filename="""", Option_t *option="""");  Save provided pads/canvases into the image file(s) Filename can include printf argument for image number - like ""image%03d.png"". ;  ; static void SetFolder (Bool_t isfolder=kTRUE);  If isfolder=kTRUE, the canvas can be browsed like a folder by default a canvas is not browsable. ;  ; static Bool_t SupportAlpha ();  Static function returning ""true"" if transparency is supported. ;  ;  Static Public Member Functions inherited from TPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static const",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:46990,Modifiability,inherit,inherited,46990,"Box2D; virtual ~TAttBBox2D ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TCanvas * MakeDefCanvas ();  Static function to build a default canvas. ;  ; static Bool_t SaveAll (const std::vector< TPad * > &={}, const char *filename="""", Option_t *option="""");  Save provided pads/canvases into the image file(s) Filename can include printf argument for image number - like ""image%03d.png"". ;  ; static void SetFolder (Bool_t isfolder=kTRUE);  If isfolder=kTRUE, the canvas can be browsed like a folder by default a canvas is not browsable. ;  ; static Bool_t SupportAlpha ();  Static function returning ""true"" if transparency is supported. ;  ;  Static Public Member Functions inherited from TPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DrawColorTable ();  Static function to Display Color Table in a pad. ;  ; static Int_t GetMaxPickDistance ();  Static function (see also TPad::SetMaxPickDistance) ;  ; static void SetMaxPickDistance (Int_t maxPick=5);  static function to set the maximum Pick Distance fgMaxPickDistance This parameter is used in TPad::Pick to select an object if its DistancetoPrimitive returns a value < fgMaxPickDistance The default value is 5 pixels. ;  ;  Static Public Member Functions inherited from TVirtualPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualPad *& Pad ();  Return the current pad for the current thread. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static con",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:47652,Modifiability,inherit,inherited,47652,"lder=kTRUE, the canvas can be browsed like a folder by default a canvas is not browsable. ;  ; static Bool_t SupportAlpha ();  Static function returning ""true"" if transparency is supported. ;  ;  Static Public Member Functions inherited from TPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DrawColorTable ();  Static function to Display Color Table in a pad. ;  ; static Int_t GetMaxPickDistance ();  Static function (see also TPad::SetMaxPickDistance) ;  ; static void SetMaxPickDistance (Int_t maxPick=5);  static function to set the maximum Pick Distance fgMaxPickDistance This parameter is used in TPad::Pick to select an object if its DistancetoPrimitive returns a value < fgMaxPickDistance The default value is 5 pixels. ;  ;  Static Public Member Functions inherited from TVirtualPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualPad *& Pad ();  Return the current pad for the current thread. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Nam",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:47950,Modifiability,inherit,inherited,47950,t char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DrawColorTable ();  Static function to Display Color Table in a pad. ;  ; static Int_t GetMaxPickDistance ();  Static function (see also TPad::SetMaxPickDistance) ;  ; static void SetMaxPickDistance (Int_t maxPick=5);  static function to set the maximum Pick Distance fgMaxPickDistance This parameter is used in TPad::Pick to select an object if its DistancetoPrimitive returns a value < fgMaxPickDistance The default value is 5 pixels. ;  ;  Static Public Member Functions inherited from TVirtualPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualPad *& Pad ();  Return the current pad for the current thread. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * D,MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:48468,Modifiability,inherit,inherited,48468,"FileName ();  ; static TVirtualPad *& Pad ();  Return the current pad for the current thread. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection betw",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:48680,Modifiability,inherit,inherited,48680,"FileName ();  ; static TVirtualPad *& Pad ();  Return the current pad for the current thread. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection betw",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:48892,Modifiability,inherit,inherited,48892,"FileName ();  ; static TVirtualPad *& Pad ();  Return the current pad for the current thread. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection betw",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:49103,Modifiability,inherit,inherited,49103,"FileName ();  ; static TVirtualPad *& Pad ();  Return the current pad for the current thread. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttPad; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection betw",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:50278,Modifiability,inherit,inherited,50278,"();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; void Init ();  Initialize the TCanvas members. Called by all constructors. ;  ;  Protected Member Functions inherited from TPad; void DestroyExternalViewer3D ();  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a box. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depending on the event type. ;  ; void PaintBorder (Color_t color, Bool_t tops);  Paint the pad border. ;  ; void PaintBorderPS (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t bmode, Int_t bsize, Int_t dark, Int_t light) override;  Paint a frame border with Postscript. ;  ; void PaintDate ();  Paint t",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:50707,Modifiability,inherit,inherited,50707,"ceiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TAttBBox2D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; void Init ();  Initialize the TCanvas members. Called by all constructors. ;  ;  Protected Member Functions inherited from TPad; void DestroyExternalViewer3D ();  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a box. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depending on the event type. ;  ; void PaintBorder (Color_t color, Bool_t tops);  Paint the pad border. ;  ; void PaintBorderPS (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t bmode, Int_t bsize, Int_t dark, Int_t light) override;  Paint a frame border with Postscript. ;  ; void PaintDate ();  Paint the current date and time if the option Date is set on via gStyle->SetOptDate() Paint the current file name if the option File is set on via gStyle->SetOptFile() ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitives in this pad on the C++ source file out. ;  ; void SetBatch (Bool_t batch=kTRUE) override;  Set pad in batch mode. ;  ;  Protected Member Functions inherited from TVir",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:51750,Modifiability,inherit,inherited,51750,"; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depending on the event type. ;  ; void PaintBorder (Color_t color, Bool_t tops);  Paint the pad border. ;  ; void PaintBorderPS (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t bmode, Int_t bsize, Int_t dark, Int_t light) override;  Paint a frame border with Postscript. ;  ; void PaintDate ();  Paint the current date and time if the option Date is set on via gStyle->SetOptDate() Paint the current file name if the option File is set on via gStyle->SetOptFile() ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitives in this pad on the C++ source file out. ;  ; void SetBatch (Bool_t batch=kTRUE) override;  Set pad in batch mode. ;  ;  Protected Member Functions inherited from TVirtualPad; void * GetSender () override;  true when resizing the pad ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; Bool_t fBatch;  ! True when in batchmode ;  ; Int_t fCanvasID;  ! Canvas identifier ;  ; TCanvasImp * fCanvasImp;  ! Window system specific canvas implementation ;  ; TAttCanvas fCatt;  Canvas attributes. ;  ; UInt_t fCh;  Height of the canvas along Y (pixels) ;  ; TObject * fClickSelected;  ! Currently click-selected object ;  ; TPad * fClickSelectedPad;  ! Pad containing currently click-selected object ;  ; TContextMenu * fContextMenu;  ! Context menu pointer ;  ; UInt_t fCw;  Width of the canvas along X (pixels) ;  ; TString fDISPLAY;  Name of destination screen. ;  ; Int_t fDoubleBuffer;  Double buffer flag (0=off, 1=on) ;  ; Bool_t fDrawn;  ! Set to True when the Draw method i",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:51869,Modifiability,inherit,inherited,51869,"; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void HideToolTip (Int_t event);  Hide tool tip depending on the event type. ;  ; void PaintBorder (Color_t color, Bool_t tops);  Paint the pad border. ;  ; void PaintBorderPS (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t bmode, Int_t bsize, Int_t dark, Int_t light) override;  Paint a frame border with Postscript. ;  ; void PaintDate ();  Paint the current date and time if the option Date is set on via gStyle->SetOptDate() Paint the current file name if the option File is set on via gStyle->SetOptFile() ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitives in this pad on the C++ source file out. ;  ; void SetBatch (Bool_t batch=kTRUE) override;  Set pad in batch mode. ;  ;  Protected Member Functions inherited from TVirtualPad; void * GetSender () override;  true when resizing the pad ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; Bool_t fBatch;  ! True when in batchmode ;  ; Int_t fCanvasID;  ! Canvas identifier ;  ; TCanvasImp * fCanvasImp;  ! Window system specific canvas implementation ;  ; TAttCanvas fCatt;  Canvas attributes. ;  ; UInt_t fCh;  Height of the canvas along Y (pixels) ;  ; TObject * fClickSelected;  ! Currently click-selected object ;  ; TPad * fClickSelectedPad;  ! Pad containing currently click-selected object ;  ; TContextMenu * fContextMenu;  ! Context menu pointer ;  ; UInt_t fCw;  Width of the canvas along X (pixels) ;  ; TString fDISPLAY;  Name of destination screen. ;  ; Int_t fDoubleBuffer;  Double buffer flag (0=off, 1=on) ;  ; Bool_t fDrawn;  ! Set to True when the Draw method i",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:52080,Modifiability,inherit,inherited,52080,"olor_t color, Bool_t tops);  Paint the pad border. ;  ; void PaintBorderPS (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t bmode, Int_t bsize, Int_t dark, Int_t light) override;  Paint a frame border with Postscript. ;  ; void PaintDate ();  Paint the current date and time if the option Date is set on via gStyle->SetOptDate() Paint the current file name if the option File is set on via gStyle->SetOptFile() ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitives in this pad on the C++ source file out. ;  ; void SetBatch (Bool_t batch=kTRUE) override;  Set pad in batch mode. ;  ;  Protected Member Functions inherited from TVirtualPad; void * GetSender () override;  true when resizing the pad ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; Bool_t fBatch;  ! True when in batchmode ;  ; Int_t fCanvasID;  ! Canvas identifier ;  ; TCanvasImp * fCanvasImp;  ! Window system specific canvas implementation ;  ; TAttCanvas fCatt;  Canvas attributes. ;  ; UInt_t fCh;  Height of the canvas along Y (pixels) ;  ; TObject * fClickSelected;  ! Currently click-selected object ;  ; TPad * fClickSelectedPad;  ! Pad containing currently click-selected object ;  ; TContextMenu * fContextMenu;  ! Context menu pointer ;  ; UInt_t fCw;  Width of the canvas along X (pixels) ;  ; TString fDISPLAY;  Name of destination screen. ;  ; Int_t fDoubleBuffer;  Double buffer flag (0=off, 1=on) ;  ; Bool_t fDrawn;  ! Set to True when the Draw method is called ;  ; Int_t fEvent;  ! Type of current or last handled event ;  ; Int_t fEventX;  ! Last X mouse position in canvas ;  ; Int_t fEventY;  ! Last Y mouse position in canvas ;  ; Color_t fHighLightColor;  Highlight ",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:54306,Modifiability,inherit,inherited,54306,"ted object ;  ; TString fSelectedOpt;  ! Drawing option of selected object ;  ; TPad * fSelectedPad;  ! Pad containing currently selected object ;  ; Int_t fSelectedX;  ! X of selected object ;  ; Int_t fSelectedY;  ! Y of selected object ;  ; Bool_t fUpdated;  ! Set to True when Update method was called ;  ; Bool_t fUpdating;  ! True when Updating the canvas ;  ; Bool_t fUseGL;  ! True when rendering is with GL ;  ; UInt_t fWindowHeight;  Height of window (including menubar, borders, etc.) ;  ; Int_t fWindowTopX;  Top X position of window (in pixels) ;  ; Int_t fWindowTopY;  Top Y position of window (in pixels) ;  ; UInt_t fWindowWidth;  Width of window (including borders, etc.) ;  ; Size_t fXsizeReal;  Current size of canvas along X in CM. ;  ; Size_t fXsizeUser;  User specified size of canvas along X in CM. ;  ; Size_t fYsizeReal;  Current size of canvas along Y in CM. ;  ; Size_t fYsizeUser;  User specified size of canvas along Y in CM. ;  ;  Protected Attributes inherited from TPad; Bool_t fAbsCoord;  Use absolute coordinates. ;  ; Double_t fAbsHNDC;  Absolute Height of pad along Y in NDC. ;  ; Double_t fAbsPixeltoXk;  Conversion coefficient for absolute pixel to X World. ;  ; Double_t fAbsPixeltoYk;  Conversion coefficient for absolute pixel to Y World. ;  ; Double_t fAbsWNDC;  Absolute Width of pad along X in NDC. ;  ; Double_t fAbsXlowNDC;  Absolute X top left corner of pad in NDC [0,1]. ;  ; Double_t fAbsYlowNDC;  Absolute Y top left corner of pad in NDC [0,1]. ;  ; Double_t fAspectRatio;  ratio of w/h in case of fixed ratio ;  ; Short_t fBorderMode;  Bordermode (-1=down, 0 = no border, 1=up) ;  ; Short_t fBorderSize;  pad bordersize in pixels ;  ; TCanvas * fCanvas {nullptr};  ! Pointer to mother canvas ;  ; Int_t fCGnx;  ! Size of the collide grid along x ;  ; Int_t fCGny;  ! Size of the collide grid along y ;  ; std::vector< Bool_t > fCollideGrid;  ! Grid used to find empty space when adding a box (Legend) in a pad ;  ; Bool_t fCopyGLDevice;  ! ;  ; Int_t",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:58962,Modifiability,inherit,inherited,58962,"le_t fVtoPixelk;  Conversion coefficient for V NDC to pixel. ;  ; Double_t fWNDC;  Width of pad along X in Normalized Coordinates (NDC) ;  ; Double_t fX1;  X of lower X coordinate. ;  ; Double_t fX2;  X of upper X coordinate. ;  ; Double_t fXlowNDC;  X bottom left corner of pad in NDC [0,1]. ;  ; Double_t fXtoAbsPixelk;  Conversion coefficient for X World to absolute pixel. ;  ; Double_t fXtoPixel;  xpixel = fXtoPixelk + fXtoPixel*xworld ;  ; Double_t fXtoPixelk;  Conversion coefficient for X World to pixel. ;  ; Double_t fXUpNDC;  ; Double_t fY1;  Y of lower Y coordinate. ;  ; Double_t fY2;  Y of upper Y coordinate. ;  ; Double_t fYlowNDC;  Y bottom left corner of pad in NDC [0,1]. ;  ; Double_t fYtoAbsPixelk;  Conversion coefficient for Y World to absolute pixel. ;  ; Double_t fYtoPixel;  ypixel = fYtoPixelk + fYtoPixel*yworld ;  ; Double_t fYtoPixelk;  Conversion coefficient for Y World to pixel. ;  ; Double_t fYUpNDC;  ;  Protected Attributes inherited from TVirtualPad; Bool_t fResizing;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttPad; Float_t fAfile;  Alignment for the file name. ;  ; Float_t fAstat;  Alignment for the statistics. ;  ; Float_t fBottomMargin;  BottomMargin. ;  ; Int_t fFrameBorderMode;  Pad frame border mode. ;  ; Width_t fFrameBorderSize;  Pad frame border size. ;  ; Color_t fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:59033,Modifiability,inherit,inherited,59033,"le_t fVtoPixelk;  Conversion coefficient for V NDC to pixel. ;  ; Double_t fWNDC;  Width of pad along X in Normalized Coordinates (NDC) ;  ; Double_t fX1;  X of lower X coordinate. ;  ; Double_t fX2;  X of upper X coordinate. ;  ; Double_t fXlowNDC;  X bottom left corner of pad in NDC [0,1]. ;  ; Double_t fXtoAbsPixelk;  Conversion coefficient for X World to absolute pixel. ;  ; Double_t fXtoPixel;  xpixel = fXtoPixelk + fXtoPixel*xworld ;  ; Double_t fXtoPixelk;  Conversion coefficient for X World to pixel. ;  ; Double_t fXUpNDC;  ; Double_t fY1;  Y of lower Y coordinate. ;  ; Double_t fY2;  Y of upper Y coordinate. ;  ; Double_t fYlowNDC;  Y bottom left corner of pad in NDC [0,1]. ;  ; Double_t fYtoAbsPixelk;  Conversion coefficient for Y World to absolute pixel. ;  ; Double_t fYtoPixel;  ypixel = fYtoPixelk + fYtoPixel*yworld ;  ; Double_t fYtoPixelk;  Conversion coefficient for Y World to pixel. ;  ; Double_t fYUpNDC;  ;  Protected Attributes inherited from TVirtualPad; Bool_t fResizing;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttPad; Float_t fAfile;  Alignment for the file name. ;  ; Float_t fAstat;  Alignment for the statistics. ;  ; Float_t fBottomMargin;  BottomMargin. ;  ; Int_t fFrameBorderMode;  Pad frame border mode. ;  ; Width_t fFrameBorderSize;  Pad frame border size. ;  ; Color_t fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:59194,Modifiability,inherit,inherited,59194,"r X coordinate. ;  ; Double_t fXlowNDC;  X bottom left corner of pad in NDC [0,1]. ;  ; Double_t fXtoAbsPixelk;  Conversion coefficient for X World to absolute pixel. ;  ; Double_t fXtoPixel;  xpixel = fXtoPixelk + fXtoPixel*xworld ;  ; Double_t fXtoPixelk;  Conversion coefficient for X World to pixel. ;  ; Double_t fXUpNDC;  ; Double_t fY1;  Y of lower Y coordinate. ;  ; Double_t fY2;  Y of upper Y coordinate. ;  ; Double_t fYlowNDC;  Y bottom left corner of pad in NDC [0,1]. ;  ; Double_t fYtoAbsPixelk;  Conversion coefficient for Y World to absolute pixel. ;  ; Double_t fYtoPixel;  ypixel = fYtoPixelk + fYtoPixel*yworld ;  ; Double_t fYtoPixelk;  Conversion coefficient for Y World to pixel. ;  ; Double_t fYUpNDC;  ;  Protected Attributes inherited from TVirtualPad; Bool_t fResizing;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttPad; Float_t fAfile;  Alignment for the file name. ;  ; Float_t fAstat;  Alignment for the statistics. ;  ; Float_t fBottomMargin;  BottomMargin. ;  ; Int_t fFrameBorderMode;  Pad frame border mode. ;  ; Width_t fFrameBorderSize;  Pad frame border size. ;  ; Color_t fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to ",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:59327,Modifiability,inherit,inherited,59327,"for X World to absolute pixel. ;  ; Double_t fXtoPixel;  xpixel = fXtoPixelk + fXtoPixel*xworld ;  ; Double_t fXtoPixelk;  Conversion coefficient for X World to pixel. ;  ; Double_t fXUpNDC;  ; Double_t fY1;  Y of lower Y coordinate. ;  ; Double_t fY2;  Y of upper Y coordinate. ;  ; Double_t fYlowNDC;  Y bottom left corner of pad in NDC [0,1]. ;  ; Double_t fYtoAbsPixelk;  Conversion coefficient for Y World to absolute pixel. ;  ; Double_t fYtoPixel;  ypixel = fYtoPixelk + fYtoPixel*yworld ;  ; Double_t fYtoPixelk;  Conversion coefficient for Y World to pixel. ;  ; Double_t fYUpNDC;  ;  Protected Attributes inherited from TVirtualPad; Bool_t fResizing;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttPad; Float_t fAfile;  Alignment for the file name. ;  ; Float_t fAstat;  Alignment for the statistics. ;  ; Float_t fBottomMargin;  BottomMargin. ;  ; Int_t fFrameBorderMode;  Pad frame border mode. ;  ; Width_t fFrameBorderSize;  Pad frame border size. ;  ; Color_t fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ; ",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:60259,Modifiability,inherit,inherited,60259," from TAttPad; Float_t fAfile;  Alignment for the file name. ;  ; Float_t fAstat;  Alignment for the statistics. ;  ; Float_t fBottomMargin;  BottomMargin. ;  ; Int_t fFrameBorderMode;  Pad frame border mode. ;  ; Width_t fFrameBorderSize;  Pad frame border size. ;  ; Color_t fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static Bool_t fgIsFolder = kFALSE;  Indicates if canvas can be browsed as a folder. ;  ;  Static Protected Attributes inherited from TPad; static Int_t fgMaxPickDistance = 5;  Maximum Pick Distance. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TCanvas (const TCanvas &canvas)=delete;  ; void Build ();  Build a canvas. Called by all constructors. ;  ; void CopyPixmaps () override;  Copy the canvas pixmap of the pad to the canvas. ;  ; void CreatePainter ();  Probably, TPadPainter must be placed in a separate ROOT module - ""padpainter"" (the same as ""histpainter""). ;  ; void DrawEventStatus (Int_t event, Int_t x, Int_t y, TObject *selected);  Report name and title of primitive below the cursor. ;  ; TCanvas & operator= (const TCanv",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:60590,Modifiability,inherit,inherited,60590," fFrameFillColor;  Pad frame fill color. ;  ; Style_t fFrameFillStyle;  Pad frame fill style. ;  ; Color_t fFrameLineColor;  Pad frame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static Bool_t fgIsFolder = kFALSE;  Indicates if canvas can be browsed as a folder. ;  ;  Static Protected Attributes inherited from TPad; static Int_t fgMaxPickDistance = 5;  Maximum Pick Distance. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TCanvas (const TCanvas &canvas)=delete;  ; void Build ();  Build a canvas. Called by all constructors. ;  ; void CopyPixmaps () override;  Copy the canvas pixmap of the pad to the canvas. ;  ; void CreatePainter ();  Probably, TPadPainter must be placed in a separate ROOT module - ""padpainter"" (the same as ""histpainter""). ;  ; void DrawEventStatus (Int_t event, Int_t x, Int_t y, TObject *selected);  Report name and title of primitive below the cursor. ;  ; TCanvas & operator= (const TCanvas &rhs)=delete;  ; void RunAutoExec ();  Execute the list of TExecs in the current pad. ;  . Friends; class TCanvasImp;  ; class TInterpreter;  ; class TThread;  ; class TWebCanvas;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepSt",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:60705,Modifiability,inherit,inherited,60705,"ame line color. ;  ; Style_t fFrameLineStyle;  Pad frame line style. ;  ; Width_t fFrameLineWidth;  Pad frame line width. ;  ; Float_t fLeftMargin;  LeftMargin. ;  ; Float_t fRightMargin;  RightMargin. ;  ; Float_t fTopMargin;  TopMargin. ;  ; Float_t fXfile;  X position where to draw the file name. ;  ; Float_t fXstat;  X position where to draw the statistics. ;  ; Float_t fYfile;  Y position where to draw the file name. ;  ; Float_t fYstat;  Y position where to draw the statistics. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static Bool_t fgIsFolder = kFALSE;  Indicates if canvas can be browsed as a folder. ;  ;  Static Protected Attributes inherited from TPad; static Int_t fgMaxPickDistance = 5;  Maximum Pick Distance. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TCanvas (const TCanvas &canvas)=delete;  ; void Build ();  Build a canvas. Called by all constructors. ;  ; void CopyPixmaps () override;  Copy the canvas pixmap of the pad to the canvas. ;  ; void CreatePainter ();  Probably, TPadPainter must be placed in a separate ROOT module - ""padpainter"" (the same as ""histpainter""). ;  ; void DrawEventStatus (Int_t event, Int_t x, Int_t y, TObject *selected);  Report name and title of primitive below the cursor. ;  ; TCanvas & operator= (const TCanvas &rhs)=delete;  ; void RunAutoExec ();  Execute the list of TExecs in the current pad. ;  . Friends; class TCanvasImp;  ; class TInterpreter;  ; class TThread;  ; class TWebCanvas;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *s",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:61570,Modifiability,inherit,inherited,61570,"rited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TCanvas (const TCanvas &canvas)=delete;  ; void Build ();  Build a canvas. Called by all constructors. ;  ; void CopyPixmaps () override;  Copy the canvas pixmap of the pad to the canvas. ;  ; void CreatePainter ();  Probably, TPadPainter must be placed in a separate ROOT module - ""padpainter"" (the same as ""histpainter""). ;  ; void DrawEventStatus (Int_t event, Int_t x, Int_t y, TObject *selected);  Report name and title of primitive below the cursor. ;  ; TCanvas & operator= (const TCanvas &rhs)=delete;  ; void RunAutoExec ();  Execute the list of TExecs in the current pad. ;  . Friends; class TCanvasImp;  ; class TInterpreter;  ; class TThread;  ; class TWebCanvas;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  . #include <TCanvas.h>. Inheritance diagram for TCanvas:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. ano",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:61676,Modifiability,inherit,inherited,61676,"rited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Private Member Functions;  TCanvas (const TCanvas &canvas)=delete;  ; void Build ();  Build a canvas. Called by all constructors. ;  ; void CopyPixmaps () override;  Copy the canvas pixmap of the pad to the canvas. ;  ; void CreatePainter ();  Probably, TPadPainter must be placed in a separate ROOT module - ""padpainter"" (the same as ""histpainter""). ;  ; void DrawEventStatus (Int_t event, Int_t x, Int_t y, TObject *selected);  Report name and title of primitive below the cursor. ;  ; TCanvas & operator= (const TCanvas &rhs)=delete;  ; void RunAutoExec ();  Execute the list of TExecs in the current pad. ;  . Friends; class TCanvasImp;  ; class TInterpreter;  ; class TThread;  ; class TWebCanvas;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  . #include <TCanvas.h>. Inheritance diagram for TCanvas:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. ano",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:69048,Modifiability,plugin,plugin,69048,"s the window size in pixels along X ; [in]whis the window size in pixels along Y . Definition at line 475 of file TCanvas.cxx. ◆ Constructor() [4/4]. void TCanvas::Constructor ; (; const char * ; name, . const char * ; title, . Int_t ; ww, . Int_t ; wh . ). Create a new canvas at a random position. ; Parameters. [in]namecanvas name ; [in]titlecanvas title ; [in]wwis the window size in pixels along X (if ww < 0 the menubar is not shown) ; [in]whis the window size in pixels along Y . Definition at line 386 of file TCanvas.cxx. ◆ CopyPixmaps(). void TCanvas::CopyPixmaps ; (; ). overrideprivatevirtual . Copy the canvas pixmap of the pad to the canvas. ; Implements TVirtualPad.; Definition at line 833 of file TCanvas.cxx. ◆ CreatePainter(). void TCanvas::CreatePainter ; (; ). private . Probably, TPadPainter must be placed in a separate ROOT module - ""padpainter"" (the same as ""histpainter""). ; But now, it's directly in a gpad dir, so, in case of default painter, no *.so should be loaded, no need in plugin managers. May change in future. ; Definition at line 2582 of file TCanvas.cxx. ◆ DeclFileName(). static const char * TCanvas::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 238 of file TCanvas.h. ◆ Delete(). void TCanvas::Delete ; (; Option_t * ; option = """"). inlineoverridevirtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Definition at line 120 of file TCanvas.h. ◆ DeleteCanvasPainter(). void TCanvas::DeleteCanvasPainter ; (; ). assert on IsBatch() == false? ; Definition at line 2613 of file TCanvas.cxx. ◆ Destructor(). void TCanvas::Destructor ; (; ). Actual canvas destructor. ; Definition at line 692 of file TCanvas.cxx. ◆ DisconnectWidget(). void TCanvas::DisconnectWidget ; (; ). Used by friend class TCanvasImp. ; Definition at line 2545 of file TCanvas.cxx. ◆ Draw",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:85425,Modifiability,variab,variable,85425,"rted before extension except PDF and ROOT files. In last case PDF or ROOT file will contain all pads. Parameter option only used when output into PDF/PS files If TCanvas::SaveAll() called without arguments - all existing canvases will be stored in allcanvases.pdf file. ; Definition at line 2641 of file TCanvas.cxx. ◆ SavePrimitive(). void TCanvas::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitives in this canvas in C++ macro file with GUI. ; Reimplemented from TObject.; Definition at line 1776 of file TCanvas.cxx. ◆ SaveSource(). void TCanvas::SaveSource ; (; const char * ; filename = """", . Option_t * ; option = """" . ). Save primitives in this canvas as a C++ macro file. ; This function loops on all the canvas primitives and for each primitive calls the object SavePrimitive function. When outputting floating point numbers, the default precision is 7 digits. The precision can be changed (via system.rootrc) by changing the value of the environment variable ""Canvas.SavePrecision"" ; Definition at line 1820 of file TCanvas.cxx. ◆ Selected(). void TCanvas::Selected ; (; TVirtualPad * ; pad, . TObject * ; obj, . Int_t ; event . ). virtual . Emit Selected() signal. ; Definition at line 1637 of file TCanvas.cxx. ◆ SetBatch(). void TCanvas::SetBatch ; (; Bool_t ; batch = kTRUE). overridevirtual . Toggle batch mode. ; However, if the canvas is created without a window then batch mode always stays set. ; Implements TVirtualPad.; Definition at line 1953 of file TCanvas.cxx. ◆ SetCanvasImp(). void TCanvas::SetCanvasImp ; (; TCanvasImp * ; i). inline . Definition at line 205 of file TCanvas.h. ◆ SetCanvasSize(). void TCanvas::SetCanvasSize ; (; UInt_t ; ww, . UInt_t ; wh . ). overridevirtual . Set Width and Height of canvas to ww and wh respectively. ; If ww and/or wh are greater than the current canvas window a scroll bar is automatically generated. Use this function to zoom in a canvas and navigate via the scroll bars. The ",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:69029,Performance,load,loaded,69029,"s the window size in pixels along X ; [in]whis the window size in pixels along Y . Definition at line 475 of file TCanvas.cxx. ◆ Constructor() [4/4]. void TCanvas::Constructor ; (; const char * ; name, . const char * ; title, . Int_t ; ww, . Int_t ; wh . ). Create a new canvas at a random position. ; Parameters. [in]namecanvas name ; [in]titlecanvas title ; [in]wwis the window size in pixels along X (if ww < 0 the menubar is not shown) ; [in]whis the window size in pixels along Y . Definition at line 386 of file TCanvas.cxx. ◆ CopyPixmaps(). void TCanvas::CopyPixmaps ; (; ). overrideprivatevirtual . Copy the canvas pixmap of the pad to the canvas. ; Implements TVirtualPad.; Definition at line 833 of file TCanvas.cxx. ◆ CreatePainter(). void TCanvas::CreatePainter ; (; ). private . Probably, TPadPainter must be placed in a separate ROOT module - ""padpainter"" (the same as ""histpainter""). ; But now, it's directly in a gpad dir, so, in case of default painter, no *.so should be loaded, no need in plugin managers. May change in future. ; Definition at line 2582 of file TCanvas.cxx. ◆ DeclFileName(). static const char * TCanvas::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 238 of file TCanvas.h. ◆ Delete(). void TCanvas::Delete ; (; Option_t * ; option = """"). inlineoverridevirtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Definition at line 120 of file TCanvas.h. ◆ DeleteCanvasPainter(). void TCanvas::DeleteCanvasPainter ; (; ). assert on IsBatch() == false? ; Definition at line 2613 of file TCanvas.cxx. ◆ Destructor(). void TCanvas::Destructor ; (; ). Actual canvas destructor. ; Definition at line 692 of file TCanvas.cxx. ◆ DisconnectWidget(). void TCanvas::DisconnectWidget ; (; ). Used by friend class TCanvasImp. ; Definition at line 2545 of file TCanvas.cxx. ◆ Draw",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:81095,Performance,response time,response time,81095,"inlineoverridevirtual . Implements TVirtualPad.; Definition at line 176 of file TCanvas.h. ◆ IsUpdated(). Bool_t TCanvas::IsUpdated ; (; ); const. inline . Definition at line 173 of file TCanvas.h. ◆ IsWeb(). Bool_t TCanvas::IsWeb ; (; ); const. overridevirtual . Is web canvas. ; Reimplemented from TVirtualPad.; Definition at line 1494 of file TCanvas.cxx. ◆ ls(). void TCanvas::ls ; (; Option_t * ; option = """"); const. overridevirtual . List all pads. ; Implements TVirtualPad.; Definition at line 1502 of file TCanvas.cxx. ◆ MakeDefCanvas(). TCanvas * TCanvas::MakeDefCanvas ; (; ). static . Static function to build a default canvas. ; Definition at line 1514 of file TCanvas.cxx. ◆ MoveOpaque(). void TCanvas::MoveOpaque ; (; Int_t ; set = 1). Set option to move objects/pads in a canvas. . set = 1 (default) graphics objects are moved in opaque mode; set = 0 only the outline of objects is drawn when moving them. The option opaque produces the best effect. It requires however a a reasonably fast workstation or response time. ; Definition at line 1533 of file TCanvas.cxx. ◆ OpaqueMoving(). Bool_t TCanvas::OpaqueMoving ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 180 of file TCanvas.h. ◆ OpaqueResizing(). Bool_t TCanvas::OpaqueResizing ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 181 of file TCanvas.h. ◆ operator=(). TCanvas & TCanvas::operator= ; (; const TCanvas & ; rhs). privatedelete . ◆ Paint(). void TCanvas::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint canvas. ; Implements TVirtualPad.; Definition at line 1541 of file TCanvas.cxx. ◆ Pick() [1/2]. TPad * TCanvas::Pick ; (; Int_t ; px, . Int_t ; py, . TObject * ; prevSelObj . ). virtual . Prepare for pick, call TPad::Pick() and when selected object is different from previous then emit Picked() signal. ; Definition at line 1551 of file TCanvas.cxx. ◆ Pick() [2/2]. TPad * TCanvas::Pick ; (; Int_t ; px, . Int_t ; py, . TObjLink *&",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:83760,Performance,response time,response time,83760,"as::ProcessedEvent ; (; Int_t ; event, . Int_t ; x, . Int_t ; y, . TObject * ; selected . ). virtual . Emit ProcessedEvent() signal. ; Definition at line 1651 of file TCanvas.cxx. ◆ RaiseWindow(). void TCanvas::RaiseWindow ; (; ). Raise canvas window. ; Definition at line 1742 of file TCanvas.cxx. ◆ ResetDrawn(). void TCanvas::ResetDrawn ; (; ). inline . Definition at line 192 of file TCanvas.h. ◆ ResetUpdated(). void TCanvas::ResetUpdated ; (; ). inline . Definition at line 193 of file TCanvas.h. ◆ Resize(). void TCanvas::Resize ; (; Option_t * ; option = """"). virtual . Recompute canvas parameters following a X11 Resize. ; Definition at line 1666 of file TCanvas.cxx. ◆ ResizeOpaque(). void TCanvas::ResizeOpaque ; (; Int_t ; set = 1). Set option to resize objects/pads in a canvas. . set = 1 (default) graphics objects are resized in opaque mode; set = 0 only the outline of objects is drawn when resizing them. The option opaque produces the best effect. It requires however a a reasonably fast workstation or response time. ; Definition at line 1757 of file TCanvas.cxx. ◆ RunAutoExec(). void TCanvas::RunAutoExec ; (; ). private . Execute the list of TExecs in the current pad. ; Definition at line 1765 of file TCanvas.cxx. ◆ SaveAll(). Bool_t TCanvas::SaveAll ; (; const std::vector< TPad * > & ; pads = {}, . const char * ; filename = """", . Option_t * ; option = """" . ). static . Save provided pads/canvases into the image file(s) Filename can include printf argument for image number - like ""image%03d.png"". ; In this case images: ""image000.png"", ""image001.png"", ""image002.png"" will be created. If pattern is not provided - it will be automatically inserted before extension except PDF and ROOT files. In last case PDF or ROOT file will contain all pads. Parameter option only used when output into PDF/PS files If TCanvas::SaveAll() called without arguments - all existing canvases will be stored in allcanvases.pdf file. ; Definition at line 2641 of file TCanvas.cxx. ◆ SavePrimiti",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:93517,Performance,perform,performed,93517," Toggle editor. ; Definition at line 2440 of file TCanvas.cxx. ◆ ToggleEventStatus(). void TCanvas::ToggleEventStatus ; (; ). virtual . Toggle event statusbar. ; Definition at line 2418 of file TCanvas.cxx. ◆ ToggleToolBar(). void TCanvas::ToggleToolBar ; (; ). virtual . Toggle toolbar. ; Definition at line 2429 of file TCanvas.cxx. ◆ ToggleToolTips(). void TCanvas::ToggleToolTips ; (; ). virtual . Toggle tooltip display. ; Definition at line 2451 of file TCanvas.cxx. ◆ Update(). void TCanvas::Update ; (; ). overridevirtual . Update canvas pad buffers. ; Implements TVirtualPad.; Definition at line 2476 of file TCanvas.cxx. ◆ UpdateAsync(). void TCanvas::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2532 of file TCanvas.cxx. ◆ UseCurrentStyle(). void TCanvas::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in canvas. ; Reimplemented from TObject.; Definition at line 1183 of file TCanvas.cxx. ◆ UseGL(). Bool_t TCanvas::UseGL ; (; ); const. inline . Definition at line 228 of file TCanvas.h. Friends And Related Symbol Documentation. ◆ TCanvasImp. friend class TCanvasImp. friend . Definition at line 25 of file TCanvas.h. ◆ TInterpreter. friend class TInterpreter. friend . Definition at line 28 of file TCanvas.h. ◆ TThread. friend class TThread. friend . Definition at line 27 of file TCanvas.h. ◆ TWebCanvas. friend class TWebCanvas. friend . Definition at line 26 of file TCanvas.h. Member Data Documentation. ◆ fBatch. Bool_t TCanvas::fBatch. protected . ! True when in batchmode ; Definition at line 59 of file TCanvas.h. ◆ fCanvasID. Int_t TCanvas::fCanvasID. protected . ",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:93441,Safety,avoid,avoid,93441,"nvas.cxx. ◆ ToggleEditor(). void TCanvas::ToggleEditor ; (; ). virtual . Toggle editor. ; Definition at line 2440 of file TCanvas.cxx. ◆ ToggleEventStatus(). void TCanvas::ToggleEventStatus ; (; ). virtual . Toggle event statusbar. ; Definition at line 2418 of file TCanvas.cxx. ◆ ToggleToolBar(). void TCanvas::ToggleToolBar ; (; ). virtual . Toggle toolbar. ; Definition at line 2429 of file TCanvas.cxx. ◆ ToggleToolTips(). void TCanvas::ToggleToolTips ; (; ). virtual . Toggle tooltip display. ; Definition at line 2451 of file TCanvas.cxx. ◆ Update(). void TCanvas::Update ; (; ). overridevirtual . Update canvas pad buffers. ; Implements TVirtualPad.; Definition at line 2476 of file TCanvas.cxx. ◆ UpdateAsync(). void TCanvas::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2532 of file TCanvas.cxx. ◆ UseCurrentStyle(). void TCanvas::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in canvas. ; Reimplemented from TObject.; Definition at line 1183 of file TCanvas.cxx. ◆ UseGL(). Bool_t TCanvas::UseGL ; (; ); const. inline . Definition at line 228 of file TCanvas.h. Friends And Related Symbol Documentation. ◆ TCanvasImp. friend class TCanvasImp. friend . Definition at line 25 of file TCanvas.h. ◆ TInterpreter. friend class TInterpreter. friend . Definition at line 28 of file TCanvas.h. ◆ TThread. friend class TThread. friend . Definition at line 27 of file TCanvas.h. ◆ TWebCanvas. friend class TWebCanvas. friend . Definition at line 26 of file TCanvas.h. Member Data Documentation. ◆ fBatch. Bool_t TCanvas::fBatch. protected . ! True when in batchmode ; Definition at line 5",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:20820,Security,hash,hash,20820,";  ; Double_t GetUymin () const override;  Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; TView * GetView () const override;  ; TObject * GetView3D () const override;  ; TVirtualViewer3D * GetViewer3D (Option_t *type="""") override;  Create/obtain handle to 3D viewer. ;  ; TVirtualPad * GetVirtCanvas () const override;  Get virtual canvas. ;  ; UInt_t GetWh () const override;  Get Wh. ;  ; Double_t GetWNDC () const override;  Get width of pad along X in Normalized Coordinates (NDC) ;  ; UInt_t GetWw () const override;  Get Ww. ;  ; Double_t GetX1 () const override;  ; Double_t GetX2 () const override;  ; Double_t GetXlowNDC () const override;  ; Double_t GetY1 () const override;  ; Double_t GetY2 () const override;  ; Double_t GetYlowNDC () const override;  ; Bool_t HasCrosshair () const override;  Return kTRUE if the crosshair has been activated (via SetCrosshair). ;  ; Bool_t HasFixedAspectRatio () const override;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t HasViewer3D () const override;  ; void HighLight (Color_t col=kRed, Bool_t set=kTRUE) override;  Highlight pad. ;  ; Int_t IncrementPaletteColor (Int_t i, TString opt) override;  Increment (i==1) or set (i>1) the number of autocolor in the pad. ;  ; TClass * IsA () const override;  ; Bool_t IsBatch () const override;  Is pad in batch mode ? ;  ; Bool_t IsEditable () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsModified () const override;  ; Bool_t IsRetained () const override;  Is pad retained ? ;  ; Bool_t IsVertical () const override;  ; Bool_t IsWeb () const override;  Is web ? ;  ; void ls (Option_t *option="""") const override;  List all primitives in pad. ;  ; void Modified (Bool_t flag=true) override;  Mark pad modified Will be repainted when TCanvas::Update() will be called next time.",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:5404,Testability,assert,assert,5404,"nvas destructor. ;  ; void Browse (TBrowser *b) override;  Browse. ;  ; TVirtualPad * cd (Int_t subpadnumber=0) override;  Set current canvas & pad. ;  ; void Clear (Option_t *option="""") override;  Remove all primitives from the canvas. ;  ; virtual void Cleared (TVirtualPad *pad);  Emit pad Cleared signal. ;  ; void ClearPadSave ();  ; void Close (Option_t *option="""") override;  Close canvas. ;  ; void Closed () override;  Emit Closed signal. ;  ; void Constructor ();  Canvas default constructor. ;  ; void Constructor (const char *name, const char *title, Int_t form);  Create a new canvas with a predefined size form. ;  ; void Constructor (const char *name, const char *title, Int_t wtopx, Int_t wtopy, Int_t ww, Int_t wh);  Create a new canvas. ;  ; void Constructor (const char *name, const char *title, Int_t ww, Int_t wh);  Create a new canvas at a random position. ;  ; void Delete (Option_t *="""") override;  Delete this object. ;  ; void DeleteCanvasPainter ();  assert on IsBatch() == false? ;  ; void Destructor ();  Actual canvas destructor. ;  ; void DisconnectWidget ();  Used by friend class TCanvasImp. ;  ; void Draw (Option_t *option="""") override;  Draw a canvas. ;  ; TObject * DrawClone (Option_t *option="""") const override;  Draw a clone of this canvas A new canvas is created that is a clone of this canvas. ;  ; virtual TObject * DrawClonePad ();  Draw a clone of this canvas into the current pad In an interactive session, select the destination/current pad with the middle mouse button, then point to the canvas area to select the canvas context menu item DrawClonePad. ;  ; virtual void EditorBar ();  Get editor bar. ;  ; void EmbedInto (Int_t winid, Int_t ww, Int_t wh);  Embedded a canvas into a TRootEmbeddedCanvas. ;  ; void EnterLeave (TPad *prevSelPad, TObject *prevSelObj);  Generate kMouseEnter and kMouseLeave events depending on the previously selected object and the currently selected object. ;  ; void FeedbackMode (Bool_t set);  Turn rubberband feedback ",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:19447,Testability,log,log,19447," ; TVirtualPad * GetPadSave () const override;  Get save pad. ;  ; TVirtualPadPainter * GetPainter () override;  Get pad painter from TCanvas. ;  ; Double_t GetPhi () const override;  ; Int_t GetPixmapID () const override;  ; TObject * GetPrimitive (const char *name) const override;  Get primitive. ;  ; void GetRange (Double_t &x1, Double_t &y1, Double_t &x2, Double_t &y2) override;  Return pad world coordinates range. ;  ; void GetRangeAxis (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) override;  Return pad axis coordinates range. ;  ; TObject * GetSelected () const override;  Get selected. ;  ; TVirtualPad * GetSelectedPad () const override;  Get selected pad. ;  ; Double_t GetTheta () const override;  ; Int_t GetTickx () const override;  ; Int_t GetTicky () const override;  ; const char * GetTitle () const override;  Returns title of object. ;  ; Double_t GetUxmax () const override;  Returns the maximum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUxmin () const override;  Returns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymax () const override;  Returns the maximum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymin () const override;  Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; TView * GetView () const override;  ; TObject * GetView3D () const override;  ; TVirtualViewer3D * GetViewer3D (Option_t *type="""") override;  Create/obtain handle to 3D viewer. ;  ; TVirtualPad * GetVirtCanvas () const override;  Get virtual canvas. ;  ; UInt_t GetWh () const override;  Get Wh. ;  ; Double_t GetWNDC () const override;  Get width of pad along X in Normalized Coordinates (NDC) ;  ; UInt_t GetWw () const override;  Get Ww. ;  ; Double_t GetX1 () const override;  ; Double_t GetX2 () const override;  ; Double_",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:19595,Testability,log,log,19595,"Double_t GetPhi () const override;  ; Int_t GetPixmapID () const override;  ; TObject * GetPrimitive (const char *name) const override;  Get primitive. ;  ; void GetRange (Double_t &x1, Double_t &y1, Double_t &x2, Double_t &y2) override;  Return pad world coordinates range. ;  ; void GetRangeAxis (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) override;  Return pad axis coordinates range. ;  ; TObject * GetSelected () const override;  Get selected. ;  ; TVirtualPad * GetSelectedPad () const override;  Get selected pad. ;  ; Double_t GetTheta () const override;  ; Int_t GetTickx () const override;  ; Int_t GetTicky () const override;  ; const char * GetTitle () const override;  Returns title of object. ;  ; Double_t GetUxmax () const override;  Returns the maximum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUxmin () const override;  Returns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymax () const override;  Returns the maximum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymin () const override;  Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; TView * GetView () const override;  ; TObject * GetView3D () const override;  ; TVirtualViewer3D * GetViewer3D (Option_t *type="""") override;  Create/obtain handle to 3D viewer. ;  ; TVirtualPad * GetVirtCanvas () const override;  Get virtual canvas. ;  ; UInt_t GetWh () const override;  Get Wh. ;  ; Double_t GetWNDC () const override;  Get width of pad along X in Normalized Coordinates (NDC) ;  ; UInt_t GetWw () const override;  Get Ww. ;  ; Double_t GetX1 () const override;  ; Double_t GetX2 () const override;  ; Double_t GetXlowNDC () const override;  ; Double_t GetY1 () const override;  ; Double_t GetY2 () const override;  ; Double_t GetYlowNDC () const override; ",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:19743,Testability,log,log,19743,"ve. ;  ; void GetRange (Double_t &x1, Double_t &y1, Double_t &x2, Double_t &y2) override;  Return pad world coordinates range. ;  ; void GetRangeAxis (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) override;  Return pad axis coordinates range. ;  ; TObject * GetSelected () const override;  Get selected. ;  ; TVirtualPad * GetSelectedPad () const override;  Get selected pad. ;  ; Double_t GetTheta () const override;  ; Int_t GetTickx () const override;  ; Int_t GetTicky () const override;  ; const char * GetTitle () const override;  Returns title of object. ;  ; Double_t GetUxmax () const override;  Returns the maximum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUxmin () const override;  Returns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymax () const override;  Returns the maximum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymin () const override;  Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; TView * GetView () const override;  ; TObject * GetView3D () const override;  ; TVirtualViewer3D * GetViewer3D (Option_t *type="""") override;  Create/obtain handle to 3D viewer. ;  ; TVirtualPad * GetVirtCanvas () const override;  Get virtual canvas. ;  ; UInt_t GetWh () const override;  Get Wh. ;  ; Double_t GetWNDC () const override;  Get width of pad along X in Normalized Coordinates (NDC) ;  ; UInt_t GetWw () const override;  Get Ww. ;  ; Double_t GetX1 () const override;  ; Double_t GetX2 () const override;  ; Double_t GetXlowNDC () const override;  ; Double_t GetY1 () const override;  ; Double_t GetY2 () const override;  ; Double_t GetYlowNDC () const override;  ; Bool_t HasCrosshair () const override;  Return kTRUE if the crosshair has been activated (via SetCrosshair). ;  ; Bool_t HasFixedAspectRatio () c",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:19891,Testability,log,log,19891,"s (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) override;  Return pad axis coordinates range. ;  ; TObject * GetSelected () const override;  Get selected. ;  ; TVirtualPad * GetSelectedPad () const override;  Get selected pad. ;  ; Double_t GetTheta () const override;  ; Int_t GetTickx () const override;  ; Int_t GetTicky () const override;  ; const char * GetTitle () const override;  Returns title of object. ;  ; Double_t GetUxmax () const override;  Returns the maximum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUxmin () const override;  Returns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymax () const override;  Returns the maximum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; Double_t GetUymin () const override;  Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; TView * GetView () const override;  ; TObject * GetView3D () const override;  ; TVirtualViewer3D * GetViewer3D (Option_t *type="""") override;  Create/obtain handle to 3D viewer. ;  ; TVirtualPad * GetVirtCanvas () const override;  Get virtual canvas. ;  ; UInt_t GetWh () const override;  Get Wh. ;  ; Double_t GetWNDC () const override;  Get width of pad along X in Normalized Coordinates (NDC) ;  ; UInt_t GetWw () const override;  Get Ww. ;  ; Double_t GetX1 () const override;  ; Double_t GetX2 () const override;  ; Double_t GetXlowNDC () const override;  ; Double_t GetY1 () const override;  ; Double_t GetY2 () const override;  ; Double_t GetYlowNDC () const override;  ; Bool_t HasCrosshair () const override;  Return kTRUE if the crosshair has been activated (via SetCrosshair). ;  ; Bool_t HasFixedAspectRatio () const override;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t HasViewer3D () const override;  ; void HighLight (",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:56020,Testability,log,log,56020,"to mother canvas ;  ; Int_t fCGnx;  ! Size of the collide grid along x ;  ; Int_t fCGny;  ! Size of the collide grid along y ;  ; std::vector< Bool_t > fCollideGrid;  ! Grid used to find empty space when adding a box (Legend) in a pad ;  ; Bool_t fCopyGLDevice;  ! ;  ; Int_t fCrosshair;  Crosshair type (0 if no crosshair requested) ;  ; Int_t fCrosshairPos;  Position of crosshair. ;  ; Bool_t fEditable;  True if canvas is editable. ;  ; Bool_t fEmbeddedGL;  ! ;  ; TList * fExecs {nullptr};  List of commands to be executed when a pad event occurs. ;  ; Bool_t fFixedAspectRatio;  True if fixed aspect ratio. ;  ; TFrame * fFrame {nullptr};  ! Pointer to 2-D frame (if one exists) ;  ; Int_t fGLDevice;  ! OpenGL off-screen pixmap identifier ;  ; Bool_t fGridx;  Set to true if grid along X. ;  ; Bool_t fGridy;  Set to true if grid along Y. ;  ; Double_t fHNDC;  Height of pad along Y in Normalized Coordinates (NDC) ;  ; Int_t fLogx;  (=0 if X linear scale, =1 if log scale) ;  ; Int_t fLogy;  (=0 if Y linear scale, =1 if log scale) ;  ; Int_t fLogz;  (=0 if Z linear scale, =1 if log scale) ;  ; Bool_t fModified;  Set to true when pad is modified. ;  ; TPad * fMother {nullptr};  ! pointer to mother of the list ;  ; TString fName;  Pad name. ;  ; Int_t fNextPaletteColor;  Next automatic color. ;  ; Int_t fNumber;  pad number identifier ;  ; Int_t fNumPaletteColor;  Number of objects with an automatic color. ;  ; Int_t fPadPaint;  Set to 1 while painting the pad. ;  ; TObject * fPadPointer {nullptr};  ! free pointer ;  ; TObject * fPadView3D {nullptr};  ! 3D View of this TPad ;  ; Double_t fPhi;  phi angle to view as lego/surface ;  ; Double_t fPixeltoX;  xworld = fPixeltoXk + fPixeltoX*xpixel ;  ; Double_t fPixeltoXk;  Conversion coefficient for pixel to X World. ;  ; Double_t fPixeltoY;  yworld = fPixeltoYk + fPixeltoY*ypixel ;  ; Double_t fPixeltoYk;  Conversion coefficient for pixel to Y World. ;  ; Int_t fPixmapID;  ! Off-screen pixmap identifier ;  ; TList * fPrimitives {",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:56079,Testability,log,log,56079,"to mother canvas ;  ; Int_t fCGnx;  ! Size of the collide grid along x ;  ; Int_t fCGny;  ! Size of the collide grid along y ;  ; std::vector< Bool_t > fCollideGrid;  ! Grid used to find empty space when adding a box (Legend) in a pad ;  ; Bool_t fCopyGLDevice;  ! ;  ; Int_t fCrosshair;  Crosshair type (0 if no crosshair requested) ;  ; Int_t fCrosshairPos;  Position of crosshair. ;  ; Bool_t fEditable;  True if canvas is editable. ;  ; Bool_t fEmbeddedGL;  ! ;  ; TList * fExecs {nullptr};  List of commands to be executed when a pad event occurs. ;  ; Bool_t fFixedAspectRatio;  True if fixed aspect ratio. ;  ; TFrame * fFrame {nullptr};  ! Pointer to 2-D frame (if one exists) ;  ; Int_t fGLDevice;  ! OpenGL off-screen pixmap identifier ;  ; Bool_t fGridx;  Set to true if grid along X. ;  ; Bool_t fGridy;  Set to true if grid along Y. ;  ; Double_t fHNDC;  Height of pad along Y in Normalized Coordinates (NDC) ;  ; Int_t fLogx;  (=0 if X linear scale, =1 if log scale) ;  ; Int_t fLogy;  (=0 if Y linear scale, =1 if log scale) ;  ; Int_t fLogz;  (=0 if Z linear scale, =1 if log scale) ;  ; Bool_t fModified;  Set to true when pad is modified. ;  ; TPad * fMother {nullptr};  ! pointer to mother of the list ;  ; TString fName;  Pad name. ;  ; Int_t fNextPaletteColor;  Next automatic color. ;  ; Int_t fNumber;  pad number identifier ;  ; Int_t fNumPaletteColor;  Number of objects with an automatic color. ;  ; Int_t fPadPaint;  Set to 1 while painting the pad. ;  ; TObject * fPadPointer {nullptr};  ! free pointer ;  ; TObject * fPadView3D {nullptr};  ! 3D View of this TPad ;  ; Double_t fPhi;  phi angle to view as lego/surface ;  ; Double_t fPixeltoX;  xworld = fPixeltoXk + fPixeltoX*xpixel ;  ; Double_t fPixeltoXk;  Conversion coefficient for pixel to X World. ;  ; Double_t fPixeltoY;  yworld = fPixeltoYk + fPixeltoY*ypixel ;  ; Double_t fPixeltoYk;  Conversion coefficient for pixel to Y World. ;  ; Int_t fPixmapID;  ! Off-screen pixmap identifier ;  ; TList * fPrimitives {",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:56138,Testability,log,log,56138,"to mother canvas ;  ; Int_t fCGnx;  ! Size of the collide grid along x ;  ; Int_t fCGny;  ! Size of the collide grid along y ;  ; std::vector< Bool_t > fCollideGrid;  ! Grid used to find empty space when adding a box (Legend) in a pad ;  ; Bool_t fCopyGLDevice;  ! ;  ; Int_t fCrosshair;  Crosshair type (0 if no crosshair requested) ;  ; Int_t fCrosshairPos;  Position of crosshair. ;  ; Bool_t fEditable;  True if canvas is editable. ;  ; Bool_t fEmbeddedGL;  ! ;  ; TList * fExecs {nullptr};  List of commands to be executed when a pad event occurs. ;  ; Bool_t fFixedAspectRatio;  True if fixed aspect ratio. ;  ; TFrame * fFrame {nullptr};  ! Pointer to 2-D frame (if one exists) ;  ; Int_t fGLDevice;  ! OpenGL off-screen pixmap identifier ;  ; Bool_t fGridx;  Set to true if grid along X. ;  ; Bool_t fGridy;  Set to true if grid along Y. ;  ; Double_t fHNDC;  Height of pad along Y in Normalized Coordinates (NDC) ;  ; Int_t fLogx;  (=0 if X linear scale, =1 if log scale) ;  ; Int_t fLogy;  (=0 if Y linear scale, =1 if log scale) ;  ; Int_t fLogz;  (=0 if Z linear scale, =1 if log scale) ;  ; Bool_t fModified;  Set to true when pad is modified. ;  ; TPad * fMother {nullptr};  ! pointer to mother of the list ;  ; TString fName;  Pad name. ;  ; Int_t fNextPaletteColor;  Next automatic color. ;  ; Int_t fNumber;  pad number identifier ;  ; Int_t fNumPaletteColor;  Number of objects with an automatic color. ;  ; Int_t fPadPaint;  Set to 1 while painting the pad. ;  ; TObject * fPadPointer {nullptr};  ! free pointer ;  ; TObject * fPadView3D {nullptr};  ! 3D View of this TPad ;  ; Double_t fPhi;  phi angle to view as lego/surface ;  ; Double_t fPixeltoX;  xworld = fPixeltoXk + fPixeltoX*xpixel ;  ; Double_t fPixeltoXk;  Conversion coefficient for pixel to X World. ;  ; Double_t fPixeltoY;  yworld = fPixeltoYk + fPixeltoY*ypixel ;  ; Double_t fPixeltoYk;  Conversion coefficient for pixel to Y World. ;  ; Int_t fPixmapID;  ! Off-screen pixmap identifier ;  ; TList * fPrimitives {",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:69695,Testability,assert,assert,69695,"ion at line 833 of file TCanvas.cxx. ◆ CreatePainter(). void TCanvas::CreatePainter ; (; ). private . Probably, TPadPainter must be placed in a separate ROOT module - ""padpainter"" (the same as ""histpainter""). ; But now, it's directly in a gpad dir, so, in case of default painter, no *.so should be loaded, no need in plugin managers. May change in future. ; Definition at line 2582 of file TCanvas.cxx. ◆ DeclFileName(). static const char * TCanvas::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 238 of file TCanvas.h. ◆ Delete(). void TCanvas::Delete ; (; Option_t * ; option = """"). inlineoverridevirtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Definition at line 120 of file TCanvas.h. ◆ DeleteCanvasPainter(). void TCanvas::DeleteCanvasPainter ; (; ). assert on IsBatch() == false? ; Definition at line 2613 of file TCanvas.cxx. ◆ Destructor(). void TCanvas::Destructor ; (; ). Actual canvas destructor. ; Definition at line 692 of file TCanvas.cxx. ◆ DisconnectWidget(). void TCanvas::DisconnectWidget ; (; ). Used by friend class TCanvasImp. ; Definition at line 2545 of file TCanvas.cxx. ◆ Draw(). void TCanvas::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw a canvas. ; If a canvas with the name is already on the screen, the canvas is repainted. This function is useful when a canvas object has been saved in a Root file. One can then do: Root > TFile::Open(""file.root"");; Root > canvas->Draw();; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089. Implements TVirtualPad.; Definition at line 851 of file TCanvas.cxx. ◆ DrawClone(). TObject * TCanvas::DrawClone ; (; Option_t * ; option = """")",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:93447,Testability,log,logical,93447,"nvas.cxx. ◆ ToggleEditor(). void TCanvas::ToggleEditor ; (; ). virtual . Toggle editor. ; Definition at line 2440 of file TCanvas.cxx. ◆ ToggleEventStatus(). void TCanvas::ToggleEventStatus ; (; ). virtual . Toggle event statusbar. ; Definition at line 2418 of file TCanvas.cxx. ◆ ToggleToolBar(). void TCanvas::ToggleToolBar ; (; ). virtual . Toggle toolbar. ; Definition at line 2429 of file TCanvas.cxx. ◆ ToggleToolTips(). void TCanvas::ToggleToolTips ; (; ). virtual . Toggle tooltip display. ; Definition at line 2451 of file TCanvas.cxx. ◆ Update(). void TCanvas::Update ; (; ). overridevirtual . Update canvas pad buffers. ; Implements TVirtualPad.; Definition at line 2476 of file TCanvas.cxx. ◆ UpdateAsync(). void TCanvas::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2532 of file TCanvas.cxx. ◆ UseCurrentStyle(). void TCanvas::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in canvas. ; Reimplemented from TObject.; Definition at line 1183 of file TCanvas.cxx. ◆ UseGL(). Bool_t TCanvas::UseGL ; (; ); const. inline . Definition at line 228 of file TCanvas.h. Friends And Related Symbol Documentation. ◆ TCanvasImp. friend class TCanvasImp. friend . Definition at line 25 of file TCanvas.h. ◆ TInterpreter. friend class TInterpreter. friend . Definition at line 28 of file TCanvas.h. ◆ TThread. friend class TThread. friend . Definition at line 27 of file TCanvas.h. ◆ TWebCanvas. friend class TWebCanvas. friend . Definition at line 26 of file TCanvas.h. Member Data Documentation. ◆ fBatch. Bool_t TCanvas::fBatch. protected . ! True when in batchmode ; Definition at line 5",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:2235,Usability,simpl,simply,2235,"""View"" menu under the menu entry ""Toolbar"".; An interactive HELP is available by clicking on the HELP button at the top right of the canvas. It gives a short explanation about the canvas' menus.; A canvas may be automatically divided into pads via TPad::Divide.; At creation time, no matter if in interactive or batch mode, the constructor defines the size of the canvas window (including the size of the window manager's decoration). To define precisely the graphics area size of a canvas in the interactive mode, the following four lines of code should be used: {; Double_t w = 600;; Double_t h = 600;; auto c = new TCanvas(""c"", ""c"", w, h);; c->SetWindowSize(w + (w - c->GetWw()), h + (h - c->GetWh()));; }; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; TCanvasThe Canvas class.Definition TCanvas.h:23; double; and in the batch mode simply do: c->SetCanvasSize(w,h);; If the canvas size exceeds the window size, scroll bars will be added to the canvas This allows to display very large canvases (even bigger than the screen size). The Following example shows how to proceed. {; auto c = new TCanvas(""c"",""c"");; c->SetCanvasSize(1500, 1500);; c->SetWindowSize(500, 500);; }. Definition at line 23 of file TCanvas.h. Public Types; enum  { ;   kShowEventStatus = (1ULL << ( 15 )); , kAutoExec = (1ULL << ( 16 )); , kMenuBar = (1ULL << ( 17 )); , kShowToolBar = (1ULL << ( 18 )); , ;   kShowEditor = (1ULL << ( 19 )); , kMoveOpaque = (1ULL << ( 20 )); , kResizeOpaque = (1ULL << ( 21 )); , kIsGrayscale = (1ULL << ( 22 )); , ;   kShowToolTips = (1ULL << ( 23 )). };  ;  Public Types inherited from TPad; enum  { ;   kFraming = (1ULL << ( 6 )); , kHori = (1ULL << ( 9 )); , kClipFrame = (1ULL << ( 10 )); , kPrintingPS = (1ULL << ( 11 )); , ;   kCannotMove = (1ULL << ( 12 )); , kClearAfterCR = (1ULL << ( 14 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000;",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:6418,Usability,feedback,feedback,6418,"  assert on IsBatch() == false? ;  ; void Destructor ();  Actual canvas destructor. ;  ; void DisconnectWidget ();  Used by friend class TCanvasImp. ;  ; void Draw (Option_t *option="""") override;  Draw a canvas. ;  ; TObject * DrawClone (Option_t *option="""") const override;  Draw a clone of this canvas A new canvas is created that is a clone of this canvas. ;  ; virtual TObject * DrawClonePad ();  Draw a clone of this canvas into the current pad In an interactive session, select the destination/current pad with the middle mouse button, then point to the canvas area to select the canvas context menu item DrawClonePad. ;  ; virtual void EditorBar ();  Get editor bar. ;  ; void EmbedInto (Int_t winid, Int_t ww, Int_t wh);  Embedded a canvas into a TRootEmbeddedCanvas. ;  ; void EnterLeave (TPad *prevSelPad, TObject *prevSelObj);  Generate kMouseEnter and kMouseLeave events depending on the previously selected object and the currently selected object. ;  ; void FeedbackMode (Bool_t set);  Turn rubberband feedback mode on or off. ;  ; void Flush ();  Flush canvas buffers. ;  ; void ForceUpdate ();  Force canvas update. ;  ; Bool_t GetAutoExec () const;  ; Int_t GetCanvasID () const override;  ; TCanvasImp * GetCanvasImp () const override;  ; TVirtualPadPainter * GetCanvasPainter ();  Access and (probably) creation of pad painter. ;  ; virtual void GetCanvasPar (Int_t &wtopx, Int_t &wtopy, UInt_t &ww, UInt_t &wh);  ; TObject * GetClickSelected () const;  ; TVirtualPad * GetClickSelectedPad () const;  ; TContextMenu * GetContextMenu () const;  ; const char * GetDISPLAY () const;  ; Int_t GetDoubleBuffer () const;  ; Int_t GetEvent () const override;  ; Int_t GetEventX () const override;  ; Int_t GetEventY () const override;  ; Color_t GetHighLightColor () const override;  ; TVirtualPad * GetPadSave () const override;  ; TObject * GetSelected () const override;  ; Option_t * GetSelectedOpt () const;  ; TVirtualPad * GetSelectedPad () const override;  ; Int_t GetSelectedX () ",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:8208,Usability,simpl,simplification,8208,"rtualPad * GetPadSave () const override;  ; TObject * GetSelected () const override;  ; Option_t * GetSelectedOpt () const;  ; TVirtualPad * GetSelectedPad () const override;  ; Int_t GetSelectedX () const;  ; Int_t GetSelectedY () const;  ; Bool_t GetShowEditor () const;  ; Bool_t GetShowEventStatus () const;  ; Bool_t GetShowToolBar () const;  ; Bool_t GetShowToolTips () const;  ; UInt_t GetWh () const override;  ; UInt_t GetWindowHeight () const;  ; Int_t GetWindowTopX ();  Returns current top x position of window on screen. ;  ; Int_t GetWindowTopY ();  Returns current top y position of window on screen. ;  ; UInt_t GetWindowWidth () const;  ; UInt_t GetWw () const override;  ; Size_t GetXsizeReal () const;  ; Size_t GetXsizeUser () const;  ; Size_t GetYsizeReal () const;  ; Size_t GetYsizeUser () const;  ; virtual void HandleInput (EEventType button, Int_t x, Int_t y);  Handle Input Events. ;  ; Bool_t HasMenuBar () const;  ; virtual void HighlightConnect (const char *slot);  This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot. ;  ; virtual void Highlighted (TVirtualPad *pad, TObject *obj, Int_t x, Int_t y);  Emit Highlighted() signal. ;  ; void Iconify ();  Iconify canvas. ;  ; TClass * IsA () const override;  ; Bool_t IsBatch () const override;  ; Bool_t IsDrawn () const;  ; Bool_t IsFolder () const override;  Is folder ? ;  ; Bool_t IsGrayscale ();  Check whether this canvas is to be drawn in grayscale mode. ;  ; Bool_t IsRetained () const override;  ; Bool_t IsUpdated () const;  ; Bool_t IsWeb () const override;  Is web canvas. ;  ; void ls (Option_t *option="""") const override;  List all pads. ;  ; void MoveOpaque (Int_t set=1);  Set option to move objects/pads in a canvas. ;  ; Bool_t OpaqueMoving () const override;  ; Bool_t OpaqueResizing () const override;  ; void Paint (Option_t *option="""") override;  Paint canvas. ;  ; virtual TPad * Pick (Int_t px, Int_t py, TObject *prevSelObj);  Prepare for pick, call TPa",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:66342,Usability,clear,cleared,66342,"Definition at line 682 of file TCanvas.cxx. ◆ Build(). void TCanvas::Build ; (; ). private . Build a canvas. Called by all constructors. ; Definition at line 584 of file TCanvas.cxx. ◆ cd(). TVirtualPad * TCanvas::cd ; (; Int_t ; subpadnumber = 0). overridevirtual . Set current canvas & pad. ; Returns the new current pad, or 0 in case of failure. See TPad::cd() for an explanation of the parameter. ; Implements TVirtualPad.; Definition at line 716 of file TCanvas.cxx. ◆ Class(). static TClass * TCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 238 of file TCanvas.h. ◆ Clear(). void TCanvas::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all primitives from the canvas. ; If option ""D"" is specified, direct sub-pads are cleared but not deleted. This option is not recursive, i.e. pads in direct sub-pads are deleted. ; Implements TVirtualPad.; Definition at line 734 of file TCanvas.cxx. ◆ Cleared(). void TCanvas::Cleared ; (; TVirtualPad * ; pad). virtual . Emit pad Cleared signal. ; Definition at line 767 of file TCanvas.cxx. ◆ ClearPadSave(). void TCanvas::ClearPadSave ; (; ). inline . Definition at line 140 of file TCanvas.h. ◆ Close(). void TCanvas::Close ; (; Option_t * ; option = """"). overridevirtual . Close canvas. ; Delete window/pads data structure ; Implements TVirtualPad.; Definition at line 785 of file TCanvas.cxx. ◆ Closed(). void TCanvas::Closed ; (; ). overridevirtual . Emit Closed signal. ; Reimplemented from TPad.; Definition at line 775 of file TCanvas.cxx. ◆ Constructor() [1/4]. void TCanvas::Constructor ; (; ). Canvas default constructor. ; Definition at line 188 of file TCanvas.cxx. ◆ Constructor() [2/4]. void TCanvas::Constructor ; (; const char * ; name, . const char ",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:72876,Usability,feedback,feedback,72876,"otEmbeddedCanvas. ; This method is only called via TRootEmbeddedCanvas::AdoptCanvas. ; Definition at line 1046 of file TCanvas.cxx. ◆ EnterLeave(). void TCanvas::EnterLeave ; (; TPad * ; prevSelPad, . TObject * ; prevSelObj . ). Generate kMouseEnter and kMouseLeave events depending on the previously selected object and the currently selected object. ; Does nothing if the selected object does not change. ; Definition at line 1072 of file TCanvas.cxx. ◆ ExecuteEvent(). void TCanvas::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overrideprotectedvirtual . Execute action corresponding to one event. ; This member function must be implemented to realize the action corresponding to the mouse click on the object in the canvas; Only handle mouse motion events in TCanvas, all other events are ignored for the time being ; Reimplemented from TObject.; Definition at line 1108 of file TCanvas.cxx. ◆ FeedbackMode(). void TCanvas::FeedbackMode ; (; Bool_t ; set). Turn rubberband feedback mode on or off. ; Definition at line 1126 of file TCanvas.cxx. ◆ Flush(). void TCanvas::Flush ; (; ). Flush canvas buffers. ; Definition at line 1143 of file TCanvas.cxx. ◆ ForceUpdate(). void TCanvas::ForceUpdate ; (; ). Force canvas update. ; Definition at line 1175 of file TCanvas.cxx. ◆ GetAutoExec(). Bool_t TCanvas::GetAutoExec ; (; ); const. inline . Definition at line 152 of file TCanvas.h. ◆ GetCanvasID(). Int_t TCanvas::GetCanvasID ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 157 of file TCanvas.h. ◆ GetCanvasImp(). TCanvasImp * TCanvas::GetCanvasImp ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 158 of file TCanvas.h. ◆ GetCanvasPainter(). TVirtualPadPainter * TCanvas::GetCanvasPainter ; (; ). Access and (probably) creation of pad painter. ; Definition at line 2603 of file TCanvas.cxx. ◆ GetCanvasPar(). virtual void TCanvas::GetCanvasPar ; (; Int_t & ; wtopx, . Int_t & ; wtopy, . UInt_t & ; ww, . U",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTCanvas.html:78191,Usability,simpl,simplification,78191,"ents TVirtualPad.; Definition at line 163 of file TCanvas.h. ◆ GetXsizeReal(). Size_t TCanvas::GetXsizeReal ; (; ); const. inline . Definition at line 155 of file TCanvas.h. ◆ GetXsizeUser(). Size_t TCanvas::GetXsizeUser ; (; ); const. inline . Definition at line 153 of file TCanvas.h. ◆ GetYsizeReal(). Size_t TCanvas::GetYsizeReal ; (; ); const. inline . Definition at line 156 of file TCanvas.h. ◆ GetYsizeUser(). Size_t TCanvas::GetYsizeUser ; (; ); const. inline . Definition at line 154 of file TCanvas.h. ◆ HandleInput(). void TCanvas::HandleInput ; (; EEventType ; event, . Int_t ; px, . Int_t ; py . ). virtual . Handle Input Events. ; Handle input events, like button up/down in current canvas. ; Definition at line 1232 of file TCanvas.cxx. ◆ HasMenuBar(). Bool_t TCanvas::HasMenuBar ; (; ); const. inline . Definition at line 168 of file TCanvas.h. ◆ HighlightConnect(). void TCanvas::HighlightConnect ; (; const char * ; slot). virtual . This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot. ; Slot has to be defined ""UserFunction(TVirtualPad *pad, TObject *obj, Int_t x, Int_t y)"" all parameters of UserFunction are taken from TCanvas::Highlighted ; Definition at line 1629 of file TCanvas.cxx. ◆ Highlighted(). void TCanvas::Highlighted ; (; TVirtualPad * ; pad, . TObject * ; obj, . Int_t ; x, . Int_t ; y . ). virtual . Emit Highlighted() signal. . pad is pointer to pad with highlighted histogram or graph; obj is pointer to highlighted histogram or graph; x is highlighted x bin for 1D histogram or highlighted x-th point for graph; y is highlighted y bin for 2D histogram (for 1D histogram or graph not in use) . Definition at line 1610 of file TCanvas.cxx. ◆ Iconify(). void TCanvas::Iconify ; (; ). Iconify canvas. ; Definition at line 1477 of file TCanvas.cxx. ◆ Init(). void TCanvas::Init ; (; ). protected . Initialize the TCanvas members. Called by all constructors. ; Definition at line 534 of file TCanvas.cxx. ◆ IsA(). TClass ",MatchSource.WIKI,doc/v632/classTCanvas.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCanvas.html
https://root.cern/doc/v632/classTChain.html:25225,Availability,recover,recover,25225,"hDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntr",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:31394,Availability,error,error,31394," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:31483,Availability,error,error,31483,"ave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:31638,Availability,error,error,31638,"hether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:31935,Availability,error,error,31935,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:35516,Availability,error,error,35516,", void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Paint (Option_t *option="""");  This method must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:68398,Availability,error,error,68398," ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 173 of file TChain.h. ◆ CreatePackets(). void TChain::CreatePackets ; (; ). virtual . Initialize the packet descriptor string. ; Definition at line 765 of file TChain.cxx. ◆ DeclFileName(). static const char * TChain::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 173 of file TChain.h. ◆ DirectoryAutoAdd(). void TChain::DirectoryAutoAdd ; (; TDirectory * ; ). overridevirtual . Override the TTree::DirectoryAutoAdd behavior: we never auto add. ; Reimplemented from TTree.; Definition at line 778 of file TChain.cxx. ◆ Draw() [1/3]. Long64_t TChain::Draw ; (; const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Process all entries in this chain and draw histogram corresponding to expression varexp. ; Returns -1 in case of error or number of selected events in case of success. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 813 of file TChain.cxx. ◆ Draw() [2/3]. Long64_t TChain::Draw ; (; const char * ; varexp, . const TCut & ; selection, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Draw expression varexp for selected entries. ; Returns -1 in case of error or number of selected events in case of success.; This function accepts TCut objects as arguments. Useful to use the string operator +, example: ntuple.Draw(""x"",cut1+cut2+cut3);. Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 793 of file TChain.cxx. ◆ Draw() [3/3]. void TChain::Draw ; (; Option_t * ; option). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 90 of file TChain.h. ◆ Fill(). Int_t TChain::Fill ; (; ). inlineoverridevirtual . Fill al",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:68835,Availability,error,error,68835,"ectoryAutoAdd(). void TChain::DirectoryAutoAdd ; (; TDirectory * ; ). overridevirtual . Override the TTree::DirectoryAutoAdd behavior: we never auto add. ; Reimplemented from TTree.; Definition at line 778 of file TChain.cxx. ◆ Draw() [1/3]. Long64_t TChain::Draw ; (; const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Process all entries in this chain and draw histogram corresponding to expression varexp. ; Returns -1 in case of error or number of selected events in case of success. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 813 of file TChain.cxx. ◆ Draw() [2/3]. Long64_t TChain::Draw ; (; const char * ; varexp, . const TCut & ; selection, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Draw expression varexp for selected entries. ; Returns -1 in case of error or number of selected events in case of success.; This function accepts TCut objects as arguments. Useful to use the string operator +, example: ntuple.Draw(""x"",cut1+cut2+cut3);. Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 793 of file TChain.cxx. ◆ Draw() [3/3]. void TChain::Draw ; (; Option_t * ; option). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 90 of file TChain.h. ◆ Fill(). Int_t TChain::Fill ; (; ). inlineoverridevirtual . Fill all branches. ; This function loops on all the branches of this tree. For each branch, it copies to the branch buffer (basket) the current values of the leaves data types. If a leaf is a simple data type, a simple conversion to a machine independent format has to be done.; This machine independent version of the data is copied into a basket (each branch has its own basket). When a basket is full (32k worth of data by default), it is th",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:70120,Availability,error,error,70120,"oid TChain::Draw ; (; Option_t * ; option). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 90 of file TChain.h. ◆ Fill(). Int_t TChain::Fill ; (; ). inlineoverridevirtual . Fill all branches. ; This function loops on all the branches of this tree. For each branch, it copies to the branch buffer (basket) the current values of the leaves data types. If a leaf is a simple data type, a simple conversion to a machine independent format has to be done.; This machine independent version of the data is copied into a basket (each branch has its own basket). When a basket is full (32k worth of data by default), it is then optionally compressed and written to disk (this operation is also called committing or 'flushing' the basket). The committed baskets are then immediately removed from memory.; The function returns the number of bytes committed to the individual branches.; If a write error occurs, the number of bytes returned is -1.; If no data are written, because, e.g., the branch is disabled, the number of bytes returned is 0.; The baskets are flushed and the Tree header saved at regular intervals; At regular intervals, when the amount of data written so far is greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk. This makes future reading faster as it guarantees that baskets belonging to nearby entries will be on the same disk region. When the first call to flush the baskets happen, we also take this opportunity to optimize the baskets buffers. We also check if the amount of data written is greater than fAutoSave (see SetAutoSave). In this case we also write the Tree header. This makes the Tree recoverable up to this point in case the program writing the Tree crashes. The decisions to FlushBaskets and Auto Save can be made based either on the number of bytes written (fAutoFlush and fAutoSave negative) or on the number of entries written (fAutoFlush and ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:70875,Availability,recover,recoverable,70875,"operation is also called committing or 'flushing' the basket). The committed baskets are then immediately removed from memory.; The function returns the number of bytes committed to the individual branches.; If a write error occurs, the number of bytes returned is -1.; If no data are written, because, e.g., the branch is disabled, the number of bytes returned is 0.; The baskets are flushed and the Tree header saved at regular intervals; At regular intervals, when the amount of data written so far is greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk. This makes future reading faster as it guarantees that baskets belonging to nearby entries will be on the same disk region. When the first call to flush the baskets happen, we also take this opportunity to optimize the baskets buffers. We also check if the amount of data written is greater than fAutoSave (see SetAutoSave). In this case we also write the Tree header. This makes the Tree recoverable up to this point in case the program writing the Tree crashes. The decisions to FlushBaskets and Auto Save can be made based either on the number of bytes written (fAutoFlush and fAutoSave negative) or on the number of entries written (fAutoFlush and fAutoSave positive). Note that the user can decide to call FlushBaskets and AutoSave in her event loop base on the number of events written instead of the number of bytes written.; NoteCalling TTree::FlushBaskets too often increases the IO time. Calling TTree::AutoSave too often increases the IO time and also the file size. This method calls TTree::ChangeFile when the tree reaches a size greater than TTree::fgMaxTreeSize. This doesn't happen if the tree is attached to a TMemFile or derivate. ; Reimplemented from TTree.; Definition at line 91 of file TChain.h. ◆ FindBranch(). TBranch * TChain::FindBranch ; (; const char * ; name). overridevirtual . See TTree::GetReadEntry(). ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 83",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:74160,Availability,error,errors,74160,"y number in the chain. ; The input parameter entry is the entry number in the current tree of this chain. ; Reimplemented from TTree.; Definition at line 942 of file TChain.cxx. ◆ GetClusterIterator(). TTree::TClusterIterator TChain::GetClusterIterator ; (; Long64_t ; firstentry). overridevirtual . Return an iterator over the cluster of baskets starting at firstentry. ; This iterator is not yet supported for TChain object. ; Reimplemented from TTree.; Definition at line 931 of file TChain.cxx. ◆ GetEntries() [1/2]. Long64_t TChain::GetEntries ; (; ); const. overridevirtual . Return the total number of entries in the chain. ; In case the number of entries in each tree is not yet known, the offset table is computed. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 952 of file TChain.cxx. ◆ GetEntries() [2/2]. Long64_t TChain::GetEntries ; (; const char * ; selection). inlineoverridevirtual . Return the number of entries matching the selection. ; Return -1 in case of errors.; If the selection uses any arrays or containers, we return the number of entries where at least one element match the selection. GetEntries is implemented using the selector class TSelectorEntries, which can be used directly (see code in TTreePlayer::GetEntries) for additional option. If SetEventList was used on the TTree or TChain, only that subset of entries will be considered. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 101 of file TChain.h. ◆ GetEntry(). Int_t TChain::GetEntry ; (; Long64_t ; entry = 0, . Int_t ; getall = 0 . ). overridevirtual . Get entry from the file to memory. . getall = 0 : get only active branches; getall = 1 : get all branches. Return the total number of bytes read, 0 bytes read indicates a failure. ; Reimplemented from TTree.; Definition at line 976 of file TChain.cxx. ◆ GetEntryNumber(). Long64_t TChain::GetEntryNumber ; (; Long64_t ; entry); const. overridevirtual . Return entry number corresponding to en",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:74931,Availability,failure,failure,74931,"; Reimplemented in TProofChain.; Definition at line 952 of file TChain.cxx. ◆ GetEntries() [2/2]. Long64_t TChain::GetEntries ; (; const char * ; selection). inlineoverridevirtual . Return the number of entries matching the selection. ; Return -1 in case of errors.; If the selection uses any arrays or containers, we return the number of entries where at least one element match the selection. GetEntries is implemented using the selector class TSelectorEntries, which can be used directly (see code in TTreePlayer::GetEntries) for additional option. If SetEventList was used on the TTree or TChain, only that subset of entries will be considered. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 101 of file TChain.h. ◆ GetEntry(). Int_t TChain::GetEntry ; (; Long64_t ; entry = 0, . Int_t ; getall = 0 . ). overridevirtual . Get entry from the file to memory. . getall = 0 : get only active branches; getall = 1 : get all branches. Return the total number of bytes read, 0 bytes read indicates a failure. ; Reimplemented from TTree.; Definition at line 976 of file TChain.cxx. ◆ GetEntryNumber(). Long64_t TChain::GetEntryNumber ; (; Long64_t ; entry); const. overridevirtual . Return entry number corresponding to entry. ; if no TEntryList set returns entry else returns entry #entry from this entry list and also computes the global entry number (loads all tree headers) ; Reimplemented from TTree.; Definition at line 995 of file TChain.cxx. ◆ GetEntryWithIndex(). Int_t TChain::GetEntryWithIndex ; (; Int_t ; major, . Int_t ; minor = 0 . ). overridevirtual . Return entry corresponding to major and minor number. ; The function returns the total number of bytes read. If the Tree has friend trees, the corresponding entry with the index values (major,minor) is read. Note that the master Tree and its friend may have different entry serial numbers corresponding to (major,minor). ; Reimplemented from TTree.; Definition at line 1028 of file TChain.cxx. ◆ GetFile()",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:76818,Availability,failure,failure,76818,"or). ; Reimplemented from TTree.; Definition at line 1028 of file TChain.cxx. ◆ GetFile(). TFile * TChain::GetFile ; (; ); const. Return a pointer to the current file. ; If no file is connected, the first file is automatically loaded. ; Definition at line 1039 of file TChain.cxx. ◆ GetLeaf() [1/2]. TLeaf * TChain::GetLeaf ; (; const char * ; branchname, . const char * ; leafname . ). overridevirtual . Return a pointer to the leaf name in the current tree. ; Reimplemented from TTree.; Definition at line 1052 of file TChain.cxx. ◆ GetLeaf() [2/2]. TLeaf * TChain::GetLeaf ; (; const char * ; name). overridevirtual . Return a pointer to the leaf name in the current tree. ; Reimplemented from TTree.; Definition at line 1073 of file TChain.cxx. ◆ GetListOfBranches(). TObjArray * TChain::GetListOfBranches ; (; ). overridevirtual . Return a pointer to the list of branches of the current tree. ; Warning: If there is no current TTree yet, this routine will open the first in the chain.; Returns 0 on failure. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 1099 of file TChain.cxx. ◆ GetListOfFiles(). TObjArray * TChain::GetListOfFiles ; (; ); const. inline . Definition at line 111 of file TChain.h. ◆ GetListOfLeaves(). TObjArray * TChain::GetListOfLeaves ; (; ). overridevirtual . Return a pointer to the list of leaves of the current tree. ; Warning: May set the current tree! ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 1122 of file TChain.cxx. ◆ GetMaximum(). Double_t TChain::GetMaximum ; (; const char * ; columname). overridevirtual . Return maximum of column with name columname. ; Reimplemented from TTree.; Definition at line 1143 of file TChain.cxx. ◆ GetMinimum(). Double_t TChain::GetMinimum ; (; const char * ; columname). overridevirtual . Return minimum of column with name columname. ; Reimplemented from TTree.; Definition at line 1160 of file TChain.cxx. ◆ GetNbranches(). Int_t TChain::GetNbranches ; (; ). o",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:80927,Availability,error,error,80927,"tTree()->CloneTree(0);; cloneTObject * clone(const char *newname) const overrideDefinition RooChi2Var.h:9. Definition at line 1252 of file TChain.cxx. ◆ IsA(). TClass * TChain::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 173 of file TChain.h. ◆ LoadBaskets(). Int_t TChain::LoadBaskets ; (; Long64_t ; maxmemory). overridevirtual . Dummy function. ; It could be implemented and load all baskets of all trees in the chain. For the time being use TChain::Merge and TTree::LoadBasket on the resulting tree. ; Reimplemented from TTree.; Definition at line 1270 of file TChain.cxx. ◆ LoadTree(). Long64_t TChain::LoadTree ; (; Long64_t ; entry). overridevirtual . Find the tree which contains entry, and set it as the current tree. ; Returns the entry number in that tree.; The input argument entry is the entry serial number in the whole chain.; In case of error, LoadTree returns a negative number:; -1: The chain is empty.; -2: The requested entry number is less than zero or too large for the chain.; -3: The file corresponding to the entry could not be correctly open; -4: The TChainElement corresponding to the entry is missing or the TTree is missing from the file.; -5: Internal error, please report the circumstance when this happen as a ROOT issue.; -6: An error occurred within the notify callback. Calls fNotify->Notify() (if fNotify is not null) when starting the processing of a new sub-tree. See TNotifyLink for more information on the notification mechanism.; NoteThis is the only routine which sets the value of fTree to a non-zero pointer. ; Reimplemented from TTree.; Definition at line 1298 of file TChain.cxx. ◆ Lookup(). void TChain::Lookup ; (; bool ; force = false). Check / locate the files in the chain. ; By default only the files not yet looked up are checked. Use force = true to check / re-check every file. ; Definition at line 1734 of file TChain.cxx. ◆",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:81256,Availability,error,error,81256,"on at line 173 of file TChain.h. ◆ LoadBaskets(). Int_t TChain::LoadBaskets ; (; Long64_t ; maxmemory). overridevirtual . Dummy function. ; It could be implemented and load all baskets of all trees in the chain. For the time being use TChain::Merge and TTree::LoadBasket on the resulting tree. ; Reimplemented from TTree.; Definition at line 1270 of file TChain.cxx. ◆ LoadTree(). Long64_t TChain::LoadTree ; (; Long64_t ; entry). overridevirtual . Find the tree which contains entry, and set it as the current tree. ; Returns the entry number in that tree.; The input argument entry is the entry serial number in the whole chain.; In case of error, LoadTree returns a negative number:; -1: The chain is empty.; -2: The requested entry number is less than zero or too large for the chain.; -3: The file corresponding to the entry could not be correctly open; -4: The TChainElement corresponding to the entry is missing or the TTree is missing from the file.; -5: Internal error, please report the circumstance when this happen as a ROOT issue.; -6: An error occurred within the notify callback. Calls fNotify->Notify() (if fNotify is not null) when starting the processing of a new sub-tree. See TNotifyLink for more information on the notification mechanism.; NoteThis is the only routine which sets the value of fTree to a non-zero pointer. ; Reimplemented from TTree.; Definition at line 1298 of file TChain.cxx. ◆ Lookup(). void TChain::Lookup ; (; bool ; force = false). Check / locate the files in the chain. ; By default only the files not yet looked up are checked. Use force = true to check / re-check every file. ; Definition at line 1734 of file TChain.cxx. ◆ Loop(). void TChain::Loop ; (; Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Loop on nentries of this chain starting at firstentry. (NOT IMPLEMENTED) ; Definition at line 1804 of file TChain.cxx. ◆ ls(). void TChain::ls ; (; Option_t * ; option = """"); const. overridevi",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:81336,Availability,error,error,81336,"Baskets ; (; Long64_t ; maxmemory). overridevirtual . Dummy function. ; It could be implemented and load all baskets of all trees in the chain. For the time being use TChain::Merge and TTree::LoadBasket on the resulting tree. ; Reimplemented from TTree.; Definition at line 1270 of file TChain.cxx. ◆ LoadTree(). Long64_t TChain::LoadTree ; (; Long64_t ; entry). overridevirtual . Find the tree which contains entry, and set it as the current tree. ; Returns the entry number in that tree.; The input argument entry is the entry serial number in the whole chain.; In case of error, LoadTree returns a negative number:; -1: The chain is empty.; -2: The requested entry number is less than zero or too large for the chain.; -3: The file corresponding to the entry could not be correctly open; -4: The TChainElement corresponding to the entry is missing or the TTree is missing from the file.; -5: Internal error, please report the circumstance when this happen as a ROOT issue.; -6: An error occurred within the notify callback. Calls fNotify->Notify() (if fNotify is not null) when starting the processing of a new sub-tree. See TNotifyLink for more information on the notification mechanism.; NoteThis is the only routine which sets the value of fTree to a non-zero pointer. ; Reimplemented from TTree.; Definition at line 1298 of file TChain.cxx. ◆ Lookup(). void TChain::Lookup ; (; bool ; force = false). Check / locate the files in the chain. ; By default only the files not yet looked up are checked. Use force = true to check / re-check every file. ; Definition at line 1734 of file TChain.cxx. ◆ Loop(). void TChain::Loop ; (; Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Loop on nentries of this chain starting at firstentry. (NOT IMPLEMENTED) ; Definition at line 1804 of file TChain.cxx. ◆ ls(). void TChain::ls ; (; Option_t * ; option = """"); const. overridevirtual . List the chain. ; Reimplemented from TObject.; Definition at ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:90536,Availability,error,error,90536,"n as a trailing part of the name (deprecated). If not found this will be empty. Exception: a fragment containing the '=' character is not interpreted as a treename ; [out]queryis the url query section, including the leading question mark. If not found or the query section is only followed by a fragment this will be empty. ; [out]suffixthe portion of name which was removed to from filename. . Definition at line 2146 of file TChain.cxx. ◆ Print(). void TChain::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print the header information of each tree in the chain. ; See TTree::Print for a list of options. ; Reimplemented from TObject.; Definition at line 2216 of file TChain.cxx. ◆ Process() [1/2]. Long64_t TChain::Process ; (; const char * ; filename, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Process all entries in this chain, calling functions in filename. ; The return value is -1 in case of error and TSelector::GetStatus() in in case of success. See TTree::Process. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 2239 of file TChain.cxx. ◆ Process() [2/2]. Long64_t TChain::Process ; (; TSelector * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Process this chain executing the code in selector. ; The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 2261 of file TChain.cxx. ◆ RecursiveRemove(). void TChain::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ; Reimplemented from TObject.; Definition at line 2279 of file TChain.cxx. ◆ ReleaseChainProof(). void TChain::ReleaseChainProof ; (; ). protected . ◆ RemoveFriend(). void TChain::RemoveFriend ; (; TTree",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:90992,Availability,error,error,90992,"Chain::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print the header information of each tree in the chain. ; See TTree::Print for a list of options. ; Reimplemented from TObject.; Definition at line 2216 of file TChain.cxx. ◆ Process() [1/2]. Long64_t TChain::Process ; (; const char * ; filename, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Process all entries in this chain, calling functions in filename. ; The return value is -1 in case of error and TSelector::GetStatus() in in case of success. See TTree::Process. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 2239 of file TChain.cxx. ◆ Process() [2/2]. Long64_t TChain::Process ; (; TSelector * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Process this chain executing the code in selector. ; The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 2261 of file TChain.cxx. ◆ RecursiveRemove(). void TChain::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ; Reimplemented from TObject.; Definition at line 2279 of file TChain.cxx. ◆ ReleaseChainProof(). void TChain::ReleaseChainProof ; (; ). protected . ◆ RemoveFriend(). void TChain::RemoveFriend ; (; TTree * ; oldFriend). overridevirtual . Remove a friend from the list of friends. ; Reimplemented from TTree.; Definition at line 2298 of file TChain.cxx. ◆ Reset(). void TChain::Reset ; (; Option_t * ; option = """"). overridevirtual . Resets the state of this chain. ; Reimplemented from TTree.; Definition at line 2321 of file TChain.cxx. ◆ ResetAfterMerge(). void TChain::ResetAfterMerge ; (; TFileMergeInfo * ; info). overridevirtual . Resets the state of th",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:96566,Availability,error,error,96566," ; (; const char * ; bname, . void * ; add, . TClass * ; realClass, . EDataType ; datatype, . bool ; isptr . ). overridevirtual . Check if bname is already in the status list, and if not, create a TChainElement object and set its address. ; See TTree::CheckBranchAddressType for the semantic of the return value.; Note: See the comments in TBranchElement::SetAddress() for a more detailed discussion of the meaning of the add parameter. ; Reimplemented from TTree.; Definition at line 2571 of file TChain.cxx. ◆ SetBranchStatus(). void TChain::SetBranchStatus ; (; const char * ; bname, . bool ; status = true, . UInt_t * ; found = nullptr . ). overridevirtual . Set branch status to Process or DoNotProcess. ; Parameters. [in]bnameis the name of a branch. if bname=""*"", apply to all branches. ; [in]status= 1 branch will be processed, = 0 branch will not be processed ; [out]found. See IMPORTANT REMARKS in TTree::SetBranchStatus and TChain::SetBranchAddress; If found is not 0, the number of branch(es) found matching the regular expression is returned in *found AND the error message 'unknown branch' is suppressed. ; Reimplemented from TTree.; Definition at line 2613 of file TChain.cxx. ◆ SetCacheSize(). Int_t TChain::SetCacheSize ; (; Long64_t ; cacheSize = -1). overridevirtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented from TTree.; Definition at line 2441 of file TChain.cxx. ◆ SetDirectory(). void TChain::SetDirectory ; (; TDirectory * ; dir). overridevirtual . Remove reference to this chain from current directory and add reference to new directory dir. ; dir can be 0 in which case the chain does not belong to any directory. ; Reimplemented from TTree.; Definition at line 2640 of file TChain.cxx. ◆ SetEntryList(). void TChain::SetEntryLis",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:97044,Availability,error,error,97044,"tus(). void TChain::SetBranchStatus ; (; const char * ; bname, . bool ; status = true, . UInt_t * ; found = nullptr . ). overridevirtual . Set branch status to Process or DoNotProcess. ; Parameters. [in]bnameis the name of a branch. if bname=""*"", apply to all branches. ; [in]status= 1 branch will be processed, = 0 branch will not be processed ; [out]found. See IMPORTANT REMARKS in TTree::SetBranchStatus and TChain::SetBranchAddress; If found is not 0, the number of branch(es) found matching the regular expression is returned in *found AND the error message 'unknown branch' is suppressed. ; Reimplemented from TTree.; Definition at line 2613 of file TChain.cxx. ◆ SetCacheSize(). Int_t TChain::SetCacheSize ; (; Long64_t ; cacheSize = -1). overridevirtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented from TTree.; Definition at line 2441 of file TChain.cxx. ◆ SetDirectory(). void TChain::SetDirectory ; (; TDirectory * ; dir). overridevirtual . Remove reference to this chain from current directory and add reference to new directory dir. ; dir can be 0 in which case the chain does not belong to any directory. ; Reimplemented from TTree.; Definition at line 2640 of file TChain.cxx. ◆ SetEntryList(). void TChain::SetEntryList ; (; TEntryList * ; elist, . Option_t * ; opt = """" . ). overridevirtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; Parameters. [in]elistThe entry list to be assigned to this chain. ; [in]optAn option string. Possible values are:; """" (default): both the file names of the chain elements and the file names of the TEntryList sublists are expanded to full path name.; ""ne"": the file names are taken as they are and not expanded; ""sync"": the TChain will ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:99229,Availability,error,error,99229,"rorIf option ""sync"" was chosen and either:; elist doesn't have sub entry lists.; the number of sub entry lists in elist is different than the number of trees in the chain.; any of the sub entry lists in elist doesn't correspond to the tree of the chain with the same index (i.e. it doesn't share the same tree name and file name). This function finds correspondence between the sub-lists of the TEntryList and the trees of the TChain. ; Reimplemented from TTree.; Definition at line 2677 of file TChain.cxx. ◆ SetEntryListFile(). void TChain::SetEntryListFile ; (; const char * ; filename = """", . Option_t * ; opt = """" . ). virtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; This function creates a special kind of entry list (TEntryListFromFile object) that loads lists, corresponding to the chain elements, one by one, so that only one list is in memory at a time.; If there is an error opening one of the files, this file is skipped and the next file is loaded; File naming convention:. by default, filename_elist.root is used, where filename is the name of the chain element; xxx$xxx.root - $ sign is replaced by the name of the chain element. If the list name is not specified (by passing filename_elist.root/listname to the TChain::SetEntryList() function, the first object of class TEntryList in the file is taken.; It is assumed, that there are as many list files, as there are elements in the chain and they are in the same order ; Definition at line 2822 of file TChain.cxx. ◆ SetEventList(). void TChain::SetEventList ; (; TEventList * ; evlist). overridevirtual . This function transfroms the given TEventList into a TEntryList. ; NOTE, that this function loads all tree headers, because the entry numbers in the TEventList are global and have to be recomputed, taking into account the number of entries in each tree.; The new TEntryList is owned by the TChain and gets deleted when the chain is deleted. This TEntry",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:26234,Deployability,update,updateExisting,26234," in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual Long64_t SetEntries (Long64_t n=-1);  Change number of entries in the tree. ;  ; virtual void SetEstimate (Long64_t nentries=1000000);  Set number of entries to estimate variable limits. ;  ; virtual void SetFileNumber (Int_t number=0);  Set fFileNumber to number. ;  ; virtual void SetImplicitMT (bool enabled);  ; ROOT::TIOFeatures SetIOFeatures (const ROOT::TIOFeatures &);  Provide the end-user with the ability to enable/disable various experimental IO features for this TTree. ;  ; virtual void SetMaxEntryLoop (Long64_t maxev=kMaxEntries);  ; virtual void SetMaxVirtualSize (Long64_t size=0);  ; void SetName (const char *name) override;  Change the name of this tree. ;  ; virtual void SetNotify (TObject *obj);  Sets the address of the object to be notified when the tree is loaded. ;  ; virtual void SetObject (const char *name, const char *title);  Change the name and title of this tree. ;  ; virtua",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:49066,Energy Efficiency,allocate,allocated,49066,event selection list (if one) ;  ; Long64_t fEstimate;  Number of entries to estimate histogram limits. ;  ; TEventList * fEventList;  ! Pointer to event selection list (if one) ;  ; TList * fExternalFriends;  ! List of TFriendsElement pointing to us and need to be notified of LoadTree. Content not owned. ;  ; Int_t fFileNumber;  ! current file number (if file extensions) ;  ; Long64_t fFlushedBytes;  Number of auto-flushed bytes. ;  ; UInt_t fFriendLockStatus;  ! Record which method is locking the friend recursion ;  ; TList * fFriends;  pointer to list of friend elements ;  ; bool fIMTEnabled;  ! true if implicit multi-threading is enabled for this tree ;  ; TArrayI fIndex;  Index of sorted values. ;  ; TArrayD fIndexValues;  Sorted index values. ;  ; TIOFeatures fIOFeatures {0};  IO features to define for newly-written baskets and branches. ;  ; TObjArray fLeaves;  Direct pointers to individual branch leaves. ;  ; Int_t fMakeClass;  ! not zero when processing code generated by MakeClass ;  ; Int_t fMaxClusterRange;  ! Memory allocated for the cluster range. ;  ; Long64_t fMaxEntries;  Maximum number of entries in case of circular buffers. ;  ; Long64_t fMaxEntryLoop;  Maximum number of entries to process. ;  ; Long64_t fMaxVirtualSize;  Maximum total size of buffers kept in memory. ;  ; Int_t fNClusterRange;  Number of Cluster range in addition to the one defined by 'AutoFlush'. ;  ; UInt_t fNEntriesSinceSorting;  ! Number of entries processed since the last re-sorting of branches ;  ; Int_t fNfill;  ! Local for EntryLoop ;  ; TObject * fNotify;  Object to be notified when loading a Tree. ;  ; Int_t fPacketSize;  ! Number of entries in one packet for parallel root ;  ; TVirtualPerfStats * fPerfStats;  ! pointer to the current perf stats object ;  ; TVirtualTreePlayer * fPlayer;  ! Pointer to current Tree player ;  ; Long64_t fReadEntry;  ! Number of the entry being processed ;  ; Long64_t fSavedBytes;  Number of autosaved bytes. ;  ; Int_t fScanField;  Number of r,MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:59172,Energy Efficiency,efficient,efficient,59172,"mentation for TChain::AddFile, which does not support wildcards but allows the URL name to contain a query).; The rules for tagging the name of the tree in the file are the same as in the format above. Details of the nentries parameter; Depending on the value of the parameter, the number of entries in the file is retrieved differently:; If nentries <= 0, the file is connected and the tree header read in memory to get the number of entries.; If nentries > 0, the file is not connected, nentries is assumed to be the number of entries in the file. In this case, no check is made that the file exists and that the corresponding tree exists as well. This second mode is interesting in case the number of entries in the file is already stored in a run data base for example.; If nentries == TTree::kMaxEntries (default), the file is not connected. The number of entries in each file will be read only when the file will need to be connected to read an entry. This option is the default and very efficient if one processes the chain sequentially. Note that in case TChain::GetEntry(entry) is called and entry refers to an entry in the 3rd file, for example, this forces the tree headers in the first and second file to be read to find the number of entries in these files. Note that calling TChain::GetEntriesFast after having created a chain with this default returns TTree::kMaxEntries ! Using TChain::GetEntries instead will force all the tree headers in the chain to be read to get the number of entries in each tree. The TChain data structure; Each element of the chain is a TChainElement object. It has a name equal to the tree name of this chain (or the name of the specific tree in the added file if it was explicitly tagged) and a title equal to the file name. So, to loop over the files that have been added to this chain: TObjArray *fileElements=chain->GetListOfFiles();; for (TObject *op: *fileElements) {; auto chainElement = static_cast<TChainElement *>(op);; TFile f{chainElement->GetTitl",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:62359,Energy Efficiency,efficient,efficient,62359,"e. Otherwise if tname argument is specified the chain will load the tree named tname from the file, otherwise the original treename specified in the TChain constructor will be used. Tagging the tree_name with a slash [/tree_name] is only supported for backward compatibility; it requires the file name ot contain the string '.root' and its use is deprecated.; A. If nentries <= 0, the file is opened and the tree header read into memory to get the number of entries.; B. If nentries > 0, the file is not opened, and nentries is assumed to be the number of entries in the file. In this case, no check is made that the file exists nor that the tree exists in the file. This second mode is interesting in case the number of entries in the file is already stored in a run database for example.; C. If nentries == TTree::kMaxEntries (default), the file is not opened. The number of entries in each file will be read only when the file is opened to read an entry. This option is the default and very efficient if one processes the chain sequentially. Note that in case GetEntry(entry) is called and entry refers to an entry in the third file, for example, this forces the tree headers in the first and second file to be read to find the number of entries in those files. Note that if one calls GetEntriesFast() after having created a chain with this default, GetEntriesFast() will return TTree::kMaxEntries! Using the GetEntries() function instead will force all of the tree headers in the chain to be read to read the number of entries in each tree.; D. The TChain data structure Each TChainElement has a name equal to the tree name of this TChain and a title equal to the file name. So, to loop over the TFiles that have been added to this chain: TObjArray *fileElements=chain->GetListOfFiles();; TIter next(fileElements);; TChainElement *chEl=0;; while (( chEl=(TChainElement*)next() )) {; TFile f(chEl->GetTitle());; ... do something with f ...; }; The function returns 1 if the file is successfully con",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:25660,Integrability,interface,interface,25660,"cord a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual Long64_t SetEntries (Long64_t n=-1);  Change number of entries in the tree. ;  ; virtual void SetEstimate (Long64_t nentries=1000000);  Set number of entries to estimate variable limits. ;  ; virtual void SetFileNumber (Int_t number=0);  Set fFileNumber to number. ;  ; virtual void Set",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:31400,Integrability,message,message,31400," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:31941,Integrability,message,message,31941,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:32931,Integrability,message,message,32931,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; void Obsolete (const char *method, const char *a",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:35522,Integrability,message,message,35522,", void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Paint (Option_t *option="""");  This method must be overridden if a class wants to paint itself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:35713,Integrability,message,message,35713,"tself. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1); ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:57936,Integrability,depend,depending,57936,"// c.Add(""myfile.root/treename"");; // DO THIS INSTEAD; c.Add(""myfile.root?#treename"");; c#define c(i)Definition RSha256.hxx:101; TChain::Addvirtual Int_t Add(TChain *chain)Add all files referenced by the passed chain to this chain.Definition TChain.cxx:219. Wildcard treatment is triggered by any of the special characters: []*? which may be used in the file name or subdirectory name, eg. specifying ""xxx*.root"" adds all files starting with xxx in the current file system directory and ""*&zwj;/*.root"" adds all the files in the current subdirectories (but not in the subsubdirectories). The second format accepted for name may have the form of a URL, e.g.:; root://machine/path/file_name[?[query][#tree_name]]; or root://machine/path/file_name; or root://machine/path/file_name.root[.oext]/tree_name; or root://machine/path/file_name.root[.oext]/tree_name?query; Note the following:; The optional ""query"" token is to be interpreted by the remote server.; Wildcards may be supported in URLs, depending on the protocol plugin and the remote server.; http or https URLs can contain a query identifier without tree_name, but generally URLs can not be written with them because of ambiguity with the wildcard character. (Also see the documentation for TChain::AddFile, which does not support wildcards but allows the URL name to contain a query).; The rules for tagging the name of the tree in the file are the same as in the format above. Details of the nentries parameter; Depending on the value of the parameter, the number of entries in the file is retrieved differently:; If nentries <= 0, the file is connected and the tree header read in memory to get the number of entries.; If nentries > 0, the file is not connected, nentries is assumed to be the number of entries in the file. In this case, no check is made that the file exists and that the corresponding tree exists as well. This second mode is interesting in case the number of entries in the file is already stored in a run data base for ex",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:57953,Integrability,protocol,protocol,57953,"// c.Add(""myfile.root/treename"");; // DO THIS INSTEAD; c.Add(""myfile.root?#treename"");; c#define c(i)Definition RSha256.hxx:101; TChain::Addvirtual Int_t Add(TChain *chain)Add all files referenced by the passed chain to this chain.Definition TChain.cxx:219. Wildcard treatment is triggered by any of the special characters: []*? which may be used in the file name or subdirectory name, eg. specifying ""xxx*.root"" adds all files starting with xxx in the current file system directory and ""*&zwj;/*.root"" adds all the files in the current subdirectories (but not in the subsubdirectories). The second format accepted for name may have the form of a URL, e.g.:; root://machine/path/file_name[?[query][#tree_name]]; or root://machine/path/file_name; or root://machine/path/file_name.root[.oext]/tree_name; or root://machine/path/file_name.root[.oext]/tree_name?query; Note the following:; The optional ""query"" token is to be interpreted by the remote server.; Wildcards may be supported in URLs, depending on the protocol plugin and the remote server.; http or https URLs can contain a query identifier without tree_name, but generally URLs can not be written with them because of ambiguity with the wildcard character. (Also see the documentation for TChain::AddFile, which does not support wildcards but allows the URL name to contain a query).; The rules for tagging the name of the tree in the file are the same as in the format above. Details of the nentries parameter; Depending on the value of the parameter, the number of entries in the file is retrieved differently:; If nentries <= 0, the file is connected and the tree header read in memory to get the number of entries.; If nentries > 0, the file is not connected, nentries is assumed to be the number of entries in the file. In this case, no check is made that the file exists and that the corresponding tree exists as well. This second mode is interesting in case the number of entries in the file is already stored in a run data base for ex",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:76762,Integrability,rout,routine,76762,"ifferent entry serial numbers corresponding to (major,minor). ; Reimplemented from TTree.; Definition at line 1028 of file TChain.cxx. ◆ GetFile(). TFile * TChain::GetFile ; (; ); const. Return a pointer to the current file. ; If no file is connected, the first file is automatically loaded. ; Definition at line 1039 of file TChain.cxx. ◆ GetLeaf() [1/2]. TLeaf * TChain::GetLeaf ; (; const char * ; branchname, . const char * ; leafname . ). overridevirtual . Return a pointer to the leaf name in the current tree. ; Reimplemented from TTree.; Definition at line 1052 of file TChain.cxx. ◆ GetLeaf() [2/2]. TLeaf * TChain::GetLeaf ; (; const char * ; name). overridevirtual . Return a pointer to the leaf name in the current tree. ; Reimplemented from TTree.; Definition at line 1073 of file TChain.cxx. ◆ GetListOfBranches(). TObjArray * TChain::GetListOfBranches ; (; ). overridevirtual . Return a pointer to the list of branches of the current tree. ; Warning: If there is no current TTree yet, this routine will open the first in the chain.; Returns 0 on failure. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 1099 of file TChain.cxx. ◆ GetListOfFiles(). TObjArray * TChain::GetListOfFiles ; (; ); const. inline . Definition at line 111 of file TChain.h. ◆ GetListOfLeaves(). TObjArray * TChain::GetListOfLeaves ; (; ). overridevirtual . Return a pointer to the list of leaves of the current tree. ; Warning: May set the current tree! ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 1122 of file TChain.cxx. ◆ GetMaximum(). Double_t TChain::GetMaximum ; (; const char * ; columname). overridevirtual . Return maximum of column with name columname. ; Reimplemented from TTree.; Definition at line 1143 of file TChain.cxx. ◆ GetMinimum(). Double_t TChain::GetMinimum ; (; const char * ; columname). overridevirtual . Return minimum of column with name columname. ; Reimplemented from TTree.; Definition at line 1160 of file TChain.c",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:81566,Integrability,rout,routine,81566,"plemented from TTree.; Definition at line 1270 of file TChain.cxx. ◆ LoadTree(). Long64_t TChain::LoadTree ; (; Long64_t ; entry). overridevirtual . Find the tree which contains entry, and set it as the current tree. ; Returns the entry number in that tree.; The input argument entry is the entry serial number in the whole chain.; In case of error, LoadTree returns a negative number:; -1: The chain is empty.; -2: The requested entry number is less than zero or too large for the chain.; -3: The file corresponding to the entry could not be correctly open; -4: The TChainElement corresponding to the entry is missing or the TTree is missing from the file.; -5: Internal error, please report the circumstance when this happen as a ROOT issue.; -6: An error occurred within the notify callback. Calls fNotify->Notify() (if fNotify is not null) when starting the processing of a new sub-tree. See TNotifyLink for more information on the notification mechanism.; NoteThis is the only routine which sets the value of fTree to a non-zero pointer. ; Reimplemented from TTree.; Definition at line 1298 of file TChain.cxx. ◆ Lookup(). void TChain::Lookup ; (; bool ; force = false). Check / locate the files in the chain. ; By default only the files not yet looked up are checked. Use force = true to check / re-check every file. ; Definition at line 1734 of file TChain.cxx. ◆ Loop(). void TChain::Loop ; (; Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Loop on nentries of this chain starting at firstentry. (NOT IMPLEMENTED) ; Definition at line 1804 of file TChain.cxx. ◆ ls(). void TChain::ls ; (; Option_t * ; option = """"); const. overridevirtual . List the chain. ; Reimplemented from TObject.; Definition at line 1848 of file TChain.cxx. ◆ Merge() [1/4]. Long64_t TChain::Merge ; (; const char * ; name, . Option_t * ; option = """" . ). virtual . Merge all the entries in the chain into a new tree in a new file. ; See important note in the ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:82713,Integrability,rout,routine,82713," at line 1298 of file TChain.cxx. ◆ Lookup(). void TChain::Lookup ; (; bool ; force = false). Check / locate the files in the chain. ; By default only the files not yet looked up are checked. Use force = true to check / re-check every file. ; Definition at line 1734 of file TChain.cxx. ◆ Loop(). void TChain::Loop ; (; Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Loop on nentries of this chain starting at firstentry. (NOT IMPLEMENTED) ; Definition at line 1804 of file TChain.cxx. ◆ ls(). void TChain::ls ; (; Option_t * ; option = """"); const. overridevirtual . List the chain. ; Reimplemented from TObject.; Definition at line 1848 of file TChain.cxx. ◆ Merge() [1/4]. Long64_t TChain::Merge ; (; const char * ; name, . Option_t * ; option = """" . ). virtual . Merge all the entries in the chain into a new tree in a new file. ; See important note in the following function Merge().; If the chain is expecting the input tree inside a directory, this directory is NOT created by this routine.; So in a case where we have: TChain ch(""mydir/mytree"");; ch.Merge(""newfile.root"");; The resulting file will have not subdirectory. To recreate the directory structure do: TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; file->mkdir(""mydir"")->cd();; ch.Merge(file, 0);; TDirectoryFile::mkdirTDirectory * mkdir(const char *name, const char *title="""", Bool_t returnExistingDirectory=kFALSE) overrideCreate a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."".Definition TDirectoryFile.cxx:1249; TDirectory::cdvirtual Bool_t cd()Change current directory to ""this"" directory.Definition TDirectory.cxx:538; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089. Definition at line 1881 of file TChain.cxx. ◆ Merge() [2/4]. Long64_t TChain::Merge ; (; TColl",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:85342,Integrability,rout,routine,85342,"ent file. ; Note: The ""file"" parameter is not the file where the new tree will be inserted. The new tree is inserted into gDirectory, which is usually the most recently opened file, or the directory most recently cd()'d to.; If option = ""C"" is given, the compression level for all branches in the new Tree is set to the file compression level. By default, the compression level of all branches is the original compression level in the old trees.; If basketsize > 1000, the basket size for all branches of the new tree will be set to basketsize.; Example using the file generated in $ROOTSYS/test/Event merge two copies of Event.root gSystem.Load(""libEvent"");; TChain ch(""T"");; ch.Add(""Event1.root"");; ch.Add(""Event2.root"");; ch.Merge(""all.root"");; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:555; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; If the chain is expecting the input tree inside a directory, this directory is NOT created by this routine.; So if you do: TChain ch(""mydir/mytree"");; ch.Merge(""newfile.root"");; The resulting file will not have subdirectories. In order to preserve the directory structure do the following instead: TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; file->mkdir(""mydir"")->cd();; ch.Merge(file, 0);; If 'option' contains the word 'fast' the merge will be done without unzipping or unstreaming the baskets (i.e., a direct copy of the raw bytes on disk).; When 'fast' is specified, 'option' can also contains a sorting order for the baskets in the output file.; There is currently 3 supported sorting order: SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsByEntry; When using SortBasketsByOffset the baskets are written in the output file in the same order as in the original file (i.e. the basket are sorted on their offset in the original file; Usually this also means that the baskets are sorted on the index/number of the las",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:88538,Integrability,depend,depends,88538,"e in general the automatic file overflow described above may happen during the merge. If only the current file is produced (the file passed as first argument), one can instruct Merge to not close and delete the file by specifying the option ""keep"".; The function returns the total number of files produced. To check that all files have been merged use something like: if (newchain->GetEntries()!=oldchain->GetEntries()) {; ... not all the file have been copied ...; }. Definition at line 2007 of file TChain.cxx. ◆ operator=(). TChain & TChain::operator= ; (; const TChain & ; ). private . ◆ ParseTreeFilename(). void TChain::ParseTreeFilename ; (; const char * ; name, . TString & ; filename, . TString & ; treename, . TString & ; query, . TString & ; suffix . ); const. private . Get the tree url or filename and other information from the name. ; A treename and a url's query section is split off from name. The splitting depends on whether the resulting filename is to be subsequently treated for wildcards or not, since the question mark is both the url query identifier and a wildcard. Wildcard matching is not done in this method itself. [xxx://host]/a/path/file_name[?query[#treename]]; The following way to specify the treename is still supported with the constrain that the file name contains the sub-string '.root'. This is now deprecated and will be removed in future versions. [xxx://host]/a/path/file.root[.oext][/treename]; [xxx://host]/a/path/file.root[.oext][/treename][?query]; Note that in a case like this [xxx://host]/a/path/file#treename; i.e. anchor but no options (query), the filename will be the full path, as the anchor may be the internal file name of an archive. Use '?#treename' to pass the treename if the query field is empty.; Parameters. [in]nameis the original name ; [out]filenamethe url or filename to be opened or matched ; [out]treenamethe treename, which may be found in a url fragment section as a trailing part of the name (deprecated). If not found this will",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:96572,Integrability,message,message,96572," ; (; const char * ; bname, . void * ; add, . TClass * ; realClass, . EDataType ; datatype, . bool ; isptr . ). overridevirtual . Check if bname is already in the status list, and if not, create a TChainElement object and set its address. ; See TTree::CheckBranchAddressType for the semantic of the return value.; Note: See the comments in TBranchElement::SetAddress() for a more detailed discussion of the meaning of the add parameter. ; Reimplemented from TTree.; Definition at line 2571 of file TChain.cxx. ◆ SetBranchStatus(). void TChain::SetBranchStatus ; (; const char * ; bname, . bool ; status = true, . UInt_t * ; found = nullptr . ). overridevirtual . Set branch status to Process or DoNotProcess. ; Parameters. [in]bnameis the name of a branch. if bname=""*"", apply to all branches. ; [in]status= 1 branch will be processed, = 0 branch will not be processed ; [out]found. See IMPORTANT REMARKS in TTree::SetBranchStatus and TChain::SetBranchAddress; If found is not 0, the number of branch(es) found matching the regular expression is returned in *found AND the error message 'unknown branch' is suppressed. ; Reimplemented from TTree.; Definition at line 2613 of file TChain.cxx. ◆ SetCacheSize(). Int_t TChain::SetCacheSize ; (; Long64_t ; cacheSize = -1). overridevirtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented from TTree.; Definition at line 2441 of file TChain.cxx. ◆ SetDirectory(). void TChain::SetDirectory ; (; TDirectory * ; dir). overridevirtual . Remove reference to this chain from current directory and add reference to new directory dir. ; dir can be 0 in which case the chain does not belong to any directory. ; Reimplemented from TTree.; Definition at line 2640 of file TChain.cxx. ◆ SetEntryList(). void TChain::SetEntryLis",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:1097,Modifiability,inherit,inherited,1097,"butes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TChain Class ReferenceTree Library. ; A chain is a collection of files containing TTree objects. ; When the chain is created, the first parameter is the default name for the Tree to be processed later on.; Enter a new element in the chain via the TChain::Add function. Once a chain is defined, one can use the normal TTree functions to Draw,Scan,etc.; Use TChain::SetBranchStatus to activate one or more branches for all the trees in the chain. ; Definition at line 33 of file TChain.h. Public Types; enum  EStatusBits { kGlobalWeight = (1ULL << ( 15 )); , kAutoDelete = (1ULL << ( 16 )); , kProofUptodate = (1ULL << ( 17 )); , kProofLite = (1ULL << ( 18 )); };  ; enum  Mode { kWithoutGlobalRegistration; , kWithGlobalRegistration; };  ;  Public Types inherited from TTree; enum  { kSplitCollectionOfPointers = 100; };  ; enum  ESetBranchAddressStatus { ;   kMissingBranch = -5; , kInternalError = -4; , kMissingCompiledCollectionProxy = -3; , kMismatch = -2; , ;   kClassMismatch = -1; , kMatch = 0; , kMatchConversion = 1; , kMatchConversionCollection = 2; , ;   kMakeClass = 3; , kVoidPtr = 4; , kNoCheck = 5; , kNeedEnableDecomposedObj = (1ULL << ( 29 )); , ;   kNeedDisableDecomposedObj = (1ULL << ( 30 )); , kDecomposedObjMask = kNeedEnableDecomposedObj | kNeedDisableDecomposedObj. };  ; enum  EStatusBits { kForceRead = (1ULL << ( 11 )); , kCircular = (1ULL << ( 12 )); , kOnlyFlushAtCluster = (1ULL << ( 14 )); , kEntriesReshuffled = (1ULL << ( 19 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:1826,Modifiability,inherit,inherited,1826,"f file TChain.h. Public Types; enum  EStatusBits { kGlobalWeight = (1ULL << ( 15 )); , kAutoDelete = (1ULL << ( 16 )); , kProofUptodate = (1ULL << ( 17 )); , kProofLite = (1ULL << ( 18 )); };  ; enum  Mode { kWithoutGlobalRegistration; , kWithGlobalRegistration; };  ;  Public Types inherited from TTree; enum  { kSplitCollectionOfPointers = 100; };  ; enum  ESetBranchAddressStatus { ;   kMissingBranch = -5; , kInternalError = -4; , kMissingCompiledCollectionProxy = -3; , kMismatch = -2; , ;   kClassMismatch = -1; , kMatch = 0; , kMatchConversion = 1; , kMatchConversionCollection = 2; , ;   kMakeClass = 3; , kVoidPtr = 4; , kNoCheck = 5; , kNeedEnableDecomposedObj = (1ULL << ( 29 )); , ;   kNeedDisableDecomposedObj = (1ULL << ( 30 )); , kDecomposedObjMask = kNeedEnableDecomposedObj | kNeedDisableDecomposedObj. };  ; enum  EStatusBits { kForceRead = (1ULL << ( 11 )); , kCircular = (1ULL << ( 12 )); , kOnlyFlushAtCluster = (1ULL << ( 14 )); , kEntriesReshuffled = (1ULL << ( 19 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TChain (const char *name, const char *title="""", Mode mode=kWithGlobalRegistration);  Create a chain. ;  ;  TChain (Mode mode=kWithGlobalRegistration);  Default constructor. ;  ;  ~TChain () override;  Destructor. ;  ; virtual Int_t Add (const char *name, Long64_t nentries=TTree::kMaxEntries);  Add a new file to this chain. ;  ; virtual I",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:12480,Modifiability,inherit,inherited,12480,"e list). ;  ; void SetEventList (TEventList *evlist) override;  This function transfroms the given TEventList into a TEntryList. ;  ; void SetMakeClass (Int_t make) override;  Set all the branches in this TTree to be in decomposed object mode (also known as MakeClass mode). ;  ; void SetName (const char *name) override;  Change the name of this TChain. ;  ; virtual void SetPacketSize (Int_t size=100);  Set number of entries per packet for parallel root. ;  ; virtual void SetProof (bool on=true, bool refresh=false, bool gettreeheader=false);  Enable/Disable PROOF processing on the current default Proof (gProof). ;  ; void SetWeight (Double_t w=1, Option_t *option="""") override;  Set chain weight. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UseCache (Int_t maxCacheSize=10, Int_t pageSize=0);  Dummy function kept for back compatibility. ;  ;  Public Member Functions inherited from TTree;  TTree ();  Default constructor and I/O constructor. ;  ;  TTree (const char *name, const char *title, Int_t splitlevel=99, TDirectory *dir=(::ROOT::Internal::TDirectoryAtomicAdapter{}));  Normal tree constructor. ;  ;  TTree (const TTree &tt)=delete;  ;  ~TTree () override;  Destructor. ;  ; void AddAllocationCount (UInt_t count);  ; virtual Int_t AddBranchToCache (const char *bname, bool subbranches=false);  Add branch with name bname to the Tree cache. ;  ; virtual Int_t AddBranchToCache (TBranch *branch, bool subbranches=false);  Add branch b to the Tree cache. ;  ; void AddClone (TTree *);  Add a cloned tree to our list of trees to be notified whenever we change our branch addresses or when we are deleted. ;  ; virtual void AddTotBytes (Int_t tot);  ; virtual void AddZipBytes (Int_t zip);  ; virtual Long64_t AutoSave (Option_t *option="""");  AutoSave tree header every fAutoSave bytes. ;  ; virtual Int_t Branch (const char *folder, Int_t bufsize=32000, Int_t splitlevel=99);  Create ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:24940,Modifiability,variab,variable,24940,"rn a TSQLResult object containing entries following selection. ;  ; virtual Long64_t ReadFile (const char *filename, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from filename. ;  ; virtual Long64_t ReadStream (std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; v",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:26500,Modifiability,variab,variable,26500,"**add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual Long64_t SetEntries (Long64_t n=-1);  Change number of entries in the tree. ;  ; virtual void SetEstimate (Long64_t nentries=1000000);  Set number of entries to estimate variable limits. ;  ; virtual void SetFileNumber (Int_t number=0);  Set fFileNumber to number. ;  ; virtual void SetImplicitMT (bool enabled);  ; ROOT::TIOFeatures SetIOFeatures (const ROOT::TIOFeatures &);  Provide the end-user with the ability to enable/disable various experimental IO features for this TTree. ;  ; virtual void SetMaxEntryLoop (Long64_t maxev=kMaxEntries);  ; virtual void SetMaxVirtualSize (Long64_t size=0);  ; void SetName (const char *name) override;  Change the name of this tree. ;  ; virtual void SetNotify (TObject *obj);  Sets the address of the object to be notified when the tree is loaded. ;  ; virtual void SetObject (const char *name, const char *title);  Change the name and title of this tree. ;  ; virtual void SetParallelUnzip (bool opt=true, Float_t RelSize=-1);  Enable or disable parallel unzipping of Tree buffers. ;  ; virtual void SetPerfStats (TVirtualPerfStats *perf);  Set perf stats. ;  ; virtual void SetScanFiel",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:28313,Modifiability,variab,variable,28313," Change the name and title of this tree. ;  ; virtual void SetParallelUnzip (bool opt=true, Float_t RelSize=-1);  Enable or disable parallel unzipping of Tree buffers. ;  ; virtual void SetPerfStats (TVirtualPerfStats *perf);  Set perf stats. ;  ; virtual void SetScanField (Int_t n=50);  ; void SetTargetMemoryRatio (Float_t ratio);  ; virtual void SetTimerInterval (Int_t msec=333);  ; virtual void SetTreeIndex (TVirtualIndex *index);  The current TreeIndex is replaced by the new index. ;  ; virtual void SetUpdate (Int_t freq=0);  ; virtual void Show (Long64_t entry=-1, Int_t lenmax=20);  Print values of all active leaves for entry. ;  ; virtual void StartViewer ();  Start the TTreeViewer on this tree. ;  ; virtual Int_t StopCacheLearningPhase ();  Stop the cache learning phase. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t UnbinnedFit (const char *funcname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Unbinned fit of one or more variable(s) from a tree. ;  ; void UseCurrentStyle () override;  Replace current attributes by current style. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write this object to the current directory. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:28723,Modifiability,inherit,inherited,28723,"x=20);  Print values of all active leaves for entry. ;  ; virtual void StartViewer ();  Start the TTreeViewer on this tree. ;  ; virtual Int_t StopCacheLearningPhase ();  Stop the cache learning phase. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t UnbinnedFit (const char *funcname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Unbinned fit of one or more variable(s) from a tree. ;  ; void UseCurrentStyle () override;  Replace current attributes by current style. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write this object to the current directory. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:30192,Modifiability,inherit,inherited,30192," ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:31030,Modifiability,inherit,inheritance,31030,"zeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:33029,Modifiability,inherit,inherits,33029,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method to declare a ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:33146,Modifiability,inherit,inherits,33146,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method to declare a method obsolete. ;  ; void operator delete (void *ptr);  Operator delete. ;  ; void operator delete (void *ptr, void",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:35752,Modifiability,inherit,inherited,35752," the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ; ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:37257,Modifiability,inherit,inherited,37257,";  Return the line color. ;  ; virtual Style_t GetLineStyle () const;  Return the line style. ;  ; virtual Width_t GetLineWidth () const;  Return the line width. ;  ; virtual void Modify ();  Change current line attributes if necessary. ;  ; virtual void ResetAttLine (Option_t *option="""");  Reset this line attributes to default values. ;  ; virtual void SaveLineAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetLineAttributes ();  Invoke the DialogCanvas Line attributes. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ; ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:38512,Modifiability,inherit,inherited,38512,"his fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TAttMarker. ;  ; virtual Color_t GetMarkerColor () const;  Return the marker color. ;  ; virtual Size_t GetMarkerSize () const;  Return the marker size. ;  ; virtual Style_t GetMarkerStyle () const;  Return the marker style. ;  ; virtual void Modify ();  Change current marker attributes if necessary. ;  ; virtual void ResetAttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attrib",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:40126,Modifiability,inherit,inherited,40126,"ttMarker (Option_t *toption="""");  Reset this marker attributes to the default values. ;  ; virtual void SaveMarkerAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);  Save line attributes as C++ statement(s) on output stream out. ;  ; virtual void SetMarkerAttributes ();  Invoke the DialogCanvas Marker attributes. ;  ; virtual void SetMarkerColor (Color_t mcolor=1);  Set the marker color. ;  ; virtual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TTree; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetBranchStyle ();  Static function returning the current branch style. ;  ; static Long64_t GetMaxTreeSize ();  Static function which returns the tree file size limit in bytes. ;  ; static TTree * MergeTrees (TList *list, Option_t *option="""");  Static function merging the trees in the TList into a new tree. ;  ; static void SetBranchStyle (Int_t style=1);  Set the current branch style. ;  ; static void SetMaxTreeSize (Long64_t maxsize=100000000000LL);  Set the maximum size in bytes of a Tree file (static function). ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static co",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:40875,Modifiability,inherit,inherited,40875,"eName ();  ;  Static Public Member Functions inherited from TTree; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetBranchStyle ();  Static function returning the current branch style. ;  ; static Long64_t GetMaxTreeSize ();  Static function which returns the tree file size limit in bytes. ;  ; static TTree * MergeTrees (TList *list, Option_t *option="""");  Static function merging the trees in the TList into a new tree. ;  ; static void SetBranchStyle (Int_t style=1);  Set the current branch style. ;  ; static void SetMaxTreeSize (Long64_t maxsize=100000000000LL);  Set the maximum size in bytes of a Tree file (static function). ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:41085,Modifiability,inherit,inherited,41085,"eName ();  ;  Static Public Member Functions inherited from TTree; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetBranchStyle ();  Static function returning the current branch style. ;  ; static Long64_t GetMaxTreeSize ();  Static function which returns the tree file size limit in bytes. ;  ; static TTree * MergeTrees (TList *list, Option_t *option="""");  Static function merging the trees in the TList into a new tree. ;  ; static void SetBranchStyle (Int_t style=1);  Set the current branch style. ;  ; static void SetMaxTreeSize (Long64_t maxsize=100000000000LL);  Set the maximum size in bytes of a Tree file (static function). ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ;",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:41603,Modifiability,inherit,inherited,41603,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Static Public Attributes; static constexpr auto kBigNumber = TTree::kMaxEntries;  ;  Static Public Attributes inherited from TTree; static constexpr Long64_t kMaxEntries = TVirtualTreePlayer::kMaxEntries;  . Protected Member Functions; void InvalidateCurrentTree ();  Set the TTree to be reloaded as soon as possible. ;  ; void ReleaseChainProof ();  ;  Protected Member Functions inherited from TTree; virtual TBranch * BranchImp (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:41815,Modifiability,inherit,inherited,41815,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Static Public Attributes; static constexpr auto kBigNumber = TTree::kMaxEntries;  ;  Static Public Attributes inherited from TTree; static constexpr Long64_t kMaxEntries = TVirtualTreePlayer::kMaxEntries;  . Protected Member Functions; void InvalidateCurrentTree ();  Set the TTree to be reloaded as soon as possible. ;  ; void ReleaseChainProof ();  ;  Protected Member Functions inherited from TTree; virtual TBranch * BranchImp (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:42027,Modifiability,inherit,inherited,42027,"e ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Static Public Attributes; static constexpr auto kBigNumber = TTree::kMaxEntries;  ;  Static Public Attributes inherited from TTree; static constexpr Long64_t kMaxEntries = TVirtualTreePlayer::kMaxEntries;  . Protected Member Functions; void InvalidateCurrentTree ();  Set the TTree to be reloaded as soon as possible. ;  ; void ReleaseChainProof ();  ;  Protected Member Functions inherited from TTree; virtual TBranch * BranchImp (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:42640,Modifiability,inherit,inherited,42640,"c TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Static Public Attributes; static constexpr auto kBigNumber = TTree::kMaxEntries;  ;  Static Public Attributes inherited from TTree; static constexpr Long64_t kMaxEntries = TVirtualTreePlayer::kMaxEntries;  . Protected Member Functions; void InvalidateCurrentTree ();  Set the TTree to be reloaded as soon as possible. ;  ; void ReleaseChainProof ();  ;  Protected Member Functions inherited from TTree; virtual TBranch * BranchImp (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch() with added check that addobj matches className. ;  ; virtual TBranch * BranchImp (const char *branchname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpArr (const char *branchname, EDataType datatype, std::size_t N, void *addobj, Int_t bufsize, Int_t splitlevel);  ; virtual TBranch * BranchImpRef (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Sa",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:42911,Modifiability,inherit,inherited,42911,"tatic Public Member Functions inherited from TAttMarker; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Width_t GetMarkerLineWidth (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Static Public Attributes; static constexpr auto kBigNumber = TTree::kMaxEntries;  ;  Static Public Attributes inherited from TTree; static constexpr Long64_t kMaxEntries = TVirtualTreePlayer::kMaxEntries;  . Protected Member Functions; void InvalidateCurrentTree ();  Set the TTree to be reloaded as soon as possible. ;  ; void ReleaseChainProof ();  ;  Protected Member Functions inherited from TTree; virtual TBranch * BranchImp (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch() with added check that addobj matches className. ;  ; virtual TBranch * BranchImp (const char *branchname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpArr (const char *branchname, EDataType datatype, std::size_t N, void *addobj, Int_t bufsize, Int_t splitlevel);  ; virtual TBranch * BranchImpRef (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpRef (const char *branchname, TClass *ptrClass, EDataType datatype, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BronchExec (const char *name, const char *classname, void *addobj",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:45387,Modifiability,inherit,inherited,45387,". ;  ; virtual TLeaf * GetLeafImpl (const char *branchname, const char *leafname);  Return pointer to the 1st Leaf named name in any Branch of this Tree or any branch in the list of friend trees. ;  ; char GetNewlineValue (std::istream &inputStream);  Determine which newline this file is using. ;  ; void ImportClusterRanges (TTree *fromtree);  Appends the cluster range information stored in 'fromtree' to this tree, including the value of fAutoFlush. ;  ; virtual void KeepCircular ();  Keep a maximum of fMaxEntries in memory. ;  ; void MoveReadCache (TFile *src, TDirectory *dir);  Move a cache from a file to the current file in dir. ;  ; Int_t SetBranchAddressImp (TBranch *branch, void *addr, TBranch **ptr);  Change branch address, dealing with clone trees properly. ;  ; Int_t SetCacheSizeAux (bool autocache=true, Long64_t cacheSize=0);  Set the size of the file cache and create it if possible. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool fCanDeleteRefs;  ! If true, TProcessIDs are deleted when closing a file ;  ; TFile * fFile;  ! Pointer to current file (We own the file). ;  ; TObjArray * fFiles;  -> List of file names containing the trees (TChainElement, owned) ;  ; bool fGlobalRegistration;  ! if true, bypass use of global lists ;  ; Int_t fNtrees;  Number of trees. ;  ; TChain * fProofChain;  ! chain proxy when going to be processed by PROOF ;  ; TList * fStatus;  -> List of active/inactive branches (TChainElement, owned) ;  ; TTree * fTree;  ! Pointer to current tree (Note: We do not own this tree.) ;  ; Int_t fTreeNumber;  ! Current Tree number in fTreeOffset table ;  ; Long64_t * fTreeOffset;  [fTreeOffsetLen] Array of variables ;  ; Int_t fTreeOffsetLen;  Current size of fTreeOffset array. ;  ;  Protected Attributes inherited from TTree; TList * fAliases;  List of",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:46299,Modifiability,variab,variables,46299,"Long64_t cacheSize=0);  Set the size of the file cache and create it if possible. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool fCanDeleteRefs;  ! If true, TProcessIDs are deleted when closing a file ;  ; TFile * fFile;  ! Pointer to current file (We own the file). ;  ; TObjArray * fFiles;  -> List of file names containing the trees (TChainElement, owned) ;  ; bool fGlobalRegistration;  ! if true, bypass use of global lists ;  ; Int_t fNtrees;  Number of trees. ;  ; TChain * fProofChain;  ! chain proxy when going to be processed by PROOF ;  ; TList * fStatus;  -> List of active/inactive branches (TChainElement, owned) ;  ; TTree * fTree;  ! Pointer to current tree (Note: We do not own this tree.) ;  ; Int_t fTreeNumber;  ! Current Tree number in fTreeOffset table ;  ; Long64_t * fTreeOffset;  [fTreeOffsetLen] Array of variables ;  ; Int_t fTreeOffsetLen;  Current size of fTreeOffset array. ;  ;  Protected Attributes inherited from TTree; TList * fAliases;  List of aliases for expressions based on the tree branches. ;  ; std::atomic< UInt_t > fAllocationCount {0};  indicates basket should be resized to exact memory usage, but causes significant ;  ; Long64_t fAutoFlush;  Auto-flush tree when fAutoFlush entries written or -fAutoFlush (compressed) bytes produced. ;  ; Long64_t fAutoSave;  Autosave tree when fAutoSave entries written or -fAutoSave (compressed) bytes produced. ;  ; TObjArray fBranches;  List of Branches. ;  ; TBranchRef * fBranchRef;  Branch supporting the TRefTable (if any) ;  ; bool fCacheDoAutoInit;  ! true if cache auto creation or resize check is needed ;  ; bool fCacheDoClusterPrefetch;  ! true if cache is prefetching whole clusters ;  ; Long64_t fCacheSize;  ! Maximum size of file buffers ;  ; bool fCacheUserSet;  ! true if the cache setting was explicit",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:46399,Modifiability,inherit,inherited,46399,"t level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool fCanDeleteRefs;  ! If true, TProcessIDs are deleted when closing a file ;  ; TFile * fFile;  ! Pointer to current file (We own the file). ;  ; TObjArray * fFiles;  -> List of file names containing the trees (TChainElement, owned) ;  ; bool fGlobalRegistration;  ! if true, bypass use of global lists ;  ; Int_t fNtrees;  Number of trees. ;  ; TChain * fProofChain;  ! chain proxy when going to be processed by PROOF ;  ; TList * fStatus;  -> List of active/inactive branches (TChainElement, owned) ;  ; TTree * fTree;  ! Pointer to current tree (Note: We do not own this tree.) ;  ; Int_t fTreeNumber;  ! Current Tree number in fTreeOffset table ;  ; Long64_t * fTreeOffset;  [fTreeOffsetLen] Array of variables ;  ; Int_t fTreeOffsetLen;  Current size of fTreeOffset array. ;  ;  Protected Attributes inherited from TTree; TList * fAliases;  List of aliases for expressions based on the tree branches. ;  ; std::atomic< UInt_t > fAllocationCount {0};  indicates basket should be resized to exact memory usage, but causes significant ;  ; Long64_t fAutoFlush;  Auto-flush tree when fAutoFlush entries written or -fAutoFlush (compressed) bytes produced. ;  ; Long64_t fAutoSave;  Autosave tree when fAutoSave entries written or -fAutoSave (compressed) bytes produced. ;  ; TObjArray fBranches;  List of Branches. ;  ; TBranchRef * fBranchRef;  Branch supporting the TRefTable (if any) ;  ; bool fCacheDoAutoInit;  ! true if cache auto creation or resize check is needed ;  ; bool fCacheDoClusterPrefetch;  ! true if cache is prefetching whole clusters ;  ; Long64_t fCacheSize;  ! Maximum size of file buffers ;  ; bool fCacheUserSet;  ! true if the cache setting was explicitly given by user ;  ; Long64_t fChainOffset;  ! Offset of 1st entry of this Tree in a TChain ;  ; TList * fClones;  ! List of cloned trees which share our addresse",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:51104,Modifiability,inherit,inherited,51104,"td::vector< std::pair< Long64_t, TBranch * > > fSortedBranches;  ! Branches to be processed in parallel when IMT is on, sorted by average task time ;  ; Float_t fTargetMemoryRatio {1.1f};  ! Ratio for memory usage in uncompressed buffers versus actual occupancy. ;  ; Int_t fTimerInterval;  Timer interval in milliseconds. ;  ; std::atomic< Long64_t > fTotalBuffers;  ! Total number of bytes in branch buffers ;  ; Long64_t fTotBytes;  Total number of bytes in all branches before compression. ;  ; TBuffer * fTransientBuffer;  ! Pointer to the current transient buffer. ;  ; TVirtualIndex * fTreeIndex;  Pointer to the tree Index (if any) ;  ; Int_t fUpdate;  Update frequency for EntryLoop. ;  ; TList * fUserInfo;  pointer to a list of user objects associated to this Tree ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ; Long64_t fZipBytes;  Total number of bytes in all branches after compression. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions;  TChain (const TChain &);  ; TChain & operator= (const TChain &);  ; void ParseTreeFilename (const char *name, TString &filename, TString &treename, TString &query, TString &suffix) const;  Get the tree url or filename and other information from the name. ;  . Additional Inherited Members;  Protected Types inherited from TTree; enum  ELockStatusBits { ;   kFindBranch = (1ULL << ( 0 )); , kFindLeaf = (1ULL << ( 1 )); , kGetAlias = (1ULL << ( 2 )); , kGetBranch = (1ULL << ( 3 )); , ;   kGetEntry = (1U",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:51186,Modifiability,inherit,inherited,51186,"td::vector< std::pair< Long64_t, TBranch * > > fSortedBranches;  ! Branches to be processed in parallel when IMT is on, sorted by average task time ;  ; Float_t fTargetMemoryRatio {1.1f};  ! Ratio for memory usage in uncompressed buffers versus actual occupancy. ;  ; Int_t fTimerInterval;  Timer interval in milliseconds. ;  ; std::atomic< Long64_t > fTotalBuffers;  ! Total number of bytes in branch buffers ;  ; Long64_t fTotBytes;  Total number of bytes in all branches before compression. ;  ; TBuffer * fTransientBuffer;  ! Pointer to the current transient buffer. ;  ; TVirtualIndex * fTreeIndex;  Pointer to the tree Index (if any) ;  ; Int_t fUpdate;  Update frequency for EntryLoop. ;  ; TList * fUserInfo;  pointer to a list of user objects associated to this Tree ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ; Long64_t fZipBytes;  Total number of bytes in all branches after compression. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions;  TChain (const TChain &);  ; TChain & operator= (const TChain &);  ; void ParseTreeFilename (const char *name, TString &filename, TString &treename, TString &query, TString &suffix) const;  Get the tree url or filename and other information from the name. ;  . Additional Inherited Members;  Protected Types inherited from TTree; enum  ELockStatusBits { ;   kFindBranch = (1ULL << ( 0 )); , kFindLeaf = (1ULL << ( 1 )); , kGetAlias = (1ULL << ( 2 )); , kGetBranch = (1ULL << ( 3 )); , ;   kGetEntry = (1U",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:51347,Modifiability,inherit,inherited,51347,"ry usage in uncompressed buffers versus actual occupancy. ;  ; Int_t fTimerInterval;  Timer interval in milliseconds. ;  ; std::atomic< Long64_t > fTotalBuffers;  ! Total number of bytes in branch buffers ;  ; Long64_t fTotBytes;  Total number of bytes in all branches before compression. ;  ; TBuffer * fTransientBuffer;  ! Pointer to the current transient buffer. ;  ; TVirtualIndex * fTreeIndex;  Pointer to the tree Index (if any) ;  ; Int_t fUpdate;  Update frequency for EntryLoop. ;  ; TList * fUserInfo;  pointer to a list of user objects associated to this Tree ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ; Long64_t fZipBytes;  Total number of bytes in all branches after compression. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions;  TChain (const TChain &);  ; TChain & operator= (const TChain &);  ; void ParseTreeFilename (const char *name, TString &filename, TString &treename, TString &query, TString &suffix) const;  Get the tree url or filename and other information from the name. ;  . Additional Inherited Members;  Protected Types inherited from TTree; enum  ELockStatusBits { ;   kFindBranch = (1ULL << ( 0 )); , kFindLeaf = (1ULL << ( 1 )); , kGetAlias = (1ULL << ( 2 )); , kGetBranch = (1ULL << ( 3 )); , ;   kGetEntry = (1ULL << ( 4 )); , kGetEntryWithIndex = (1ULL << ( 5 )); , kGetFriend = (1ULL << ( 6 )); , kGetFriendAlias = (1ULL << ( 7 )); , ;   kGetLeaf = (1ULL << ( 8 )); , kLoadTree = (1ULL << ( 9 )); , kPrint = (1ULL",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:51480,Modifiability,inherit,inherited,51480,"c< Long64_t > fTotalBuffers;  ! Total number of bytes in branch buffers ;  ; Long64_t fTotBytes;  Total number of bytes in all branches before compression. ;  ; TBuffer * fTransientBuffer;  ! Pointer to the current transient buffer. ;  ; TVirtualIndex * fTreeIndex;  Pointer to the tree Index (if any) ;  ; Int_t fUpdate;  Update frequency for EntryLoop. ;  ; TList * fUserInfo;  pointer to a list of user objects associated to this Tree ;  ; Double_t fWeight;  Tree weight (see TTree::SetWeight) ;  ; Long64_t fZipBytes;  Total number of bytes in all branches after compression. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions;  TChain (const TChain &);  ; TChain & operator= (const TChain &);  ; void ParseTreeFilename (const char *name, TString &filename, TString &treename, TString &query, TString &suffix) const;  Get the tree url or filename and other information from the name. ;  . Additional Inherited Members;  Protected Types inherited from TTree; enum  ELockStatusBits { ;   kFindBranch = (1ULL << ( 0 )); , kFindLeaf = (1ULL << ( 1 )); , kGetAlias = (1ULL << ( 2 )); , kGetBranch = (1ULL << ( 3 )); , ;   kGetEntry = (1ULL << ( 4 )); , kGetEntryWithIndex = (1ULL << ( 5 )); , kGetFriend = (1ULL << ( 6 )); , kGetFriendAlias = (1ULL << ( 7 )); , ;   kGetLeaf = (1ULL << ( 8 )); , kLoadTree = (1ULL << ( 9 )); , kPrint = (1ULL << ( 10 )); , kRemoveFriend = (1ULL << ( 11 )); , ;   kSetBranchStatus = (1ULL << ( 12 )). };  ;  Protected Types inherited from TObj",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:51964,Modifiability,inherit,inherited,51964," inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions;  TChain (const TChain &);  ; TChain & operator= (const TChain &);  ; void ParseTreeFilename (const char *name, TString &filename, TString &treename, TString &query, TString &suffix) const;  Get the tree url or filename and other information from the name. ;  . Additional Inherited Members;  Protected Types inherited from TTree; enum  ELockStatusBits { ;   kFindBranch = (1ULL << ( 0 )); , kFindLeaf = (1ULL << ( 1 )); , kGetAlias = (1ULL << ( 2 )); , kGetBranch = (1ULL << ( 3 )); , ;   kGetEntry = (1ULL << ( 4 )); , kGetEntryWithIndex = (1ULL << ( 5 )); , kGetFriend = (1ULL << ( 6 )); , kGetFriendAlias = (1ULL << ( 7 )); , ;   kGetLeaf = (1ULL << ( 8 )); , kLoadTree = (1ULL << ( 9 )); , kPrint = (1ULL << ( 10 )); , kRemoveFriend = (1ULL << ( 11 )); , ;   kSetBranchStatus = (1ULL << ( 12 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TTree; static Int_t fgBranchStyle = 1;  Old/New branch style. ;  ; static Long64_t fgMaxTreeSize = 100000000000LL;  Maximum size of a file containing a Tree. ;  . #include <TChain.h>. Inheritance diagram for TChain:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EStatusBits. enum TChain::EStatusBits. EnumeratorkGlobalWeight ; kAutoDelete ; kProofUptodate ; kProofLite . Definition at line 60 of file TChain.h. ◆ Mode. enum TChain::Mode. EnumeratorkWithoutGlobalRegistration ; kWithGlobalRegistration . De",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:52479,Modifiability,inherit,inherited,52479," fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions;  TChain (const TChain &);  ; TChain & operator= (const TChain &);  ; void ParseTreeFilename (const char *name, TString &filename, TString &treename, TString &query, TString &suffix) const;  Get the tree url or filename and other information from the name. ;  . Additional Inherited Members;  Protected Types inherited from TTree; enum  ELockStatusBits { ;   kFindBranch = (1ULL << ( 0 )); , kFindLeaf = (1ULL << ( 1 )); , kGetAlias = (1ULL << ( 2 )); , kGetBranch = (1ULL << ( 3 )); , ;   kGetEntry = (1ULL << ( 4 )); , kGetEntryWithIndex = (1ULL << ( 5 )); , kGetFriend = (1ULL << ( 6 )); , kGetFriendAlias = (1ULL << ( 7 )); , ;   kGetLeaf = (1ULL << ( 8 )); , kLoadTree = (1ULL << ( 9 )); , kPrint = (1ULL << ( 10 )); , kRemoveFriend = (1ULL << ( 11 )); , ;   kSetBranchStatus = (1ULL << ( 12 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TTree; static Int_t fgBranchStyle = 1;  Old/New branch style. ;  ; static Long64_t fgMaxTreeSize = 100000000000LL;  Maximum size of a file containing a Tree. ;  . #include <TChain.h>. Inheritance diagram for TChain:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EStatusBits. enum TChain::EStatusBits. EnumeratorkGlobalWeight ; kAutoDelete ; kProofUptodate ; kProofLite . Definition at line 60 of file TChain.h. ◆ Mode. enum TChain::Mode. EnumeratorkWithoutGlobalRegistration ; kWithGlobalRegistration . Definition at line 71 of file TChain.h. Constructor & Destructor Documentation. ◆ TChain() [1/3]. TChain::TChain ; (; const TChain & ; ). private . ◆ TChain() [2/3]. TChain::TChain ; (; Mode ; mode = kWithGlobalRegistration). Default constructor. ; Definition at line 72 of file TChain.cxx. ◆ TChain() [3/3]. TChain::TChain ; (; const char * ; name, . const char * ; titl",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:52579,Modifiability,inherit,inherited,52579," fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Private Member Functions;  TChain (const TChain &);  ; TChain & operator= (const TChain &);  ; void ParseTreeFilename (const char *name, TString &filename, TString &treename, TString &query, TString &suffix) const;  Get the tree url or filename and other information from the name. ;  . Additional Inherited Members;  Protected Types inherited from TTree; enum  ELockStatusBits { ;   kFindBranch = (1ULL << ( 0 )); , kFindLeaf = (1ULL << ( 1 )); , kGetAlias = (1ULL << ( 2 )); , kGetBranch = (1ULL << ( 3 )); , ;   kGetEntry = (1ULL << ( 4 )); , kGetEntryWithIndex = (1ULL << ( 5 )); , kGetFriend = (1ULL << ( 6 )); , kGetFriendAlias = (1ULL << ( 7 )); , ;   kGetLeaf = (1ULL << ( 8 )); , kLoadTree = (1ULL << ( 9 )); , kPrint = (1ULL << ( 10 )); , kRemoveFriend = (1ULL << ( 11 )); , ;   kSetBranchStatus = (1ULL << ( 12 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TTree; static Int_t fgBranchStyle = 1;  Old/New branch style. ;  ; static Long64_t fgMaxTreeSize = 100000000000LL;  Maximum size of a file containing a Tree. ;  . #include <TChain.h>. Inheritance diagram for TChain:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EStatusBits. enum TChain::EStatusBits. EnumeratorkGlobalWeight ; kAutoDelete ; kProofUptodate ; kProofLite . Definition at line 60 of file TChain.h. ◆ Mode. enum TChain::Mode. EnumeratorkWithoutGlobalRegistration ; kWithGlobalRegistration . Definition at line 71 of file TChain.h. Constructor & Destructor Documentation. ◆ TChain() [1/3]. TChain::TChain ; (; const TChain & ; ). private . ◆ TChain() [2/3]. TChain::TChain ; (; Mode ; mode = kWithGlobalRegistration). Default constructor. ; Definition at line 72 of file TChain.cxx. ◆ TChain() [3/3]. TChain::TChain ; (; const char * ; name, . const char * ; titl",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:54302,Modifiability,variab,variable,54302," & ; ). private . ◆ TChain() [2/3]. TChain::TChain ; (; Mode ; mode = kWithGlobalRegistration). Default constructor. ; Definition at line 72 of file TChain.cxx. ◆ TChain() [3/3]. TChain::TChain ; (; const char * ; name, . const char * ; title = """", . Mode ; mode = kWithGlobalRegistration . ). Create a chain. ; A TChain is a collection of TFile objects. the first parameter ""name"" is the name of the TTree object in the files added with Add. Use TChain::Add to add a new element to this chain.; In case the Tree is in a subdirectory, do, eg: TChain ch(""subdir/treename"");; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; Example: Suppose we have 3 files f1.root, f2.root and f3.root. Each file contains a TTree object named ""T"". TChain ch(""T""); creates a chain to process a Tree called ""T""; ch.Add(""f1.root"");; ch.Add(""f2.root"");; ch.Add(""f3.root"");; ch.Draw(""x"");; a#define a(i)Definition RSha256.hxx:99; The Draw function above will process the variable ""x"" in Tree ""T"" reading sequentially the 3 files in the chain ch.; The TChain data structure:; Each TChainElement has a name equal to the tree name of this TChain and a title equal to the file name. So, to loop over the TFiles that have been added to this chain: TObjArray *fileElements=chain->GetListOfFiles();; TIter next(fileElements);; TChainElement *chEl=0;; while (( chEl=(TChainElement*)next() )) {; TFile f(chEl->GetTitle());; ... do something with f ...; }; f#define f(i)Definition RSha256.hxx:104; TChainElementA TChainElement describes a component of a TChain.Definition TChainElement.h:28; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TIterDefinition TCollection.h:235; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjArrayAn array of TObjects.Definition TObjArray.h:31. Definition at line 140 of file TChain.cxx. ◆ ~TChain(). TChain::~TChain ; (;",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:57962,Modifiability,plugin,plugin,57962,"// c.Add(""myfile.root/treename"");; // DO THIS INSTEAD; c.Add(""myfile.root?#treename"");; c#define c(i)Definition RSha256.hxx:101; TChain::Addvirtual Int_t Add(TChain *chain)Add all files referenced by the passed chain to this chain.Definition TChain.cxx:219. Wildcard treatment is triggered by any of the special characters: []*? which may be used in the file name or subdirectory name, eg. specifying ""xxx*.root"" adds all files starting with xxx in the current file system directory and ""*&zwj;/*.root"" adds all the files in the current subdirectories (but not in the subsubdirectories). The second format accepted for name may have the form of a URL, e.g.:; root://machine/path/file_name[?[query][#tree_name]]; or root://machine/path/file_name; or root://machine/path/file_name.root[.oext]/tree_name; or root://machine/path/file_name.root[.oext]/tree_name?query; Note the following:; The optional ""query"" token is to be interpreted by the remote server.; Wildcards may be supported in URLs, depending on the protocol plugin and the remote server.; http or https URLs can contain a query identifier without tree_name, but generally URLs can not be written with them because of ambiguity with the wildcard character. (Also see the documentation for TChain::AddFile, which does not support wildcards but allows the URL name to contain a query).; The rules for tagging the name of the tree in the file are the same as in the format above. Details of the nentries parameter; Depending on the value of the parameter, the number of entries in the file is retrieved differently:; If nentries <= 0, the file is connected and the tree header read in memory to get the number of entries.; If nentries > 0, the file is not connected, nentries is assumed to be the number of entries in the file. In this case, no check is made that the file exists and that the corresponding tree exists as well. This second mode is interesting in case the number of entries in the file is already stored in a run data base for ex",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:64655,Modifiability,variab,variable,64655,"st must be either TFileInfo or TObjString or TUrl . The function return 1 if successful, 0 otherwise. ; Definition at line 566 of file TChain.cxx. ◆ AddFriend() [1/3]. TFriendElement * TChain::AddFriend ; (; const char * ; chain, . const char * ; dummy = """" . ). overridevirtual . Add a TFriendElement to the list of friends of this chain. ; A TChain has a list of friends similar to a tree (see TTree::AddFriend). You can add a friend to a chain with the TChain::AddFriend method, and you can retrieve the list of friends with TChain::GetListOfFriends. This example has four chains each has 20 ROOT trees from 20 ROOT files. TChain ch(""t""); // a chain with 20 trees from 20 files; TChain ch1(""t1"");; TChain ch2(""t2"");; TChain ch3(""t3"");; Now we can add the friends to the first chain. ch.AddFriend(""t1""); ch.AddFriend(""t2""); ch.AddFriend(""t3""); . The parameter is the name of friend chain (the name of a chain is always the name of the tree from which it was created). The original chain has access to all variable in its friends. We can use the TChain::Draw method as if the values in the friends were in the original chain. To specify the chain to use in the Draw method, use the syntax: <chainname>.<branchname>.<varname>; If the variable name is enough to uniquely identify the variable, you can leave out the chain and/or branch name. For example, this generates a 3-d scatter plot of variable ""var"" in the TChain ch versus variable v1 in TChain t1 versus variable v2 in TChain t2. ch.Draw(""var:t1.v1:t2.v2"");; When a TChain::Draw is executed, an automatic call to TTree::AddFriend connects the trees in the chain. When a chain is deleted, its friend elements are also deleted.; The number of entries in the friend must be equal or greater to the number of entries of the original chain. If the friend has fewer entries a warning is given and the resulting histogram will have missing entries. For additional information see TTree::AddFriend. ; Reimplemented from TTree.; Definition at line 656",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:64882,Modifiability,variab,variable,64882," . Add a TFriendElement to the list of friends of this chain. ; A TChain has a list of friends similar to a tree (see TTree::AddFriend). You can add a friend to a chain with the TChain::AddFriend method, and you can retrieve the list of friends with TChain::GetListOfFriends. This example has four chains each has 20 ROOT trees from 20 ROOT files. TChain ch(""t""); // a chain with 20 trees from 20 files; TChain ch1(""t1"");; TChain ch2(""t2"");; TChain ch3(""t3"");; Now we can add the friends to the first chain. ch.AddFriend(""t1""); ch.AddFriend(""t2""); ch.AddFriend(""t3""); . The parameter is the name of friend chain (the name of a chain is always the name of the tree from which it was created). The original chain has access to all variable in its friends. We can use the TChain::Draw method as if the values in the friends were in the original chain. To specify the chain to use in the Draw method, use the syntax: <chainname>.<branchname>.<varname>; If the variable name is enough to uniquely identify the variable, you can leave out the chain and/or branch name. For example, this generates a 3-d scatter plot of variable ""var"" in the TChain ch versus variable v1 in TChain t1 versus variable v2 in TChain t2. ch.Draw(""var:t1.v1:t2.v2"");; When a TChain::Draw is executed, an automatic call to TTree::AddFriend connects the trees in the chain. When a chain is deleted, its friend elements are also deleted.; The number of entries in the friend must be equal or greater to the number of entries of the original chain. If the friend has fewer entries a warning is given and the resulting histogram will have missing entries. For additional information see TTree::AddFriend. ; Reimplemented from TTree.; Definition at line 656 of file TChain.cxx. ◆ AddFriend() [2/3]. TFriendElement * TChain::AddFriend ; (; const char * ; chainname, . TFile * ; dummy . ). overridevirtual . Add the whole chain or tree as a friend of this chain. ; Reimplemented from TTree.; Definition at line 685 of file TChain.cxx. ◆ ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:64931,Modifiability,variab,variable,64931," . Add a TFriendElement to the list of friends of this chain. ; A TChain has a list of friends similar to a tree (see TTree::AddFriend). You can add a friend to a chain with the TChain::AddFriend method, and you can retrieve the list of friends with TChain::GetListOfFriends. This example has four chains each has 20 ROOT trees from 20 ROOT files. TChain ch(""t""); // a chain with 20 trees from 20 files; TChain ch1(""t1"");; TChain ch2(""t2"");; TChain ch3(""t3"");; Now we can add the friends to the first chain. ch.AddFriend(""t1""); ch.AddFriend(""t2""); ch.AddFriend(""t3""); . The parameter is the name of friend chain (the name of a chain is always the name of the tree from which it was created). The original chain has access to all variable in its friends. We can use the TChain::Draw method as if the values in the friends were in the original chain. To specify the chain to use in the Draw method, use the syntax: <chainname>.<branchname>.<varname>; If the variable name is enough to uniquely identify the variable, you can leave out the chain and/or branch name. For example, this generates a 3-d scatter plot of variable ""var"" in the TChain ch versus variable v1 in TChain t1 versus variable v2 in TChain t2. ch.Draw(""var:t1.v1:t2.v2"");; When a TChain::Draw is executed, an automatic call to TTree::AddFriend connects the trees in the chain. When a chain is deleted, its friend elements are also deleted.; The number of entries in the friend must be equal or greater to the number of entries of the original chain. If the friend has fewer entries a warning is given and the resulting histogram will have missing entries. For additional information see TTree::AddFriend. ; Reimplemented from TTree.; Definition at line 656 of file TChain.cxx. ◆ AddFriend() [2/3]. TFriendElement * TChain::AddFriend ; (; const char * ; chainname, . TFile * ; dummy . ). overridevirtual . Add the whole chain or tree as a friend of this chain. ; Reimplemented from TTree.; Definition at line 685 of file TChain.cxx. ◆ ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:65039,Modifiability,variab,variable,65039,". You can add a friend to a chain with the TChain::AddFriend method, and you can retrieve the list of friends with TChain::GetListOfFriends. This example has four chains each has 20 ROOT trees from 20 ROOT files. TChain ch(""t""); // a chain with 20 trees from 20 files; TChain ch1(""t1"");; TChain ch2(""t2"");; TChain ch3(""t3"");; Now we can add the friends to the first chain. ch.AddFriend(""t1""); ch.AddFriend(""t2""); ch.AddFriend(""t3""); . The parameter is the name of friend chain (the name of a chain is always the name of the tree from which it was created). The original chain has access to all variable in its friends. We can use the TChain::Draw method as if the values in the friends were in the original chain. To specify the chain to use in the Draw method, use the syntax: <chainname>.<branchname>.<varname>; If the variable name is enough to uniquely identify the variable, you can leave out the chain and/or branch name. For example, this generates a 3-d scatter plot of variable ""var"" in the TChain ch versus variable v1 in TChain t1 versus variable v2 in TChain t2. ch.Draw(""var:t1.v1:t2.v2"");; When a TChain::Draw is executed, an automatic call to TTree::AddFriend connects the trees in the chain. When a chain is deleted, its friend elements are also deleted.; The number of entries in the friend must be equal or greater to the number of entries of the original chain. If the friend has fewer entries a warning is given and the resulting histogram will have missing entries. For additional information see TTree::AddFriend. ; Reimplemented from TTree.; Definition at line 656 of file TChain.cxx. ◆ AddFriend() [2/3]. TFriendElement * TChain::AddFriend ; (; const char * ; chainname, . TFile * ; dummy . ). overridevirtual . Add the whole chain or tree as a friend of this chain. ; Reimplemented from TTree.; Definition at line 685 of file TChain.cxx. ◆ AddFriend() [3/3]. TFriendElement * TChain::AddFriend ; (; TTree * ; chain, . const char * ; alias = """", . bool ; warn = false . ). over",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:65078,Modifiability,variab,variable,65078,". You can add a friend to a chain with the TChain::AddFriend method, and you can retrieve the list of friends with TChain::GetListOfFriends. This example has four chains each has 20 ROOT trees from 20 ROOT files. TChain ch(""t""); // a chain with 20 trees from 20 files; TChain ch1(""t1"");; TChain ch2(""t2"");; TChain ch3(""t3"");; Now we can add the friends to the first chain. ch.AddFriend(""t1""); ch.AddFriend(""t2""); ch.AddFriend(""t3""); . The parameter is the name of friend chain (the name of a chain is always the name of the tree from which it was created). The original chain has access to all variable in its friends. We can use the TChain::Draw method as if the values in the friends were in the original chain. To specify the chain to use in the Draw method, use the syntax: <chainname>.<branchname>.<varname>; If the variable name is enough to uniquely identify the variable, you can leave out the chain and/or branch name. For example, this generates a 3-d scatter plot of variable ""var"" in the TChain ch versus variable v1 in TChain t1 versus variable v2 in TChain t2. ch.Draw(""var:t1.v1:t2.v2"");; When a TChain::Draw is executed, an automatic call to TTree::AddFriend connects the trees in the chain. When a chain is deleted, its friend elements are also deleted.; The number of entries in the friend must be equal or greater to the number of entries of the original chain. If the friend has fewer entries a warning is given and the resulting histogram will have missing entries. For additional information see TTree::AddFriend. ; Reimplemented from TTree.; Definition at line 656 of file TChain.cxx. ◆ AddFriend() [2/3]. TFriendElement * TChain::AddFriend ; (; const char * ; chainname, . TFile * ; dummy . ). overridevirtual . Add the whole chain or tree as a friend of this chain. ; Reimplemented from TTree.; Definition at line 685 of file TChain.cxx. ◆ AddFriend() [3/3]. TFriendElement * TChain::AddFriend ; (; TTree * ; chain, . const char * ; alias = """", . bool ; warn = false . ). over",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:65110,Modifiability,variab,variable,65110,". You can add a friend to a chain with the TChain::AddFriend method, and you can retrieve the list of friends with TChain::GetListOfFriends. This example has four chains each has 20 ROOT trees from 20 ROOT files. TChain ch(""t""); // a chain with 20 trees from 20 files; TChain ch1(""t1"");; TChain ch2(""t2"");; TChain ch3(""t3"");; Now we can add the friends to the first chain. ch.AddFriend(""t1""); ch.AddFriend(""t2""); ch.AddFriend(""t3""); . The parameter is the name of friend chain (the name of a chain is always the name of the tree from which it was created). The original chain has access to all variable in its friends. We can use the TChain::Draw method as if the values in the friends were in the original chain. To specify the chain to use in the Draw method, use the syntax: <chainname>.<branchname>.<varname>; If the variable name is enough to uniquely identify the variable, you can leave out the chain and/or branch name. For example, this generates a 3-d scatter plot of variable ""var"" in the TChain ch versus variable v1 in TChain t1 versus variable v2 in TChain t2. ch.Draw(""var:t1.v1:t2.v2"");; When a TChain::Draw is executed, an automatic call to TTree::AddFriend connects the trees in the chain. When a chain is deleted, its friend elements are also deleted.; The number of entries in the friend must be equal or greater to the number of entries of the original chain. If the friend has fewer entries a warning is given and the resulting histogram will have missing entries. For additional information see TTree::AddFriend. ; Reimplemented from TTree.; Definition at line 656 of file TChain.cxx. ◆ AddFriend() [2/3]. TFriendElement * TChain::AddFriend ; (; const char * ; chainname, . TFile * ; dummy . ). overridevirtual . Add the whole chain or tree as a friend of this chain. ; Reimplemented from TTree.; Definition at line 685 of file TChain.cxx. ◆ AddFriend() [3/3]. TFriendElement * TChain::AddFriend ; (; TTree * ; chain, . const char * ; alias = """", . bool ; warn = false . ). over",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:101015,Modifiability,variab,variable,101015,"function loads all tree headers, because the entry numbers in the TEventList are global and have to be recomputed, taking into account the number of entries in each tree.; The new TEntryList is owned by the TChain and gets deleted when the chain is deleted. This TEntryList is returned by GetEntryList() function, and after GetEntryList() function is called, the TEntryList is not owned by the chain any more and will not be deleted with it. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 2868 of file TChain.cxx. ◆ SetMakeClass(). void TChain::SetMakeClass ; (; Int_t ; make). inlineoverridevirtual . Set all the branches in this TTree to be in decomposed object mode (also known as MakeClass mode). ; For MakeClass mode 0, the TTree expects the address where the data is stored to be set by either the user or the TTree to the address of a full object through the top level branch. For MakeClass mode 1, this address is expected to point to a numerical type or C-style array (variable or not) of numerical type, representing the primitive data members. The function's primary purpose is to allow the user to access the data directly with numerical type variable rather than having to have the original set of classes (or a reproduction thereof). ; Reimplemented from TTree.; Definition at line 166 of file TChain.h. ◆ SetName(). void TChain::SetName ; (; const char * ; name). overridevirtual . Change the name of this TChain. ; Reimplemented from TNamed.; Reimplemented in TProofChain.; Definition at line 2943 of file TChain.cxx. ◆ SetPacketSize(). void TChain::SetPacketSize ; (; Int_t ; size = 100). virtual . Set number of entries per packet for parallel root. ; Definition at line 2965 of file TChain.cxx. ◆ SetProof(). void TChain::SetProof ; (; bool ; on = true, . bool ; refresh = false, . bool ; gettreeheader = false . ). virtual . Enable/Disable PROOF processing on the current default Proof (gProof). ; ""Draw"" and ""Processed"" commands will be handled by ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:101192,Modifiability,variab,variable,101192,"ntryList is owned by the TChain and gets deleted when the chain is deleted. This TEntryList is returned by GetEntryList() function, and after GetEntryList() function is called, the TEntryList is not owned by the chain any more and will not be deleted with it. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 2868 of file TChain.cxx. ◆ SetMakeClass(). void TChain::SetMakeClass ; (; Int_t ; make). inlineoverridevirtual . Set all the branches in this TTree to be in decomposed object mode (also known as MakeClass mode). ; For MakeClass mode 0, the TTree expects the address where the data is stored to be set by either the user or the TTree to the address of a full object through the top level branch. For MakeClass mode 1, this address is expected to point to a numerical type or C-style array (variable or not) of numerical type, representing the primitive data members. The function's primary purpose is to allow the user to access the data directly with numerical type variable rather than having to have the original set of classes (or a reproduction thereof). ; Reimplemented from TTree.; Definition at line 166 of file TChain.h. ◆ SetName(). void TChain::SetName ; (; const char * ; name). overridevirtual . Change the name of this TChain. ; Reimplemented from TNamed.; Reimplemented in TProofChain.; Definition at line 2943 of file TChain.cxx. ◆ SetPacketSize(). void TChain::SetPacketSize ; (; Int_t ; size = 100). virtual . Set number of entries per packet for parallel root. ; Definition at line 2965 of file TChain.cxx. ◆ SetProof(). void TChain::SetProof ; (; bool ; on = true, . bool ; refresh = false, . bool ; gettreeheader = false . ). virtual . Enable/Disable PROOF processing on the current default Proof (gProof). ; ""Draw"" and ""Processed"" commands will be handled by PROOF. The refresh and gettreeheader are meaningful only if on == true. If refresh is true the underlying fProofChain (chain proxy) is always rebuilt (even if already existing). If g",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:105128,Modifiability,variab,variables,105128,"ne 3089 of file TChain.cxx. Member Data Documentation. ◆ fCanDeleteRefs. bool TChain::fCanDeleteRefs. protected . ! If true, TProcessIDs are deleted when closing a file ; Definition at line 40 of file TChain.h. ◆ fFile. TFile* TChain::fFile. protected . ! Pointer to current file (We own the file). ; Definition at line 42 of file TChain.h. ◆ fFiles. TObjArray* TChain::fFiles. protected . -> List of file names containing the trees (TChainElement, owned) ; Definition at line 43 of file TChain.h. ◆ fGlobalRegistration. bool TChain::fGlobalRegistration. protected . ! if true, bypass use of global lists ; Definition at line 46 of file TChain.h. ◆ fNtrees. Int_t TChain::fNtrees. protected . Number of trees. ; Definition at line 37 of file TChain.h. ◆ fProofChain. TChain* TChain::fProofChain. protected . ! chain proxy when going to be processed by PROOF ; Definition at line 45 of file TChain.h. ◆ fStatus. TList* TChain::fStatus. protected . -> List of active/inactive branches (TChainElement, owned) ; Definition at line 44 of file TChain.h. ◆ fTree. TTree* TChain::fTree. protected . ! Pointer to current tree (Note: We do not own this tree.) ; Definition at line 41 of file TChain.h. ◆ fTreeNumber. Int_t TChain::fTreeNumber. protected . ! Current Tree number in fTreeOffset table ; Definition at line 38 of file TChain.h. ◆ fTreeOffset. Long64_t* TChain::fTreeOffset. protected . [fTreeOffsetLen] Array of variables ; Definition at line 39 of file TChain.h. ◆ fTreeOffsetLen. Int_t TChain::fTreeOffsetLen. protected . Current size of fTreeOffset array. ; Definition at line 36 of file TChain.h. ◆ kBigNumber. constexpr auto TChain::kBigNumber = TTree::kMaxEntries. staticconstexpr . Definition at line 68 of file TChain.h. Libraries for TChain:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TChain.h; tree/tree/src/TChain.cxx. TChain. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:10925,Performance,cache,cacheSize,10925,"anch kAutoDelete bit. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr, TClass *realClass, EDataType datatype, bool isptr) override;  Check if bname is already in the status list, and if not, create a TChainElement object and set its address. ;  ; Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr=nullptr) override;  Set branch address. ;  ; Int_t SetBranchAddress (const char *bname, void *add, TClass *realClass, EDataType datatype, bool isptr) override;  Check if bname is already in the status list, and if not, create a TChainElement object and set its address. ;  ; void SetBranchStatus (const char *bname, bool status=true, UInt_t *found=nullptr) override;  Set branch status to Process or DoNotProcess. ;  ; Int_t SetCacheSize (Long64_t cacheSize=-1) override;  Set maximum size of the file cache . ;  ; void SetDirectory (TDirectory *dir) override;  Remove reference to this chain from current directory and add reference to new directory dir. ;  ; void SetEntryList (TEntryList *elist, Option_t *opt="""") override;  Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ;  ; virtual void SetEntryListFile (const char *filename="""", Option_t *opt="""");  Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ;  ; void SetEventList (TEventList *evlist) override;  This function transfroms the given TEventList into a TEntryList. ;  ; void SetMakeClass (Int_t make) override;  Set all the branches in this TTree to be in decomposed object mode (also known as MakeClass mode). ;  ; void SetName (const char *name) override;  Change the name of this TChain. ;  ; virtual void SetPacketSize (Int_t size=100);  Set number of entries per packe",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:10979,Performance,cache,cache,10979,"anch kAutoDelete bit. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr, TClass *realClass, EDataType datatype, bool isptr) override;  Check if bname is already in the status list, and if not, create a TChainElement object and set its address. ;  ; Int_t SetBranchAddress (const char *bname, void *add, TBranch **ptr=nullptr) override;  Set branch address. ;  ; Int_t SetBranchAddress (const char *bname, void *add, TClass *realClass, EDataType datatype, bool isptr) override;  Check if bname is already in the status list, and if not, create a TChainElement object and set its address. ;  ; void SetBranchStatus (const char *bname, bool status=true, UInt_t *found=nullptr) override;  Set branch status to Process or DoNotProcess. ;  ; Int_t SetCacheSize (Long64_t cacheSize=-1) override;  Set maximum size of the file cache . ;  ; void SetDirectory (TDirectory *dir) override;  Remove reference to this chain from current directory and add reference to new directory dir. ;  ; void SetEntryList (TEntryList *elist, Option_t *opt="""") override;  Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ;  ; virtual void SetEntryListFile (const char *filename="""", Option_t *opt="""");  Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ;  ; void SetEventList (TEventList *evlist) override;  This function transfroms the given TEventList into a TEntryList. ;  ; void SetMakeClass (Int_t make) override;  Set all the branches in this TTree to be in decomposed object mode (also known as MakeClass mode). ;  ; void SetName (const char *name) override;  Change the name of this TChain. ;  ; virtual void SetPacketSize (Int_t size=100);  Set number of entries per packe",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:12955,Performance,cache,cache,12955,"etPacketSize (Int_t size=100);  Set number of entries per packet for parallel root. ;  ; virtual void SetProof (bool on=true, bool refresh=false, bool gettreeheader=false);  Enable/Disable PROOF processing on the current default Proof (gProof). ;  ; void SetWeight (Double_t w=1, Option_t *option="""") override;  Set chain weight. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UseCache (Int_t maxCacheSize=10, Int_t pageSize=0);  Dummy function kept for back compatibility. ;  ;  Public Member Functions inherited from TTree;  TTree ();  Default constructor and I/O constructor. ;  ;  TTree (const char *name, const char *title, Int_t splitlevel=99, TDirectory *dir=(::ROOT::Internal::TDirectoryAtomicAdapter{}));  Normal tree constructor. ;  ;  TTree (const TTree &tt)=delete;  ;  ~TTree () override;  Destructor. ;  ; void AddAllocationCount (UInt_t count);  ; virtual Int_t AddBranchToCache (const char *bname, bool subbranches=false);  Add branch with name bname to the Tree cache. ;  ; virtual Int_t AddBranchToCache (TBranch *branch, bool subbranches=false);  Add branch b to the Tree cache. ;  ; void AddClone (TTree *);  Add a cloned tree to our list of trees to be notified whenever we change our branch addresses or when we are deleted. ;  ; virtual void AddTotBytes (Int_t tot);  ; virtual void AddZipBytes (Int_t zip);  ; virtual Long64_t AutoSave (Option_t *option="""");  AutoSave tree header every fAutoSave bytes. ;  ; virtual Int_t Branch (const char *folder, Int_t bufsize=32000, Int_t splitlevel=99);  Create one branch for each element in the folder. ;  ; TBranch * Branch (const char *name, char *address, const char *leaflist, Int_t bufsize=32000);  ; template<class T > ; TBranch * Branch (const char *name, const char *classname, T **addobj, Int_t bufsize=32000, Int_t splitlevel=99);  ; template<class T > ; TBranch * Branch (const char *name, const char *classname, T *obj, In",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:13067,Performance,cache,cache,13067,"se, bool gettreeheader=false);  Enable/Disable PROOF processing on the current default Proof (gProof). ;  ; void SetWeight (Double_t w=1, Option_t *option="""") override;  Set chain weight. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UseCache (Int_t maxCacheSize=10, Int_t pageSize=0);  Dummy function kept for back compatibility. ;  ;  Public Member Functions inherited from TTree;  TTree ();  Default constructor and I/O constructor. ;  ;  TTree (const char *name, const char *title, Int_t splitlevel=99, TDirectory *dir=(::ROOT::Internal::TDirectoryAtomicAdapter{}));  Normal tree constructor. ;  ;  TTree (const TTree &tt)=delete;  ;  ~TTree () override;  Destructor. ;  ; void AddAllocationCount (UInt_t count);  ; virtual Int_t AddBranchToCache (const char *bname, bool subbranches=false);  Add branch with name bname to the Tree cache. ;  ; virtual Int_t AddBranchToCache (TBranch *branch, bool subbranches=false);  Add branch b to the Tree cache. ;  ; void AddClone (TTree *);  Add a cloned tree to our list of trees to be notified whenever we change our branch addresses or when we are deleted. ;  ; virtual void AddTotBytes (Int_t tot);  ; virtual void AddZipBytes (Int_t zip);  ; virtual Long64_t AutoSave (Option_t *option="""");  AutoSave tree header every fAutoSave bytes. ;  ; virtual Int_t Branch (const char *folder, Int_t bufsize=32000, Int_t splitlevel=99);  Create one branch for each element in the folder. ;  ; TBranch * Branch (const char *name, char *address, const char *leaflist, Int_t bufsize=32000);  ; template<class T > ; TBranch * Branch (const char *name, const char *classname, T **addobj, Int_t bufsize=32000, Int_t splitlevel=99);  ; template<class T > ; TBranch * Branch (const char *name, const char *classname, T *obj, Int_t bufsize=32000, Int_t splitlevel=99);  ; virtual TBranch * Branch (const char *name, const char *classname, void *addobj, Int_t bufsize=32",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:17212,Performance,cache,cache,17212,"Size. ;  ; virtual TTree * CloneTree (Long64_t nentries=-1, Option_t *option="""");  Create a clone of this tree and copy nentries. ;  ; virtual void CopyAddresses (TTree *, bool undo=false);  Set branch addresses of passed tree equal to ours. ;  ; virtual Long64_t CopyEntries (TTree *tree, Long64_t nentries=-1, Option_t *option="""", bool needCopyAddresses=false);  Copy nentries from given tree to this tree. ;  ; virtual TTree * CopyTree (const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Copy a tree with selection. ;  ; virtual TBasket * CreateBasket (TBranch *);  Create a basket for this tree and given branch. ;  ; Int_t Debug () const;  ; void Delete (Option_t *option="""") override;  Delete this tree from memory or/and disk. ;  ; void Draw (Option_t *opt) override;  Default Draw method for all objects. ;  ; virtual void DropBaskets ();  Remove some baskets from memory. ;  ; virtual Int_t DropBranchFromCache (const char *bname, bool subbranches=false);  Remove the branch with name 'bname' from the Tree cache. ;  ; virtual Int_t DropBranchFromCache (TBranch *branch, bool subbranches=false);  Remove the branch b from the Tree cache. ;  ; virtual void DropBuffers (Int_t nbytes);  Drop branch buffers to accommodate nbytes below MaxVirtualsize. ;  ; bool EnableCache ();  Enable the TTreeCache unless explicitly disabled for this TTree by a prior call to SetCacheSize(0). ;  ; virtual Int_t Fit (const char *funcname, const char *varexp, const char *selection="""", Option_t *option="""", Option_t *goption="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Fit a projected item(s) from a tree. ;  ; virtual Int_t FlushBaskets (bool create_cluster=true) const;  Write to disk all the basket that have not yet been individually written and create an event cluster boundary (by default). ;  ; UInt_t GetAllocationCount () const;  ; virtual Long64_t GetAutoFlush () const;  ; virtual Long64_t GetAutoSave () const;  ; virtual TBranchRef",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:17336,Performance,cache,cache,17336,"; virtual void CopyAddresses (TTree *, bool undo=false);  Set branch addresses of passed tree equal to ours. ;  ; virtual Long64_t CopyEntries (TTree *tree, Long64_t nentries=-1, Option_t *option="""", bool needCopyAddresses=false);  Copy nentries from given tree to this tree. ;  ; virtual TTree * CopyTree (const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Copy a tree with selection. ;  ; virtual TBasket * CreateBasket (TBranch *);  Create a basket for this tree and given branch. ;  ; Int_t Debug () const;  ; void Delete (Option_t *option="""") override;  Delete this tree from memory or/and disk. ;  ; void Draw (Option_t *opt) override;  Default Draw method for all objects. ;  ; virtual void DropBaskets ();  Remove some baskets from memory. ;  ; virtual Int_t DropBranchFromCache (const char *bname, bool subbranches=false);  Remove the branch with name 'bname' from the Tree cache. ;  ; virtual Int_t DropBranchFromCache (TBranch *branch, bool subbranches=false);  Remove the branch b from the Tree cache. ;  ; virtual void DropBuffers (Int_t nbytes);  Drop branch buffers to accommodate nbytes below MaxVirtualsize. ;  ; bool EnableCache ();  Enable the TTreeCache unless explicitly disabled for this TTree by a prior call to SetCacheSize(0). ;  ; virtual Int_t Fit (const char *funcname, const char *varexp, const char *selection="""", Option_t *option="""", Option_t *goption="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Fit a projected item(s) from a tree. ;  ; virtual Int_t FlushBaskets (bool create_cluster=true) const;  Write to disk all the basket that have not yet been individually written and create an event cluster boundary (by default). ;  ; UInt_t GetAllocationCount () const;  ; virtual Long64_t GetAutoFlush () const;  ; virtual Long64_t GetAutoSave () const;  ; virtual TBranchRef * GetBranchRef () const;  ; virtual Long64_t GetChainOffset () const;  ; virtual bool GetClusterPrefetch () const;  ; TFile * GetCur",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:22821,Performance,load,loading,22821,"override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; virtual Long64_t LoadTreeFriend (Long64_t entry, TTree *T);  Load entry on behalf of our master tree, we may use an index. ;  ; virtual Int_t MakeClass (const char *classname=nullptr, Option_t *option="""");  Generate a skeleton analysis class for this tree. ;  ; virtual Int_t MakeCode (const char *filename=nullptr);  Generate a skeleton function for this tree. ;  ; virtual Int_t MakeProxy (const char *classname, const char *macrofilename=nullptr, const char *cutfilename=nullptr, const char *option=nullptr, Int_t maxUnrolling=3);  Generate a skeleton analysis class for this Tree using TBranchProxy. ;  ; virtual Int_t MakeSelector (const char *selector=nullptr, Option_t *option="""");  Generate skeleton selector class for this tree. ;  ; bool MemoryFull (Int_t nbytes);  Check if adding nbytes to memory we are still below MaxVirtualsize. ;  ; bool Notify () override;  Function called when loading a new class library. ;  ; TTree & operator= (const TTree &tt)=delete;  ; virtual void OptimizeBaskets (ULong64_t maxMemory=10000000, Float_t minComp=1.1, Option_t *option="""");  This function may be called after having filled some entries in a Tree. ;  ; TPrincipal * Principal (const char *varexp="""", const char *selection="""", Option_t *option=""np"", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Interface to the Principal Components Analysis class. ;  ; void Print (Option_t *option="""") const override;  Print a summary of the tree contents. ;  ; virtual void PrintCacheStats (Option_t *option="""") const;  Print statistics about the TreeCache for this tree. ;  ; virtual Long64_t Project (const char *hname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Make a projection of a tree using selections. ;  ; virtual TSQLResult * Query (const char *varexp="""", const char *selection="""", Option_t *",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:25695,Performance,cache,cache,25695,"cord a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual Long64_t SetEntries (Long64_t n=-1);  Change number of entries in the tree. ;  ; virtual void SetEstimate (Long64_t nentries=1000000);  Set number of entries to estimate variable limits. ;  ; virtual void SetFileNumber (Int_t number=0);  Set fFileNumber to number. ;  ; virtual void Set",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:27114,Performance,load,loaded,27114,"tDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual Long64_t SetEntries (Long64_t n=-1);  Change number of entries in the tree. ;  ; virtual void SetEstimate (Long64_t nentries=1000000);  Set number of entries to estimate variable limits. ;  ; virtual void SetFileNumber (Int_t number=0);  Set fFileNumber to number. ;  ; virtual void SetImplicitMT (bool enabled);  ; ROOT::TIOFeatures SetIOFeatures (const ROOT::TIOFeatures &);  Provide the end-user with the ability to enable/disable various experimental IO features for this TTree. ;  ; virtual void SetMaxEntryLoop (Long64_t maxev=kMaxEntries);  ; virtual void SetMaxVirtualSize (Long64_t size=0);  ; void SetName (const char *name) override;  Change the name of this tree. ;  ; virtual void SetNotify (TObject *obj);  Sets the address of the object to be notified when the tree is loaded. ;  ; virtual void SetObject (const char *name, const char *title);  Change the name and title of this tree. ;  ; virtual void SetParallelUnzip (bool opt=true, Float_t RelSize=-1);  Enable or disable parallel unzipping of Tree buffers. ;  ; virtual void SetPerfStats (TVirtualPerfStats *perf);  Set perf stats. ;  ; virtual void SetScanField (Int_t n=50);  ; void SetTargetMemoryRatio (Float_t ratio);  ; virtual void SetTimerInterval (Int_t msec=333);  ; virtual void SetTreeIndex (TVirtualIndex *index);  The current TreeIndex is replaced by the new index. ;  ; virtual void SetUpdate (Int_t freq=0);  ; virtual void Show (Long64_t entry=-1, Int_t lenmax=20);  Print values of all active leaves for entry. ;  ; virtual void StartViewer ();  Start the TTreeViewer on this tree. ;  ; virtual Int_t StopCacheLearningPhase ();  Stop the cache learning phase. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNV",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:27956,Performance,cache,cache,27956,"SetName (const char *name) override;  Change the name of this tree. ;  ; virtual void SetNotify (TObject *obj);  Sets the address of the object to be notified when the tree is loaded. ;  ; virtual void SetObject (const char *name, const char *title);  Change the name and title of this tree. ;  ; virtual void SetParallelUnzip (bool opt=true, Float_t RelSize=-1);  Enable or disable parallel unzipping of Tree buffers. ;  ; virtual void SetPerfStats (TVirtualPerfStats *perf);  Set perf stats. ;  ; virtual void SetScanField (Int_t n=50);  ; void SetTargetMemoryRatio (Float_t ratio);  ; virtual void SetTimerInterval (Int_t msec=333);  ; virtual void SetTreeIndex (TVirtualIndex *index);  The current TreeIndex is replaced by the new index. ;  ; virtual void SetUpdate (Int_t freq=0);  ; virtual void Show (Long64_t entry=-1, Int_t lenmax=20);  Print values of all active leaves for entry. ;  ; virtual void StartViewer ();  Start the TTreeViewer on this tree. ;  ; virtual Int_t StopCacheLearningPhase ();  Stop the cache learning phase. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t UnbinnedFit (const char *funcname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Unbinned fit of one or more variable(s) from a tree. ;  ; void UseCurrentStyle () override;  Replace current attributes by current style. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write this object to the current directory. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:44442,Performance,cache,cache,44442,"EDataType datatype, std::size_t N, void *addobj, Int_t bufsize, Int_t splitlevel);  ; virtual TBranch * BranchImpRef (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpRef (const char *branchname, TClass *ptrClass, EDataType datatype, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BronchExec (const char *name, const char *classname, void *addobj, bool isptrptr, Int_t bufsize, Int_t splitlevel);  Helper function implementing TTree::Bronch and TTree::Branch(const char *name, T &obj);. ;  ; virtual Int_t CheckBranchAddressType (TBranch *branch, TClass *ptrClass, EDataType datatype, bool ptr);  Check whether or not the address described by the last 3 parameters matches the content of the branch. ;  ; Long64_t GetCacheAutoSize (bool withDefault=false);  Used for automatic sizing of the cache. ;  ; virtual TLeaf * GetLeafImpl (const char *branchname, const char *leafname);  Return pointer to the 1st Leaf named name in any Branch of this Tree or any branch in the list of friend trees. ;  ; char GetNewlineValue (std::istream &inputStream);  Determine which newline this file is using. ;  ; void ImportClusterRanges (TTree *fromtree);  Appends the cluster range information stored in 'fromtree' to this tree, including the value of fAutoFlush. ;  ; virtual void KeepCircular ();  Keep a maximum of fMaxEntries in memory. ;  ; void MoveReadCache (TFile *src, TDirectory *dir);  Move a cache from a file to the current file in dir. ;  ; Int_t SetBranchAddressImp (TBranch *branch, void *addr, TBranch **ptr);  Change branch address, dealing with clone trees properly. ;  ; Int_t SetCacheSizeAux (bool autocache=true, Long64_t cacheSize=0);  Set the size of the file cache and create it if possible. ;  ;  Protected Member Functions inherited fr",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:45041,Performance,cache,cache,45041,"t_t splitlevel);  Helper function implementing TTree::Bronch and TTree::Branch(const char *name, T &obj);. ;  ; virtual Int_t CheckBranchAddressType (TBranch *branch, TClass *ptrClass, EDataType datatype, bool ptr);  Check whether or not the address described by the last 3 parameters matches the content of the branch. ;  ; Long64_t GetCacheAutoSize (bool withDefault=false);  Used for automatic sizing of the cache. ;  ; virtual TLeaf * GetLeafImpl (const char *branchname, const char *leafname);  Return pointer to the 1st Leaf named name in any Branch of this Tree or any branch in the list of friend trees. ;  ; char GetNewlineValue (std::istream &inputStream);  Determine which newline this file is using. ;  ; void ImportClusterRanges (TTree *fromtree);  Appends the cluster range information stored in 'fromtree' to this tree, including the value of fAutoFlush. ;  ; virtual void KeepCircular ();  Keep a maximum of fMaxEntries in memory. ;  ; void MoveReadCache (TFile *src, TDirectory *dir);  Move a cache from a file to the current file in dir. ;  ; Int_t SetBranchAddressImp (TBranch *branch, void *addr, TBranch **ptr);  Change branch address, dealing with clone trees properly. ;  ; Int_t SetCacheSizeAux (bool autocache=true, Long64_t cacheSize=0);  Set the size of the file cache and create it if possible. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool fCanDeleteRefs;  ! If true, TProcessIDs are deleted when closing a file ;  ; TFile * fFile;  ! Pointer to current file (We own the file). ;  ; TObjArray * fFiles;  -> List of file names containing the trees (TChainElement, owned) ;  ; bool fGlobalRegistration;  ! if true, bypass use of global lists ;  ; Int_t fNtrees;  Number of trees. ;  ; TChain * fProofChain;  ! chain proxy when going to be processed by PROOF ;  ; TList * fStatu",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:45281,Performance,cache,cacheSize,45281,"bed by the last 3 parameters matches the content of the branch. ;  ; Long64_t GetCacheAutoSize (bool withDefault=false);  Used for automatic sizing of the cache. ;  ; virtual TLeaf * GetLeafImpl (const char *branchname, const char *leafname);  Return pointer to the 1st Leaf named name in any Branch of this Tree or any branch in the list of friend trees. ;  ; char GetNewlineValue (std::istream &inputStream);  Determine which newline this file is using. ;  ; void ImportClusterRanges (TTree *fromtree);  Appends the cluster range information stored in 'fromtree' to this tree, including the value of fAutoFlush. ;  ; virtual void KeepCircular ();  Keep a maximum of fMaxEntries in memory. ;  ; void MoveReadCache (TFile *src, TDirectory *dir);  Move a cache from a file to the current file in dir. ;  ; Int_t SetBranchAddressImp (TBranch *branch, void *addr, TBranch **ptr);  Change branch address, dealing with clone trees properly. ;  ; Int_t SetCacheSizeAux (bool autocache=true, Long64_t cacheSize=0);  Set the size of the file cache and create it if possible. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool fCanDeleteRefs;  ! If true, TProcessIDs are deleted when closing a file ;  ; TFile * fFile;  ! Pointer to current file (We own the file). ;  ; TObjArray * fFiles;  -> List of file names containing the trees (TChainElement, owned) ;  ; bool fGlobalRegistration;  ! if true, bypass use of global lists ;  ; Int_t fNtrees;  Number of trees. ;  ; TChain * fProofChain;  ! chain proxy when going to be processed by PROOF ;  ; TList * fStatus;  -> List of active/inactive branches (TChainElement, owned) ;  ; TTree * fTree;  ! Pointer to current tree (Note: We do not own this tree.) ;  ; Int_t fTreeNumber;  ! Current Tree number in fTreeOffset table ;  ; Long64_t * fTreeOffset;  [fTreeOffsetLen",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:45321,Performance,cache,cache,45321,"bed by the last 3 parameters matches the content of the branch. ;  ; Long64_t GetCacheAutoSize (bool withDefault=false);  Used for automatic sizing of the cache. ;  ; virtual TLeaf * GetLeafImpl (const char *branchname, const char *leafname);  Return pointer to the 1st Leaf named name in any Branch of this Tree or any branch in the list of friend trees. ;  ; char GetNewlineValue (std::istream &inputStream);  Determine which newline this file is using. ;  ; void ImportClusterRanges (TTree *fromtree);  Appends the cluster range information stored in 'fromtree' to this tree, including the value of fAutoFlush. ;  ; virtual void KeepCircular ();  Keep a maximum of fMaxEntries in memory. ;  ; void MoveReadCache (TFile *src, TDirectory *dir);  Move a cache from a file to the current file in dir. ;  ; Int_t SetBranchAddressImp (TBranch *branch, void *addr, TBranch **ptr);  Change branch address, dealing with clone trees properly. ;  ; Int_t SetCacheSizeAux (bool autocache=true, Long64_t cacheSize=0);  Set the size of the file cache and create it if possible. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool fCanDeleteRefs;  ! If true, TProcessIDs are deleted when closing a file ;  ; TFile * fFile;  ! Pointer to current file (We own the file). ;  ; TObjArray * fFiles;  -> List of file names containing the trees (TChainElement, owned) ;  ; bool fGlobalRegistration;  ! if true, bypass use of global lists ;  ; Int_t fNtrees;  Number of trees. ;  ; TChain * fProofChain;  ! chain proxy when going to be processed by PROOF ;  ; TList * fStatus;  -> List of active/inactive branches (TChainElement, owned) ;  ; TTree * fTree;  ! Pointer to current tree (Note: We do not own this tree.) ;  ; Int_t fTreeNumber;  ! Current Tree number in fTreeOffset table ;  ; Long64_t * fTreeOffset;  [fTreeOffsetLen",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:47020,Performance,cache,cache,47020,"e number in fTreeOffset table ;  ; Long64_t * fTreeOffset;  [fTreeOffsetLen] Array of variables ;  ; Int_t fTreeOffsetLen;  Current size of fTreeOffset array. ;  ;  Protected Attributes inherited from TTree; TList * fAliases;  List of aliases for expressions based on the tree branches. ;  ; std::atomic< UInt_t > fAllocationCount {0};  indicates basket should be resized to exact memory usage, but causes significant ;  ; Long64_t fAutoFlush;  Auto-flush tree when fAutoFlush entries written or -fAutoFlush (compressed) bytes produced. ;  ; Long64_t fAutoSave;  Autosave tree when fAutoSave entries written or -fAutoSave (compressed) bytes produced. ;  ; TObjArray fBranches;  List of Branches. ;  ; TBranchRef * fBranchRef;  Branch supporting the TRefTable (if any) ;  ; bool fCacheDoAutoInit;  ! true if cache auto creation or resize check is needed ;  ; bool fCacheDoClusterPrefetch;  ! true if cache is prefetching whole clusters ;  ; Long64_t fCacheSize;  ! Maximum size of file buffers ;  ; bool fCacheUserSet;  ! true if the cache setting was explicitly given by user ;  ; Long64_t fChainOffset;  ! Offset of 1st entry of this Tree in a TChain ;  ; TList * fClones;  ! List of cloned trees which share our addresses ;  ; Long64_t * fClusterRangeEnd;  [fNClusterRange] Last entry of a cluster range. ;  ; Long64_t * fClusterSize;  [fNClusterRange] Number of entries in each cluster for a given range. ;  ; Int_t fDebug;  ! Debug level ;  ; Long64_t fDebugMax;  ! Last entry number to debug ;  ; Long64_t fDebugMin;  ! First entry number to debug ;  ; Int_t fDefaultEntryOffsetLen;  Initial Length of fEntryOffset table in the basket buffers. ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this tree ;  ; Long64_t fEntries;  Number of entries. ;  ; TEntryList * fEntryList;  ! Pointer to event selection list (if one) ;  ; Long64_t fEstimate;  Number of entries to estimate histogram limits. ;  ; TEventList * fEventList;  ! Pointer to event selection list (if one) ;  ; TList * f",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:47112,Performance,cache,cache,47112,"e number in fTreeOffset table ;  ; Long64_t * fTreeOffset;  [fTreeOffsetLen] Array of variables ;  ; Int_t fTreeOffsetLen;  Current size of fTreeOffset array. ;  ;  Protected Attributes inherited from TTree; TList * fAliases;  List of aliases for expressions based on the tree branches. ;  ; std::atomic< UInt_t > fAllocationCount {0};  indicates basket should be resized to exact memory usage, but causes significant ;  ; Long64_t fAutoFlush;  Auto-flush tree when fAutoFlush entries written or -fAutoFlush (compressed) bytes produced. ;  ; Long64_t fAutoSave;  Autosave tree when fAutoSave entries written or -fAutoSave (compressed) bytes produced. ;  ; TObjArray fBranches;  List of Branches. ;  ; TBranchRef * fBranchRef;  Branch supporting the TRefTable (if any) ;  ; bool fCacheDoAutoInit;  ! true if cache auto creation or resize check is needed ;  ; bool fCacheDoClusterPrefetch;  ! true if cache is prefetching whole clusters ;  ; Long64_t fCacheSize;  ! Maximum size of file buffers ;  ; bool fCacheUserSet;  ! true if the cache setting was explicitly given by user ;  ; Long64_t fChainOffset;  ! Offset of 1st entry of this Tree in a TChain ;  ; TList * fClones;  ! List of cloned trees which share our addresses ;  ; Long64_t * fClusterRangeEnd;  [fNClusterRange] Last entry of a cluster range. ;  ; Long64_t * fClusterSize;  [fNClusterRange] Number of entries in each cluster for a given range. ;  ; Int_t fDebug;  ! Debug level ;  ; Long64_t fDebugMax;  ! Last entry number to debug ;  ; Long64_t fDebugMin;  ! First entry number to debug ;  ; Int_t fDefaultEntryOffsetLen;  Initial Length of fEntryOffset table in the basket buffers. ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this tree ;  ; Long64_t fEntries;  Number of entries. ;  ; TEntryList * fEntryList;  ! Pointer to event selection list (if one) ;  ; Long64_t fEstimate;  Number of entries to estimate histogram limits. ;  ; TEventList * fEventList;  ! Pointer to event selection list (if one) ;  ; TList * f",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:47246,Performance,cache,cache,47246,"e number in fTreeOffset table ;  ; Long64_t * fTreeOffset;  [fTreeOffsetLen] Array of variables ;  ; Int_t fTreeOffsetLen;  Current size of fTreeOffset array. ;  ;  Protected Attributes inherited from TTree; TList * fAliases;  List of aliases for expressions based on the tree branches. ;  ; std::atomic< UInt_t > fAllocationCount {0};  indicates basket should be resized to exact memory usage, but causes significant ;  ; Long64_t fAutoFlush;  Auto-flush tree when fAutoFlush entries written or -fAutoFlush (compressed) bytes produced. ;  ; Long64_t fAutoSave;  Autosave tree when fAutoSave entries written or -fAutoSave (compressed) bytes produced. ;  ; TObjArray fBranches;  List of Branches. ;  ; TBranchRef * fBranchRef;  Branch supporting the TRefTable (if any) ;  ; bool fCacheDoAutoInit;  ! true if cache auto creation or resize check is needed ;  ; bool fCacheDoClusterPrefetch;  ! true if cache is prefetching whole clusters ;  ; Long64_t fCacheSize;  ! Maximum size of file buffers ;  ; bool fCacheUserSet;  ! true if the cache setting was explicitly given by user ;  ; Long64_t fChainOffset;  ! Offset of 1st entry of this Tree in a TChain ;  ; TList * fClones;  ! List of cloned trees which share our addresses ;  ; Long64_t * fClusterRangeEnd;  [fNClusterRange] Last entry of a cluster range. ;  ; Long64_t * fClusterSize;  [fNClusterRange] Number of entries in each cluster for a given range. ;  ; Int_t fDebug;  ! Debug level ;  ; Long64_t fDebugMax;  ! Last entry number to debug ;  ; Long64_t fDebugMin;  ! First entry number to debug ;  ; Int_t fDefaultEntryOffsetLen;  Initial Length of fEntryOffset table in the basket buffers. ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this tree ;  ; Long64_t fEntries;  Number of entries. ;  ; TEntryList * fEntryList;  ! Pointer to event selection list (if one) ;  ; Long64_t fEstimate;  Number of entries to estimate histogram limits. ;  ; TEventList * fEventList;  ! Pointer to event selection list (if one) ;  ; TList * f",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:48645,Performance,multi-thread,multi-threading,48645, cluster for a given range. ;  ; Int_t fDebug;  ! Debug level ;  ; Long64_t fDebugMax;  ! Last entry number to debug ;  ; Long64_t fDebugMin;  ! First entry number to debug ;  ; Int_t fDefaultEntryOffsetLen;  Initial Length of fEntryOffset table in the basket buffers. ;  ; TDirectory * fDirectory;  ! Pointer to directory holding this tree ;  ; Long64_t fEntries;  Number of entries. ;  ; TEntryList * fEntryList;  ! Pointer to event selection list (if one) ;  ; Long64_t fEstimate;  Number of entries to estimate histogram limits. ;  ; TEventList * fEventList;  ! Pointer to event selection list (if one) ;  ; TList * fExternalFriends;  ! List of TFriendsElement pointing to us and need to be notified of LoadTree. Content not owned. ;  ; Int_t fFileNumber;  ! current file number (if file extensions) ;  ; Long64_t fFlushedBytes;  Number of auto-flushed bytes. ;  ; UInt_t fFriendLockStatus;  ! Record which method is locking the friend recursion ;  ; TList * fFriends;  pointer to list of friend elements ;  ; bool fIMTEnabled;  ! true if implicit multi-threading is enabled for this tree ;  ; TArrayI fIndex;  Index of sorted values. ;  ; TArrayD fIndexValues;  Sorted index values. ;  ; TIOFeatures fIOFeatures {0};  IO features to define for newly-written baskets and branches. ;  ; TObjArray fLeaves;  Direct pointers to individual branch leaves. ;  ; Int_t fMakeClass;  ! not zero when processing code generated by MakeClass ;  ; Int_t fMaxClusterRange;  ! Memory allocated for the cluster range. ;  ; Long64_t fMaxEntries;  Maximum number of entries in case of circular buffers. ;  ; Long64_t fMaxEntryLoop;  Maximum number of entries to process. ;  ; Long64_t fMaxVirtualSize;  Maximum total size of buffers kept in memory. ;  ; Int_t fNClusterRange;  Number of Cluster range in addition to the one defined by 'AutoFlush'. ;  ; UInt_t fNEntriesSinceSorting;  ! Number of entries processed since the last re-sorting of branches ;  ; Int_t fNfill;  ! Local for EntryLoop ;  ; TObject * fNotif,MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:49625,Performance,load,loading,49625,"recursion ;  ; TList * fFriends;  pointer to list of friend elements ;  ; bool fIMTEnabled;  ! true if implicit multi-threading is enabled for this tree ;  ; TArrayI fIndex;  Index of sorted values. ;  ; TArrayD fIndexValues;  Sorted index values. ;  ; TIOFeatures fIOFeatures {0};  IO features to define for newly-written baskets and branches. ;  ; TObjArray fLeaves;  Direct pointers to individual branch leaves. ;  ; Int_t fMakeClass;  ! not zero when processing code generated by MakeClass ;  ; Int_t fMaxClusterRange;  ! Memory allocated for the cluster range. ;  ; Long64_t fMaxEntries;  Maximum number of entries in case of circular buffers. ;  ; Long64_t fMaxEntryLoop;  Maximum number of entries to process. ;  ; Long64_t fMaxVirtualSize;  Maximum total size of buffers kept in memory. ;  ; Int_t fNClusterRange;  Number of Cluster range in addition to the one defined by 'AutoFlush'. ;  ; UInt_t fNEntriesSinceSorting;  ! Number of entries processed since the last re-sorting of branches ;  ; Int_t fNfill;  ! Local for EntryLoop ;  ; TObject * fNotify;  Object to be notified when loading a Tree. ;  ; Int_t fPacketSize;  ! Number of entries in one packet for parallel root ;  ; TVirtualPerfStats * fPerfStats;  ! pointer to the current perf stats object ;  ; TVirtualTreePlayer * fPlayer;  ! Pointer to current Tree player ;  ; Long64_t fReadEntry;  ! Number of the entry being processed ;  ; Long64_t fSavedBytes;  Number of autosaved bytes. ;  ; Int_t fScanField;  Number of runs before prompting in Scan. ;  ; std::vector< TBranch * > fSeqBranches;  ! Branches to be processed sequentially when IMT is on ;  ; std::vector< std::pair< Long64_t, TBranch * > > fSortedBranches;  ! Branches to be processed in parallel when IMT is on, sorted by average task time ;  ; Float_t fTargetMemoryRatio {1.1f};  ! Ratio for memory usage in uncompressed buffers versus actual occupancy. ;  ; Int_t fTimerInterval;  Timer interval in milliseconds. ;  ; std::atomic< Long64_t > fTotalBuffers;  ! Tota",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:61348,Performance,load,load,61348,"of all ROOT objects.Definition TObject.h:41; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; NoteTo add all the files of a another TChain to this one, use TChain::Add(TChain* chain). ; Definition at line 365 of file TChain.cxx. ◆ Add() [2/2]. Int_t TChain::Add ; (; TChain * ; chain). virtual . Add all files referenced by the passed chain to this chain. ; The function returns the total number of files connected. ; Definition at line 219 of file TChain.cxx. ◆ AddFile(). Int_t TChain::AddFile ; (; const char * ; name, . Long64_t ; nentries = TTree::kMaxEntries, . const char * ; tname = """" . ). virtual . Add a new file to this chain. ; Filename formats are similar to TChain::Add. Wildcards are not applied. urls may also contain query and fragment identifiers where the tree name can be specified in the url fragment.; eg. root://machine/path/file_name[?query[#tree_name]]; root://machine/path/file_name.root[.oext]/tree_name[?query]; If tree_name is given as a part of the file name it is used to as the name of the tree to load from the file. Otherwise if tname argument is specified the chain will load the tree named tname from the file, otherwise the original treename specified in the TChain constructor will be used. Tagging the tree_name with a slash [/tree_name] is only supported for backward compatibility; it requires the file name ot contain the string '.root' and its use is deprecated.; A. If nentries <= 0, the file is opened and the tree header read into memory to get the number of entries.; B. If nentries > 0, the file is not opened, and nentries is assumed to be the number of entries in the file. In this case, no check is made that the file exists nor that the tree exists in the file. This second mode is interesting in case the number of entries in the file is already stored in a run database for example.; C. If nentries == TTree::kMaxEntries (default), the file is not opened. The number of entries in each file will be read only when the file is op",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:61424,Performance,load,load,61424,"to this one, use TChain::Add(TChain* chain). ; Definition at line 365 of file TChain.cxx. ◆ Add() [2/2]. Int_t TChain::Add ; (; TChain * ; chain). virtual . Add all files referenced by the passed chain to this chain. ; The function returns the total number of files connected. ; Definition at line 219 of file TChain.cxx. ◆ AddFile(). Int_t TChain::AddFile ; (; const char * ; name, . Long64_t ; nentries = TTree::kMaxEntries, . const char * ; tname = """" . ). virtual . Add a new file to this chain. ; Filename formats are similar to TChain::Add. Wildcards are not applied. urls may also contain query and fragment identifiers where the tree name can be specified in the url fragment.; eg. root://machine/path/file_name[?query[#tree_name]]; root://machine/path/file_name.root[.oext]/tree_name[?query]; If tree_name is given as a part of the file name it is used to as the name of the tree to load from the file. Otherwise if tname argument is specified the chain will load the tree named tname from the file, otherwise the original treename specified in the TChain constructor will be used. Tagging the tree_name with a slash [/tree_name] is only supported for backward compatibility; it requires the file name ot contain the string '.root' and its use is deprecated.; A. If nentries <= 0, the file is opened and the tree header read into memory to get the number of entries.; B. If nentries > 0, the file is not opened, and nentries is assumed to be the number of entries in the file. In this case, no check is made that the file exists nor that the tree exists in the file. This second mode is interesting in case the number of entries in the file is already stored in a run database for example.; C. If nentries == TTree::kMaxEntries (default), the file is not opened. The number of entries in each file will be read only when the file is opened to read an entry. This option is the default and very efficient if one processes the chain sequentially. Note that in case GetEntry(entry) is called and",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:70692,Performance,optimiz,optimize,70692,"at has to be done.; This machine independent version of the data is copied into a basket (each branch has its own basket). When a basket is full (32k worth of data by default), it is then optionally compressed and written to disk (this operation is also called committing or 'flushing' the basket). The committed baskets are then immediately removed from memory.; The function returns the number of bytes committed to the individual branches.; If a write error occurs, the number of bytes returned is -1.; If no data are written, because, e.g., the branch is disabled, the number of bytes returned is 0.; The baskets are flushed and the Tree header saved at regular intervals; At regular intervals, when the amount of data written so far is greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk. This makes future reading faster as it guarantees that baskets belonging to nearby entries will be on the same disk region. When the first call to flush the baskets happen, we also take this opportunity to optimize the baskets buffers. We also check if the amount of data written is greater than fAutoSave (see SetAutoSave). In this case we also write the Tree header. This makes the Tree recoverable up to this point in case the program writing the Tree crashes. The decisions to FlushBaskets and Auto Save can be made based either on the number of bytes written (fAutoFlush and fAutoSave negative) or on the number of entries written (fAutoFlush and fAutoSave positive). Note that the user can decide to call FlushBaskets and AutoSave in her event loop base on the number of events written instead of the number of bytes written.; NoteCalling TTree::FlushBaskets too often increases the IO time. Calling TTree::AutoSave too often increases the IO time and also the file size. This method calls TTree::ChangeFile when the tree reaches a size greater than TTree::fgMaxTreeSize. This doesn't happen if the tree is attached to a TMemFile or derivate. ; Reimplemented from TTree.; D",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:75284,Performance,load,loads,75284,"ies where at least one element match the selection. GetEntries is implemented using the selector class TSelectorEntries, which can be used directly (see code in TTreePlayer::GetEntries) for additional option. If SetEventList was used on the TTree or TChain, only that subset of entries will be considered. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 101 of file TChain.h. ◆ GetEntry(). Int_t TChain::GetEntry ; (; Long64_t ; entry = 0, . Int_t ; getall = 0 . ). overridevirtual . Get entry from the file to memory. . getall = 0 : get only active branches; getall = 1 : get all branches. Return the total number of bytes read, 0 bytes read indicates a failure. ; Reimplemented from TTree.; Definition at line 976 of file TChain.cxx. ◆ GetEntryNumber(). Long64_t TChain::GetEntryNumber ; (; Long64_t ; entry); const. overridevirtual . Return entry number corresponding to entry. ; if no TEntryList set returns entry else returns entry #entry from this entry list and also computes the global entry number (loads all tree headers) ; Reimplemented from TTree.; Definition at line 995 of file TChain.cxx. ◆ GetEntryWithIndex(). Int_t TChain::GetEntryWithIndex ; (; Int_t ; major, . Int_t ; minor = 0 . ). overridevirtual . Return entry corresponding to major and minor number. ; The function returns the total number of bytes read. If the Tree has friend trees, the corresponding entry with the index values (major,minor) is read. Note that the master Tree and its friend may have different entry serial numbers corresponding to (major,minor). ; Reimplemented from TTree.; Definition at line 1028 of file TChain.cxx. ◆ GetFile(). TFile * TChain::GetFile ; (; ); const. Return a pointer to the current file. ; If no file is connected, the first file is automatically loaded. ; Definition at line 1039 of file TChain.cxx. ◆ GetLeaf() [1/2]. TLeaf * TChain::GetLeaf ; (; const char * ; branchname, . const char * ; leafname . ). overridevirtual . Return a pointer to the lea",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:76041,Performance,load,loaded,76041,"GetEntryNumber(). Long64_t TChain::GetEntryNumber ; (; Long64_t ; entry); const. overridevirtual . Return entry number corresponding to entry. ; if no TEntryList set returns entry else returns entry #entry from this entry list and also computes the global entry number (loads all tree headers) ; Reimplemented from TTree.; Definition at line 995 of file TChain.cxx. ◆ GetEntryWithIndex(). Int_t TChain::GetEntryWithIndex ; (; Int_t ; major, . Int_t ; minor = 0 . ). overridevirtual . Return entry corresponding to major and minor number. ; The function returns the total number of bytes read. If the Tree has friend trees, the corresponding entry with the index values (major,minor) is read. Note that the master Tree and its friend may have different entry serial numbers corresponding to (major,minor). ; Reimplemented from TTree.; Definition at line 1028 of file TChain.cxx. ◆ GetFile(). TFile * TChain::GetFile ; (; ); const. Return a pointer to the current file. ; If no file is connected, the first file is automatically loaded. ; Definition at line 1039 of file TChain.cxx. ◆ GetLeaf() [1/2]. TLeaf * TChain::GetLeaf ; (; const char * ; branchname, . const char * ; leafname . ). overridevirtual . Return a pointer to the leaf name in the current tree. ; Reimplemented from TTree.; Definition at line 1052 of file TChain.cxx. ◆ GetLeaf() [2/2]. TLeaf * TChain::GetLeaf ; (; const char * ; name). overridevirtual . Return a pointer to the leaf name in the current tree. ; Reimplemented from TTree.; Definition at line 1073 of file TChain.cxx. ◆ GetListOfBranches(). TObjArray * TChain::GetListOfBranches ; (; ). overridevirtual . Return a pointer to the list of branches of the current tree. ; Warning: If there is no current TTree yet, this routine will open the first in the chain.; Returns 0 on failure. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 1099 of file TChain.cxx. ◆ GetListOfFiles(). TObjArray * TChain::GetListOfFiles ; (; ); const. inline . Defin",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:80452,Performance,load,load,80452,"rtual . Move content to a new file. (NOT IMPLEMENTED for TChain) ; Reimplemented from TTree.; Definition at line 1233 of file TChain.cxx. ◆ InvalidateCurrentTree(). void TChain::InvalidateCurrentTree ; (; ). protected . Set the TTree to be reloaded as soon as possible. ; In particular this is needed when adding a Friend.; If the tree has clones, copy them into the chain clone list so we can change their branch addresses when necessary.; This is to support the syntax: TTree* clone = chain->GetTree()->CloneTree(0);; cloneTObject * clone(const char *newname) const overrideDefinition RooChi2Var.h:9. Definition at line 1252 of file TChain.cxx. ◆ IsA(). TClass * TChain::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 173 of file TChain.h. ◆ LoadBaskets(). Int_t TChain::LoadBaskets ; (; Long64_t ; maxmemory). overridevirtual . Dummy function. ; It could be implemented and load all baskets of all trees in the chain. For the time being use TChain::Merge and TTree::LoadBasket on the resulting tree. ; Reimplemented from TTree.; Definition at line 1270 of file TChain.cxx. ◆ LoadTree(). Long64_t TChain::LoadTree ; (; Long64_t ; entry). overridevirtual . Find the tree which contains entry, and set it as the current tree. ; Returns the entry number in that tree.; The input argument entry is the entry serial number in the whole chain.; In case of error, LoadTree returns a negative number:; -1: The chain is empty.; -2: The requested entry number is less than zero or too large for the chain.; -3: The file corresponding to the entry could not be correctly open; -4: The TChainElement corresponding to the entry is missing or the TTree is missing from the file.; -5: Internal error, please report the circumstance when this happen as a ROOT issue.; -6: An error occurred within the notify callback. Calls fNotify->Notify() (if fNotify is not null) when starting the processing o",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:86429,Performance,optimiz,optimize,86429,"ry structure do the following instead: TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; file->mkdir(""mydir"")->cd();; ch.Merge(file, 0);; If 'option' contains the word 'fast' the merge will be done without unzipping or unstreaming the baskets (i.e., a direct copy of the raw bytes on disk).; When 'fast' is specified, 'option' can also contains a sorting order for the baskets in the output file.; There is currently 3 supported sorting order: SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsByEntry; When using SortBasketsByOffset the baskets are written in the output file in the same order as in the original file (i.e. the basket are sorted on their offset in the original file; Usually this also means that the baskets are sorted on the index/number of the last entry they contain); When using SortBasketsByBranch all the baskets of each individual branches are stored contiguously. This tends to optimize reading speed when reading a small number (1->5) of branches, since all their baskets will be clustered together instead of being spread across the file. However it might decrease the performance when reading more branches (or the full entry).; When using SortBasketsByEntry the baskets with the lowest starting entry are written first. (i.e. the baskets are sorted on the index/number of the first entry they contain). This means that on the file the baskets will be in the order in which they will be needed when reading the whole tree sequentially. IMPORTANT Note 1: AUTOMATIC FILE OVERFLOW; When merging many files, it may happen that the resulting file reaches a size > TTree::fgMaxTreeSize (default = 100 GBytes). In this case the current file is automatically closed and a new file started. If the name of the merged file was ""merged.root"", the subsequent files will be named ""merged_1.root"", ""merged_2.root"", etc. fgMaxTreeSize may be modified via the static function TTree::SetMaxTreeSize. When in fast mode, the check and switch is only done in between ea",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:86622,Performance,perform,performance,86622,"ile, 0);; If 'option' contains the word 'fast' the merge will be done without unzipping or unstreaming the baskets (i.e., a direct copy of the raw bytes on disk).; When 'fast' is specified, 'option' can also contains a sorting order for the baskets in the output file.; There is currently 3 supported sorting order: SortBasketsByOffset (the default); SortBasketsByBranch; SortBasketsByEntry; When using SortBasketsByOffset the baskets are written in the output file in the same order as in the original file (i.e. the basket are sorted on their offset in the original file; Usually this also means that the baskets are sorted on the index/number of the last entry they contain); When using SortBasketsByBranch all the baskets of each individual branches are stored contiguously. This tends to optimize reading speed when reading a small number (1->5) of branches, since all their baskets will be clustered together instead of being spread across the file. However it might decrease the performance when reading more branches (or the full entry).; When using SortBasketsByEntry the baskets with the lowest starting entry are written first. (i.e. the baskets are sorted on the index/number of the first entry they contain). This means that on the file the baskets will be in the order in which they will be needed when reading the whole tree sequentially. IMPORTANT Note 1: AUTOMATIC FILE OVERFLOW; When merging many files, it may happen that the resulting file reaches a size > TTree::fgMaxTreeSize (default = 100 GBytes). In this case the current file is automatically closed and a new file started. If the name of the merged file was ""merged.root"", the subsequent files will be named ""merged_1.root"", ""merged_2.root"", etc. fgMaxTreeSize may be modified via the static function TTree::SetMaxTreeSize. When in fast mode, the check and switch is only done in between each input file. IMPORTANT Note 2: The output file is automatically closed and deleted.; This is required because in general the automa",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:93584,Performance,load,loads,93584,"verridevirtual . Save TChain as a C++ statements on output stream out. ; With the option ""friend"" save the description of all the TChain's friend trees or chains as well. ; Reimplemented from TObject.; Definition at line 2360 of file TChain.cxx. ◆ Scan(). Long64_t TChain::Scan ; (; const char * ; varexp = """", . const char * ; selection = """", . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Loop on tree and print entries passing selection. . If varexp is 0 (or """") then print only first 8 columns.; If varexp = ""*"" print all columns.; Otherwise a columns selection can be made using ""var1:var2:var3"". See TTreePlayer::Scan for more information. . Reimplemented from TTree.; Definition at line 2417 of file TChain.cxx. ◆ SetAutoDelete(). void TChain::SetAutoDelete ; (; bool ; autodelete = true). virtual . Set the global branch kAutoDelete bit. ; When LoadTree loads a new Tree, the branches for which the address is set will have the option AutoDelete set For more details on AutoDelete, see TBranch::SetAutoDelete. ; Definition at line 2432 of file TChain.cxx. ◆ SetBranchAddress() [1/5]. template<class T > . Int_t TChain::SetBranchAddress ; (; const char * ; bname, . T ** ; add, . TBranch ** ; ptr = nullptr . ). inline . Definition at line 149 of file TChain.h. ◆ SetBranchAddress() [2/5]. template<class T > . Int_t TChain::SetBranchAddress ; (; const char * ; bname, . T * ; add, . TBranch ** ; ptr = nullptr . ). inline . Definition at line 155 of file TChain.h. ◆ SetBranchAddress() [3/5]. Int_t TChain::SetBranchAddress ; (; const char * ; bname, . void * ; add, . TBranch ** ; ptr, . TClass * ; realClass, . EDataType ; datatype, . bool ; isptr . ). overridevirtual . Check if bname is already in the status list, and if not, create a TChainElement object and set its address. ; See TTree::CheckBranchAddressType for the semantic of the return value.; Note: See the comments in TBranchElement::SetAddress() for a more ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:96746,Performance,cache,cacheSize,96746,"; See TTree::CheckBranchAddressType for the semantic of the return value.; Note: See the comments in TBranchElement::SetAddress() for a more detailed discussion of the meaning of the add parameter. ; Reimplemented from TTree.; Definition at line 2571 of file TChain.cxx. ◆ SetBranchStatus(). void TChain::SetBranchStatus ; (; const char * ; bname, . bool ; status = true, . UInt_t * ; found = nullptr . ). overridevirtual . Set branch status to Process or DoNotProcess. ; Parameters. [in]bnameis the name of a branch. if bname=""*"", apply to all branches. ; [in]status= 1 branch will be processed, = 0 branch will not be processed ; [out]found. See IMPORTANT REMARKS in TTree::SetBranchStatus and TChain::SetBranchAddress; If found is not 0, the number of branch(es) found matching the regular expression is returned in *found AND the error message 'unknown branch' is suppressed. ; Reimplemented from TTree.; Definition at line 2613 of file TChain.cxx. ◆ SetCacheSize(). Int_t TChain::SetCacheSize ; (; Long64_t ; cacheSize = -1). overridevirtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented from TTree.; Definition at line 2441 of file TChain.cxx. ◆ SetDirectory(). void TChain::SetDirectory ; (; TDirectory * ; dir). overridevirtual . Remove reference to this chain from current directory and add reference to new directory dir. ; dir can be 0 in which case the chain does not belong to any directory. ; Reimplemented from TTree.; Definition at line 2640 of file TChain.cxx. ◆ SetEntryList(). void TChain::SetEntryList ; (; TEntryList * ; elist, . Option_t * ; opt = """" . ). overridevirtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; Parameters. [in]elistThe entry list to be assigne",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:96810,Performance,cache,cache,96810," value.; Note: See the comments in TBranchElement::SetAddress() for a more detailed discussion of the meaning of the add parameter. ; Reimplemented from TTree.; Definition at line 2571 of file TChain.cxx. ◆ SetBranchStatus(). void TChain::SetBranchStatus ; (; const char * ; bname, . bool ; status = true, . UInt_t * ; found = nullptr . ). overridevirtual . Set branch status to Process or DoNotProcess. ; Parameters. [in]bnameis the name of a branch. if bname=""*"", apply to all branches. ; [in]status= 1 branch will be processed, = 0 branch will not be processed ; [out]found. See IMPORTANT REMARKS in TTree::SetBranchStatus and TChain::SetBranchAddress; If found is not 0, the number of branch(es) found matching the regular expression is returned in *found AND the error message 'unknown branch' is suppressed. ; Reimplemented from TTree.; Definition at line 2613 of file TChain.cxx. ◆ SetCacheSize(). Int_t TChain::SetCacheSize ; (; Long64_t ; cacheSize = -1). overridevirtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented from TTree.; Definition at line 2441 of file TChain.cxx. ◆ SetDirectory(). void TChain::SetDirectory ; (; TDirectory * ; dir). overridevirtual . Remove reference to this chain from current directory and add reference to new directory dir. ; dir can be 0 in which case the chain does not belong to any directory. ; Reimplemented from TTree.; Definition at line 2640 of file TChain.cxx. ◆ SetEntryList(). void TChain::SetEntryList ; (; TEntryList * ; elist, . Option_t * ; opt = """" . ). overridevirtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; Parameters. [in]elistThe entry list to be assigned to this chain. ; [in]optAn option string. Possible values are:; """,MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:96823,Performance,cache,cachesize,96823,"::SetAddress() for a more detailed discussion of the meaning of the add parameter. ; Reimplemented from TTree.; Definition at line 2571 of file TChain.cxx. ◆ SetBranchStatus(). void TChain::SetBranchStatus ; (; const char * ; bname, . bool ; status = true, . UInt_t * ; found = nullptr . ). overridevirtual . Set branch status to Process or DoNotProcess. ; Parameters. [in]bnameis the name of a branch. if bname=""*"", apply to all branches. ; [in]status= 1 branch will be processed, = 0 branch will not be processed ; [out]found. See IMPORTANT REMARKS in TTree::SetBranchStatus and TChain::SetBranchAddress; If found is not 0, the number of branch(es) found matching the regular expression is returned in *found AND the error message 'unknown branch' is suppressed. ; Reimplemented from TTree.; Definition at line 2613 of file TChain.cxx. ◆ SetCacheSize(). Int_t TChain::SetCacheSize ; (; Long64_t ; cacheSize = -1). overridevirtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented from TTree.; Definition at line 2441 of file TChain.cxx. ◆ SetDirectory(). void TChain::SetDirectory ; (; TDirectory * ; dir). overridevirtual . Remove reference to this chain from current directory and add reference to new directory dir. ; dir can be 0 in which case the chain does not belong to any directory. ; Reimplemented from TTree.; Definition at line 2640 of file TChain.cxx. ◆ SetEntryList(). void TChain::SetEntryList ; (; TEntryList * ; elist, . Option_t * ; opt = """" . ). overridevirtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; Parameters. [in]elistThe entry list to be assigned to this chain. ; [in]optAn option string. Possible values are:; """" (default): both the file names of the chain ele",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:96850,Performance,cache,cache,96850,"::SetAddress() for a more detailed discussion of the meaning of the add parameter. ; Reimplemented from TTree.; Definition at line 2571 of file TChain.cxx. ◆ SetBranchStatus(). void TChain::SetBranchStatus ; (; const char * ; bname, . bool ; status = true, . UInt_t * ; found = nullptr . ). overridevirtual . Set branch status to Process or DoNotProcess. ; Parameters. [in]bnameis the name of a branch. if bname=""*"", apply to all branches. ; [in]status= 1 branch will be processed, = 0 branch will not be processed ; [out]found. See IMPORTANT REMARKS in TTree::SetBranchStatus and TChain::SetBranchAddress; If found is not 0, the number of branch(es) found matching the regular expression is returned in *found AND the error message 'unknown branch' is suppressed. ; Reimplemented from TTree.; Definition at line 2613 of file TChain.cxx. ◆ SetCacheSize(). Int_t TChain::SetCacheSize ; (; Long64_t ; cacheSize = -1). overridevirtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented from TTree.; Definition at line 2441 of file TChain.cxx. ◆ SetDirectory(). void TChain::SetDirectory ; (; TDirectory * ; dir). overridevirtual . Remove reference to this chain from current directory and add reference to new directory dir. ; dir can be 0 in which case the chain does not belong to any directory. ; Reimplemented from TTree.; Definition at line 2640 of file TChain.cxx. ◆ SetEntryList(). void TChain::SetEntryList ; (; TEntryList * ; elist, . Option_t * ; opt = """" . ). overridevirtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; Parameters. [in]elistThe entry list to be assigned to this chain. ; [in]optAn option string. Possible values are:; """" (default): both the file names of the chain ele",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:96881,Performance,cache,cachesize,96881,"; Reimplemented from TTree.; Definition at line 2571 of file TChain.cxx. ◆ SetBranchStatus(). void TChain::SetBranchStatus ; (; const char * ; bname, . bool ; status = true, . UInt_t * ; found = nullptr . ). overridevirtual . Set branch status to Process or DoNotProcess. ; Parameters. [in]bnameis the name of a branch. if bname=""*"", apply to all branches. ; [in]status= 1 branch will be processed, = 0 branch will not be processed ; [out]found. See IMPORTANT REMARKS in TTree::SetBranchStatus and TChain::SetBranchAddress; If found is not 0, the number of branch(es) found matching the regular expression is returned in *found AND the error message 'unknown branch' is suppressed. ; Reimplemented from TTree.; Definition at line 2613 of file TChain.cxx. ◆ SetCacheSize(). Int_t TChain::SetCacheSize ; (; Long64_t ; cacheSize = -1). overridevirtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented from TTree.; Definition at line 2441 of file TChain.cxx. ◆ SetDirectory(). void TChain::SetDirectory ; (; TDirectory * ; dir). overridevirtual . Remove reference to this chain from current directory and add reference to new directory dir. ; dir can be 0 in which case the chain does not belong to any directory. ; Reimplemented from TTree.; Definition at line 2640 of file TChain.cxx. ◆ SetEntryList(). void TChain::SetEntryList ; (; TEntryList * ; elist, . Option_t * ; opt = """" . ). overridevirtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; Parameters. [in]elistThe entry list to be assigned to this chain. ; [in]optAn option string. Possible values are:; """" (default): both the file names of the chain elements and the file names of the TEntryList sublists are expanded to full path name",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:97007,Performance,cache,cache,97007,"tus(). void TChain::SetBranchStatus ; (; const char * ; bname, . bool ; status = true, . UInt_t * ; found = nullptr . ). overridevirtual . Set branch status to Process or DoNotProcess. ; Parameters. [in]bnameis the name of a branch. if bname=""*"", apply to all branches. ; [in]status= 1 branch will be processed, = 0 branch will not be processed ; [out]found. See IMPORTANT REMARKS in TTree::SetBranchStatus and TChain::SetBranchAddress; If found is not 0, the number of branch(es) found matching the regular expression is returned in *found AND the error message 'unknown branch' is suppressed. ; Reimplemented from TTree.; Definition at line 2613 of file TChain.cxx. ◆ SetCacheSize(). Int_t TChain::SetCacheSize ; (; Long64_t ; cacheSize = -1). overridevirtual . Set maximum size of the file cache . . if cachesize = 0 the existing cache (if any) is deleted.; if cachesize = -1 (default) it is set to the AutoFlush value when writing the Tree (default is 30 MBytes). Returns:; 0 size set, cache was created if possible; -1 on error . Reimplemented from TTree.; Definition at line 2441 of file TChain.cxx. ◆ SetDirectory(). void TChain::SetDirectory ; (; TDirectory * ; dir). overridevirtual . Remove reference to this chain from current directory and add reference to new directory dir. ; dir can be 0 in which case the chain does not belong to any directory. ; Reimplemented from TTree.; Definition at line 2640 of file TChain.cxx. ◆ SetEntryList(). void TChain::SetEntryList ; (; TEntryList * ; elist, . Option_t * ; opt = """" . ). overridevirtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; Parameters. [in]elistThe entry list to be assigned to this chain. ; [in]optAn option string. Possible values are:; """" (default): both the file names of the chain elements and the file names of the TEntryList sublists are expanded to full path name.; ""ne"": the file names are taken as they are and not expanded; ""sync"": the TChain will ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:98096,Performance,perform,performing,98096,"1 on error . Reimplemented from TTree.; Definition at line 2441 of file TChain.cxx. ◆ SetDirectory(). void TChain::SetDirectory ; (; TDirectory * ; dir). overridevirtual . Remove reference to this chain from current directory and add reference to new directory dir. ; dir can be 0 in which case the chain does not belong to any directory. ; Reimplemented from TTree.; Definition at line 2640 of file TChain.cxx. ◆ SetEntryList(). void TChain::SetEntryList ; (; TEntryList * ; elist, . Option_t * ; opt = """" . ). overridevirtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; Parameters. [in]elistThe entry list to be assigned to this chain. ; [in]optAn option string. Possible values are:; """" (default): both the file names of the chain elements and the file names of the TEntryList sublists are expanded to full path name.; ""ne"": the file names are taken as they are and not expanded; ""sync"": the TChain will go through the TEntryList in lockstep with the trees in the chain rather than performing a lookup based on treename and filename. This is mostly useful when the TEntryList has multiple sublists for the same tree and filename. . Exceptions. std::runtime_errorIf option ""sync"" was chosen and either:; elist doesn't have sub entry lists.; the number of sub entry lists in elist is different than the number of trees in the chain.; any of the sub entry lists in elist doesn't correspond to the tree of the chain with the same index (i.e. it doesn't share the same tree name and file name). This function finds correspondence between the sub-lists of the TEntryList and the trees of the TChain. ; Reimplemented from TTree.; Definition at line 2677 of file TChain.cxx. ◆ SetEntryListFile(). void TChain::SetEntryListFile ; (; const char * ; filename = """", . Option_t * ; opt = """" . ). virtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; This function crea",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:99105,Performance,load,loads,99105," based on treename and filename. This is mostly useful when the TEntryList has multiple sublists for the same tree and filename. . Exceptions. std::runtime_errorIf option ""sync"" was chosen and either:; elist doesn't have sub entry lists.; the number of sub entry lists in elist is different than the number of trees in the chain.; any of the sub entry lists in elist doesn't correspond to the tree of the chain with the same index (i.e. it doesn't share the same tree name and file name). This function finds correspondence between the sub-lists of the TEntryList and the trees of the TChain. ; Reimplemented from TTree.; Definition at line 2677 of file TChain.cxx. ◆ SetEntryListFile(). void TChain::SetEntryListFile ; (; const char * ; filename = """", . Option_t * ; opt = """" . ). virtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; This function creates a special kind of entry list (TEntryListFromFile object) that loads lists, corresponding to the chain elements, one by one, so that only one list is in memory at a time.; If there is an error opening one of the files, this file is skipped and the next file is loaded; File naming convention:. by default, filename_elist.root is used, where filename is the name of the chain element; xxx$xxx.root - $ sign is replaced by the name of the chain element. If the list name is not specified (by passing filename_elist.root/listname to the TChain::SetEntryList() function, the first object of class TEntryList in the file is taken.; It is assumed, that there are as many list files, as there are elements in the chain and they are in the same order ; Definition at line 2822 of file TChain.cxx. ◆ SetEventList(). void TChain::SetEventList ; (; TEventList * ; evlist). overridevirtual . This function transfroms the given TEventList into a TEntryList. ; NOTE, that this function loads all tree headers, because the entry numbers in the TEventList are global and have to be recompu",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:99303,Performance,load,loaded,99303,"rorIf option ""sync"" was chosen and either:; elist doesn't have sub entry lists.; the number of sub entry lists in elist is different than the number of trees in the chain.; any of the sub entry lists in elist doesn't correspond to the tree of the chain with the same index (i.e. it doesn't share the same tree name and file name). This function finds correspondence between the sub-lists of the TEntryList and the trees of the TChain. ; Reimplemented from TTree.; Definition at line 2677 of file TChain.cxx. ◆ SetEntryListFile(). void TChain::SetEntryListFile ; (; const char * ; filename = """", . Option_t * ; opt = """" . ). virtual . Set the input entry list (processing the entries of the chain will then be limited to the entries in the list). ; This function creates a special kind of entry list (TEntryListFromFile object) that loads lists, corresponding to the chain elements, one by one, so that only one list is in memory at a time.; If there is an error opening one of the files, this file is skipped and the next file is loaded; File naming convention:. by default, filename_elist.root is used, where filename is the name of the chain element; xxx$xxx.root - $ sign is replaced by the name of the chain element. If the list name is not specified (by passing filename_elist.root/listname to the TChain::SetEntryList() function, the first object of class TEntryList in the file is taken.; It is assumed, that there are as many list files, as there are elements in the chain and they are in the same order ; Definition at line 2822 of file TChain.cxx. ◆ SetEventList(). void TChain::SetEventList ; (; TEventList * ; evlist). overridevirtual . This function transfroms the given TEventList into a TEntryList. ; NOTE, that this function loads all tree headers, because the entry numbers in the TEventList are global and have to be recomputed, taking into account the number of entries in each tree.; The new TEntryList is owned by the TChain and gets deleted when the chain is deleted. This TEntry",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:100014,Performance,load,loads,100014,"istFromFile object) that loads lists, corresponding to the chain elements, one by one, so that only one list is in memory at a time.; If there is an error opening one of the files, this file is skipped and the next file is loaded; File naming convention:. by default, filename_elist.root is used, where filename is the name of the chain element; xxx$xxx.root - $ sign is replaced by the name of the chain element. If the list name is not specified (by passing filename_elist.root/listname to the TChain::SetEntryList() function, the first object of class TEntryList in the file is taken.; It is assumed, that there are as many list files, as there are elements in the chain and they are in the same order ; Definition at line 2822 of file TChain.cxx. ◆ SetEventList(). void TChain::SetEventList ; (; TEventList * ; evlist). overridevirtual . This function transfroms the given TEventList into a TEntryList. ; NOTE, that this function loads all tree headers, because the entry numbers in the TEventList are global and have to be recomputed, taking into account the number of entries in each tree.; The new TEntryList is owned by the TChain and gets deleted when the chain is deleted. This TEntryList is returned by GetEntryList() function, and after GetEntryList() function is called, the TEntryList is not owned by the chain any more and will not be deleted with it. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 2868 of file TChain.cxx. ◆ SetMakeClass(). void TChain::SetMakeClass ; (; Int_t ; make). inlineoverridevirtual . Set all the branches in this TTree to be in decomposed object mode (also known as MakeClass mode). ; For MakeClass mode 0, the TTree expects the address where the data is stored to be set by either the user or the TTree to the address of a full object through the top level branch. For MakeClass mode 1, this address is expected to point to a numerical type or C-style array (variable or not) of numerical type, representing the primitive dat",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:103627,Performance,cache,cache,103627," For example the equivalent of chain.Draw(""x"",""w""); is chain.SetWeight(w,""global"");; chain.Draw(""x"");; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; By default the weight used will be the weight of each Tree in the TChain. However, one can force the individual weights to be ignored by specifying the option ""global"". In this case, the TChain global weight will be used for all Trees. ; Reimplemented from TTree.; Definition at line 3033 of file TChain.cxx. ◆ Streamer(). void TChain::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 3047 of file TChain.cxx. ◆ StreamerNVirtual(). void TChain::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 173 of file TChain.h. ◆ UseCache(). void TChain::UseCache ; (; Int_t ; maxCacheSize = 10, . Int_t ; pageSize = 0 . ). virtual . Dummy function kept for back compatibility. ; The cache is now activated automatically when processing TTrees/TChain. ; Definition at line 3089 of file TChain.cxx. Member Data Documentation. ◆ fCanDeleteRefs. bool TChain::fCanDeleteRefs. protected . ! If true, TProcessIDs are deleted when closing a file ; Definition at line 40 of file TChain.h. ◆ fFile. TFile* TChain::fFile. protected . ! Pointer to current file (We own the file). ; Definition at line 42 of file TChain.h. ◆ fFiles. TObjArray* TChain::fFiles. protected . -> List of file names containing the trees (TChainElement, owned) ; Definition at line 43 of file TChain.h. ◆ fGlobalRegistration. bool TChain::fGlobalRegistration. protected . ! if true, bypass use of global lists ; Definition at line 46 of file TChain.h. ◆ fNtrees. Int_t TChain::fNtrees. protected . Number of trees. ; Definition at line 37 of file TChain.h. ◆ fProofChain. TChain* TChain::fProofChain. protected . ! chain proxy when going to be processed by PROOF ; Definition at line 45 of file TChain.h. ◆ fStatus. TList* TChain::fStatus. protected",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:25225,Safety,recover,recover,25225,"hDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntr",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:43309,Safety,detect,detection,43309," (Style_t style);  Internal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Static Public Attributes; static constexpr auto kBigNumber = TTree::kMaxEntries;  ;  Static Public Attributes inherited from TTree; static constexpr Long64_t kMaxEntries = TVirtualTreePlayer::kMaxEntries;  . Protected Member Functions; void InvalidateCurrentTree ();  Set the TTree to be reloaded as soon as possible. ;  ; void ReleaseChainProof ();  ;  Protected Member Functions inherited from TTree; virtual TBranch * BranchImp (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch() with added check that addobj matches className. ;  ; virtual TBranch * BranchImp (const char *branchname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpArr (const char *branchname, EDataType datatype, std::size_t N, void *addobj, Int_t bufsize, Int_t splitlevel);  ; virtual TBranch * BranchImpRef (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpRef (const char *branchname, TClass *ptrClass, EDataType datatype, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BronchExec (const char *name, const char *classname, void *addobj, bool isptrptr, Int_t bufsize, Int_t splitlevel);  Helper function implementing TTree::Bronch and TTree::Branch(const char *name, T &obj);. ;  ; virtual Int_t CheckBranchAddressType (TBranch *branch, TClass *ptrClass, EDataType datatype, bool p",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:43667,Safety,detect,detection,43667,"n style. ;  . Static Public Attributes; static constexpr auto kBigNumber = TTree::kMaxEntries;  ;  Static Public Attributes inherited from TTree; static constexpr Long64_t kMaxEntries = TVirtualTreePlayer::kMaxEntries;  . Protected Member Functions; void InvalidateCurrentTree ();  Set the TTree to be reloaded as soon as possible. ;  ; void ReleaseChainProof ();  ;  Protected Member Functions inherited from TTree; virtual TBranch * BranchImp (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch() with added check that addobj matches className. ;  ; virtual TBranch * BranchImp (const char *branchname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpArr (const char *branchname, EDataType datatype, std::size_t N, void *addobj, Int_t bufsize, Int_t splitlevel);  ; virtual TBranch * BranchImpRef (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpRef (const char *branchname, TClass *ptrClass, EDataType datatype, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BronchExec (const char *name, const char *classname, void *addobj, bool isptrptr, Int_t bufsize, Int_t splitlevel);  Helper function implementing TTree::Bronch and TTree::Branch(const char *name, T &obj);. ;  ; virtual Int_t CheckBranchAddressType (TBranch *branch, TClass *ptrClass, EDataType datatype, bool ptr);  Check whether or not the address described by the last 3 parameters matches the content of the branch. ;  ; Long64_t GetCacheAutoSize (bool withDefault=false);  Used for automatic sizing of the cache. ;  ; virtual TLeaf * GetLeafImpl (const char *branchname, const cha",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:43880,Safety,detect,detection,43880," the TTree to be reloaded as soon as possible. ;  ; void ReleaseChainProof ();  ;  Protected Member Functions inherited from TTree; virtual TBranch * BranchImp (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch() with added check that addobj matches className. ;  ; virtual TBranch * BranchImp (const char *branchname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpArr (const char *branchname, EDataType datatype, std::size_t N, void *addobj, Int_t bufsize, Int_t splitlevel);  ; virtual TBranch * BranchImpRef (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpRef (const char *branchname, TClass *ptrClass, EDataType datatype, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BronchExec (const char *name, const char *classname, void *addobj, bool isptrptr, Int_t bufsize, Int_t splitlevel);  Helper function implementing TTree::Bronch and TTree::Branch(const char *name, T &obj);. ;  ; virtual Int_t CheckBranchAddressType (TBranch *branch, TClass *ptrClass, EDataType datatype, bool ptr);  Check whether or not the address described by the last 3 parameters matches the content of the branch. ;  ; Long64_t GetCacheAutoSize (bool withDefault=false);  Used for automatic sizing of the cache. ;  ; virtual TLeaf * GetLeafImpl (const char *branchname, const char *leafname);  Return pointer to the 1st Leaf named name in any Branch of this Tree or any branch in the list of friend trees. ;  ; char GetNewlineValue (std::istream &inputStream);  Determine which newline this file is using. ;  ; void ImportClusterRanges (TTree *fromtree);  Appends t",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:70875,Safety,recover,recoverable,70875,"operation is also called committing or 'flushing' the basket). The committed baskets are then immediately removed from memory.; The function returns the number of bytes committed to the individual branches.; If a write error occurs, the number of bytes returned is -1.; If no data are written, because, e.g., the branch is disabled, the number of bytes returned is 0.; The baskets are flushed and the Tree header saved at regular intervals; At regular intervals, when the amount of data written so far is greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk. This makes future reading faster as it guarantees that baskets belonging to nearby entries will be on the same disk region. When the first call to flush the baskets happen, we also take this opportunity to optimize the baskets buffers. We also check if the amount of data written is greater than fAutoSave (see SetAutoSave). In this case we also write the Tree header. This makes the Tree recoverable up to this point in case the program writing the Tree crashes. The decisions to FlushBaskets and Auto Save can be made based either on the number of bytes written (fAutoFlush and fAutoSave negative) or on the number of entries written (fAutoFlush and fAutoSave positive). Note that the user can decide to call FlushBaskets and AutoSave in her event loop base on the number of events written instead of the number of bytes written.; NoteCalling TTree::FlushBaskets too often increases the IO time. Calling TTree::AutoSave too often increases the IO time and also the file size. This method calls TTree::ChangeFile when the tree reaches a size greater than TTree::fgMaxTreeSize. This doesn't happen if the tree is attached to a TMemFile or derivate. ; Reimplemented from TTree.; Definition at line 91 of file TChain.h. ◆ FindBranch(). TBranch * TChain::FindBranch ; (; const char * ; name). overridevirtual . See TTree::GetReadEntry(). ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 83",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:29591,Security,hash,hash,29591,"nst char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:64641,Security,access,access,64641,"st must be either TFileInfo or TObjString or TUrl . The function return 1 if successful, 0 otherwise. ; Definition at line 566 of file TChain.cxx. ◆ AddFriend() [1/3]. TFriendElement * TChain::AddFriend ; (; const char * ; chain, . const char * ; dummy = """" . ). overridevirtual . Add a TFriendElement to the list of friends of this chain. ; A TChain has a list of friends similar to a tree (see TTree::AddFriend). You can add a friend to a chain with the TChain::AddFriend method, and you can retrieve the list of friends with TChain::GetListOfFriends. This example has four chains each has 20 ROOT trees from 20 ROOT files. TChain ch(""t""); // a chain with 20 trees from 20 files; TChain ch1(""t1"");; TChain ch2(""t2"");; TChain ch3(""t3"");; Now we can add the friends to the first chain. ch.AddFriend(""t1""); ch.AddFriend(""t2""); ch.AddFriend(""t3""); . The parameter is the name of friend chain (the name of a chain is always the name of the tree from which it was created). The original chain has access to all variable in its friends. We can use the TChain::Draw method as if the values in the friends were in the original chain. To specify the chain to use in the Draw method, use the syntax: <chainname>.<branchname>.<varname>; If the variable name is enough to uniquely identify the variable, you can leave out the chain and/or branch name. For example, this generates a 3-d scatter plot of variable ""var"" in the TChain ch versus variable v1 in TChain t1 versus variable v2 in TChain t2. ch.Draw(""var:t1.v1:t2.v2"");; When a TChain::Draw is executed, an automatic call to TTree::AddFriend connects the trees in the chain. When a chain is deleted, its friend elements are also deleted.; The number of entries in the friend must be equal or greater to the number of entries of the original chain. If the friend has fewer entries a warning is given and the resulting histogram will have missing entries. For additional information see TTree::AddFriend. ; Reimplemented from TTree.; Definition at line 656",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:101147,Security,access,access,101147,"ntryList is owned by the TChain and gets deleted when the chain is deleted. This TEntryList is returned by GetEntryList() function, and after GetEntryList() function is called, the TEntryList is not owned by the chain any more and will not be deleted with it. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 2868 of file TChain.cxx. ◆ SetMakeClass(). void TChain::SetMakeClass ; (; Int_t ; make). inlineoverridevirtual . Set all the branches in this TTree to be in decomposed object mode (also known as MakeClass mode). ; For MakeClass mode 0, the TTree expects the address where the data is stored to be set by either the user or the TTree to the address of a full object through the top level branch. For MakeClass mode 1, this address is expected to point to a numerical type or C-style array (variable or not) of numerical type, representing the primitive data members. The function's primary purpose is to allow the user to access the data directly with numerical type variable rather than having to have the original set of classes (or a reproduction thereof). ; Reimplemented from TTree.; Definition at line 166 of file TChain.h. ◆ SetName(). void TChain::SetName ; (; const char * ; name). overridevirtual . Change the name of this TChain. ; Reimplemented from TNamed.; Reimplemented in TProofChain.; Definition at line 2943 of file TChain.cxx. ◆ SetPacketSize(). void TChain::SetPacketSize ; (; Int_t ; size = 100). virtual . Set number of entries per packet for parallel root. ; Definition at line 2965 of file TChain.cxx. ◆ SetProof(). void TChain::SetProof ; (; bool ; on = true, . bool ; refresh = false, . bool ; gettreeheader = false . ). virtual . Enable/Disable PROOF processing on the current default Proof (gProof). ; ""Draw"" and ""Processed"" commands will be handled by PROOF. The refresh and gettreeheader are meaningful only if on == true. If refresh is true the underlying fProofChain (chain proxy) is always rebuilt (even if already existing). If g",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:84882,Testability,test,test,84882," Long64_t TChain::Merge ; (; TCollection * ; list, . TFileMergeInfo * ; info . ). overridevirtual . Merge all chains in the collection. (NOT IMPLEMENTED) ; Reimplemented from TTree.; Definition at line 1899 of file TChain.cxx. ◆ Merge() [4/4]. Long64_t TChain::Merge ; (; TFile * ; file, . Int_t ; basketsize, . Option_t * ; option = """" . ). virtual . Merge all the entries in the chain into a new tree in the current file. ; Note: The ""file"" parameter is not the file where the new tree will be inserted. The new tree is inserted into gDirectory, which is usually the most recently opened file, or the directory most recently cd()'d to.; If option = ""C"" is given, the compression level for all branches in the new Tree is set to the file compression level. By default, the compression level of all branches is the original compression level in the old trees.; If basketsize > 1000, the basket size for all branches of the new tree will be set to basketsize.; Example using the file generated in $ROOTSYS/test/Event merge two copies of Event.root gSystem.Load(""libEvent"");; TChain ch(""T"");; ch.Add(""Event1.root"");; ch.Add(""Event2.root"");; ch.Merge(""all.root"");; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:555; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; If the chain is expecting the input tree inside a directory, this directory is NOT created by this routine.; So if you do: TChain ch(""mydir/mytree"");; ch.Merge(""newfile.root"");; The resulting file will not have subdirectories. In order to preserve the directory structure do the following instead: TFile* file = TFile::Open(""newfile.root"", ""RECREATE"");; file->mkdir(""mydir"")->cd();; ch.Merge(file, 0);; If 'option' contains the word 'fast' the merge will be done without unzipping or unstreaming the baskets (i.e., a direct copy of the raw bytes on disk).; When 'fast' is specified, 'option' can also contains a sorting order for the ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:16324,Usability,undo,undo,16324,"e, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=1);  Create a new TTree BranchObject. ;  ; virtual TBranch * BranchRef ();  Build the optional branch supporting the TRefTable. ;  ; virtual TBranch * Bronch (const char *name, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=99);  Create a new TTree BranchElement. ;  ; void Browse (TBrowser *) override;  Browse content of the TTree. ;  ; virtual Int_t BuildIndex (const char *majorname, const char *minorname=""0"");  Build a Tree Index (default is TTreeIndex). ;  ; TStreamerInfo * BuildStreamerInfo (TClass *cl, void *pointer=nullptr, bool canOptimize=true);  Build StreamerInfo for class cl. ;  ; virtual TFile * ChangeFile (TFile *file);  Called by TTree::Fill() when file has reached its maximum fgMaxTreeSize. ;  ; virtual TTree * CloneTree (Long64_t nentries=-1, Option_t *option="""");  Create a clone of this tree and copy nentries. ;  ; virtual void CopyAddresses (TTree *, bool undo=false);  Set branch addresses of passed tree equal to ours. ;  ; virtual Long64_t CopyEntries (TTree *tree, Long64_t nentries=-1, Option_t *option="""", bool needCopyAddresses=false);  Copy nentries from given tree to this tree. ;  ; virtual TTree * CopyTree (const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Copy a tree with selection. ;  ; virtual TBasket * CreateBasket (TBranch *);  Create a basket for this tree and given branch. ;  ; Int_t Debug () const;  ; void Delete (Option_t *option="""") override;  Delete this tree from memory or/and disk. ;  ; void Draw (Option_t *opt) override;  Default Draw method for all objects. ;  ; virtual void DropBaskets ();  Remove some baskets from memory. ;  ; virtual Int_t DropBranchFromCache (const char *bname, bool subbranches=false);  Remove the branch with name 'bname' from the Tree cache. ;  ; virtual Int_t DropBranchFromCache (TBranch *branch, bool subbranches=false);  Remove the branch b from the T",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:24084,Usability,simpl,simply,24084,"aving filled some entries in a Tree. ;  ; TPrincipal * Principal (const char *varexp="""", const char *selection="""", Option_t *option=""np"", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Interface to the Principal Components Analysis class. ;  ; void Print (Option_t *option="""") const override;  Print a summary of the tree contents. ;  ; virtual void PrintCacheStats (Option_t *option="""") const;  Print statistics about the TreeCache for this tree. ;  ; virtual Long64_t Project (const char *hname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Make a projection of a tree using selections. ;  ; virtual TSQLResult * Query (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over entries and return a TSQLResult object containing entries following selection. ;  ; virtual Long64_t ReadFile (const char *filename, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from filename. ;  ; virtual Long64_t ReadStream (std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be calle",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:24246,Usability,simpl,simply,24246,"tries, Long64_t firstentry=0);  Interface to the Principal Components Analysis class. ;  ; void Print (Option_t *option="""") const override;  Print a summary of the tree contents. ;  ; virtual void PrintCacheStats (Option_t *option="""") const;  Print statistics about the TreeCache for this tree. ;  ; virtual Long64_t Project (const char *hname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Make a projection of a tree using selections. ;  ; virtual TSQLResult * Query (const char *varexp="""", const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Loop over entries and return a TSQLResult object containing entries following selection. ;  ; virtual Long64_t ReadFile (const char *filename, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from filename. ;  ; virtual Long64_t ReadStream (std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ');  Create or simply read branches from an input stream. ;  ; void RecursiveRemove (TObject *obj) override;  Make sure that obj (which is being deleted or will soon be) is no longer referenced by this TTree. ;  ; virtual void Refresh ();  Refresh contents of this tree and its branches from the current status on disk. ;  ; virtual void RegisterExternalFriend (TFriendElement *);  Record a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:25828,Usability,learn,learning,25828,"cord a TFriendElement that we need to warn when the chain switches to a new file (typically this is because this chain is a friend of another TChain) ;  ; virtual void RemoveExternalFriend (TFriendElement *);  Removes external friend. ;  ; virtual bool SetAlias (const char *aliasName, const char *aliasFormula);  Set a tree variable alias. ;  ; virtual void SetAutoFlush (Long64_t autof=-30000000);  This function may be called at the start of a program to change the default value for fAutoFlush. ;  ; virtual void SetAutoSave (Long64_t autos=-300000000);  In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ;  ; virtual void SetBasketSize (const char *bname, Int_t buffsize=16000);  Set a branch's basket size. ;  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T **add, TBranch **ptr=nullptr);  ; template<class T > ; Int_t SetBranchAddress (const char *bname, T *add, TBranch **ptr=nullptr);  ; virtual Int_t SetCacheEntryRange (Long64_t first, Long64_t last);  interface to TTreeCache to set the cache entry range ;  ; virtual void SetCacheLearnEntries (Int_t n=10);  Interface to TTreeCache to set the number of entries for the learning phase. ;  ; virtual void SetChainOffset (Long64_t offset=0);  ; virtual void SetCircular (Long64_t maxEntries);  Enable/Disable circularity for this tree. ;  ; virtual void SetClusterPrefetch (bool enabled);  ; virtual void SetDebug (Int_t level=1, Long64_t min=0, Long64_t max=9999999);  Set the debug level and the debug range. ;  ; virtual void SetDefaultEntryOffsetLen (Int_t newdefault, bool updateExisting=false);  Update the default value for the branch's fEntryOffsetLen. ;  ; virtual Long64_t SetEntries (Long64_t n=-1);  Change number of entries in the tree. ;  ; virtual void SetEstimate (Long64_t nentries=1000000);  Set number of entries to estimate variable limits. ;  ; virtual void SetFileNumber (Int_t number=0);  Set fFileNumber to number. ;  ; virtual void Set",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:27962,Usability,learn,learning,27962,"SetName (const char *name) override;  Change the name of this tree. ;  ; virtual void SetNotify (TObject *obj);  Sets the address of the object to be notified when the tree is loaded. ;  ; virtual void SetObject (const char *name, const char *title);  Change the name and title of this tree. ;  ; virtual void SetParallelUnzip (bool opt=true, Float_t RelSize=-1);  Enable or disable parallel unzipping of Tree buffers. ;  ; virtual void SetPerfStats (TVirtualPerfStats *perf);  Set perf stats. ;  ; virtual void SetScanField (Int_t n=50);  ; void SetTargetMemoryRatio (Float_t ratio);  ; virtual void SetTimerInterval (Int_t msec=333);  ; virtual void SetTreeIndex (TVirtualIndex *index);  The current TreeIndex is replaced by the new index. ;  ; virtual void SetUpdate (Int_t freq=0);  ; virtual void Show (Long64_t entry=-1, Int_t lenmax=20);  Print values of all active leaves for entry. ;  ; virtual void StartViewer ();  Start the TTreeViewer on this tree. ;  ; virtual Int_t StopCacheLearningPhase ();  Stop the cache learning phase. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t UnbinnedFit (const char *funcname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0);  Unbinned fit of one or more variable(s) from a tree. ;  ; void UseCurrentStyle () override;  Replace current attributes by current style. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write this object to the current directory. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:69598,Usability,simpl,simple,69598,"ut & ; selection, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Draw expression varexp for selected entries. ; Returns -1 in case of error or number of selected events in case of success.; This function accepts TCut objects as arguments. Useful to use the string operator +, example: ntuple.Draw(""x"",cut1+cut2+cut3);. Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 793 of file TChain.cxx. ◆ Draw() [3/3]. void TChain::Draw ; (; Option_t * ; option). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 90 of file TChain.h. ◆ Fill(). Int_t TChain::Fill ; (; ). inlineoverridevirtual . Fill all branches. ; This function loops on all the branches of this tree. For each branch, it copies to the branch buffer (basket) the current values of the leaves data types. If a leaf is a simple data type, a simple conversion to a machine independent format has to be done.; This machine independent version of the data is copied into a basket (each branch has its own basket). When a basket is full (32k worth of data by default), it is then optionally compressed and written to disk (this operation is also called committing or 'flushing' the basket). The committed baskets are then immediately removed from memory.; The function returns the number of bytes committed to the individual branches.; If a write error occurs, the number of bytes returned is -1.; If no data are written, because, e.g., the branch is disabled, the number of bytes returned is 0.; The baskets are flushed and the Tree header saved at regular intervals; At regular intervals, when the amount of data written so far is greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk. This makes future reading faster as it guarantees that baskets belonging to nearby entries will be on the same disk region. When the first call to ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTChain.html:69618,Usability,simpl,simple,69618,"ut & ; selection, . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). overridevirtual . Draw expression varexp for selected entries. ; Returns -1 in case of error or number of selected events in case of success.; This function accepts TCut objects as arguments. Useful to use the string operator +, example: ntuple.Draw(""x"",cut1+cut2+cut3);. Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 793 of file TChain.cxx. ◆ Draw() [3/3]. void TChain::Draw ; (; Option_t * ; option). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Reimplemented in TProofChain.; Definition at line 90 of file TChain.h. ◆ Fill(). Int_t TChain::Fill ; (; ). inlineoverridevirtual . Fill all branches. ; This function loops on all the branches of this tree. For each branch, it copies to the branch buffer (basket) the current values of the leaves data types. If a leaf is a simple data type, a simple conversion to a machine independent format has to be done.; This machine independent version of the data is copied into a basket (each branch has its own basket). When a basket is full (32k worth of data by default), it is then optionally compressed and written to disk (this operation is also called committing or 'flushing' the basket). The committed baskets are then immediately removed from memory.; The function returns the number of bytes committed to the individual branches.; If a write error occurs, the number of bytes returned is -1.; If no data are written, because, e.g., the branch is disabled, the number of bytes returned is 0.; The baskets are flushed and the Tree header saved at regular intervals; At regular intervals, when the amount of data written so far is greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk. This makes future reading faster as it guarantees that baskets belonging to nearby entries will be on the same disk region. When the first call to ",MatchSource.WIKI,doc/v632/classTChain.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTChain.html
https://root.cern/doc/v632/classTClass.html:28598,Availability,error,error,28598," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:28687,Availability,error,error,28687,"ave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:28842,Availability,error,error,28842,"hether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:29139,Availability,error,error,29139,"ct. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:32851,Availability,error,error,32851,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void AddClass (TClass *cl);  static: Add a class to the list and map of classes. ;  ; static void AddClassToDeclIdMap (TDictionary::DeclId_t id, TClass *cl);  static: Add a TClass* to the map of classes. ;  ; static Bool_t AddRule (const char *rule);  Add a schema evolution customization rule. ;",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:40632,Availability,avail,available,40632,"ed in through using declarations) of a class. ;  ; TVirtualStreamerInfo * DetermineCurrentStreamerInfo ();  Determine and set pointer to current TVirtualStreamerInfo. ;  ; TMethod * FindClassOrBaseMethodWithId (DeclId_t faddr);  Find a method with decl id in this class or its bases. ;  ; Int_t GetBaseClassOffsetRecurse (const TClass *toBase);  Return data member offset to the base class ""cl"". ;  ; TMethod * GetClassMethod (Longptr_t faddr);  Look for a method in this class that has the interface function address faddr. ;  ; TListOfFunctions * GetMethodList ();  Return (create an empty one if needed) the list of functions. ;  ; TVirtualStreamerInfo * GetStreamerInfoImpl (Int_t version, Bool_t silent) const;  ; void Init (const char *name, Version_t cversion, const std::type_info *info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il, ClassInfo_t *classInfo, Bool_t silent);  Initialize a TClass object. ;  ; bool IsClassStructOrUnion () const;  ; void LoadClassInfo () const;  Try to load the ClassInfo if available. ;  ; void MoveAddressInRepository (const char *where, void *oldadd, void *newadd, const TClass *what) const;  ; TClass & operator= (const TClass &)=delete;  ; void RegisterAddressInRepository (const char *where, void *location, const TClass *what) const;  ; void SetClassSize (Int_t sizof);  ; void SetClassVersion (Version_t version);  Private function. ;  ; void SetRuntimeProperties ();  Internal routine to set calculate the class properties that can only be known at run-time, for example whether the Hash member function and the destructor are consistent. ;  ; void SetStreamerImpl ();  Internal routine to set fStreamerImpl based on the value of fStreamerType. ;  ; void UnregisterAddressInRepository (const char *where, void *location, const TClass *what) const;  . Static Private Member Functions; static void ConvStreamerInstrumented (const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class);  Case of instrumented",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:44864,Availability,avail,available,44864,"tle;  ; ConvSIMap_t fConversionStreamerInfo;  ; ClassConvStreamerFunc_t fConvStreamerFunc;  ; std::atomic< TVirtualStreamerInfo * > fCurrentInfo;  Current 'state' of the class (Emulated,Interpreted,Loaded) ;  ; std::atomic< TListOfDataMembers * > fData;  ; Short_t fDeclFileLine;  ; const char * fDeclFileName;  ; ROOT::DelFunc_t fDelete;  ; ROOT::DelArrFunc_t fDeleteArray;  ; ROOT::DesFunc_t fDestructor;  ; ROOT::DirAutoAdd_t fDirAutoAdd;  ; std::atomic< TListOfEnums * > fEnums;  ; TListOfFunctionTemplates * fFuncTemplate;  ; IsAGlobalFunc_t fGlobalIsA;  pointer to the class's IsA proxy. ;  ; Bool_t fHasCustomStreamerMember: 1;  The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ;  ; std::atomic< Bool_t > fHasRootPcmInfo;  C++ Property of the class (is abstract, has virtual table, etc.) ;  ; Short_t fImplFileLine;  ; const char * fImplFileName;  ; UInt_t fInstanceCount;  ; TVirtualIsAProxy * fIsA;  ; std::atomic< TMethodCall * > fIsAMethod;  ; std::atomic< Bool_t > fIsOffsetStreamerSet;  Indicates whether the ClassInfo is supposed to be available. ;  ; Bool_t fIsSyntheticPair: 1;  Indicates whether this class can be split or not. Values are -1, 0, 1, 2. ;  ; std::atomic< TVirtualStreamerInfo * > fLastReadInfo;  cached current streamer info. ;  ; ROOT::MergeFunc_t fMerge;  saved info to call a IsA member function ;  ; std::atomic< TListOfFunctions * > fMethod;  ; ROOT::NewFunc_t fNew;  ; ROOT::NewArrFunc_t fNewArray;  ; RepoCont_t fObjectVersionRepository;  ; Longptr_t fOffsetStreamer;  Properties that can only be evaluated at run-time. ;  ; UInt_t fOnHeap;  ; TVirtualMutex * fOVRMutex = nullptr;  ; std::atomic< TClass ** > fPersistentRef;  ; std::atomic< Long_t > fProperty;  ; TList * fRealData;  ; TVirtualRefProxy * fRefProxy;  cached streamer info used in the last read. ;  ; ROOT::ResetAfterMergeFunc_t fResetAfterMerge;  ; std::atomic< UChar_t > fRuntimeProperties;  ; ROOT::Detail::TSchemaRuleSe",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:65800,Availability,down,down,65800,"Using the information in the object dictionary each data member is interpreted. If a data member is a pointer, the pointer value is printed 'obj' is assume to point to an object of the class describe by this TClass; The following output is the Dump of a TArrow object: fAngle 0 Arrow opening angle (degrees); fArrowSize 0.2 Arrow Size; fOption.*fData; fX1 0.1 X of 1st point; fY1 0.15 Y of 1st point; fX2 0.67 X of 2nd point; fY2 0.83 Y of 2nd point; fUniqueID 0 object unique identifier; fBits 50331648 bit field status word; fLineColor 1 line color; fLineStyle 1 line style; fLineWidth 1 line width; fFillColor 19 fill area color; fFillStyle 1001 fill area style; If noAddr is true, printout of all pointer values is skipped. ; Definition at line 2535 of file TClass.cxx. ◆ DynamicCast() [1/2]. const void * TClass::DynamicCast ; (; const TClass * ; cl, . const void * ; obj, . Bool_t ; up = kTRUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 4937 of file TClass.cxx. ◆ DynamicCast() [2/2]. void * TClass::DynamicCast ; (; const TClass * ; cl, . void * ; obj, . Bool_t ; up = kTRUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 4915 of file TClass.cxx. ◆ EscapeChars(). char * TClass::EscapeChars ; (; const char * ; text); const. Introduce an escape character (@) in front of a special chars. ; You need to use the result immediately before it is being overwritten. ; Definition at line 2568 of file TClass.cxx. ◆ FindClassOrBaseMethodWithId(). TMethod * TClass::FindClassOrBaseMethodWithId ; (; DeclId_t ; faddr). private . Find a method with decl ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:65945,Availability,down,down,65945,"ember is a pointer, the pointer value is printed 'obj' is assume to point to an object of the class describe by this TClass; The following output is the Dump of a TArrow object: fAngle 0 Arrow opening angle (degrees); fArrowSize 0.2 Arrow Size; fOption.*fData; fX1 0.1 X of 1st point; fY1 0.15 Y of 1st point; fX2 0.67 X of 2nd point; fY2 0.83 Y of 2nd point; fUniqueID 0 object unique identifier; fBits 50331648 bit field status word; fLineColor 1 line color; fLineStyle 1 line style; fLineWidth 1 line width; fFillColor 19 fill area color; fFillStyle 1001 fill area style; If noAddr is true, printout of all pointer values is skipped. ; Definition at line 2535 of file TClass.cxx. ◆ DynamicCast() [1/2]. const void * TClass::DynamicCast ; (; const TClass * ; cl, . const void * ; obj, . Bool_t ; up = kTRUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 4937 of file TClass.cxx. ◆ DynamicCast() [2/2]. void * TClass::DynamicCast ; (; const TClass * ; cl, . void * ; obj, . Bool_t ; up = kTRUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 4915 of file TClass.cxx. ◆ EscapeChars(). char * TClass::EscapeChars ; (; const char * ; text); const. Introduce an escape character (@) in front of a special chars. ; You need to use the result immediately before it is being overwritten. ; Definition at line 2568 of file TClass.cxx. ◆ FindClassOrBaseMethodWithId(). TMethod * TClass::FindClassOrBaseMethodWithId ; (; DeclId_t ; faddr). private . Find a method with decl id in this class or its bases. ; Definition at line 4440 of file TClass.cxx. ◆ FindConversi",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:66209,Availability,down,down,66209," X of 2nd point; fY2 0.83 Y of 2nd point; fUniqueID 0 object unique identifier; fBits 50331648 bit field status word; fLineColor 1 line color; fLineStyle 1 line style; fLineWidth 1 line width; fFillColor 19 fill area color; fFillStyle 1001 fill area style; If noAddr is true, printout of all pointer values is skipped. ; Definition at line 2535 of file TClass.cxx. ◆ DynamicCast() [1/2]. const void * TClass::DynamicCast ; (; const TClass * ; cl, . const void * ; obj, . Bool_t ; up = kTRUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 4937 of file TClass.cxx. ◆ DynamicCast() [2/2]. void * TClass::DynamicCast ; (; const TClass * ; cl, . void * ; obj, . Bool_t ; up = kTRUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 4915 of file TClass.cxx. ◆ EscapeChars(). char * TClass::EscapeChars ; (; const char * ; text); const. Introduce an escape character (@) in front of a special chars. ; You need to use the result immediately before it is being overwritten. ; Definition at line 2568 of file TClass.cxx. ◆ FindClassOrBaseMethodWithId(). TMethod * TClass::FindClassOrBaseMethodWithId ; (; DeclId_t ; faddr). private . Find a method with decl id in this class or its bases. ; Definition at line 4440 of file TClass.cxx. ◆ FindConversionStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const char * ; onfile_classname, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ; Definition at line 7193 of file TClass.c",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:66354,Availability,down,down,66354,"648 bit field status word; fLineColor 1 line color; fLineStyle 1 line style; fLineWidth 1 line width; fFillColor 19 fill area color; fFillStyle 1001 fill area style; If noAddr is true, printout of all pointer values is skipped. ; Definition at line 2535 of file TClass.cxx. ◆ DynamicCast() [1/2]. const void * TClass::DynamicCast ; (; const TClass * ; cl, . const void * ; obj, . Bool_t ; up = kTRUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 4937 of file TClass.cxx. ◆ DynamicCast() [2/2]. void * TClass::DynamicCast ; (; const TClass * ; cl, . void * ; obj, . Bool_t ; up = kTRUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 4915 of file TClass.cxx. ◆ EscapeChars(). char * TClass::EscapeChars ; (; const char * ; text); const. Introduce an escape character (@) in front of a special chars. ; You need to use the result immediately before it is being overwritten. ; Definition at line 2568 of file TClass.cxx. ◆ FindClassOrBaseMethodWithId(). TMethod * TClass::FindClassOrBaseMethodWithId ; (; DeclId_t ; faddr). private . Find a method with decl id in this class or its bases. ; Definition at line 4440 of file TClass.cxx. ◆ FindConversionStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const char * ; onfile_classname, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ; Definition at line 7193 of file TClass.cxx. ◆ FindConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindConversionStre",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:95426,Availability,avail,available,95426,"ass described by this TClass has a default constructor (public or not), use cl->GetProperty() & kClassHasDefaultCtor; kClassHasDefaultCtor@ kClassHasDefaultCtorDefinition TDictionary.h:140; To know if the class described by this TClass has a public default constructor use: gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; gInterpreter#define gInterpreterDefinition TInterpreter.h:573. Definition at line 7393 of file TClass.cxx. ◆ HasDictionary(). Bool_t TClass::HasDictionary ; (; ); const. Check whether a class has a dictionary or not. ; This is equivalent to ask if a class is coming from a bootstrapping procedure initiated during the loading of a library. ; Definition at line 3906 of file TClass.cxx. ◆ HasDictionarySelection(). Bool_t TClass::HasDictionarySelection ; (; const char * ; clname). static . Check whether a class has a dictionary or ROOT can load one. ; This is equivalent to ask HasDictionary() or whether a library is known where it can be loaded from, or whether a Dictionary function is available because the class's dictionary library was already loaded. ; Definition at line 3917 of file TClass.cxx. ◆ HasInterpreterInfo(). Bool_t TClass::HasInterpreterInfo ; (; ); const. inline . Definition at line 410 of file TClass.h. ◆ HasInterpreterInfoInMemory(). Bool_t TClass::HasInterpreterInfoInMemory ; (; ); const. inline . Definition at line 409 of file TClass.h. ◆ HasLocalHashMember(). Bool_t TClass::HasLocalHashMember ; (; ); const. Returns true if this class has an definition and/or overload of the member function Hash. ; For example to test if the class overload TObject::Hash use if (cl->IsTObject() && cl->HasLocalHashMember()). Definition at line 7421 of file TClass.cxx. ◆ HasNoInfoOrEmuOrFwdDeclaredDecl(). Bool_t TClass::HasNoInfoOrEmuOrFwdDeclaredDecl ; (; const char * ; name). staticprivate . Definition at line 3398 of file TClass.cxx. ◆ IgnoreTObjectStreamer(). void TClass::IgnoreTObjectStreamer ; (; Bool_t ; doIgnore = kTRUE). Wh",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:103212,Availability,avail,available,103212,"e . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' from the list of generator. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5801 of file TClass.cxx. ◆ LoadClassDefault(). TClass * TClass::LoadClassDefault ; (; const char * ; requestedname, . Bool_t ; silent . ). staticprivate . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' from the TClassTable or the autoloader. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5771 of file TClass.cxx. ◆ LoadClassInfo(). void TClass::LoadClassInfo ; (; ); const. private . Try to load the ClassInfo if available. ; This function may require parsing the header file and/or loading data from the clang pcm. If further calls to this function cannot affect the value of fClassInfo, fCanLoadClassInfo is set to false. ; Definition at line 5824 of file TClass.cxx. ◆ ls(). void TClass::ls ; (; Option_t * ; options = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). If options contains 'streamerinfo', run ls on the list of streamerInfos and the list of conversion streamerInfos. ; Reimplemented from TObject.; Definition at line 4258 of file TClass.cxx. ◆ MakeCustomMenuList(). void TClass::MakeCustomMenuList ; (; ). Makes a customizable version of the popup menu list, i.e. ; makes a list of TClassMenuItem objects of methods accessible by context menu. The standard (and different) way consists in having just one element in this list, corresponding to the whole standard list. Once the customizable ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:111707,Availability,error,error,111707,"file TClass.cxx. ◆ ReadBuffer() [2/2]. Int_t TClass::ReadBuffer ; (; TBuffer & ; b, . void * ; pointer, . Int_t ; version, . UInt_t ; start, . UInt_t ; count . ). Function called by the Streamer functions to deserialize information from buffer b into object at p. ; This function assumes that the class version and the byte count information have been read.; version is the version number of the class; start is the starting position in the buffer b; count is the number of bytes for this object in the buffer . Definition at line 6758 of file TClass.cxx. ◆ ReadRules() [1/2]. Int_t TClass::ReadRules ; (; ). static . Read the class.rules files from the default location:. ; $ROOTSYS/etc/class.rules (or ROOTETCDIR/class.rules) ; Definition at line 1820 of file TClass.cxx. ◆ ReadRules() [2/2]. Int_t TClass::ReadRules ; (; const char * ; filename). static . Read a class.rules file which contains one rule per line with comment starting with a #. . Returns the number of rules loaded.; Returns -1 in case of error. . Definition at line 1844 of file TClass.cxx. ◆ RegisterAddressInRepository(). void TClass::RegisterAddressInRepository ; (; const char * ; where, . void * ; location, . const TClass * ; what . ); const. private . Definition at line 290 of file TClass.cxx. ◆ RegisterStreamerInfo(). void TClass::RegisterStreamerInfo ; (; TVirtualStreamerInfo * ; info). Register the StreamerInfo in the given slot, change the State of the TClass as appropriate. ; Definition at line 7296 of file TClass.cxx. ◆ RemoveClass(). void TClass::RemoveClass ; (; TClass * ; cl). static . static: Remove a class from the list and map of classes ; Definition at line 520 of file TClass.cxx. ◆ RemoveClassDeclId(). void TClass::RemoveClassDeclId ; (; TDictionary::DeclId_t ; id). static . Definition at line 536 of file TClass.cxx. ◆ RemoveStreamerInfo(). void TClass::RemoveStreamerInfo ; (; Int_t ; slot). Remove and delete the StreamerInfo in the given slot. ; Update the slot accordingly. ; Definition at li",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:129016,Availability,avail,available,129016,"merMember. private . The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ; Definition at line 253 of file TClass.h. ◆ fHasRootPcmInfo. std::atomic<Bool_t> TClass::fHasRootPcmInfo. private . C++ Property of the class (is abstract, has virtual table, etc.) ; Definition at line 259 of file TClass.h. ◆ fImplFileLine. Short_t TClass::fImplFileLine. private . Definition at line 216 of file TClass.h. ◆ fImplFileName. const char* TClass::fImplFileName. private . Definition at line 214 of file TClass.h. ◆ fInstanceCount. UInt_t TClass::fInstanceCount. private . Definition at line 217 of file TClass.h. ◆ fIsA. TVirtualIsAProxy* TClass::fIsA. private . Definition at line 229 of file TClass.h. ◆ fIsAMethod. std::atomic<TMethodCall*> TClass::fIsAMethod. mutableprivate . Definition at line 231 of file TClass.h. ◆ fIsOffsetStreamerSet. std::atomic<Bool_t> TClass::fIsOffsetStreamerSet. mutableprivate . Indicates whether the ClassInfo is supposed to be available. ; Definition at line 261 of file TClass.h. ◆ fIsSyntheticPair. Bool_t TClass::fIsSyntheticPair. private . Indicates whether this class can be split or not. Values are -1, 0, 1, 2. ; Indicates whether this class represents a pair and was not created from a dictionary nor interpreter info but has compiler compatible offset and size (and all the info is in the StreamerInfo per se) ; Definition at line 250 of file TClass.h. ◆ fLastReadInfo. std::atomic<TVirtualStreamerInfo*> TClass::fLastReadInfo. mutableprivate . cached current streamer info. ; Definition at line 279 of file TClass.h. ◆ fMerge. ROOT::MergeFunc_t TClass::fMerge. private . saved info to call a IsA member function ; Definition at line 233 of file TClass.h. ◆ fMethod. std::atomic<TListOfFunctions*> TClass::fMethod. private . Definition at line 207 of file TClass.h. ◆ fNew. ROOT::NewFunc_t TClass::fNew. private . Definition at line 235 of file TClass.h. ◆ fNewArray. ROOT::NewArrFunc_t TClass::fNe",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:23478,Deployability,install,installs,23478,";  Create the collection proxy object (and the streamer object) from using the information in the TCollectionProxyInfo. ;  ; void SetContextMenuTitle (const char *title);  Change (i.e. set) the title of the TNamed. ;  ; void SetConvStreamerFunc (ClassConvStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom conversion streamer. ;  ; void SetCurrentStreamerInfo (TVirtualStreamerInfo *info);  Set pointer to current TVirtualStreamerInfo. ;  ; void SetDeclFile (const char *name, Short_t line);  ; void SetDelete (ROOT::DelFunc_t deleteFunc);  Install a new wrapper around 'delete'. ;  ; void SetDeleteArray (ROOT::DelArrFunc_t deleteArrayFunc);  Install a new wrapper around 'delete []'. ;  ; void SetDestructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ;  ; void SetMerge (ROOT::MergeFunc_t mergeFunc);  Install a new wrapper around 'Merge'. ;  ; void SetNew (ROOT::NewFunc_t newFunc);  Install a new wrapper around 'new'. ;  ; void SetNewArray (ROOT::NewArrFunc_t newArrayFunc);  Install a new wrapper around 'new []'. ;  ; void SetResetAfterMerge (ROOT::ResetAfterMergeFunc_t resetFunc);  Install a new wrapper around 'ResetAfterMerge'. ;  ; void SetStreamerFunc (ClassStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom streamer. ;  ; TVirtualStreamerInfo * SetStreamerInfo (Int_t version, const char *info="""");  Info is a string describing the names and types of attributes written by the class Streamer function. ;  ; void SetUnloaded ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:38204,Deployability,update,updated,38204,"jectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; TVirtualStreamerInfo * FindStreamerInfo (TObjArray *arr, UInt_t checksum) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; void GetMissingDictionariesForBaseClasses (TCollection &result, TCollection &visited, bool recurse);  Verify the base classes always. ;  ; void GetMissingDictionariesForMembers (TCollection &result, TCollection &visited, bool recurse);  Verify the Data Members. ;  ; void GetMissingDictionariesForPairElements (TCollection &result, TCollection &visited, bool recurse);  ; void GetMissingDictionariesWithRecursionCheck (TCollection &result, TCollection &visited, bool recurse);  From the second level of recursion onwards it is different state check. ;  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Types; enum  { kLoading = kReservedLoading; , kUnloading = kReservedLoading; };  ; typedef std::atomic< std::map< std::string, TObjArray * > * > ConvSIMap_t;  Persistent address of pointer to this TClass object and its successors. ;  ; enum class  ERuntimeProperties : UChar_t { kNotInitialized = 0; , kSet = (1ULL << ( 0 )); , kConsistentHash = (1ULL << ( 1 )); };  Indicates whether GetClassVersion has been called. More...;  ; enum  EStreamerType { ;   kDefault =0; , kEmulatedStreamer =1; , kTObject =2; , kInstrumented =4; , ;   kForeign =8; , kExternal =16. };  ; typedef std::multimap< void *, Version_t > RepoCont_t;  ; typedef void(* StreamerImpl_t) (const TClass *pThis, void *obj, TBuffer &b, const TClass *onfile_class);  Schema evolution rules. ;  . Private Member Functions;",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:55850,Deployability,update,updated,55850,"char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t targetDefinition TGWin32VirtualXProxy.cxx:247; For example to set HepMC::GenVertex::m_event to not owned the object it is pointing to: HepMC::GenVertex m_event attributes=NotOwner; Semantic of the tags:; type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; sourceClass : the name of the class as it is on the rule file; targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; source : the types and names of the data members from the class on file that are needed, the list is separated by semi-colons ';'; oldtype: in the short form only, indicates the type on disk of the data member.; target : the names of the data members updated by this rule, the list is separated by semi-colons ';'; attributes : list of possible qualifiers among: Owner, NotOwner; version : list of the version of the class layout that this rule applies to. The syntax can be [1,4,5] or [2-] or [1-3] or [-3]; checksum : comma delimited list of the checksums of the class layout that this rule applies to.; code={...} : code to be executed for the rule or name of the function implementing it. . Definition at line 1890 of file TClass.cxx. ◆ AdoptMemberStreamer(). void TClass::AdoptMemberStreamer ; (; const char * ; name, . TMemberStreamer * ; strm . ). Adopt the TMemberStreamer pointer to by p and use it to Stream non basic member name. ; Definition at line 6703 of file TClass.cxx. ◆ AdoptReferenceProxy(). void TClass::AdoptReferenceProxy ; (; TVirtualRefProxy * ; proxy). Adopt the Reference proxy pointer to indicate that this class represents a reference. ; When a new proxy is adopted, the old one is deleted. ; Definition at line 6685 of file TClass.cxx. ◆ AdoptSchemaRules(). void TClass::AdoptSchemaRules ; (; ROOT::Deta",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:116628,Deployability,install,installs,116628,"Delete ; (; ROOT::DelFunc_t ; deleteFunc). Install a new wrapper around 'delete'. ; Definition at line 7001 of file TClass.cxx. ◆ SetDeleteArray(). void TClass::SetDeleteArray ; (; ROOT::DelArrFunc_t ; deleteArrayFunc). Install a new wrapper around 'delete []'. ; Definition at line 7009 of file TClass.cxx. ◆ SetDestructor(). void TClass::SetDestructor ; (; ROOT::DesFunc_t ; destructorFunc). Install a new wrapper around the destructor. ; Definition at line 7017 of file TClass.cxx. ◆ SetDirectoryAutoAdd(). void TClass::SetDirectoryAutoAdd ; (; ROOT::DirAutoAdd_t ; autoAddFunc). Install a new wrapper around the directory auto add function. ; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir) and should register 'obj' to the directory if dir is not null and unregister 'obj' from its current directory if dir is null ; Definition at line 7028 of file TClass.cxx. ◆ SetGlobalIsA(). void TClass::SetGlobalIsA ; (; IsAGlobalFunc_t ; func). This function installs a global IsA function for this class. ; The global IsA function will be used if there is no local IsA function (fIsA); A global IsA function has the signature:; TClass *func( TClass *cl, const void *obj);; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; 'cl' is a pointer to the TClass object that corresponds to the 'pointer type' used to retrieve the value 'obj'; For example with: TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::TNamedTNamed()Definition TNamed.h:36; mTMarker mDefinition textangle.C:8; and the global IsA function would be called with TObject::Class() as the first parameter and the exact numerical value in the pointer 'o'.; In other word, inside the global IsA function. it is safe to C-style cast the value of 'obj' into a pointer to the class described by 'cl'. ; Definition at line 6300 of file TClass.cxx",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:20026,Energy Efficiency,allocate,allocated,20026," this class is currently in the a process's memory. ;  ; Bool_t IsStartingWithTObject () const;  Returns true if this class inherits from TObject and if the start of the TObject parts is at the very beginning of the objects. ;  ; Bool_t IsSyntheticPair () const;  ; Bool_t IsTObject () const;  Return kTRUE is the class inherits from TObject. ;  ; Bool_t IsVersioned () const;  ; void ls (Option_t *opt="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void MakeCustomMenuList ();  Makes a customizable version of the popup menu list, i.e. ;  ; Bool_t MatchLegacyCheckSum (UInt_t checksum) const;  Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ;  ; void Move (void *arenaFrom, void *arenaTo) const;  Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ;  ; void * New (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; void * NewArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObject (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  ; ObjectPtr NewObject (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew)",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:20159,Energy Efficiency,allocate,allocated,20159," TObject and if the start of the TObject parts is at the very beginning of the objects. ;  ; Bool_t IsSyntheticPair () const;  ; Bool_t IsTObject () const;  Return kTRUE is the class inherits from TObject. ;  ; Bool_t IsVersioned () const;  ; void ls (Option_t *opt="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void MakeCustomMenuList ();  Makes a customizable version of the popup menu list, i.e. ;  ; Bool_t MatchLegacyCheckSum (UInt_t checksum) const;  Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ;  ; void Move (void *arenaFrom, void *arenaTo) const;  Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ;  ; void * New (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; void * NewArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObject (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  ; ObjectPtr NewObject (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; virtual void PostLoadCheck ();  Do the initialization that can ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:20302,Energy Efficiency,allocate,allocated,20302,"ct () const;  Return kTRUE is the class inherits from TObject. ;  ; Bool_t IsVersioned () const;  ; void ls (Option_t *opt="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void MakeCustomMenuList ();  Makes a customizable version of the popup menu list, i.e. ;  ; Bool_t MatchLegacyCheckSum (UInt_t checksum) const;  Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ;  ; void Move (void *arenaFrom, void *arenaTo) const;  Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ;  ; void * New (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; void * NewArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObject (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  ; ObjectPtr NewObject (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; virtual void PostLoadCheck ();  Do the initialization that can only be done after the CINT dictionary has been fully populated and can not be delayed efficiently. ;  ; Long_t Property () const override;  Re",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:20468,Energy Efficiency,allocate,allocated,20468,"tion lists the contents of a class on stdout. ;  ; void MakeCustomMenuList ();  Makes a customizable version of the popup menu list, i.e. ;  ; Bool_t MatchLegacyCheckSum (UInt_t checksum) const;  Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ;  ; void Move (void *arenaFrom, void *arenaTo) const;  Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ;  ; void * New (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; void * NewArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObject (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  ; ObjectPtr NewObject (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; virtual void PostLoadCheck ();  Do the initialization that can only be done after the CINT dictionary has been fully populated and can not be delayed efficiently. ;  ; Long_t Property () const override;  Returns the properties of the TClass as a bit field stored as a Long_t value. ;  ; Int_t ReadBuffer (TBuffer &b, void *pointer);  Function called by the Str",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:20697,Energy Efficiency,allocate,allocated,20697,"t;  Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ;  ; void Move (void *arenaFrom, void *arenaTo) const;  Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ;  ; void * New (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; void * NewArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObject (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  ; ObjectPtr NewObject (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; virtual void PostLoadCheck ();  Do the initialization that can only be done after the CINT dictionary has been fully populated and can not be delayed efficiently. ;  ; Long_t Property () const override;  Returns the properties of the TClass as a bit field stored as a Long_t value. ;  ; Int_t ReadBuffer (TBuffer &b, void *pointer);  Function called by the Streamer functions to deserialize information from buffer b into object at p. ;  ; Int_t ReadBuffer (TBuffer &b, void *pointer, Int_t version, UInt_t start, UInt_t count);  Function called by the ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:20849,Energy Efficiency,allocate,allocated,20849,"er the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ;  ; void * New (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; void * NewArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObject (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  ; ObjectPtr NewObject (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; virtual void PostLoadCheck ();  Do the initialization that can only be done after the CINT dictionary has been fully populated and can not be delayed efficiently. ;  ; Long_t Property () const override;  Returns the properties of the TClass as a bit field stored as a Long_t value. ;  ; Int_t ReadBuffer (TBuffer &b, void *pointer);  Function called by the Streamer functions to deserialize information from buffer b into object at p. ;  ; Int_t ReadBuffer (TBuffer &b, void *pointer, Int_t version, UInt_t start, UInt_t count);  Function called by the Streamer functions to deserialize information from buffer b into object at p. ;  ; void RegisterStreamerInfo (TVirtualStreamerInfo *info);  Register the StreamerInfo in the given slot, change the",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:21024,Energy Efficiency,allocate,allocated,21024,"l_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; void * NewArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObject (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  ; ObjectPtr NewObject (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; virtual void PostLoadCheck ();  Do the initialization that can only be done after the CINT dictionary has been fully populated and can not be delayed efficiently. ;  ; Long_t Property () const override;  Returns the properties of the TClass as a bit field stored as a Long_t value. ;  ; Int_t ReadBuffer (TBuffer &b, void *pointer);  Function called by the Streamer functions to deserialize information from buffer b into object at p. ;  ; Int_t ReadBuffer (TBuffer &b, void *pointer, Int_t version, UInt_t start, UInt_t count);  Function called by the Streamer functions to deserialize information from buffer b into object at p. ;  ; void RegisterStreamerInfo (TVirtualStreamerInfo *info);  Register the StreamerInfo in the given slot, change the State of the TClass as appropriate. ;  ; void RemoveStreamerInfo (Int_t slot);  Remove and delete the StreamerInfo in the given slot. ;  ; void ReplaceWith (TClass",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:21211,Energy Efficiency,efficient,efficiently,21211," pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; void * NewArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObject (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  ; ObjectPtr NewObject (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; virtual void PostLoadCheck ();  Do the initialization that can only be done after the CINT dictionary has been fully populated and can not be delayed efficiently. ;  ; Long_t Property () const override;  Returns the properties of the TClass as a bit field stored as a Long_t value. ;  ; Int_t ReadBuffer (TBuffer &b, void *pointer);  Function called by the Streamer functions to deserialize information from buffer b into object at p. ;  ; Int_t ReadBuffer (TBuffer &b, void *pointer, Int_t version, UInt_t start, UInt_t count);  Function called by the Streamer functions to deserialize information from buffer b into object at p. ;  ; void RegisterStreamerInfo (TVirtualStreamerInfo *info);  Register the StreamerInfo in the given slot, change the State of the TClass as appropriate. ;  ; void RemoveStreamerInfo (Int_t slot);  Remove and delete the StreamerInfo in the given slot. ;  ; void ReplaceWith (TClass *newcl) const;  ; void ResetCaches ();  To clean out all caches. ;  ; void ResetClassInfo ();  Make sure that the current ClassInfo is up to date. ;  ; void ResetCla",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:105173,Energy Efficiency,allocate,allocated,105173,"list. Once the customizable version is done, one can remove or add elements. ; Definition at line 4283 of file TClass.cxx. ◆ MatchLegacyCheckSum(). Bool_t TClass::MatchLegacyCheckSum ; (; UInt_t ; checksum); const. Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ; Definition at line 6494 of file TClass.cxx. ◆ Move(). void TClass::Move ; (; void * ; arenaFrom, . void * ; arenaTo . ); const. Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ; Definition at line 4327 of file TClass.cxx. ◆ MoveAddressInRepository(). void TClass::MoveAddressInRepository ; (; const char * ; where, . void * ; oldadd, . void * ; newadd, . const TClass * ; what . ); const. private . Definition at line 337 of file TClass.cxx. ◆ New() [1/2]. void * TClass::New ; (; ENewType ; defConstructor = kClassNew, . Bool_t ; quiet = kFALSE . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew().; If quiet is true, do no issue a message via Error on case of problems, just return 0.; The constructor actually called here can be customized by using the rootcint pragma: #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass, this method will called the first of the following 3 constructors which exists and is public: MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted.; TRootIOCtorDefinition TRootIOCtor.h:33; When more than one pragma ioctortype is used, the first seen as priority For example with: #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order: MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. Definitio",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:106344,Energy Efficiency,allocate,allocated,106344,"sage via Error on case of problems, just return 0.; The constructor actually called here can be customized by using the rootcint pragma: #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass, this method will called the first of the following 3 constructors which exists and is public: MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted.; TRootIOCtorDefinition TRootIOCtor.h:33; When more than one pragma ioctortype is used, the first seen as priority For example with: #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order: MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. Definition at line 4978 of file TClass.cxx. ◆ New() [2/2]. void * TClass::New ; (; void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5091 of file TClass.cxx. ◆ NewArray() [1/2]. void * TClass::NewArray ; (; Long_t ; nElements, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated array of objects of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5193 of file TClass.cxx. ◆ NewArray() [2/2]. void * TClass::NewArray ; (; Long_t ; nElements, . void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5295 of file TClass.cxx. ◆ NewObject() [1/2]. TClass::ObjectPtr TClass::NewObject ; (; ENewType ; defConstructor = kClassNew, . Bool_t ; quiet = kFALSE . ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:106675,Energy Efficiency,allocate,allocated,106675,"UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted.; TRootIOCtorDefinition TRootIOCtor.h:33; When more than one pragma ioctortype is used, the first seen as priority For example with: #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order: MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. Definition at line 4978 of file TClass.cxx. ◆ New() [2/2]. void * TClass::New ; (; void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5091 of file TClass.cxx. ◆ NewArray() [1/2]. void * TClass::NewArray ; (; Long_t ; nElements, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated array of objects of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5193 of file TClass.cxx. ◆ NewArray() [2/2]. void * TClass::NewArray ; (; Long_t ; nElements, . void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5295 of file TClass.cxx. ◆ NewObject() [1/2]. TClass::ObjectPtr TClass::NewObject ; (; ENewType ; defConstructor = kClassNew, . Bool_t ; quiet = kFALSE . ); const. Definition at line 4992 of file TClass.cxx. ◆ NewObject() [2/2]. TClass::ObjectPtr TClass::NewObject ; (; void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCa",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:107034,Energy Efficiency,allocate,allocated,107034,"ss(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. Definition at line 4978 of file TClass.cxx. ◆ New() [2/2]. void * TClass::New ; (; void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5091 of file TClass.cxx. ◆ NewArray() [1/2]. void * TClass::NewArray ; (; Long_t ; nElements, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated array of objects of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5193 of file TClass.cxx. ◆ NewArray() [2/2]. void * TClass::NewArray ; (; Long_t ; nElements, . void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5295 of file TClass.cxx. ◆ NewObject() [1/2]. TClass::ObjectPtr TClass::NewObject ; (; ENewType ; defConstructor = kClassNew, . Bool_t ; quiet = kFALSE . ); const. Definition at line 4992 of file TClass.cxx. ◆ NewObject() [2/2]. TClass::ObjectPtr TClass::NewObject ; (; void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5106 of file TClass.cxx. ◆ NewObjectArray() [1/2]. TClass::ObjectPtr TClass::NewObjectArray ; (; Long_t ; nElements, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated array of objects of this class. ; The class must have a default constructor. For meaning of defConstructor, see TC",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:107557,Energy Efficiency,allocate,allocated,107557,"s::NewArray ; (; Long_t ; nElements, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated array of objects of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5193 of file TClass.cxx. ◆ NewArray() [2/2]. void * TClass::NewArray ; (; Long_t ; nElements, . void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5295 of file TClass.cxx. ◆ NewObject() [1/2]. TClass::ObjectPtr TClass::NewObject ; (; ENewType ; defConstructor = kClassNew, . Bool_t ; quiet = kFALSE . ); const. Definition at line 4992 of file TClass.cxx. ◆ NewObject() [2/2]. TClass::ObjectPtr TClass::NewObject ; (; void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5106 of file TClass.cxx. ◆ NewObjectArray() [1/2]. TClass::ObjectPtr TClass::NewObjectArray ; (; Long_t ; nElements, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated array of objects of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5209 of file TClass.cxx. ◆ NewObjectArray() [2/2]. TClass::ObjectPtr TClass::NewObjectArray ; (; Long_t ; nElements, . void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5310 of file TClass.cxx. ◆ operator=(). TClass & TClass::operator= ; (; const TClass & ; ). privatedelete . ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:107911,Energy Efficiency,allocate,allocated,107911,"ong_t ; nElements, . void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5295 of file TClass.cxx. ◆ NewObject() [1/2]. TClass::ObjectPtr TClass::NewObject ; (; ENewType ; defConstructor = kClassNew, . Bool_t ; quiet = kFALSE . ); const. Definition at line 4992 of file TClass.cxx. ◆ NewObject() [2/2]. TClass::ObjectPtr TClass::NewObject ; (; void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5106 of file TClass.cxx. ◆ NewObjectArray() [1/2]. TClass::ObjectPtr TClass::NewObjectArray ; (; Long_t ; nElements, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated array of objects of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5209 of file TClass.cxx. ◆ NewObjectArray() [2/2]. TClass::ObjectPtr TClass::NewObjectArray ; (; Long_t ; nElements, . void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5310 of file TClass.cxx. ◆ operator=(). TClass & TClass::operator= ; (; const TClass & ; ). privatedelete . ◆ PostLoadCheck(). void TClass::PostLoadCheck ; (; ). virtual . Do the initialization that can only be done after the CINT dictionary has been fully populated and can not be delayed efficiently. ; Definition at line 5959 of file TClass.cxx. ◆ Property(). Long_t TClass::Property ; (; ); const. overridevirtual . Returns the properties of the TClass as a bit f",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:108293,Energy Efficiency,allocate,allocated,108293,"nstructor = kClassNew, . Bool_t ; quiet = kFALSE . ); const. Definition at line 4992 of file TClass.cxx. ◆ NewObject() [2/2]. TClass::ObjectPtr TClass::NewObject ; (; void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5106 of file TClass.cxx. ◆ NewObjectArray() [1/2]. TClass::ObjectPtr TClass::NewObjectArray ; (; Long_t ; nElements, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated array of objects of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5209 of file TClass.cxx. ◆ NewObjectArray() [2/2]. TClass::ObjectPtr TClass::NewObjectArray ; (; Long_t ; nElements, . void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5310 of file TClass.cxx. ◆ operator=(). TClass & TClass::operator= ; (; const TClass & ; ). privatedelete . ◆ PostLoadCheck(). void TClass::PostLoadCheck ; (; ). virtual . Do the initialization that can only be done after the CINT dictionary has been fully populated and can not be delayed efficiently. ; Definition at line 5959 of file TClass.cxx. ◆ Property(). Long_t TClass::Property ; (; ); const. overridevirtual . Returns the properties of the TClass as a bit field stored as a Long_t value. ; The bit values used for the return value are defined in the enum EProperty (in TDictionary.h); Also sets TObject::fBits and fStreamerType to cache information about the class. The bits stored in TObject::fBits are kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeig",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:108740,Energy Efficiency,efficient,efficiently,108740,"New(). ; Definition at line 5106 of file TClass.cxx. ◆ NewObjectArray() [1/2]. TClass::ObjectPtr TClass::NewObjectArray ; (; Long_t ; nElements, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated array of objects of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5209 of file TClass.cxx. ◆ NewObjectArray() [2/2]. TClass::ObjectPtr TClass::NewObjectArray ; (; Long_t ; nElements, . void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5310 of file TClass.cxx. ◆ operator=(). TClass & TClass::operator= ; (; const TClass & ; ). privatedelete . ◆ PostLoadCheck(). void TClass::PostLoadCheck ; (; ). virtual . Do the initialization that can only be done after the CINT dictionary has been fully populated and can not be delayed efficiently. ; Definition at line 5959 of file TClass.cxx. ◆ Property(). Long_t TClass::Property ; (; ); const. overridevirtual . Returns the properties of the TClass as a bit field stored as a Long_t value. ; The bit values used for the return value are defined in the enum EProperty (in TDictionary.h); Also sets TObject::fBits and fStreamerType to cache information about the class. The bits stored in TObject::fBits are kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; a#define a(i)Definition RSha256.hxx:99; TClass::Streamervoid Streamer(void *obj, TBuffer &b, const TClass *onfile_class=nullptr) constDefinition TClass.h:607; TClass::kStartWithTObject@ kStartWithTObjectDefinition TClass.h:103; TClass::kIsTObject@ kIsTObjectDefinition TClass.h:100; TClass::kIsForeign@ kIsForeignDefinition TClass.h:101; The value",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:11618,Integrability,wrap,wrapper,11618," const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch);  Find the method with a given prototype. ;  ; Int_t GetClassSize () const;  ; Version_t GetClassVersion () const;  ; TVirtualCollectionProxy * GetCollectionProxy () const;  Return the proxy describing the collection (if any). ;  ; ROOT::ESTLType GetCollectionType () const;  Return the 'type' of the STL the TClass is representing. ;  ; const char * GetContextMenuTitle () const;  ; TVirtualStreamerInfo * GetConversionStreamerInfo (const char *onfile_classname, Int_t version) const;  Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. ;  ; TVirtualStreamerInfo * GetConversionStreamerInfo (const TClass *onfile_cl, Int_t version) const;  Return a Conversion StreamerInfo from the class represented by cl for version number 'version' to this class, if any. ;  ; ClassConvStreamerFunc_t GetConvStreamerFunc () const;  Get a wrapper/accessor function around this class custom conversion streamer (member function). ;  ; TVirtualStreamerInfo * GetCurrentStreamerInfo ();  ; TDataMember * GetDataMember (const char *datamember) const;  Return pointer to datamember object with name ""datamember"". ;  ; Longptr_t GetDataMemberOffset (const char *membername) const;  return offset for member name. ;  ; Short_t GetDeclFileLine () const;  ; const char * GetDeclFileName () const;  Return name of the file containing the declaration of this class. ;  ; ROOT::DelFunc_t GetDelete () const;  Return the wrapper around delete ThiObject. ;  ; ROOT::DelArrFunc_t GetDeleteArray () const;  Return the wrapper around delete [] ThiObject. ;  ; ROOT::DesFunc_t GetDestructor () const;  Return the wrapper around the destructor. ;  ; ROOT::DirAutoAdd_t GetDirectoryAutoAdd () const;  Return the wrapper around the directory auto add function. ;  ; TFunctionTemplate * GetFunctionTemplate (const char *name);  ; UInt_t GetHeapInstanceCount () const;  ; S",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:12187,Integrability,wrap,wrapper,12187," *onfile_classname, Int_t version) const;  Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. ;  ; TVirtualStreamerInfo * GetConversionStreamerInfo (const TClass *onfile_cl, Int_t version) const;  Return a Conversion StreamerInfo from the class represented by cl for version number 'version' to this class, if any. ;  ; ClassConvStreamerFunc_t GetConvStreamerFunc () const;  Get a wrapper/accessor function around this class custom conversion streamer (member function). ;  ; TVirtualStreamerInfo * GetCurrentStreamerInfo ();  ; TDataMember * GetDataMember (const char *datamember) const;  Return pointer to datamember object with name ""datamember"". ;  ; Longptr_t GetDataMemberOffset (const char *membername) const;  return offset for member name. ;  ; Short_t GetDeclFileLine () const;  ; const char * GetDeclFileName () const;  Return name of the file containing the declaration of this class. ;  ; ROOT::DelFunc_t GetDelete () const;  Return the wrapper around delete ThiObject. ;  ; ROOT::DelArrFunc_t GetDeleteArray () const;  Return the wrapper around delete [] ThiObject. ;  ; ROOT::DesFunc_t GetDestructor () const;  Return the wrapper around the destructor. ;  ; ROOT::DirAutoAdd_t GetDirectoryAutoAdd () const;  Return the wrapper around the directory auto add function. ;  ; TFunctionTemplate * GetFunctionTemplate (const char *name);  ; UInt_t GetHeapInstanceCount () const;  ; Short_t GetImplFileLine () const;  ; const char * GetImplFileName () const;  ; UInt_t GetInstanceCount () const;  ; TVirtualIsAProxy * GetIsAProxy () const;  Return the proxy implementing the IsA functionality. ;  ; TVirtualStreamerInfo * GetLastReadInfo () const;  ; TList * GetListOfAllPublicDataMembers (Bool_t load=kTRUE);  Returns a list of all public data members of this class and its base classes. ;  ; const TList * GetListOfAllPublicMethods (Bool_t load=kTRUE);  Returns a list of all public methods of this class and its base classes. ; ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:12281,Integrability,wrap,wrapper,12281,"'classname' for version number 'version' to this class, if any. ;  ; TVirtualStreamerInfo * GetConversionStreamerInfo (const TClass *onfile_cl, Int_t version) const;  Return a Conversion StreamerInfo from the class represented by cl for version number 'version' to this class, if any. ;  ; ClassConvStreamerFunc_t GetConvStreamerFunc () const;  Get a wrapper/accessor function around this class custom conversion streamer (member function). ;  ; TVirtualStreamerInfo * GetCurrentStreamerInfo ();  ; TDataMember * GetDataMember (const char *datamember) const;  Return pointer to datamember object with name ""datamember"". ;  ; Longptr_t GetDataMemberOffset (const char *membername) const;  return offset for member name. ;  ; Short_t GetDeclFileLine () const;  ; const char * GetDeclFileName () const;  Return name of the file containing the declaration of this class. ;  ; ROOT::DelFunc_t GetDelete () const;  Return the wrapper around delete ThiObject. ;  ; ROOT::DelArrFunc_t GetDeleteArray () const;  Return the wrapper around delete [] ThiObject. ;  ; ROOT::DesFunc_t GetDestructor () const;  Return the wrapper around the destructor. ;  ; ROOT::DirAutoAdd_t GetDirectoryAutoAdd () const;  Return the wrapper around the directory auto add function. ;  ; TFunctionTemplate * GetFunctionTemplate (const char *name);  ; UInt_t GetHeapInstanceCount () const;  ; Short_t GetImplFileLine () const;  ; const char * GetImplFileName () const;  ; UInt_t GetInstanceCount () const;  ; TVirtualIsAProxy * GetIsAProxy () const;  Return the proxy implementing the IsA functionality. ;  ; TVirtualStreamerInfo * GetLastReadInfo () const;  ; TList * GetListOfAllPublicDataMembers (Bool_t load=kTRUE);  Returns a list of all public data members of this class and its base classes. ;  ; const TList * GetListOfAllPublicMethods (Bool_t load=kTRUE);  Returns a list of all public methods of this class and its base classes. ;  ; TList * GetListOfBases ();  Return list containing the TBaseClass(es) of a class. ;  ; TL",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:12374,Integrability,wrap,wrapper,12374,"etConversionStreamerInfo (const TClass *onfile_cl, Int_t version) const;  Return a Conversion StreamerInfo from the class represented by cl for version number 'version' to this class, if any. ;  ; ClassConvStreamerFunc_t GetConvStreamerFunc () const;  Get a wrapper/accessor function around this class custom conversion streamer (member function). ;  ; TVirtualStreamerInfo * GetCurrentStreamerInfo ();  ; TDataMember * GetDataMember (const char *datamember) const;  Return pointer to datamember object with name ""datamember"". ;  ; Longptr_t GetDataMemberOffset (const char *membername) const;  return offset for member name. ;  ; Short_t GetDeclFileLine () const;  ; const char * GetDeclFileName () const;  Return name of the file containing the declaration of this class. ;  ; ROOT::DelFunc_t GetDelete () const;  Return the wrapper around delete ThiObject. ;  ; ROOT::DelArrFunc_t GetDeleteArray () const;  Return the wrapper around delete [] ThiObject. ;  ; ROOT::DesFunc_t GetDestructor () const;  Return the wrapper around the destructor. ;  ; ROOT::DirAutoAdd_t GetDirectoryAutoAdd () const;  Return the wrapper around the directory auto add function. ;  ; TFunctionTemplate * GetFunctionTemplate (const char *name);  ; UInt_t GetHeapInstanceCount () const;  ; Short_t GetImplFileLine () const;  ; const char * GetImplFileName () const;  ; UInt_t GetInstanceCount () const;  ; TVirtualIsAProxy * GetIsAProxy () const;  Return the proxy implementing the IsA functionality. ;  ; TVirtualStreamerInfo * GetLastReadInfo () const;  ; TList * GetListOfAllPublicDataMembers (Bool_t load=kTRUE);  Returns a list of all public data members of this class and its base classes. ;  ; const TList * GetListOfAllPublicMethods (Bool_t load=kTRUE);  Returns a list of all public methods of this class and its base classes. ;  ; TList * GetListOfBases ();  Return list containing the TBaseClass(es) of a class. ;  ; TList * GetListOfDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:12471,Integrability,wrap,wrapper,12471,"rInfo from the class represented by cl for version number 'version' to this class, if any. ;  ; ClassConvStreamerFunc_t GetConvStreamerFunc () const;  Get a wrapper/accessor function around this class custom conversion streamer (member function). ;  ; TVirtualStreamerInfo * GetCurrentStreamerInfo ();  ; TDataMember * GetDataMember (const char *datamember) const;  Return pointer to datamember object with name ""datamember"". ;  ; Longptr_t GetDataMemberOffset (const char *membername) const;  return offset for member name. ;  ; Short_t GetDeclFileLine () const;  ; const char * GetDeclFileName () const;  Return name of the file containing the declaration of this class. ;  ; ROOT::DelFunc_t GetDelete () const;  Return the wrapper around delete ThiObject. ;  ; ROOT::DelArrFunc_t GetDeleteArray () const;  Return the wrapper around delete [] ThiObject. ;  ; ROOT::DesFunc_t GetDestructor () const;  Return the wrapper around the destructor. ;  ; ROOT::DirAutoAdd_t GetDirectoryAutoAdd () const;  Return the wrapper around the directory auto add function. ;  ; TFunctionTemplate * GetFunctionTemplate (const char *name);  ; UInt_t GetHeapInstanceCount () const;  ; Short_t GetImplFileLine () const;  ; const char * GetImplFileName () const;  ; UInt_t GetInstanceCount () const;  ; TVirtualIsAProxy * GetIsAProxy () const;  Return the proxy implementing the IsA functionality. ;  ; TVirtualStreamerInfo * GetLastReadInfo () const;  ; TList * GetListOfAllPublicDataMembers (Bool_t load=kTRUE);  Returns a list of all public data members of this class and its base classes. ;  ; const TList * GetListOfAllPublicMethods (Bool_t load=kTRUE);  Returns a list of all public methods of this class and its base classes. ;  ; TList * GetListOfBases ();  Return list containing the TBaseClass(es) of a class. ;  ; TList * GetListOfDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of a class. ;  ; TList * GetListOfEnums (Bool_t load=kTRUE);  Return a list containing the TEnums of a c",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:14211,Integrability,wrap,wrapper,14211,"OfBases ();  Return list containing the TBaseClass(es) of a class. ;  ; TList * GetListOfDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of a class. ;  ; TList * GetListOfEnums (Bool_t load=kTRUE);  Return a list containing the TEnums of a class. ;  ; TList * GetListOfFunctionTemplates (Bool_t load=kTRUE);  Return TListOfFunctionTemplates for a class. ;  ; TCollection * GetListOfMethodOverloads (const char *name) const;  Return the collection of functions named ""name"". ;  ; TList * GetListOfMethods (Bool_t load=kTRUE);  Return list containing the TMethods of a class. ;  ; TList * GetListOfRealData () const;  ; TList * GetListOfUsingDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of using declarations of a class. ;  ; void GetMenuItems (TList *listitems);  Returns list of methods accessible by context menu. ;  ; TList * GetMenuList () const;  Return the list of menu items associated with the class. ;  ; ROOT::MergeFunc_t GetMerge () const;  Return the wrapper around Merge. ;  ; TMethod * GetMethod (const char *method, const char *params, Bool_t objectIsConst=kFALSE);  Find the best method (if there is one) matching the parameters. ;  ; TMethod * GetMethodAllAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodWithPrototype (const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch);  Find the method with a given prototype. ;  ; void GetMissingDictionaries (THashTable &result, bool recurse=false);  Get the classes that have a missing dictionary starting from this one. ;  ; Int_t GetNdata ();  Return the number of data members of this class Note that in case the list of data members is not yet created, it will be done by GetListOfDataMembers(). ;  ; ROOT::NewFunc_t GetNew () const;  Return the wrap",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:15190,Integrability,wrap,wrapper,15190,"GetMerge () const;  Return the wrapper around Merge. ;  ; TMethod * GetMethod (const char *method, const char *params, Bool_t objectIsConst=kFALSE);  Find the best method (if there is one) matching the parameters. ;  ; TMethod * GetMethodAllAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodWithPrototype (const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch);  Find the method with a given prototype. ;  ; void GetMissingDictionaries (THashTable &result, bool recurse=false);  Get the classes that have a missing dictionary starting from this one. ;  ; Int_t GetNdata ();  Return the number of data members of this class Note that in case the list of data members is not yet created, it will be done by GetListOfDataMembers(). ;  ; ROOT::NewFunc_t GetNew () const;  Return the wrapper around new ThisClass(). ;  ; ROOT::NewArrFunc_t GetNewArray () const;  Return the wrapper around new ThisClass[]. ;  ; Int_t GetNmethods ();  Return the number of methods of this class Note that in case the list of methods is not yet created, it will be done by GetListOfMethods(). ;  ; TClass *const * GetPersistentRef () const;  ; TRealData * GetRealData (const char *name) const;  Return pointer to TRealData element with name ""name"". ;  ; TVirtualRefProxy * GetReferenceProxy () const;  ; ROOT::ResetAfterMergeFunc_t GetResetAfterMerge () const;  Return the wrapper around Merge. ;  ; const ROOT::Detail::TSchemaRuleSet * GetSchemaRules () const;  Return the set of the schema rules if any. ;  ; ROOT::Detail::TSchemaRuleSet * GetSchemaRules (Bool_t create=kFALSE);  Return the set of the schema rules if any. ;  ; const char * GetSharedLibs ();  Get the list of shared libraries containing the code for class cls. ;  ; ShowMembersFunc_t GetShowMembersWrapper () const;  ; EStat",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:15280,Integrability,wrap,wrapper,15280,"har *method, const char *params, Bool_t objectIsConst=kFALSE);  Find the best method (if there is one) matching the parameters. ;  ; TMethod * GetMethodAllAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodWithPrototype (const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch);  Find the method with a given prototype. ;  ; void GetMissingDictionaries (THashTable &result, bool recurse=false);  Get the classes that have a missing dictionary starting from this one. ;  ; Int_t GetNdata ();  Return the number of data members of this class Note that in case the list of data members is not yet created, it will be done by GetListOfDataMembers(). ;  ; ROOT::NewFunc_t GetNew () const;  Return the wrapper around new ThisClass(). ;  ; ROOT::NewArrFunc_t GetNewArray () const;  Return the wrapper around new ThisClass[]. ;  ; Int_t GetNmethods ();  Return the number of methods of this class Note that in case the list of methods is not yet created, it will be done by GetListOfMethods(). ;  ; TClass *const * GetPersistentRef () const;  ; TRealData * GetRealData (const char *name) const;  Return pointer to TRealData element with name ""name"". ;  ; TVirtualRefProxy * GetReferenceProxy () const;  ; ROOT::ResetAfterMergeFunc_t GetResetAfterMerge () const;  Return the wrapper around Merge. ;  ; const ROOT::Detail::TSchemaRuleSet * GetSchemaRules () const;  Return the set of the schema rules if any. ;  ; ROOT::Detail::TSchemaRuleSet * GetSchemaRules (Bool_t create=kFALSE);  Return the set of the schema rules if any. ;  ; const char * GetSharedLibs ();  Get the list of shared libraries containing the code for class cls. ;  ; ShowMembersFunc_t GetShowMembersWrapper () const;  ; EState GetState () const;  ; TClassStreamer * GetStreamer () const;  Return the Streamer Cl",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:15760,Integrability,wrap,wrapper,15760,"t=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch);  Find the method with a given prototype. ;  ; void GetMissingDictionaries (THashTable &result, bool recurse=false);  Get the classes that have a missing dictionary starting from this one. ;  ; Int_t GetNdata ();  Return the number of data members of this class Note that in case the list of data members is not yet created, it will be done by GetListOfDataMembers(). ;  ; ROOT::NewFunc_t GetNew () const;  Return the wrapper around new ThisClass(). ;  ; ROOT::NewArrFunc_t GetNewArray () const;  Return the wrapper around new ThisClass[]. ;  ; Int_t GetNmethods ();  Return the number of methods of this class Note that in case the list of methods is not yet created, it will be done by GetListOfMethods(). ;  ; TClass *const * GetPersistentRef () const;  ; TRealData * GetRealData (const char *name) const;  Return pointer to TRealData element with name ""name"". ;  ; TVirtualRefProxy * GetReferenceProxy () const;  ; ROOT::ResetAfterMergeFunc_t GetResetAfterMerge () const;  Return the wrapper around Merge. ;  ; const ROOT::Detail::TSchemaRuleSet * GetSchemaRules () const;  Return the set of the schema rules if any. ;  ; ROOT::Detail::TSchemaRuleSet * GetSchemaRules (Bool_t create=kFALSE);  Return the set of the schema rules if any. ;  ; const char * GetSharedLibs ();  Get the list of shared libraries containing the code for class cls. ;  ; ShowMembersFunc_t GetShowMembersWrapper () const;  ; EState GetState () const;  ; TClassStreamer * GetStreamer () const;  Return the Streamer Class allowing streaming (if any). ;  ; ClassStreamerFunc_t GetStreamerFunc () const;  Get a wrapper/accessor function around this class custom streamer (member function). ;  ; TVirtualStreamerInfo * GetStreamerInfo (Int_t version=0, Bool_t isTransient=kFALSE) const;  returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ;  ; TVirtualStreamerInfo * GetStreamerInfoAbstractEmulated (Int_t",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:16357,Integrability,wrap,wrapper,16357,"ds of this class Note that in case the list of methods is not yet created, it will be done by GetListOfMethods(). ;  ; TClass *const * GetPersistentRef () const;  ; TRealData * GetRealData (const char *name) const;  Return pointer to TRealData element with name ""name"". ;  ; TVirtualRefProxy * GetReferenceProxy () const;  ; ROOT::ResetAfterMergeFunc_t GetResetAfterMerge () const;  Return the wrapper around Merge. ;  ; const ROOT::Detail::TSchemaRuleSet * GetSchemaRules () const;  Return the set of the schema rules if any. ;  ; ROOT::Detail::TSchemaRuleSet * GetSchemaRules (Bool_t create=kFALSE);  Return the set of the schema rules if any. ;  ; const char * GetSharedLibs ();  Get the list of shared libraries containing the code for class cls. ;  ; ShowMembersFunc_t GetShowMembersWrapper () const;  ; EState GetState () const;  ; TClassStreamer * GetStreamer () const;  Return the Streamer Class allowing streaming (if any). ;  ; ClassStreamerFunc_t GetStreamerFunc () const;  Get a wrapper/accessor function around this class custom streamer (member function). ;  ; TVirtualStreamerInfo * GetStreamerInfo (Int_t version=0, Bool_t isTransient=kFALSE) const;  returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ;  ; TVirtualStreamerInfo * GetStreamerInfoAbstractEmulated (Int_t version=0) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; const TObjArray * GetStreamerInfos () const;  ; const std::type_info * GetTypeInfo () const;  ; Bool_t HasConsistentHashMember ();  Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ;  ; Bool_t HasCustomStreamerMember () const;  The class has a Streamer method and it is implem",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:22756,Integrability,wrap,wrapper,22756,"gister the StreamerInfo in the given slot, change the State of the TClass as appropriate. ;  ; void RemoveStreamerInfo (Int_t slot);  Remove and delete the StreamerInfo in the given slot. ;  ; void ReplaceWith (TClass *newcl) const;  ; void ResetCaches ();  To clean out all caches. ;  ; void ResetClassInfo ();  Make sure that the current ClassInfo is up to date. ;  ; void ResetClassInfo (Long_t tagnum);  Make sure that the current ClassInfo is up to date. ;  ; void ResetInstanceCount ();  ; void ResetMenuList ();  Resets the menu list to it's standard value. ;  ; void SetCanSplit (Int_t splitmode);  Set the splitability of this class: ;  ; void SetCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &);  Create the collection proxy object (and the streamer object) from using the information in the TCollectionProxyInfo. ;  ; void SetContextMenuTitle (const char *title);  Change (i.e. set) the title of the TNamed. ;  ; void SetConvStreamerFunc (ClassConvStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom conversion streamer. ;  ; void SetCurrentStreamerInfo (TVirtualStreamerInfo *info);  Set pointer to current TVirtualStreamerInfo. ;  ; void SetDeclFile (const char *name, Short_t line);  ; void SetDelete (ROOT::DelFunc_t deleteFunc);  Install a new wrapper around 'delete'. ;  ; void SetDeleteArray (ROOT::DelArrFunc_t deleteArrayFunc);  Install a new wrapper around 'delete []'. ;  ; void SetDestructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:23056,Integrability,wrap,wrapper,23056," ();  To clean out all caches. ;  ; void ResetClassInfo ();  Make sure that the current ClassInfo is up to date. ;  ; void ResetClassInfo (Long_t tagnum);  Make sure that the current ClassInfo is up to date. ;  ; void ResetInstanceCount ();  ; void ResetMenuList ();  Resets the menu list to it's standard value. ;  ; void SetCanSplit (Int_t splitmode);  Set the splitability of this class: ;  ; void SetCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &);  Create the collection proxy object (and the streamer object) from using the information in the TCollectionProxyInfo. ;  ; void SetContextMenuTitle (const char *title);  Change (i.e. set) the title of the TNamed. ;  ; void SetConvStreamerFunc (ClassConvStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom conversion streamer. ;  ; void SetCurrentStreamerInfo (TVirtualStreamerInfo *info);  Set pointer to current TVirtualStreamerInfo. ;  ; void SetDeclFile (const char *name, Short_t line);  ; void SetDelete (ROOT::DelFunc_t deleteFunc);  Install a new wrapper around 'delete'. ;  ; void SetDeleteArray (ROOT::DelArrFunc_t deleteArrayFunc);  Install a new wrapper around 'delete []'. ;  ; void SetDestructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ;  ; void SetMerge (ROOT::MergeFunc_t mergeFunc);  Install a new wrapper around 'Merge'. ;  ; void SetNew (ROOT::NewFunc_t newFunc);  Install a new wrapper around 'new'. ;  ; void SetNewArray (ROOT::NewArrFunc_t newArrayFunc);  Install a new wrapper a",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:23159,Integrability,wrap,wrapper,23159,"setClassInfo (Long_t tagnum);  Make sure that the current ClassInfo is up to date. ;  ; void ResetInstanceCount ();  ; void ResetMenuList ();  Resets the menu list to it's standard value. ;  ; void SetCanSplit (Int_t splitmode);  Set the splitability of this class: ;  ; void SetCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &);  Create the collection proxy object (and the streamer object) from using the information in the TCollectionProxyInfo. ;  ; void SetContextMenuTitle (const char *title);  Change (i.e. set) the title of the TNamed. ;  ; void SetConvStreamerFunc (ClassConvStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom conversion streamer. ;  ; void SetCurrentStreamerInfo (TVirtualStreamerInfo *info);  Set pointer to current TVirtualStreamerInfo. ;  ; void SetDeclFile (const char *name, Short_t line);  ; void SetDelete (ROOT::DelFunc_t deleteFunc);  Install a new wrapper around 'delete'. ;  ; void SetDeleteArray (ROOT::DelArrFunc_t deleteArrayFunc);  Install a new wrapper around 'delete []'. ;  ; void SetDestructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ;  ; void SetMerge (ROOT::MergeFunc_t mergeFunc);  Install a new wrapper around 'Merge'. ;  ; void SetNew (ROOT::NewFunc_t newFunc);  Install a new wrapper around 'new'. ;  ; void SetNewArray (ROOT::NewArrFunc_t newArrayFunc);  Install a new wrapper around 'new []'. ;  ; void SetResetAfterMerge (ROOT::ResetAfterMergeFunc_t resetFunc);  Install a new wrapper around 'ResetAft",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:23260,Integrability,wrap,wrapper,23260,"eCount ();  ; void ResetMenuList ();  Resets the menu list to it's standard value. ;  ; void SetCanSplit (Int_t splitmode);  Set the splitability of this class: ;  ; void SetCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &);  Create the collection proxy object (and the streamer object) from using the information in the TCollectionProxyInfo. ;  ; void SetContextMenuTitle (const char *title);  Change (i.e. set) the title of the TNamed. ;  ; void SetConvStreamerFunc (ClassConvStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom conversion streamer. ;  ; void SetCurrentStreamerInfo (TVirtualStreamerInfo *info);  Set pointer to current TVirtualStreamerInfo. ;  ; void SetDeclFile (const char *name, Short_t line);  ; void SetDelete (ROOT::DelFunc_t deleteFunc);  Install a new wrapper around 'delete'. ;  ; void SetDeleteArray (ROOT::DelArrFunc_t deleteArrayFunc);  Install a new wrapper around 'delete []'. ;  ; void SetDestructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ;  ; void SetMerge (ROOT::MergeFunc_t mergeFunc);  Install a new wrapper around 'Merge'. ;  ; void SetNew (ROOT::NewFunc_t newFunc);  Install a new wrapper around 'new'. ;  ; void SetNewArray (ROOT::NewArrFunc_t newArrayFunc);  Install a new wrapper around 'new []'. ;  ; void SetResetAfterMerge (ROOT::ResetAfterMergeFunc_t resetFunc);  Install a new wrapper around 'ResetAfterMerge'. ;  ; void SetStreamerFunc (ClassStreamerFunc_t strm);  Set a wrapper/accessor function around t",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:23373,Integrability,wrap,wrapper,23373,"mode);  Set the splitability of this class: ;  ; void SetCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &);  Create the collection proxy object (and the streamer object) from using the information in the TCollectionProxyInfo. ;  ; void SetContextMenuTitle (const char *title);  Change (i.e. set) the title of the TNamed. ;  ; void SetConvStreamerFunc (ClassConvStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom conversion streamer. ;  ; void SetCurrentStreamerInfo (TVirtualStreamerInfo *info);  Set pointer to current TVirtualStreamerInfo. ;  ; void SetDeclFile (const char *name, Short_t line);  ; void SetDelete (ROOT::DelFunc_t deleteFunc);  Install a new wrapper around 'delete'. ;  ; void SetDeleteArray (ROOT::DelArrFunc_t deleteArrayFunc);  Install a new wrapper around 'delete []'. ;  ; void SetDestructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ;  ; void SetMerge (ROOT::MergeFunc_t mergeFunc);  Install a new wrapper around 'Merge'. ;  ; void SetNew (ROOT::NewFunc_t newFunc);  Install a new wrapper around 'new'. ;  ; void SetNewArray (ROOT::NewArrFunc_t newArrayFunc);  Install a new wrapper around 'new []'. ;  ; void SetResetAfterMerge (ROOT::ResetAfterMergeFunc_t resetFunc);  Install a new wrapper around 'ResetAfterMerge'. ;  ; void SetStreamerFunc (ClassStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom streamer. ;  ; TVirtualStreamerInfo * SetStreamerInfo (Int_t version, const char *info="""");  Info is",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:23822,Integrability,wrap,wrapper,23822,"custom conversion streamer. ;  ; void SetCurrentStreamerInfo (TVirtualStreamerInfo *info);  Set pointer to current TVirtualStreamerInfo. ;  ; void SetDeclFile (const char *name, Short_t line);  ; void SetDelete (ROOT::DelFunc_t deleteFunc);  Install a new wrapper around 'delete'. ;  ; void SetDeleteArray (ROOT::DelArrFunc_t deleteArrayFunc);  Install a new wrapper around 'delete []'. ;  ; void SetDestructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ;  ; void SetMerge (ROOT::MergeFunc_t mergeFunc);  Install a new wrapper around 'Merge'. ;  ; void SetNew (ROOT::NewFunc_t newFunc);  Install a new wrapper around 'new'. ;  ; void SetNewArray (ROOT::NewArrFunc_t newArrayFunc);  Install a new wrapper around 'new []'. ;  ; void SetResetAfterMerge (ROOT::ResetAfterMergeFunc_t resetFunc);  Install a new wrapper around 'ResetAfterMerge'. ;  ; void SetStreamerFunc (ClassStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom streamer. ;  ; TVirtualStreamerInfo * SetStreamerInfo (Int_t version, const char *info="""");  Info is a string describing the names and types of attributes written by the class Streamer function. ;  ; void SetUnloaded ();  Call this method to indicate that the shared library containing this class's code has been removed (unloaded) from the process's memory. ;  ; Int_t Size () const;  Return size of object of this class. ;  ; void Store (TBuffer &b) const;  Store class description on I/O buffer. ;  ; void Streamer (TBuffer &) override;  Strea",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:23905,Integrability,wrap,wrapper,23905,"nfo);  Set pointer to current TVirtualStreamerInfo. ;  ; void SetDeclFile (const char *name, Short_t line);  ; void SetDelete (ROOT::DelFunc_t deleteFunc);  Install a new wrapper around 'delete'. ;  ; void SetDeleteArray (ROOT::DelArrFunc_t deleteArrayFunc);  Install a new wrapper around 'delete []'. ;  ; void SetDestructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ;  ; void SetMerge (ROOT::MergeFunc_t mergeFunc);  Install a new wrapper around 'Merge'. ;  ; void SetNew (ROOT::NewFunc_t newFunc);  Install a new wrapper around 'new'. ;  ; void SetNewArray (ROOT::NewArrFunc_t newArrayFunc);  Install a new wrapper around 'new []'. ;  ; void SetResetAfterMerge (ROOT::ResetAfterMergeFunc_t resetFunc);  Install a new wrapper around 'ResetAfterMerge'. ;  ; void SetStreamerFunc (ClassStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom streamer. ;  ; TVirtualStreamerInfo * SetStreamerInfo (Int_t version, const char *info="""");  Info is a string describing the names and types of attributes written by the class Streamer function. ;  ; void SetUnloaded ();  Call this method to indicate that the shared library containing this class's code has been removed (unloaded) from the process's memory. ;  ; Int_t Size () const;  Return size of object of this class. ;  ; void Store (TBuffer &b) const;  Store class description on I/O buffer. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void Streamer (void *obj, TBuffer &b, const TClass",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:23999,Integrability,wrap,wrapper,23999,"me, Short_t line);  ; void SetDelete (ROOT::DelFunc_t deleteFunc);  Install a new wrapper around 'delete'. ;  ; void SetDeleteArray (ROOT::DelArrFunc_t deleteArrayFunc);  Install a new wrapper around 'delete []'. ;  ; void SetDestructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ;  ; void SetMerge (ROOT::MergeFunc_t mergeFunc);  Install a new wrapper around 'Merge'. ;  ; void SetNew (ROOT::NewFunc_t newFunc);  Install a new wrapper around 'new'. ;  ; void SetNewArray (ROOT::NewArrFunc_t newArrayFunc);  Install a new wrapper around 'new []'. ;  ; void SetResetAfterMerge (ROOT::ResetAfterMergeFunc_t resetFunc);  Install a new wrapper around 'ResetAfterMerge'. ;  ; void SetStreamerFunc (ClassStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom streamer. ;  ; TVirtualStreamerInfo * SetStreamerInfo (Int_t version, const char *info="""");  Info is a string describing the names and types of attributes written by the class Streamer function. ;  ; void SetUnloaded ();  Call this method to indicate that the shared library containing this class's code has been removed (unloaded) from the process's memory. ;  ; Int_t Size () const;  Return size of object of this class. ;  ; void Store (TBuffer &b) const;  Store class description on I/O buffer. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void Streamer (void *obj, TBuffer &b, const TClass *onfile_class=nullptr) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtu",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:24109,Integrability,wrap,wrapper,24109,"  ; void SetDeleteArray (ROOT::DelArrFunc_t deleteArrayFunc);  Install a new wrapper around 'delete []'. ;  ; void SetDestructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ;  ; void SetMerge (ROOT::MergeFunc_t mergeFunc);  Install a new wrapper around 'Merge'. ;  ; void SetNew (ROOT::NewFunc_t newFunc);  Install a new wrapper around 'new'. ;  ; void SetNewArray (ROOT::NewArrFunc_t newArrayFunc);  Install a new wrapper around 'new []'. ;  ; void SetResetAfterMerge (ROOT::ResetAfterMergeFunc_t resetFunc);  Install a new wrapper around 'ResetAfterMerge'. ;  ; void SetStreamerFunc (ClassStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom streamer. ;  ; TVirtualStreamerInfo * SetStreamerInfo (Int_t version, const char *info="""");  Info is a string describing the names and types of attributes written by the class Streamer function. ;  ; void SetUnloaded ();  Call this method to indicate that the shared library containing this class's code has been removed (unloaded) from the process's memory. ;  ; Int_t Size () const;  Return size of object of this class. ;  ; void Store (TBuffer &b) const;  Store class description on I/O buffer. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void Streamer (void *obj, TBuffer &b, const TClass *onfile_class=nullptr) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t WriteBuffer (TBuffer &b, void *pointer, const char *info="""");  Function called by the Stream",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:24204,Integrability,wrap,wrapper,24204,"tructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ;  ; void SetMerge (ROOT::MergeFunc_t mergeFunc);  Install a new wrapper around 'Merge'. ;  ; void SetNew (ROOT::NewFunc_t newFunc);  Install a new wrapper around 'new'. ;  ; void SetNewArray (ROOT::NewArrFunc_t newArrayFunc);  Install a new wrapper around 'new []'. ;  ; void SetResetAfterMerge (ROOT::ResetAfterMergeFunc_t resetFunc);  Install a new wrapper around 'ResetAfterMerge'. ;  ; void SetStreamerFunc (ClassStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom streamer. ;  ; TVirtualStreamerInfo * SetStreamerInfo (Int_t version, const char *info="""");  Info is a string describing the names and types of attributes written by the class Streamer function. ;  ; void SetUnloaded ();  Call this method to indicate that the shared library containing this class's code has been removed (unloaded) from the process's memory. ;  ; Int_t Size () const;  Return size of object of this class. ;  ; void Store (TBuffer &b) const;  Store class description on I/O buffer. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void Streamer (void *obj, TBuffer &b, const TClass *onfile_class=nullptr) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t WriteBuffer (TBuffer &b, void *pointer, const char *info="""");  Function called by the Streamer functions to serialize object at p to buffer b. ;  ;  Public Member Functions inherited from TDictionary;  TDictionar",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:28604,Integrability,message,message,28604," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:29145,Integrability,message,message,29145,"ct. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:30135,Integrability,message,message,30135,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method to declare a method obsolete. ;  ; void ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:32857,Integrability,message,message,32857,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void AddClass (TClass *cl);  static: Add a class to the list and map of classes. ;  ; static void AddClassToDeclIdMap (TDictionary::DeclId_t id, TClass *cl);  static: Add a TClass* to the map of classes. ;  ; static Bool_t AddRule (const char *rule);  Add a schema evolution customization rule. ;",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:33230,Integrability,message,message,33230," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void AddClass (TClass *cl);  static: Add a class to the list and map of classes. ;  ; static void AddClassToDeclIdMap (TDictionary::DeclId_t id, TClass *cl);  static: Add a TClass* to the map of classes. ;  ; static Bool_t AddRule (const char *rule);  Add a schema evolution customization rule. ;  ; static Int_t AutoBrowse (TObject *obj, TBrowser *browser);  Browse external object inherited from TObject. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; template<typename T > ; static TClass * GetClass (Bool_t load=kTRUE, Bool_t silent=kFALSE);  ; static TC",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:40076,Integrability,interface,interface,40076," *, Version_t > RepoCont_t;  ; typedef void(* StreamerImpl_t) (const TClass *pThis, void *obj, TBuffer &b, const TClass *onfile_class);  Schema evolution rules. ;  . Private Member Functions;  TClass (const TClass &tc)=delete;  ; Bool_t CanSplitBaseAllow ();  Pointer to the function implementing streaming for this class. ;  ; TList * CreateListOfDataMembers (std::atomic< TListOfDataMembers * > &data, TDictionary::EMemberSelection selection, bool load);  Create the list containing the TDataMembers (of actual data members or members pulled in through using declarations) of a class. ;  ; TVirtualStreamerInfo * DetermineCurrentStreamerInfo ();  Determine and set pointer to current TVirtualStreamerInfo. ;  ; TMethod * FindClassOrBaseMethodWithId (DeclId_t faddr);  Find a method with decl id in this class or its bases. ;  ; Int_t GetBaseClassOffsetRecurse (const TClass *toBase);  Return data member offset to the base class ""cl"". ;  ; TMethod * GetClassMethod (Longptr_t faddr);  Look for a method in this class that has the interface function address faddr. ;  ; TListOfFunctions * GetMethodList ();  Return (create an empty one if needed) the list of functions. ;  ; TVirtualStreamerInfo * GetStreamerInfoImpl (Int_t version, Bool_t silent) const;  ; void Init (const char *name, Version_t cversion, const std::type_info *info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il, ClassInfo_t *classInfo, Bool_t silent);  Initialize a TClass object. ;  ; bool IsClassStructOrUnion () const;  ; void LoadClassInfo () const;  Try to load the ClassInfo if available. ;  ; void MoveAddressInRepository (const char *where, void *oldadd, void *newadd, const TClass *what) const;  ; TClass & operator= (const TClass &)=delete;  ; void RegisterAddressInRepository (const char *where, void *location, const TClass *what) const;  ; void SetClassSize (Int_t sizof);  ; void SetClassVersion (Version_t version);  Private function. ;  ; void SetRuntimeProperties ();  Internal ro",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:41043,Integrability,rout,routine,41043,"ss faddr. ;  ; TListOfFunctions * GetMethodList ();  Return (create an empty one if needed) the list of functions. ;  ; TVirtualStreamerInfo * GetStreamerInfoImpl (Int_t version, Bool_t silent) const;  ; void Init (const char *name, Version_t cversion, const std::type_info *info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il, ClassInfo_t *classInfo, Bool_t silent);  Initialize a TClass object. ;  ; bool IsClassStructOrUnion () const;  ; void LoadClassInfo () const;  Try to load the ClassInfo if available. ;  ; void MoveAddressInRepository (const char *where, void *oldadd, void *newadd, const TClass *what) const;  ; TClass & operator= (const TClass &)=delete;  ; void RegisterAddressInRepository (const char *where, void *location, const TClass *what) const;  ; void SetClassSize (Int_t sizof);  ; void SetClassVersion (Version_t version);  Private function. ;  ; void SetRuntimeProperties ();  Internal routine to set calculate the class properties that can only be known at run-time, for example whether the Hash member function and the destructor are consistent. ;  ; void SetStreamerImpl ();  Internal routine to set fStreamerImpl based on the value of fStreamerType. ;  ; void UnregisterAddressInRepository (const char *where, void *location, const TClass *what) const;  . Static Private Member Functions; static void ConvStreamerInstrumented (const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class);  Case of instrumented class with a library. ;  ; static DeclIdMap_t * GetDeclIdMap ();  ; static IdMap_t * GetIdMap ();  ; static Bool_t HasNoInfoOrEmuOrFwdDeclaredDecl (const char *);  ; static TClass * LoadClassCustom (const char *requestedname, Bool_t silent);  Helper function used by TClass::GetClass(). ;  ; static TClass * LoadClassDefault (const char *requestedname, Bool_t silent);  Helper function used by TClass::GetClass(). ;  ; static void StreamerDefault (const TClass *pThis, void *object, TBuffer &b, const TClass *onfile",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:41245,Integrability,rout,routine,41245,"oImpl (Int_t version, Bool_t silent) const;  ; void Init (const char *name, Version_t cversion, const std::type_info *info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il, ClassInfo_t *classInfo, Bool_t silent);  Initialize a TClass object. ;  ; bool IsClassStructOrUnion () const;  ; void LoadClassInfo () const;  Try to load the ClassInfo if available. ;  ; void MoveAddressInRepository (const char *where, void *oldadd, void *newadd, const TClass *what) const;  ; TClass & operator= (const TClass &)=delete;  ; void RegisterAddressInRepository (const char *where, void *location, const TClass *what) const;  ; void SetClassSize (Int_t sizof);  ; void SetClassVersion (Version_t version);  Private function. ;  ; void SetRuntimeProperties ();  Internal routine to set calculate the class properties that can only be known at run-time, for example whether the Hash member function and the destructor are consistent. ;  ; void SetStreamerImpl ();  Internal routine to set fStreamerImpl based on the value of fStreamerType. ;  ; void UnregisterAddressInRepository (const char *where, void *location, const TClass *what) const;  . Static Private Member Functions; static void ConvStreamerInstrumented (const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class);  Case of instrumented class with a library. ;  ; static DeclIdMap_t * GetDeclIdMap ();  ; static IdMap_t * GetIdMap ();  ; static Bool_t HasNoInfoOrEmuOrFwdDeclaredDecl (const char *);  ; static TClass * LoadClassCustom (const char *requestedname, Bool_t silent);  Helper function used by TClass::GetClass(). ;  ; static TClass * LoadClassDefault (const char *requestedname, Bool_t silent);  Helper function used by TClass::GetClass(). ;  ; static void StreamerDefault (const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class);  Default streaming in cases where either we have no way to know what to do or if Property() has not yet been called. ;  ; static void StreamerExter",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:49741,Integrability,interface,interface,49741,"; kHasLocalHashMember ; kIgnoreTObjectStreamer ; kUnloaded ; kIsTObject ; kIsForeign ; kStartWithTObject ; kWarned ; kHasNameMapNode . Definition at line 92 of file TClass.h. ◆ EStreamerType. enum TClass::EStreamerType. private . EnumeratorkDefault ; kEmulatedStreamer ; kTObject ; kInstrumented ; kForeign ; kExternal . Definition at line 334 of file TClass.h. Constructor & Destructor Documentation. ◆ TClass() [1/8]. TClass::TClass ; (; const TClass & ; tc). privatedelete . ◆ TClass() [2/8]. TClass::TClass ; (; ). Internal, default constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1065 of file TClass.cxx. ◆ TClass() [3/8]. TClass::TClass ; (; const char * ; name, . Bool_t ; silent = kFALSE . ). Create a TClass object. ; This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Only useful to get a temporary TClass interface to an interpreted class. Used by TTabCom.; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1103 of file TClass.cxx. ◆ TClass() [4/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1151 of file TClass.cxx. ◆ TClass() [5/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . EState ; theState, . Bool_t ; silent = kFALSE . ). Internal constructor, mimicing the case of a class fwd declared in the interpreter. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1179 of file TClass.cxx. ◆ TClass() [6/8]. TClass::TClass ; (; ClassInfo_t * ; classInfo, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:51016,Integrability,interface,interface,51016,"ool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1151 of file TClass.cxx. ◆ TClass() [5/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . EState ; theState, . Bool_t ; silent = kFALSE . ). Internal constructor, mimicing the case of a class fwd declared in the interpreter. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1179 of file TClass.cxx. ◆ TClass() [6/8]. TClass::TClass ; (; ClassInfo_t * ; classInfo, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; Create a TClass object. This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Most useful to get a TClass interface to an interpreted class. Used by TTabCom.; This copies the ClassInfo (i.e. does not take ownership of it).; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1224 of file TClass.cxx. ◆ TClass() [7/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1275 of file TClass.cxx. ◆ TClass() [8/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 130",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:75409,Integrability,interface,interface,75409,"int_pair_offset = 0, . size_t ; hint_pair_size = 0 . ). static . Return pointer to class with name. ; Definition at line 3254 of file TClass.cxx. ◆ GetClass() [6/6]. Bool_t TClass::GetClass ; (; DeclId_t ; id, . std::vector< TClass * > & ; classes . ). static . Definition at line 3404 of file TClass.cxx. ◆ GetClassInfo(). ClassInfo_t * TClass::GetClassInfo ; (; ); const. inline . Definition at line 433 of file TClass.h. ◆ GetClassMethod() [1/2]. TMethod * TClass::GetClassMethod ; (; const char * ; name, . const char * ; params, . Bool_t ; objectIsConst = kFALSE . ). Look for a method in this class that has the name and matches the parameters. ; The params string must contain argument values, like ""3189, \""aap\"", 1.3"". Returns 0 in case method is not found. See TClass::GetMethod to also search the base classes. ; Definition at line 4502 of file TClass.cxx. ◆ GetClassMethod() [2/2]. TMethod * TClass::GetClassMethod ; (; Longptr_t ; faddr). private . Look for a method in this class that has the interface function address faddr. ; Definition at line 4483 of file TClass.cxx. ◆ GetClassMethodWithPrototype(). TMethod * TClass::GetClassMethodWithPrototype ; (; const char * ; name, . const char * ; proto, . Bool_t ; objectIsConst = kFALSE, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). Find the method with a given prototype. ; The proto string must be of the form: ""char*,int,double"". Returns 0 in case method is not found. See TClass::GetMethodWithPrototype to also search the base classes. ; Definition at line 4527 of file TClass.cxx. ◆ GetClassSize(). Int_t TClass::GetClassSize ; (; ); const. inline . Definition at line 425 of file TClass.h. ◆ GetClassVersion(). Version_t TClass::GetClassVersion ; (; ); const. inline . Definition at line 420 of file TClass.h. ◆ GetCollectionProxy(). TVirtualCollectionProxy * TClass::GetCollectionProxy ; (; ); const. Return the proxy describing the collection (if any). ; Definition at line 2897 of file TClass.cxx. ◆ GetCollect",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:77515,Integrability,wrap,wrapper,77515," it is not representing an STL collection. ; Definition at line 2886 of file TClass.cxx. ◆ GetContextMenuTitle(). const char * TClass::GetContextMenuTitle ; (; ); const. inline . Definition at line 438 of file TClass.h. ◆ GetConversionStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::GetConversionStreamerInfo ; (; const char * ; onfile_classname, . Int_t ; version . ); const. Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. ; Definition at line 7086 of file TClass.cxx. ◆ GetConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::GetConversionStreamerInfo ; (; const TClass * ; onfile_cl, . Int_t ; version . ); const. Return a Conversion StreamerInfo from the class represented by cl for version number 'version' to this class, if any. ; Definition at line 7097 of file TClass.cxx. ◆ GetConvStreamerFunc(). ClassConvStreamerFunc_t TClass::GetConvStreamerFunc ; (; ); const. Get a wrapper/accessor function around this class custom conversion streamer (member function). ; Definition at line 2947 of file TClass.cxx. ◆ GetCurrentStreamerInfo(). TVirtualStreamerInfo * TClass::GetCurrentStreamerInfo ; (; ). inline . Definition at line 439 of file TClass.h. ◆ GetDataMember(). TDataMember * TClass::GetDataMember ; (; const char * ; datamember); const. Return pointer to datamember object with name ""datamember"". ; Definition at line 3439 of file TClass.cxx. ◆ GetDataMemberOffset(). Longptr_t TClass::GetDataMemberOffset ; (; const char * ; name); const. return offset for member name. ; name can be a data member in the class itself, one of its base classes, or one member in one of the aggregated classes.; In case of an emulated class, the list of emulated TRealData is built ; Definition at line 3477 of file TClass.cxx. ◆ GetDeclFileLine(). Short_t TClass::GetDeclFileLine ; (; ); const. inline . Definition at line 429 of file TClass.h. ◆ GetDeclFileName(). const char * TClass::GetDeclFileName ; (; ); const. Return",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:78857,Integrability,wrap,wrapper,78857,"atamember); const. Return pointer to datamember object with name ""datamember"". ; Definition at line 3439 of file TClass.cxx. ◆ GetDataMemberOffset(). Longptr_t TClass::GetDataMemberOffset ; (; const char * ; name); const. return offset for member name. ; name can be a data member in the class itself, one of its base classes, or one member in one of the aggregated classes.; In case of an emulated class, the list of emulated TRealData is built ; Definition at line 3477 of file TClass.cxx. ◆ GetDeclFileLine(). Short_t TClass::GetDeclFileLine ; (; ); const. inline . Definition at line 429 of file TClass.h. ◆ GetDeclFileName(). const char * TClass::GetDeclFileName ; (; ); const. Return name of the file containing the declaration of this class. ; Definition at line 3463 of file TClass.cxx. ◆ GetDeclIdMap(). DeclIdMap_t * TClass::GetDeclIdMap ; (; ). staticprivate . Definition at line 480 of file TClass.cxx. ◆ GetDelete(). ROOT::DelFunc_t TClass::GetDelete ; (; ); const. Return the wrapper around delete ThiObject. ; Definition at line 7463 of file TClass.cxx. ◆ GetDeleteArray(). ROOT::DelArrFunc_t TClass::GetDeleteArray ; (; ); const. Return the wrapper around delete [] ThiObject. ; Definition at line 7471 of file TClass.cxx. ◆ GetDestructor(). ROOT::DesFunc_t TClass::GetDestructor ; (; ); const. Return the wrapper around the destructor. ; Definition at line 7479 of file TClass.cxx. ◆ GetDict() [1/2]. DictFuncPtr_t TClass::GetDict ; (; const char * ; cname). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3422 of file TClass.cxx. ◆ GetDict() [2/2]. DictFuncPtr_t TClass::GetDict ; (; const std::type_info & ; info). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3431 of file TClass.cxx. ◆ GetDirectoryAutoAdd(). ROOT::DirAutoAdd_t TClass::GetDirectoryAutoAdd ; (; ); const. Return the wrapper around the directory auto add function. ; Definition at line 7487 of fil",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:79024,Integrability,wrap,wrapper,79024,"GetDataMemberOffset ; (; const char * ; name); const. return offset for member name. ; name can be a data member in the class itself, one of its base classes, or one member in one of the aggregated classes.; In case of an emulated class, the list of emulated TRealData is built ; Definition at line 3477 of file TClass.cxx. ◆ GetDeclFileLine(). Short_t TClass::GetDeclFileLine ; (; ); const. inline . Definition at line 429 of file TClass.h. ◆ GetDeclFileName(). const char * TClass::GetDeclFileName ; (; ); const. Return name of the file containing the declaration of this class. ; Definition at line 3463 of file TClass.cxx. ◆ GetDeclIdMap(). DeclIdMap_t * TClass::GetDeclIdMap ; (; ). staticprivate . Definition at line 480 of file TClass.cxx. ◆ GetDelete(). ROOT::DelFunc_t TClass::GetDelete ; (; ); const. Return the wrapper around delete ThiObject. ; Definition at line 7463 of file TClass.cxx. ◆ GetDeleteArray(). ROOT::DelArrFunc_t TClass::GetDeleteArray ; (; ); const. Return the wrapper around delete [] ThiObject. ; Definition at line 7471 of file TClass.cxx. ◆ GetDestructor(). ROOT::DesFunc_t TClass::GetDestructor ; (; ); const. Return the wrapper around the destructor. ; Definition at line 7479 of file TClass.cxx. ◆ GetDict() [1/2]. DictFuncPtr_t TClass::GetDict ; (; const char * ; cname). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3422 of file TClass.cxx. ◆ GetDict() [2/2]. DictFuncPtr_t TClass::GetDict ; (; const std::type_info & ; info). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3431 of file TClass.cxx. ◆ GetDirectoryAutoAdd(). ROOT::DirAutoAdd_t TClass::GetDirectoryAutoAdd ; (; ); const. Return the wrapper around the directory auto add function. ; Definition at line 7487 of file TClass.cxx. ◆ GetFunctionTemplate(). TFunctionTemplate * TClass::GetFunctionTemplate ; (; const char * ; name). Definition at line 3607 of file TClass.cxx. ◆ GetHeapIn",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:79189,Integrability,wrap,wrapper,79189,"ne member in one of the aggregated classes.; In case of an emulated class, the list of emulated TRealData is built ; Definition at line 3477 of file TClass.cxx. ◆ GetDeclFileLine(). Short_t TClass::GetDeclFileLine ; (; ); const. inline . Definition at line 429 of file TClass.h. ◆ GetDeclFileName(). const char * TClass::GetDeclFileName ; (; ); const. Return name of the file containing the declaration of this class. ; Definition at line 3463 of file TClass.cxx. ◆ GetDeclIdMap(). DeclIdMap_t * TClass::GetDeclIdMap ; (; ). staticprivate . Definition at line 480 of file TClass.cxx. ◆ GetDelete(). ROOT::DelFunc_t TClass::GetDelete ; (; ); const. Return the wrapper around delete ThiObject. ; Definition at line 7463 of file TClass.cxx. ◆ GetDeleteArray(). ROOT::DelArrFunc_t TClass::GetDeleteArray ; (; ); const. Return the wrapper around delete [] ThiObject. ; Definition at line 7471 of file TClass.cxx. ◆ GetDestructor(). ROOT::DesFunc_t TClass::GetDestructor ; (; ); const. Return the wrapper around the destructor. ; Definition at line 7479 of file TClass.cxx. ◆ GetDict() [1/2]. DictFuncPtr_t TClass::GetDict ; (; const char * ; cname). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3422 of file TClass.cxx. ◆ GetDict() [2/2]. DictFuncPtr_t TClass::GetDict ; (; const std::type_info & ; info). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3431 of file TClass.cxx. ◆ GetDirectoryAutoAdd(). ROOT::DirAutoAdd_t TClass::GetDirectoryAutoAdd ; (; ); const. Return the wrapper around the directory auto add function. ; Definition at line 7487 of file TClass.cxx. ◆ GetFunctionTemplate(). TFunctionTemplate * TClass::GetFunctionTemplate ; (; const char * ; name). Definition at line 3607 of file TClass.cxx. ◆ GetHeapInstanceCount(). UInt_t TClass::GetHeapInstanceCount ; (; ); const. inline . Definition at line 467 of file TClass.h. ◆ GetIdMap(). IdMap_t * TClass::GetIdMap ; (; ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:79787,Integrability,wrap,wrapper,79787,elFunc_t TClass::GetDelete ; (; ); const. Return the wrapper around delete ThiObject. ; Definition at line 7463 of file TClass.cxx. ◆ GetDeleteArray(). ROOT::DelArrFunc_t TClass::GetDeleteArray ; (; ); const. Return the wrapper around delete [] ThiObject. ; Definition at line 7471 of file TClass.cxx. ◆ GetDestructor(). ROOT::DesFunc_t TClass::GetDestructor ; (; ); const. Return the wrapper around the destructor. ; Definition at line 7479 of file TClass.cxx. ◆ GetDict() [1/2]. DictFuncPtr_t TClass::GetDict ; (; const char * ; cname). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3422 of file TClass.cxx. ◆ GetDict() [2/2]. DictFuncPtr_t TClass::GetDict ; (; const std::type_info & ; info). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3431 of file TClass.cxx. ◆ GetDirectoryAutoAdd(). ROOT::DirAutoAdd_t TClass::GetDirectoryAutoAdd ; (; ); const. Return the wrapper around the directory auto add function. ; Definition at line 7487 of file TClass.cxx. ◆ GetFunctionTemplate(). TFunctionTemplate * TClass::GetFunctionTemplate ; (; const char * ; name). Definition at line 3607 of file TClass.cxx. ◆ GetHeapInstanceCount(). UInt_t TClass::GetHeapInstanceCount ; (; ); const. inline . Definition at line 467 of file TClass.h. ◆ GetIdMap(). IdMap_t * TClass::GetIdMap ; (; ). staticprivate . Definition at line 469 of file TClass.cxx. ◆ GetImplFileLine(). Short_t TClass::GetImplFileLine ; (; ); const. inline . Definition at line 457 of file TClass.h. ◆ GetImplFileName(). const char * TClass::GetImplFileName ; (; ); const. inline . Definition at line 456 of file TClass.h. ◆ GetInstanceCount(). UInt_t TClass::GetInstanceCount ; (; ); const. inline . Definition at line 466 of file TClass.h. ◆ GetIsAProxy(). TVirtualIsAProxy * TClass::GetIsAProxy ; (; ); const. Return the proxy implementing the IsA functionality. ; Definition at line 2955 of file TClass.cxx. ◆ GetLastReadIn,MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:84569,Integrability,wrap,wrapper,84569,"hods ; (; Bool_t ; load = kTRUE). Return list containing the TMethods of a class. ; If load is true, the list is populated with all the defined function and currently instantiated function template. ; Definition at line 3812 of file TClass.cxx. ◆ GetListOfRealData(). TList * TClass::GetListOfRealData ; (; ); const. inline . Definition at line 453 of file TClass.h. ◆ GetListOfUsingDataMembers(). TList * TClass::GetListOfUsingDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of using declarations of a class. ; Definition at line 3786 of file TClass.cxx. ◆ GetMenuItems(). void TClass::GetMenuItems ; (; TList * ; listitems). Returns list of methods accessible by context menu. ; Definition at line 3874 of file TClass.cxx. ◆ GetMenuList(). TList * TClass::GetMenuList ; (; ); const. Return the list of menu items associated with the class. ; Definition at line 4341 of file TClass.cxx. ◆ GetMerge(). ROOT::MergeFunc_t TClass::GetMerge ; (; ); const. Return the wrapper around Merge. ; Definition at line 7431 of file TClass.cxx. ◆ GetMethod(). TMethod * TClass::GetMethod ; (; const char * ; method, . const char * ; params, . Bool_t ; objectIsConst = kFALSE . ). Find the best method (if there is one) matching the parameters. ; The params string must contain argument values, like ""3189, \""aap\"", 1.3"". The function invokes GetClassMethod to search for a possible method in the class itself or in its base classes. Returns 0 in case method is not found. ; Definition at line 4411 of file TClass.cxx. ◆ GetMethodAllAny(). TMethod * TClass::GetMethodAllAny ; (; const char * ; method). Return pointer to method without looking at parameters. ; Does look in all base classes. ; Definition at line 4384 of file TClass.cxx. ◆ GetMethodAny(). TMethod * TClass::GetMethodAny ; (; const char * ; method). Return pointer to method without looking at parameters. ; Does not look in (possible) base classes. Has the side effect of loading all the TMethod object in the list o",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:88485,Integrability,wrap,wrapper,88485," result, . TCollection & ; visited, . bool ; recurse . ). protected . Verify the Data Members. ; Definition at line 3944 of file TClass.cxx. ◆ GetMissingDictionariesForPairElements(). void TClass::GetMissingDictionariesForPairElements ; (; TCollection & ; result, . TCollection & ; visited, . bool ; recurse . ). protected . Definition at line 3973 of file TClass.cxx. ◆ GetMissingDictionariesWithRecursionCheck(). void TClass::GetMissingDictionariesWithRecursionCheck ; (; TCollection & ; result, . TCollection & ; visited, . bool ; recurse . ). protected . From the second level of recursion onwards it is different state check. ; Definition at line 3990 of file TClass.cxx. ◆ GetNdata(). Int_t TClass::GetNdata ; (; ). Return the number of data members of this class Note that in case the list of data members is not yet created, it will be done by GetListOfDataMembers(). ; Definition at line 4554 of file TClass.cxx. ◆ GetNew(). ROOT::NewFunc_t TClass::GetNew ; (; ); const. Return the wrapper around new ThisClass(). ; Definition at line 7447 of file TClass.cxx. ◆ GetNewArray(). ROOT::NewArrFunc_t TClass::GetNewArray ; (; ); const. Return the wrapper around new ThisClass[]. ; Definition at line 7455 of file TClass.cxx. ◆ GetNmethods(). Int_t TClass::GetNmethods ; (; ). Return the number of methods of this class Note that in case the list of methods is not yet created, it will be done by GetListOfMethods(). ; This will also load/populate the list of methods, to get 'just' the number of currently loaded methods use: cl->GetListOfMethods(false)->GetSize(); ; Definition at line 4573 of file TClass.cxx. ◆ GetPersistentRef(). TClass *const * TClass::GetPersistentRef ; (; ); const. inline . Definition at line 481 of file TClass.h. ◆ GetRealData(). TRealData * TClass::GetRealData ; (; const char * ; name); const. Return pointer to TRealData element with name ""name"". ; Name can be a data member in the class itself, one of its base classes, or a member in one of the aggregated classes.;",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:88645,Integrability,wrap,wrapper,88645,"ariesForPairElements(). void TClass::GetMissingDictionariesForPairElements ; (; TCollection & ; result, . TCollection & ; visited, . bool ; recurse . ). protected . Definition at line 3973 of file TClass.cxx. ◆ GetMissingDictionariesWithRecursionCheck(). void TClass::GetMissingDictionariesWithRecursionCheck ; (; TCollection & ; result, . TCollection & ; visited, . bool ; recurse . ). protected . From the second level of recursion onwards it is different state check. ; Definition at line 3990 of file TClass.cxx. ◆ GetNdata(). Int_t TClass::GetNdata ; (; ). Return the number of data members of this class Note that in case the list of data members is not yet created, it will be done by GetListOfDataMembers(). ; Definition at line 4554 of file TClass.cxx. ◆ GetNew(). ROOT::NewFunc_t TClass::GetNew ; (; ); const. Return the wrapper around new ThisClass(). ; Definition at line 7447 of file TClass.cxx. ◆ GetNewArray(). ROOT::NewArrFunc_t TClass::GetNewArray ; (; ); const. Return the wrapper around new ThisClass[]. ; Definition at line 7455 of file TClass.cxx. ◆ GetNmethods(). Int_t TClass::GetNmethods ; (; ). Return the number of methods of this class Note that in case the list of methods is not yet created, it will be done by GetListOfMethods(). ; This will also load/populate the list of methods, to get 'just' the number of currently loaded methods use: cl->GetListOfMethods(false)->GetSize(); ; Definition at line 4573 of file TClass.cxx. ◆ GetPersistentRef(). TClass *const * TClass::GetPersistentRef ; (; ); const. inline . Definition at line 481 of file TClass.h. ◆ GetRealData(). TRealData * TClass::GetRealData ; (; const char * ; name); const. Return pointer to TRealData element with name ""name"". ; Name can be a data member in the class itself, one of its base classes, or a member in one of the aggregated classes.; In case of an emulated class, the list of emulated TRealData is built. ; Definition at line 3503 of file TClass.cxx. ◆ GetReferenceProxy(). TVirtualRefProxy * ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:89851,Integrability,wrap,wrapper,89851,"is not yet created, it will be done by GetListOfMethods(). ; This will also load/populate the list of methods, to get 'just' the number of currently loaded methods use: cl->GetListOfMethods(false)->GetSize(); ; Definition at line 4573 of file TClass.cxx. ◆ GetPersistentRef(). TClass *const * TClass::GetPersistentRef ; (; ); const. inline . Definition at line 481 of file TClass.h. ◆ GetRealData(). TRealData * TClass::GetRealData ; (; const char * ; name); const. Return pointer to TRealData element with name ""name"". ; Name can be a data member in the class itself, one of its base classes, or a member in one of the aggregated classes.; In case of an emulated class, the list of emulated TRealData is built. ; Definition at line 3503 of file TClass.cxx. ◆ GetReferenceProxy(). TVirtualRefProxy * TClass::GetReferenceProxy ; (; ); const. inline . Definition at line 483 of file TClass.h. ◆ GetResetAfterMerge(). ROOT::ResetAfterMergeFunc_t TClass::GetResetAfterMerge ; (; ); const. Return the wrapper around Merge. ; Definition at line 7439 of file TClass.cxx. ◆ GetSchemaRules() [1/2]. const ROOT::Detail::TSchemaRuleSet * TClass::GetSchemaRules ; (; ); const. Return the set of the schema rules if any. ; Definition at line 1932 of file TClass.cxx. ◆ GetSchemaRules() [2/2]. ROOT::Detail::TSchemaRuleSet * TClass::GetSchemaRules ; (; Bool_t ; create = kFALSE). Return the set of the schema rules if any. ; If create is true, create an empty set ; Definition at line 1941 of file TClass.cxx. ◆ GetSharedLibs(). const char * TClass::GetSharedLibs ; (; ). Get the list of shared libraries containing the code for class cls. ; The first library in the list is the one containing the class, the others are the libraries the first one depends on. Returns 0 in case the library is not found. ; Definition at line 3623 of file TClass.cxx. ◆ GetShowMembersWrapper(). ShowMembersFunc_t TClass::GetShowMembersWrapper ; (; ); const. inline . Definition at line 487 of file TClass.h. ◆ GetState(). EState TCla",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:90589,Integrability,depend,depends,90589,"ulated TRealData is built. ; Definition at line 3503 of file TClass.cxx. ◆ GetReferenceProxy(). TVirtualRefProxy * TClass::GetReferenceProxy ; (; ); const. inline . Definition at line 483 of file TClass.h. ◆ GetResetAfterMerge(). ROOT::ResetAfterMergeFunc_t TClass::GetResetAfterMerge ; (; ); const. Return the wrapper around Merge. ; Definition at line 7439 of file TClass.cxx. ◆ GetSchemaRules() [1/2]. const ROOT::Detail::TSchemaRuleSet * TClass::GetSchemaRules ; (; ); const. Return the set of the schema rules if any. ; Definition at line 1932 of file TClass.cxx. ◆ GetSchemaRules() [2/2]. ROOT::Detail::TSchemaRuleSet * TClass::GetSchemaRules ; (; Bool_t ; create = kFALSE). Return the set of the schema rules if any. ; If create is true, create an empty set ; Definition at line 1941 of file TClass.cxx. ◆ GetSharedLibs(). const char * TClass::GetSharedLibs ; (; ). Get the list of shared libraries containing the code for class cls. ; The first library in the list is the one containing the class, the others are the libraries the first one depends on. Returns 0 in case the library is not found. ; Definition at line 3623 of file TClass.cxx. ◆ GetShowMembersWrapper(). ShowMembersFunc_t TClass::GetShowMembersWrapper ; (; ); const. inline . Definition at line 487 of file TClass.h. ◆ GetState(). EState TClass::GetState ; (; ); const. inline . Definition at line 488 of file TClass.h. ◆ GetStreamer(). TClassStreamer * TClass::GetStreamer ; (; ); const. Return the Streamer Class allowing streaming (if any). ; Definition at line 2914 of file TClass.cxx. ◆ GetStreamerFunc(). ClassStreamerFunc_t TClass::GetStreamerFunc ; (; ); const. Get a wrapper/accessor function around this class custom streamer (member function). ; Definition at line 2939 of file TClass.cxx. ◆ GetStreamerInfo(). TVirtualStreamerInfo * TClass::GetStreamerInfo ; (; Int_t ; version = 0, . Bool_t ; isTransient = kFALSE . ); const. returns a pointer to the TVirtualStreamerInfo object for version If the object does not",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:91190,Integrability,wrap,wrapper,91190,"rn the set of the schema rules if any. ; If create is true, create an empty set ; Definition at line 1941 of file TClass.cxx. ◆ GetSharedLibs(). const char * TClass::GetSharedLibs ; (; ). Get the list of shared libraries containing the code for class cls. ; The first library in the list is the one containing the class, the others are the libraries the first one depends on. Returns 0 in case the library is not found. ; Definition at line 3623 of file TClass.cxx. ◆ GetShowMembersWrapper(). ShowMembersFunc_t TClass::GetShowMembersWrapper ; (; ); const. inline . Definition at line 487 of file TClass.h. ◆ GetState(). EState TClass::GetState ; (; ); const. inline . Definition at line 488 of file TClass.h. ◆ GetStreamer(). TClassStreamer * TClass::GetStreamer ; (; ); const. Return the Streamer Class allowing streaming (if any). ; Definition at line 2914 of file TClass.cxx. ◆ GetStreamerFunc(). ClassStreamerFunc_t TClass::GetStreamerFunc ; (; ); const. Get a wrapper/accessor function around this class custom streamer (member function). ; Definition at line 2939 of file TClass.cxx. ◆ GetStreamerInfo(). TVirtualStreamerInfo * TClass::GetStreamerInfo ; (; Int_t ; version = 0, . Bool_t ; isTransient = kFALSE . ); const. returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ; Note: There are two special version numbers: - 0: Use the class version from the currently loaded class library.; - -1: Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4599 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:94314,Integrability,rout,routine,94314,"inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ; Definition at line 508 of file TClass.h. ◆ HasDataMemberInfo(). Bool_t TClass::HasDataMemberInfo ; (; ); const. inline . Definition at line 407 of file TClass.h. ◆ HasDefaultConstructor(). Bool_t TClass::HasDefaultConstructor ; (; Bool_t ; testio = kFALSE); const. Return true if we have access to a constructor usable for I/O. ; This is typically the default constructor but can also be a constructor specifically marked for I/O (for example a constructor taking a TRootIOCtor* as an argument). In other words, if this routine returns true, TClass::New is guarantee to succeed. To know if the class described by this TClass has a default constructor (public or not), use cl->GetProperty() & kClassHasDefaultCtor; kClassHasDefaultCtor@ kClassHasDefaultCtorDefinition TDictionary.h:140; To know if the class described by this TClass has a public default constructor use: gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; gInterpreter#define gInterpreterDefinition TInterpreter.h:573. Definition at line 7393 of file TClass.cxx. ◆ HasDictionary(). Bool_t TClass::HasDictionary ; (; ); const. Check whether a class has a dictionary or not. ; This is equivalent to ask if a class is coming from a bootstrapping procedure initiated during the loading of a library. ; Definition at line 3906 of file TClass.cxx. ◆ HasDictionarySelection(). Bool_t TClass::HasDictionarySelection ; (; const char * ; clname). static . Check whether a class has a dictionary or ROOT can load one. ; This is equivalent to ask HasDictionary() ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:105342,Integrability,message,message,105342,"ckSum ; (; UInt_t ; checksum); const. Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ; Definition at line 6494 of file TClass.cxx. ◆ Move(). void TClass::Move ; (; void * ; arenaFrom, . void * ; arenaTo . ); const. Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ; Definition at line 4327 of file TClass.cxx. ◆ MoveAddressInRepository(). void TClass::MoveAddressInRepository ; (; const char * ; where, . void * ; oldadd, . void * ; newadd, . const TClass * ; what . ); const. private . Definition at line 337 of file TClass.cxx. ◆ New() [1/2]. void * TClass::New ; (; ENewType ; defConstructor = kClassNew, . Bool_t ; quiet = kFALSE . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew().; If quiet is true, do no issue a message via Error on case of problems, just return 0.; The constructor actually called here can be customized by using the rootcint pragma: #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass, this method will called the first of the following 3 constructors which exists and is public: MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted.; TRootIOCtorDefinition TRootIOCtor.h:33; When more than one pragma ioctortype is used, the first seen as priority For example with: #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order: MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. Definition at line 4978 of file TClass.cxx. ◆ New() [2/2]. void * TClass::New ; (; void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocate",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:114188,Integrability,interface,interface,114188,"e that the current ClassInfo is up to date. ; Definition at line 4172 of file TClass.cxx. ◆ ResetInstanceCount(). void TClass::ResetInstanceCount ; (; ). inline . Definition at line 547 of file TClass.h. ◆ ResetMenuList(). void TClass::ResetMenuList ; (; ). Resets the menu list to it's standard value. ; Definition at line 4243 of file TClass.cxx. ◆ SetCanSplit(). void TClass::SetCanSplit ; (; Int_t ; splitmode). Set the splitability of this class: . -1: Use the default calculation; 0: Disallow splitting; 1: Always allow splitting.; 2: Disallow splitting of the class and splitting of any it's derived classes. . Definition at line 5658 of file TClass.cxx. ◆ SetClassSize(). void TClass::SetClassSize ; (; Int_t ; sizof). inlineprivate . Definition at line 307 of file TClass.h. ◆ SetClassVersion(). void TClass::SetClassVersion ; (; Version_t ; version). private . Private function. ; Set the class version for the 'class' represented by this TClass object. See the public interface: ROOT::ResetClassVersion defined in TClassTable.cxx; Note on class version numbers:; If no class number has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specified via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 5675 of file TClass.cxx. ◆ SetCollectionProxy(). void TClass::SetCollectionProxy ; (; const ROOT::Detail::TCollectionProxyInfo & ; info). Create the collection proxy object (and the streamer object) from using the information in the TCollectionProxyInfo. ; Definition at line 6244 of file TClass.cxx. ◆ SetContextMenuTitle(). void TClass::SetContextMenuTitle ; (; const char * ; title). Change (i.e. set) the title of the TNamed. ; Definition at line 6269 of file TClass.cxx. ◆ SetConvStreamerFunc(). void TClass::SetConvStreamerFunc ; (; ClassConvStreamerFunc_t ; strm). Set a wrapper/accessor function around this class cus",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:115162,Integrability,wrap,wrapper,115162,"ace: ROOT::ResetClassVersion defined in TClassTable.cxx; Note on class version numbers:; If no class number has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specified via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 5675 of file TClass.cxx. ◆ SetCollectionProxy(). void TClass::SetCollectionProxy ; (; const ROOT::Detail::TCollectionProxyInfo & ; info). Create the collection proxy object (and the streamer object) from using the information in the TCollectionProxyInfo. ; Definition at line 6244 of file TClass.cxx. ◆ SetContextMenuTitle(). void TClass::SetContextMenuTitle ; (; const char * ; title). Change (i.e. set) the title of the TNamed. ; Definition at line 6269 of file TClass.cxx. ◆ SetConvStreamerFunc(). void TClass::SetConvStreamerFunc ; (; ClassConvStreamerFunc_t ; strm). Set a wrapper/accessor function around this class custom conversion streamer. ; Definition at line 6945 of file TClass.cxx. ◆ SetCurrentStreamerInfo(). void TClass::SetCurrentStreamerInfo ; (; TVirtualStreamerInfo * ; info). Set pointer to current TVirtualStreamerInfo. ; Definition at line 5696 of file TClass.cxx. ◆ SetDeclFile(). void TClass::SetDeclFile ; (; const char * ; name, . Short_t ; line . ). inline . Definition at line 555 of file TClass.h. ◆ SetDelete(). void TClass::SetDelete ; (; ROOT::DelFunc_t ; deleteFunc). Install a new wrapper around 'delete'. ; Definition at line 7001 of file TClass.cxx. ◆ SetDeleteArray(). void TClass::SetDeleteArray ; (; ROOT::DelArrFunc_t ; deleteArrayFunc). Install a new wrapper around 'delete []'. ; Definition at line 7009 of file TClass.cxx. ◆ SetDestructor(). void TClass::SetDestructor ; (; ROOT::DesFunc_t ; destructorFunc). Install a new wrapper around the destructor. ; Definition at line 7017 of file TClass.cxx. ◆ SetDirectoryAutoAdd(). void TClass::SetDirectoryAutoAdd ; (; ROO",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:115700,Integrability,wrap,wrapper,115700,"xyInfo & ; info). Create the collection proxy object (and the streamer object) from using the information in the TCollectionProxyInfo. ; Definition at line 6244 of file TClass.cxx. ◆ SetContextMenuTitle(). void TClass::SetContextMenuTitle ; (; const char * ; title). Change (i.e. set) the title of the TNamed. ; Definition at line 6269 of file TClass.cxx. ◆ SetConvStreamerFunc(). void TClass::SetConvStreamerFunc ; (; ClassConvStreamerFunc_t ; strm). Set a wrapper/accessor function around this class custom conversion streamer. ; Definition at line 6945 of file TClass.cxx. ◆ SetCurrentStreamerInfo(). void TClass::SetCurrentStreamerInfo ; (; TVirtualStreamerInfo * ; info). Set pointer to current TVirtualStreamerInfo. ; Definition at line 5696 of file TClass.cxx. ◆ SetDeclFile(). void TClass::SetDeclFile ; (; const char * ; name, . Short_t ; line . ). inline . Definition at line 555 of file TClass.h. ◆ SetDelete(). void TClass::SetDelete ; (; ROOT::DelFunc_t ; deleteFunc). Install a new wrapper around 'delete'. ; Definition at line 7001 of file TClass.cxx. ◆ SetDeleteArray(). void TClass::SetDeleteArray ; (; ROOT::DelArrFunc_t ; deleteArrayFunc). Install a new wrapper around 'delete []'. ; Definition at line 7009 of file TClass.cxx. ◆ SetDestructor(). void TClass::SetDestructor ; (; ROOT::DesFunc_t ; destructorFunc). Install a new wrapper around the destructor. ; Definition at line 7017 of file TClass.cxx. ◆ SetDirectoryAutoAdd(). void TClass::SetDirectoryAutoAdd ; (; ROOT::DirAutoAdd_t ; autoAddFunc). Install a new wrapper around the directory auto add function. ; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir) and should register 'obj' to the directory if dir is not null and unregister 'obj' from its current directory if dir is null ; Definition at line 7028 of file TClass.cxx. ◆ SetGlobalIsA(). void TClass::SetGlobalIsA ; (; IsAGlobalFunc_t ; func). This function installs a global IsA function for this class. ; The global IsA function will",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:115877,Integrability,wrap,wrapper,115877,". ◆ SetContextMenuTitle(). void TClass::SetContextMenuTitle ; (; const char * ; title). Change (i.e. set) the title of the TNamed. ; Definition at line 6269 of file TClass.cxx. ◆ SetConvStreamerFunc(). void TClass::SetConvStreamerFunc ; (; ClassConvStreamerFunc_t ; strm). Set a wrapper/accessor function around this class custom conversion streamer. ; Definition at line 6945 of file TClass.cxx. ◆ SetCurrentStreamerInfo(). void TClass::SetCurrentStreamerInfo ; (; TVirtualStreamerInfo * ; info). Set pointer to current TVirtualStreamerInfo. ; Definition at line 5696 of file TClass.cxx. ◆ SetDeclFile(). void TClass::SetDeclFile ; (; const char * ; name, . Short_t ; line . ). inline . Definition at line 555 of file TClass.h. ◆ SetDelete(). void TClass::SetDelete ; (; ROOT::DelFunc_t ; deleteFunc). Install a new wrapper around 'delete'. ; Definition at line 7001 of file TClass.cxx. ◆ SetDeleteArray(). void TClass::SetDeleteArray ; (; ROOT::DelArrFunc_t ; deleteArrayFunc). Install a new wrapper around 'delete []'. ; Definition at line 7009 of file TClass.cxx. ◆ SetDestructor(). void TClass::SetDestructor ; (; ROOT::DesFunc_t ; destructorFunc). Install a new wrapper around the destructor. ; Definition at line 7017 of file TClass.cxx. ◆ SetDirectoryAutoAdd(). void TClass::SetDirectoryAutoAdd ; (; ROOT::DirAutoAdd_t ; autoAddFunc). Install a new wrapper around the directory auto add function. ; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir) and should register 'obj' to the directory if dir is not null and unregister 'obj' from its current directory if dir is null ; Definition at line 7028 of file TClass.cxx. ◆ SetGlobalIsA(). void TClass::SetGlobalIsA ; (; IsAGlobalFunc_t ; func). This function installs a global IsA function for this class. ; The global IsA function will be used if there is no local IsA function (fIsA); A global IsA function has the signature:; TClass *func( TClass *cl, const void *obj);; TClassTClass instances represent classes",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:116051,Integrability,wrap,wrapper,116051,". ◆ SetConvStreamerFunc(). void TClass::SetConvStreamerFunc ; (; ClassConvStreamerFunc_t ; strm). Set a wrapper/accessor function around this class custom conversion streamer. ; Definition at line 6945 of file TClass.cxx. ◆ SetCurrentStreamerInfo(). void TClass::SetCurrentStreamerInfo ; (; TVirtualStreamerInfo * ; info). Set pointer to current TVirtualStreamerInfo. ; Definition at line 5696 of file TClass.cxx. ◆ SetDeclFile(). void TClass::SetDeclFile ; (; const char * ; name, . Short_t ; line . ). inline . Definition at line 555 of file TClass.h. ◆ SetDelete(). void TClass::SetDelete ; (; ROOT::DelFunc_t ; deleteFunc). Install a new wrapper around 'delete'. ; Definition at line 7001 of file TClass.cxx. ◆ SetDeleteArray(). void TClass::SetDeleteArray ; (; ROOT::DelArrFunc_t ; deleteArrayFunc). Install a new wrapper around 'delete []'. ; Definition at line 7009 of file TClass.cxx. ◆ SetDestructor(). void TClass::SetDestructor ; (; ROOT::DesFunc_t ; destructorFunc). Install a new wrapper around the destructor. ; Definition at line 7017 of file TClass.cxx. ◆ SetDirectoryAutoAdd(). void TClass::SetDirectoryAutoAdd ; (; ROOT::DirAutoAdd_t ; autoAddFunc). Install a new wrapper around the directory auto add function. ; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir) and should register 'obj' to the directory if dir is not null and unregister 'obj' from its current directory if dir is null ; Definition at line 7028 of file TClass.cxx. ◆ SetGlobalIsA(). void TClass::SetGlobalIsA ; (; IsAGlobalFunc_t ; func). This function installs a global IsA function for this class. ; The global IsA function will be used if there is no local IsA function (fIsA); A global IsA function has the signature:; TClass *func( TClass *cl, const void *obj);; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; 'cl' is a pointer to the TClass object that corresponds to the 'pointer type' used to retrieve the valu",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:116240,Integrability,wrap,wrapper,116240,"945 of file TClass.cxx. ◆ SetCurrentStreamerInfo(). void TClass::SetCurrentStreamerInfo ; (; TVirtualStreamerInfo * ; info). Set pointer to current TVirtualStreamerInfo. ; Definition at line 5696 of file TClass.cxx. ◆ SetDeclFile(). void TClass::SetDeclFile ; (; const char * ; name, . Short_t ; line . ). inline . Definition at line 555 of file TClass.h. ◆ SetDelete(). void TClass::SetDelete ; (; ROOT::DelFunc_t ; deleteFunc). Install a new wrapper around 'delete'. ; Definition at line 7001 of file TClass.cxx. ◆ SetDeleteArray(). void TClass::SetDeleteArray ; (; ROOT::DelArrFunc_t ; deleteArrayFunc). Install a new wrapper around 'delete []'. ; Definition at line 7009 of file TClass.cxx. ◆ SetDestructor(). void TClass::SetDestructor ; (; ROOT::DesFunc_t ; destructorFunc). Install a new wrapper around the destructor. ; Definition at line 7017 of file TClass.cxx. ◆ SetDirectoryAutoAdd(). void TClass::SetDirectoryAutoAdd ; (; ROOT::DirAutoAdd_t ; autoAddFunc). Install a new wrapper around the directory auto add function. ; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir) and should register 'obj' to the directory if dir is not null and unregister 'obj' from its current directory if dir is null ; Definition at line 7028 of file TClass.cxx. ◆ SetGlobalIsA(). void TClass::SetGlobalIsA ; (; IsAGlobalFunc_t ; func). This function installs a global IsA function for this class. ; The global IsA function will be used if there is no local IsA function (fIsA); A global IsA function has the signature:; TClass *func( TClass *cl, const void *obj);; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; 'cl' is a pointer to the TClass object that corresponds to the 'pointer type' used to retrieve the value 'obj'; For example with: TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::TNamedTNam",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:118216,Integrability,wrap,wrapper,118216,"tion TNamed.h:29; TNamed::TNamedTNamed()Definition TNamed.h:36; mTMarker mDefinition textangle.C:8; and the global IsA function would be called with TObject::Class() as the first parameter and the exact numerical value in the pointer 'o'.; In other word, inside the global IsA function. it is safe to C-style cast the value of 'obj' into a pointer to the class described by 'cl'. ; Definition at line 6300 of file TClass.cxx. ◆ SetImplFileName(). void TClass::SetImplFileName ; (; const char * ; implFileName). inline . Definition at line 560 of file TClass.h. ◆ SetLastReadInfo(). void TClass::SetLastReadInfo ; (; TVirtualStreamerInfo * ; info). inline . Definition at line 445 of file TClass.h. ◆ SetMemberStreamer(). void TClass::SetMemberStreamer ; (; const char * ; name, . MemberStreamerFunc_t ; strm . ). Install a new member streamer (p will be copied). ; Definition at line 6744 of file TClass.cxx. ◆ SetMerge(). void TClass::SetMerge ; (; ROOT::MergeFunc_t ; mergeFunc). Install a new wrapper around 'Merge'. ; Definition at line 6969 of file TClass.cxx. ◆ SetNew(). void TClass::SetNew ; (; ROOT::NewFunc_t ; newFunc). Install a new wrapper around 'new'. ; Definition at line 6985 of file TClass.cxx. ◆ SetNewArray(). void TClass::SetNewArray ; (; ROOT::NewArrFunc_t ; newArrayFunc). Install a new wrapper around 'new []'. ; Definition at line 6993 of file TClass.cxx. ◆ SetResetAfterMerge(). void TClass::SetResetAfterMerge ; (; ROOT::ResetAfterMergeFunc_t ; resetFunc). Install a new wrapper around 'ResetAfterMerge'. ; Definition at line 6977 of file TClass.cxx. ◆ SetRuntimeProperties(). void TClass::SetRuntimeProperties ; (; ). private . Internal routine to set calculate the class properties that can only be known at run-time, for example whether the Hash member function and the destructor are consistent. ; Definition at line 6194 of file TClass.cxx. ◆ SetStreamerFunc(). void TClass::SetStreamerFunc ; (; ClassStreamerFunc_t ; strm). Set a wrapper/accessor function around this",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:118365,Integrability,wrap,wrapper,118365," TObject::Class() as the first parameter and the exact numerical value in the pointer 'o'.; In other word, inside the global IsA function. it is safe to C-style cast the value of 'obj' into a pointer to the class described by 'cl'. ; Definition at line 6300 of file TClass.cxx. ◆ SetImplFileName(). void TClass::SetImplFileName ; (; const char * ; implFileName). inline . Definition at line 560 of file TClass.h. ◆ SetLastReadInfo(). void TClass::SetLastReadInfo ; (; TVirtualStreamerInfo * ; info). inline . Definition at line 445 of file TClass.h. ◆ SetMemberStreamer(). void TClass::SetMemberStreamer ; (; const char * ; name, . MemberStreamerFunc_t ; strm . ). Install a new member streamer (p will be copied). ; Definition at line 6744 of file TClass.cxx. ◆ SetMerge(). void TClass::SetMerge ; (; ROOT::MergeFunc_t ; mergeFunc). Install a new wrapper around 'Merge'. ; Definition at line 6969 of file TClass.cxx. ◆ SetNew(). void TClass::SetNew ; (; ROOT::NewFunc_t ; newFunc). Install a new wrapper around 'new'. ; Definition at line 6985 of file TClass.cxx. ◆ SetNewArray(). void TClass::SetNewArray ; (; ROOT::NewArrFunc_t ; newArrayFunc). Install a new wrapper around 'new []'. ; Definition at line 6993 of file TClass.cxx. ◆ SetResetAfterMerge(). void TClass::SetResetAfterMerge ; (; ROOT::ResetAfterMergeFunc_t ; resetFunc). Install a new wrapper around 'ResetAfterMerge'. ; Definition at line 6977 of file TClass.cxx. ◆ SetRuntimeProperties(). void TClass::SetRuntimeProperties ; (; ). private . Internal routine to set calculate the class properties that can only be known at run-time, for example whether the Hash member function and the destructor are consistent. ; Definition at line 6194 of file TClass.cxx. ◆ SetStreamerFunc(). void TClass::SetStreamerFunc ; (; ClassStreamerFunc_t ; strm). Set a wrapper/accessor function around this class custom streamer. ; Definition at line 6922 of file TClass.cxx. ◆ SetStreamerImpl(). void TClass::SetStreamerImpl ; (; ). private . Internal r",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:118530,Integrability,wrap,wrapper,118530,"the value of 'obj' into a pointer to the class described by 'cl'. ; Definition at line 6300 of file TClass.cxx. ◆ SetImplFileName(). void TClass::SetImplFileName ; (; const char * ; implFileName). inline . Definition at line 560 of file TClass.h. ◆ SetLastReadInfo(). void TClass::SetLastReadInfo ; (; TVirtualStreamerInfo * ; info). inline . Definition at line 445 of file TClass.h. ◆ SetMemberStreamer(). void TClass::SetMemberStreamer ; (; const char * ; name, . MemberStreamerFunc_t ; strm . ). Install a new member streamer (p will be copied). ; Definition at line 6744 of file TClass.cxx. ◆ SetMerge(). void TClass::SetMerge ; (; ROOT::MergeFunc_t ; mergeFunc). Install a new wrapper around 'Merge'. ; Definition at line 6969 of file TClass.cxx. ◆ SetNew(). void TClass::SetNew ; (; ROOT::NewFunc_t ; newFunc). Install a new wrapper around 'new'. ; Definition at line 6985 of file TClass.cxx. ◆ SetNewArray(). void TClass::SetNewArray ; (; ROOT::NewArrFunc_t ; newArrayFunc). Install a new wrapper around 'new []'. ; Definition at line 6993 of file TClass.cxx. ◆ SetResetAfterMerge(). void TClass::SetResetAfterMerge ; (; ROOT::ResetAfterMergeFunc_t ; resetFunc). Install a new wrapper around 'ResetAfterMerge'. ; Definition at line 6977 of file TClass.cxx. ◆ SetRuntimeProperties(). void TClass::SetRuntimeProperties ; (; ). private . Internal routine to set calculate the class properties that can only be known at run-time, for example whether the Hash member function and the destructor are consistent. ; Definition at line 6194 of file TClass.cxx. ◆ SetStreamerFunc(). void TClass::SetStreamerFunc ; (; ClassStreamerFunc_t ; strm). Set a wrapper/accessor function around this class custom streamer. ; Definition at line 6922 of file TClass.cxx. ◆ SetStreamerImpl(). void TClass::SetStreamerImpl ; (; ). private . Internal routine to set fStreamerImpl based on the value of fStreamerType. ; Definition at line 6215 of file TClass.cxx. ◆ SetStreamerInfo(). TVirtualStreamerInfo * TClass::SetS",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:118718,Integrability,wrap,wrapper,118718,"e). inline . Definition at line 560 of file TClass.h. ◆ SetLastReadInfo(). void TClass::SetLastReadInfo ; (; TVirtualStreamerInfo * ; info). inline . Definition at line 445 of file TClass.h. ◆ SetMemberStreamer(). void TClass::SetMemberStreamer ; (; const char * ; name, . MemberStreamerFunc_t ; strm . ). Install a new member streamer (p will be copied). ; Definition at line 6744 of file TClass.cxx. ◆ SetMerge(). void TClass::SetMerge ; (; ROOT::MergeFunc_t ; mergeFunc). Install a new wrapper around 'Merge'. ; Definition at line 6969 of file TClass.cxx. ◆ SetNew(). void TClass::SetNew ; (; ROOT::NewFunc_t ; newFunc). Install a new wrapper around 'new'. ; Definition at line 6985 of file TClass.cxx. ◆ SetNewArray(). void TClass::SetNewArray ; (; ROOT::NewArrFunc_t ; newArrayFunc). Install a new wrapper around 'new []'. ; Definition at line 6993 of file TClass.cxx. ◆ SetResetAfterMerge(). void TClass::SetResetAfterMerge ; (; ROOT::ResetAfterMergeFunc_t ; resetFunc). Install a new wrapper around 'ResetAfterMerge'. ; Definition at line 6977 of file TClass.cxx. ◆ SetRuntimeProperties(). void TClass::SetRuntimeProperties ; (; ). private . Internal routine to set calculate the class properties that can only be known at run-time, for example whether the Hash member function and the destructor are consistent. ; Definition at line 6194 of file TClass.cxx. ◆ SetStreamerFunc(). void TClass::SetStreamerFunc ; (; ClassStreamerFunc_t ; strm). Set a wrapper/accessor function around this class custom streamer. ; Definition at line 6922 of file TClass.cxx. ◆ SetStreamerImpl(). void TClass::SetStreamerImpl ; (; ). private . Internal routine to set fStreamerImpl based on the value of fStreamerType. ; Definition at line 6215 of file TClass.cxx. ◆ SetStreamerInfo(). TVirtualStreamerInfo * TClass::SetStreamerInfo ; (; Int_t ; version, . const char * ; info = """" . ). Info is a string describing the names and types of attributes written by the class Streamer function. ; If info is an empty st",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:118885,Integrability,rout,routine,118885,"berStreamer ; (; const char * ; name, . MemberStreamerFunc_t ; strm . ). Install a new member streamer (p will be copied). ; Definition at line 6744 of file TClass.cxx. ◆ SetMerge(). void TClass::SetMerge ; (; ROOT::MergeFunc_t ; mergeFunc). Install a new wrapper around 'Merge'. ; Definition at line 6969 of file TClass.cxx. ◆ SetNew(). void TClass::SetNew ; (; ROOT::NewFunc_t ; newFunc). Install a new wrapper around 'new'. ; Definition at line 6985 of file TClass.cxx. ◆ SetNewArray(). void TClass::SetNewArray ; (; ROOT::NewArrFunc_t ; newArrayFunc). Install a new wrapper around 'new []'. ; Definition at line 6993 of file TClass.cxx. ◆ SetResetAfterMerge(). void TClass::SetResetAfterMerge ; (; ROOT::ResetAfterMergeFunc_t ; resetFunc). Install a new wrapper around 'ResetAfterMerge'. ; Definition at line 6977 of file TClass.cxx. ◆ SetRuntimeProperties(). void TClass::SetRuntimeProperties ; (; ). private . Internal routine to set calculate the class properties that can only be known at run-time, for example whether the Hash member function and the destructor are consistent. ; Definition at line 6194 of file TClass.cxx. ◆ SetStreamerFunc(). void TClass::SetStreamerFunc ; (; ClassStreamerFunc_t ; strm). Set a wrapper/accessor function around this class custom streamer. ; Definition at line 6922 of file TClass.cxx. ◆ SetStreamerImpl(). void TClass::SetStreamerImpl ; (; ). private . Internal routine to set fStreamerImpl based on the value of fStreamerType. ; Definition at line 6215 of file TClass.cxx. ◆ SetStreamerInfo(). TVirtualStreamerInfo * TClass::SetStreamerInfo ; (; Int_t ; version, . const char * ; info = """" . ). Info is a string describing the names and types of attributes written by the class Streamer function. ; If info is an empty string (when called by TObject::StreamerInfo) the default Streamer info string is build. This corresponds to the case of an automatically generated Streamer. In case of user defined Streamer function, it is the user responsibility to im",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:119183,Integrability,wrap,wrapper,119183," a new wrapper around 'Merge'. ; Definition at line 6969 of file TClass.cxx. ◆ SetNew(). void TClass::SetNew ; (; ROOT::NewFunc_t ; newFunc). Install a new wrapper around 'new'. ; Definition at line 6985 of file TClass.cxx. ◆ SetNewArray(). void TClass::SetNewArray ; (; ROOT::NewArrFunc_t ; newArrayFunc). Install a new wrapper around 'new []'. ; Definition at line 6993 of file TClass.cxx. ◆ SetResetAfterMerge(). void TClass::SetResetAfterMerge ; (; ROOT::ResetAfterMergeFunc_t ; resetFunc). Install a new wrapper around 'ResetAfterMerge'. ; Definition at line 6977 of file TClass.cxx. ◆ SetRuntimeProperties(). void TClass::SetRuntimeProperties ; (; ). private . Internal routine to set calculate the class properties that can only be known at run-time, for example whether the Hash member function and the destructor are consistent. ; Definition at line 6194 of file TClass.cxx. ◆ SetStreamerFunc(). void TClass::SetStreamerFunc ; (; ClassStreamerFunc_t ; strm). Set a wrapper/accessor function around this class custom streamer. ; Definition at line 6922 of file TClass.cxx. ◆ SetStreamerImpl(). void TClass::SetStreamerImpl ; (; ). private . Internal routine to set fStreamerImpl based on the value of fStreamerType. ; Definition at line 6215 of file TClass.cxx. ◆ SetStreamerInfo(). TVirtualStreamerInfo * TClass::SetStreamerInfo ; (; Int_t ; version, . const char * ; info = """" . ). Info is a string describing the names and types of attributes written by the class Streamer function. ; If info is an empty string (when called by TObject::StreamerInfo) the default Streamer info string is build. This corresponds to the case of an automatically generated Streamer. In case of user defined Streamer function, it is the user responsibility to implement a StreamerInfo function (override TObject::StreamerInfo). The user must call IsA()->SetStreamerInfo(info) from this function. ; Definition at line 6373 of file TClass.cxx. ◆ SetUnloaded(). void TClass::SetUnloaded ; (; ). Call this method to",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:119367,Integrability,rout,routine,119367,"ition at line 6985 of file TClass.cxx. ◆ SetNewArray(). void TClass::SetNewArray ; (; ROOT::NewArrFunc_t ; newArrayFunc). Install a new wrapper around 'new []'. ; Definition at line 6993 of file TClass.cxx. ◆ SetResetAfterMerge(). void TClass::SetResetAfterMerge ; (; ROOT::ResetAfterMergeFunc_t ; resetFunc). Install a new wrapper around 'ResetAfterMerge'. ; Definition at line 6977 of file TClass.cxx. ◆ SetRuntimeProperties(). void TClass::SetRuntimeProperties ; (; ). private . Internal routine to set calculate the class properties that can only be known at run-time, for example whether the Hash member function and the destructor are consistent. ; Definition at line 6194 of file TClass.cxx. ◆ SetStreamerFunc(). void TClass::SetStreamerFunc ; (; ClassStreamerFunc_t ; strm). Set a wrapper/accessor function around this class custom streamer. ; Definition at line 6922 of file TClass.cxx. ◆ SetStreamerImpl(). void TClass::SetStreamerImpl ; (; ). private . Internal routine to set fStreamerImpl based on the value of fStreamerType. ; Definition at line 6215 of file TClass.cxx. ◆ SetStreamerInfo(). TVirtualStreamerInfo * TClass::SetStreamerInfo ; (; Int_t ; version, . const char * ; info = """" . ). Info is a string describing the names and types of attributes written by the class Streamer function. ; If info is an empty string (when called by TObject::StreamerInfo) the default Streamer info string is build. This corresponds to the case of an automatically generated Streamer. In case of user defined Streamer function, it is the user responsibility to implement a StreamerInfo function (override TObject::StreamerInfo). The user must call IsA()->SetStreamerInfo(info) from this function. ; Definition at line 6373 of file TClass.cxx. ◆ SetUnloaded(). void TClass::SetUnloaded ; (; ). Call this method to indicate that the shared library containing this class's code has been removed (unloaded) from the process's memory. ; Definition at line 6309 of file TClass.cxx. ◆ Size(). Int_t TClas",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:3126,Modifiability,inherit,inherited,3126," class  InsertTClassInRegistryRAII;  ; struct  ObjectPtr;  ; class  TDeclNameRegistry;  . Public Types; enum  ECheckSum { ;   kCurrentCheckSum = 0; , kNoEnum = 1; , kReflexNoComment = 2; , kNoRange = 3; , ;   kWithTypeDef = 4; , kReflex = 5; , kNoRangeCheck = 6; , kNoBaseCheckSum = 7; , ;   kLatestCheckSum = 8. };  ; enum  ENewType { kRealNew = 0; , kClassNew; , kDummyNew; };  ; enum  EState { ;   kNoInfo; , kForwardDeclared; , kEmulated; , kInterpreted; , ;   kHasTClassInit; , kLoaded = kHasTClassInit; , kNamespaceForMeta. };  ; enum  EStatusBits { ;   kReservedLoading = (1ULL << ( 7 )); , kHasLocalHashMember = (1ULL << ( 14 )); , kIgnoreTObjectStreamer = (1ULL << ( 15 )); , kUnloaded = (1ULL << ( 16 )); , ;   kIsTObject = (1ULL << ( 17 )); , kIsForeign = (1ULL << ( 18 )); , kStartWithTObject = (1ULL << ( 20 )); , kWarned = (1ULL << ( 21 )); , ;   kHasNameMapNode = (1ULL << ( 22 )). };  ;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultimap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiset = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiset = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:3860,Modifiability,inherit,inherited,3860,"Object = (1ULL << ( 17 )); , kIsForeign = (1ULL << ( 18 )); , kStartWithTObject = (1ULL << ( 20 )); , kWarned = (1ULL << ( 21 )); , ;   kHasNameMapNode = (1ULL << ( 22 )). };  ;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultimap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiset = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiset = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TClass ();  Internal, default constructor. ;  ;  TClass (ClassInfo_t *info, Version_t cversion, const char *dfil, const char *ifil=nullptr, Int_t dl=0, Int_t il=0, Bool_t silent=kFALSE);  Internal constructor. ;  ;  TClass (const char *name, Bool_t silent=kFALSE);  Create a TClass object. ;  ;  TClass (const char *name, Version_t cversion, Bool_t silent=kFALSE);  Internal constructor. ;  ;  TClass (const char *name, Versi",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:7915,Modifiability,inherit,inheritance,7915," of this class type, passing insp and parent. ;  ; Bool_t CanIgnoreTObjectStreamer ();  ; Bool_t CanSplit () const;  Return true if the data member of this TClass can be saved separately. ;  ; Long_t ClassProperty () const;  Return the C++ property of this class, eg. ;  ; TObject * Clone (const char *newname="""") const override;  Create a Clone of this TClass object using a different name but using the same 'dictionary'. ;  ; void CopyCollectionProxy (const TVirtualCollectionProxy &);  Replaces the collection proxy for this class. ;  ; void DeleteArray (ObjectPtr ary, Bool_t dtorOnly=kFALSE);  Explicitly call operator delete[] for an array. ;  ; void DeleteArray (void *ary, Bool_t dtorOnly=kFALSE);  Explicitly call operator delete[] for an array. ;  ; void Destructor (ObjectPtr obj, Bool_t dtorOnly=kFALSE);  Explicitly call destructor for object. ;  ; void Destructor (void *obj, Bool_t dtorOnly=kFALSE);  Explicitly call destructor for object. ;  ; void Draw (Option_t *option="""") override;  Draw detailed class inheritance structure. ;  ; void Dump () const override;  Dump contents of object on stdout. ;  ; void Dump (const void *obj, Bool_t noAddr=kFALSE) const;  Dump contents of object on stdout. ;  ; const void * DynamicCast (const TClass *base, const void *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; void * DynamicCast (const TClass *base, void *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; char * EscapeChars (const char *text) const;  Introduce an escape character (@) in front of a special chars. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const char *onfile_classname, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const TClass *onfile_cl, UInt_t checksum) const;  Return a Conversion StreamerInfo from the cla",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:17158,Modifiability,inherit,inheritance,17158," class cls. ;  ; ShowMembersFunc_t GetShowMembersWrapper () const;  ; EState GetState () const;  ; TClassStreamer * GetStreamer () const;  Return the Streamer Class allowing streaming (if any). ;  ; ClassStreamerFunc_t GetStreamerFunc () const;  Get a wrapper/accessor function around this class custom streamer (member function). ;  ; TVirtualStreamerInfo * GetStreamerInfo (Int_t version=0, Bool_t isTransient=kFALSE) const;  returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ;  ; TVirtualStreamerInfo * GetStreamerInfoAbstractEmulated (Int_t version=0) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; const TObjArray * GetStreamerInfos () const;  ; const std::type_info * GetTypeInfo () const;  ; Bool_t HasConsistentHashMember ();  Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ;  ; Bool_t HasCustomStreamerMember () const;  The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ;  ; Bool_t HasDataMemberInfo () const;  ; Bool_t HasDefaultConstructor (Bool_t testio=kFALSE) const;  Return true if we have access to a constructor usable for I/O. ;  ; Bool_t HasDictionary () const;  Check whether a class has a dictionary or not. ;  ; Bool_t HasInterpreterInfo () const;  ; Bool_t HasInterpreterInfoInMemory () const;  ; Bool_t HasLocalHashMember () const;  Returns true if this class has an definition and/or overload of the member function Hash. ;  ; void IgnoreTObjectStreamer (Bool_t ignore=kTRUE);  When the class kIgnoreTObjectStreamer bit is set, the automatically generated Streamer will not call TObject::Streamer. ;  ; Bool_t Inherit",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:18172,Modifiability,inherit,inherits,18172,"s class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ;  ; Bool_t HasCustomStreamerMember () const;  The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ;  ; Bool_t HasDataMemberInfo () const;  ; Bool_t HasDefaultConstructor (Bool_t testio=kFALSE) const;  Return true if we have access to a constructor usable for I/O. ;  ; Bool_t HasDictionary () const;  Check whether a class has a dictionary or not. ;  ; Bool_t HasInterpreterInfo () const;  ; Bool_t HasInterpreterInfoInMemory () const;  ; Bool_t HasLocalHashMember () const;  Returns true if this class has an definition and/or overload of the member function Hash. ;  ; void IgnoreTObjectStreamer (Bool_t ignore=kTRUE);  When the class kIgnoreTObjectStreamer bit is set, the automatically generated Streamer will not call TObject::Streamer. ;  ; Bool_t InheritsFrom (const char *cl) const override;  Return kTRUE if this class inherits from a class with name ""classname"". ;  ; Bool_t InheritsFrom (const TClass *cl) const override;  Return kTRUE if this class inherits from class cl. ;  ; void InterpretedShowMembers (void *obj, TMemberInspector &insp, Bool_t isTransient);  Do a ShowMembers() traversal of all members and base classes' members using the reflection information from the interpreter. ;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsFolder (void *obj) const;  Return kTRUE if the class has elements. ;  ; Bool_t IsForeign () const;  Return kTRUE is the class is Foreign (the class does not have a Streamer method). ;  ; Bool_t IsLoaded () const;  Return true if the shared library of this class is currently in the a process's memory. ;  ; Bool_t IsStartingWithTObject () const;  Returns true if this class inherits from TObject and if the start of",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:18305,Modifiability,inherit,inherits,18305,";  ; Bool_t HasCustomStreamerMember () const;  The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ;  ; Bool_t HasDataMemberInfo () const;  ; Bool_t HasDefaultConstructor (Bool_t testio=kFALSE) const;  Return true if we have access to a constructor usable for I/O. ;  ; Bool_t HasDictionary () const;  Check whether a class has a dictionary or not. ;  ; Bool_t HasInterpreterInfo () const;  ; Bool_t HasInterpreterInfoInMemory () const;  ; Bool_t HasLocalHashMember () const;  Returns true if this class has an definition and/or overload of the member function Hash. ;  ; void IgnoreTObjectStreamer (Bool_t ignore=kTRUE);  When the class kIgnoreTObjectStreamer bit is set, the automatically generated Streamer will not call TObject::Streamer. ;  ; Bool_t InheritsFrom (const char *cl) const override;  Return kTRUE if this class inherits from a class with name ""classname"". ;  ; Bool_t InheritsFrom (const TClass *cl) const override;  Return kTRUE if this class inherits from class cl. ;  ; void InterpretedShowMembers (void *obj, TMemberInspector &insp, Bool_t isTransient);  Do a ShowMembers() traversal of all members and base classes' members using the reflection information from the interpreter. ;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsFolder (void *obj) const;  Return kTRUE if the class has elements. ;  ; Bool_t IsForeign () const;  Return kTRUE is the class is Foreign (the class does not have a Streamer method). ;  ; Bool_t IsLoaded () const;  Return true if the shared library of this class is currently in the a process's memory. ;  ; Bool_t IsStartingWithTObject () const;  Returns true if this class inherits from TObject and if the start of the TObject parts is at the very beginning of the objects. ;  ; Bool_t IsSyntheticPair () const;  ; Bool_t IsTObject () ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:19110,Modifiability,inherit,inherits,19110,"*cl) const override;  Return kTRUE if this class inherits from a class with name ""classname"". ;  ; Bool_t InheritsFrom (const TClass *cl) const override;  Return kTRUE if this class inherits from class cl. ;  ; void InterpretedShowMembers (void *obj, TMemberInspector &insp, Bool_t isTransient);  Do a ShowMembers() traversal of all members and base classes' members using the reflection information from the interpreter. ;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsFolder (void *obj) const;  Return kTRUE if the class has elements. ;  ; Bool_t IsForeign () const;  Return kTRUE is the class is Foreign (the class does not have a Streamer method). ;  ; Bool_t IsLoaded () const;  Return true if the shared library of this class is currently in the a process's memory. ;  ; Bool_t IsStartingWithTObject () const;  Returns true if this class inherits from TObject and if the start of the TObject parts is at the very beginning of the objects. ;  ; Bool_t IsSyntheticPair () const;  ; Bool_t IsTObject () const;  Return kTRUE is the class inherits from TObject. ;  ; Bool_t IsVersioned () const;  ; void ls (Option_t *opt="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void MakeCustomMenuList ();  Makes a customizable version of the popup menu list, i.e. ;  ; Bool_t MatchLegacyCheckSum (UInt_t checksum) const;  Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ;  ; void Move (void *arenaFrom, void *arenaTo) const;  Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ;  ; void * New (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) c",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:19306,Modifiability,inherit,inherits,19306,"erride;  Return kTRUE if this class inherits from class cl. ;  ; void InterpretedShowMembers (void *obj, TMemberInspector &insp, Bool_t isTransient);  Do a ShowMembers() traversal of all members and base classes' members using the reflection information from the interpreter. ;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsFolder (void *obj) const;  Return kTRUE if the class has elements. ;  ; Bool_t IsForeign () const;  Return kTRUE is the class is Foreign (the class does not have a Streamer method). ;  ; Bool_t IsLoaded () const;  Return true if the shared library of this class is currently in the a process's memory. ;  ; Bool_t IsStartingWithTObject () const;  Returns true if this class inherits from TObject and if the start of the TObject parts is at the very beginning of the objects. ;  ; Bool_t IsSyntheticPair () const;  ; Bool_t IsTObject () const;  Return kTRUE is the class inherits from TObject. ;  ; Bool_t IsVersioned () const;  ; void ls (Option_t *opt="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void MakeCustomMenuList ();  Makes a customizable version of the popup menu list, i.e. ;  ; Bool_t MatchLegacyCheckSum (UInt_t checksum) const;  Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ;  ; void Move (void *arenaFrom, void *arenaTo) const;  Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ;  ; void * New (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) con",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:25164,Modifiability,inherit,inherited,25164,"  Info is a string describing the names and types of attributes written by the class Streamer function. ;  ; void SetUnloaded ();  Call this method to indicate that the shared library containing this class's code has been removed (unloaded) from the process's memory. ;  ; Int_t Size () const;  Return size of object of this class. ;  ; void Store (TBuffer &b) const;  Store class description on I/O buffer. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void Streamer (void *obj, TBuffer &b, const TClass *onfile_class=nullptr) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t WriteBuffer (TBuffer &b, void *pointer, const char *info="""");  Function called by the Streamer functions to serialize object at p to buffer b. ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TClass * IsA () const override;  ; TDictionary & operator= (const TDictionary &other);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:25656,Modifiability,inherit,inherited,25656,". ;  ; void Store (TBuffer &b) const;  Store class description on I/O buffer. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void Streamer (void *obj, TBuffer &b, const TClass *onfile_class=nullptr) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t WriteBuffer (TBuffer &b, void *pointer, const char *info="""");  Function called by the Streamer functions to serialize object at p to buffer b. ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TClass * IsA () const override;  ; TDictionary & operator= (const TDictionary &other);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:27396,Modifiability,inherit,inherited,27396,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual T",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:28303,Modifiability,inherit,inheritance,28303,"oid StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj)",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:33934,Modifiability,inherit,inherited,33934,"t (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void AddClass (TClass *cl);  static: Add a class to the list and map of classes. ;  ; static void AddClassToDeclIdMap (TDictionary::DeclId_t id, TClass *cl);  static: Add a TClass* to the map of classes. ;  ; static Bool_t AddRule (const char *rule);  Add a schema evolution customization rule. ;  ; static Int_t AutoBrowse (TObject *obj, TBrowser *browser);  Browse external object inherited from TObject. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; template<typename T > ; static TClass * GetClass (Bool_t load=kTRUE, Bool_t silent=kFALSE);  ; static TClass * GetClass (ClassInfo_t *info, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified ClassInfo. ;  ; static TClass * GetClass (const char *name, Bool_t load, Bool_t silent, size_t hint_pair_offset, size_t hint_pair_size);  ; static TClass * GetClass (const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified class name. ;  ; static TClass * GetClass (const std::type_info &typeinfo, Bool_t load=kTRUE, Bool_t silent=kFALSE, size_t hint_pair_offset=0, size_t hint_pair_size=0);  Return pointer to class with name. ;  ; static Bool_t GetClass (DeclId_t id, std::vec",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:36088,Modifiability,inherit,inherited,36088,"he dictionary loading function generated by rootcint. ;  ; static Bool_t HasDictionarySelection (const char *clname);  Check whether a class has a dictionary or ROOT can load one. ;  ; static ENewType IsCallingNew ();  Static method returning the defConstructor flag passed to TClass::New(). ;  ; static TClass * Load (TBuffer &b);  Load class description from I/O buffer and return class object. ;  ; static TClass * LoadClass (const char *requestedname, Bool_t silent);  Helper function used by TClass::GetClass(). ;  ; static Int_t ReadRules ();  Read the class.rules files from the default location:. ;  ; static Int_t ReadRules (const char *filename);  Read a class.rules file which contains one rule per line with comment starting with a #. ;  ; static void RemoveClass (TClass *cl);  static: Remove a class from the list and map of classes ;  ; static void RemoveClassDeclId (TDictionary::DeclId_t id);  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:36621,Modifiability,inherit,inherited,36621,"lt location:. ;  ; static Int_t ReadRules (const char *filename);  Read a class.rules file which contains one rule per line with comment starting with a #. ;  ; static void RemoveClass (TClass *cl);  static: Remove a class from the list and map of classes ;  ; static void RemoveClassDeclId (TDictionary::DeclId_t id);  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; TVirtualStreamerInfo * FindStreamerInfo (TObjArray *arr, UInt_t checksum) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; void GetMissingDictionariesForBaseClasses (TCollection &result, TCollection &visited, bool recurse);  Verify the base classes always. ;  ; void GetMissingDictionariesForMembers (TCollection &result, TCollection &visited, bool",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:36831,Modifiability,inherit,inherited,36831,"lt location:. ;  ; static Int_t ReadRules (const char *filename);  Read a class.rules file which contains one rule per line with comment starting with a #. ;  ; static void RemoveClass (TClass *cl);  static: Remove a class from the list and map of classes ;  ; static void RemoveClassDeclId (TDictionary::DeclId_t id);  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; TVirtualStreamerInfo * FindStreamerInfo (TObjArray *arr, UInt_t checksum) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; void GetMissingDictionariesForBaseClasses (TCollection &result, TCollection &visited, bool recurse);  Verify the base classes always. ;  ; void GetMissingDictionariesForMembers (TCollection &result, TCollection &visited, bool",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:38093,Modifiability,inherit,inherited,38093,"jectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; TVirtualStreamerInfo * FindStreamerInfo (TObjArray *arr, UInt_t checksum) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; void GetMissingDictionariesForBaseClasses (TCollection &result, TCollection &visited, bool recurse);  Verify the base classes always. ;  ; void GetMissingDictionariesForMembers (TCollection &result, TCollection &visited, bool recurse);  Verify the Data Members. ;  ; void GetMissingDictionariesForPairElements (TCollection &result, TCollection &visited, bool recurse);  ; void GetMissingDictionariesWithRecursionCheck (TCollection &result, TCollection &visited, bool recurse);  From the second level of recursion onwards it is different state check. ;  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Types; enum  { kLoading = kReservedLoading; , kUnloading = kReservedLoading; };  ; typedef std::atomic< std::map< std::string, TObjArray * > * > ConvSIMap_t;  Persistent address of pointer to this TClass object and its successors. ;  ; enum class  ERuntimeProperties : UChar_t { kNotInitialized = 0; , kSet = (1ULL << ( 0 )); , kConsistentHash = (1ULL << ( 1 )); };  Indicates whether GetClassVersion has been called. More...;  ; enum  EStreamerType { ;   kDefault =0; , kEmulatedStreamer =1; , kTObject =2; , kInstrumented =4; , ;   kForeign =8; , kExternal =16. };  ; typedef std::multimap< void *, Version_t > RepoCont_t;  ; typedef void(* StreamerImpl_t) (const TClass *pThis, void *obj, TBuffer &b, const TClass *onfile_class);  Schema evolution rules. ;  . Private Member Functions;",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:38256,Modifiability,inherit,inherited,38256,"jectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; TVirtualStreamerInfo * FindStreamerInfo (TObjArray *arr, UInt_t checksum) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; void GetMissingDictionariesForBaseClasses (TCollection &result, TCollection &visited, bool recurse);  Verify the base classes always. ;  ; void GetMissingDictionariesForMembers (TCollection &result, TCollection &visited, bool recurse);  Verify the Data Members. ;  ; void GetMissingDictionariesForPairElements (TCollection &result, TCollection &visited, bool recurse);  ; void GetMissingDictionariesWithRecursionCheck (TCollection &result, TCollection &visited, bool recurse);  From the second level of recursion onwards it is different state check. ;  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Types; enum  { kLoading = kReservedLoading; , kUnloading = kReservedLoading; };  ; typedef std::atomic< std::map< std::string, TObjArray * > * > ConvSIMap_t;  Persistent address of pointer to this TClass object and its successors. ;  ; enum class  ERuntimeProperties : UChar_t { kNotInitialized = 0; , kSet = (1ULL << ( 0 )); , kConsistentHash = (1ULL << ( 1 )); };  Indicates whether GetClassVersion has been called. More...;  ; enum  EStreamerType { ;   kDefault =0; , kEmulatedStreamer =1; , kTObject =2; , kInstrumented =4; , ;   kForeign =8; , kExternal =16. };  ; typedef std::multimap< void *, Version_t > RepoCont_t;  ; typedef void(* StreamerImpl_t) (const TClass *pThis, void *obj, TBuffer &b, const TClass *onfile_class);  Schema evolution rules. ;  . Private Member Functions;",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:46870,Modifiability,inherit,inherited,46870," cached of the streaming method to use ;  ; TClassStreamer * fStreamer;  ; ClassStreamerFunc_t fStreamerFunc;  ; std::atomic< StreamerImpl_t > fStreamerImpl;  ; TObjArray * fStreamerInfo;  ; Int_t fStreamerType;  saved info to call Streamer ;  ; const std::type_info * fTypeInfo;  ; std::atomic< TListOfDataMembers * > fUsingData;  ; std::atomic< Bool_t > fVersionUsed;  saved remember if fOffsetStreamer has been set. ;  . Static Private Attributes; static std::atomic< Int_t > fgClassCount;  ; static THashTable * fgClassTypedefHash = nullptr;  ; static TDeclNameRegistry fNoInfoOrEmuOrFwdDeclNameRegistry;  . Friends; bool operator& (UChar_t l, ERuntimeProperties r);  ; class ROOT::Internal::TCheckHashRecursiveRemoveConsistency;  ; void ROOT::ResetClassVersion (TClass *, const char *, Short_t);  ; class ROOT::TGenericClassInfo;  ; class TCling;  ; class TProtoClass;  ; class TStreamerInfo;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TClass.h>. Inheritance diagram for TClass:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ConvSIMap_t. typedef std::atomic<std::map<std::string, TObjArray*>*> TClass::ConvSIMap_t. private . Persistent address of pointer to this TClass object and its successors. ; Definition at line 196 of file TClass.h. ◆ RepoCont_t. typedef std::multimap<void*, Version_t> TClass::RepoCont_t. private . Definition at line 343 of file TClass.h. ◆ StreamerImpl_t. typedef void(* TClass::StreamerImpl_t) (const TClass *pThis, void *obj, TBuffer &b, const TClass *onfile_class). private . Schema evolution rules. ; Definition at line 283 of file TClass.h. Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. private . EnumeratorkLoading ; kUnloading . Definition at line 332 of file TClass.h. ◆ ECheckSum. enu",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:46963,Modifiability,inherit,inherited,46963," cached of the streaming method to use ;  ; TClassStreamer * fStreamer;  ; ClassStreamerFunc_t fStreamerFunc;  ; std::atomic< StreamerImpl_t > fStreamerImpl;  ; TObjArray * fStreamerInfo;  ; Int_t fStreamerType;  saved info to call Streamer ;  ; const std::type_info * fTypeInfo;  ; std::atomic< TListOfDataMembers * > fUsingData;  ; std::atomic< Bool_t > fVersionUsed;  saved remember if fOffsetStreamer has been set. ;  . Static Private Attributes; static std::atomic< Int_t > fgClassCount;  ; static THashTable * fgClassTypedefHash = nullptr;  ; static TDeclNameRegistry fNoInfoOrEmuOrFwdDeclNameRegistry;  . Friends; bool operator& (UChar_t l, ERuntimeProperties r);  ; class ROOT::Internal::TCheckHashRecursiveRemoveConsistency;  ; void ROOT::ResetClassVersion (TClass *, const char *, Short_t);  ; class ROOT::TGenericClassInfo;  ; class TCling;  ; class TProtoClass;  ; class TStreamerInfo;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TClass.h>. Inheritance diagram for TClass:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ConvSIMap_t. typedef std::atomic<std::map<std::string, TObjArray*>*> TClass::ConvSIMap_t. private . Persistent address of pointer to this TClass object and its successors. ; Definition at line 196 of file TClass.h. ◆ RepoCont_t. typedef std::multimap<void*, Version_t> TClass::RepoCont_t. private . Definition at line 343 of file TClass.h. ◆ StreamerImpl_t. typedef void(* TClass::StreamerImpl_t) (const TClass *pThis, void *obj, TBuffer &b, const TClass *onfile_class). private . Schema evolution rules. ; Definition at line 283 of file TClass.h. Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. private . EnumeratorkLoading ; kUnloading . Definition at line 332 of file TClass.h. ◆ ECheckSum. enu",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:57375,Modifiability,inherit,inherited,57375,"::AdoptMemberStreamer ; (; const char * ; name, . TMemberStreamer * ; strm . ). Adopt the TMemberStreamer pointer to by p and use it to Stream non basic member name. ; Definition at line 6703 of file TClass.cxx. ◆ AdoptReferenceProxy(). void TClass::AdoptReferenceProxy ; (; TVirtualRefProxy * ; proxy). Adopt the Reference proxy pointer to indicate that this class represents a reference. ; When a new proxy is adopted, the old one is deleted. ; Definition at line 6685 of file TClass.cxx. ◆ AdoptSchemaRules(). void TClass::AdoptSchemaRules ; (; ROOT::Detail::TSchemaRuleSet * ; rules). Adopt a new set of Data Model Evolution rules. ; Definition at line 1920 of file TClass.cxx. ◆ AdoptStreamer(). void TClass::AdoptStreamer ; (; TClassStreamer * ; str). Adopt a TClassStreamer object. ; Ownership is transfered to this TClass object. ; Definition at line 6894 of file TClass.cxx. ◆ AutoBrowse(). Int_t TClass::AutoBrowse ; (; TObject * ; obj, . TBrowser * ; b . ). static . Browse external object inherited from TObject. ; It passes through inheritance tree and calls TBrowser::Add in appropriate cases. Static function. ; Definition at line 1966 of file TClass.cxx. ◆ Browse() [1/2]. void TClass::Browse ; (; TBrowser * ; b). overridevirtual . This method is called by a browser to get the class information. ; Reimplemented from TObject.; Definition at line 2010 of file TClass.cxx. ◆ Browse() [2/2]. Int_t TClass::Browse ; (; void * ; obj, . TBrowser * ; b . ); const. Browse objects of of the class described by this TClass object. ; Definition at line 1978 of file TClass.cxx. ◆ BuildEmulatedRealData(). void TClass::BuildEmulatedRealData ; (; const char * ; name, . Longptr_t ; offset, . TClass * ; cl, . Bool_t ; isTransient = kFALSE . ). Build the list of real data for an emulated class. ; Definition at line 2112 of file TClass.cxx. ◆ BuildRealData(). void TClass::BuildRealData ; (; void * ; pointer = nullptr, . Bool_t ; isTransient = kFALSE . ). Build a full list of persistent data m",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:57419,Modifiability,inherit,inheritance,57419," * ; strm . ). Adopt the TMemberStreamer pointer to by p and use it to Stream non basic member name. ; Definition at line 6703 of file TClass.cxx. ◆ AdoptReferenceProxy(). void TClass::AdoptReferenceProxy ; (; TVirtualRefProxy * ; proxy). Adopt the Reference proxy pointer to indicate that this class represents a reference. ; When a new proxy is adopted, the old one is deleted. ; Definition at line 6685 of file TClass.cxx. ◆ AdoptSchemaRules(). void TClass::AdoptSchemaRules ; (; ROOT::Detail::TSchemaRuleSet * ; rules). Adopt a new set of Data Model Evolution rules. ; Definition at line 1920 of file TClass.cxx. ◆ AdoptStreamer(). void TClass::AdoptStreamer ; (; TClassStreamer * ; str). Adopt a TClassStreamer object. ; Ownership is transfered to this TClass object. ; Definition at line 6894 of file TClass.cxx. ◆ AutoBrowse(). Int_t TClass::AutoBrowse ; (; TObject * ; obj, . TBrowser * ; b . ). static . Browse external object inherited from TObject. ; It passes through inheritance tree and calls TBrowser::Add in appropriate cases. Static function. ; Definition at line 1966 of file TClass.cxx. ◆ Browse() [1/2]. void TClass::Browse ; (; TBrowser * ; b). overridevirtual . This method is called by a browser to get the class information. ; Reimplemented from TObject.; Definition at line 2010 of file TClass.cxx. ◆ Browse() [2/2]. Int_t TClass::Browse ; (; void * ; obj, . TBrowser * ; b . ); const. Browse objects of of the class described by this TClass object. ; Definition at line 1978 of file TClass.cxx. ◆ BuildEmulatedRealData(). void TClass::BuildEmulatedRealData ; (; const char * ; name, . Longptr_t ; offset, . TClass * ; cl, . Bool_t ; isTransient = kFALSE . ). Build the list of real data for an emulated class. ; Definition at line 2112 of file TClass.cxx. ◆ BuildRealData(). void TClass::BuildRealData ; (; void * ; pointer = nullptr, . Bool_t ; isTransient = kFALSE . ). Build a full list of persistent data members. ; Scans the list of all data members in the class itself ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:62931,Modifiability,inherit,inheritance,62931,"ly = kFALSE . ). Explicitly call operator delete[] for an array. ; Definition at line 5639 of file TClass.cxx. ◆ DeleteArray() [2/2]. void TClass::DeleteArray ; (; void * ; ary, . Bool_t ; dtorOnly = kFALSE . ). Explicitly call operator delete[] for an array. ; Definition at line 5529 of file TClass.cxx. ◆ Destructor() [1/2]. void TClass::Destructor ; (; TClass::ObjectPtr ; obj, . Bool_t ; dtorOnly = kFALSE . ). Explicitly call destructor for object. ; Definition at line 5513 of file TClass.cxx. ◆ Destructor() [2/2]. void TClass::Destructor ; (; void * ; obj, . Bool_t ; dtorOnly = kFALSE . ). Explicitly call destructor for object. ; Definition at line 5400 of file TClass.cxx. ◆ DetermineCurrentStreamerInfo(). TVirtualStreamerInfo * TClass::DetermineCurrentStreamerInfo ; (; ). private . Determine and set pointer to current TVirtualStreamerInfo. ; Definition at line 5684 of file TClass.cxx. ◆ Draw(). void TClass::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw detailed class inheritance structure. ; If a class B inherits from a class A, the description of B is drawn on the right side of the description of A. Member functions overridden by B are shown in class A with a blue line erasing the corresponding member function ; Reimplemented from TObject.; Definition at line 2487 of file TClass.cxx. ◆ Dump() [1/2]. void TClass::Dump ; (; ); const. inlineoverridevirtual . Dump contents of object on stdout. ; Using the information in the object dictionary (class TClass) each data member is interpreted. If a data member is a pointer, the pointer value is printed; The following output is the Dump of a TArrow object: fAngle 0 Arrow opening angle (degrees); fArrowSize 0.2 Arrow Size; fOption.*fData; fX1 0.1 X of 1st point; fY1 0.15 Y of 1st point; fX2 0.67 X of 2nd point; fY2 0.83 Y of 2nd point; fUniqueID 0 object unique identifier; fBits 50331648 bit field status word; fLineColor 1 line color; fLineStyle 1 line style; fLineWidth 1 line width; fFillColor 19 fill area c",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:62969,Modifiability,inherit,inherits,62969,"at line 5639 of file TClass.cxx. ◆ DeleteArray() [2/2]. void TClass::DeleteArray ; (; void * ; ary, . Bool_t ; dtorOnly = kFALSE . ). Explicitly call operator delete[] for an array. ; Definition at line 5529 of file TClass.cxx. ◆ Destructor() [1/2]. void TClass::Destructor ; (; TClass::ObjectPtr ; obj, . Bool_t ; dtorOnly = kFALSE . ). Explicitly call destructor for object. ; Definition at line 5513 of file TClass.cxx. ◆ Destructor() [2/2]. void TClass::Destructor ; (; void * ; obj, . Bool_t ; dtorOnly = kFALSE . ). Explicitly call destructor for object. ; Definition at line 5400 of file TClass.cxx. ◆ DetermineCurrentStreamerInfo(). TVirtualStreamerInfo * TClass::DetermineCurrentStreamerInfo ; (; ). private . Determine and set pointer to current TVirtualStreamerInfo. ; Definition at line 5684 of file TClass.cxx. ◆ Draw(). void TClass::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw detailed class inheritance structure. ; If a class B inherits from a class A, the description of B is drawn on the right side of the description of A. Member functions overridden by B are shown in class A with a blue line erasing the corresponding member function ; Reimplemented from TObject.; Definition at line 2487 of file TClass.cxx. ◆ Dump() [1/2]. void TClass::Dump ; (; ); const. inlineoverridevirtual . Dump contents of object on stdout. ; Using the information in the object dictionary (class TClass) each data member is interpreted. If a data member is a pointer, the pointer value is printed; The following output is the Dump of a TArrow object: fAngle 0 Arrow opening angle (degrees); fArrowSize 0.2 Arrow Size; fOption.*fData; fX1 0.1 X of 1st point; fY1 0.15 Y of 1st point; fX2 0.67 X of 2nd point; fY2 0.83 Y of 2nd point; fUniqueID 0 object unique identifier; fBits 50331648 bit field status word; fLineColor 1 line color; fLineStyle 1 line style; fLineWidth 1 line width; fFillColor 19 fill area color; fFillStyle 1001 fill area style; X#define X(type, name); angleOption_t O",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:68604,Modifiability,variab,variable,68604,"ualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7066 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7036 of file TClass.cxx. ◆ FindStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::FindStreamerInfoAbstractEmulated ; (; UInt_t ; checksum); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4772 of file TClass.cxx. ◆ ForceReload(). void TClass::ForceReload ; (; TClass * ; oldcl). we found at least one equivalent. ; let's force a reload ; Definition at line 1336 of file TClass.cxx. ◆ GetActualClass(). TClass * TClass::GetActualClass ; (; const void * ; object); const. Return a pointer to the real class of the object. ; This is equivalent to object->IsA() when the class has a ClassDef. It is REQUIRED that object is coming from a proper pointer to the class represented by 'this'. Example: Special case: class MyClass : public AnotherClass, public TObject; TObjectMother of all ROOT objects.Definition TObject.h:41; then on return, one must do: TObject *obj = (TObject*)((void*)myobject)directory->Get(""some object of MyClass"");; MyClass::Class()->GetActualClass(obj); // this would be wrong!!!; Also if the class represented by 'this' and NONE of its p",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:68653,Modifiability,variab,variable,68653,"ualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7066 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7036 of file TClass.cxx. ◆ FindStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::FindStreamerInfoAbstractEmulated ; (; UInt_t ; checksum); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4772 of file TClass.cxx. ◆ ForceReload(). void TClass::ForceReload ; (; TClass * ; oldcl). we found at least one equivalent. ; let's force a reload ; Definition at line 1336 of file TClass.cxx. ◆ GetActualClass(). TClass * TClass::GetActualClass ; (; const void * ; object); const. Return a pointer to the real class of the object. ; This is equivalent to object->IsA() when the class has a ClassDef. It is REQUIRED that object is coming from a proper pointer to the class represented by 'this'. Example: Special case: class MyClass : public AnotherClass, public TObject; TObjectMother of all ROOT objects.Definition TObject.h:41; then on return, one must do: TObject *obj = (TObject*)((void*)myobject)directory->Get(""some object of MyClass"");; MyClass::Class()->GetActualClass(obj); // this would be wrong!!!; Also if the class represented by 'this' and NONE of its p",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:69935,Modifiability,inherit,inheritance,69935,"s(). TClass * TClass::GetActualClass ; (; const void * ; object); const. Return a pointer to the real class of the object. ; This is equivalent to object->IsA() when the class has a ClassDef. It is REQUIRED that object is coming from a proper pointer to the class represented by 'this'. Example: Special case: class MyClass : public AnotherClass, public TObject; TObjectMother of all ROOT objects.Definition TObject.h:41; then on return, one must do: TObject *obj = (TObject*)((void*)myobject)directory->Get(""some object of MyClass"");; MyClass::Class()->GetActualClass(obj); // this would be wrong!!!; Also if the class represented by 'this' and NONE of its parents classes have a virtual ptr table, the result will be 'this' and NOT the actual class. ; Definition at line 2607 of file TClass.cxx. ◆ GetBaseClass() [1/2]. TClass * TClass::GetBaseClass ; (; const char * ; classname). Return pointer to the base class ""classname"". ; Returns 0 in case ""classname"" is not a base class. Takes care of multiple inheritance. ; Definition at line 2655 of file TClass.cxx. ◆ GetBaseClass() [2/2]. TClass * TClass::GetBaseClass ; (; const TClass * ; cl). Return pointer to the base class ""cl"". ; Returns 0 in case ""cl"" is not a base class. Takes care of multiple inheritance. ; Definition at line 2674 of file TClass.cxx. ◆ GetBaseClassOffset(). Int_t TClass::GetBaseClassOffset ; (; const TClass * ; toBase, . void * ; address = nullptr, . bool ; isDerivedObject = true . ). Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class. Takes care of multiple inheritance. . Definition at line 2791 of file TClass.cxx. ◆ GetBaseClassOffsetRecurse(). Int_t TClass::GetBaseClassOffsetRecurse ; (; const TClass * ; cl). private . Return data member offset to the base class ""cl"". . Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset because it's virtual. Takes care of multiple inheritance. . Definition at line 2705 of",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:70183,Modifiability,inherit,inheritance,70183,"er to the class represented by 'this'. Example: Special case: class MyClass : public AnotherClass, public TObject; TObjectMother of all ROOT objects.Definition TObject.h:41; then on return, one must do: TObject *obj = (TObject*)((void*)myobject)directory->Get(""some object of MyClass"");; MyClass::Class()->GetActualClass(obj); // this would be wrong!!!; Also if the class represented by 'this' and NONE of its parents classes have a virtual ptr table, the result will be 'this' and NOT the actual class. ; Definition at line 2607 of file TClass.cxx. ◆ GetBaseClass() [1/2]. TClass * TClass::GetBaseClass ; (; const char * ; classname). Return pointer to the base class ""classname"". ; Returns 0 in case ""classname"" is not a base class. Takes care of multiple inheritance. ; Definition at line 2655 of file TClass.cxx. ◆ GetBaseClass() [2/2]. TClass * TClass::GetBaseClass ; (; const TClass * ; cl). Return pointer to the base class ""cl"". ; Returns 0 in case ""cl"" is not a base class. Takes care of multiple inheritance. ; Definition at line 2674 of file TClass.cxx. ◆ GetBaseClassOffset(). Int_t TClass::GetBaseClassOffset ; (; const TClass * ; toBase, . void * ; address = nullptr, . bool ; isDerivedObject = true . ). Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class. Takes care of multiple inheritance. . Definition at line 2791 of file TClass.cxx. ◆ GetBaseClassOffsetRecurse(). Int_t TClass::GetBaseClassOffsetRecurse ; (; const TClass * ; cl). private . Return data member offset to the base class ""cl"". . Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset because it's virtual. Takes care of multiple inheritance. . Definition at line 2705 of file TClass.cxx. ◆ GetBaseDataMember(). TClass * TClass::GetBaseDataMember ; (; const char * ; datamember). Return pointer to (base) class that contains datamember. ; Definition at line 2827 of file TClass.cxx. ◆ GetCheckSum() [1/3]. UInt_t TClass",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:70515,Modifiability,inherit,inheritance,70515,"is would be wrong!!!; Also if the class represented by 'this' and NONE of its parents classes have a virtual ptr table, the result will be 'this' and NOT the actual class. ; Definition at line 2607 of file TClass.cxx. ◆ GetBaseClass() [1/2]. TClass * TClass::GetBaseClass ; (; const char * ; classname). Return pointer to the base class ""classname"". ; Returns 0 in case ""classname"" is not a base class. Takes care of multiple inheritance. ; Definition at line 2655 of file TClass.cxx. ◆ GetBaseClass() [2/2]. TClass * TClass::GetBaseClass ; (; const TClass * ; cl). Return pointer to the base class ""cl"". ; Returns 0 in case ""cl"" is not a base class. Takes care of multiple inheritance. ; Definition at line 2674 of file TClass.cxx. ◆ GetBaseClassOffset(). Int_t TClass::GetBaseClassOffset ; (; const TClass * ; toBase, . void * ; address = nullptr, . bool ; isDerivedObject = true . ). Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class. Takes care of multiple inheritance. . Definition at line 2791 of file TClass.cxx. ◆ GetBaseClassOffsetRecurse(). Int_t TClass::GetBaseClassOffsetRecurse ; (; const TClass * ; cl). private . Return data member offset to the base class ""cl"". . Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset because it's virtual. Takes care of multiple inheritance. . Definition at line 2705 of file TClass.cxx. ◆ GetBaseDataMember(). TClass * TClass::GetBaseDataMember ; (; const char * ; datamember). Return pointer to (base) class that contains datamember. ; Definition at line 2827 of file TClass.cxx. ◆ GetCheckSum() [1/3]. UInt_t TClass::GetCheckSum ; (; Bool_t & ; isvalid); const. Return GetCheckSum(kCurrentCheckSum,isvalid);. ; Definition at line 6514 of file TClass.cxx. ◆ GetCheckSum() [2/3]. UInt_t TClass::GetCheckSum ; (; ECheckSum ; code, . Bool_t & ; isvalid . ); const. Compute and/or return the class check sum. ; isvalid is set to false, if the function ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:70888,Modifiability,inherit,inheritance,70888,"assname"" is not a base class. Takes care of multiple inheritance. ; Definition at line 2655 of file TClass.cxx. ◆ GetBaseClass() [2/2]. TClass * TClass::GetBaseClass ; (; const TClass * ; cl). Return pointer to the base class ""cl"". ; Returns 0 in case ""cl"" is not a base class. Takes care of multiple inheritance. ; Definition at line 2674 of file TClass.cxx. ◆ GetBaseClassOffset(). Int_t TClass::GetBaseClassOffset ; (; const TClass * ; toBase, . void * ; address = nullptr, . bool ; isDerivedObject = true . ). Return data member offset to the base class ""cl"".; Returns -1 in case ""cl"" is not a base class. Takes care of multiple inheritance. . Definition at line 2791 of file TClass.cxx. ◆ GetBaseClassOffsetRecurse(). Int_t TClass::GetBaseClassOffsetRecurse ; (; const TClass * ; cl). private . Return data member offset to the base class ""cl"". . Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset because it's virtual. Takes care of multiple inheritance. . Definition at line 2705 of file TClass.cxx. ◆ GetBaseDataMember(). TClass * TClass::GetBaseDataMember ; (; const char * ; datamember). Return pointer to (base) class that contains datamember. ; Definition at line 2827 of file TClass.cxx. ◆ GetCheckSum() [1/3]. UInt_t TClass::GetCheckSum ; (; Bool_t & ; isvalid); const. Return GetCheckSum(kCurrentCheckSum,isvalid);. ; Definition at line 6514 of file TClass.cxx. ◆ GetCheckSum() [2/3]. UInt_t TClass::GetCheckSum ; (; ECheckSum ; code, . Bool_t & ; isvalid . ); const. Compute and/or return the class check sum. ; isvalid is set to false, if the function is unable to calculate the checksum.; The class ckecksum is used by the automatic schema evolution algorithm to uniquely identify a class version. The check sum is built from the names/types of base classes and data members. Original algorithm from Victor Perevovchikov (perev.nosp@m.@bnl.nosp@m..gov).; The valid range of code is determined by ECheckSum. kNoEnum: data mem",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:91855,Modifiability,variab,variable,91855,"etState ; (; ); const. inline . Definition at line 488 of file TClass.h. ◆ GetStreamer(). TClassStreamer * TClass::GetStreamer ; (; ); const. Return the Streamer Class allowing streaming (if any). ; Definition at line 2914 of file TClass.cxx. ◆ GetStreamerFunc(). ClassStreamerFunc_t TClass::GetStreamerFunc ; (; ); const. Get a wrapper/accessor function around this class custom streamer (member function). ; Definition at line 2939 of file TClass.cxx. ◆ GetStreamerInfo(). TVirtualStreamerInfo * TClass::GetStreamerInfo ; (; Int_t ; version = 0, . Bool_t ; isTransient = kFALSE . ); const. returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ; Note: There are two special version numbers: - 0: Use the class version from the currently loaded class library.; - -1: Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4599 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4709 of file TClass.cxx. ◆ GetStreamerInfoImpl(). TVirtualStreamerInfo",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:91904,Modifiability,variab,variable,91904,"etState ; (; ); const. inline . Definition at line 488 of file TClass.h. ◆ GetStreamer(). TClassStreamer * TClass::GetStreamer ; (; ); const. Return the Streamer Class allowing streaming (if any). ; Definition at line 2914 of file TClass.cxx. ◆ GetStreamerFunc(). ClassStreamerFunc_t TClass::GetStreamerFunc ; (; ); const. Get a wrapper/accessor function around this class custom streamer (member function). ; Definition at line 2939 of file TClass.cxx. ◆ GetStreamerInfo(). TVirtualStreamerInfo * TClass::GetStreamerInfo ; (; Int_t ; version = 0, . Bool_t ; isTransient = kFALSE . ); const. returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ; Note: There are two special version numbers: - 0: Use the class version from the currently loaded class library.; - -1: Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4599 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4709 of file TClass.cxx. ◆ GetStreamerInfoImpl(). TVirtualStreamerInfo",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:92676,Modifiability,variab,variable,92676," Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4599 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4709 of file TClass.cxx. ◆ GetStreamerInfoImpl(). TVirtualStreamerInfo * TClass::GetStreamerInfoImpl ; (; Int_t ; version, . Bool_t ; silent . ); const. private . Definition at line 4634 of file TClass.cxx. ◆ GetStreamerInfos(). const TObjArray * TClass::GetStreamerInfos ; (; ); const. inline . Definition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:92725,Modifiability,variab,variable,92725," Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4599 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4709 of file TClass.cxx. ◆ GetStreamerInfoImpl(). TVirtualStreamerInfo * TClass::GetStreamerInfoImpl ; (; Int_t ; version, . Bool_t ; silent . ); const. private . Definition at line 4634 of file TClass.cxx. ◆ GetStreamerInfos(). const TObjArray * TClass::GetStreamerInfos ; (; ); const. inline . Definition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:93420,Modifiability,inherit,inheritance,93420,"0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4709 of file TClass.cxx. ◆ GetStreamerInfoImpl(). TVirtualStreamerInfo * TClass::GetStreamerInfoImpl ; (; Int_t ; version, . Bool_t ; silent . ); const. private . Definition at line 4634 of file TClass.cxx. ◆ GetStreamerInfos(). const TObjArray * TClass::GetStreamerInfos ; (; ); const. inline . Definition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ; Definition at line 508 of file TClass.h. ◆ HasDataMemberInfo(). Bool_t TClass::HasDataMemberInfo ; (; ); const. inline . Definition at line 407 of file TClass.h. ◆ HasDefaultConstructor(). Bool_t TClass::HasDefaultConstructor ; (; Bool_t ; testio = kFALSE); const. Return true if we have access to a constructor usable for I/O. ; This is typically the default constructor but can also be a constructor specifically marked for I/O (for example a constructor taking a TRootIOCtor* as an argument). In other words, if this routine returns true, TClass::New is guarantee to succeed. To know if the class described by this TClass has a default con",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:97525,Modifiability,inherit,inherits,97525,"Object space overhead on the file. However, the information (fBits, fUniqueID) of TObject is lost.; Note that to be effective for objects streamed object-wise this function must be called for the class deriving directly from TObject, eg, assuming that BigTrack derives from Track and Track derives from TObject, one must do: Track::Class()->IgnoreTObjectStreamer();; TClass::IgnoreTObjectStreamervoid IgnoreTObjectStreamer(Bool_t ignore=kTRUE)When the class kIgnoreTObjectStreamer bit is set, the automatically generated Streamer will not call ...Definition TClass.cxx:4841; TObject::Classstatic TClass * Class(); and not: BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree, this function must be called for the most derived class (i.e. BigTrack). ; Definition at line 4841 of file TClass.cxx. ◆ InheritsFrom() [1/2]. Bool_t TClass::InheritsFrom ; (; const char * ; classname); const. overridevirtual . Return kTRUE if this class inherits from a class with name ""classname"". ; note that the function returns kTRUE in case classname is the class itself ; Reimplemented from TObject.; Definition at line 4874 of file TClass.cxx. ◆ InheritsFrom() [2/2]. Bool_t TClass::InheritsFrom ; (; const TClass * ; cl); const. overridevirtual . Return kTRUE if this class inherits from class cl. ; note that the function returns KTRUE in case cl is the class itself ; Reimplemented from TObject.; Definition at line 4885 of file TClass.cxx. ◆ Init(). void TClass::Init ; (; const char * ; name, . Version_t ; cversion, . const std::type_info * ; typeinfo, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il, . ClassInfo_t * ; givenInfo, . Bool_t ; silent . ). private . Initialize a TClass object. ; This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. ; Definition at line 1369 of file TClass.cxx. ◆ InterpretedShowMembers(). void TClass::Interpret",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:97853,Modifiability,inherit,inherits,97853,"ust do: Track::Class()->IgnoreTObjectStreamer();; TClass::IgnoreTObjectStreamervoid IgnoreTObjectStreamer(Bool_t ignore=kTRUE)When the class kIgnoreTObjectStreamer bit is set, the automatically generated Streamer will not call ...Definition TClass.cxx:4841; TObject::Classstatic TClass * Class(); and not: BigTrack::Class()->IgnoreTObjectStreamer();; To be effective for object streamed member-wise or split in a TTree, this function must be called for the most derived class (i.e. BigTrack). ; Definition at line 4841 of file TClass.cxx. ◆ InheritsFrom() [1/2]. Bool_t TClass::InheritsFrom ; (; const char * ; classname); const. overridevirtual . Return kTRUE if this class inherits from a class with name ""classname"". ; note that the function returns kTRUE in case classname is the class itself ; Reimplemented from TObject.; Definition at line 4874 of file TClass.cxx. ◆ InheritsFrom() [2/2]. Bool_t TClass::InheritsFrom ; (; const TClass * ; cl); const. overridevirtual . Return kTRUE if this class inherits from class cl. ; note that the function returns KTRUE in case cl is the class itself ; Reimplemented from TObject.; Definition at line 4885 of file TClass.cxx. ◆ Init(). void TClass::Init ; (; const char * ; name, . Version_t ; cversion, . const std::type_info * ; typeinfo, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il, . ClassInfo_t * ; givenInfo, . Bool_t ; silent . ). private . Initialize a TClass object. ; This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. ; Definition at line 1369 of file TClass.cxx. ◆ InterpretedShowMembers(). void TClass::InterpretedShowMembers ; (; void * ; obj, . TMemberInspector & ; insp, . Bool_t ; isTransient . ). Do a ShowMembers() traversal of all members and base classes' members using the reflection information from the interpreter. ; Works also for interpreted objects. ; Definition at line 2242 of file TClass.cxx. ◆ IsA(). TClass * T",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:100627,Modifiability,inherit,inherits,100627,"nst. inlineoverridevirtual . Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ; Reimplemented from TObject.; Definition at line 517 of file TClass.h. ◆ IsFolder() [2/2]. Bool_t TClass::IsFolder ; (; void * ; obj); const. Return kTRUE if the class has elements. ; Definition at line 4135 of file TClass.cxx. ◆ IsForeign(). Bool_t TClass::IsForeign ; (; ); const. Return kTRUE is the class is Foreign (the class does not have a Streamer method). ; Definition at line 5947 of file TClass.cxx. ◆ IsLoaded(). Bool_t TClass::IsLoaded ; (; ); const. Return true if the shared library of this class is currently in the a process's memory. ; Return false, after the shared library has been unloaded or if this is an 'emulated' class created from a file's StreamerInfo. ; Definition at line 5912 of file TClass.cxx. ◆ IsStartingWithTObject(). Bool_t TClass::IsStartingWithTObject ; (; ); const. Returns true if this class inherits from TObject and if the start of the TObject parts is at the very beginning of the objects. ; Concretely this means that the following code is proper for this class: ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from TObject. ; Definition at line 5929 of file TClass.cxx. ◆ IsSyntheticPair(). Bool_t TClass::IsSyntheticPair ; (; ); const. inline . Definition at line 521 of file TClass.h. ◆ IsTObject(). Bool_t TClass::IsTObject ; (; ); const. Return kTRUE is the class inherits from TObject. ; Definition at line 5938 of file TClass.cxx. ◆ IsVersioned(). Bool_t TClass::IsVersioned ; (; ); const. inline . Definition at line 522 of file TClass.h. ◆ Load(). TClass * TClass::Load ; (; TBuffer & ; b). static . Load class description from I/O buffer and return class object. ; Definition at line 5715 of file TClass.cxx. ◆ LoadClass(). TClass * TClass::LoadClass ; (; const char * ; requestedname, . Bool_t ; silent . ). static ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:100932,Modifiability,inherit,inherit,100932,"17 of file TClass.h. ◆ IsFolder() [2/2]. Bool_t TClass::IsFolder ; (; void * ; obj); const. Return kTRUE if the class has elements. ; Definition at line 4135 of file TClass.cxx. ◆ IsForeign(). Bool_t TClass::IsForeign ; (; ); const. Return kTRUE is the class is Foreign (the class does not have a Streamer method). ; Definition at line 5947 of file TClass.cxx. ◆ IsLoaded(). Bool_t TClass::IsLoaded ; (; ); const. Return true if the shared library of this class is currently in the a process's memory. ; Return false, after the shared library has been unloaded or if this is an 'emulated' class created from a file's StreamerInfo. ; Definition at line 5912 of file TClass.cxx. ◆ IsStartingWithTObject(). Bool_t TClass::IsStartingWithTObject ; (; ); const. Returns true if this class inherits from TObject and if the start of the TObject parts is at the very beginning of the objects. ; Concretely this means that the following code is proper for this class: ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from TObject. ; Definition at line 5929 of file TClass.cxx. ◆ IsSyntheticPair(). Bool_t TClass::IsSyntheticPair ; (; ); const. inline . Definition at line 521 of file TClass.h. ◆ IsTObject(). Bool_t TClass::IsTObject ; (; ); const. Return kTRUE is the class inherits from TObject. ; Definition at line 5938 of file TClass.cxx. ◆ IsVersioned(). Bool_t TClass::IsVersioned ; (; ); const. inline . Definition at line 522 of file TClass.h. ◆ Load(). TClass * TClass::Load ; (; TBuffer & ; b). static . Load class description from I/O buffer and return class object. ; Definition at line 5715 of file TClass.cxx. ◆ LoadClass(). TClass * TClass::LoadClass ; (; const char * ; requestedname, . Bool_t ; silent . ). static . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' either from the TClassTable or from the list of generator. If silent is",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:101206,Modifiability,inherit,inherits,101206,". ◆ IsLoaded(). Bool_t TClass::IsLoaded ; (; ); const. Return true if the shared library of this class is currently in the a process's memory. ; Return false, after the shared library has been unloaded or if this is an 'emulated' class created from a file's StreamerInfo. ; Definition at line 5912 of file TClass.cxx. ◆ IsStartingWithTObject(). Bool_t TClass::IsStartingWithTObject ; (; ); const. Returns true if this class inherits from TObject and if the start of the TObject parts is at the very beginning of the objects. ; Concretely this means that the following code is proper for this class: ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from TObject. ; Definition at line 5929 of file TClass.cxx. ◆ IsSyntheticPair(). Bool_t TClass::IsSyntheticPair ; (; ); const. inline . Definition at line 521 of file TClass.h. ◆ IsTObject(). Bool_t TClass::IsTObject ; (; ); const. Return kTRUE is the class inherits from TObject. ; Definition at line 5938 of file TClass.cxx. ◆ IsVersioned(). Bool_t TClass::IsVersioned ; (; ); const. inline . Definition at line 522 of file TClass.h. ◆ Load(). TClass * TClass::Load ; (; TBuffer & ; b). static . Load class description from I/O buffer and return class object. ; Definition at line 5715 of file TClass.cxx. ◆ LoadClass(). TClass * TClass::LoadClass ; (; const char * ; requestedname, . Bool_t ; silent . ). static . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' either from the TClassTable or from the list of generator. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5749 of file TClass.cxx. ◆ LoadClassCustom(). TClass * TClass::LoadClassCustom ; (; const char * ; requestedname, . Bool_t ; silent . ). staticprivate ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:109187,Modifiability,inherit,inherits,109187,"sNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5310 of file TClass.cxx. ◆ operator=(). TClass & TClass::operator= ; (; const TClass & ; ). privatedelete . ◆ PostLoadCheck(). void TClass::PostLoadCheck ; (; ). virtual . Do the initialization that can only be done after the CINT dictionary has been fully populated and can not be delayed efficiently. ; Definition at line 5959 of file TClass.cxx. ◆ Property(). Long_t TClass::Property ; (; ); const. overridevirtual . Returns the properties of the TClass as a bit field stored as a Long_t value. ; The bit values used for the return value are defined in the enum EProperty (in TDictionary.h); Also sets TObject::fBits and fStreamerType to cache information about the class. The bits stored in TObject::fBits are kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; a#define a(i)Definition RSha256.hxx:99; TClass::Streamervoid Streamer(void *obj, TBuffer &b, const TClass *onfile_class=nullptr) constDefinition TClass.h:607; TClass::kStartWithTObject@ kStartWithTObjectDefinition TClass.h:103; TClass::kIsTObject@ kIsTObjectDefinition TClass.h:100; TClass::kIsForeign@ kIsForeignDefinition TClass.h:101; The value of fStreamerType are kTObject : the class inherits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulatedStreamer: the class is missing its shared library.; free#define freeDefinition civetweb.c:1539; TClass::kEmulatedStreamer@ kEmulatedStreamerDefinition TClass.h:334; TClass::kExternal@ kExternalDefinition TClass.h:334; TClass::kForeign@ kForeignDefinition TClass.h:334; TClass::kInstrumented@ kInstrumentedDefiniti",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:109267,Modifiability,inherit,inheritance,109267,"sNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5310 of file TClass.cxx. ◆ operator=(). TClass & TClass::operator= ; (; const TClass & ; ). privatedelete . ◆ PostLoadCheck(). void TClass::PostLoadCheck ; (; ). virtual . Do the initialization that can only be done after the CINT dictionary has been fully populated and can not be delayed efficiently. ; Definition at line 5959 of file TClass.cxx. ◆ Property(). Long_t TClass::Property ; (; ); const. overridevirtual . Returns the properties of the TClass as a bit field stored as a Long_t value. ; The bit values used for the return value are defined in the enum EProperty (in TDictionary.h); Also sets TObject::fBits and fStreamerType to cache information about the class. The bits stored in TObject::fBits are kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; a#define a(i)Definition RSha256.hxx:99; TClass::Streamervoid Streamer(void *obj, TBuffer &b, const TClass *onfile_class=nullptr) constDefinition TClass.h:607; TClass::kStartWithTObject@ kStartWithTObjectDefinition TClass.h:103; TClass::kIsTObject@ kIsTObjectDefinition TClass.h:100; TClass::kIsForeign@ kIsForeignDefinition TClass.h:101; The value of fStreamerType are kTObject : the class inherits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulatedStreamer: the class is missing its shared library.; free#define freeDefinition civetweb.c:1539; TClass::kEmulatedStreamer@ kEmulatedStreamerDefinition TClass.h:334; TClass::kExternal@ kExternalDefinition TClass.h:334; TClass::kForeign@ kForeignDefinition TClass.h:334; TClass::kInstrumented@ kInstrumentedDefiniti",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:109730,Modifiability,inherit,inherits,109730,"Property ; (; ); const. overridevirtual . Returns the properties of the TClass as a bit field stored as a Long_t value. ; The bit values used for the return value are defined in the enum EProperty (in TDictionary.h); Also sets TObject::fBits and fStreamerType to cache information about the class. The bits stored in TObject::fBits are kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; a#define a(i)Definition RSha256.hxx:99; TClass::Streamervoid Streamer(void *obj, TBuffer &b, const TClass *onfile_class=nullptr) constDefinition TClass.h:607; TClass::kStartWithTObject@ kStartWithTObjectDefinition TClass.h:103; TClass::kIsTObject@ kIsTObjectDefinition TClass.h:100; TClass::kIsForeign@ kIsForeignDefinition TClass.h:101; The value of fStreamerType are kTObject : the class inherits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulatedStreamer: the class is missing its shared library.; free#define freeDefinition civetweb.c:1539; TClass::kEmulatedStreamer@ kEmulatedStreamerDefinition TClass.h:334; TClass::kExternal@ kExternalDefinition TClass.h:334; TClass::kForeign@ kForeignDefinition TClass.h:334; TClass::kInstrumented@ kInstrumentedDefinition TClass.h:334; TClass::kTObject@ kTObjectDefinition TClass.h:334; Implementation note: the data member fProperty has the value -1 until it is initialized. ; Implements TDictionary.; Definition at line 6086 of file TClass.cxx. ◆ ReadBuffer() [1/2]. Int_t TClass::ReadBuffer ; (; TBuffer & ; b, . void * ; pointer . ). Function called by the Streamer functions to deserialize information from buffer b into object at p. ; Definition at line 6767 of file TClass.cxx. ◆ ReadBuffer() [2/2]. Int_t TClass::ReadBuffer ; (; TBuffer & ; b, . void * ; pointer, . Int_t ; version, . UInt_t",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:1130,Performance,perform,perform,1130,"mbers |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TClass Class Reference. ; TClass instances represent classes, structs and namespaces in the ROOT type system. ; TClass instances are created starting from different sources of information:; TStreamerInfo instances saved in a ROOT file which is opened. This is called in jargon an emulated TClass.; From TProtoClass instances saved in a ROOT pcm file created by the dictionary generator and the dictionary itself.; From a lookup in the AST built by cling. If a TClass instance is built through the mechanisms 1. and 2., it does not contain information about methods of the class/struct/namespace it represents. Conversely, if built through 3. or 1., it does not carry the information which is necessary to ROOT to perform I/O of instances of the class/struct it represents. The mechanisms 1., 2. and 3. are not mutually exclusive: it can happen that during the execution of the program, all the three are triggered, modifying the state of the TClass instance.; In order to retrieve a TClass instance from the type system, a query can be executed as follows through the static TClass::GetClass method:; auto myClassTClass_0 = TClass::GetClass(""myClass"");; auto myClassTClass_1 = TClass::GetClass<myClass>();; auto myClassTClass_2 = TClass::GetClass(myClassTypeInfo);; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:2968; The name of classes is crucial for ROOT. A careful procedure of name normalization is carried out for each and every class. A normalized name is a valid C++ class name. In order to access the name of a class within the ROOT type system, the method",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:1749,Performance,load,load,1749,"merInfo instances saved in a ROOT file which is opened. This is called in jargon an emulated TClass.; From TProtoClass instances saved in a ROOT pcm file created by the dictionary generator and the dictionary itself.; From a lookup in the AST built by cling. If a TClass instance is built through the mechanisms 1. and 2., it does not contain information about methods of the class/struct/namespace it represents. Conversely, if built through 3. or 1., it does not carry the information which is necessary to ROOT to perform I/O of instances of the class/struct it represents. The mechanisms 1., 2. and 3. are not mutually exclusive: it can happen that during the execution of the program, all the three are triggered, modifying the state of the TClass instance.; In order to retrieve a TClass instance from the type system, a query can be executed as follows through the static TClass::GetClass method:; auto myClassTClass_0 = TClass::GetClass(""myClass"");; auto myClassTClass_1 = TClass::GetClass<myClass>();; auto myClassTClass_2 = TClass::GetClass(myClassTypeInfo);; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:2968; The name of classes is crucial for ROOT. A careful procedure of name normalization is carried out for each and every class. A normalized name is a valid C++ class name. In order to access the name of a class within the ROOT type system, the method TClass::GetName() can be used. ; Definition at line 81 of file TClass.h. Classes; class  InsertTClassInRegistryRAII;  ; struct  ObjectPtr;  ; class  TDeclNameRegistry;  . Public Types; enum  ECheckSum { ;   kCurrentCheckSum = 0; , kNoEnum = 1; , kReflexNoComment = 2; , kNoRange = 3; , ;   kWithTypeDef = 4; , kReflex = 5; , kNoRangeCheck = 6; , kNoBaseCheckSum = 7; , ;   kLatestCheckSum = 8. };  ; enum  ENewType { kRealNew = 0; , kClassNew; , kDummyNew; };  ; enum  EState { ;   kNoI",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:9444,Performance,load,loaded,9444,"oid *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; char * EscapeChars (const char *text) const;  Introduce an escape character (@) in front of a special chars. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const char *onfile_classname, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const TClass *onfile_cl, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindStreamerInfo (UInt_t checksum, Bool_t isTransient=kFALSE) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; TVirtualStreamerInfo * FindStreamerInfoAbstractEmulated (UInt_t checksum) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; void ForceReload (TClass *oldcl);  we found at least one equivalent. ;  ; TClass * GetActualClass (const void *object) const;  Return a pointer to the real class of the object. ;  ; TClass * GetBaseClass (const char *classname);  Return pointer to the base class ""classname"". ;  ; TClass * GetBaseClass (const TClass *base);  Return pointer to the base class ""cl"". ;  ; Int_t GetBaseClassOffset (const TClass *toBase, void *address=nullptr, bool isDerivedObject=true);  ; TClass * GetBaseDataMember (const char *datamember);  Return pointer to (base) class that contains datamember. ;  ; UInt_t GetCheckSum (Bool_t &isvalid) const;  Return GetCheckSum(kCurrentCheckSum,isvalid);. ;  ; UInt_t GetCheckSum (ECheckSum code, Bool_t &isvalid) const;  Compute and/or return the class check sum. ;  ; UInt_t GetCheckSum (ECheckSum code=kCurrentCheckSum",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:12942,Performance,load,load,12942,"membername) const;  return offset for member name. ;  ; Short_t GetDeclFileLine () const;  ; const char * GetDeclFileName () const;  Return name of the file containing the declaration of this class. ;  ; ROOT::DelFunc_t GetDelete () const;  Return the wrapper around delete ThiObject. ;  ; ROOT::DelArrFunc_t GetDeleteArray () const;  Return the wrapper around delete [] ThiObject. ;  ; ROOT::DesFunc_t GetDestructor () const;  Return the wrapper around the destructor. ;  ; ROOT::DirAutoAdd_t GetDirectoryAutoAdd () const;  Return the wrapper around the directory auto add function. ;  ; TFunctionTemplate * GetFunctionTemplate (const char *name);  ; UInt_t GetHeapInstanceCount () const;  ; Short_t GetImplFileLine () const;  ; const char * GetImplFileName () const;  ; UInt_t GetInstanceCount () const;  ; TVirtualIsAProxy * GetIsAProxy () const;  Return the proxy implementing the IsA functionality. ;  ; TVirtualStreamerInfo * GetLastReadInfo () const;  ; TList * GetListOfAllPublicDataMembers (Bool_t load=kTRUE);  Returns a list of all public data members of this class and its base classes. ;  ; const TList * GetListOfAllPublicMethods (Bool_t load=kTRUE);  Returns a list of all public methods of this class and its base classes. ;  ; TList * GetListOfBases ();  Return list containing the TBaseClass(es) of a class. ;  ; TList * GetListOfDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of a class. ;  ; TList * GetListOfEnums (Bool_t load=kTRUE);  Return a list containing the TEnums of a class. ;  ; TList * GetListOfFunctionTemplates (Bool_t load=kTRUE);  Return TListOfFunctionTemplates for a class. ;  ; TCollection * GetListOfMethodOverloads (const char *name) const;  Return the collection of functions named ""name"". ;  ; TList * GetListOfMethods (Bool_t load=kTRUE);  Return list containing the TMethods of a class. ;  ; TList * GetListOfRealData () const;  ; TList * GetListOfUsingDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:13087,Performance,load,load,13087,"the declaration of this class. ;  ; ROOT::DelFunc_t GetDelete () const;  Return the wrapper around delete ThiObject. ;  ; ROOT::DelArrFunc_t GetDeleteArray () const;  Return the wrapper around delete [] ThiObject. ;  ; ROOT::DesFunc_t GetDestructor () const;  Return the wrapper around the destructor. ;  ; ROOT::DirAutoAdd_t GetDirectoryAutoAdd () const;  Return the wrapper around the directory auto add function. ;  ; TFunctionTemplate * GetFunctionTemplate (const char *name);  ; UInt_t GetHeapInstanceCount () const;  ; Short_t GetImplFileLine () const;  ; const char * GetImplFileName () const;  ; UInt_t GetInstanceCount () const;  ; TVirtualIsAProxy * GetIsAProxy () const;  Return the proxy implementing the IsA functionality. ;  ; TVirtualStreamerInfo * GetLastReadInfo () const;  ; TList * GetListOfAllPublicDataMembers (Bool_t load=kTRUE);  Returns a list of all public data members of this class and its base classes. ;  ; const TList * GetListOfAllPublicMethods (Bool_t load=kTRUE);  Returns a list of all public methods of this class and its base classes. ;  ; TList * GetListOfBases ();  Return list containing the TBaseClass(es) of a class. ;  ; TList * GetListOfDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of a class. ;  ; TList * GetListOfEnums (Bool_t load=kTRUE);  Return a list containing the TEnums of a class. ;  ; TList * GetListOfFunctionTemplates (Bool_t load=kTRUE);  Return TListOfFunctionTemplates for a class. ;  ; TCollection * GetListOfMethodOverloads (const char *name) const;  Return the collection of functions named ""name"". ;  ; TList * GetListOfMethods (Bool_t load=kTRUE);  Return list containing the TMethods of a class. ;  ; TList * GetListOfRealData () const;  ; TList * GetListOfUsingDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of using declarations of a class. ;  ; void GetMenuItems (TList *listitems);  Returns list of methods accessible by context menu. ;  ; TList * GetMenuList () const;  Ret",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:13303,Performance,load,load,13303,"t. ;  ; ROOT::DesFunc_t GetDestructor () const;  Return the wrapper around the destructor. ;  ; ROOT::DirAutoAdd_t GetDirectoryAutoAdd () const;  Return the wrapper around the directory auto add function. ;  ; TFunctionTemplate * GetFunctionTemplate (const char *name);  ; UInt_t GetHeapInstanceCount () const;  ; Short_t GetImplFileLine () const;  ; const char * GetImplFileName () const;  ; UInt_t GetInstanceCount () const;  ; TVirtualIsAProxy * GetIsAProxy () const;  Return the proxy implementing the IsA functionality. ;  ; TVirtualStreamerInfo * GetLastReadInfo () const;  ; TList * GetListOfAllPublicDataMembers (Bool_t load=kTRUE);  Returns a list of all public data members of this class and its base classes. ;  ; const TList * GetListOfAllPublicMethods (Bool_t load=kTRUE);  Returns a list of all public methods of this class and its base classes. ;  ; TList * GetListOfBases ();  Return list containing the TBaseClass(es) of a class. ;  ; TList * GetListOfDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of a class. ;  ; TList * GetListOfEnums (Bool_t load=kTRUE);  Return a list containing the TEnums of a class. ;  ; TList * GetListOfFunctionTemplates (Bool_t load=kTRUE);  Return TListOfFunctionTemplates for a class. ;  ; TCollection * GetListOfMethodOverloads (const char *name) const;  Return the collection of functions named ""name"". ;  ; TList * GetListOfMethods (Bool_t load=kTRUE);  Return list containing the TMethods of a class. ;  ; TList * GetListOfRealData () const;  ; TList * GetListOfUsingDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of using declarations of a class. ;  ; void GetMenuItems (TList *listitems);  Returns list of methods accessible by context menu. ;  ; TList * GetMenuList () const;  Return the list of menu items associated with the class. ;  ; ROOT::MergeFunc_t GetMerge () const;  Return the wrapper around Merge. ;  ; TMethod * GetMethod (const char *method, const char *params, Bool_t objectIs",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:13405,Performance,load,load,13405,"irAutoAdd_t GetDirectoryAutoAdd () const;  Return the wrapper around the directory auto add function. ;  ; TFunctionTemplate * GetFunctionTemplate (const char *name);  ; UInt_t GetHeapInstanceCount () const;  ; Short_t GetImplFileLine () const;  ; const char * GetImplFileName () const;  ; UInt_t GetInstanceCount () const;  ; TVirtualIsAProxy * GetIsAProxy () const;  Return the proxy implementing the IsA functionality. ;  ; TVirtualStreamerInfo * GetLastReadInfo () const;  ; TList * GetListOfAllPublicDataMembers (Bool_t load=kTRUE);  Returns a list of all public data members of this class and its base classes. ;  ; const TList * GetListOfAllPublicMethods (Bool_t load=kTRUE);  Returns a list of all public methods of this class and its base classes. ;  ; TList * GetListOfBases ();  Return list containing the TBaseClass(es) of a class. ;  ; TList * GetListOfDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of a class. ;  ; TList * GetListOfEnums (Bool_t load=kTRUE);  Return a list containing the TEnums of a class. ;  ; TList * GetListOfFunctionTemplates (Bool_t load=kTRUE);  Return TListOfFunctionTemplates for a class. ;  ; TCollection * GetListOfMethodOverloads (const char *name) const;  Return the collection of functions named ""name"". ;  ; TList * GetListOfMethods (Bool_t load=kTRUE);  Return list containing the TMethods of a class. ;  ; TList * GetListOfRealData () const;  ; TList * GetListOfUsingDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of using declarations of a class. ;  ; void GetMenuItems (TList *listitems);  Returns list of methods accessible by context menu. ;  ; TList * GetMenuList () const;  Return the list of menu items associated with the class. ;  ; ROOT::MergeFunc_t GetMerge () const;  Return the wrapper around Merge. ;  ; TMethod * GetMethod (const char *method, const char *params, Bool_t objectIsConst=kFALSE);  Find the best method (if there is one) matching the parameters. ;  ; TMethod * GetMetho",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:13515,Performance,load,load,13515,";  ; TFunctionTemplate * GetFunctionTemplate (const char *name);  ; UInt_t GetHeapInstanceCount () const;  ; Short_t GetImplFileLine () const;  ; const char * GetImplFileName () const;  ; UInt_t GetInstanceCount () const;  ; TVirtualIsAProxy * GetIsAProxy () const;  Return the proxy implementing the IsA functionality. ;  ; TVirtualStreamerInfo * GetLastReadInfo () const;  ; TList * GetListOfAllPublicDataMembers (Bool_t load=kTRUE);  Returns a list of all public data members of this class and its base classes. ;  ; const TList * GetListOfAllPublicMethods (Bool_t load=kTRUE);  Returns a list of all public methods of this class and its base classes. ;  ; TList * GetListOfBases ();  Return list containing the TBaseClass(es) of a class. ;  ; TList * GetListOfDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of a class. ;  ; TList * GetListOfEnums (Bool_t load=kTRUE);  Return a list containing the TEnums of a class. ;  ; TList * GetListOfFunctionTemplates (Bool_t load=kTRUE);  Return TListOfFunctionTemplates for a class. ;  ; TCollection * GetListOfMethodOverloads (const char *name) const;  Return the collection of functions named ""name"". ;  ; TList * GetListOfMethods (Bool_t load=kTRUE);  Return list containing the TMethods of a class. ;  ; TList * GetListOfRealData () const;  ; TList * GetListOfUsingDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of using declarations of a class. ;  ; void GetMenuItems (TList *listitems);  Returns list of methods accessible by context menu. ;  ; TList * GetMenuList () const;  Return the list of menu items associated with the class. ;  ; ROOT::MergeFunc_t GetMerge () const;  Return the wrapper around Merge. ;  ; TMethod * GetMethod (const char *method, const char *params, Bool_t objectIsConst=kFALSE);  Find the best method (if there is one) matching the parameters. ;  ; TMethod * GetMethodAllAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * G",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:13732,Performance,load,load,13732," TVirtualIsAProxy * GetIsAProxy () const;  Return the proxy implementing the IsA functionality. ;  ; TVirtualStreamerInfo * GetLastReadInfo () const;  ; TList * GetListOfAllPublicDataMembers (Bool_t load=kTRUE);  Returns a list of all public data members of this class and its base classes. ;  ; const TList * GetListOfAllPublicMethods (Bool_t load=kTRUE);  Returns a list of all public methods of this class and its base classes. ;  ; TList * GetListOfBases ();  Return list containing the TBaseClass(es) of a class. ;  ; TList * GetListOfDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of a class. ;  ; TList * GetListOfEnums (Bool_t load=kTRUE);  Return a list containing the TEnums of a class. ;  ; TList * GetListOfFunctionTemplates (Bool_t load=kTRUE);  Return TListOfFunctionTemplates for a class. ;  ; TCollection * GetListOfMethodOverloads (const char *name) const;  Return the collection of functions named ""name"". ;  ; TList * GetListOfMethods (Bool_t load=kTRUE);  Return list containing the TMethods of a class. ;  ; TList * GetListOfRealData () const;  ; TList * GetListOfUsingDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of using declarations of a class. ;  ; void GetMenuItems (TList *listitems);  Returns list of methods accessible by context menu. ;  ; TList * GetMenuList () const;  Return the list of menu items associated with the class. ;  ; ROOT::MergeFunc_t GetMerge () const;  Return the wrapper around Merge. ;  ; TMethod * GetMethod (const char *method, const char *params, Bool_t objectIsConst=kFALSE);  Find the best method (if there is one) matching the parameters. ;  ; TMethod * GetMethodAllAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodWithPrototype (const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:13880,Performance,load,load,13880,"fo () const;  ; TList * GetListOfAllPublicDataMembers (Bool_t load=kTRUE);  Returns a list of all public data members of this class and its base classes. ;  ; const TList * GetListOfAllPublicMethods (Bool_t load=kTRUE);  Returns a list of all public methods of this class and its base classes. ;  ; TList * GetListOfBases ();  Return list containing the TBaseClass(es) of a class. ;  ; TList * GetListOfDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of a class. ;  ; TList * GetListOfEnums (Bool_t load=kTRUE);  Return a list containing the TEnums of a class. ;  ; TList * GetListOfFunctionTemplates (Bool_t load=kTRUE);  Return TListOfFunctionTemplates for a class. ;  ; TCollection * GetListOfMethodOverloads (const char *name) const;  Return the collection of functions named ""name"". ;  ; TList * GetListOfMethods (Bool_t load=kTRUE);  Return list containing the TMethods of a class. ;  ; TList * GetListOfRealData () const;  ; TList * GetListOfUsingDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of using declarations of a class. ;  ; void GetMenuItems (TList *listitems);  Returns list of methods accessible by context menu. ;  ; TList * GetMenuList () const;  Return the list of menu items associated with the class. ;  ; ROOT::MergeFunc_t GetMerge () const;  Return the wrapper around Merge. ;  ; TMethod * GetMethod (const char *method, const char *params, Bool_t objectIsConst=kFALSE);  Find the best method (if there is one) matching the parameters. ;  ; TMethod * GetMethodAllAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodWithPrototype (const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch);  Find the method with a given prototype. ;  ; void GetMissingDictionaries (THashTable &result, bool recurse",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:16932,Performance,load,loaded,16932,"  ; ROOT::ResetAfterMergeFunc_t GetResetAfterMerge () const;  Return the wrapper around Merge. ;  ; const ROOT::Detail::TSchemaRuleSet * GetSchemaRules () const;  Return the set of the schema rules if any. ;  ; ROOT::Detail::TSchemaRuleSet * GetSchemaRules (Bool_t create=kFALSE);  Return the set of the schema rules if any. ;  ; const char * GetSharedLibs ();  Get the list of shared libraries containing the code for class cls. ;  ; ShowMembersFunc_t GetShowMembersWrapper () const;  ; EState GetState () const;  ; TClassStreamer * GetStreamer () const;  Return the Streamer Class allowing streaming (if any). ;  ; ClassStreamerFunc_t GetStreamerFunc () const;  Get a wrapper/accessor function around this class custom streamer (member function). ;  ; TVirtualStreamerInfo * GetStreamerInfo (Int_t version=0, Bool_t isTransient=kFALSE) const;  returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ;  ; TVirtualStreamerInfo * GetStreamerInfoAbstractEmulated (Int_t version=0) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; const TObjArray * GetStreamerInfos () const;  ; const std::type_info * GetTypeInfo () const;  ; Bool_t HasConsistentHashMember ();  Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ;  ; Bool_t HasCustomStreamerMember () const;  The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ;  ; Bool_t HasDataMemberInfo () const;  ; Bool_t HasDefaultConstructor (Bool_t testio=kFALSE) const;  Return true if we have access to a constructor usable for I/O. ;  ; Bool_t HasDictionary () const;  Check whether a class has a dictionary or ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:22031,Performance,cache,caches,22031,"nst;  Return a pointer to a newly allocated object of this class. ;  ; virtual void PostLoadCheck ();  Do the initialization that can only be done after the CINT dictionary has been fully populated and can not be delayed efficiently. ;  ; Long_t Property () const override;  Returns the properties of the TClass as a bit field stored as a Long_t value. ;  ; Int_t ReadBuffer (TBuffer &b, void *pointer);  Function called by the Streamer functions to deserialize information from buffer b into object at p. ;  ; Int_t ReadBuffer (TBuffer &b, void *pointer, Int_t version, UInt_t start, UInt_t count);  Function called by the Streamer functions to deserialize information from buffer b into object at p. ;  ; void RegisterStreamerInfo (TVirtualStreamerInfo *info);  Register the StreamerInfo in the given slot, change the State of the TClass as appropriate. ;  ; void RemoveStreamerInfo (Int_t slot);  Remove and delete the StreamerInfo in the given slot. ;  ; void ReplaceWith (TClass *newcl) const;  ; void ResetCaches ();  To clean out all caches. ;  ; void ResetClassInfo ();  Make sure that the current ClassInfo is up to date. ;  ; void ResetClassInfo (Long_t tagnum);  Make sure that the current ClassInfo is up to date. ;  ; void ResetInstanceCount ();  ; void ResetMenuList ();  Resets the menu list to it's standard value. ;  ; void SetCanSplit (Int_t splitmode);  Set the splitability of this class: ;  ; void SetCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &);  Create the collection proxy object (and the streamer object) from using the information in the TCollectionProxyInfo. ;  ; void SetContextMenuTitle (const char *title);  Change (i.e. set) the title of the TNamed. ;  ; void SetConvStreamerFunc (ClassConvStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom conversion streamer. ;  ; void SetCurrentStreamerInfo (TVirtualStreamerInfo *info);  Set pointer to current TVirtualStreamerInfo. ;  ; void SetDeclFile (const char *name, Short_t line)",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:34175,Performance,load,load,34175,"(const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void AddClass (TClass *cl);  static: Add a class to the list and map of classes. ;  ; static void AddClassToDeclIdMap (TDictionary::DeclId_t id, TClass *cl);  static: Add a TClass* to the map of classes. ;  ; static Bool_t AddRule (const char *rule);  Add a schema evolution customization rule. ;  ; static Int_t AutoBrowse (TObject *obj, TBrowser *browser);  Browse external object inherited from TObject. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; template<typename T > ; static TClass * GetClass (Bool_t load=kTRUE, Bool_t silent=kFALSE);  ; static TClass * GetClass (ClassInfo_t *info, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified ClassInfo. ;  ; static TClass * GetClass (const char *name, Bool_t load, Bool_t silent, size_t hint_pair_offset, size_t hint_pair_size);  ; static TClass * GetClass (const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified class name. ;  ; static TClass * GetClass (const std::type_info &typeinfo, Bool_t load=kTRUE, Bool_t silent=kFALSE, size_t hint_pair_offset=0, size_t hint_pair_size=0);  Return pointer to class with name. ;  ; static Bool_t GetClass (DeclId_t id, std::vector< TClass * > &classes);  ; static DictFuncPtr_t GetDict (const char *cname);  Return a pointer to the dictionary loading function generated by rootcint. ;  ; static DictFuncPtr_t GetDict (const std::type_info &info);  Return a pointer to the dictionary loading",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:34265,Performance,load,load,34265,"(const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void AddClass (TClass *cl);  static: Add a class to the list and map of classes. ;  ; static void AddClassToDeclIdMap (TDictionary::DeclId_t id, TClass *cl);  static: Add a TClass* to the map of classes. ;  ; static Bool_t AddRule (const char *rule);  Add a schema evolution customization rule. ;  ; static Int_t AutoBrowse (TObject *obj, TBrowser *browser);  Browse external object inherited from TObject. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; template<typename T > ; static TClass * GetClass (Bool_t load=kTRUE, Bool_t silent=kFALSE);  ; static TClass * GetClass (ClassInfo_t *info, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified ClassInfo. ;  ; static TClass * GetClass (const char *name, Bool_t load, Bool_t silent, size_t hint_pair_offset, size_t hint_pair_size);  ; static TClass * GetClass (const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified class name. ;  ; static TClass * GetClass (const std::type_info &typeinfo, Bool_t load=kTRUE, Bool_t silent=kFALSE, size_t hint_pair_offset=0, size_t hint_pair_size=0);  Return pointer to class with name. ;  ; static Bool_t GetClass (DeclId_t id, std::vector< TClass * > &classes);  ; static DictFuncPtr_t GetDict (const char *cname);  Return a pointer to the dictionary loading function generated by rootcint. ;  ; static DictFuncPtr_t GetDict (const std::type_info &info);  Return a pointer to the dictionary loading",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:34427,Performance,load,load,34427,"tatic Public Member Functions; static void AddClass (TClass *cl);  static: Add a class to the list and map of classes. ;  ; static void AddClassToDeclIdMap (TDictionary::DeclId_t id, TClass *cl);  static: Add a TClass* to the map of classes. ;  ; static Bool_t AddRule (const char *rule);  Add a schema evolution customization rule. ;  ; static Int_t AutoBrowse (TObject *obj, TBrowser *browser);  Browse external object inherited from TObject. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; template<typename T > ; static TClass * GetClass (Bool_t load=kTRUE, Bool_t silent=kFALSE);  ; static TClass * GetClass (ClassInfo_t *info, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified ClassInfo. ;  ; static TClass * GetClass (const char *name, Bool_t load, Bool_t silent, size_t hint_pair_offset, size_t hint_pair_size);  ; static TClass * GetClass (const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified class name. ;  ; static TClass * GetClass (const std::type_info &typeinfo, Bool_t load=kTRUE, Bool_t silent=kFALSE, size_t hint_pair_offset=0, size_t hint_pair_size=0);  Return pointer to class with name. ;  ; static Bool_t GetClass (DeclId_t id, std::vector< TClass * > &classes);  ; static DictFuncPtr_t GetDict (const char *cname);  Return a pointer to the dictionary loading function generated by rootcint. ;  ; static DictFuncPtr_t GetDict (const std::type_info &info);  Return a pointer to the dictionary loading function generated by rootcint. ;  ; static Bool_t HasDictionarySelection (const char *clname);  Check whether a class has a dictionary or ROOT can load one. ;  ; static ENewType IsCallingNew ();  Static method returning the defConstructor flag passed to TClass::New(). ;  ; static TClass * Load (TBuffer &b);  Load class description from I/O buffer",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:34551,Performance,load,load,34551,"tatic Public Member Functions; static void AddClass (TClass *cl);  static: Add a class to the list and map of classes. ;  ; static void AddClassToDeclIdMap (TDictionary::DeclId_t id, TClass *cl);  static: Add a TClass* to the map of classes. ;  ; static Bool_t AddRule (const char *rule);  Add a schema evolution customization rule. ;  ; static Int_t AutoBrowse (TObject *obj, TBrowser *browser);  Browse external object inherited from TObject. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; template<typename T > ; static TClass * GetClass (Bool_t load=kTRUE, Bool_t silent=kFALSE);  ; static TClass * GetClass (ClassInfo_t *info, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified ClassInfo. ;  ; static TClass * GetClass (const char *name, Bool_t load, Bool_t silent, size_t hint_pair_offset, size_t hint_pair_size);  ; static TClass * GetClass (const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified class name. ;  ; static TClass * GetClass (const std::type_info &typeinfo, Bool_t load=kTRUE, Bool_t silent=kFALSE, size_t hint_pair_offset=0, size_t hint_pair_size=0);  Return pointer to class with name. ;  ; static Bool_t GetClass (DeclId_t id, std::vector< TClass * > &classes);  ; static DictFuncPtr_t GetDict (const char *cname);  Return a pointer to the dictionary loading function generated by rootcint. ;  ; static DictFuncPtr_t GetDict (const std::type_info &info);  Return a pointer to the dictionary loading function generated by rootcint. ;  ; static Bool_t HasDictionarySelection (const char *clname);  Check whether a class has a dictionary or ROOT can load one. ;  ; static ENewType IsCallingNew ();  Static method returning the defConstructor flag passed to TClass::New(). ;  ; static TClass * Load (TBuffer &b);  Load class description from I/O buffer",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:34728,Performance,load,load,34728,". ;  ; static Bool_t AddRule (const char *rule);  Add a schema evolution customization rule. ;  ; static Int_t AutoBrowse (TObject *obj, TBrowser *browser);  Browse external object inherited from TObject. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; template<typename T > ; static TClass * GetClass (Bool_t load=kTRUE, Bool_t silent=kFALSE);  ; static TClass * GetClass (ClassInfo_t *info, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified ClassInfo. ;  ; static TClass * GetClass (const char *name, Bool_t load, Bool_t silent, size_t hint_pair_offset, size_t hint_pair_size);  ; static TClass * GetClass (const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified class name. ;  ; static TClass * GetClass (const std::type_info &typeinfo, Bool_t load=kTRUE, Bool_t silent=kFALSE, size_t hint_pair_offset=0, size_t hint_pair_size=0);  Return pointer to class with name. ;  ; static Bool_t GetClass (DeclId_t id, std::vector< TClass * > &classes);  ; static DictFuncPtr_t GetDict (const char *cname);  Return a pointer to the dictionary loading function generated by rootcint. ;  ; static DictFuncPtr_t GetDict (const std::type_info &info);  Return a pointer to the dictionary loading function generated by rootcint. ;  ; static Bool_t HasDictionarySelection (const char *clname);  Check whether a class has a dictionary or ROOT can load one. ;  ; static ENewType IsCallingNew ();  Static method returning the defConstructor flag passed to TClass::New(). ;  ; static TClass * Load (TBuffer &b);  Load class description from I/O buffer and return class object. ;  ; static TClass * LoadClass (const char *requestedname, Bool_t silent);  Helper function used by TClass::GetClass(). ;  ; static Int_t ReadRules ();  Read the class.rules files from the default location:. ;  ; s",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:35017,Performance,load,loading,35017,"ect. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; template<typename T > ; static TClass * GetClass (Bool_t load=kTRUE, Bool_t silent=kFALSE);  ; static TClass * GetClass (ClassInfo_t *info, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified ClassInfo. ;  ; static TClass * GetClass (const char *name, Bool_t load, Bool_t silent, size_t hint_pair_offset, size_t hint_pair_size);  ; static TClass * GetClass (const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified class name. ;  ; static TClass * GetClass (const std::type_info &typeinfo, Bool_t load=kTRUE, Bool_t silent=kFALSE, size_t hint_pair_offset=0, size_t hint_pair_size=0);  Return pointer to class with name. ;  ; static Bool_t GetClass (DeclId_t id, std::vector< TClass * > &classes);  ; static DictFuncPtr_t GetDict (const char *cname);  Return a pointer to the dictionary loading function generated by rootcint. ;  ; static DictFuncPtr_t GetDict (const std::type_info &info);  Return a pointer to the dictionary loading function generated by rootcint. ;  ; static Bool_t HasDictionarySelection (const char *clname);  Check whether a class has a dictionary or ROOT can load one. ;  ; static ENewType IsCallingNew ();  Static method returning the defConstructor flag passed to TClass::New(). ;  ; static TClass * Load (TBuffer &b);  Load class description from I/O buffer and return class object. ;  ; static TClass * LoadClass (const char *requestedname, Bool_t silent);  Helper function used by TClass::GetClass(). ;  ; static Int_t ReadRules ();  Read the class.rules files from the default location:. ;  ; static Int_t ReadRules (const char *filename);  Read a class.rules file which contains one rule per line with comment starting with a #. ;  ; static void RemoveClass (TClass *cl);  static: Remove a cl",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:35157,Performance,load,loading,35157,"<typename T > ; static TClass * GetClass (Bool_t load=kTRUE, Bool_t silent=kFALSE);  ; static TClass * GetClass (ClassInfo_t *info, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified ClassInfo. ;  ; static TClass * GetClass (const char *name, Bool_t load, Bool_t silent, size_t hint_pair_offset, size_t hint_pair_size);  ; static TClass * GetClass (const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified class name. ;  ; static TClass * GetClass (const std::type_info &typeinfo, Bool_t load=kTRUE, Bool_t silent=kFALSE, size_t hint_pair_offset=0, size_t hint_pair_size=0);  Return pointer to class with name. ;  ; static Bool_t GetClass (DeclId_t id, std::vector< TClass * > &classes);  ; static DictFuncPtr_t GetDict (const char *cname);  Return a pointer to the dictionary loading function generated by rootcint. ;  ; static DictFuncPtr_t GetDict (const std::type_info &info);  Return a pointer to the dictionary loading function generated by rootcint. ;  ; static Bool_t HasDictionarySelection (const char *clname);  Check whether a class has a dictionary or ROOT can load one. ;  ; static ENewType IsCallingNew ();  Static method returning the defConstructor flag passed to TClass::New(). ;  ; static TClass * Load (TBuffer &b);  Load class description from I/O buffer and return class object. ;  ; static TClass * LoadClass (const char *requestedname, Bool_t silent);  Helper function used by TClass::GetClass(). ;  ; static Int_t ReadRules ();  Read the class.rules files from the default location:. ;  ; static Int_t ReadRules (const char *filename);  Read a class.rules file which contains one rule per line with comment starting with a #. ;  ; static void RemoveClass (TClass *cl);  static: Remove a class from the list and map of classes ;  ; static void RemoveClassDeclId (TDictionary::DeclId_t id);  ;  Static Public Member Functions inherited from TDictionary; static TCl",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:35313,Performance,load,load,35313,"ool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified ClassInfo. ;  ; static TClass * GetClass (const char *name, Bool_t load, Bool_t silent, size_t hint_pair_offset, size_t hint_pair_size);  ; static TClass * GetClass (const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE);  Static method returning pointer to TClass of the specified class name. ;  ; static TClass * GetClass (const std::type_info &typeinfo, Bool_t load=kTRUE, Bool_t silent=kFALSE, size_t hint_pair_offset=0, size_t hint_pair_size=0);  Return pointer to class with name. ;  ; static Bool_t GetClass (DeclId_t id, std::vector< TClass * > &classes);  ; static DictFuncPtr_t GetDict (const char *cname);  Return a pointer to the dictionary loading function generated by rootcint. ;  ; static DictFuncPtr_t GetDict (const std::type_info &info);  Return a pointer to the dictionary loading function generated by rootcint. ;  ; static Bool_t HasDictionarySelection (const char *clname);  Check whether a class has a dictionary or ROOT can load one. ;  ; static ENewType IsCallingNew ();  Static method returning the defConstructor flag passed to TClass::New(). ;  ; static TClass * Load (TBuffer &b);  Load class description from I/O buffer and return class object. ;  ; static TClass * LoadClass (const char *requestedname, Bool_t silent);  Helper function used by TClass::GetClass(). ;  ; static Int_t ReadRules ();  Read the class.rules files from the default location:. ;  ; static Int_t ReadRules (const char *filename);  Read a class.rules file which contains one rule per line with comment starting with a #. ;  ; static void RemoveClass (TClass *cl);  static: Remove a class from the list and map of classes ;  ; static void RemoveClassDeclId (TDictionary::DeclId_t id);  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFile",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:39494,Performance,load,load,39494,"ading = kReservedLoading; };  ; typedef std::atomic< std::map< std::string, TObjArray * > * > ConvSIMap_t;  Persistent address of pointer to this TClass object and its successors. ;  ; enum class  ERuntimeProperties : UChar_t { kNotInitialized = 0; , kSet = (1ULL << ( 0 )); , kConsistentHash = (1ULL << ( 1 )); };  Indicates whether GetClassVersion has been called. More...;  ; enum  EStreamerType { ;   kDefault =0; , kEmulatedStreamer =1; , kTObject =2; , kInstrumented =4; , ;   kForeign =8; , kExternal =16. };  ; typedef std::multimap< void *, Version_t > RepoCont_t;  ; typedef void(* StreamerImpl_t) (const TClass *pThis, void *obj, TBuffer &b, const TClass *onfile_class);  Schema evolution rules. ;  . Private Member Functions;  TClass (const TClass &tc)=delete;  ; Bool_t CanSplitBaseAllow ();  Pointer to the function implementing streaming for this class. ;  ; TList * CreateListOfDataMembers (std::atomic< TListOfDataMembers * > &data, TDictionary::EMemberSelection selection, bool load);  Create the list containing the TDataMembers (of actual data members or members pulled in through using declarations) of a class. ;  ; TVirtualStreamerInfo * DetermineCurrentStreamerInfo ();  Determine and set pointer to current TVirtualStreamerInfo. ;  ; TMethod * FindClassOrBaseMethodWithId (DeclId_t faddr);  Find a method with decl id in this class or its bases. ;  ; Int_t GetBaseClassOffsetRecurse (const TClass *toBase);  Return data member offset to the base class ""cl"". ;  ; TMethod * GetClassMethod (Longptr_t faddr);  Look for a method in this class that has the interface function address faddr. ;  ; TListOfFunctions * GetMethodList ();  Return (create an empty one if needed) the list of functions. ;  ; TVirtualStreamerInfo * GetStreamerInfoImpl (Int_t version, Bool_t silent) const;  ; void Init (const char *name, Version_t cversion, const std::type_info *info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il, ClassInfo_t *classInfo, Bool_t silent)",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:40610,Performance,load,load,40610,"ed in through using declarations) of a class. ;  ; TVirtualStreamerInfo * DetermineCurrentStreamerInfo ();  Determine and set pointer to current TVirtualStreamerInfo. ;  ; TMethod * FindClassOrBaseMethodWithId (DeclId_t faddr);  Find a method with decl id in this class or its bases. ;  ; Int_t GetBaseClassOffsetRecurse (const TClass *toBase);  Return data member offset to the base class ""cl"". ;  ; TMethod * GetClassMethod (Longptr_t faddr);  Look for a method in this class that has the interface function address faddr. ;  ; TListOfFunctions * GetMethodList ();  Return (create an empty one if needed) the list of functions. ;  ; TVirtualStreamerInfo * GetStreamerInfoImpl (Int_t version, Bool_t silent) const;  ; void Init (const char *name, Version_t cversion, const std::type_info *info, TVirtualIsAProxy *isa, const char *dfil, const char *ifil, Int_t dl, Int_t il, ClassInfo_t *classInfo, Bool_t silent);  Initialize a TClass object. ;  ; bool IsClassStructOrUnion () const;  ; void LoadClassInfo () const;  Try to load the ClassInfo if available. ;  ; void MoveAddressInRepository (const char *where, void *oldadd, void *newadd, const TClass *what) const;  ; TClass & operator= (const TClass &)=delete;  ; void RegisterAddressInRepository (const char *where, void *location, const TClass *what) const;  ; void SetClassSize (Int_t sizof);  ; void SetClassVersion (Version_t version);  Private function. ;  ; void SetRuntimeProperties ();  Internal routine to set calculate the class properties that can only be known at run-time, for example whether the Hash member function and the destructor are consistent. ;  ; void SetStreamerImpl ();  Internal routine to set fStreamerImpl based on the value of fStreamerType. ;  ; void UnregisterAddressInRepository (const char *where, void *location, const TClass *what) const;  . Static Private Member Functions; static void ConvStreamerInstrumented (const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class);  Case of instrumented",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:43412,Performance,load,loaded,43412,"_class);  There is special streamer for the class. ;  ; static void StreamerInstrumented (const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class);  Case of instrumented class with a library. ;  ; static void StreamerStreamerInfo (const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class);  Case of where we should directly use the StreamerInfo. ;  ; static void StreamerTObject (const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class);  Case of TObjects. ;  ; static void StreamerTObjectEmulated (const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class);  Case of TObjects when we do not have the library defining the class. ;  ; static void StreamerTObjectInitialized (const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class);  Case of TObjects when fIsOffsetStreamerSet is known to have been set. ;  . Private Attributes; TViewPubDataMembers * fAllPubData;  ; TViewPubFunctions * fAllPubMethod;  ; std::atomic< TList * > fBase;  ; std::atomic< Bool_t > fCanLoadClassInfo;  Whether info was loaded from a root pcm. ;  ; std::atomic< Char_t > fCanSplit;  ; std::atomic< UInt_t > fCheckSum;  ; ClassInfo_t * fClassInfo;  ; TList * fClassMenuList;  ; Long_t fClassProperty;  Property See TClass::Property() for details. ;  ; Version_t fClassVersion;  ; TVirtualCollectionProxy * fCollectionProxy;  ; TString fContextMenuTitle;  ; ConvSIMap_t fConversionStreamerInfo;  ; ClassConvStreamerFunc_t fConvStreamerFunc;  ; std::atomic< TVirtualStreamerInfo * > fCurrentInfo;  Current 'state' of the class (Emulated,Interpreted,Loaded) ;  ; std::atomic< TListOfDataMembers * > fData;  ; Short_t fDeclFileLine;  ; const char * fDeclFileName;  ; ROOT::DelFunc_t fDelete;  ; ROOT::DelArrFunc_t fDeleteArray;  ; ROOT::DesFunc_t fDestructor;  ; ROOT::DirAutoAdd_t fDirAutoAdd;  ; std::atomic< TListOfEnums * > fEnums;  ; TListOfFunctionTemplates * fFuncTemplate;  ; IsAGlobalFunc_t fGlobalIsA;  pointer to the class's IsA pr",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:45042,Performance,cache,cached,45042,"st char * fDeclFileName;  ; ROOT::DelFunc_t fDelete;  ; ROOT::DelArrFunc_t fDeleteArray;  ; ROOT::DesFunc_t fDestructor;  ; ROOT::DirAutoAdd_t fDirAutoAdd;  ; std::atomic< TListOfEnums * > fEnums;  ; TListOfFunctionTemplates * fFuncTemplate;  ; IsAGlobalFunc_t fGlobalIsA;  pointer to the class's IsA proxy. ;  ; Bool_t fHasCustomStreamerMember: 1;  The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ;  ; std::atomic< Bool_t > fHasRootPcmInfo;  C++ Property of the class (is abstract, has virtual table, etc.) ;  ; Short_t fImplFileLine;  ; const char * fImplFileName;  ; UInt_t fInstanceCount;  ; TVirtualIsAProxy * fIsA;  ; std::atomic< TMethodCall * > fIsAMethod;  ; std::atomic< Bool_t > fIsOffsetStreamerSet;  Indicates whether the ClassInfo is supposed to be available. ;  ; Bool_t fIsSyntheticPair: 1;  Indicates whether this class can be split or not. Values are -1, 0, 1, 2. ;  ; std::atomic< TVirtualStreamerInfo * > fLastReadInfo;  cached current streamer info. ;  ; ROOT::MergeFunc_t fMerge;  saved info to call a IsA member function ;  ; std::atomic< TListOfFunctions * > fMethod;  ; ROOT::NewFunc_t fNew;  ; ROOT::NewArrFunc_t fNewArray;  ; RepoCont_t fObjectVersionRepository;  ; Longptr_t fOffsetStreamer;  Properties that can only be evaluated at run-time. ;  ; UInt_t fOnHeap;  ; TVirtualMutex * fOVRMutex = nullptr;  ; std::atomic< TClass ** > fPersistentRef;  ; std::atomic< Long_t > fProperty;  ; TList * fRealData;  ; TVirtualRefProxy * fRefProxy;  cached streamer info used in the last read. ;  ; ROOT::ResetAfterMergeFunc_t fResetAfterMerge;  ; std::atomic< UChar_t > fRuntimeProperties;  ; ROOT::Detail::TSchemaRuleSet * fSchemaRules;  Pointer to reference proxy if this class represents a reference. ;  ; TString fSharedLibs;  ; ShowMembersFunc_t fShowMembers;  ; Int_t fSizeof;  ; EState fState;  cached of the streaming method to use ;  ; TClassStreamer * fStreamer;  ; ClassStreamerFunc_t fStreamerF",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:45570,Performance,cache,cached,45570,"eamer. ;  ; std::atomic< Bool_t > fHasRootPcmInfo;  C++ Property of the class (is abstract, has virtual table, etc.) ;  ; Short_t fImplFileLine;  ; const char * fImplFileName;  ; UInt_t fInstanceCount;  ; TVirtualIsAProxy * fIsA;  ; std::atomic< TMethodCall * > fIsAMethod;  ; std::atomic< Bool_t > fIsOffsetStreamerSet;  Indicates whether the ClassInfo is supposed to be available. ;  ; Bool_t fIsSyntheticPair: 1;  Indicates whether this class can be split or not. Values are -1, 0, 1, 2. ;  ; std::atomic< TVirtualStreamerInfo * > fLastReadInfo;  cached current streamer info. ;  ; ROOT::MergeFunc_t fMerge;  saved info to call a IsA member function ;  ; std::atomic< TListOfFunctions * > fMethod;  ; ROOT::NewFunc_t fNew;  ; ROOT::NewArrFunc_t fNewArray;  ; RepoCont_t fObjectVersionRepository;  ; Longptr_t fOffsetStreamer;  Properties that can only be evaluated at run-time. ;  ; UInt_t fOnHeap;  ; TVirtualMutex * fOVRMutex = nullptr;  ; std::atomic< TClass ** > fPersistentRef;  ; std::atomic< Long_t > fProperty;  ; TList * fRealData;  ; TVirtualRefProxy * fRefProxy;  cached streamer info used in the last read. ;  ; ROOT::ResetAfterMergeFunc_t fResetAfterMerge;  ; std::atomic< UChar_t > fRuntimeProperties;  ; ROOT::Detail::TSchemaRuleSet * fSchemaRules;  Pointer to reference proxy if this class represents a reference. ;  ; TString fSharedLibs;  ; ShowMembersFunc_t fShowMembers;  ; Int_t fSizeof;  ; EState fState;  cached of the streaming method to use ;  ; TClassStreamer * fStreamer;  ; ClassStreamerFunc_t fStreamerFunc;  ; std::atomic< StreamerImpl_t > fStreamerImpl;  ; TObjArray * fStreamerInfo;  ; Int_t fStreamerType;  saved info to call Streamer ;  ; const std::type_info * fTypeInfo;  ; std::atomic< TListOfDataMembers * > fUsingData;  ; std::atomic< Bool_t > fVersionUsed;  saved remember if fOffsetStreamer has been set. ;  . Static Private Attributes; static std::atomic< Int_t > fgClassCount;  ; static THashTable * fgClassTypedefHash = nullptr;  ; static TDeclNameRegist",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:45923,Performance,cache,cached,45923,":MergeFunc_t fMerge;  saved info to call a IsA member function ;  ; std::atomic< TListOfFunctions * > fMethod;  ; ROOT::NewFunc_t fNew;  ; ROOT::NewArrFunc_t fNewArray;  ; RepoCont_t fObjectVersionRepository;  ; Longptr_t fOffsetStreamer;  Properties that can only be evaluated at run-time. ;  ; UInt_t fOnHeap;  ; TVirtualMutex * fOVRMutex = nullptr;  ; std::atomic< TClass ** > fPersistentRef;  ; std::atomic< Long_t > fProperty;  ; TList * fRealData;  ; TVirtualRefProxy * fRefProxy;  cached streamer info used in the last read. ;  ; ROOT::ResetAfterMergeFunc_t fResetAfterMerge;  ; std::atomic< UChar_t > fRuntimeProperties;  ; ROOT::Detail::TSchemaRuleSet * fSchemaRules;  Pointer to reference proxy if this class represents a reference. ;  ; TString fSharedLibs;  ; ShowMembersFunc_t fShowMembers;  ; Int_t fSizeof;  ; EState fState;  cached of the streaming method to use ;  ; TClassStreamer * fStreamer;  ; ClassStreamerFunc_t fStreamerFunc;  ; std::atomic< StreamerImpl_t > fStreamerImpl;  ; TObjArray * fStreamerInfo;  ; Int_t fStreamerType;  saved info to call Streamer ;  ; const std::type_info * fTypeInfo;  ; std::atomic< TListOfDataMembers * > fUsingData;  ; std::atomic< Bool_t > fVersionUsed;  saved remember if fOffsetStreamer has been set. ;  . Static Private Attributes; static std::atomic< Int_t > fgClassCount;  ; static THashTable * fgClassTypedefHash = nullptr;  ; static TDeclNameRegistry fNoInfoOrEmuOrFwdDeclNameRegistry;  . Friends; bool operator& (UChar_t l, ERuntimeProperties r);  ; class ROOT::Internal::TCheckHashRecursiveRemoveConsistency;  ; void ROOT::ResetClassVersion (TClass *, const char *, Short_t);  ; class ROOT::TGenericClassInfo;  ; class TCling;  ; class TProtoClass;  ; class TStreamerInfo;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TClass.h>. Inheritance diagram for TClass:. This ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:61459,Performance,load,load,61459,"; const char * ; new_name = """"); const. overridevirtual . Create a Clone of this TClass object using a different name but using the same 'dictionary'. ; This effectively creates a hard alias for the class name. ; Reimplemented from TObject.; Definition at line 2406 of file TClass.cxx. ◆ ConvStreamerInstrumented(). void TClass::ConvStreamerInstrumented ; (; const TClass * ; pThis, . void * ; object, . TBuffer & ; b, . const TClass * ; onfile_class . ). staticprivate . Case of instrumented class with a library. ; Definition at line 6845 of file TClass.cxx. ◆ CopyCollectionProxy(). void TClass::CopyCollectionProxy ; (; const TVirtualCollectionProxy & ; orig). Replaces the collection proxy for this class. ; The provided object is cloned and the copy is then owned by TClass. ; Definition at line 2470 of file TClass.cxx. ◆ CreateListOfDataMembers(). TList * TClass::CreateListOfDataMembers ; (; std::atomic< TListOfDataMembers * > & ; data, . TDictionary::EMemberSelection ; selection, . bool ; load . ). private . Create the list containing the TDataMembers (of actual data members or members pulled in through using declarations) of a class. ; Definition at line 3741 of file TClass.cxx. ◆ DeclFileName(). static const char * TClass::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 618 of file TClass.h. ◆ DeleteArray() [1/2]. void TClass::DeleteArray ; (; TClass::ObjectPtr ; obj, . Bool_t ; dtorOnly = kFALSE . ). Explicitly call operator delete[] for an array. ; Definition at line 5639 of file TClass.cxx. ◆ DeleteArray() [2/2]. void TClass::DeleteArray ; (; void * ; ary, . Bool_t ; dtorOnly = kFALSE . ). Explicitly call operator delete[] for an array. ; Definition at line 5529 of file TClass.cxx. ◆ Destructor() [1/2]. void TClass::Destructor ; (; TClass::ObjectPtr ; obj, . Bool_t ; dtorOnly = kFALSE . ). Explicitly call destructor for object. ; Definition at line 5513 of file TClass.cxx. ◆ Destructor() [2/2]. void",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:68428,Performance,load,loaded,68428,"s * ; onfile_cl, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ; Definition at line 7204 of file TClass.cxx. ◆ FindStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7066 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7036 of file TClass.cxx. ◆ FindStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::FindStreamerInfoAbstractEmulated ; (; UInt_t ; checksum); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4772 of file TClass.cxx. ◆ ForceReload(). void TClass::ForceReload ; (; TClass * ; oldcl). we found at least one equivalent. ; let's force a reload ; Definition at line 1336 of file TClass.cxx. ◆ GetActualClass(). TClass * TClass::GetActualClass ; (; const void * ; object); const. Return a pointer to the real class of the object. ; This is equivalent to object->IsA() when the class has a ClassDef. It is REQUIRED that object is coming from a proper pointer to the class represented by 'this'. Example: Special case: class MyClass : public AnotherClass, public TObject; TObjectMother of all ROOT objects.Def",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:68551,Performance,optimiz,optimizes,68551,"ualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7066 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7036 of file TClass.cxx. ◆ FindStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::FindStreamerInfoAbstractEmulated ; (; UInt_t ; checksum); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4772 of file TClass.cxx. ◆ ForceReload(). void TClass::ForceReload ; (; TClass * ; oldcl). we found at least one equivalent. ; let's force a reload ; Definition at line 1336 of file TClass.cxx. ◆ GetActualClass(). TClass * TClass::GetActualClass ; (; const void * ; object); const. Return a pointer to the real class of the object. ; This is equivalent to object->IsA() when the class has a ClassDef. It is REQUIRED that object is coming from a proper pointer to the class represented by 'this'. Example: Special case: class MyClass : public AnotherClass, public TObject; TObjectMother of all ROOT objects.Definition TObject.h:41; then on return, one must do: TObject *obj = (TObject*)((void*)myobject)directory->Get(""some object of MyClass"");; MyClass::Class()->GetActualClass(obj); // this would be wrong!!!; Also if the class represented by 'this' and NONE of its p",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:72795,Performance,load,load,72795,"rev.nosp@m.@bnl.nosp@m..gov).; The valid range of code is determined by ECheckSum. kNoEnum: data members of type enum are not counted in the checksum; kNoRange: return the checksum of data members and base classes, not including the ranges and array size found in comments.; kWithTypeDef: use the sugared type name in the calculation. This is needed for backward compatibility.; WARNING: this function must be kept in sync with TStreamerInfo::GetCheckSum. They are both used to handle backward compatibility and should both return the same values. TStreamerInfo uses the information in TStreamerElement while TClass uses the information from TClass::GetListOfBases and TClass::GetListOfDataMembers. ; Definition at line 6544 of file TClass.cxx. ◆ GetCheckSum() [3/3]. UInt_t TClass::GetCheckSum ; (; ECheckSum ; code = kCurrentCheckSum); const. Call GetCheckSum with validity check. ; Definition at line 6505 of file TClass.cxx. ◆ GetClass() [1/6]. template<typename T > . TClass * TClass::GetClass ; (; Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Definition at line 655 of file TClass.h. ◆ GetClass() [2/6]. TClass * TClass::GetClass ; (; ClassInfo_t * ; info, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified ClassInfo. ; If load is true an attempt is made to obtain the class by loading the appropriate shared library (directed by the rootmap file). If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members) Returns 0 in case class is not found. ; Definition at line 3351 of file TClass.cxx. ◆ GetClass() [3/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load, . Bool_t ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). static . Definition at line 2973 of file TClass.cxx. ◆ GetClass() [4/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load = kTRUE, . Bool_t",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:72975,Performance,load,load,72975,"s and base classes, not including the ranges and array size found in comments.; kWithTypeDef: use the sugared type name in the calculation. This is needed for backward compatibility.; WARNING: this function must be kept in sync with TStreamerInfo::GetCheckSum. They are both used to handle backward compatibility and should both return the same values. TStreamerInfo uses the information in TStreamerElement while TClass uses the information from TClass::GetListOfBases and TClass::GetListOfDataMembers. ; Definition at line 6544 of file TClass.cxx. ◆ GetCheckSum() [3/3]. UInt_t TClass::GetCheckSum ; (; ECheckSum ; code = kCurrentCheckSum); const. Call GetCheckSum with validity check. ; Definition at line 6505 of file TClass.cxx. ◆ GetClass() [1/6]. template<typename T > . TClass * TClass::GetClass ; (; Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Definition at line 655 of file TClass.h. ◆ GetClass() [2/6]. TClass * TClass::GetClass ; (; ClassInfo_t * ; info, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified ClassInfo. ; If load is true an attempt is made to obtain the class by loading the appropriate shared library (directed by the rootmap file). If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members) Returns 0 in case class is not found. ; Definition at line 3351 of file TClass.cxx. ◆ GetClass() [3/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load, . Bool_t ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). static . Definition at line 2973 of file TClass.cxx. ◆ GetClass() [4/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified class name. ; If load is true, an attempt is made to obtain the class by loading the appropriate shared ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:73105,Performance,load,load,73105,"NING: this function must be kept in sync with TStreamerInfo::GetCheckSum. They are both used to handle backward compatibility and should both return the same values. TStreamerInfo uses the information in TStreamerElement while TClass uses the information from TClass::GetListOfBases and TClass::GetListOfDataMembers. ; Definition at line 6544 of file TClass.cxx. ◆ GetCheckSum() [3/3]. UInt_t TClass::GetCheckSum ; (; ECheckSum ; code = kCurrentCheckSum); const. Call GetCheckSum with validity check. ; Definition at line 6505 of file TClass.cxx. ◆ GetClass() [1/6]. template<typename T > . TClass * TClass::GetClass ; (; Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Definition at line 655 of file TClass.h. ◆ GetClass() [2/6]. TClass * TClass::GetClass ; (; ClassInfo_t * ; info, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified ClassInfo. ; If load is true an attempt is made to obtain the class by loading the appropriate shared library (directed by the rootmap file). If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members) Returns 0 in case class is not found. ; Definition at line 3351 of file TClass.cxx. ◆ GetClass() [3/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load, . Bool_t ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). static . Definition at line 2973 of file TClass.cxx. ◆ GetClass() [4/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified class name. ; If load is true, an attempt is made to obtain the class by loading the appropriate shared library (directed by the rootmap file). If silent is 'true', do not warn about missing dictionary for the class. (typically used for classes that are used only for transient members) Retu",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:73160,Performance,load,loading,73160,"NING: this function must be kept in sync with TStreamerInfo::GetCheckSum. They are both used to handle backward compatibility and should both return the same values. TStreamerInfo uses the information in TStreamerElement while TClass uses the information from TClass::GetListOfBases and TClass::GetListOfDataMembers. ; Definition at line 6544 of file TClass.cxx. ◆ GetCheckSum() [3/3]. UInt_t TClass::GetCheckSum ; (; ECheckSum ; code = kCurrentCheckSum); const. Call GetCheckSum with validity check. ; Definition at line 6505 of file TClass.cxx. ◆ GetClass() [1/6]. template<typename T > . TClass * TClass::GetClass ; (; Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Definition at line 655 of file TClass.h. ◆ GetClass() [2/6]. TClass * TClass::GetClass ; (; ClassInfo_t * ; info, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified ClassInfo. ; If load is true an attempt is made to obtain the class by loading the appropriate shared library (directed by the rootmap file). If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members) Returns 0 in case class is not found. ; Definition at line 3351 of file TClass.cxx. ◆ GetClass() [3/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load, . Bool_t ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). static . Definition at line 2973 of file TClass.cxx. ◆ GetClass() [4/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified class name. ; If load is true, an attempt is made to obtain the class by loading the appropriate shared library (directed by the rootmap file). If silent is 'true', do not warn about missing dictionary for the class. (typically used for classes that are used only for transient members) Retu",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:73539,Performance,load,load,73539,"Sum() [3/3]. UInt_t TClass::GetCheckSum ; (; ECheckSum ; code = kCurrentCheckSum); const. Call GetCheckSum with validity check. ; Definition at line 6505 of file TClass.cxx. ◆ GetClass() [1/6]. template<typename T > . TClass * TClass::GetClass ; (; Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Definition at line 655 of file TClass.h. ◆ GetClass() [2/6]. TClass * TClass::GetClass ; (; ClassInfo_t * ; info, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified ClassInfo. ; If load is true an attempt is made to obtain the class by loading the appropriate shared library (directed by the rootmap file). If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members) Returns 0 in case class is not found. ; Definition at line 3351 of file TClass.cxx. ◆ GetClass() [3/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load, . Bool_t ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). static . Definition at line 2973 of file TClass.cxx. ◆ GetClass() [4/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified class name. ; If load is true, an attempt is made to obtain the class by loading the appropriate shared library (directed by the rootmap file). If silent is 'true', do not warn about missing dictionary for the class. (typically used for classes that are used only for transient members) Returns nullptr in case class is not found. ; Definition at line 2968 of file TClass.cxx. ◆ GetClass() [5/6]. TClass * TClass::GetClass ; (; const std::type_info & ; typeinfo, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE, . size_t ; hint_pair_offset = 0, . size_t ; hint_pair_size = 0 . ). static . Return pointer to class with name. ; Definition at line 3254 of file TC",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:73760,Performance,load,load,73760,"* TClass::GetClass ; (; Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Definition at line 655 of file TClass.h. ◆ GetClass() [2/6]. TClass * TClass::GetClass ; (; ClassInfo_t * ; info, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified ClassInfo. ; If load is true an attempt is made to obtain the class by loading the appropriate shared library (directed by the rootmap file). If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members) Returns 0 in case class is not found. ; Definition at line 3351 of file TClass.cxx. ◆ GetClass() [3/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load, . Bool_t ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). static . Definition at line 2973 of file TClass.cxx. ◆ GetClass() [4/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified class name. ; If load is true, an attempt is made to obtain the class by loading the appropriate shared library (directed by the rootmap file). If silent is 'true', do not warn about missing dictionary for the class. (typically used for classes that are used only for transient members) Returns nullptr in case class is not found. ; Definition at line 2968 of file TClass.cxx. ◆ GetClass() [5/6]. TClass * TClass::GetClass ; (; const std::type_info & ; typeinfo, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE, . size_t ; hint_pair_offset = 0, . size_t ; hint_pair_size = 0 . ). static . Return pointer to class with name. ; Definition at line 3254 of file TClass.cxx. ◆ GetClass() [6/6]. Bool_t TClass::GetClass ; (; DeclId_t ; id, . std::vector< TClass * > & ; classes . ). static . Definition at line 3404 of file TClass.cxx. ◆ GetClassInfo(). ClassInfo_t * TClass::GetClassInfo ; ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:73891,Performance,load,load,73891,"_t * ; info, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified ClassInfo. ; If load is true an attempt is made to obtain the class by loading the appropriate shared library (directed by the rootmap file). If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members) Returns 0 in case class is not found. ; Definition at line 3351 of file TClass.cxx. ◆ GetClass() [3/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load, . Bool_t ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). static . Definition at line 2973 of file TClass.cxx. ◆ GetClass() [4/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified class name. ; If load is true, an attempt is made to obtain the class by loading the appropriate shared library (directed by the rootmap file). If silent is 'true', do not warn about missing dictionary for the class. (typically used for classes that are used only for transient members) Returns nullptr in case class is not found. ; Definition at line 2968 of file TClass.cxx. ◆ GetClass() [5/6]. TClass * TClass::GetClass ; (; const std::type_info & ; typeinfo, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE, . size_t ; hint_pair_offset = 0, . size_t ; hint_pair_size = 0 . ). static . Return pointer to class with name. ; Definition at line 3254 of file TClass.cxx. ◆ GetClass() [6/6]. Bool_t TClass::GetClass ; (; DeclId_t ; id, . std::vector< TClass * > & ; classes . ). static . Definition at line 3404 of file TClass.cxx. ◆ GetClassInfo(). ClassInfo_t * TClass::GetClassInfo ; (; ); const. inline . Definition at line 433 of file TClass.h. ◆ GetClassMethod() [1/2]. TMethod * TClass::GetClassMethod ; (; const char * ; name, . const char * ; params, . Bool_t ; obje",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:73947,Performance,load,loading,73947,"_t * ; info, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified ClassInfo. ; If load is true an attempt is made to obtain the class by loading the appropriate shared library (directed by the rootmap file). If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members) Returns 0 in case class is not found. ; Definition at line 3351 of file TClass.cxx. ◆ GetClass() [3/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load, . Bool_t ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). static . Definition at line 2973 of file TClass.cxx. ◆ GetClass() [4/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified class name. ; If load is true, an attempt is made to obtain the class by loading the appropriate shared library (directed by the rootmap file). If silent is 'true', do not warn about missing dictionary for the class. (typically used for classes that are used only for transient members) Returns nullptr in case class is not found. ; Definition at line 2968 of file TClass.cxx. ◆ GetClass() [5/6]. TClass * TClass::GetClass ; (; const std::type_info & ; typeinfo, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE, . size_t ; hint_pair_offset = 0, . size_t ; hint_pair_size = 0 . ). static . Return pointer to class with name. ; Definition at line 3254 of file TClass.cxx. ◆ GetClass() [6/6]. Bool_t TClass::GetClass ; (; DeclId_t ; id, . std::vector< TClass * > & ; classes . ). static . Definition at line 3404 of file TClass.cxx. ◆ GetClassInfo(). ClassInfo_t * TClass::GetClassInfo ; (; ); const. inline . Definition at line 433 of file TClass.h. ◆ GetClassMethod() [1/2]. TMethod * TClass::GetClassMethod ; (; const char * ; name, . const char * ; params, . Bool_t ; obje",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:74348,Performance,load,load,74348,"or transient members) Returns 0 in case class is not found. ; Definition at line 3351 of file TClass.cxx. ◆ GetClass() [3/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load, . Bool_t ; silent, . size_t ; hint_pair_offset, . size_t ; hint_pair_size . ). static . Definition at line 2973 of file TClass.cxx. ◆ GetClass() [4/6]. TClass * TClass::GetClass ; (; const char * ; name, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Static method returning pointer to TClass of the specified class name. ; If load is true, an attempt is made to obtain the class by loading the appropriate shared library (directed by the rootmap file). If silent is 'true', do not warn about missing dictionary for the class. (typically used for classes that are used only for transient members) Returns nullptr in case class is not found. ; Definition at line 2968 of file TClass.cxx. ◆ GetClass() [5/6]. TClass * TClass::GetClass ; (; const std::type_info & ; typeinfo, . Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE, . size_t ; hint_pair_offset = 0, . size_t ; hint_pair_size = 0 . ). static . Return pointer to class with name. ; Definition at line 3254 of file TClass.cxx. ◆ GetClass() [6/6]. Bool_t TClass::GetClass ; (; DeclId_t ; id, . std::vector< TClass * > & ; classes . ). static . Definition at line 3404 of file TClass.cxx. ◆ GetClassInfo(). ClassInfo_t * TClass::GetClassInfo ; (; ); const. inline . Definition at line 433 of file TClass.h. ◆ GetClassMethod() [1/2]. TMethod * TClass::GetClassMethod ; (; const char * ; name, . const char * ; params, . Bool_t ; objectIsConst = kFALSE . ). Look for a method in this class that has the name and matches the parameters. ; The params string must contain argument values, like ""3189, \""aap\"", 1.3"". Returns 0 in case method is not found. See TClass::GetMethod to also search the base classes. ; Definition at line 4502 of file TClass.cxx. ◆ GetClassMethod() [2/2]. TMethod * TClass::GetClassMethod ; (; Longptr_t ; faddr",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:79387,Performance,load,loading,79387,TClass::GetDeclFileLine ; (; ); const. inline . Definition at line 429 of file TClass.h. ◆ GetDeclFileName(). const char * TClass::GetDeclFileName ; (; ); const. Return name of the file containing the declaration of this class. ; Definition at line 3463 of file TClass.cxx. ◆ GetDeclIdMap(). DeclIdMap_t * TClass::GetDeclIdMap ; (; ). staticprivate . Definition at line 480 of file TClass.cxx. ◆ GetDelete(). ROOT::DelFunc_t TClass::GetDelete ; (; ); const. Return the wrapper around delete ThiObject. ; Definition at line 7463 of file TClass.cxx. ◆ GetDeleteArray(). ROOT::DelArrFunc_t TClass::GetDeleteArray ; (; ); const. Return the wrapper around delete [] ThiObject. ; Definition at line 7471 of file TClass.cxx. ◆ GetDestructor(). ROOT::DesFunc_t TClass::GetDestructor ; (; ); const. Return the wrapper around the destructor. ; Definition at line 7479 of file TClass.cxx. ◆ GetDict() [1/2]. DictFuncPtr_t TClass::GetDict ; (; const char * ; cname). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3422 of file TClass.cxx. ◆ GetDict() [2/2]. DictFuncPtr_t TClass::GetDict ; (; const std::type_info & ; info). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3431 of file TClass.cxx. ◆ GetDirectoryAutoAdd(). ROOT::DirAutoAdd_t TClass::GetDirectoryAutoAdd ; (; ); const. Return the wrapper around the directory auto add function. ; Definition at line 7487 of file TClass.cxx. ◆ GetFunctionTemplate(). TFunctionTemplate * TClass::GetFunctionTemplate ; (; const char * ; name). Definition at line 3607 of file TClass.cxx. ◆ GetHeapInstanceCount(). UInt_t TClass::GetHeapInstanceCount ; (; ); const. inline . Definition at line 467 of file TClass.h. ◆ GetIdMap(). IdMap_t * TClass::GetIdMap ; (; ). staticprivate . Definition at line 469 of file TClass.cxx. ◆ GetImplFileLine(). Short_t TClass::GetImplFileLine ; (; ); const. inline . Definition at line 457 of file TClass.h. ◆ GetImplFi,MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:79603,Performance,load,loading,79603,this class. ; Definition at line 3463 of file TClass.cxx. ◆ GetDeclIdMap(). DeclIdMap_t * TClass::GetDeclIdMap ; (; ). staticprivate . Definition at line 480 of file TClass.cxx. ◆ GetDelete(). ROOT::DelFunc_t TClass::GetDelete ; (; ); const. Return the wrapper around delete ThiObject. ; Definition at line 7463 of file TClass.cxx. ◆ GetDeleteArray(). ROOT::DelArrFunc_t TClass::GetDeleteArray ; (; ); const. Return the wrapper around delete [] ThiObject. ; Definition at line 7471 of file TClass.cxx. ◆ GetDestructor(). ROOT::DesFunc_t TClass::GetDestructor ; (; ); const. Return the wrapper around the destructor. ; Definition at line 7479 of file TClass.cxx. ◆ GetDict() [1/2]. DictFuncPtr_t TClass::GetDict ; (; const char * ; cname). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3422 of file TClass.cxx. ◆ GetDict() [2/2]. DictFuncPtr_t TClass::GetDict ; (; const std::type_info & ; info). static . Return a pointer to the dictionary loading function generated by rootcint. ; Definition at line 3431 of file TClass.cxx. ◆ GetDirectoryAutoAdd(). ROOT::DirAutoAdd_t TClass::GetDirectoryAutoAdd ; (; ); const. Return the wrapper around the directory auto add function. ; Definition at line 7487 of file TClass.cxx. ◆ GetFunctionTemplate(). TFunctionTemplate * TClass::GetFunctionTemplate ; (; const char * ; name). Definition at line 3607 of file TClass.cxx. ◆ GetHeapInstanceCount(). UInt_t TClass::GetHeapInstanceCount ; (; ); const. inline . Definition at line 467 of file TClass.h. ◆ GetIdMap(). IdMap_t * TClass::GetIdMap ; (; ). staticprivate . Definition at line 469 of file TClass.cxx. ◆ GetImplFileLine(). Short_t TClass::GetImplFileLine ; (; ); const. inline . Definition at line 457 of file TClass.h. ◆ GetImplFileName(). const char * TClass::GetImplFileName ; (; ); const. inline . Definition at line 456 of file TClass.h. ◆ GetInstanceCount(). UInt_t TClass::GetInstanceCount ; (; ); const. inline . Definition at line 466 of ,MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:81018,Performance,load,load,81018," line 3607 of file TClass.cxx. ◆ GetHeapInstanceCount(). UInt_t TClass::GetHeapInstanceCount ; (; ); const. inline . Definition at line 467 of file TClass.h. ◆ GetIdMap(). IdMap_t * TClass::GetIdMap ; (; ). staticprivate . Definition at line 469 of file TClass.cxx. ◆ GetImplFileLine(). Short_t TClass::GetImplFileLine ; (; ); const. inline . Definition at line 457 of file TClass.h. ◆ GetImplFileName(). const char * TClass::GetImplFileName ; (; ); const. inline . Definition at line 456 of file TClass.h. ◆ GetInstanceCount(). UInt_t TClass::GetInstanceCount ; (; ); const. inline . Definition at line 466 of file TClass.h. ◆ GetIsAProxy(). TVirtualIsAProxy * TClass::GetIsAProxy ; (; ); const. Return the proxy implementing the IsA functionality. ; Definition at line 2955 of file TClass.cxx. ◆ GetLastReadInfo(). TVirtualStreamerInfo * TClass::GetLastReadInfo ; (; ); const. inline . Definition at line 444 of file TClass.h. ◆ GetListOfAllPublicDataMembers(). TList * TClass::GetListOfAllPublicDataMembers ; (; Bool_t ; load = kTRUE). Returns a list of all public data members of this class and its base classes. ; Refers to a subset of the data members in GetListOfDatamembers() so don't do GetListOfAllPublicDataMembers()->Delete(). ; Definition at line 3862 of file TClass.cxx. ◆ GetListOfAllPublicMethods(). const TList * TClass::GetListOfAllPublicMethods ; (; Bool_t ; load = kTRUE). Returns a list of all public methods of this class and its base classes. ; Refers to a subset of the methods in GetListOfMethods() so don't do GetListOfAllPublicMethods()->Delete(). Algorithm used to get the list is:; put all methods of the class in the list (also protected and private ones).; loop over all base classes and add only those methods not already in the list (also protected and private ones).; once finished, loop over resulting list and remove all private and protected methods. . Definition at line 3845 of file TClass.cxx. ◆ GetListOfBases(). TList * TClass::GetListOfBases ; (; ). Return l",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:81372,Performance,load,load,81372," at line 457 of file TClass.h. ◆ GetImplFileName(). const char * TClass::GetImplFileName ; (; ); const. inline . Definition at line 456 of file TClass.h. ◆ GetInstanceCount(). UInt_t TClass::GetInstanceCount ; (; ); const. inline . Definition at line 466 of file TClass.h. ◆ GetIsAProxy(). TVirtualIsAProxy * TClass::GetIsAProxy ; (; ); const. Return the proxy implementing the IsA functionality. ; Definition at line 2955 of file TClass.cxx. ◆ GetLastReadInfo(). TVirtualStreamerInfo * TClass::GetLastReadInfo ; (; ); const. inline . Definition at line 444 of file TClass.h. ◆ GetListOfAllPublicDataMembers(). TList * TClass::GetListOfAllPublicDataMembers ; (; Bool_t ; load = kTRUE). Returns a list of all public data members of this class and its base classes. ; Refers to a subset of the data members in GetListOfDatamembers() so don't do GetListOfAllPublicDataMembers()->Delete(). ; Definition at line 3862 of file TClass.cxx. ◆ GetListOfAllPublicMethods(). const TList * TClass::GetListOfAllPublicMethods ; (; Bool_t ; load = kTRUE). Returns a list of all public methods of this class and its base classes. ; Refers to a subset of the methods in GetListOfMethods() so don't do GetListOfAllPublicMethods()->Delete(). Algorithm used to get the list is:; put all methods of the class in the list (also protected and private ones).; loop over all base classes and add only those methods not already in the list (also protected and private ones).; once finished, loop over resulting list and remove all private and protected methods. . Definition at line 3845 of file TClass.cxx. ◆ GetListOfBases(). TList * TClass::GetListOfBases ; (; ). Return list containing the TBaseClass(es) of a class. ; Definition at line 3636 of file TClass.cxx. ◆ GetListOfDataMembers(). TList * TClass::GetListOfDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of a class. ; Definition at line 3770 of file TClass.cxx. ◆ GetListOfEnums(). TList * TClass::GetListOfEnums ; (; Bool_t ; reques",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:82164,Performance,load,load,82164,"embers in GetListOfDatamembers() so don't do GetListOfAllPublicDataMembers()->Delete(). ; Definition at line 3862 of file TClass.cxx. ◆ GetListOfAllPublicMethods(). const TList * TClass::GetListOfAllPublicMethods ; (; Bool_t ; load = kTRUE). Returns a list of all public methods of this class and its base classes. ; Refers to a subset of the methods in GetListOfMethods() so don't do GetListOfAllPublicMethods()->Delete(). Algorithm used to get the list is:; put all methods of the class in the list (also protected and private ones).; loop over all base classes and add only those methods not already in the list (also protected and private ones).; once finished, loop over resulting list and remove all private and protected methods. . Definition at line 3845 of file TClass.cxx. ◆ GetListOfBases(). TList * TClass::GetListOfBases ; (; ). Return list containing the TBaseClass(es) of a class. ; Definition at line 3636 of file TClass.cxx. ◆ GetListOfDataMembers(). TList * TClass::GetListOfDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of a class. ; Definition at line 3770 of file TClass.cxx. ◆ GetListOfEnums(). TList * TClass::GetListOfEnums ; (; Bool_t ; requestListLoading = kTRUE). Return a list containing the TEnums of a class. ; The list returned is safe to use from multiple thread without explicitly taking the ROOT global lock.; In the case the TClass represents a namespace, the returned list will implicit take the ROOT global lock upon any access (see TListOfEnumsWithLock); In the case the TClass represents a class or struct and requestListLoading is true, the list is immutable (and thus safe to access from multiple thread without taking the global lock at all).; In the case the TClass represents a class or struct and requestListLoading is false, the list is mutable and thus we return a TListOfEnumsWithLock which will implicit take the ROOT global lock upon any access. ; Definition at line 3686 of file TClass.cxx. ◆ GetListOfFunctionTemp",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:83211,Performance,load,load,83211,"t containing the TDataMembers of a class. ; Definition at line 3770 of file TClass.cxx. ◆ GetListOfEnums(). TList * TClass::GetListOfEnums ; (; Bool_t ; requestListLoading = kTRUE). Return a list containing the TEnums of a class. ; The list returned is safe to use from multiple thread without explicitly taking the ROOT global lock.; In the case the TClass represents a namespace, the returned list will implicit take the ROOT global lock upon any access (see TListOfEnumsWithLock); In the case the TClass represents a class or struct and requestListLoading is true, the list is immutable (and thus safe to access from multiple thread without taking the global lock at all).; In the case the TClass represents a class or struct and requestListLoading is false, the list is mutable and thus we return a TListOfEnumsWithLock which will implicit take the ROOT global lock upon any access. ; Definition at line 3686 of file TClass.cxx. ◆ GetListOfFunctionTemplates(). TList * TClass::GetListOfFunctionTemplates ; (; Bool_t ; load = kTRUE). Return TListOfFunctionTemplates for a class. ; Definition at line 3798 of file TClass.cxx. ◆ GetListOfMethodOverloads(). TCollection * TClass::GetListOfMethodOverloads ; (; const char * ; name); const. Return the collection of functions named ""name"". ; Definition at line 3827 of file TClass.cxx. ◆ GetListOfMethods(). TList * TClass::GetListOfMethods ; (; Bool_t ; load = kTRUE). Return list containing the TMethods of a class. ; If load is true, the list is populated with all the defined function and currently instantiated function template. ; Definition at line 3812 of file TClass.cxx. ◆ GetListOfRealData(). TList * TClass::GetListOfRealData ; (; ); const. inline . Definition at line 453 of file TClass.h. ◆ GetListOfUsingDataMembers(). TList * TClass::GetListOfUsingDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of using declarations of a class. ; Definition at line 3786 of file TClass.cxx. ◆ GetMenuItems(). void TCla",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:83592,Performance,load,load,83592,"returned list will implicit take the ROOT global lock upon any access (see TListOfEnumsWithLock); In the case the TClass represents a class or struct and requestListLoading is true, the list is immutable (and thus safe to access from multiple thread without taking the global lock at all).; In the case the TClass represents a class or struct and requestListLoading is false, the list is mutable and thus we return a TListOfEnumsWithLock which will implicit take the ROOT global lock upon any access. ; Definition at line 3686 of file TClass.cxx. ◆ GetListOfFunctionTemplates(). TList * TClass::GetListOfFunctionTemplates ; (; Bool_t ; load = kTRUE). Return TListOfFunctionTemplates for a class. ; Definition at line 3798 of file TClass.cxx. ◆ GetListOfMethodOverloads(). TCollection * TClass::GetListOfMethodOverloads ; (; const char * ; name); const. Return the collection of functions named ""name"". ; Definition at line 3827 of file TClass.cxx. ◆ GetListOfMethods(). TList * TClass::GetListOfMethods ; (; Bool_t ; load = kTRUE). Return list containing the TMethods of a class. ; If load is true, the list is populated with all the defined function and currently instantiated function template. ; Definition at line 3812 of file TClass.cxx. ◆ GetListOfRealData(). TList * TClass::GetListOfRealData ; (; ); const. inline . Definition at line 453 of file TClass.h. ◆ GetListOfUsingDataMembers(). TList * TClass::GetListOfUsingDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of using declarations of a class. ; Definition at line 3786 of file TClass.cxx. ◆ GetMenuItems(). void TClass::GetMenuItems ; (; TList * ; listitems). Returns list of methods accessible by context menu. ; Definition at line 3874 of file TClass.cxx. ◆ GetMenuList(). TList * TClass::GetMenuList ; (; ); const. Return the list of menu items associated with the class. ; Definition at line 4341 of file TClass.cxx. ◆ GetMerge(). ROOT::MergeFunc_t TClass::GetMerge ; (; ); const. Return the wrappe",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:83660,Performance,load,load,83660,"ss or struct and requestListLoading is true, the list is immutable (and thus safe to access from multiple thread without taking the global lock at all).; In the case the TClass represents a class or struct and requestListLoading is false, the list is mutable and thus we return a TListOfEnumsWithLock which will implicit take the ROOT global lock upon any access. ; Definition at line 3686 of file TClass.cxx. ◆ GetListOfFunctionTemplates(). TList * TClass::GetListOfFunctionTemplates ; (; Bool_t ; load = kTRUE). Return TListOfFunctionTemplates for a class. ; Definition at line 3798 of file TClass.cxx. ◆ GetListOfMethodOverloads(). TCollection * TClass::GetListOfMethodOverloads ; (; const char * ; name); const. Return the collection of functions named ""name"". ; Definition at line 3827 of file TClass.cxx. ◆ GetListOfMethods(). TList * TClass::GetListOfMethods ; (; Bool_t ; load = kTRUE). Return list containing the TMethods of a class. ; If load is true, the list is populated with all the defined function and currently instantiated function template. ; Definition at line 3812 of file TClass.cxx. ◆ GetListOfRealData(). TList * TClass::GetListOfRealData ; (; ); const. inline . Definition at line 453 of file TClass.h. ◆ GetListOfUsingDataMembers(). TList * TClass::GetListOfUsingDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of using declarations of a class. ; Definition at line 3786 of file TClass.cxx. ◆ GetMenuItems(). void TClass::GetMenuItems ; (; TList * ; listitems). Returns list of methods accessible by context menu. ; Definition at line 3874 of file TClass.cxx. ◆ GetMenuList(). TList * TClass::GetMenuList ; (; ); const. Return the list of menu items associated with the class. ; Definition at line 4341 of file TClass.cxx. ◆ GetMerge(). ROOT::MergeFunc_t TClass::GetMerge ; (; ); const. Return the wrapper around Merge. ; Definition at line 7431 of file TClass.cxx. ◆ GetMethod(). TMethod * TClass::GetMethod ; (; const char * ; method, . con",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:84027,Performance,load,load,84027,"ithLock which will implicit take the ROOT global lock upon any access. ; Definition at line 3686 of file TClass.cxx. ◆ GetListOfFunctionTemplates(). TList * TClass::GetListOfFunctionTemplates ; (; Bool_t ; load = kTRUE). Return TListOfFunctionTemplates for a class. ; Definition at line 3798 of file TClass.cxx. ◆ GetListOfMethodOverloads(). TCollection * TClass::GetListOfMethodOverloads ; (; const char * ; name); const. Return the collection of functions named ""name"". ; Definition at line 3827 of file TClass.cxx. ◆ GetListOfMethods(). TList * TClass::GetListOfMethods ; (; Bool_t ; load = kTRUE). Return list containing the TMethods of a class. ; If load is true, the list is populated with all the defined function and currently instantiated function template. ; Definition at line 3812 of file TClass.cxx. ◆ GetListOfRealData(). TList * TClass::GetListOfRealData ; (; ); const. inline . Definition at line 453 of file TClass.h. ◆ GetListOfUsingDataMembers(). TList * TClass::GetListOfUsingDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of using declarations of a class. ; Definition at line 3786 of file TClass.cxx. ◆ GetMenuItems(). void TClass::GetMenuItems ; (; TList * ; listitems). Returns list of methods accessible by context menu. ; Definition at line 3874 of file TClass.cxx. ◆ GetMenuList(). TList * TClass::GetMenuList ; (; ); const. Return the list of menu items associated with the class. ; Definition at line 4341 of file TClass.cxx. ◆ GetMerge(). ROOT::MergeFunc_t TClass::GetMerge ; (; ); const. Return the wrapper around Merge. ; Definition at line 7431 of file TClass.cxx. ◆ GetMethod(). TMethod * TClass::GetMethod ; (; const char * ; method, . const char * ; params, . Bool_t ; objectIsConst = kFALSE . ). Find the best method (if there is one) matching the parameters. ; The params string must contain argument values, like ""3189, \""aap\"", 1.3"". The function invokes GetClassMethod to search for a possible method in the class itself or in",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:85530,Performance,load,loading,85530,"; ); const. Return the wrapper around Merge. ; Definition at line 7431 of file TClass.cxx. ◆ GetMethod(). TMethod * TClass::GetMethod ; (; const char * ; method, . const char * ; params, . Bool_t ; objectIsConst = kFALSE . ). Find the best method (if there is one) matching the parameters. ; The params string must contain argument values, like ""3189, \""aap\"", 1.3"". The function invokes GetClassMethod to search for a possible method in the class itself or in its base classes. Returns 0 in case method is not found. ; Definition at line 4411 of file TClass.cxx. ◆ GetMethodAllAny(). TMethod * TClass::GetMethodAllAny ; (; const char * ; method). Return pointer to method without looking at parameters. ; Does look in all base classes. ; Definition at line 4384 of file TClass.cxx. ◆ GetMethodAny(). TMethod * TClass::GetMethodAny ; (; const char * ; method). Return pointer to method without looking at parameters. ; Does not look in (possible) base classes. Has the side effect of loading all the TMethod object in the list of the class. ; Definition at line 4374 of file TClass.cxx. ◆ GetMethodList(). TListOfFunctions * TClass::GetMethodList ; (; ). private . Return (create an empty one if needed) the list of functions. ; The major difference with GetListOfMethod is that this returns the internal type of fMethod and thus can not be made public. It also never 'loads' the content of the list. ; Definition at line 4355 of file TClass.cxx. ◆ GetMethodWithPrototype(). TMethod * TClass::GetMethodWithPrototype ; (; const char * ; method, . const char * ; proto, . Bool_t ; objectIsConst = kFALSE, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). Find the method with a given prototype. ; The proto string must be of the form: ""char*,int,double"". Returns 0 in case method is not found. ; Definition at line 4456 of file TClass.cxx. ◆ GetMissingDictionaries(). void TClass::GetMissingDictionaries ; (; THashTable & ; result, . bool ; recurse = false . ). Get the classes that have ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:85915,Performance,load,loads,85915,"ion invokes GetClassMethod to search for a possible method in the class itself or in its base classes. Returns 0 in case method is not found. ; Definition at line 4411 of file TClass.cxx. ◆ GetMethodAllAny(). TMethod * TClass::GetMethodAllAny ; (; const char * ; method). Return pointer to method without looking at parameters. ; Does look in all base classes. ; Definition at line 4384 of file TClass.cxx. ◆ GetMethodAny(). TMethod * TClass::GetMethodAny ; (; const char * ; method). Return pointer to method without looking at parameters. ; Does not look in (possible) base classes. Has the side effect of loading all the TMethod object in the list of the class. ; Definition at line 4374 of file TClass.cxx. ◆ GetMethodList(). TListOfFunctions * TClass::GetMethodList ; (; ). private . Return (create an empty one if needed) the list of functions. ; The major difference with GetListOfMethod is that this returns the internal type of fMethod and thus can not be made public. It also never 'loads' the content of the list. ; Definition at line 4355 of file TClass.cxx. ◆ GetMethodWithPrototype(). TMethod * TClass::GetMethodWithPrototype ; (; const char * ; method, . const char * ; proto, . Bool_t ; objectIsConst = kFALSE, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). Find the method with a given prototype. ; The proto string must be of the form: ""char*,int,double"". Returns 0 in case method is not found. ; Definition at line 4456 of file TClass.cxx. ◆ GetMissingDictionaries(). void TClass::GetMissingDictionaries ; (; THashTable & ; result, . bool ; recurse = false . ). Get the classes that have a missing dictionary starting from this one. . With recurse = false the classes checked for missing dictionaries are: the class itself, all base classes, direct data members, and for collection proxies the container's elements without iterating over the element's data members;; With recurse = true the classes checked for missing dictionaries are: the class itself, all base c",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:88931,Performance,load,load,88931," visited, . bool ; recurse . ). protected . From the second level of recursion onwards it is different state check. ; Definition at line 3990 of file TClass.cxx. ◆ GetNdata(). Int_t TClass::GetNdata ; (; ). Return the number of data members of this class Note that in case the list of data members is not yet created, it will be done by GetListOfDataMembers(). ; Definition at line 4554 of file TClass.cxx. ◆ GetNew(). ROOT::NewFunc_t TClass::GetNew ; (; ); const. Return the wrapper around new ThisClass(). ; Definition at line 7447 of file TClass.cxx. ◆ GetNewArray(). ROOT::NewArrFunc_t TClass::GetNewArray ; (; ); const. Return the wrapper around new ThisClass[]. ; Definition at line 7455 of file TClass.cxx. ◆ GetNmethods(). Int_t TClass::GetNmethods ; (; ). Return the number of methods of this class Note that in case the list of methods is not yet created, it will be done by GetListOfMethods(). ; This will also load/populate the list of methods, to get 'just' the number of currently loaded methods use: cl->GetListOfMethods(false)->GetSize(); ; Definition at line 4573 of file TClass.cxx. ◆ GetPersistentRef(). TClass *const * TClass::GetPersistentRef ; (; ); const. inline . Definition at line 481 of file TClass.h. ◆ GetRealData(). TRealData * TClass::GetRealData ; (; const char * ; name); const. Return pointer to TRealData element with name ""name"". ; Name can be a data member in the class itself, one of its base classes, or a member in one of the aggregated classes.; In case of an emulated class, the list of emulated TRealData is built. ; Definition at line 3503 of file TClass.cxx. ◆ GetReferenceProxy(). TVirtualRefProxy * TClass::GetReferenceProxy ; (; ); const. inline . Definition at line 483 of file TClass.h. ◆ GetResetAfterMerge(). ROOT::ResetAfterMergeFunc_t TClass::GetResetAfterMerge ; (; ); const. Return the wrapper around Merge. ; Definition at line 7439 of file TClass.cxx. ◆ GetSchemaRules() [1/2]. const ROOT::Detail::TSchemaRuleSet * TClass::GetSchemaRules ; (;",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:89004,Performance,load,loaded,89004," visited, . bool ; recurse . ). protected . From the second level of recursion onwards it is different state check. ; Definition at line 3990 of file TClass.cxx. ◆ GetNdata(). Int_t TClass::GetNdata ; (; ). Return the number of data members of this class Note that in case the list of data members is not yet created, it will be done by GetListOfDataMembers(). ; Definition at line 4554 of file TClass.cxx. ◆ GetNew(). ROOT::NewFunc_t TClass::GetNew ; (; ); const. Return the wrapper around new ThisClass(). ; Definition at line 7447 of file TClass.cxx. ◆ GetNewArray(). ROOT::NewArrFunc_t TClass::GetNewArray ; (; ); const. Return the wrapper around new ThisClass[]. ; Definition at line 7455 of file TClass.cxx. ◆ GetNmethods(). Int_t TClass::GetNmethods ; (; ). Return the number of methods of this class Note that in case the list of methods is not yet created, it will be done by GetListOfMethods(). ; This will also load/populate the list of methods, to get 'just' the number of currently loaded methods use: cl->GetListOfMethods(false)->GetSize(); ; Definition at line 4573 of file TClass.cxx. ◆ GetPersistentRef(). TClass *const * TClass::GetPersistentRef ; (; ); const. inline . Definition at line 481 of file TClass.h. ◆ GetRealData(). TRealData * TClass::GetRealData ; (; const char * ; name); const. Return pointer to TRealData element with name ""name"". ; Name can be a data member in the class itself, one of its base classes, or a member in one of the aggregated classes.; In case of an emulated class, the list of emulated TRealData is built. ; Definition at line 3503 of file TClass.cxx. ◆ GetReferenceProxy(). TVirtualRefProxy * TClass::GetReferenceProxy ; (; ); const. inline . Definition at line 483 of file TClass.h. ◆ GetResetAfterMerge(). ROOT::ResetAfterMergeFunc_t TClass::GetResetAfterMerge ; (; ); const. Return the wrapper around Merge. ; Definition at line 7439 of file TClass.cxx. ◆ GetSchemaRules() [1/2]. const ROOT::Detail::TSchemaRuleSet * TClass::GetSchemaRules ; (;",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:91655,Performance,load,loaded,91655," libraries the first one depends on. Returns 0 in case the library is not found. ; Definition at line 3623 of file TClass.cxx. ◆ GetShowMembersWrapper(). ShowMembersFunc_t TClass::GetShowMembersWrapper ; (; ); const. inline . Definition at line 487 of file TClass.h. ◆ GetState(). EState TClass::GetState ; (; ); const. inline . Definition at line 488 of file TClass.h. ◆ GetStreamer(). TClassStreamer * TClass::GetStreamer ; (; ); const. Return the Streamer Class allowing streaming (if any). ; Definition at line 2914 of file TClass.cxx. ◆ GetStreamerFunc(). ClassStreamerFunc_t TClass::GetStreamerFunc ; (; ); const. Get a wrapper/accessor function around this class custom streamer (member function). ; Definition at line 2939 of file TClass.cxx. ◆ GetStreamerInfo(). TVirtualStreamerInfo * TClass::GetStreamerInfo ; (; Int_t ; version = 0, . Bool_t ; isTransient = kFALSE . ); const. returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ; Note: There are two special version numbers: - 0: Use the class version from the currently loaded class library.; - -1: Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4599 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:91708,Performance,load,loaded,91708,"ersWrapper(). ShowMembersFunc_t TClass::GetShowMembersWrapper ; (; ); const. inline . Definition at line 487 of file TClass.h. ◆ GetState(). EState TClass::GetState ; (; ); const. inline . Definition at line 488 of file TClass.h. ◆ GetStreamer(). TClassStreamer * TClass::GetStreamer ; (; ); const. Return the Streamer Class allowing streaming (if any). ; Definition at line 2914 of file TClass.cxx. ◆ GetStreamerFunc(). ClassStreamerFunc_t TClass::GetStreamerFunc ; (; ); const. Get a wrapper/accessor function around this class custom streamer (member function). ; Definition at line 2939 of file TClass.cxx. ◆ GetStreamerInfo(). TVirtualStreamerInfo * TClass::GetStreamerInfo ; (; Int_t ; version = 0, . Bool_t ; isTransient = kFALSE . ); const. returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ; Note: There are two special version numbers: - 0: Use the class version from the currently loaded class library.; - -1: Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4599 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unle",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:91802,Performance,optimiz,optimizes,91802,"etState ; (; ); const. inline . Definition at line 488 of file TClass.h. ◆ GetStreamer(). TClassStreamer * TClass::GetStreamer ; (; ); const. Return the Streamer Class allowing streaming (if any). ; Definition at line 2914 of file TClass.cxx. ◆ GetStreamerFunc(). ClassStreamerFunc_t TClass::GetStreamerFunc ; (; ); const. Get a wrapper/accessor function around this class custom streamer (member function). ; Definition at line 2939 of file TClass.cxx. ◆ GetStreamerInfo(). TVirtualStreamerInfo * TClass::GetStreamerInfo ; (; Int_t ; version = 0, . Bool_t ; isTransient = kFALSE . ); const. returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ; Note: There are two special version numbers: - 0: Use the class version from the currently loaded class library.; - -1: Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4599 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4709 of file TClass.cxx. ◆ GetStreamerInfoImpl(). TVirtualStreamerInfo",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:92334,Performance,load,loaded,92334,"ustom streamer (member function). ; Definition at line 2939 of file TClass.cxx. ◆ GetStreamerInfo(). TVirtualStreamerInfo * TClass::GetStreamerInfo ; (; Int_t ; version = 0, . Bool_t ; isTransient = kFALSE . ); const. returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ; Note: There are two special version numbers: - 0: Use the class version from the currently loaded class library.; - -1: Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4599 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4709 of file TClass.cxx. ◆ GetStreamerInfoImpl(). TVirtualStreamerInfo * TClass::GetStreamerInfoImpl ; (; Int_t ; version, . Bool_t ; silent . ); const. private . Definition at line 4634 of file TClass.cxx. ◆ GetStreamerInfos(). const TObjArray * TClass::GetStreamerInfos ; (; ); const. inline . Definition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:92479,Performance,load,loaded,92479,"ter to the TVirtualStreamerInfo object for version If the object does not exist, it is created ; Note: There are two special version numbers: - 0: Use the class version from the currently loaded class library.; - -1: Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4599 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4709 of file TClass.cxx. ◆ GetStreamerInfoImpl(). TVirtualStreamerInfo * TClass::GetStreamerInfoImpl ; (; Int_t ; version, . Bool_t ; silent . ); const. private . Definition at line 4634 of file TClass.cxx. ◆ GetStreamerInfos(). const TObjArray * TClass::GetStreamerInfos ; (; ); const. inline . Definition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash i",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:92530,Performance,load,loaded,92530,"ject does not exist, it is created ; Note: There are two special version numbers: - 0: Use the class version from the currently loaded class library.; - -1: Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4599 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4709 of file TClass.cxx. ◆ GetStreamerInfoImpl(). TVirtualStreamerInfo * TClass::GetStreamerInfoImpl ; (; Int_t ; version, . Bool_t ; silent . ); const. private . Definition at line 4634 of file TClass.cxx. ◆ GetStreamerInfos(). const TObjArray * TClass::GetStreamerInfos ; (; ); const. inline . Definition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destr",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:92623,Performance,optimiz,optimizes,92623," Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4599 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Note: There are two special version numbers:. 0: Use the class version from the currently loaded class library.; -1: Assume no class library loaded (emulated class). Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4709 of file TClass.cxx. ◆ GetStreamerInfoImpl(). TVirtualStreamerInfo * TClass::GetStreamerInfoImpl ; (; Int_t ; version, . Bool_t ; silent . ); const. private . Definition at line 4634 of file TClass.cxx. ◆ GetStreamerInfos(). const TObjArray * TClass::GetStreamerInfos ; (; ); const. inline . Definition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:95054,Performance,load,loading,95054,"ructor ; (; Bool_t ; testio = kFALSE); const. Return true if we have access to a constructor usable for I/O. ; This is typically the default constructor but can also be a constructor specifically marked for I/O (for example a constructor taking a TRootIOCtor* as an argument). In other words, if this routine returns true, TClass::New is guarantee to succeed. To know if the class described by this TClass has a default constructor (public or not), use cl->GetProperty() & kClassHasDefaultCtor; kClassHasDefaultCtor@ kClassHasDefaultCtorDefinition TDictionary.h:140; To know if the class described by this TClass has a public default constructor use: gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; gInterpreter#define gInterpreterDefinition TInterpreter.h:573. Definition at line 7393 of file TClass.cxx. ◆ HasDictionary(). Bool_t TClass::HasDictionary ; (; ); const. Check whether a class has a dictionary or not. ; This is equivalent to ask if a class is coming from a bootstrapping procedure initiated during the loading of a library. ; Definition at line 3906 of file TClass.cxx. ◆ HasDictionarySelection(). Bool_t TClass::HasDictionarySelection ; (; const char * ; clname). static . Check whether a class has a dictionary or ROOT can load one. ; This is equivalent to ask HasDictionary() or whether a library is known where it can be loaded from, or whether a Dictionary function is available because the class's dictionary library was already loaded. ; Definition at line 3917 of file TClass.cxx. ◆ HasInterpreterInfo(). Bool_t TClass::HasInterpreterInfo ; (; ); const. inline . Definition at line 410 of file TClass.h. ◆ HasInterpreterInfoInMemory(). Bool_t TClass::HasInterpreterInfoInMemory ; (; ); const. inline . Definition at line 409 of file TClass.h. ◆ HasLocalHashMember(). Bool_t TClass::HasLocalHashMember ; (; ); const. Returns true if this class has an definition and/or overload of the member function Hash. ; For example to test if the class overload TObj",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:95277,Performance,load,load,95277,"ng a TRootIOCtor* as an argument). In other words, if this routine returns true, TClass::New is guarantee to succeed. To know if the class described by this TClass has a default constructor (public or not), use cl->GetProperty() & kClassHasDefaultCtor; kClassHasDefaultCtor@ kClassHasDefaultCtorDefinition TDictionary.h:140; To know if the class described by this TClass has a public default constructor use: gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; gInterpreter#define gInterpreterDefinition TInterpreter.h:573. Definition at line 7393 of file TClass.cxx. ◆ HasDictionary(). Bool_t TClass::HasDictionary ; (; ); const. Check whether a class has a dictionary or not. ; This is equivalent to ask if a class is coming from a bootstrapping procedure initiated during the loading of a library. ; Definition at line 3906 of file TClass.cxx. ◆ HasDictionarySelection(). Bool_t TClass::HasDictionarySelection ; (; const char * ; clname). static . Check whether a class has a dictionary or ROOT can load one. ; This is equivalent to ask HasDictionary() or whether a library is known where it can be loaded from, or whether a Dictionary function is available because the class's dictionary library was already loaded. ; Definition at line 3917 of file TClass.cxx. ◆ HasInterpreterInfo(). Bool_t TClass::HasInterpreterInfo ; (; ); const. inline . Definition at line 410 of file TClass.h. ◆ HasInterpreterInfoInMemory(). Bool_t TClass::HasInterpreterInfoInMemory ; (; ); const. inline . Definition at line 409 of file TClass.h. ◆ HasLocalHashMember(). Bool_t TClass::HasLocalHashMember ; (; ); const. Returns true if this class has an definition and/or overload of the member function Hash. ; For example to test if the class overload TObject::Hash use if (cl->IsTObject() && cl->HasLocalHashMember()). Definition at line 7421 of file TClass.cxx. ◆ HasNoInfoOrEmuOrFwdDeclaredDecl(). Bool_t TClass::HasNoInfoOrEmuOrFwdDeclaredDecl ; (; const char * ; name). staticprivate . Definit",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:95377,Performance,load,loaded,95377,"ass described by this TClass has a default constructor (public or not), use cl->GetProperty() & kClassHasDefaultCtor; kClassHasDefaultCtor@ kClassHasDefaultCtorDefinition TDictionary.h:140; To know if the class described by this TClass has a public default constructor use: gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; gInterpreter#define gInterpreterDefinition TInterpreter.h:573. Definition at line 7393 of file TClass.cxx. ◆ HasDictionary(). Bool_t TClass::HasDictionary ; (; ); const. Check whether a class has a dictionary or not. ; This is equivalent to ask if a class is coming from a bootstrapping procedure initiated during the loading of a library. ; Definition at line 3906 of file TClass.cxx. ◆ HasDictionarySelection(). Bool_t TClass::HasDictionarySelection ; (; const char * ; clname). static . Check whether a class has a dictionary or ROOT can load one. ; This is equivalent to ask HasDictionary() or whether a library is known where it can be loaded from, or whether a Dictionary function is available because the class's dictionary library was already loaded. ; Definition at line 3917 of file TClass.cxx. ◆ HasInterpreterInfo(). Bool_t TClass::HasInterpreterInfo ; (; ); const. inline . Definition at line 410 of file TClass.h. ◆ HasInterpreterInfoInMemory(). Bool_t TClass::HasInterpreterInfoInMemory ; (; ); const. inline . Definition at line 409 of file TClass.h. ◆ HasLocalHashMember(). Bool_t TClass::HasLocalHashMember ; (; ); const. Returns true if this class has an definition and/or overload of the member function Hash. ; For example to test if the class overload TObject::Hash use if (cl->IsTObject() && cl->HasLocalHashMember()). Definition at line 7421 of file TClass.cxx. ◆ HasNoInfoOrEmuOrFwdDeclaredDecl(). Bool_t TClass::HasNoInfoOrEmuOrFwdDeclaredDecl ; (; const char * ; name). staticprivate . Definition at line 3398 of file TClass.cxx. ◆ IgnoreTObjectStreamer(). void TClass::IgnoreTObjectStreamer ; (; Bool_t ; doIgnore = kTRUE). Wh",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:95487,Performance,load,loaded,95487,"ass described by this TClass has a default constructor (public or not), use cl->GetProperty() & kClassHasDefaultCtor; kClassHasDefaultCtor@ kClassHasDefaultCtorDefinition TDictionary.h:140; To know if the class described by this TClass has a public default constructor use: gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; gInterpreter#define gInterpreterDefinition TInterpreter.h:573. Definition at line 7393 of file TClass.cxx. ◆ HasDictionary(). Bool_t TClass::HasDictionary ; (; ); const. Check whether a class has a dictionary or not. ; This is equivalent to ask if a class is coming from a bootstrapping procedure initiated during the loading of a library. ; Definition at line 3906 of file TClass.cxx. ◆ HasDictionarySelection(). Bool_t TClass::HasDictionarySelection ; (; const char * ; clname). static . Check whether a class has a dictionary or ROOT can load one. ; This is equivalent to ask HasDictionary() or whether a library is known where it can be loaded from, or whether a Dictionary function is available because the class's dictionary library was already loaded. ; Definition at line 3917 of file TClass.cxx. ◆ HasInterpreterInfo(). Bool_t TClass::HasInterpreterInfo ; (; ); const. inline . Definition at line 410 of file TClass.h. ◆ HasInterpreterInfoInMemory(). Bool_t TClass::HasInterpreterInfoInMemory ; (; ); const. inline . Definition at line 409 of file TClass.h. ◆ HasLocalHashMember(). Bool_t TClass::HasLocalHashMember ; (; ); const. Returns true if this class has an definition and/or overload of the member function Hash. ; For example to test if the class overload TObject::Hash use if (cl->IsTObject() && cl->HasLocalHashMember()). Definition at line 7421 of file TClass.cxx. ◆ HasNoInfoOrEmuOrFwdDeclaredDecl(). Bool_t TClass::HasNoInfoOrEmuOrFwdDeclaredDecl ; (; const char * ; name). staticprivate . Definition at line 3398 of file TClass.cxx. ◆ IgnoreTObjectStreamer(). void TClass::IgnoreTObjectStreamer ; (; Bool_t ; doIgnore = kTRUE). Wh",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:101737,Performance,load,load,101737,"g code is proper for this class: ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from TObject. ; Definition at line 5929 of file TClass.cxx. ◆ IsSyntheticPair(). Bool_t TClass::IsSyntheticPair ; (; ); const. inline . Definition at line 521 of file TClass.h. ◆ IsTObject(). Bool_t TClass::IsTObject ; (; ); const. Return kTRUE is the class inherits from TObject. ; Definition at line 5938 of file TClass.cxx. ◆ IsVersioned(). Bool_t TClass::IsVersioned ; (; ); const. inline . Definition at line 522 of file TClass.h. ◆ Load(). TClass * TClass::Load ; (; TBuffer & ; b). static . Load class description from I/O buffer and return class object. ; Definition at line 5715 of file TClass.cxx. ◆ LoadClass(). TClass * TClass::LoadClass ; (; const char * ; requestedname, . Bool_t ; silent . ). static . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' either from the TClassTable or from the list of generator. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5749 of file TClass.cxx. ◆ LoadClassCustom(). TClass * TClass::LoadClassCustom ; (; const char * ; requestedname, . Bool_t ; silent . ). staticprivate . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' from the list of generator. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5801 of file TClass.cxx. ◆ LoadClassDefault(). TClass * TClass::LoadClassDefault ; (; const char * ; requestedname, . Bool_t ; silent . ). staticprivate . Helper function used by TClass::GetClass(). ; This f",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:102278,Performance,load,load,102278,"l_t TClass::IsVersioned ; (; ); const. inline . Definition at line 522 of file TClass.h. ◆ Load(). TClass * TClass::Load ; (; TBuffer & ; b). static . Load class description from I/O buffer and return class object. ; Definition at line 5715 of file TClass.cxx. ◆ LoadClass(). TClass * TClass::LoadClass ; (; const char * ; requestedname, . Bool_t ; silent . ). static . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' either from the TClassTable or from the list of generator. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5749 of file TClass.cxx. ◆ LoadClassCustom(). TClass * TClass::LoadClassCustom ; (; const char * ; requestedname, . Bool_t ; silent . ). staticprivate . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' from the list of generator. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5801 of file TClass.cxx. ◆ LoadClassDefault(). TClass * TClass::LoadClassDefault ; (; const char * ; requestedname, . Bool_t ; silent . ). staticprivate . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' from the TClassTable or the autoloader. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5771 of file TClass.cxx. ◆ LoadClassInfo(). void TClass::LoadClassInfo ; (; ); const. private . Try to load the ClassInfo if available. ; This function may require parsing the header file and/or loading data ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:102790,Performance,load,load,102790,"list of generator. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5749 of file TClass.cxx. ◆ LoadClassCustom(). TClass * TClass::LoadClassCustom ; (; const char * ; requestedname, . Bool_t ; silent . ). staticprivate . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' from the list of generator. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5801 of file TClass.cxx. ◆ LoadClassDefault(). TClass * TClass::LoadClassDefault ; (; const char * ; requestedname, . Bool_t ; silent . ). staticprivate . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' from the TClassTable or the autoloader. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5771 of file TClass.cxx. ◆ LoadClassInfo(). void TClass::LoadClassInfo ; (; ); const. private . Try to load the ClassInfo if available. ; This function may require parsing the header file and/or loading data from the clang pcm. If further calls to this function cannot affect the value of fClassInfo, fCanLoadClassInfo is set to false. ; Definition at line 5824 of file TClass.cxx. ◆ ls(). void TClass::ls ; (; Option_t * ; options = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). If options contains 'streamerinfo', run ls on the list of streamerInfos and the list of conversion streamerInfos. ; Reimplemented from TObject.; Defi",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:103190,Performance,load,load,103190,"e . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' from the list of generator. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5801 of file TClass.cxx. ◆ LoadClassDefault(). TClass * TClass::LoadClassDefault ; (; const char * ; requestedname, . Bool_t ; silent . ). staticprivate . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' from the TClassTable or the autoloader. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5771 of file TClass.cxx. ◆ LoadClassInfo(). void TClass::LoadClassInfo ; (; ); const. private . Try to load the ClassInfo if available. ; This function may require parsing the header file and/or loading data from the clang pcm. If further calls to this function cannot affect the value of fClassInfo, fCanLoadClassInfo is set to false. ; Definition at line 5824 of file TClass.cxx. ◆ ls(). void TClass::ls ; (; Option_t * ; options = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). If options contains 'streamerinfo', run ls on the list of streamerInfos and the list of conversion streamerInfos. ; Reimplemented from TObject.; Definition at line 4258 of file TClass.cxx. ◆ MakeCustomMenuList(). void TClass::MakeCustomMenuList ; (; ). Makes a customizable version of the popup menu list, i.e. ; makes a list of TClassMenuItem objects of methods accessible by context menu. The standard (and different) way consists in having just one element in this list, corresponding to the whole standard list. Once the customizable ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:103282,Performance,load,loading,103282,"tempts to load the dictionary for 'classname' from the list of generator. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5801 of file TClass.cxx. ◆ LoadClassDefault(). TClass * TClass::LoadClassDefault ; (; const char * ; requestedname, . Bool_t ; silent . ). staticprivate . Helper function used by TClass::GetClass(). ; This function attempts to load the dictionary for 'classname' from the TClassTable or the autoloader. If silent is 'true', do not warn about missing dictionary for the class. (typically used for class that are used only for transient members); The 'requestedname' is expected to be already normalized. ; Definition at line 5771 of file TClass.cxx. ◆ LoadClassInfo(). void TClass::LoadClassInfo ; (; ); const. private . Try to load the ClassInfo if available. ; This function may require parsing the header file and/or loading data from the clang pcm. If further calls to this function cannot affect the value of fClassInfo, fCanLoadClassInfo is set to false. ; Definition at line 5824 of file TClass.cxx. ◆ ls(). void TClass::ls ; (; Option_t * ; options = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). If options contains 'streamerinfo', run ls on the list of streamerInfos and the list of conversion streamerInfos. ; Reimplemented from TObject.; Definition at line 4258 of file TClass.cxx. ◆ MakeCustomMenuList(). void TClass::MakeCustomMenuList ; (; ). Makes a customizable version of the popup menu list, i.e. ; makes a list of TClassMenuItem objects of methods accessible by context menu. The standard (and different) way consists in having just one element in this list, corresponding to the whole standard list. Once the customizable version is done, one can remove or add elements. ; Definition at l",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:109091,Performance,cache,cache,109091,"of file TClass.cxx. ◆ NewObjectArray() [2/2]. TClass::ObjectPtr TClass::NewObjectArray ; (; Long_t ; nElements, . void * ; arena, . ENewType ; defConstructor = kClassNew . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew(). ; Definition at line 5310 of file TClass.cxx. ◆ operator=(). TClass & TClass::operator= ; (; const TClass & ; ). privatedelete . ◆ PostLoadCheck(). void TClass::PostLoadCheck ; (; ). virtual . Do the initialization that can only be done after the CINT dictionary has been fully populated and can not be delayed efficiently. ; Definition at line 5959 of file TClass.cxx. ◆ Property(). Long_t TClass::Property ; (; ); const. overridevirtual . Returns the properties of the TClass as a bit field stored as a Long_t value. ; The bit values used for the return value are defined in the enum EProperty (in TDictionary.h); Also sets TObject::fBits and fStreamerType to cache information about the class. The bits stored in TObject::fBits are kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; a#define a(i)Definition RSha256.hxx:99; TClass::Streamervoid Streamer(void *obj, TBuffer &b, const TClass *onfile_class=nullptr) constDefinition TClass.h:607; TClass::kStartWithTObject@ kStartWithTObjectDefinition TClass.h:103; TClass::kIsTObject@ kIsTObjectDefinition TClass.h:100; TClass::kIsForeign@ kIsForeignDefinition TClass.h:101; The value of fStreamerType are kTObject : the class inherits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulatedStreamer: the class is missing its shared library.; free#define freeDefinition civetweb.c:1539; TClass::kEmulatedStreamer@ kEmulatedStreamerDefinit",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:111676,Performance,load,loaded,111676," p. ; Definition at line 6767 of file TClass.cxx. ◆ ReadBuffer() [2/2]. Int_t TClass::ReadBuffer ; (; TBuffer & ; b, . void * ; pointer, . Int_t ; version, . UInt_t ; start, . UInt_t ; count . ). Function called by the Streamer functions to deserialize information from buffer b into object at p. ; This function assumes that the class version and the byte count information have been read.; version is the version number of the class; start is the starting position in the buffer b; count is the number of bytes for this object in the buffer . Definition at line 6758 of file TClass.cxx. ◆ ReadRules() [1/2]. Int_t TClass::ReadRules ; (; ). static . Read the class.rules files from the default location:. ; $ROOTSYS/etc/class.rules (or ROOTETCDIR/class.rules) ; Definition at line 1820 of file TClass.cxx. ◆ ReadRules() [2/2]. Int_t TClass::ReadRules ; (; const char * ; filename). static . Read a class.rules file which contains one rule per line with comment starting with a #. . Returns the number of rules loaded.; Returns -1 in case of error. . Definition at line 1844 of file TClass.cxx. ◆ RegisterAddressInRepository(). void TClass::RegisterAddressInRepository ; (; const char * ; where, . void * ; location, . const TClass * ; what . ); const. private . Definition at line 290 of file TClass.cxx. ◆ RegisterStreamerInfo(). void TClass::RegisterStreamerInfo ; (; TVirtualStreamerInfo * ; info). Register the StreamerInfo in the given slot, change the State of the TClass as appropriate. ; Definition at line 7296 of file TClass.cxx. ◆ RemoveClass(). void TClass::RemoveClass ; (; TClass * ; cl). static . static: Remove a class from the list and map of classes ; Definition at line 520 of file TClass.cxx. ◆ RemoveClassDeclId(). void TClass::RemoveClassDeclId ; (; TDictionary::DeclId_t ; id). static . Definition at line 536 of file TClass.cxx. ◆ RemoveStreamerInfo(). void TClass::RemoveStreamerInfo ; (; Int_t ; slot). Remove and delete the StreamerInfo in the given slot. ; Update the slo",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:112910,Performance,cache,caches,112910,"t . ); const. private . Definition at line 290 of file TClass.cxx. ◆ RegisterStreamerInfo(). void TClass::RegisterStreamerInfo ; (; TVirtualStreamerInfo * ; info). Register the StreamerInfo in the given slot, change the State of the TClass as appropriate. ; Definition at line 7296 of file TClass.cxx. ◆ RemoveClass(). void TClass::RemoveClass ; (; TClass * ; cl). static . static: Remove a class from the list and map of classes ; Definition at line 520 of file TClass.cxx. ◆ RemoveClassDeclId(). void TClass::RemoveClassDeclId ; (; TDictionary::DeclId_t ; id). static . Definition at line 536 of file TClass.cxx. ◆ RemoveStreamerInfo(). void TClass::RemoveStreamerInfo ; (; Int_t ; slot). Remove and delete the StreamerInfo in the given slot. ; Update the slot accordingly. ; Definition at line 7320 of file TClass.cxx. ◆ ReplaceWith(). void TClass::ReplaceWith ; (; TClass * ; newcl); const. Definition at line 4142 of file TClass.cxx. ◆ ResetCaches(). void TClass::ResetCaches ; (; ). To clean out all caches. ; Definition at line 4215 of file TClass.cxx. ◆ ResetClassInfo() [1/2]. void TClass::ResetClassInfo ; (; ). Make sure that the current ClassInfo is up to date. ; Definition at line 4180 of file TClass.cxx. ◆ ResetClassInfo() [2/2]. void TClass::ResetClassInfo ; (; Long_t ; tagnum). Make sure that the current ClassInfo is up to date. ; Definition at line 4172 of file TClass.cxx. ◆ ResetInstanceCount(). void TClass::ResetInstanceCount ; (; ). inline . Definition at line 547 of file TClass.h. ◆ ResetMenuList(). void TClass::ResetMenuList ; (; ). Resets the menu list to it's standard value. ; Definition at line 4243 of file TClass.cxx. ◆ SetCanSplit(). void TClass::SetCanSplit ; (; Int_t ; splitmode). Set the splitability of this class: . -1: Use the default calculation; 0: Disallow splitting; 1: Always allow splitting.; 2: Disallow splitting of the class and splitting of any it's derived classes. . Definition at line 5658 of file TClass.cxx. ◆ SetClassSize(). void TClass::Set",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:125197,Performance,load,loaded,125197,"istency. friend . Definition at line 87 of file TClass.h. ◆ ROOT::ResetClassVersion. void ROOT::ResetClassVersion ; (; TClass * ; , . const char * ; , . Short_t ;  . ). friend . ◆ ROOT::TGenericClassInfo. friend class ROOT::TGenericClassInfo. friend . Definition at line 85 of file TClass.h. ◆ TCling. friend class TCling. friend . Definition at line 83 of file TClass.h. ◆ TProtoClass. friend class TProtoClass. friend . Definition at line 86 of file TClass.h. ◆ TStreamerInfo. friend class TStreamerInfo. friend . Definition at line 88 of file TClass.h. Member Data Documentation. ◆ fAllPubData. TViewPubDataMembers* TClass::fAllPubData. private . Definition at line 209 of file TClass.h. ◆ fAllPubMethod. TViewPubFunctions* TClass::fAllPubMethod. private . Definition at line 210 of file TClass.h. ◆ fBase. std::atomic<TList*> TClass::fBase. private . Definition at line 201 of file TClass.h. ◆ fCanLoadClassInfo. std::atomic<Bool_t> TClass::fCanLoadClassInfo. mutableprivate . Whether info was loaded from a root pcm. ; Definition at line 260 of file TClass.h. ◆ fCanSplit. std::atomic<Char_t> TClass::fCanSplit. private . Definition at line 245 of file TClass.h. ◆ fCheckSum. std::atomic<UInt_t> TClass::fCheckSum. mutableprivate . Definition at line 219 of file TClass.h. ◆ fClassInfo. ClassInfo_t* TClass::fClassInfo. private . Definition at line 222 of file TClass.h. ◆ fClassMenuList. TList* TClass::fClassMenuList. mutableprivate . Definition at line 211 of file TClass.h. ◆ fClassProperty. Long_t TClass::fClassProperty. mutableprivate . Property See TClass::Property() for details. ; Definition at line 256 of file TClass.h. ◆ fClassVersion. Version_t TClass::fClassVersion. private . Definition at line 221 of file TClass.h. ◆ fCollectionProxy. TVirtualCollectionProxy* TClass::fCollectionProxy. private . Definition at line 220 of file TClass.h. ◆ fContextMenuTitle. TString TClass::fContextMenuTitle. private . Definition at line 223 of file TClass.h. ◆ fConversionStreamerInfo. ConvSIM",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:129543,Performance,cache,cached,129543,"Class.h. ◆ fInstanceCount. UInt_t TClass::fInstanceCount. private . Definition at line 217 of file TClass.h. ◆ fIsA. TVirtualIsAProxy* TClass::fIsA. private . Definition at line 229 of file TClass.h. ◆ fIsAMethod. std::atomic<TMethodCall*> TClass::fIsAMethod. mutableprivate . Definition at line 231 of file TClass.h. ◆ fIsOffsetStreamerSet. std::atomic<Bool_t> TClass::fIsOffsetStreamerSet. mutableprivate . Indicates whether the ClassInfo is supposed to be available. ; Definition at line 261 of file TClass.h. ◆ fIsSyntheticPair. Bool_t TClass::fIsSyntheticPair. private . Indicates whether this class can be split or not. Values are -1, 0, 1, 2. ; Indicates whether this class represents a pair and was not created from a dictionary nor interpreter info but has compiler compatible offset and size (and all the info is in the StreamerInfo per se) ; Definition at line 250 of file TClass.h. ◆ fLastReadInfo. std::atomic<TVirtualStreamerInfo*> TClass::fLastReadInfo. mutableprivate . cached current streamer info. ; Definition at line 279 of file TClass.h. ◆ fMerge. ROOT::MergeFunc_t TClass::fMerge. private . saved info to call a IsA member function ; Definition at line 233 of file TClass.h. ◆ fMethod. std::atomic<TListOfFunctions*> TClass::fMethod. private . Definition at line 207 of file TClass.h. ◆ fNew. ROOT::NewFunc_t TClass::fNew. private . Definition at line 235 of file TClass.h. ◆ fNewArray. ROOT::NewArrFunc_t TClass::fNewArray. private . Definition at line 236 of file TClass.h. ◆ fNoInfoOrEmuOrFwdDeclNameRegistry. TClass::TDeclNameRegistry TClass::fNoInfoOrEmuOrFwdDeclNameRegistry. staticprivate . Definition at line 328 of file TClass.h. ◆ fObjectVersionRepository. RepoCont_t TClass::fObjectVersionRepository. mutableprivate . Definition at line 344 of file TClass.h. ◆ fOffsetStreamer. Longptr_t TClass::fOffsetStreamer. mutableprivate . Properties that can only be evaluated at run-time. ; Definition at line 275 of file TClass.h. ◆ fOnHeap. UInt_t TClass::fOnHeap. private ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:131090,Performance,cache,cached,131090,gistry TClass::fNoInfoOrEmuOrFwdDeclNameRegistry. staticprivate . Definition at line 328 of file TClass.h. ◆ fObjectVersionRepository. RepoCont_t TClass::fObjectVersionRepository. mutableprivate . Definition at line 344 of file TClass.h. ◆ fOffsetStreamer. Longptr_t TClass::fOffsetStreamer. mutableprivate . Properties that can only be evaluated at run-time. ; Definition at line 275 of file TClass.h. ◆ fOnHeap. UInt_t TClass::fOnHeap. private . Definition at line 218 of file TClass.h. ◆ fOVRMutex. TVirtualMutex* TClass::fOVRMutex = nullptr. mutableprivate . Definition at line 342 of file TClass.h. ◆ fPersistentRef. std::atomic<TClass**> TClass::fPersistentRef. private . Definition at line 194 of file TClass.h. ◆ fProperty. std::atomic<Long_t> TClass::fProperty. mutableprivate . Definition at line 255 of file TClass.h. ◆ fRealData. TList* TClass::fRealData. private . Definition at line 200 of file TClass.h. ◆ fRefProxy. TVirtualRefProxy* TClass::fRefProxy. private . cached streamer info used in the last read. ; Definition at line 280 of file TClass.h. ◆ fResetAfterMerge. ROOT::ResetAfterMergeFunc_t TClass::fResetAfterMerge. private . Definition at line 234 of file TClass.h. ◆ fRuntimeProperties. std::atomic<UChar_t> TClass::fRuntimeProperties. mutableprivate . Definition at line 273 of file TClass.h. ◆ fSchemaRules. ROOT::Detail::TSchemaRuleSet* TClass::fSchemaRules. private . Pointer to reference proxy if this class represents a reference. ; Definition at line 281 of file TClass.h. ◆ fSharedLibs. TString TClass::fSharedLibs. private . Definition at line 227 of file TClass.h. ◆ fShowMembers. ShowMembersFunc_t TClass::fShowMembers. private . Definition at line 225 of file TClass.h. ◆ fSizeof. Int_t TClass::fSizeof. private . Definition at line 243 of file TClass.h. ◆ fState. EState TClass::fState. private . cached of the streaming method to use ; Definition at line 277 of file TClass.h. ◆ fStreamer. TClassStreamer* TClass::fStreamer. private . Definition at line 226 of,MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:131947,Performance,cache,cached,131947,e . Definition at line 200 of file TClass.h. ◆ fRefProxy. TVirtualRefProxy* TClass::fRefProxy. private . cached streamer info used in the last read. ; Definition at line 280 of file TClass.h. ◆ fResetAfterMerge. ROOT::ResetAfterMergeFunc_t TClass::fResetAfterMerge. private . Definition at line 234 of file TClass.h. ◆ fRuntimeProperties. std::atomic<UChar_t> TClass::fRuntimeProperties. mutableprivate . Definition at line 273 of file TClass.h. ◆ fSchemaRules. ROOT::Detail::TSchemaRuleSet* TClass::fSchemaRules. private . Pointer to reference proxy if this class represents a reference. ; Definition at line 281 of file TClass.h. ◆ fSharedLibs. TString TClass::fSharedLibs. private . Definition at line 227 of file TClass.h. ◆ fShowMembers. ShowMembersFunc_t TClass::fShowMembers. private . Definition at line 225 of file TClass.h. ◆ fSizeof. Int_t TClass::fSizeof. private . Definition at line 243 of file TClass.h. ◆ fState. EState TClass::fState. private . cached of the streaming method to use ; Definition at line 277 of file TClass.h. ◆ fStreamer. TClassStreamer* TClass::fStreamer. private . Definition at line 226 of file TClass.h. ◆ fStreamerFunc. ClassStreamerFunc_t TClass::fStreamerFunc. private . Definition at line 241 of file TClass.h. ◆ fStreamerImpl. std::atomic<StreamerImpl_t> TClass::fStreamerImpl. mutableprivate . Definition at line 287 of file TClass.h. ◆ fStreamerInfo. TObjArray* TClass::fStreamerInfo. mutableprivate . Definition at line 198 of file TClass.h. ◆ fStreamerType. Int_t TClass::fStreamerType. private . saved info to call Streamer ; Definition at line 276 of file TClass.h. ◆ fTypeInfo. const std::type_info* TClass::fTypeInfo. private . Definition at line 224 of file TClass.h. ◆ fUsingData. std::atomic<TListOfDataMembers*> TClass::fUsingData. private . Definition at line 203 of file TClass.h. ◆ fVersionUsed. std::atomic<Bool_t> TClass::fVersionUsed. mutableprivate . saved remember if fOffsetStreamer has been set. ; Definition at line 262 of file TClass.,MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:82442,Safety,safe,safe,82442,"o a subset of the methods in GetListOfMethods() so don't do GetListOfAllPublicMethods()->Delete(). Algorithm used to get the list is:; put all methods of the class in the list (also protected and private ones).; loop over all base classes and add only those methods not already in the list (also protected and private ones).; once finished, loop over resulting list and remove all private and protected methods. . Definition at line 3845 of file TClass.cxx. ◆ GetListOfBases(). TList * TClass::GetListOfBases ; (; ). Return list containing the TBaseClass(es) of a class. ; Definition at line 3636 of file TClass.cxx. ◆ GetListOfDataMembers(). TList * TClass::GetListOfDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of a class. ; Definition at line 3770 of file TClass.cxx. ◆ GetListOfEnums(). TList * TClass::GetListOfEnums ; (; Bool_t ; requestListLoading = kTRUE). Return a list containing the TEnums of a class. ; The list returned is safe to use from multiple thread without explicitly taking the ROOT global lock.; In the case the TClass represents a namespace, the returned list will implicit take the ROOT global lock upon any access (see TListOfEnumsWithLock); In the case the TClass represents a class or struct and requestListLoading is true, the list is immutable (and thus safe to access from multiple thread without taking the global lock at all).; In the case the TClass represents a class or struct and requestListLoading is false, the list is mutable and thus we return a TListOfEnumsWithLock which will implicit take the ROOT global lock upon any access. ; Definition at line 3686 of file TClass.cxx. ◆ GetListOfFunctionTemplates(). TList * TClass::GetListOfFunctionTemplates ; (; Bool_t ; load = kTRUE). Return TListOfFunctionTemplates for a class. ; Definition at line 3798 of file TClass.cxx. ◆ GetListOfMethodOverloads(). TCollection * TClass::GetListOfMethodOverloads ; (; const char * ; name); const. Return the collection of functions named """,MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:82789,Safety,safe,safe,82789,"ll base classes and add only those methods not already in the list (also protected and private ones).; once finished, loop over resulting list and remove all private and protected methods. . Definition at line 3845 of file TClass.cxx. ◆ GetListOfBases(). TList * TClass::GetListOfBases ; (; ). Return list containing the TBaseClass(es) of a class. ; Definition at line 3636 of file TClass.cxx. ◆ GetListOfDataMembers(). TList * TClass::GetListOfDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of a class. ; Definition at line 3770 of file TClass.cxx. ◆ GetListOfEnums(). TList * TClass::GetListOfEnums ; (; Bool_t ; requestListLoading = kTRUE). Return a list containing the TEnums of a class. ; The list returned is safe to use from multiple thread without explicitly taking the ROOT global lock.; In the case the TClass represents a namespace, the returned list will implicit take the ROOT global lock upon any access (see TListOfEnumsWithLock); In the case the TClass represents a class or struct and requestListLoading is true, the list is immutable (and thus safe to access from multiple thread without taking the global lock at all).; In the case the TClass represents a class or struct and requestListLoading is false, the list is mutable and thus we return a TListOfEnumsWithLock which will implicit take the ROOT global lock upon any access. ; Definition at line 3686 of file TClass.cxx. ◆ GetListOfFunctionTemplates(). TList * TClass::GetListOfFunctionTemplates ; (; Bool_t ; load = kTRUE). Return TListOfFunctionTemplates for a class. ; Definition at line 3798 of file TClass.cxx. ◆ GetListOfMethodOverloads(). TCollection * TClass::GetListOfMethodOverloads ; (; const char * ; name); const. Return the collection of functions named ""name"". ; Definition at line 3827 of file TClass.cxx. ◆ GetListOfMethods(). TList * TClass::GetListOfMethods ; (; Bool_t ; load = kTRUE). Return list containing the TMethods of a class. ; If load is true, the list is populat",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:117513,Safety,safe,safe,117513,"sA(). void TClass::SetGlobalIsA ; (; IsAGlobalFunc_t ; func). This function installs a global IsA function for this class. ; The global IsA function will be used if there is no local IsA function (fIsA); A global IsA function has the signature:; TClass *func( TClass *cl, const void *obj);; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; 'cl' is a pointer to the TClass object that corresponds to the 'pointer type' used to retrieve the value 'obj'; For example with: TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::TNamedTNamed()Definition TNamed.h:36; mTMarker mDefinition textangle.C:8; and the global IsA function would be called with TObject::Class() as the first parameter and the exact numerical value in the pointer 'o'.; In other word, inside the global IsA function. it is safe to C-style cast the value of 'obj' into a pointer to the class described by 'cl'. ; Definition at line 6300 of file TClass.cxx. ◆ SetImplFileName(). void TClass::SetImplFileName ; (; const char * ; implFileName). inline . Definition at line 560 of file TClass.h. ◆ SetLastReadInfo(). void TClass::SetLastReadInfo ; (; TVirtualStreamerInfo * ; info). inline . Definition at line 445 of file TClass.h. ◆ SetMemberStreamer(). void TClass::SetMemberStreamer ; (; const char * ; name, . MemberStreamerFunc_t ; strm . ). Install a new member streamer (p will be copied). ; Definition at line 6744 of file TClass.cxx. ◆ SetMerge(). void TClass::SetMerge ; (; ROOT::MergeFunc_t ; mergeFunc). Install a new wrapper around 'Merge'. ; Definition at line 6969 of file TClass.cxx. ◆ SetNew(). void TClass::SetNew ; (; ROOT::NewFunc_t ; newFunc). Install a new wrapper around 'new'. ; Definition at line 6985 of file TClass.cxx. ◆ SetNewArray(). void TClass::SetNewArray ; (; ROOT::NewArrFunc_t ; newArrayFunc). Install a new wrapper around 'new []'",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:2061,Security,access,access,2061,"ch is necessary to ROOT to perform I/O of instances of the class/struct it represents. The mechanisms 1., 2. and 3. are not mutually exclusive: it can happen that during the execution of the program, all the three are triggered, modifying the state of the TClass instance.; In order to retrieve a TClass instance from the type system, a query can be executed as follows through the static TClass::GetClass method:; auto myClassTClass_0 = TClass::GetClass(""myClass"");; auto myClassTClass_1 = TClass::GetClass<myClass>();; auto myClassTClass_2 = TClass::GetClass(myClassTypeInfo);; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:2968; The name of classes is crucial for ROOT. A careful procedure of name normalization is carried out for each and every class. A normalized name is a valid C++ class name. In order to access the name of a class within the ROOT type system, the method TClass::GetName() can be used. ; Definition at line 81 of file TClass.h. Classes; class  InsertTClassInRegistryRAII;  ; struct  ObjectPtr;  ; class  TDeclNameRegistry;  . Public Types; enum  ECheckSum { ;   kCurrentCheckSum = 0; , kNoEnum = 1; , kReflexNoComment = 2; , kNoRange = 3; , ;   kWithTypeDef = 4; , kReflex = 5; , kNoRangeCheck = 6; , kNoBaseCheckSum = 7; , ;   kLatestCheckSum = 8. };  ; enum  ENewType { kRealNew = 0; , kClassNew; , kDummyNew; };  ; enum  EState { ;   kNoInfo; , kForwardDeclared; , kEmulated; , kInterpreted; , ;   kHasTClassInit; , kLoaded = kHasTClassInit; , kNamespaceForMeta. };  ; enum  EStatusBits { ;   kReservedLoading = (1ULL << ( 7 )); , kHasLocalHashMember = (1ULL << ( 14 )); , kIgnoreTObjectStreamer = (1ULL << ( 15 )); , kUnloaded = (1ULL << ( 16 )); , ;   kIsTObject = (1ULL << ( 17 )); , kIsForeign = (1ULL << ( 18 )); , kStartWithTObject = (1ULL << ( 20 )); , kWarned = (1ULL << ( 21 )); , ;   kHasNameMapNode = (1ULL << ( 22 )",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:8599,Security,checksum,checksum,8599,"r delete[] for an array. ;  ; void Destructor (ObjectPtr obj, Bool_t dtorOnly=kFALSE);  Explicitly call destructor for object. ;  ; void Destructor (void *obj, Bool_t dtorOnly=kFALSE);  Explicitly call destructor for object. ;  ; void Draw (Option_t *option="""") override;  Draw detailed class inheritance structure. ;  ; void Dump () const override;  Dump contents of object on stdout. ;  ; void Dump (const void *obj, Bool_t noAddr=kFALSE) const;  Dump contents of object on stdout. ;  ; const void * DynamicCast (const TClass *base, const void *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; void * DynamicCast (const TClass *base, void *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; char * EscapeChars (const char *text) const;  Introduce an escape character (@) in front of a special chars. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const char *onfile_classname, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const TClass *onfile_cl, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindStreamerInfo (UInt_t checksum, Bool_t isTransient=kFALSE) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; TVirtualStreamerInfo * FindStreamerInfoAbstractEmulated (UInt_t checksum) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; void ForceReload (TClass *oldcl);  we found at least one equivalent. ;  ; TClass * GetActualClass (const void *object) const;  Return a pointer to the real class of t",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:8708,Security,checksum,checksum,8708,"r delete[] for an array. ;  ; void Destructor (ObjectPtr obj, Bool_t dtorOnly=kFALSE);  Explicitly call destructor for object. ;  ; void Destructor (void *obj, Bool_t dtorOnly=kFALSE);  Explicitly call destructor for object. ;  ; void Draw (Option_t *option="""") override;  Draw detailed class inheritance structure. ;  ; void Dump () const override;  Dump contents of object on stdout. ;  ; void Dump (const void *obj, Bool_t noAddr=kFALSE) const;  Dump contents of object on stdout. ;  ; const void * DynamicCast (const TClass *base, const void *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; void * DynamicCast (const TClass *base, void *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; char * EscapeChars (const char *text) const;  Introduce an escape character (@) in front of a special chars. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const char *onfile_classname, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const TClass *onfile_cl, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindStreamerInfo (UInt_t checksum, Bool_t isTransient=kFALSE) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; TVirtualStreamerInfo * FindStreamerInfoAbstractEmulated (UInt_t checksum) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; void ForceReload (TClass *oldcl);  we found at least one equivalent. ;  ; TClass * GetActualClass (const void *object) const;  Return a pointer to the real class of t",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:8829,Security,checksum,checksum,8829,"raw (Option_t *option="""") override;  Draw detailed class inheritance structure. ;  ; void Dump () const override;  Dump contents of object on stdout. ;  ; void Dump (const void *obj, Bool_t noAddr=kFALSE) const;  Dump contents of object on stdout. ;  ; const void * DynamicCast (const TClass *base, const void *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; void * DynamicCast (const TClass *base, void *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; char * EscapeChars (const char *text) const;  Introduce an escape character (@) in front of a special chars. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const char *onfile_classname, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const TClass *onfile_cl, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindStreamerInfo (UInt_t checksum, Bool_t isTransient=kFALSE) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; TVirtualStreamerInfo * FindStreamerInfoAbstractEmulated (UInt_t checksum) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; void ForceReload (TClass *oldcl);  we found at least one equivalent. ;  ; TClass * GetActualClass (const void *object) const;  Return a pointer to the real class of the object. ;  ; TClass * GetBaseClass (const char *classname);  Return pointer to the base class ""classname"". ;  ; TClass * GetBaseClass (const TClass *base);  Return pointer to the base class ""cl"". ;  ; Int_t GetBaseClassOffset (const",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:8944,Security,checksum,checksum,8944,"raw (Option_t *option="""") override;  Draw detailed class inheritance structure. ;  ; void Dump () const override;  Dump contents of object on stdout. ;  ; void Dump (const void *obj, Bool_t noAddr=kFALSE) const;  Dump contents of object on stdout. ;  ; const void * DynamicCast (const TClass *base, const void *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; void * DynamicCast (const TClass *base, void *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; char * EscapeChars (const char *text) const;  Introduce an escape character (@) in front of a special chars. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const char *onfile_classname, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const TClass *onfile_cl, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindStreamerInfo (UInt_t checksum, Bool_t isTransient=kFALSE) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; TVirtualStreamerInfo * FindStreamerInfoAbstractEmulated (UInt_t checksum) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; void ForceReload (TClass *oldcl);  we found at least one equivalent. ;  ; TClass * GetActualClass (const void *object) const;  Return a pointer to the real class of the object. ;  ; TClass * GetBaseClass (const char *classname);  Return pointer to the base class ""classname"". ;  ; TClass * GetBaseClass (const TClass *base);  Return pointer to the base class ""cl"". ;  ; Int_t GetBaseClassOffset (const",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:9030,Security,checksum,checksum,9030,"onst;  Dump contents of object on stdout. ;  ; const void * DynamicCast (const TClass *base, const void *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; void * DynamicCast (const TClass *base, void *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; char * EscapeChars (const char *text) const;  Introduce an escape character (@) in front of a special chars. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const char *onfile_classname, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const TClass *onfile_cl, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindStreamerInfo (UInt_t checksum, Bool_t isTransient=kFALSE) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; TVirtualStreamerInfo * FindStreamerInfoAbstractEmulated (UInt_t checksum) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; void ForceReload (TClass *oldcl);  we found at least one equivalent. ;  ; TClass * GetActualClass (const void *object) const;  Return a pointer to the real class of the object. ;  ; TClass * GetBaseClass (const char *classname);  Return pointer to the base class ""classname"". ;  ; TClass * GetBaseClass (const TClass *base);  Return pointer to the base class ""cl"". ;  ; Int_t GetBaseClassOffset (const TClass *toBase, void *address=nullptr, bool isDerivedObject=true);  ; TClass * GetBaseDataMember (const char *datamember);  Return pointer to (base) class that contains datamember. ;  ; UInt_t GetCheckSum ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:9143,Security,checksum,checksum,9143,"onst;  Dump contents of object on stdout. ;  ; const void * DynamicCast (const TClass *base, const void *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; void * DynamicCast (const TClass *base, void *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; char * EscapeChars (const char *text) const;  Introduce an escape character (@) in front of a special chars. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const char *onfile_classname, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const TClass *onfile_cl, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindStreamerInfo (UInt_t checksum, Bool_t isTransient=kFALSE) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; TVirtualStreamerInfo * FindStreamerInfoAbstractEmulated (UInt_t checksum) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; void ForceReload (TClass *oldcl);  we found at least one equivalent. ;  ; TClass * GetActualClass (const void *object) const;  Return a pointer to the real class of the object. ;  ; TClass * GetBaseClass (const char *classname);  Return pointer to the base class ""classname"". ;  ; TClass * GetBaseClass (const TClass *base);  Return pointer to the base class ""cl"". ;  ; Int_t GetBaseClassOffset (const TClass *toBase, void *address=nullptr, bool isDerivedObject=true);  ; TClass * GetBaseDataMember (const char *datamember);  Return pointer to (base) class that contains datamember. ;  ; UInt_t GetCheckSum ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:9222,Security,checksum,checksum,9222,"oid *obj, Bool_t up=kTRUE);  Cast obj of this class type up to baseclass cl if up is true. ;  ; char * EscapeChars (const char *text) const;  Introduce an escape character (@) in front of a special chars. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const char *onfile_classname, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindConversionStreamerInfo (const TClass *onfile_cl, UInt_t checksum) const;  Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ;  ; TVirtualStreamerInfo * FindStreamerInfo (UInt_t checksum, Bool_t isTransient=kFALSE) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; TVirtualStreamerInfo * FindStreamerInfoAbstractEmulated (UInt_t checksum) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; void ForceReload (TClass *oldcl);  we found at least one equivalent. ;  ; TClass * GetActualClass (const void *object) const;  Return a pointer to the real class of the object. ;  ; TClass * GetBaseClass (const char *classname);  Return pointer to the base class ""classname"". ;  ; TClass * GetBaseClass (const TClass *base);  Return pointer to the base class ""cl"". ;  ; Int_t GetBaseClassOffset (const TClass *toBase, void *address=nullptr, bool isDerivedObject=true);  ; TClass * GetBaseDataMember (const char *datamember);  Return pointer to (base) class that contains datamember. ;  ; UInt_t GetCheckSum (Bool_t &isvalid) const;  Return GetCheckSum(kCurrentCheckSum,isvalid);. ;  ; UInt_t GetCheckSum (ECheckSum code, Bool_t &isvalid) const;  Compute and/or return the class check sum. ;  ; UInt_t GetCheckSum (ECheckSum code=kCurrentCheckSum",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:11626,Security,access,accessor,11626," const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch);  Find the method with a given prototype. ;  ; Int_t GetClassSize () const;  ; Version_t GetClassVersion () const;  ; TVirtualCollectionProxy * GetCollectionProxy () const;  Return the proxy describing the collection (if any). ;  ; ROOT::ESTLType GetCollectionType () const;  Return the 'type' of the STL the TClass is representing. ;  ; const char * GetContextMenuTitle () const;  ; TVirtualStreamerInfo * GetConversionStreamerInfo (const char *onfile_classname, Int_t version) const;  Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. ;  ; TVirtualStreamerInfo * GetConversionStreamerInfo (const TClass *onfile_cl, Int_t version) const;  Return a Conversion StreamerInfo from the class represented by cl for version number 'version' to this class, if any. ;  ; ClassConvStreamerFunc_t GetConvStreamerFunc () const;  Get a wrapper/accessor function around this class custom conversion streamer (member function). ;  ; TVirtualStreamerInfo * GetCurrentStreamerInfo ();  ; TDataMember * GetDataMember (const char *datamember) const;  Return pointer to datamember object with name ""datamember"". ;  ; Longptr_t GetDataMemberOffset (const char *membername) const;  return offset for member name. ;  ; Short_t GetDeclFileLine () const;  ; const char * GetDeclFileName () const;  Return name of the file containing the declaration of this class. ;  ; ROOT::DelFunc_t GetDelete () const;  Return the wrapper around delete ThiObject. ;  ; ROOT::DelArrFunc_t GetDeleteArray () const;  Return the wrapper around delete [] ThiObject. ;  ; ROOT::DesFunc_t GetDestructor () const;  Return the wrapper around the destructor. ;  ; ROOT::DirAutoAdd_t GetDirectoryAutoAdd () const;  Return the wrapper around the directory auto add function. ;  ; TFunctionTemplate * GetFunctionTemplate (const char *name);  ; UInt_t GetHeapInstanceCount () const;  ; S",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:14036,Security,access,accessible,14036," its base classes. ;  ; const TList * GetListOfAllPublicMethods (Bool_t load=kTRUE);  Returns a list of all public methods of this class and its base classes. ;  ; TList * GetListOfBases ();  Return list containing the TBaseClass(es) of a class. ;  ; TList * GetListOfDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of a class. ;  ; TList * GetListOfEnums (Bool_t load=kTRUE);  Return a list containing the TEnums of a class. ;  ; TList * GetListOfFunctionTemplates (Bool_t load=kTRUE);  Return TListOfFunctionTemplates for a class. ;  ; TCollection * GetListOfMethodOverloads (const char *name) const;  Return the collection of functions named ""name"". ;  ; TList * GetListOfMethods (Bool_t load=kTRUE);  Return list containing the TMethods of a class. ;  ; TList * GetListOfRealData () const;  ; TList * GetListOfUsingDataMembers (Bool_t load=kTRUE);  Return list containing the TDataMembers of using declarations of a class. ;  ; void GetMenuItems (TList *listitems);  Returns list of methods accessible by context menu. ;  ; TList * GetMenuList () const;  Return the list of menu items associated with the class. ;  ; ROOT::MergeFunc_t GetMerge () const;  Return the wrapper around Merge. ;  ; TMethod * GetMethod (const char *method, const char *params, Bool_t objectIsConst=kFALSE);  Find the best method (if there is one) matching the parameters. ;  ; TMethod * GetMethodAllAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodAny (const char *method);  Return pointer to method without looking at parameters. ;  ; TMethod * GetMethodWithPrototype (const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch);  Find the method with a given prototype. ;  ; void GetMissingDictionaries (THashTable &result, bool recurse=false);  Get the classes that have a missing dictionary starting from this one. ;  ; Int_t GetNdata ();  Return the number of data mem",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:16365,Security,access,accessor,16365,"ds of this class Note that in case the list of methods is not yet created, it will be done by GetListOfMethods(). ;  ; TClass *const * GetPersistentRef () const;  ; TRealData * GetRealData (const char *name) const;  Return pointer to TRealData element with name ""name"". ;  ; TVirtualRefProxy * GetReferenceProxy () const;  ; ROOT::ResetAfterMergeFunc_t GetResetAfterMerge () const;  Return the wrapper around Merge. ;  ; const ROOT::Detail::TSchemaRuleSet * GetSchemaRules () const;  Return the set of the schema rules if any. ;  ; ROOT::Detail::TSchemaRuleSet * GetSchemaRules (Bool_t create=kFALSE);  Return the set of the schema rules if any. ;  ; const char * GetSharedLibs ();  Get the list of shared libraries containing the code for class cls. ;  ; ShowMembersFunc_t GetShowMembersWrapper () const;  ; EState GetState () const;  ; TClassStreamer * GetStreamer () const;  Return the Streamer Class allowing streaming (if any). ;  ; ClassStreamerFunc_t GetStreamerFunc () const;  Get a wrapper/accessor function around this class custom streamer (member function). ;  ; TVirtualStreamerInfo * GetStreamerInfo (Int_t version=0, Bool_t isTransient=kFALSE) const;  returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ;  ; TVirtualStreamerInfo * GetStreamerInfoAbstractEmulated (Int_t version=0) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; const TObjArray * GetStreamerInfos () const;  ; const std::type_info * GetTypeInfo () const;  ; Bool_t HasConsistentHashMember ();  Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ;  ; Bool_t HasCustomStreamerMember () const;  The class has a Streamer method and it is implem",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:17568,Security,access,access,17568," const;  returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ;  ; TVirtualStreamerInfo * GetStreamerInfoAbstractEmulated (Int_t version=0) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; const TObjArray * GetStreamerInfos () const;  ; const std::type_info * GetTypeInfo () const;  ; Bool_t HasConsistentHashMember ();  Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ;  ; Bool_t HasCustomStreamerMember () const;  The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ;  ; Bool_t HasDataMemberInfo () const;  ; Bool_t HasDefaultConstructor (Bool_t testio=kFALSE) const;  Return true if we have access to a constructor usable for I/O. ;  ; Bool_t HasDictionary () const;  Check whether a class has a dictionary or not. ;  ; Bool_t HasInterpreterInfo () const;  ; Bool_t HasInterpreterInfoInMemory () const;  ; Bool_t HasLocalHashMember () const;  Returns true if this class has an definition and/or overload of the member function Hash. ;  ; void IgnoreTObjectStreamer (Bool_t ignore=kTRUE);  When the class kIgnoreTObjectStreamer bit is set, the automatically generated Streamer will not call TObject::Streamer. ;  ; Bool_t InheritsFrom (const char *cl) const override;  Return kTRUE if this class inherits from a class with name ""classname"". ;  ; Bool_t InheritsFrom (const TClass *cl) const override;  Return kTRUE if this class inherits from class cl. ;  ; void InterpretedShowMembers (void *obj, TMemberInspector &insp, Bool_t isTransient);  Do a ShowMembers() traversal of all members and base classes' members using the reflection information f",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:19599,Security,checksum,checksum,19599,"ntains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsFolder (void *obj) const;  Return kTRUE if the class has elements. ;  ; Bool_t IsForeign () const;  Return kTRUE is the class is Foreign (the class does not have a Streamer method). ;  ; Bool_t IsLoaded () const;  Return true if the shared library of this class is currently in the a process's memory. ;  ; Bool_t IsStartingWithTObject () const;  Returns true if this class inherits from TObject and if the start of the TObject parts is at the very beginning of the objects. ;  ; Bool_t IsSyntheticPair () const;  ; Bool_t IsTObject () const;  Return kTRUE is the class inherits from TObject. ;  ; Bool_t IsVersioned () const;  ; void ls (Option_t *opt="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void MakeCustomMenuList ();  Makes a customizable version of the popup menu list, i.e. ;  ; Bool_t MatchLegacyCheckSum (UInt_t checksum) const;  Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ;  ; void Move (void *arenaFrom, void *arenaTo) const;  Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ;  ; void * New (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; void * NewArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObject (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  ; ObjectPtr NewObject (void *arena, ENewType defConstructor=kC",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:19636,Security,checksum,checksum,19636,"ntains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsFolder (void *obj) const;  Return kTRUE if the class has elements. ;  ; Bool_t IsForeign () const;  Return kTRUE is the class is Foreign (the class does not have a Streamer method). ;  ; Bool_t IsLoaded () const;  Return true if the shared library of this class is currently in the a process's memory. ;  ; Bool_t IsStartingWithTObject () const;  Returns true if this class inherits from TObject and if the start of the TObject parts is at the very beginning of the objects. ;  ; Bool_t IsSyntheticPair () const;  ; Bool_t IsTObject () const;  Return kTRUE is the class inherits from TObject. ;  ; Bool_t IsVersioned () const;  ; void ls (Option_t *opt="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void MakeCustomMenuList ();  Makes a customizable version of the popup menu list, i.e. ;  ; Bool_t MatchLegacyCheckSum (UInt_t checksum) const;  Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ;  ; void Move (void *arenaFrom, void *arenaTo) const;  Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ;  ; void * New (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; void * NewArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObject (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  ; ObjectPtr NewObject (void *arena, ENewType defConstructor=kC",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:19678,Security,checksum,checksum,19678,"ntains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsFolder (void *obj) const;  Return kTRUE if the class has elements. ;  ; Bool_t IsForeign () const;  Return kTRUE is the class is Foreign (the class does not have a Streamer method). ;  ; Bool_t IsLoaded () const;  Return true if the shared library of this class is currently in the a process's memory. ;  ; Bool_t IsStartingWithTObject () const;  Returns true if this class inherits from TObject and if the start of the TObject parts is at the very beginning of the objects. ;  ; Bool_t IsSyntheticPair () const;  ; Bool_t IsTObject () const;  Return kTRUE is the class inherits from TObject. ;  ; Bool_t IsVersioned () const;  ; void ls (Option_t *opt="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void MakeCustomMenuList ();  Makes a customizable version of the popup menu list, i.e. ;  ; Bool_t MatchLegacyCheckSum (UInt_t checksum) const;  Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ;  ; void Move (void *arenaFrom, void *arenaTo) const;  Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ;  ; void * New (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; void * NewArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObject (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  ; ObjectPtr NewObject (void *arena, ENewType defConstructor=kC",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:19715,Security,checksum,checksum,19715,"ntains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsFolder (void *obj) const;  Return kTRUE if the class has elements. ;  ; Bool_t IsForeign () const;  Return kTRUE is the class is Foreign (the class does not have a Streamer method). ;  ; Bool_t IsLoaded () const;  Return true if the shared library of this class is currently in the a process's memory. ;  ; Bool_t IsStartingWithTObject () const;  Returns true if this class inherits from TObject and if the start of the TObject parts is at the very beginning of the objects. ;  ; Bool_t IsSyntheticPair () const;  ; Bool_t IsTObject () const;  Return kTRUE is the class inherits from TObject. ;  ; Bool_t IsVersioned () const;  ; void ls (Option_t *opt="""") const override;  The ls function lists the contents of a class on stdout. ;  ; void MakeCustomMenuList ();  Makes a customizable version of the popup menu list, i.e. ;  ; Bool_t MatchLegacyCheckSum (UInt_t checksum) const;  Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ;  ; void Move (void *arenaFrom, void *arenaTo) const;  Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ;  ; void * New (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; void * NewArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObject (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  ; ObjectPtr NewObject (void *arena, ENewType defConstructor=kC",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:22764,Security,access,accessor,22764,"gister the StreamerInfo in the given slot, change the State of the TClass as appropriate. ;  ; void RemoveStreamerInfo (Int_t slot);  Remove and delete the StreamerInfo in the given slot. ;  ; void ReplaceWith (TClass *newcl) const;  ; void ResetCaches ();  To clean out all caches. ;  ; void ResetClassInfo ();  Make sure that the current ClassInfo is up to date. ;  ; void ResetClassInfo (Long_t tagnum);  Make sure that the current ClassInfo is up to date. ;  ; void ResetInstanceCount ();  ; void ResetMenuList ();  Resets the menu list to it's standard value. ;  ; void SetCanSplit (Int_t splitmode);  Set the splitability of this class: ;  ; void SetCollectionProxy (const ROOT::Detail::TCollectionProxyInfo &);  Create the collection proxy object (and the streamer object) from using the information in the TCollectionProxyInfo. ;  ; void SetContextMenuTitle (const char *title);  Change (i.e. set) the title of the TNamed. ;  ; void SetConvStreamerFunc (ClassConvStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom conversion streamer. ;  ; void SetCurrentStreamerInfo (TVirtualStreamerInfo *info);  Set pointer to current TVirtualStreamerInfo. ;  ; void SetDeclFile (const char *name, Short_t line);  ; void SetDelete (ROOT::DelFunc_t deleteFunc);  Install a new wrapper around 'delete'. ;  ; void SetDeleteArray (ROOT::DelArrFunc_t deleteArrayFunc);  Install a new wrapper around 'delete []'. ;  ; void SetDestructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:24212,Security,access,accessor,24212,"tructor (ROOT::DesFunc_t destructorFunc);  Install a new wrapper around the destructor. ;  ; void SetDirectoryAutoAdd (ROOT::DirAutoAdd_t dirAutoAddFunc);  Install a new wrapper around the directory auto add function. ;  ; void SetGlobalIsA (IsAGlobalFunc_t);  This function installs a global IsA function for this class. ;  ; void SetImplFileName (const char *implFileName);  ; void SetLastReadInfo (TVirtualStreamerInfo *info);  ; void SetMemberStreamer (const char *name, MemberStreamerFunc_t strm);  Install a new member streamer (p will be copied). ;  ; void SetMerge (ROOT::MergeFunc_t mergeFunc);  Install a new wrapper around 'Merge'. ;  ; void SetNew (ROOT::NewFunc_t newFunc);  Install a new wrapper around 'new'. ;  ; void SetNewArray (ROOT::NewArrFunc_t newArrayFunc);  Install a new wrapper around 'new []'. ;  ; void SetResetAfterMerge (ROOT::ResetAfterMergeFunc_t resetFunc);  Install a new wrapper around 'ResetAfterMerge'. ;  ; void SetStreamerFunc (ClassStreamerFunc_t strm);  Set a wrapper/accessor function around this class custom streamer. ;  ; TVirtualStreamerInfo * SetStreamerInfo (Int_t version, const char *info="""");  Info is a string describing the names and types of attributes written by the class Streamer function. ;  ; void SetUnloaded ();  Call this method to indicate that the shared library containing this class's code has been removed (unloaded) from the process's memory. ;  ; Int_t Size () const;  Return size of object of this class. ;  ; void Store (TBuffer &b) const;  Store class description on I/O buffer. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void Streamer (void *obj, TBuffer &b, const TClass *onfile_class=nullptr) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t WriteBuffer (TBuffer &b, void *pointer, const char *info="""");  Function called by the Streamer functions to serialize object at p to buffer b. ;  ;  Public Member Functions inherited from TDictionary;  TDictionar",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:26524,Security,hash,hash,26524," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:37409,Security,checksum,checksum,37409,"TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; TVirtualStreamerInfo * FindStreamerInfo (TObjArray *arr, UInt_t checksum) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; void GetMissingDictionariesForBaseClasses (TCollection &result, TCollection &visited, bool recurse);  Verify the base classes always. ;  ; void GetMissingDictionariesForMembers (TCollection &result, TCollection &visited, bool recurse);  Verify the Data Members. ;  ; void GetMissingDictionariesForPairElements (TCollection &result, TCollection &visited, bool recurse);  ; void GetMissingDictionariesWithRecursionCheck (TCollection &result, TCollection &visited, bool recurse);  From the second level of recursion onwards it is different state check. ;  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:37495,Security,checksum,checksum,37495,"TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; TVirtualStreamerInfo * FindStreamerInfo (TObjArray *arr, UInt_t checksum) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; void GetMissingDictionariesForBaseClasses (TCollection &result, TCollection &visited, bool recurse);  Verify the base classes always. ;  ; void GetMissingDictionariesForMembers (TCollection &result, TCollection &visited, bool recurse);  Verify the Data Members. ;  ; void GetMissingDictionariesForPairElements (TCollection &result, TCollection &visited, bool recurse);  ; void GetMissingDictionariesWithRecursionCheck (TCollection &result, TCollection &visited, bool recurse);  From the second level of recursion onwards it is different state check. ;  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:49335,Security,access,access,49335," GetClassVersion has been called. . EnumeratorkNotInitialized ; kSet ; kConsistentHash . Definition at line 264 of file TClass.h. ◆ EState. enum TClass::EState. EnumeratorkNoInfo ; kForwardDeclared ; kEmulated ; kInterpreted ; kHasTClassInit ; kLoaded ; kNamespaceForMeta . Definition at line 121 of file TClass.h. ◆ EStatusBits. enum TClass::EStatusBits. EnumeratorkReservedLoading ; kHasLocalHashMember ; kIgnoreTObjectStreamer ; kUnloaded ; kIsTObject ; kIsForeign ; kStartWithTObject ; kWarned ; kHasNameMapNode . Definition at line 92 of file TClass.h. ◆ EStreamerType. enum TClass::EStreamerType. private . EnumeratorkDefault ; kEmulatedStreamer ; kTObject ; kInstrumented ; kForeign ; kExternal . Definition at line 334 of file TClass.h. Constructor & Destructor Documentation. ◆ TClass() [1/8]. TClass::TClass ; (; const TClass & ; tc). privatedelete . ◆ TClass() [2/8]. TClass::TClass ; (; ). Internal, default constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1065 of file TClass.cxx. ◆ TClass() [3/8]. TClass::TClass ; (; const char * ; name, . Bool_t ; silent = kFALSE . ). Create a TClass object. ; This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Only useful to get a temporary TClass interface to an interpreted class. Used by TTabCom.; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1103 of file TClass.cxx. ◆ TClass() [4/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1151 of file TClass.cxx. ◆ TClass() [5/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . EState ; theState, . Bool_t ; silent = kFALSE . ). Internal c",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:49839,Security,access,access,49839,"NameMapNode . Definition at line 92 of file TClass.h. ◆ EStreamerType. enum TClass::EStreamerType. private . EnumeratorkDefault ; kEmulatedStreamer ; kTObject ; kInstrumented ; kForeign ; kExternal . Definition at line 334 of file TClass.h. Constructor & Destructor Documentation. ◆ TClass() [1/8]. TClass::TClass ; (; const TClass & ; tc). privatedelete . ◆ TClass() [2/8]. TClass::TClass ; (; ). Internal, default constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1065 of file TClass.cxx. ◆ TClass() [3/8]. TClass::TClass ; (; const char * ; name, . Bool_t ; silent = kFALSE . ). Create a TClass object. ; This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Only useful to get a temporary TClass interface to an interpreted class. Used by TTabCom.; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1103 of file TClass.cxx. ◆ TClass() [4/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1151 of file TClass.cxx. ◆ TClass() [5/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . EState ; theState, . Bool_t ; silent = kFALSE . ). Internal constructor, mimicing the case of a class fwd declared in the interpreter. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1179 of file TClass.cxx. ◆ TClass() [6/8]. TClass::TClass ; (; ClassInfo_t * ; classInfo, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; Create a TClass object. This object contains the full ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:50116,Security,access,access,50116,"on. ◆ TClass() [1/8]. TClass::TClass ; (; const TClass & ; tc). privatedelete . ◆ TClass() [2/8]. TClass::TClass ; (; ). Internal, default constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1065 of file TClass.cxx. ◆ TClass() [3/8]. TClass::TClass ; (; const char * ; name, . Bool_t ; silent = kFALSE . ). Create a TClass object. ; This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Only useful to get a temporary TClass interface to an interpreted class. Used by TTabCom.; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1103 of file TClass.cxx. ◆ TClass() [4/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1151 of file TClass.cxx. ◆ TClass() [5/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . EState ; theState, . Bool_t ; silent = kFALSE . ). Internal constructor, mimicing the case of a class fwd declared in the interpreter. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1179 of file TClass.cxx. ◆ TClass() [6/8]. TClass::TClass ; (; ClassInfo_t * ; classInfo, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; Create a TClass object. This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Most useful to get a TClass interface to an interpreted class. Used by TTabCom.; This copies the ClassInfo (i.e. does not take ownership of it).; No",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:50476,Security,access,access,50476,"; silent = kFALSE . ). Create a TClass object. ; This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Only useful to get a temporary TClass interface to an interpreted class. Used by TTabCom.; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1103 of file TClass.cxx. ◆ TClass() [4/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1151 of file TClass.cxx. ◆ TClass() [5/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . EState ; theState, . Bool_t ; silent = kFALSE . ). Internal constructor, mimicing the case of a class fwd declared in the interpreter. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1179 of file TClass.cxx. ◆ TClass() [6/8]. TClass::TClass ; (; ClassInfo_t * ; classInfo, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; Create a TClass object. This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Most useful to get a TClass interface to an interpreted class. Used by TTabCom.; This copies the ClassInfo (i.e. does not take ownership of it).; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1224 of file TClass.cxx. ◆ TClass() [7/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor.",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:51175,Security,access,access,51175,"TClass.cxx. ◆ TClass() [5/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . EState ; theState, . Bool_t ; silent = kFALSE . ). Internal constructor, mimicing the case of a class fwd declared in the interpreter. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1179 of file TClass.cxx. ◆ TClass() [6/8]. TClass::TClass ; (; ClassInfo_t * ; classInfo, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; Create a TClass object. This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Most useful to get a TClass interface to an interpreted class. Used by TTabCom.; This copies the ClassInfo (i.e. does not take ownership of it).; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1224 of file TClass.cxx. ◆ TClass() [7/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1275 of file TClass.cxx. ◆ TClass() [8/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1304 of file TClass.cxx. ◆ ~TClass(). TClass::~TClass ; (; ). virtual . TClass dtor. Deletes all list that might have been created. ; Definition at line 1660 of file TClass.cxx. Memb",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:51540,Security,access,access,51540,"s.cxx. ◆ TClass() [6/8]. TClass::TClass ; (; ClassInfo_t * ; classInfo, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; Create a TClass object. This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Most useful to get a TClass interface to an interpreted class. Used by TTabCom.; This copies the ClassInfo (i.e. does not take ownership of it).; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1224 of file TClass.cxx. ◆ TClass() [7/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1275 of file TClass.cxx. ◆ TClass() [8/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1304 of file TClass.cxx. ◆ ~TClass(). TClass::~TClass ; (; ). virtual . TClass dtor. Deletes all list that might have been created. ; Definition at line 1660 of file TClass.cxx. Member Function Documentation. ◆ AddClass(). void TClass::AddClass ; (; TClass * ; cl). static . static: Add a class to the list and map of classes. ; Definition at line 494 of file TClass.cxx. ◆ AddClassToDeclIdMap(). void TClass::AddClassToDeclIdMap ; (; TDictionary::DeclId_t ; id, . TClass * ; cl . ). static . static: Add a TClass* to the map of classes. ; Defini",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:51948,Security,access,access,51948,"ne TClass object. Most useful to get a TClass interface to an interpreted class. Used by TTabCom.; This copies the ClassInfo (i.e. does not take ownership of it).; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1224 of file TClass.cxx. ◆ TClass() [7/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1275 of file TClass.cxx. ◆ TClass() [8/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1304 of file TClass.cxx. ◆ ~TClass(). TClass::~TClass ; (; ). virtual . TClass dtor. Deletes all list that might have been created. ; Definition at line 1660 of file TClass.cxx. Member Function Documentation. ◆ AddClass(). void TClass::AddClass ; (; TClass * ; cl). static . static: Add a class to the list and map of classes. ; Definition at line 494 of file TClass.cxx. ◆ AddClassToDeclIdMap(). void TClass::AddClassToDeclIdMap ; (; TDictionary::DeclId_t ; id, . TClass * ; cl . ). static . static: Add a TClass* to the map of classes. ; Definition at line 511 of file TClass.cxx. ◆ AddImplFile(). void TClass::AddImplFile ; (; const char * ; filename, . int ; line . ). Definition at line 1952 of file TClass.cxx. ◆ AddInstance(). void TClass::AddInstance ; (; Bool_t ; heap = kFALSE). inline . Definition at line 381 of file TClass.h. ◆ AddRule(). Bool_t TClass::AddRule ; (; const char * ; rule). static . Add a schema evolution customization rule. ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:53094,Security,checksum,checksum,53094,"or. Deletes all list that might have been created. ; Definition at line 1660 of file TClass.cxx. Member Function Documentation. ◆ AddClass(). void TClass::AddClass ; (; TClass * ; cl). static . static: Add a class to the list and map of classes. ; Definition at line 494 of file TClass.cxx. ◆ AddClassToDeclIdMap(). void TClass::AddClassToDeclIdMap ; (; TDictionary::DeclId_t ; id, . TClass * ; cl . ). static . static: Add a TClass* to the map of classes. ; Definition at line 511 of file TClass.cxx. ◆ AddImplFile(). void TClass::AddImplFile ; (; const char * ; filename, . int ; line . ). Definition at line 1952 of file TClass.cxx. ◆ AddInstance(). void TClass::AddInstance ; (; Bool_t ; heap = kFALSE). inline . Definition at line 381 of file TClass.h. ◆ AddRule(). Bool_t TClass::AddRule ; (; const char * ; rule). static . Add a schema evolution customization rule. ; The syntax of the rule can be either the short form: [type=Read] classname membername [attributes=... ] [version=[...] ] [checksum=[...] ] [oldtype=...] [code={...}]; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; TObject::Readvirtual Int_t Read(const char *name)Read contents of object with specified name from the current directory.Definiti",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:54314,Security,checksum,checksum,54314,"angle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; TObject::Readvirtual Int_t Read(const char *name)Read contents of object with specified name from the current directory.Definition TObject.cxx:648; or the long form [type=Read] sourceClass=classname [targetclass=newClassname] [ source=""type membername; [type2 membername2]"" ]; [target=""membername3;membername4""] [attributes=... ] [version=...] [checksum=...] [code={...}|functionname]; targetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t targetDefinition TGWin32VirtualXProxy.cxx:247; For example to set HepMC::GenVertex::m_event to not owned the object it is pointing to: HepMC::GenVertex m_event attributes=NotOwner; Semantic ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:56108,Security,checksum,checksum,56108,"argetDefinition TGWin32VirtualXProxy.cxx:247; For example to set HepMC::GenVertex::m_event to not owned the object it is pointing to: HepMC::GenVertex m_event attributes=NotOwner; Semantic of the tags:; type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; sourceClass : the name of the class as it is on the rule file; targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; source : the types and names of the data members from the class on file that are needed, the list is separated by semi-colons ';'; oldtype: in the short form only, indicates the type on disk of the data member.; target : the names of the data members updated by this rule, the list is separated by semi-colons ';'; attributes : list of possible qualifiers among: Owner, NotOwner; version : list of the version of the class layout that this rule applies to. The syntax can be [1,4,5] or [2-] or [1-3] or [-3]; checksum : comma delimited list of the checksums of the class layout that this rule applies to.; code={...} : code to be executed for the rule or name of the function implementing it. . Definition at line 1890 of file TClass.cxx. ◆ AdoptMemberStreamer(). void TClass::AdoptMemberStreamer ; (; const char * ; name, . TMemberStreamer * ; strm . ). Adopt the TMemberStreamer pointer to by p and use it to Stream non basic member name. ; Definition at line 6703 of file TClass.cxx. ◆ AdoptReferenceProxy(). void TClass::AdoptReferenceProxy ; (; TVirtualRefProxy * ; proxy). Adopt the Reference proxy pointer to indicate that this class represents a reference. ; When a new proxy is adopted, the old one is deleted. ; Definition at line 6685 of file TClass.cxx. ◆ AdoptSchemaRules(). void TClass::AdoptSchemaRules ; (; ROOT::Detail::TSchemaRuleSet * ; rules). Adopt a new set of Data Model Evolution rules. ; Definition at line 1920 of file TClass.cxx. ◆ AdoptStreamer(). void TClass::AdoptStreamer ; (; TClassStreamer * ; str",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:56147,Security,checksum,checksums,56147,"argetDefinition TGWin32VirtualXProxy.cxx:247; For example to set HepMC::GenVertex::m_event to not owned the object it is pointing to: HepMC::GenVertex m_event attributes=NotOwner; Semantic of the tags:; type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; sourceClass : the name of the class as it is on the rule file; targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; source : the types and names of the data members from the class on file that are needed, the list is separated by semi-colons ';'; oldtype: in the short form only, indicates the type on disk of the data member.; target : the names of the data members updated by this rule, the list is separated by semi-colons ';'; attributes : list of possible qualifiers among: Owner, NotOwner; version : list of the version of the class layout that this rule applies to. The syntax can be [1,4,5] or [2-] or [1-3] or [-3]; checksum : comma delimited list of the checksums of the class layout that this rule applies to.; code={...} : code to be executed for the rule or name of the function implementing it. . Definition at line 1890 of file TClass.cxx. ◆ AdoptMemberStreamer(). void TClass::AdoptMemberStreamer ; (; const char * ; name, . TMemberStreamer * ; strm . ). Adopt the TMemberStreamer pointer to by p and use it to Stream non basic member name. ; Definition at line 6703 of file TClass.cxx. ◆ AdoptReferenceProxy(). void TClass::AdoptReferenceProxy ; (; TVirtualRefProxy * ; proxy). Adopt the Reference proxy pointer to indicate that this class represents a reference. ; When a new proxy is adopted, the old one is deleted. ; Definition at line 6685 of file TClass.cxx. ◆ AdoptSchemaRules(). void TClass::AdoptSchemaRules ; (; ROOT::Detail::TSchemaRuleSet * ; rules). Adopt a new set of Data Model Evolution rules. ; Definition at line 1920 of file TClass.cxx. ◆ AdoptStreamer(). void TClass::AdoptStreamer ; (; TClassStreamer * ; str",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:58808,Security,access,access,58808,", . TBrowser * ; b . ); const. Browse objects of of the class described by this TClass object. ; Definition at line 1978 of file TClass.cxx. ◆ BuildEmulatedRealData(). void TClass::BuildEmulatedRealData ; (; const char * ; name, . Longptr_t ; offset, . TClass * ; cl, . Bool_t ; isTransient = kFALSE . ). Build the list of real data for an emulated class. ; Definition at line 2112 of file TClass.cxx. ◆ BuildRealData(). void TClass::BuildRealData ; (; void * ; pointer = nullptr, . Bool_t ; isTransient = kFALSE . ). Build a full list of persistent data members. ; Scans the list of all data members in the class itself and also in all base classes. For each persistent data member, inserts a TRealData object in the list fRealData. ; Definition at line 2031 of file TClass.cxx. ◆ CalculateStreamerOffset(). void TClass::CalculateStreamerOffset ; (; ); const. Calculate the offset between an object of this class to its base class TObject. ; The pointer can be adjusted by that offset to access any virtual method of TObject like Streamer() and ShowMembers(). ; Definition at line 2183 of file TClass.cxx. ◆ CallShowMembers(). Bool_t TClass::CallShowMembers ; (; const void * ; obj, . TMemberInspector & ; insp, . Bool_t ; isTransient = kFALSE . ); const. Call ShowMembers() on the obj of this class type, passing insp and parent. ; isATObject is -1 if unknown, 0 if it is not a TObject, and 1 if it is a TObject. The function returns whether it was able to call ShowMembers(). ; Definition at line 2205 of file TClass.cxx. ◆ CanIgnoreTObjectStreamer(). Bool_t TClass::CanIgnoreTObjectStreamer ; (; ). inline . Definition at line 393 of file TClass.h. ◆ CanSplit(). Bool_t TClass::CanSplit ; (; ); const. Return true if the data member of this TClass can be saved separately. ; Definition at line 2319 of file TClass.cxx. ◆ CanSplitBaseAllow(). Bool_t TClass::CanSplitBaseAllow ; (; ). private . Pointer to the function implementing streaming for this class. ; Definition at line 2247 of file TClass",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:67026,Security,checksum,checksum,67026,"* TClass::DynamicCast ; (; const TClass * ; cl, . void * ; obj, . Bool_t ; up = kTRUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 4915 of file TClass.cxx. ◆ EscapeChars(). char * TClass::EscapeChars ; (; const char * ; text); const. Introduce an escape character (@) in front of a special chars. ; You need to use the result immediately before it is being overwritten. ; Definition at line 2568 of file TClass.cxx. ◆ FindClassOrBaseMethodWithId(). TMethod * TClass::FindClassOrBaseMethodWithId ; (; DeclId_t ; faddr). private . Find a method with decl id in this class or its bases. ; Definition at line 4440 of file TClass.cxx. ◆ FindConversionStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const char * ; onfile_classname, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ; Definition at line 7193 of file TClass.cxx. ◆ FindConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const TClass * ; onfile_cl, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ; Definition at line 7204 of file TClass.cxx. ◆ FindStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7066 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos correspon",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:67138,Security,checksum,checksum,67138,"RUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 4915 of file TClass.cxx. ◆ EscapeChars(). char * TClass::EscapeChars ; (; const char * ; text); const. Introduce an escape character (@) in front of a special chars. ; You need to use the result immediately before it is being overwritten. ; Definition at line 2568 of file TClass.cxx. ◆ FindClassOrBaseMethodWithId(). TMethod * TClass::FindClassOrBaseMethodWithId ; (; DeclId_t ; faddr). private . Find a method with decl id in this class or its bases. ; Definition at line 4440 of file TClass.cxx. ◆ FindConversionStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const char * ; onfile_classname, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ; Definition at line 7193 of file TClass.cxx. ◆ FindConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const TClass * ; onfile_cl, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ; Definition at line 7204 of file TClass.cxx. ◆ FindStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7066 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7036 of file TClass.cxx. ◆ FindStreamerInfo",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:67357,Security,checksum,checksum,67357,"n). ; Definition at line 4915 of file TClass.cxx. ◆ EscapeChars(). char * TClass::EscapeChars ; (; const char * ; text); const. Introduce an escape character (@) in front of a special chars. ; You need to use the result immediately before it is being overwritten. ; Definition at line 2568 of file TClass.cxx. ◆ FindClassOrBaseMethodWithId(). TMethod * TClass::FindClassOrBaseMethodWithId ; (; DeclId_t ; faddr). private . Find a method with decl id in this class or its bases. ; Definition at line 4440 of file TClass.cxx. ◆ FindConversionStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const char * ; onfile_classname, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ; Definition at line 7193 of file TClass.cxx. ◆ FindConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const TClass * ; onfile_cl, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ; Definition at line 7204 of file TClass.cxx. ◆ FindStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7066 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7036 of file TClass.cxx. ◆ FindStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::FindStreamerInfoAbstractEmulated ; (; UInt_t ; checksum); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object f",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:67475,Security,checksum,checksum,67475,"apeChars ; (; const char * ; text); const. Introduce an escape character (@) in front of a special chars. ; You need to use the result immediately before it is being overwritten. ; Definition at line 2568 of file TClass.cxx. ◆ FindClassOrBaseMethodWithId(). TMethod * TClass::FindClassOrBaseMethodWithId ; (; DeclId_t ; faddr). private . Find a method with decl id in this class or its bases. ; Definition at line 4440 of file TClass.cxx. ◆ FindConversionStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const char * ; onfile_classname, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ; Definition at line 7193 of file TClass.cxx. ◆ FindConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const TClass * ; onfile_cl, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ; Definition at line 7204 of file TClass.cxx. ◆ FindStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7066 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7036 of file TClass.cxx. ◆ FindStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::FindStreamerInfoAbstractEmulated ; (; UInt_t ; checksum); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If t",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:67665,Security,checksum,checksum,67665,". ◆ FindClassOrBaseMethodWithId(). TMethod * TClass::FindClassOrBaseMethodWithId ; (; DeclId_t ; faddr). private . Find a method with decl id in this class or its bases. ; Definition at line 4440 of file TClass.cxx. ◆ FindConversionStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const char * ; onfile_classname, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ; Definition at line 7193 of file TClass.cxx. ◆ FindConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const TClass * ; onfile_cl, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ; Definition at line 7204 of file TClass.cxx. ◆ FindStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7066 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7036 of file TClass.cxx. ◆ FindStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::FindStreamerInfoAbstractEmulated ; (; UInt_t ; checksum); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable pro",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:67766,Security,checksum,checksum,67766,"hodWithId ; (; DeclId_t ; faddr). private . Find a method with decl id in this class or its bases. ; Definition at line 4440 of file TClass.cxx. ◆ FindConversionStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const char * ; onfile_classname, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ; Definition at line 7193 of file TClass.cxx. ◆ FindConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const TClass * ; onfile_cl, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ; Definition at line 7204 of file TClass.cxx. ◆ FindStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7066 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7036 of file TClass.cxx. ◆ FindStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::FindStreamerInfoAbstractEmulated ; (; UInt_t ; checksum); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4772 of file TCl",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:67912,Security,checksum,checksum,67912,"dConversionStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const char * ; onfile_classname, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ; Definition at line 7193 of file TClass.cxx. ◆ FindConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const TClass * ; onfile_cl, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ; Definition at line 7204 of file TClass.cxx. ◆ FindStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7066 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7036 of file TClass.cxx. ◆ FindStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::FindStreamerInfoAbstractEmulated ; (; UInt_t ; checksum); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4772 of file TClass.cxx. ◆ ForceReload(). void TClass::ForceReload ; (; TClass * ; oldcl). we found at least one equivalent. ; let's force a reload ; Definition at li",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:68034,Security,checksum,checksum,68034,"classname, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ; Definition at line 7193 of file TClass.cxx. ◆ FindConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const TClass * ; onfile_cl, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ; Definition at line 7204 of file TClass.cxx. ◆ FindStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7066 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7036 of file TClass.cxx. ◆ FindStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::FindStreamerInfoAbstractEmulated ; (; UInt_t ; checksum); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4772 of file TClass.cxx. ◆ ForceReload(). void TClass::ForceReload ; (; TClass * ; oldcl). we found at least one equivalent. ; let's force a reload ; Definition at line 1336 of file TClass.cxx. ◆ GetActualClass(). TClass * TClass::GetActualClass ; (; const void * ; object); const. Re",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:68206,Security,checksum,checksum,68206,"finition at line 7193 of file TClass.cxx. ◆ FindConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const TClass * ; onfile_cl, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ; Definition at line 7204 of file TClass.cxx. ◆ FindStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7066 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7036 of file TClass.cxx. ◆ FindStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::FindStreamerInfoAbstractEmulated ; (; UInt_t ; checksum); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4772 of file TClass.cxx. ◆ ForceReload(). void TClass::ForceReload ; (; TClass * ; oldcl). we found at least one equivalent. ; let's force a reload ; Definition at line 1336 of file TClass.cxx. ◆ GetActualClass(). TClass * TClass::GetActualClass ; (; const void * ; object); const. Return a pointer to the real class of the object. ; This is equivalent to object->IsA() when the class has a ClassDef. It is REQUIRED that object is coming from a proper poi",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:71536,Security,checksum,checksum,71536," multiple inheritance. . Definition at line 2791 of file TClass.cxx. ◆ GetBaseClassOffsetRecurse(). Int_t TClass::GetBaseClassOffsetRecurse ; (; const TClass * ; cl). private . Return data member offset to the base class ""cl"". . Returns -1 in case ""cl"" is not a base class.; Returns -2 if cl is a base class, but we can't find the offset because it's virtual. Takes care of multiple inheritance. . Definition at line 2705 of file TClass.cxx. ◆ GetBaseDataMember(). TClass * TClass::GetBaseDataMember ; (; const char * ; datamember). Return pointer to (base) class that contains datamember. ; Definition at line 2827 of file TClass.cxx. ◆ GetCheckSum() [1/3]. UInt_t TClass::GetCheckSum ; (; Bool_t & ; isvalid); const. Return GetCheckSum(kCurrentCheckSum,isvalid);. ; Definition at line 6514 of file TClass.cxx. ◆ GetCheckSum() [2/3]. UInt_t TClass::GetCheckSum ; (; ECheckSum ; code, . Bool_t & ; isvalid . ); const. Compute and/or return the class check sum. ; isvalid is set to false, if the function is unable to calculate the checksum.; The class ckecksum is used by the automatic schema evolution algorithm to uniquely identify a class version. The check sum is built from the names/types of base classes and data members. Original algorithm from Victor Perevovchikov (perev.nosp@m.@bnl.nosp@m..gov).; The valid range of code is determined by ECheckSum. kNoEnum: data members of type enum are not counted in the checksum; kNoRange: return the checksum of data members and base classes, not including the ranges and array size found in comments.; kWithTypeDef: use the sugared type name in the calculation. This is needed for backward compatibility.; WARNING: this function must be kept in sync with TStreamerInfo::GetCheckSum. They are both used to handle backward compatibility and should both return the same values. TStreamerInfo uses the information in TStreamerElement while TClass uses the information from TClass::GetListOfBases and TClass::GetListOfDataMembers. ; Definition at line 654",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:71923,Security,checksum,checksum,71923,"aMember(). TClass * TClass::GetBaseDataMember ; (; const char * ; datamember). Return pointer to (base) class that contains datamember. ; Definition at line 2827 of file TClass.cxx. ◆ GetCheckSum() [1/3]. UInt_t TClass::GetCheckSum ; (; Bool_t & ; isvalid); const. Return GetCheckSum(kCurrentCheckSum,isvalid);. ; Definition at line 6514 of file TClass.cxx. ◆ GetCheckSum() [2/3]. UInt_t TClass::GetCheckSum ; (; ECheckSum ; code, . Bool_t & ; isvalid . ); const. Compute and/or return the class check sum. ; isvalid is set to false, if the function is unable to calculate the checksum.; The class ckecksum is used by the automatic schema evolution algorithm to uniquely identify a class version. The check sum is built from the names/types of base classes and data members. Original algorithm from Victor Perevovchikov (perev.nosp@m.@bnl.nosp@m..gov).; The valid range of code is determined by ECheckSum. kNoEnum: data members of type enum are not counted in the checksum; kNoRange: return the checksum of data members and base classes, not including the ranges and array size found in comments.; kWithTypeDef: use the sugared type name in the calculation. This is needed for backward compatibility.; WARNING: this function must be kept in sync with TStreamerInfo::GetCheckSum. They are both used to handle backward compatibility and should both return the same values. TStreamerInfo uses the information in TStreamerElement while TClass uses the information from TClass::GetListOfBases and TClass::GetListOfDataMembers. ; Definition at line 6544 of file TClass.cxx. ◆ GetCheckSum() [3/3]. UInt_t TClass::GetCheckSum ; (; ECheckSum ; code = kCurrentCheckSum); const. Call GetCheckSum with validity check. ; Definition at line 6505 of file TClass.cxx. ◆ GetClass() [1/6]. template<typename T > . TClass * TClass::GetClass ; (; Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Definition at line 655 of file TClass.h. ◆ GetClass() [2/6]. TClass * TClass::GetClass ; (; ClassInfo_t * ; in",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:71954,Security,checksum,checksum,71954,"aMember(). TClass * TClass::GetBaseDataMember ; (; const char * ; datamember). Return pointer to (base) class that contains datamember. ; Definition at line 2827 of file TClass.cxx. ◆ GetCheckSum() [1/3]. UInt_t TClass::GetCheckSum ; (; Bool_t & ; isvalid); const. Return GetCheckSum(kCurrentCheckSum,isvalid);. ; Definition at line 6514 of file TClass.cxx. ◆ GetCheckSum() [2/3]. UInt_t TClass::GetCheckSum ; (; ECheckSum ; code, . Bool_t & ; isvalid . ); const. Compute and/or return the class check sum. ; isvalid is set to false, if the function is unable to calculate the checksum.; The class ckecksum is used by the automatic schema evolution algorithm to uniquely identify a class version. The check sum is built from the names/types of base classes and data members. Original algorithm from Victor Perevovchikov (perev.nosp@m.@bnl.nosp@m..gov).; The valid range of code is determined by ECheckSum. kNoEnum: data members of type enum are not counted in the checksum; kNoRange: return the checksum of data members and base classes, not including the ranges and array size found in comments.; kWithTypeDef: use the sugared type name in the calculation. This is needed for backward compatibility.; WARNING: this function must be kept in sync with TStreamerInfo::GetCheckSum. They are both used to handle backward compatibility and should both return the same values. TStreamerInfo uses the information in TStreamerElement while TClass uses the information from TClass::GetListOfBases and TClass::GetListOfDataMembers. ; Definition at line 6544 of file TClass.cxx. ◆ GetCheckSum() [3/3]. UInt_t TClass::GetCheckSum ; (; ECheckSum ; code = kCurrentCheckSum); const. Call GetCheckSum with validity check. ; Definition at line 6505 of file TClass.cxx. ◆ GetClass() [1/6]. template<typename T > . TClass * TClass::GetClass ; (; Bool_t ; load = kTRUE, . Bool_t ; silent = kFALSE . ). static . Definition at line 655 of file TClass.h. ◆ GetClass() [2/6]. TClass * TClass::GetClass ; (; ClassInfo_t * ; in",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:77523,Security,access,accessor,77523," it is not representing an STL collection. ; Definition at line 2886 of file TClass.cxx. ◆ GetContextMenuTitle(). const char * TClass::GetContextMenuTitle ; (; ); const. inline . Definition at line 438 of file TClass.h. ◆ GetConversionStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::GetConversionStreamerInfo ; (; const char * ; onfile_classname, . Int_t ; version . ); const. Return a Conversion StreamerInfo from the class 'classname' for version number 'version' to this class, if any. ; Definition at line 7086 of file TClass.cxx. ◆ GetConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::GetConversionStreamerInfo ; (; const TClass * ; onfile_cl, . Int_t ; version . ); const. Return a Conversion StreamerInfo from the class represented by cl for version number 'version' to this class, if any. ; Definition at line 7097 of file TClass.cxx. ◆ GetConvStreamerFunc(). ClassConvStreamerFunc_t TClass::GetConvStreamerFunc ; (; ); const. Get a wrapper/accessor function around this class custom conversion streamer (member function). ; Definition at line 2947 of file TClass.cxx. ◆ GetCurrentStreamerInfo(). TVirtualStreamerInfo * TClass::GetCurrentStreamerInfo ; (; ). inline . Definition at line 439 of file TClass.h. ◆ GetDataMember(). TDataMember * TClass::GetDataMember ; (; const char * ; datamember); const. Return pointer to datamember object with name ""datamember"". ; Definition at line 3439 of file TClass.cxx. ◆ GetDataMemberOffset(). Longptr_t TClass::GetDataMemberOffset ; (; const char * ; name); const. return offset for member name. ; name can be a data member in the class itself, one of its base classes, or one member in one of the aggregated classes.; In case of an emulated class, the list of emulated TRealData is built ; Definition at line 3477 of file TClass.cxx. ◆ GetDeclFileLine(). Short_t TClass::GetDeclFileLine ; (; ); const. inline . Definition at line 429 of file TClass.h. ◆ GetDeclFileName(). const char * TClass::GetDeclFileName ; (; ); const. Return",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:82638,Security,access,access,82638,"ll base classes and add only those methods not already in the list (also protected and private ones).; once finished, loop over resulting list and remove all private and protected methods. . Definition at line 3845 of file TClass.cxx. ◆ GetListOfBases(). TList * TClass::GetListOfBases ; (; ). Return list containing the TBaseClass(es) of a class. ; Definition at line 3636 of file TClass.cxx. ◆ GetListOfDataMembers(). TList * TClass::GetListOfDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of a class. ; Definition at line 3770 of file TClass.cxx. ◆ GetListOfEnums(). TList * TClass::GetListOfEnums ; (; Bool_t ; requestListLoading = kTRUE). Return a list containing the TEnums of a class. ; The list returned is safe to use from multiple thread without explicitly taking the ROOT global lock.; In the case the TClass represents a namespace, the returned list will implicit take the ROOT global lock upon any access (see TListOfEnumsWithLock); In the case the TClass represents a class or struct and requestListLoading is true, the list is immutable (and thus safe to access from multiple thread without taking the global lock at all).; In the case the TClass represents a class or struct and requestListLoading is false, the list is mutable and thus we return a TListOfEnumsWithLock which will implicit take the ROOT global lock upon any access. ; Definition at line 3686 of file TClass.cxx. ◆ GetListOfFunctionTemplates(). TList * TClass::GetListOfFunctionTemplates ; (; Bool_t ; load = kTRUE). Return TListOfFunctionTemplates for a class. ; Definition at line 3798 of file TClass.cxx. ◆ GetListOfMethodOverloads(). TCollection * TClass::GetListOfMethodOverloads ; (; const char * ; name); const. Return the collection of functions named ""name"". ; Definition at line 3827 of file TClass.cxx. ◆ GetListOfMethods(). TList * TClass::GetListOfMethods ; (; Bool_t ; load = kTRUE). Return list containing the TMethods of a class. ; If load is true, the list is populat",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:82797,Security,access,access,82797,"ll base classes and add only those methods not already in the list (also protected and private ones).; once finished, loop over resulting list and remove all private and protected methods. . Definition at line 3845 of file TClass.cxx. ◆ GetListOfBases(). TList * TClass::GetListOfBases ; (; ). Return list containing the TBaseClass(es) of a class. ; Definition at line 3636 of file TClass.cxx. ◆ GetListOfDataMembers(). TList * TClass::GetListOfDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of a class. ; Definition at line 3770 of file TClass.cxx. ◆ GetListOfEnums(). TList * TClass::GetListOfEnums ; (; Bool_t ; requestListLoading = kTRUE). Return a list containing the TEnums of a class. ; The list returned is safe to use from multiple thread without explicitly taking the ROOT global lock.; In the case the TClass represents a namespace, the returned list will implicit take the ROOT global lock upon any access (see TListOfEnumsWithLock); In the case the TClass represents a class or struct and requestListLoading is true, the list is immutable (and thus safe to access from multiple thread without taking the global lock at all).; In the case the TClass represents a class or struct and requestListLoading is false, the list is mutable and thus we return a TListOfEnumsWithLock which will implicit take the ROOT global lock upon any access. ; Definition at line 3686 of file TClass.cxx. ◆ GetListOfFunctionTemplates(). TList * TClass::GetListOfFunctionTemplates ; (; Bool_t ; load = kTRUE). Return TListOfFunctionTemplates for a class. ; Definition at line 3798 of file TClass.cxx. ◆ GetListOfMethodOverloads(). TCollection * TClass::GetListOfMethodOverloads ; (; const char * ; name); const. Return the collection of functions named ""name"". ; Definition at line 3827 of file TClass.cxx. ◆ GetListOfMethods(). TList * TClass::GetListOfMethods ; (; Bool_t ; load = kTRUE). Return list containing the TMethods of a class. ; If load is true, the list is populat",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:83068,Security,access,access,83068,"stOfBases ; (; ). Return list containing the TBaseClass(es) of a class. ; Definition at line 3636 of file TClass.cxx. ◆ GetListOfDataMembers(). TList * TClass::GetListOfDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of a class. ; Definition at line 3770 of file TClass.cxx. ◆ GetListOfEnums(). TList * TClass::GetListOfEnums ; (; Bool_t ; requestListLoading = kTRUE). Return a list containing the TEnums of a class. ; The list returned is safe to use from multiple thread without explicitly taking the ROOT global lock.; In the case the TClass represents a namespace, the returned list will implicit take the ROOT global lock upon any access (see TListOfEnumsWithLock); In the case the TClass represents a class or struct and requestListLoading is true, the list is immutable (and thus safe to access from multiple thread without taking the global lock at all).; In the case the TClass represents a class or struct and requestListLoading is false, the list is mutable and thus we return a TListOfEnumsWithLock which will implicit take the ROOT global lock upon any access. ; Definition at line 3686 of file TClass.cxx. ◆ GetListOfFunctionTemplates(). TList * TClass::GetListOfFunctionTemplates ; (; Bool_t ; load = kTRUE). Return TListOfFunctionTemplates for a class. ; Definition at line 3798 of file TClass.cxx. ◆ GetListOfMethodOverloads(). TCollection * TClass::GetListOfMethodOverloads ; (; const char * ; name); const. Return the collection of functions named ""name"". ; Definition at line 3827 of file TClass.cxx. ◆ GetListOfMethods(). TList * TClass::GetListOfMethods ; (; Bool_t ; load = kTRUE). Return list containing the TMethods of a class. ; If load is true, the list is populated with all the defined function and currently instantiated function template. ; Definition at line 3812 of file TClass.cxx. ◆ GetListOfRealData(). TList * TClass::GetListOfRealData ; (; ); const. inline . Definition at line 453 of file TClass.h. ◆ GetListOfUsingDataMembers().",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:84257,Security,access,accessible,84257,"for a class. ; Definition at line 3798 of file TClass.cxx. ◆ GetListOfMethodOverloads(). TCollection * TClass::GetListOfMethodOverloads ; (; const char * ; name); const. Return the collection of functions named ""name"". ; Definition at line 3827 of file TClass.cxx. ◆ GetListOfMethods(). TList * TClass::GetListOfMethods ; (; Bool_t ; load = kTRUE). Return list containing the TMethods of a class. ; If load is true, the list is populated with all the defined function and currently instantiated function template. ; Definition at line 3812 of file TClass.cxx. ◆ GetListOfRealData(). TList * TClass::GetListOfRealData ; (; ); const. inline . Definition at line 453 of file TClass.h. ◆ GetListOfUsingDataMembers(). TList * TClass::GetListOfUsingDataMembers ; (; Bool_t ; load = kTRUE). Return list containing the TDataMembers of using declarations of a class. ; Definition at line 3786 of file TClass.cxx. ◆ GetMenuItems(). void TClass::GetMenuItems ; (; TList * ; listitems). Returns list of methods accessible by context menu. ; Definition at line 3874 of file TClass.cxx. ◆ GetMenuList(). TList * TClass::GetMenuList ; (; ); const. Return the list of menu items associated with the class. ; Definition at line 4341 of file TClass.cxx. ◆ GetMerge(). ROOT::MergeFunc_t TClass::GetMerge ; (; ); const. Return the wrapper around Merge. ; Definition at line 7431 of file TClass.cxx. ◆ GetMethod(). TMethod * TClass::GetMethod ; (; const char * ; method, . const char * ; params, . Bool_t ; objectIsConst = kFALSE . ). Find the best method (if there is one) matching the parameters. ; The params string must contain argument values, like ""3189, \""aap\"", 1.3"". The function invokes GetClassMethod to search for a possible method in the class itself or in its base classes. Returns 0 in case method is not found. ; Definition at line 4411 of file TClass.cxx. ◆ GetMethodAllAny(). TMethod * TClass::GetMethodAllAny ; (; const char * ; method). Return pointer to method without looking at parameters. ; Does l",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:91198,Security,access,accessor,91198,"rn the set of the schema rules if any. ; If create is true, create an empty set ; Definition at line 1941 of file TClass.cxx. ◆ GetSharedLibs(). const char * TClass::GetSharedLibs ; (; ). Get the list of shared libraries containing the code for class cls. ; The first library in the list is the one containing the class, the others are the libraries the first one depends on. Returns 0 in case the library is not found. ; Definition at line 3623 of file TClass.cxx. ◆ GetShowMembersWrapper(). ShowMembersFunc_t TClass::GetShowMembersWrapper ; (; ); const. inline . Definition at line 487 of file TClass.h. ◆ GetState(). EState TClass::GetState ; (; ); const. inline . Definition at line 488 of file TClass.h. ◆ GetStreamer(). TClassStreamer * TClass::GetStreamer ; (; ); const. Return the Streamer Class allowing streaming (if any). ; Definition at line 2914 of file TClass.cxx. ◆ GetStreamerFunc(). ClassStreamerFunc_t TClass::GetStreamerFunc ; (; ); const. Get a wrapper/accessor function around this class custom streamer (member function). ; Definition at line 2939 of file TClass.cxx. ◆ GetStreamerInfo(). TVirtualStreamerInfo * TClass::GetStreamerInfo ; (; Int_t ; version = 0, . Bool_t ; isTransient = kFALSE . ); const. returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ; Note: There are two special version numbers: - 0: Use the class version from the currently loaded class library.; - -1: Assume no class library loaded (emulated class).; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable properly with TStreamer::Optimize()! ; Definition at line 4599 of file TClass.cxx. ◆ GetStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::GetStreamerInfoAbstractEmulated ; (; Int_t ; version = 0); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:94082,Security,access,access,94082,"efinition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ; Definition at line 508 of file TClass.h. ◆ HasDataMemberInfo(). Bool_t TClass::HasDataMemberInfo ; (; ); const. inline . Definition at line 407 of file TClass.h. ◆ HasDefaultConstructor(). Bool_t TClass::HasDefaultConstructor ; (; Bool_t ; testio = kFALSE); const. Return true if we have access to a constructor usable for I/O. ; This is typically the default constructor but can also be a constructor specifically marked for I/O (for example a constructor taking a TRootIOCtor* as an argument). In other words, if this routine returns true, TClass::New is guarantee to succeed. To know if the class described by this TClass has a default constructor (public or not), use cl->GetProperty() & kClassHasDefaultCtor; kClassHasDefaultCtor@ kClassHasDefaultCtorDefinition TDictionary.h:140; To know if the class described by this TClass has a public default constructor use: gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; gInterpreter#define gInterpreterDefinition TInterpreter.h:573. Definition at line 7393 of file TClass.cxx. ◆ HasDictionary(). Bool_t TClass::HasDictionary ; (; ); const. Check whether a class has a dictionary or not. ; This is equivalent to ask if a class is coming from a bootstrapping procedure initiated during the loading of a library. ; Definition a",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:104027,Security,access,accessible,104027,"equestedname' is expected to be already normalized. ; Definition at line 5771 of file TClass.cxx. ◆ LoadClassInfo(). void TClass::LoadClassInfo ; (; ); const. private . Try to load the ClassInfo if available. ; This function may require parsing the header file and/or loading data from the clang pcm. If further calls to this function cannot affect the value of fClassInfo, fCanLoadClassInfo is set to false. ; Definition at line 5824 of file TClass.cxx. ◆ ls(). void TClass::ls ; (; Option_t * ; options = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). If options contains 'streamerinfo', run ls on the list of streamerInfos and the list of conversion streamerInfos. ; Reimplemented from TObject.; Definition at line 4258 of file TClass.cxx. ◆ MakeCustomMenuList(). void TClass::MakeCustomMenuList ; (; ). Makes a customizable version of the popup menu list, i.e. ; makes a list of TClassMenuItem objects of methods accessible by context menu. The standard (and different) way consists in having just one element in this list, corresponding to the whole standard list. Once the customizable version is done, one can remove or add elements. ; Definition at line 4283 of file TClass.cxx. ◆ MatchLegacyCheckSum(). Bool_t TClass::MatchLegacyCheckSum ; (; UInt_t ; checksum); const. Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ; Definition at line 6494 of file TClass.cxx. ◆ Move(). void TClass::Move ; (; void * ; arenaFrom, . void * ; arenaTo . ); const. Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ; Definition at line 4327 of file TClass.cxx. ◆ MoveAddressInRepository(). void TClass::MoveAddressInRepository ; (; const char * ; where, . void * ; oldadd, . void * ; newadd, . const TClass * ; what . ); const. private . Definition at line 337 of fi",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:104371,Security,checksum,checksum,104371,"t affect the value of fClassInfo, fCanLoadClassInfo is set to false. ; Definition at line 5824 of file TClass.cxx. ◆ ls(). void TClass::ls ; (; Option_t * ; options = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). If options contains 'streamerinfo', run ls on the list of streamerInfos and the list of conversion streamerInfos. ; Reimplemented from TObject.; Definition at line 4258 of file TClass.cxx. ◆ MakeCustomMenuList(). void TClass::MakeCustomMenuList ; (; ). Makes a customizable version of the popup menu list, i.e. ; makes a list of TClassMenuItem objects of methods accessible by context menu. The standard (and different) way consists in having just one element in this list, corresponding to the whole standard list. Once the customizable version is done, one can remove or add elements. ; Definition at line 4283 of file TClass.cxx. ◆ MatchLegacyCheckSum(). Bool_t TClass::MatchLegacyCheckSum ; (; UInt_t ; checksum); const. Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ; Definition at line 6494 of file TClass.cxx. ◆ Move(). void TClass::Move ; (; void * ; arenaFrom, . void * ; arenaTo . ); const. Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ; Definition at line 4327 of file TClass.cxx. ◆ MoveAddressInRepository(). void TClass::MoveAddressInRepository ; (; const char * ; where, . void * ; oldadd, . void * ; newadd, . const TClass * ; what . ); const. private . Definition at line 337 of file TClass.cxx. ◆ New() [1/2]. void * TClass::New ; (; ENewType ; defConstructor = kClassNew, . Bool_t ; quiet = kFALSE . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew().; If quiet is true, do no issue a message via E",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:104408,Security,checksum,checksum,104408,"ile TClass.cxx. ◆ ls(). void TClass::ls ; (; Option_t * ; options = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). If options contains 'streamerinfo', run ls on the list of streamerInfos and the list of conversion streamerInfos. ; Reimplemented from TObject.; Definition at line 4258 of file TClass.cxx. ◆ MakeCustomMenuList(). void TClass::MakeCustomMenuList ; (; ). Makes a customizable version of the popup menu list, i.e. ; makes a list of TClassMenuItem objects of methods accessible by context menu. The standard (and different) way consists in having just one element in this list, corresponding to the whole standard list. Once the customizable version is done, one can remove or add elements. ; Definition at line 4283 of file TClass.cxx. ◆ MatchLegacyCheckSum(). Bool_t TClass::MatchLegacyCheckSum ; (; UInt_t ; checksum); const. Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ; Definition at line 6494 of file TClass.cxx. ◆ Move(). void TClass::Move ; (; void * ; arenaFrom, . void * ; arenaTo . ); const. Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ; Definition at line 4327 of file TClass.cxx. ◆ MoveAddressInRepository(). void TClass::MoveAddressInRepository ; (; const char * ; where, . void * ; oldadd, . void * ; newadd, . const TClass * ; what . ); const. private . Definition at line 337 of file TClass.cxx. ◆ New() [1/2]. void * TClass::New ; (; ENewType ; defConstructor = kClassNew, . Bool_t ; quiet = kFALSE . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew().; If quiet is true, do no issue a message via Error on case of problems, just return 0.; The constructor actually called here can be customized b",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:104450,Security,checksum,checksum,104450,"ile TClass.cxx. ◆ ls(). void TClass::ls ; (; Option_t * ; options = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). If options contains 'streamerinfo', run ls on the list of streamerInfos and the list of conversion streamerInfos. ; Reimplemented from TObject.; Definition at line 4258 of file TClass.cxx. ◆ MakeCustomMenuList(). void TClass::MakeCustomMenuList ; (; ). Makes a customizable version of the popup menu list, i.e. ; makes a list of TClassMenuItem objects of methods accessible by context menu. The standard (and different) way consists in having just one element in this list, corresponding to the whole standard list. Once the customizable version is done, one can remove or add elements. ; Definition at line 4283 of file TClass.cxx. ◆ MatchLegacyCheckSum(). Bool_t TClass::MatchLegacyCheckSum ; (; UInt_t ; checksum); const. Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ; Definition at line 6494 of file TClass.cxx. ◆ Move(). void TClass::Move ; (; void * ; arenaFrom, . void * ; arenaTo . ); const. Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ; Definition at line 4327 of file TClass.cxx. ◆ MoveAddressInRepository(). void TClass::MoveAddressInRepository ; (; const char * ; where, . void * ; oldadd, . void * ; newadd, . const TClass * ; what . ); const. private . Definition at line 337 of file TClass.cxx. ◆ New() [1/2]. void * TClass::New ; (; ENewType ; defConstructor = kClassNew, . Bool_t ; quiet = kFALSE . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew().; If quiet is true, do no issue a message via Error on case of problems, just return 0.; The constructor actually called here can be customized b",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:104487,Security,checksum,checksum,104487,"ile TClass.cxx. ◆ ls(). void TClass::ls ; (; Option_t * ; options = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). If options contains 'streamerinfo', run ls on the list of streamerInfos and the list of conversion streamerInfos. ; Reimplemented from TObject.; Definition at line 4258 of file TClass.cxx. ◆ MakeCustomMenuList(). void TClass::MakeCustomMenuList ; (; ). Makes a customizable version of the popup menu list, i.e. ; makes a list of TClassMenuItem objects of methods accessible by context menu. The standard (and different) way consists in having just one element in this list, corresponding to the whole standard list. Once the customizable version is done, one can remove or add elements. ; Definition at line 4283 of file TClass.cxx. ◆ MatchLegacyCheckSum(). Bool_t TClass::MatchLegacyCheckSum ; (; UInt_t ; checksum); const. Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ; Definition at line 6494 of file TClass.cxx. ◆ Move(). void TClass::Move ; (; void * ; arenaFrom, . void * ; arenaTo . ); const. Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ; Definition at line 4327 of file TClass.cxx. ◆ MoveAddressInRepository(). void TClass::MoveAddressInRepository ; (; const char * ; where, . void * ; oldadd, . void * ; newadd, . const TClass * ; what . ); const. private . Definition at line 337 of file TClass.cxx. ◆ New() [1/2]. void * TClass::New ; (; ENewType ; defConstructor = kClassNew, . Bool_t ; quiet = kFALSE . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew().; If quiet is true, do no issue a message via Error on case of problems, just return 0.; The constructor actually called here can be customized b",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:114515,Security,checksum,checksum,114515,"lass.h. ◆ ResetMenuList(). void TClass::ResetMenuList ; (; ). Resets the menu list to it's standard value. ; Definition at line 4243 of file TClass.cxx. ◆ SetCanSplit(). void TClass::SetCanSplit ; (; Int_t ; splitmode). Set the splitability of this class: . -1: Use the default calculation; 0: Disallow splitting; 1: Always allow splitting.; 2: Disallow splitting of the class and splitting of any it's derived classes. . Definition at line 5658 of file TClass.cxx. ◆ SetClassSize(). void TClass::SetClassSize ; (; Int_t ; sizof). inlineprivate . Definition at line 307 of file TClass.h. ◆ SetClassVersion(). void TClass::SetClassVersion ; (; Version_t ; version). private . Private function. ; Set the class version for the 'class' represented by this TClass object. See the public interface: ROOT::ResetClassVersion defined in TClassTable.cxx; Note on class version numbers:; If no class number has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specified via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 5675 of file TClass.cxx. ◆ SetCollectionProxy(). void TClass::SetCollectionProxy ; (; const ROOT::Detail::TCollectionProxyInfo & ; info). Create the collection proxy object (and the streamer object) from using the information in the TCollectionProxyInfo. ; Definition at line 6244 of file TClass.cxx. ◆ SetContextMenuTitle(). void TClass::SetContextMenuTitle ; (; const char * ; title). Change (i.e. set) the title of the TNamed. ; Definition at line 6269 of file TClass.cxx. ◆ SetConvStreamerFunc(). void TClass::SetConvStreamerFunc ; (; ClassConvStreamerFunc_t ; strm). Set a wrapper/accessor function around this class custom conversion streamer. ; Definition at line 6945 of file TClass.cxx. ◆ SetCurrentStreamerInfo(). void TClass::SetCurrentStreamerInfo ; (; TVirtualStreamerInfo * ; info). Set pointer to current T",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:115170,Security,access,accessor,115170,"ace: ROOT::ResetClassVersion defined in TClassTable.cxx; Note on class version numbers:; If no class number has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specified via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 5675 of file TClass.cxx. ◆ SetCollectionProxy(). void TClass::SetCollectionProxy ; (; const ROOT::Detail::TCollectionProxyInfo & ; info). Create the collection proxy object (and the streamer object) from using the information in the TCollectionProxyInfo. ; Definition at line 6244 of file TClass.cxx. ◆ SetContextMenuTitle(). void TClass::SetContextMenuTitle ; (; const char * ; title). Change (i.e. set) the title of the TNamed. ; Definition at line 6269 of file TClass.cxx. ◆ SetConvStreamerFunc(). void TClass::SetConvStreamerFunc ; (; ClassConvStreamerFunc_t ; strm). Set a wrapper/accessor function around this class custom conversion streamer. ; Definition at line 6945 of file TClass.cxx. ◆ SetCurrentStreamerInfo(). void TClass::SetCurrentStreamerInfo ; (; TVirtualStreamerInfo * ; info). Set pointer to current TVirtualStreamerInfo. ; Definition at line 5696 of file TClass.cxx. ◆ SetDeclFile(). void TClass::SetDeclFile ; (; const char * ; name, . Short_t ; line . ). inline . Definition at line 555 of file TClass.h. ◆ SetDelete(). void TClass::SetDelete ; (; ROOT::DelFunc_t ; deleteFunc). Install a new wrapper around 'delete'. ; Definition at line 7001 of file TClass.cxx. ◆ SetDeleteArray(). void TClass::SetDeleteArray ; (; ROOT::DelArrFunc_t ; deleteArrayFunc). Install a new wrapper around 'delete []'. ; Definition at line 7009 of file TClass.cxx. ◆ SetDestructor(). void TClass::SetDestructor ; (; ROOT::DesFunc_t ; destructorFunc). Install a new wrapper around the destructor. ; Definition at line 7017 of file TClass.cxx. ◆ SetDirectoryAutoAdd(). void TClass::SetDirectoryAutoAdd ; (; ROO",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:119191,Security,access,accessor,119191," a new wrapper around 'Merge'. ; Definition at line 6969 of file TClass.cxx. ◆ SetNew(). void TClass::SetNew ; (; ROOT::NewFunc_t ; newFunc). Install a new wrapper around 'new'. ; Definition at line 6985 of file TClass.cxx. ◆ SetNewArray(). void TClass::SetNewArray ; (; ROOT::NewArrFunc_t ; newArrayFunc). Install a new wrapper around 'new []'. ; Definition at line 6993 of file TClass.cxx. ◆ SetResetAfterMerge(). void TClass::SetResetAfterMerge ; (; ROOT::ResetAfterMergeFunc_t ; resetFunc). Install a new wrapper around 'ResetAfterMerge'. ; Definition at line 6977 of file TClass.cxx. ◆ SetRuntimeProperties(). void TClass::SetRuntimeProperties ; (; ). private . Internal routine to set calculate the class properties that can only be known at run-time, for example whether the Hash member function and the destructor are consistent. ; Definition at line 6194 of file TClass.cxx. ◆ SetStreamerFunc(). void TClass::SetStreamerFunc ; (; ClassStreamerFunc_t ; strm). Set a wrapper/accessor function around this class custom streamer. ; Definition at line 6922 of file TClass.cxx. ◆ SetStreamerImpl(). void TClass::SetStreamerImpl ; (; ). private . Internal routine to set fStreamerImpl based on the value of fStreamerType. ; Definition at line 6215 of file TClass.cxx. ◆ SetStreamerInfo(). TVirtualStreamerInfo * TClass::SetStreamerInfo ; (; Int_t ; version, . const char * ; info = """" . ). Info is a string describing the names and types of attributes written by the class Streamer function. ; If info is an empty string (when called by TObject::StreamerInfo) the default Streamer info string is build. This corresponds to the case of an automatically generated Streamer. In case of user defined Streamer function, it is the user responsibility to implement a StreamerInfo function (override TObject::StreamerInfo). The user must call IsA()->SetStreamerInfo(info) from this function. ; Definition at line 6373 of file TClass.cxx. ◆ SetUnloaded(). void TClass::SetUnloaded ; (; ). Call this method to",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:17522,Testability,test,testio,17522," const;  returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ;  ; TVirtualStreamerInfo * GetStreamerInfoAbstractEmulated (Int_t version=0) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; const TObjArray * GetStreamerInfos () const;  ; const std::type_info * GetTypeInfo () const;  ; Bool_t HasConsistentHashMember ();  Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ;  ; Bool_t HasCustomStreamerMember () const;  The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ;  ; Bool_t HasDataMemberInfo () const;  ; Bool_t HasDefaultConstructor (Bool_t testio=kFALSE) const;  Return true if we have access to a constructor usable for I/O. ;  ; Bool_t HasDictionary () const;  Check whether a class has a dictionary or not. ;  ; Bool_t HasInterpreterInfo () const;  ; Bool_t HasInterpreterInfoInMemory () const;  ; Bool_t HasLocalHashMember () const;  Returns true if this class has an definition and/or overload of the member function Hash. ;  ; void IgnoreTObjectStreamer (Bool_t ignore=kTRUE);  When the class kIgnoreTObjectStreamer bit is set, the automatically generated Streamer will not call TObject::Streamer. ;  ; Bool_t InheritsFrom (const char *cl) const override;  Return kTRUE if this class inherits from a class with name ""classname"". ;  ; Bool_t InheritsFrom (const TClass *cl) const override;  Return kTRUE if this class inherits from class cl. ;  ; void InterpretedShowMembers (void *obj, TMemberInspector &insp, Bool_t isTransient);  Do a ShowMembers() traversal of all members and base classes' members using the reflection information f",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:94034,Testability,test,testio,94034," const TObjArray * TClass::GetStreamerInfos ; (; ); const. inline . Definition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ; Definition at line 508 of file TClass.h. ◆ HasDataMemberInfo(). Bool_t TClass::HasDataMemberInfo ; (; ); const. inline . Definition at line 407 of file TClass.h. ◆ HasDefaultConstructor(). Bool_t TClass::HasDefaultConstructor ; (; Bool_t ; testio = kFALSE); const. Return true if we have access to a constructor usable for I/O. ; This is typically the default constructor but can also be a constructor specifically marked for I/O (for example a constructor taking a TRootIOCtor* as an argument). In other words, if this routine returns true, TClass::New is guarantee to succeed. To know if the class described by this TClass has a default constructor (public or not), use cl->GetProperty() & kClassHasDefaultCtor; kClassHasDefaultCtor@ kClassHasDefaultCtorDefinition TDictionary.h:140; To know if the class described by this TClass has a public default constructor use: gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; gInterpreter#define gInterpreterDefinition TInterpreter.h:573. Definition at line 7393 of file TClass.cxx. ◆ HasDictionary(). Bool_t TClass::HasDictionary ; (; ); const. Check whether a class has a dictionary or not. ; This is equivalent to ask if a class is coming from a bootstrappi",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:95983,Testability,test,test,95983,"g procedure initiated during the loading of a library. ; Definition at line 3906 of file TClass.cxx. ◆ HasDictionarySelection(). Bool_t TClass::HasDictionarySelection ; (; const char * ; clname). static . Check whether a class has a dictionary or ROOT can load one. ; This is equivalent to ask HasDictionary() or whether a library is known where it can be loaded from, or whether a Dictionary function is available because the class's dictionary library was already loaded. ; Definition at line 3917 of file TClass.cxx. ◆ HasInterpreterInfo(). Bool_t TClass::HasInterpreterInfo ; (; ); const. inline . Definition at line 410 of file TClass.h. ◆ HasInterpreterInfoInMemory(). Bool_t TClass::HasInterpreterInfoInMemory ; (; ); const. inline . Definition at line 409 of file TClass.h. ◆ HasLocalHashMember(). Bool_t TClass::HasLocalHashMember ; (; ); const. Returns true if this class has an definition and/or overload of the member function Hash. ; For example to test if the class overload TObject::Hash use if (cl->IsTObject() && cl->HasLocalHashMember()). Definition at line 7421 of file TClass.cxx. ◆ HasNoInfoOrEmuOrFwdDeclaredDecl(). Bool_t TClass::HasNoInfoOrEmuOrFwdDeclaredDecl ; (; const char * ; name). staticprivate . Definition at line 3398 of file TClass.cxx. ◆ IgnoreTObjectStreamer(). void TClass::IgnoreTObjectStreamer ; (; Bool_t ; doIgnore = kTRUE). When the class kIgnoreTObjectStreamer bit is set, the automatically generated Streamer will not call TObject::Streamer. ; This option saves the TObject space overhead on the file. However, the information (fBits, fUniqueID) of TObject is lost.; Note that to be effective for objects streamed object-wise this function must be called for the class deriving directly from TObject, eg, assuming that BigTrack derives from Track and Track derives from TObject, one must do: Track::Class()->IgnoreTObjectStreamer();; TClass::IgnoreTObjectStreamervoid IgnoreTObjectStreamer(Bool_t ignore=kTRUE)When the class kIgnoreTObjectStreamer bit is ",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:117121,Testability,test,test,117121,"; Definition at line 7017 of file TClass.cxx. ◆ SetDirectoryAutoAdd(). void TClass::SetDirectoryAutoAdd ; (; ROOT::DirAutoAdd_t ; autoAddFunc). Install a new wrapper around the directory auto add function. ; The function autoAddFunc has the signature void (*)(void *obj, TDirectory dir) and should register 'obj' to the directory if dir is not null and unregister 'obj' from its current directory if dir is null ; Definition at line 7028 of file TClass.cxx. ◆ SetGlobalIsA(). void TClass::SetGlobalIsA ; (; IsAGlobalFunc_t ; func). This function installs a global IsA function for this class. ; The global IsA function will be used if there is no local IsA function (fIsA); A global IsA function has the signature:; TClass *func( TClass *cl, const void *obj);; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; 'cl' is a pointer to the TClass object that corresponds to the 'pointer type' used to retrieve the value 'obj'; For example with: TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::TNamedTNamed()Definition TNamed.h:36; mTMarker mDefinition textangle.C:8; and the global IsA function would be called with TObject::Class() as the first parameter and the exact numerical value in the pointer 'o'.; In other word, inside the global IsA function. it is safe to C-style cast the value of 'obj' into a pointer to the class described by 'cl'. ; Definition at line 6300 of file TClass.cxx. ◆ SetImplFileName(). void TClass::SetImplFileName ; (; const char * ; implFileName). inline . Definition at line 560 of file TClass.h. ◆ SetLastReadInfo(). void TClass::SetLastReadInfo ; (; TVirtualStreamerInfo * ; info). inline . Definition at line 445 of file TClass.h. ◆ SetMemberStreamer(). void TClass::SetMemberStreamer ; (; const char * ; name, . MemberStreamerFunc_t ; strm . ). Install a new member streamer (p will be copied).",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:17592,Usability,usab,usable,17592," const;  returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ;  ; TVirtualStreamerInfo * GetStreamerInfoAbstractEmulated (Int_t version=0) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; const TObjArray * GetStreamerInfos () const;  ; const std::type_info * GetTypeInfo () const;  ; Bool_t HasConsistentHashMember ();  Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ;  ; Bool_t HasCustomStreamerMember () const;  The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ;  ; Bool_t HasDataMemberInfo () const;  ; Bool_t HasDefaultConstructor (Bool_t testio=kFALSE) const;  Return true if we have access to a constructor usable for I/O. ;  ; Bool_t HasDictionary () const;  Check whether a class has a dictionary or not. ;  ; Bool_t HasInterpreterInfo () const;  ; Bool_t HasInterpreterInfoInMemory () const;  ; Bool_t HasLocalHashMember () const;  Returns true if this class has an definition and/or overload of the member function Hash. ;  ; void IgnoreTObjectStreamer (Bool_t ignore=kTRUE);  When the class kIgnoreTObjectStreamer bit is set, the automatically generated Streamer will not call TObject::Streamer. ;  ; Bool_t InheritsFrom (const char *cl) const override;  Return kTRUE if this class inherits from a class with name ""classname"". ;  ; Bool_t InheritsFrom (const TClass *cl) const override;  Return kTRUE if this class inherits from class cl. ;  ; void InterpretedShowMembers (void *obj, TMemberInspector &insp, Bool_t isTransient);  Do a ShowMembers() traversal of all members and base classes' members using the reflection information f",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTClass.html:94106,Usability,usab,usable,94106,"efinition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ; Definition at line 508 of file TClass.h. ◆ HasDataMemberInfo(). Bool_t TClass::HasDataMemberInfo ; (; ); const. inline . Definition at line 407 of file TClass.h. ◆ HasDefaultConstructor(). Bool_t TClass::HasDefaultConstructor ; (; Bool_t ; testio = kFALSE); const. Return true if we have access to a constructor usable for I/O. ; This is typically the default constructor but can also be a constructor specifically marked for I/O (for example a constructor taking a TRootIOCtor* as an argument). In other words, if this routine returns true, TClass::New is guarantee to succeed. To know if the class described by this TClass has a default constructor (public or not), use cl->GetProperty() & kClassHasDefaultCtor; kClassHasDefaultCtor@ kClassHasDefaultCtorDefinition TDictionary.h:140; To know if the class described by this TClass has a public default constructor use: gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; gInterpreter#define gInterpreterDefinition TInterpreter.h:573. Definition at line 7393 of file TClass.cxx. ◆ HasDictionary(). Bool_t TClass::HasDictionary ; (; ); const. Check whether a class has a dictionary or not. ; This is equivalent to ask if a class is coming from a bootstrapping procedure initiated during the loading of a library. ; Definition a",MatchSource.WIKI,doc/v632/classTClass.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTClass.html
https://root.cern/doc/v632/classTCollection.html:7780,Availability,error,error,7780,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:7869,Availability,error,error,7869,"leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTi",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:8024,Availability,error,error,8024," whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is kn",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:8321,Availability,error,error,8321,"bj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname""",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:11798,Availability,error,error,11798," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void EmptyGarbageCollection ();  Do the garbage collection. ;  ; static void GarbageCollect (TObject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ()",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:24400,Availability,error,error,24400,"lass, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TCollection::HashULong_t Hash() const overrideReturn hash value for this object.Definition TCollection.h:186; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:987; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 186 of file TCollection.h. ◆ IsA(). TClass * TCollection::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TQCommand, TQUndoManager, TQConnection, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TSeqCollection, TSortedList, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TGeoNavigatorArray, TGridJobStatusList, and TParallelCoordSelect.; Definition at line 222 of file TCollection.h. ◆ IsArgNull(). Bool_t TCollection::IsArgNull ; (; const char * ; where, . const TObject * ; obj . ); const. Returns true if object is a null pointer. ; Definition at line 372 of file TCollection.cxx. ◆ IsEmpty(). virt",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:1293,Deployability,release,release,1293,"ions |; Static Private Attributes |; List of all members ; TCollection Class ReferenceabstractCore ROOT classes » Containers. ; Collection abstract base class. ; This class describes the base protocol all collection classes have to implement. The ROOT collection classes always store pointers to objects that inherit from TObject. They never adopt the objects. Therefore, it is the user's responsibility to take care of deleting the actual objects once they are not needed anymore. In exceptional cases, when the user is 100% sure nothing else is referencing the objects in the collection, one can delete all objects and the collection at the same time using the Delete() function.; Collections can be iterated using an iterator object (see TIterator). Depending on the concrete collection class there may be some additional methods of iterating. See the respective classes.; TCollection inherits from TObject since we want to be able to have collections of collections.; In a later release the collections may become templatized. ; Definition at line 65 of file TCollection.h. Public Types; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual ~TCollection ();  TNamed destructor. ;  ; virtual void Add (TObject *obj)=0;  ; virtual void AddAll (const TCollection *col);  Add all objects from collection col to this c",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:18875,Energy Efficiency,allocate,allocated,18875,"n at line 263 of file TCollection.cxx. ◆ Compare(). Int_t TCollection::Compare ; (; const TObject * ; obj); const. overridevirtual . Compare two TCollection objects. ; Returns 0 when equal, -1 when this is smaller and +1 when bigger (like strcmp()). ; Reimplemented from TObject.; Definition at line 275 of file TCollection.cxx. ◆ Contains() [1/2]. Bool_t TCollection::Contains ; (; const char * ; name); const. inline . Definition at line 171 of file TCollection.h. ◆ Contains() [2/2]. Bool_t TCollection::Contains ; (; const TObject * ; obj); const. inline . Definition at line 172 of file TCollection.h. ◆ DeclFileName(). static const char * TCollection::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 222 of file TCollection.h. ◆ Delete(). void TCollection::Delete ; (; Option_t * ; option = """"). overridepure virtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Implemented in TQCommand, TBtree, TClonesArray, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TViewPubDataMembers, and TViewPubFunctions. ◆ Draw(). void TCollection::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw all objects in this collection. ; Reimplemented from TObject.; Definition at line 284 of file TCollection.cxx. ◆ Dump(). void TCollection::Dump ; (; ); const. overridevirtual . Dump all objects in this collection. ; Reimplemented from TObject.; Definition at line 297 of file TCollection.cxx. ◆ EmptyGarbageCollection(). void TCollection::EmptyGarbageCollection ; (; ). static . Do the garbage collection. ; Definition at line 710 of file TCollection.cxx. ◆ end(). TIter TCollection::end ; (; ); const. inline . Definition at line 293 of file TCollection.h. ◆ FindObject() [1/2",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:20823,Energy Efficiency,efficient,efficient,20823,"e TCollection.h. ◆ FindObject() [1/2]. TObject * TCollection::FindObject ; (; const char * ; name); const. overridevirtual . Find an object in this collection using its name. ; Requires a sequential scan till the object has been found. Returns 0 if object with specified name is not found. ; Reimplemented from TObject.; Reimplemented in TListOfEnums, TMap, TListOfTypes, TListOfTypes, THashList, THashTable, TList, TObjArray, TListOfDataMembers, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TListOfFunctionTemplates, TViewPubDataMembers, and TViewPubFunctions.; Definition at line 312 of file TCollection.cxx. ◆ FindObject() [2/2]. TObject * TCollection::FindObject ; (; const TObject * ; obj); const. overridevirtual . Find an object in this collection using the object's IsEqual() member function. ; Requires a sequential scan till the object has been found. Returns 0 if object is not found. Typically this function is overridden by a more efficient version in concrete collection classes (e.g. THashTable). ; Reimplemented from TObject.; Reimplemented in TMap, TListOfTypes, THashList, THashTable, TList, TObjArray, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TViewPubDataMembers, and TViewPubFunctions.; Definition at line 337 of file TCollection.cxx. ◆ GarbageCollect(). void TCollection::GarbageCollect ; (; TObject * ; obj). static . Add to the list of things to be cleaned up. ; Definition at line 725 of file TCollection.cxx. ◆ GetCollectionEntryName(). const char * TCollection::GetCollectionEntryName ; (; TObject * ; entry); const. protectedvirtual . For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ; Definition at line 437 of file TCollection.cxx. ◆ GetCurrentCollection(). TCollection * TCollection::GetCurrentCollection ; (; ). static . Return the globally accessible collection. ; De",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:22789,Energy Efficiency,allocate,allocated,22789,"tic . Return the globally accessible collection. ; Definition at line 680 of file TCollection.cxx. ◆ GetEntries(). virtual Int_t TCollection::GetEntries ; (; ); const. inlinevirtual . Reimplemented in TObjArray, and TRefArray.; Definition at line 179 of file TCollection.h. ◆ GetName(). const char * TCollection::GetName ; (; ); const. overridevirtual . Return name of this collection. ; if no name, return the collection class name. ; Reimplemented from TObject.; Reimplemented in TQCommand, and TQConnection.; Definition at line 351 of file TCollection.cxx. ◆ GetObjectRef(). virtual TObject ** TCollection::GetObjectRef ; (; const TObject * ; obj); const. pure virtual . Implemented in TBtree, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TListOfEnumsWithLock, TListOfFunctions, TViewPubDataMembers, and TViewPubFunctions. ◆ GetSize(). virtual Int_t TCollection::GetSize ; (; ); const. inlinevirtual . Return the capacity of the collection, i.e. ; the current total amount of space that has been allocated so far. Same as Capacity. Use GetEntries to get the number of elements currently in the collection. ; Reimplemented in THashTable, TListOfEnumsWithLock, TListOfFunctions, TViewPubDataMembers, and TViewPubFunctions.; Definition at line 184 of file TCollection.h. ◆ GrowBy(). Int_t TCollection::GrowBy ; (; Int_t ; delta); const. virtual . Increase the collection's capacity by delta slots. ; Definition at line 360 of file TCollection.cxx. ◆ Hash(). ULong_t TCollection::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the trans",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:502,Integrability,protocol,protocol,502,". ROOT: TCollection Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Attributes |; List of all members ; TCollection Class ReferenceabstractCore ROOT classes » Containers. ; Collection abstract base class. ; This class describes the base protocol all collection classes have to implement. The ROOT collection classes always store pointers to objects that inherit from TObject. They never adopt the objects. Therefore, it is the user's responsibility to take care of deleting the actual objects once they are not needed anymore. In exceptional cases, when the user is 100% sure nothing else is referencing the objects in the collection, one can delete all objects and the collection at the same time using the Delete() function.; Collections can be iterated using an iterator object (see TIterator). Depending on the concrete collection class there may be some additional methods of iterating. See the respective classes.; TCollection inherits from TObject since we want to be able to have collections of collections.; In a later release the collections may become templatized. ; Definition at line 65 of file TCollection.h. Public Types; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCanno",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:7786,Integrability,message,message,7786,"ar *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; v",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:8327,Integrability,message,message,8327,"bj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname""",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:9188,Integrability,message,message,9188,"ecute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; void Obsolete (const char *method, const char *a",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:11804,Integrability,message,message,11804," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void EmptyGarbageCollection ();  Do the garbage collection. ;  ; static void GarbageCollect (TObject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ()",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:12177,Integrability,message,message,12177," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void EmptyGarbageCollection ();  Do the garbage collection. ;  ; static void GarbageCollect (TObject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t sta",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:23364,Integrability,rout,routine,23364,"List, TMap, TObjArray, TOrdCollection, TRefArray, TListOfEnumsWithLock, TListOfFunctions, TViewPubDataMembers, and TViewPubFunctions. ◆ GetSize(). virtual Int_t TCollection::GetSize ; (; ); const. inlinevirtual . Return the capacity of the collection, i.e. ; the current total amount of space that has been allocated so far. Same as Capacity. Use GetEntries to get the number of elements currently in the collection. ; Reimplemented in THashTable, TListOfEnumsWithLock, TListOfFunctions, TViewPubDataMembers, and TViewPubFunctions.; Definition at line 184 of file TCollection.h. ◆ GrowBy(). Int_t TCollection::GrowBy ; (; Int_t ; delta); const. virtual . Increase the collection's capacity by delta slots. ; Definition at line 360 of file TCollection.cxx. ◆ Hash(). ULong_t TCollection::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TCollection::HashULong_t Hash() const overrideReturn hash value for this object.Definition TCollection.h:186; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:987; TROOT::RecursiveRemovevoid RecursiveRemo",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:24406,Integrability,message,message,24406,"lass, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TCollection::HashULong_t Hash() const overrideReturn hash value for this object.Definition TCollection.h:186; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:987; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 186 of file TCollection.h. ◆ IsA(). TClass * TCollection::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TQCommand, TQUndoManager, TQConnection, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TSeqCollection, TSortedList, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TGeoNavigatorArray, TGridJobStatusList, and TParallelCoordSelect.; Definition at line 222 of file TCollection.h. ◆ IsArgNull(). Bool_t TCollection::IsArgNull ; (; const char * ; where, . const TObject * ; obj . ); const. Returns true if object is a null pointer. ; Definition at line 372 of file TCollection.cxx. ◆ IsEmpty(). virt",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:33304,Integrability,depend,depending,33304,"s, TListOfFunctionTemplates, TViewPubDataMembers, and TViewPubFunctions. ◆ RemoveAll() [1/2]. void TCollection::RemoveAll ; (; ). inline . Definition at line 204 of file TCollection.h. ◆ RemoveAll() [2/2]. void TCollection::RemoveAll ; (; TCollection * ; col). virtual . Remove all objects in collection col from this collection. ; Definition at line 594 of file TCollection.cxx. ◆ SetCurrentCollection(). void TCollection::SetCurrentCollection ; (; ). Set this collection to be the globally accessible collection. ; Definition at line 688 of file TCollection.cxx. ◆ SetName(). void TCollection::SetName ; (; const char * ; name). inline . Definition at line 206 of file TCollection.h. ◆ SetOwner(). void TCollection::SetOwner ; (; Bool_t ; enable = kTRUE). virtual . Set whether this collection is the owner (enable==true) of its content. ; If it is the owner of its contents, these objects will be deleted whenever the collection itself is deleted. The objects might also be deleted or destructed when Clear is called (depending on the collection). ; Reimplemented in TClonesArray.; Definition at line 746 of file TCollection.cxx. ◆ StartGarbageCollection(). void TCollection::StartGarbageCollection ; (; ). static . Set up for garbage collection. ; Definition at line 696 of file TCollection.cxx. ◆ Streamer(). void TCollection::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TObject.; Reimplemented in TQCommand, TQUndoManager, TQConnection, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TSeqCollection, TSortedList, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TGeoNavigatorArray, TGridJobStatusList, and TParallelCoordSelect.; Definition at line 606 of file TCollection.cxx. ◆ StreamerNVirtual(). void TCollection::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 222 of file TColle",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:619,Modifiability,inherit,inherit,619,". ROOT: TCollection Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Attributes |; List of all members ; TCollection Class ReferenceabstractCore ROOT classes » Containers. ; Collection abstract base class. ; This class describes the base protocol all collection classes have to implement. The ROOT collection classes always store pointers to objects that inherit from TObject. They never adopt the objects. Therefore, it is the user's responsibility to take care of deleting the actual objects once they are not needed anymore. In exceptional cases, when the user is 100% sure nothing else is referencing the objects in the collection, one can delete all objects and the collection at the same time using the Delete() function.; Collections can be iterated using an iterator object (see TIterator). Depending on the concrete collection class there may be some additional methods of iterating. See the respective classes.; TCollection inherits from TObject since we want to be able to have collections of collections.; In a later release the collections may become templatized. ; Definition at line 65 of file TCollection.h. Public Types; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCanno",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:1198,Modifiability,inherit,inherits,1198," |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Attributes |; List of all members ; TCollection Class ReferenceabstractCore ROOT classes » Containers. ; Collection abstract base class. ; This class describes the base protocol all collection classes have to implement. The ROOT collection classes always store pointers to objects that inherit from TObject. They never adopt the objects. Therefore, it is the user's responsibility to take care of deleting the actual objects once they are not needed anymore. In exceptional cases, when the user is 100% sure nothing else is referencing the objects in the collection, one can delete all objects and the collection at the same time using the Delete() function.; Collections can be iterated using an iterator object (see TIterator). Depending on the concrete collection class there may be some additional methods of iterating. See the respective classes.; TCollection inherits from TObject since we want to be able to have collections of collections.; In a later release the collections may become templatized. ; Definition at line 65 of file TCollection.h. Public Types; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual ~TCollection ();  TNamed destructor. ;  ; virtual void Add (TObject *obj)=0;  ; virtual void A",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:1481,Modifiability,inherit,inherited,1481,"ection classes have to implement. The ROOT collection classes always store pointers to objects that inherit from TObject. They never adopt the objects. Therefore, it is the user's responsibility to take care of deleting the actual objects once they are not needed anymore. In exceptional cases, when the user is 100% sure nothing else is referencing the objects in the collection, one can delete all objects and the collection at the same time using the Delete() function.; Collections can be iterated using an iterator object (see TIterator). Depending on the concrete collection class there may be some additional methods of iterating. See the respective classes.; TCollection inherits from TObject since we want to be able to have collections of collections.; In a later release the collections may become templatized. ; Definition at line 65 of file TCollection.h. Public Types; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual ~TCollection ();  TNamed destructor. ;  ; virtual void Add (TObject *obj)=0;  ; virtual void AddAll (const TCollection *col);  Add all objects from collection col to this collection. ;  ; void AddVector (TObject *obj1,...);  Add all arguments to the collection. ;  ; Bool_t AssertClass (TClass *cl) const;  Make sure all objects in this collection inherit from class cl. ;  ; TIter",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:2486,Modifiability,inherit,inherit,2486,"y = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual ~TCollection ();  TNamed destructor. ;  ; virtual void Add (TObject *obj)=0;  ; virtual void AddAll (const TCollection *col);  Add all objects from collection col to this collection. ;  ; void AddVector (TObject *obj1,...);  Add all arguments to the collection. ;  ; Bool_t AssertClass (TClass *cl) const;  Make sure all objects in this collection inherit from class cl. ;  ; TIter begin () const;  ; void Browse (TBrowser *b) override;  Browse this collection (called by TBrowser). ;  ; Int_t Capacity () const;  ; void Clear (Option_t *option="""") override=0;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an collection using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TCollection objects. ;  ; Bool_t Contains (const char *name) const;  ; Bool_t Contains (const TObject *obj) const;  ; void Delete (Option_t *option="""") override=0;  Delete this object. ;  ; void Draw (Option_t *option="""") override;  Draw all objects in this collection. ;  ; void Dump () const override;  Dump all objects in this collection. ;  ; TIter end () const;  ; TObject * FindObject (const char *name) const override;  Find an object in this collection using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this co",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:6580,Modifiability,inherit,inherited,6580," (TObject *obj)=0;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *optio",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:7485,Modifiability,inherit,inheritance,7485," bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () con",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:9286,Modifiability,inherit,inherits,9286,"const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method to declare a ",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:9403,Modifiability,inherit,inherits,9403,"n () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method to declare a method obsolete. ;  ; void operator delete (void *ptr);  Operator delete. ;  ; void operator delete (void *ptr, void",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:12746,Modifiability,inherit,inherited,12746,"it (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void EmptyGarbageCollection ();  Do the garbage collection. ;  ; static void GarbageCollect (TObject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Opt",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:13354,Modifiability,inherit,inherited,13354,"ion ();  ; static const char * DeclFileName ();  ; static void EmptyGarbageCollection ();  Do the garbage collection. ;  ; static void GarbageCollect (TObject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fName;  ; Int_t fSize;  . Private Member Functions;  TCollection (const TCollection &)=delete;  ; void operator= (const TCollection &)=delete;  . Static Private Attributes; static TC",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:13933,Modifiability,inherit,inherited,13933,"static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fName;  ; Int_t fSize;  . Private Member Functions;  TCollection (const TCollection &)=delete;  ; void operator= (const TCollection &)=delete;  . Static Private Attributes; static TCollection * fgCurrentCollection = nullptr;  ; static Bool_t fgEmptyingGarbage = kFALSE;  ; static TObjectTable * fgGarbageCollection = nullptr;  ; static Int_t fgGarbageStack = 0;  . #include <TCollection.h>. Inheritance diagram for TCollection:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkInitCapacity ; kInitHashTableCapacity . Definition at line 159 of file TCollection.h. ◆ EStatusBits. enum TCollection::EStatusBits. protected . EnumeratorkIsOwner ; kUseRWLock . Definition at line 143 of file TCollection.h. Constructor & Destr",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:16182,Modifiability,inherit,inherit,16182,"otected . Definition at line 152 of file TCollection.h. ◆ ~TCollection(). TCollection::~TCollection ; (; ). virtual . TNamed destructor. ; Definition at line 186 of file TCollection.cxx. Member Function Documentation. ◆ Add(). virtual void TCollection::Add ; (; TObject * ; obj). pure virtual . Implemented in TQCommand, TQUndoManager, TBtree, THashTable, TList, TMap, TObjArray, TRefArray, TSeqCollection, and TSortedList. ◆ AddAll(). void TCollection::AddAll ; (; const TCollection * ; col). virtual . Add all objects from collection col to this collection. ; Reimplemented in THashTable.; Definition at line 195 of file TCollection.cxx. ◆ AddVector(). void TCollection::AddVector ; (; TObject * ; obj1, .  ; ... . ). Add all arguments to the collection. ; The list of objects must be terminated by 0, e.g.: l.AddVector(o1, o2, o3, o4, 0); ; Definition at line 208 of file TCollection.cxx. ◆ AssertClass(). Bool_t TCollection::AssertClass ; (; TClass * ; cl); const. Make sure all objects in this collection inherit from class cl. ; Definition at line 223 of file TCollection.cxx. ◆ begin(). TIter TCollection::begin ; (; ); const. inline . Definition at line 292 of file TCollection.h. ◆ Browse(). void TCollection::Browse ; (; TBrowser * ; b). overridevirtual . Browse this collection (called by TBrowser). ; If b=0, there is no Browse call TObject::Browse(0) instead. This means TObject::Inspect() will be invoked indirectly ; Reimplemented from TObject.; Reimplemented in TRootIconList.; Definition at line 248 of file TCollection.cxx. ◆ Capacity(). Int_t TCollection::Capacity ; (; ); const. inline . Definition at line 167 of file TCollection.h. ◆ Class(). static TClass * TCollection::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCollection::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCollection::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Defi",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:13641,Performance,perform,perform,13641,"Collection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fName;  ; Int_t fSize;  . Private Member Functions;  TCollection (const TCollection &)=delete;  ; void operator= (const TCollection &)=delete;  . Static Private Attributes; static TCollection * fgCurrentCollection = nullptr;  ; static Bool_t fgEmptyingGarbage = kFALSE;  ; static TObjectTable * fgGarbageCollection = nullptr;  ; static Int_t fgGarbageStack = 0;  . #include <TCollection.h>. Inheritance di",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:21599,Performance,perform,perform,21599,"; obj); const. overridevirtual . Find an object in this collection using the object's IsEqual() member function. ; Requires a sequential scan till the object has been found. Returns 0 if object is not found. Typically this function is overridden by a more efficient version in concrete collection classes (e.g. THashTable). ; Reimplemented from TObject.; Reimplemented in TMap, TListOfTypes, THashList, THashTable, TList, TObjArray, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TViewPubDataMembers, and TViewPubFunctions.; Definition at line 337 of file TCollection.cxx. ◆ GarbageCollect(). void TCollection::GarbageCollect ; (; TObject * ; obj). static . Add to the list of things to be cleaned up. ; Definition at line 725 of file TCollection.cxx. ◆ GetCollectionEntryName(). const char * TCollection::GetCollectionEntryName ; (; TObject * ; entry); const. protectedvirtual . For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ; Definition at line 437 of file TCollection.cxx. ◆ GetCurrentCollection(). TCollection * TCollection::GetCurrentCollection ; (; ). static . Return the globally accessible collection. ; Definition at line 680 of file TCollection.cxx. ◆ GetEntries(). virtual Int_t TCollection::GetEntries ; (; ); const. inlinevirtual . Reimplemented in TObjArray, and TRefArray.; Definition at line 179 of file TCollection.h. ◆ GetName(). const char * TCollection::GetName ; (; ); const. overridevirtual . Return name of this collection. ; if no name, return the collection class name. ; Reimplemented from TObject.; Reimplemented in TQCommand, and TQConnection.; Definition at line 351 of file TCollection.cxx. ◆ GetObjectRef(). virtual TObject ** TCollection::GetObjectRef ; (; const TObject * ; obj); const. pure virtual . Implemented in TBtree, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TListOfEnumsWithLock, TListOfFunctio",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:6286,Safety,safe,safe,6286,", Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; virtual TObject * Remove (TObject *obj)=0;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () co",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:34442,Safety,safe,safe,34442,".cxx. ◆ StartGarbageCollection(). void TCollection::StartGarbageCollection ; (; ). static . Set up for garbage collection. ; Definition at line 696 of file TCollection.cxx. ◆ Streamer(). void TCollection::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TObject.; Reimplemented in TQCommand, TQUndoManager, TQConnection, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TSeqCollection, TSortedList, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TGeoNavigatorArray, TGridJobStatusList, and TParallelCoordSelect.; Definition at line 606 of file TCollection.cxx. ◆ StreamerNVirtual(). void TCollection::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 222 of file TCollection.h. ◆ UseRWLock(). bool TCollection::UseRWLock ; (; Bool_t ; enable = true). virtual . Set this collection to use a RW lock upon access, making it thread safe. ; Return the previous state.; Note: To test whether the usage is enabled do: collection->TestBit(TCollection::kUseRWLock); ; Reimplemented in THashList.; Definition at line 761 of file TCollection.cxx. ◆ Write() [1/2]. Int_t TCollection::Write ; (; const char * ; name = nullptr, . Int_t ; option = 0, . Int_t ; bsize = 0 . ); const. overridevirtual . Write all objects in this collection. ; By default all objects in the collection are written individually (each object gets its own key). Note, this is recursive, i.e. objects in collections in the collection are also written individually. To write all objects using a single key specify a name and set option to TObject::kSingleKey (i.e. 1). ; Reimplemented from TObject.; Reimplemented in TMap.; Definition at line 648 of file TCollection.cxx. ◆ Write() [2/2]. Int_t TCollection::Write ; (; const char * ; name = nullptr, . Int_t ; option = 0, . Int_t ; bsize = 0 . ). overridevirtual . Write all objects in t",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:3917,Security,hash,hash,3917,". ;  ; Bool_t Contains (const char *name) const;  ; Bool_t Contains (const TObject *obj) const;  ; void Delete (Option_t *option="""") override=0;  Delete this object. ;  ; void Draw (Option_t *option="""") override;  Draw all objects in this collection. ;  ; void Dump () const override;  Dump all objects in this collection. ;  ; TIter end () const;  ; TObject * FindObject (const char *name) const override;  Find an object in this collection using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this collection using the object's IsEqual() member function. ;  ; virtual Int_t GetEntries () const;  ; const char * GetName () const override;  Return name of this collection. ;  ; virtual TObject ** GetObjectRef (const TObject *obj) const =0;  ; virtual Int_t GetSize () const;  Return the capacity of the collection, i.e. ;  ; virtual Int_t GrowBy (Int_t delta) const;  Increase the collection's capacity by delta slots. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsArgNull (const char *where, const TObject *obj) const;  Returns true if object is a null pointer. ;  ; virtual Bool_t IsEmpty () const;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsOwner () const;  ; Bool_t IsSortable () const override;  ; R__ALWAYS_INLINE Bool_t IsUsingRWLock () const;  ; void ls (Option_t *option="""") const override;  List (ls) all objects in this collection. ;  ; virtual TIterator * MakeIterator (Bool_t dir=kIterForward) const =0;  ; virtual TIterator * MakeReverseIterator () const;  ; Bool_t Notify () override;  'Notify' all objects in this collection. ;  ; TObject * operator() (const char *name) const;  Find an object in this collection by name. ;  ; void Paint (Option_t *option="""") override;  Paint all objects in this collection. ;  ; virtual void Print (Option_t *option, ",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:5815,Security,access,accessible,5815,"Paint (Option_t *option="""") override;  Paint all objects in this collection. ;  ; virtual void Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the wildcard. ;  ; virtual void Print (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; virtual TObject * Remove (TObject *obj)=0;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *metho",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:6261,Security,access,access,6261,", Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; virtual TObject * Remove (TObject *obj)=0;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () co",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:12610,Security,access,accessible,12610,"id SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void EmptyGarbageCollection ();  Do the garbage collection. ;  ; static void GarbageCollect (TObject *obj);  Add to the list of things to be cleaned up. ;  ; static TCollection * GetCurrentCollection ();  Return the globally accessible collection. ;  ; static void StartGarbageCollection ();  Set up for garbage collection. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  EStatusBits { kIsOwner = (1ULL << ( 14 )); , kUseRWLock = (1ULL << ( 16 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the strin",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:21798,Security,access,accessible,21798," is overridden by a more efficient version in concrete collection classes (e.g. THashTable). ; Reimplemented from TObject.; Reimplemented in TMap, TListOfTypes, THashList, THashTable, TList, TObjArray, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TViewPubDataMembers, and TViewPubFunctions.; Definition at line 337 of file TCollection.cxx. ◆ GarbageCollect(). void TCollection::GarbageCollect ; (; TObject * ; obj). static . Add to the list of things to be cleaned up. ; Definition at line 725 of file TCollection.cxx. ◆ GetCollectionEntryName(). const char * TCollection::GetCollectionEntryName ; (; TObject * ; entry); const. protectedvirtual . For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ; Definition at line 437 of file TCollection.cxx. ◆ GetCurrentCollection(). TCollection * TCollection::GetCurrentCollection ; (; ). static . Return the globally accessible collection. ; Definition at line 680 of file TCollection.cxx. ◆ GetEntries(). virtual Int_t TCollection::GetEntries ; (; ); const. inlinevirtual . Reimplemented in TObjArray, and TRefArray.; Definition at line 179 of file TCollection.h. ◆ GetName(). const char * TCollection::GetName ; (; ); const. overridevirtual . Return name of this collection. ; if no name, return the collection class name. ; Reimplemented from TObject.; Reimplemented in TQCommand, and TQConnection.; Definition at line 351 of file TCollection.cxx. ◆ GetObjectRef(). virtual TObject ** TCollection::GetObjectRef ; (; const TObject * ; obj); const. pure virtual . Implemented in TBtree, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TListOfEnumsWithLock, TListOfFunctions, TViewPubDataMembers, and TViewPubFunctions. ◆ GetSize(). virtual Int_t TCollection::GetSize ; (; ); const. inlinevirtual . Return the capacity of the collection, i.e. ; the current total amount of space that has been allocated ",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:23320,Security,hash,hash,23320,"x. ◆ GetObjectRef(). virtual TObject ** TCollection::GetObjectRef ; (; const TObject * ; obj); const. pure virtual . Implemented in TBtree, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TListOfEnumsWithLock, TListOfFunctions, TViewPubDataMembers, and TViewPubFunctions. ◆ GetSize(). virtual Int_t TCollection::GetSize ; (; ); const. inlinevirtual . Return the capacity of the collection, i.e. ; the current total amount of space that has been allocated so far. Same as Capacity. Use GetEntries to get the number of elements currently in the collection. ; Reimplemented in THashTable, TListOfEnumsWithLock, TListOfFunctions, TViewPubDataMembers, and TViewPubFunctions.; Definition at line 184 of file TCollection.h. ◆ GrowBy(). Int_t TCollection::GrowBy ; (; Int_t ; delta); const. virtual . Increase the collection's capacity by delta slots. ; Definition at line 360 of file TCollection.cxx. ◆ Hash(). ULong_t TCollection::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TCollection::HashULong_t Hash() const overrideReturn hash value for this object.Definition TCollection.h:186; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirt",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:24196,Security,hash,hash,24196,"lots. ; Definition at line 360 of file TCollection.cxx. ◆ Hash(). ULong_t TCollection::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TCollection::HashULong_t Hash() const overrideReturn hash value for this object.Definition TCollection.h:186; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:987; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 186 of file TCollection.h. ◆ IsA(). TClass * TCollection::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TQCommand, TQUndoManager, TQConnection, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TSeqCollection, TSortedList, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TGeoNavigatorArray, TGridJobStatusList, and TParallelCoordSelect.; Definition at line 222 of file TCollection.h",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:32775,Security,access,accessible,32775," in THashList, TList, TObjArray, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TViewPubDataMembers, TViewPubFunctions, and TRootBrowserHistory.; Definition at line 574 of file TCollection.cxx. ◆ Remove(). virtual TObject * TCollection::Remove ; (; TObject * ; obj). pure virtual . Implemented in TMap, TBtree, TClonesArray, THashList, THashTable, TList, TObjArray, TOrdCollection, TRefArray, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TViewPubDataMembers, and TViewPubFunctions. ◆ RemoveAll() [1/2]. void TCollection::RemoveAll ; (; ). inline . Definition at line 204 of file TCollection.h. ◆ RemoveAll() [2/2]. void TCollection::RemoveAll ; (; TCollection * ; col). virtual . Remove all objects in collection col from this collection. ; Definition at line 594 of file TCollection.cxx. ◆ SetCurrentCollection(). void TCollection::SetCurrentCollection ; (; ). Set this collection to be the globally accessible collection. ; Definition at line 688 of file TCollection.cxx. ◆ SetName(). void TCollection::SetName ; (; const char * ; name). inline . Definition at line 206 of file TCollection.h. ◆ SetOwner(). void TCollection::SetOwner ; (; Bool_t ; enable = kTRUE). virtual . Set whether this collection is the owner (enable==true) of its content. ; If it is the owner of its contents, these objects will be deleted whenever the collection itself is deleted. The objects might also be deleted or destructed when Clear is called (depending on the collection). ; Reimplemented in TClonesArray.; Definition at line 746 of file TCollection.cxx. ◆ StartGarbageCollection(). void TCollection::StartGarbageCollection ; (; ). static . Set up for garbage collection. ; Definition at line 696 of file TCollection.cxx. ◆ Streamer(). void TCollection::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TObject.; Reimplem",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:34417,Security,access,access,34417,".cxx. ◆ StartGarbageCollection(). void TCollection::StartGarbageCollection ; (; ). static . Set up for garbage collection. ; Definition at line 696 of file TCollection.cxx. ◆ Streamer(). void TCollection::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TObject.; Reimplemented in TQCommand, TQUndoManager, TQConnection, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TSeqCollection, TSortedList, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TGeoNavigatorArray, TGridJobStatusList, and TParallelCoordSelect.; Definition at line 606 of file TCollection.cxx. ◆ StreamerNVirtual(). void TCollection::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 222 of file TCollection.h. ◆ UseRWLock(). bool TCollection::UseRWLock ; (; Bool_t ; enable = true). virtual . Set this collection to use a RW lock upon access, making it thread safe. ; Return the previous state.; Note: To test whether the usage is enabled do: collection->TestBit(TCollection::kUseRWLock); ; Reimplemented in THashList.; Definition at line 761 of file TCollection.cxx. ◆ Write() [1/2]. Int_t TCollection::Write ; (; const char * ; name = nullptr, . Int_t ; option = 0, . Int_t ; bsize = 0 . ); const. overridevirtual . Write all objects in this collection. ; By default all objects in the collection are written individually (each object gets its own key). Note, this is recursive, i.e. objects in collections in the collection are also written individually. To write all objects using a single key specify a name and set option to TObject::kSingleKey (i.e. 1). ; Reimplemented from TObject.; Reimplemented in TMap.; Definition at line 648 of file TCollection.cxx. ◆ Write() [2/2]. Int_t TCollection::Write ; (; const char * ; name = nullptr, . Int_t ; option = 0, . Int_t ; bsize = 0 . ). overridevirtual . Write all objects in t",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:23895,Testability,log,logarithmic,23895,"located so far. Same as Capacity. Use GetEntries to get the number of elements currently in the collection. ; Reimplemented in THashTable, TListOfEnumsWithLock, TListOfFunctions, TViewPubDataMembers, and TViewPubFunctions.; Definition at line 184 of file TCollection.h. ◆ GrowBy(). Int_t TCollection::GrowBy ; (; Int_t ; delta); const. virtual . Increase the collection's capacity by delta slots. ; Definition at line 360 of file TCollection.cxx. ◆ Hash(). ULong_t TCollection::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TCollection::HashULong_t Hash() const overrideReturn hash value for this object.Definition TCollection.h:186; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:987; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 186 of file TCollection.h. ◆ IsA(). TClass * TCollection::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemen",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTCollection.html:34487,Testability,test,test,34487,"inition at line 696 of file TCollection.cxx. ◆ Streamer(). void TCollection::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TObject.; Reimplemented in TQCommand, TQUndoManager, TQConnection, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TSeqCollection, TSortedList, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TGeoNavigatorArray, TGridJobStatusList, and TParallelCoordSelect.; Definition at line 606 of file TCollection.cxx. ◆ StreamerNVirtual(). void TCollection::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 222 of file TCollection.h. ◆ UseRWLock(). bool TCollection::UseRWLock ; (; Bool_t ; enable = true). virtual . Set this collection to use a RW lock upon access, making it thread safe. ; Return the previous state.; Note: To test whether the usage is enabled do: collection->TestBit(TCollection::kUseRWLock); ; Reimplemented in THashList.; Definition at line 761 of file TCollection.cxx. ◆ Write() [1/2]. Int_t TCollection::Write ; (; const char * ; name = nullptr, . Int_t ; option = 0, . Int_t ; bsize = 0 . ); const. overridevirtual . Write all objects in this collection. ; By default all objects in the collection are written individually (each object gets its own key). Note, this is recursive, i.e. objects in collections in the collection are also written individually. To write all objects using a single key specify a name and set option to TObject::kSingleKey (i.e. 1). ; Reimplemented from TObject.; Reimplemented in TMap.; Definition at line 648 of file TCollection.cxx. ◆ Write() [2/2]. Int_t TCollection::Write ; (; const char * ; name = nullptr, . Int_t ; option = 0, . Int_t ; bsize = 0 . ). overridevirtual . Write all objects in this collection. ; By default all objects in the collection are written individually (each object gets its own key). Note, this ",MatchSource.WIKI,doc/v632/classTCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTCollection.html
https://root.cern/doc/v632/classTDirectory.html:824,Availability,down,down,824,". ROOT: TDirectory Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Friends |; List of all members ; TDirectory Class ReferenceCore ROOT classes » Base ROOT classes. ; Describe directory structure in memory. . PyROOT; It is possible to retrieve the content of a TDirectory object just like getting items from a Python dictionary. Moreover, once a subdirectory or object is accessed for the first time, it is cached for later use. For example, assuming d is a TDirectory instance: # Access a subdirectory; d[""subdir""]; ; # We can go further down in the hierarchy of directories; d[""subdir""][""subsubdir""]; ; # Access an object (e.g. a histogram) in the directory; d[""obj""]; ; # ... or in a subdirectory; d[""subdir""][""obj""]; ; # Wrong key: raises KeyError; d[""wrongAttr""]; Furthermore, TDirectory implements a WriteObject Python method which relies on TDirectory::WriteObjectAny. This method is a no-op for TDirectory objects, but it is useful for objects of TDirectory subclasses such as TDirectoryFile and TFile, which inherit it. Please refer to the documentation of those classes for more information. . Definition at line 45 of file TDirectory.h. Classes; class  TContext;  TDirectory::TContext keeps track and restore the current directory. More...;  . Public Member Functions;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; virtual void Add (TObject *obj, Bool_t replace=kFALSE);  ; virtual void Append (TObject *obj, Bool_t replace=kFALSE);  Append object to this directory. ;  ; virtual Int_t AppendKey (TKey *);  ; void Browse (T",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:11642,Availability,error,error,11642," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:11731,Availability,error,error,11731,"ave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out.",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:11886,Availability,error,error,11886,"hether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ; ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:12183,Availability,error,error,12183,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:15718,Availability,error,error,15718," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:35797,Availability,error,error,35797,"ryFile.; Definition at line 866 of file TDirectory.cxx. ◆ Get() [2/2]. template<class T > . T * TDirectory::Get ; (; const char * ; namecycle). inline . See documentation of TDirectoryFile::Get(const char *namecycle) ; Definition at line 205 of file TDirectory.h. ◆ GetBufferSize(). virtual Int_t TDirectory::GetBufferSize ; (; ); const. inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 219 of file TDirectory.h. ◆ GetDirectory(). TDirectory * TDirectory::GetDirectory ; (; const char * ; apath, . Bool_t ; printError = false, . const char * ; funcname = ""GetDirectory"" . ). virtual . Find a directory using apath. ; It apath is null or empty, returns ""this"" directory. Otherwise use apath to find a directory. The absolute path syntax is: file.root:/dir1/dir2; where file.root is the file and /dir1/dir2 the desired subdirectory in the file. Relative syntax is relative to ""this"" directory. E.g: ../aa. Returns 0 in case path does not exist. If printError is true, use Error with 'funcname' to issue an error message. ; Reimplemented in TDirectoryFile.; Definition at line 448 of file TDirectory.cxx. ◆ GetFile(). virtual TFile * TDirectory::GetFile ; (; ); const. inlinevirtual . Reimplemented in TROOT, and TDirectoryFile.; Definition at line 220 of file TDirectory.h. ◆ GetKey(). virtual TKey * TDirectory::GetKey ; (; const char * ; , . Short_t ; = 9999 . ); const. inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 221 of file TDirectory.h. ◆ GetList(). virtual TList * TDirectory::GetList ; (; ); const. inlinevirtual . Definition at line 222 of file TDirectory.h. ◆ GetListOfKeys(). virtual TList * TDirectory::GetListOfKeys ; (; ); const. inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 223 of file TDirectory.h. ◆ GetMother(). TObject * TDirectory::GetMother ; (; ); const. inline . Definition at line 224 of file TDirectory.h. ◆ GetMotherDir(). TDirectory * TDirectory::GetMotherDir ; (; ); const. inline . Definition at line 225",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:42718,Availability,error,error,42718,"efinition at line 236 of file TDirectory.h. ◆ IsWritable(). virtual Bool_t TDirectory::IsWritable ; (; ); const. inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 237 of file TDirectory.h. ◆ ls(). void TDirectory::ls ; (; Option_t * ; option = """"); const. overridevirtual . List Directory contents. ; Indentation is used to identify the directory tree Subdirectories are listed first, then objects in memory.; The option can has the following format: [<regexp>]; The <regexp> will be used to match the name of the objects. By default memory and disk objects are listed. ; Reimplemented from TObject.; Reimplemented in TROOT, TDirectoryFile, and TFile.; Definition at line 1143 of file TDirectory.cxx. ◆ mkdir(). TDirectory * TDirectory::mkdir ; (; const char * ; name, . const char * ; title = """", . Bool_t ; returnExistingDirectory = kFALSE . ). virtual . Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."". ; Returns 0 in case of error or if a sub-directory (hierarchy) with the requested name already exists. returnExistingDirectory returns a pointer to an already existing sub-directory with the same name. Returns a pointer to the created sub-directory or to the top sub-directory of the hierarchy (in the above example, the returned TDirectory * always points to ""a""). In particular, the steps to create first a/b/c and then a/b/d without receiving errors are: TFile * file = new TFile(""afile"",""RECREATE"");; file->mkdir(""a"");; file->cd(""a"");; gDirectory->mkdir(""b/c"");; gDirectory->cd(""b"");; gDirectory->mkdir(""d"");; gDirectory#define gDirectoryDefinition TDirectory.h:384; TDirectoryFile::cdBool_t cd() overrideChange current directory to ""this"" directory.Definition TDirectoryFile.cxx:334; TDirectoryFile::mkdirTDirectory * mkdir(const char *name, const char *title="""", Bool_t returnExistingDirectory=kFALSE) overrideCreate a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."".Definition TDirectoryFile.cxx:1249; TFileA ROOT file is an on-",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:43141,Availability,error,errors,43141,"rmat: [<regexp>]; The <regexp> will be used to match the name of the objects. By default memory and disk objects are listed. ; Reimplemented from TObject.; Reimplemented in TROOT, TDirectoryFile, and TFile.; Definition at line 1143 of file TDirectory.cxx. ◆ mkdir(). TDirectory * TDirectory::mkdir ; (; const char * ; name, . const char * ; title = """", . Bool_t ; returnExistingDirectory = kFALSE . ). virtual . Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."". ; Returns 0 in case of error or if a sub-directory (hierarchy) with the requested name already exists. returnExistingDirectory returns a pointer to an already existing sub-directory with the same name. Returns a pointer to the created sub-directory or to the top sub-directory of the hierarchy (in the above example, the returned TDirectory * always points to ""a""). In particular, the steps to create first a/b/c and then a/b/d without receiving errors are: TFile * file = new TFile(""afile"",""RECREATE"");; file->mkdir(""a"");; file->cd(""a"");; gDirectory->mkdir(""b/c"");; gDirectory->cd(""b"");; gDirectory->mkdir(""d"");; gDirectory#define gDirectoryDefinition TDirectory.h:384; TDirectoryFile::cdBool_t cd() overrideChange current directory to ""this"" directory.Definition TDirectoryFile.cxx:334; TDirectoryFile::mkdirTDirectory * mkdir(const char *name, const char *title="""", Bool_t returnExistingDirectory=kFALSE) overrideCreate a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."".Definition TDirectoryFile.cxx:1249; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; or TFile * file = new TFile(""afile"",""RECREATE"");; file->mkdir(""a"");; file->cd(""a"");; gDirectory->mkdir(""b/c"");; gDirectory->mkdir(""b/d"", """", true);. Reimplemented in TDirectoryFile.; Definition at line 1102 of file TDirectory.cxx. ◆ OpenFile(). virtual TFile * TDirectory::OpenFile ; (; const char * ; , . Option_t * ; = """", . const char * ; = """", . Int_t ; ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:52333,Energy Efficiency,reduce,reduces,52333,"d buffer is created to hold the compressed buffer.; Reservation of the corresponding space in the file by looking in the TFree list of free blocks of the file.; The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object. By default, the buffersize will be taken from the average buffer size of all objects written to the current file so far.; If a name is specified, it will be the name of the key. If name is not given, the name of the key will be the name as returned by GetName().; The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete Using the kOverwrite option a previous key with the same name is overwritten. The previous key is deleted before writing the new object. Using the kWriteDelete option a previous key with the same name is deleted only after the new object has been written. This option is safer than kOverwrite but it is slower. NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile– the space is simply freed up to be overwritten; in the case of a TTree, it is more complicated. If one opens a TTree, appends some entries, then writes it out, the behaviour is effectively the same. If, however, one creates a new TTree and writes it out in this way, only the metadata is replaced, effectively making the old data invisible without deleting it. TTree::Delete() can be used to mark all disk space occupied by a TTree as free before overwriting its metadata this way. The kSingleKey option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key.; An object is read from the file into memory via TKey::Read() or via TObject::Read().; The function returns the total number of bytes written to the file. It returns 0 if the object cannot be written. ; Reimplemented from TObject.; Reimplemented in TSQLFile, TXMLFile, TFile, TParallelMergingFile, and TDirectoryFile.; Definition at line 265 of file TDirectory.h. ◆ Write() ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:11648,Integrability,message,message,11648," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:12189,Integrability,message,message,12189,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:12979,Integrability,message,message,12979,". ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be o",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:15724,Integrability,message,message,15724," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:16097,Integrability,message,message,16097," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; st",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:35803,Integrability,message,message,35803,"ryFile.; Definition at line 866 of file TDirectory.cxx. ◆ Get() [2/2]. template<class T > . T * TDirectory::Get ; (; const char * ; namecycle). inline . See documentation of TDirectoryFile::Get(const char *namecycle) ; Definition at line 205 of file TDirectory.h. ◆ GetBufferSize(). virtual Int_t TDirectory::GetBufferSize ; (; ); const. inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 219 of file TDirectory.h. ◆ GetDirectory(). TDirectory * TDirectory::GetDirectory ; (; const char * ; apath, . Bool_t ; printError = false, . const char * ; funcname = ""GetDirectory"" . ). virtual . Find a directory using apath. ; It apath is null or empty, returns ""this"" directory. Otherwise use apath to find a directory. The absolute path syntax is: file.root:/dir1/dir2; where file.root is the file and /dir1/dir2 the desired subdirectory in the file. Relative syntax is relative to ""this"" directory. E.g: ../aa. Returns 0 in case path does not exist. If printError is true, use Error with 'funcname' to issue an error message. ; Reimplemented in TDirectoryFile.; Definition at line 448 of file TDirectory.cxx. ◆ GetFile(). virtual TFile * TDirectory::GetFile ; (; ); const. inlinevirtual . Reimplemented in TROOT, and TDirectoryFile.; Definition at line 220 of file TDirectory.h. ◆ GetKey(). virtual TKey * TDirectory::GetKey ; (; const char * ; , . Short_t ; = 9999 . ); const. inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 221 of file TDirectory.h. ◆ GetList(). virtual TList * TDirectory::GetList ; (; ); const. inlinevirtual . Definition at line 222 of file TDirectory.h. ◆ GetListOfKeys(). virtual TList * TDirectory::GetListOfKeys ; (; ); const. inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 223 of file TDirectory.h. ◆ GetMother(). TObject * TDirectory::GetMother ; (; ); const. inline . Definition at line 224 of file TDirectory.h. ◆ GetMotherDir(). TDirectory * TDirectory::GetMotherDir ; (; ); const. inline . Definition at line 225",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:47684,Integrability,message,message,47684,"oid TDirectory::rmdir ; (; const char * ; name). virtual . Removes subdirectory from the directory When directory is deleted, all keys in all subdirectories will be read first and deleted from file (if exists) Equivalent call is Delete(""name;*"");. ; Reimplemented in TDirectoryFile.; Definition at line 1227 of file TDirectory.cxx. ◆ Save(). virtual void TDirectory::Save ; (; ). inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 253 of file TDirectory.h. ◆ SaveObjectAs(). Int_t TDirectory::SaveObjectAs ; (; const TObject * ; obj, . const char * ; filename = """", . Option_t * ; option = """" . ); const. virtual . Save object in filename, if filename is nullptr or """", a file with ""<objectname>.root"" is created. ; The name of the key is the object name. By default new file will be created. Using option ""a"", one can append object to the existing ROOT file. If the operation is successful, it returns the number of bytes written to the file otherwise it returns 0. By default a message is printed. Use option ""q"" to not print the message. If filename contains "".json"" extension, JSON representation of the object will be created and saved in the text file. Such file can be used in JavaScript ROOT (https://root.cern/js/) to display object in web browser When creating JSON file, option string may contain compression level from 0 to 3 (default 0) ; Reimplemented in TDirectoryFile.; Definition at line 1250 of file TDirectory.cxx. ◆ SaveSelf(). virtual void TDirectory::SaveSelf ; (; Bool_t ; = kFALSE). inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 255 of file TDirectory.h. ◆ SetBufferSize(). virtual void TDirectory::SetBufferSize ; (; Int_t ; ). inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 256 of file TDirectory.h. ◆ SetModified(). virtual void TDirectory::SetModified ; (; ). inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 257 of file TDirectory.h. ◆ SetMother(). virtual void TDirectory::SetMother ; (; ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:47736,Integrability,message,message,47736," * ; name). virtual . Removes subdirectory from the directory When directory is deleted, all keys in all subdirectories will be read first and deleted from file (if exists) Equivalent call is Delete(""name;*"");. ; Reimplemented in TDirectoryFile.; Definition at line 1227 of file TDirectory.cxx. ◆ Save(). virtual void TDirectory::Save ; (; ). inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 253 of file TDirectory.h. ◆ SaveObjectAs(). Int_t TDirectory::SaveObjectAs ; (; const TObject * ; obj, . const char * ; filename = """", . Option_t * ; option = """" . ); const. virtual . Save object in filename, if filename is nullptr or """", a file with ""<objectname>.root"" is created. ; The name of the key is the object name. By default new file will be created. Using option ""a"", one can append object to the existing ROOT file. If the operation is successful, it returns the number of bytes written to the file otherwise it returns 0. By default a message is printed. Use option ""q"" to not print the message. If filename contains "".json"" extension, JSON representation of the object will be created and saved in the text file. Such file can be used in JavaScript ROOT (https://root.cern/js/) to display object in web browser When creating JSON file, option string may contain compression level from 0 to 3 (default 0) ; Reimplemented in TDirectoryFile.; Definition at line 1250 of file TDirectory.cxx. ◆ SaveSelf(). virtual void TDirectory::SaveSelf ; (; Bool_t ; = kFALSE). inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 255 of file TDirectory.h. ◆ SetBufferSize(). virtual void TDirectory::SetBufferSize ; (; Int_t ; ). inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 256 of file TDirectory.h. ◆ SetModified(). virtual void TDirectory::SetModified ; (; ). inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 257 of file TDirectory.h. ◆ SetMother(). virtual void TDirectory::SetMother ; (; TObject * ; mother). inlinevirtual . ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:1302,Modifiability,inherit,inherit,1302,"ted Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Friends |; List of all members ; TDirectory Class ReferenceCore ROOT classes » Base ROOT classes. ; Describe directory structure in memory. . PyROOT; It is possible to retrieve the content of a TDirectory object just like getting items from a Python dictionary. Moreover, once a subdirectory or object is accessed for the first time, it is cached for later use. For example, assuming d is a TDirectory instance: # Access a subdirectory; d[""subdir""]; ; # We can go further down in the hierarchy of directories; d[""subdir""][""subsubdir""]; ; # Access an object (e.g. a histogram) in the directory; d[""obj""]; ; # ... or in a subdirectory; d[""subdir""][""obj""]; ; # Wrong key: raises KeyError; d[""wrongAttr""]; Furthermore, TDirectory implements a WriteObject Python method which relies on TDirectory::WriteObjectAny. This method is a no-op for TDirectory objects, but it is useful for objects of TDirectory subclasses such as TDirectoryFile and TFile, which inherit it. Please refer to the documentation of those classes for more information. . Definition at line 45 of file TDirectory.h. Classes; class  TContext;  TDirectory::TContext keeps track and restore the current directory. More...;  . Public Member Functions;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; virtual void Add (TObject *obj, Bool_t replace=kFALSE);  ; virtual void Append (TObject *obj, Bool_t replace=kFALSE);  Append object to this directory. ;  ; virtual Int_t AppendKey (TKey *);  ; void Browse (TBrowser *b) override;  Browse the content of the directory. ;  ; virtual void Build (TFile *motherFile=nullptr, TDirectory *motherDir=nullptr);  ; virtual Bool_t cd ();  Change current directory to ""this"" directory. ;  ; virtual Bool_t ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:8859,Modifiability,inherit,inherited,8859,"t=0) override;  Write this object to the current directory. ;  ; virtual void WriteDirHeader ();  ; virtual void WriteKeys ();  ; template<typename T > ; std::enable_if_t<!std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ; template<typename T > ; std::enable_if_t< std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ; virtual Int_t WriteObjectAny (const void *, const char *, const char *, Option_t *="""", Int_t=0);  ; virtual Int_t WriteObjectAny (const void *, const TClass *, const char *, Option_t *="""", Int_t=0);  ; virtual Int_t WriteTObject (const TObject *obj, const char *name=nullptr, Option_t *="""", Int_t=0);  Write an object with proper type checking. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ; ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:10440,Modifiability,inherit,inherited,10440,"d) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:11278,Modifiability,inherit,inheritance,11278,"amer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics sys",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:13077,Modifiability,inherit,inherits,13077," action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op).",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:13194,Modifiability,inherit,inherits,13194,"const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:16949,Modifiability,inherit,inherited,16949,"AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:17159,Modifiability,inherit,inherited,17159,"AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:17826,Modifiability,inherit,inherited,17826,"0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:18787,Modifiability,inherit,inherited,18787,"t; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  . Protected Attributes; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Bool_t",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:19745,Modifiability,inherit,inherited,19745,". ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  . Protected Attributes; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . Friends; struct ROOT::Internal::TDirectoryAtomicAdapter;  ; class TContext;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . #include <TDirectory.h>. Inheritance diagram for TDirectory:. This browser is not able",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:20043,Modifiability,inherit,inherited,20043,"ory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  . Protected Attributes; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . Friends; struct ROOT::Internal::TDirectoryAtomicAdapter;  ; class TContext;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . #include <TDirectory.h>. Inheritance diagram for TDirectory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ SharedGDirectory_t. using TDirectory::SharedGDirectory_t = std::shared_ptr<std::atomic<TDirectory *> >. protected . Pointer to a list of TContext object pointing to this TDirectory. ; Definition at line 147 of file TDirectory.h. Constructor & Destru",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:34074,Modifiability,inherit,inherits,34074,"virtual . Reimplemented in TROOT, and TDirectoryFile.; Definition at line 202 of file TDirectory.h. ◆ Get() [1/2]. TObject * TDirectory::Get ; (; const char * ; namecycle). virtual . Return pointer to object identified by namecycle. ; namecycle has the format name;cycle; name = * is illegal, cycle = * is illegal; cycle = """" or cycle = 9999 ==> apply to a memory object. examples:; foo : get object named foo in memory if object is not in memory, try with highest cycle from file; foo;1 : get cycle 1 of foo on file. The retrieved object should in principle derive from TObject. If not, the function TDirectory::GetObject should be called. However, this function will still work for a non-TObject, providing that the calling application cast the return type to the correct type (which is the actual type of the object).; NOTE:; The method GetObject offer better protection and avoid the need for any cast: MyClass *obj;; directory->GetObject(""some object"",obj);; if (obj) { ... the object exist and inherits from MyClass ... }; VERY IMPORTANT NOTE:; In case the class of this object derives from TObject but not as a first inheritance, one must use dynamic_cast<>(). Example 1: Normal case:; class MyClass : public TObject, public AnotherClass; TObjectMother of all ROOT objects.Definition TObject.h:41; then on return, one can do: MyClass *obj = (MyClass*)directory->Get(""some object of MyClass"");; Example 2: Special case:; class MyClass : public AnotherClass, public TObject; then on return, one must do: MyClass *obj = dynamic_cast<MyClass*>(directory->Get(""some object of MyClass""));; Of course, dynamic_cast<> can also be used in the example 1. ; Reimplemented in TDirectoryFile, and TDirectoryFile.; Definition at line 866 of file TDirectory.cxx. ◆ Get() [2/2]. template<class T > . T * TDirectory::Get ; (; const char * ; namecycle). inline . See documentation of TDirectoryFile::Get(const char *namecycle) ; Definition at line 205 of file TDirectory.h. ◆ GetBufferSize(). virtual Int_t TDire",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:34198,Modifiability,inherit,inheritance,34198,".h. ◆ Get() [1/2]. TObject * TDirectory::Get ; (; const char * ; namecycle). virtual . Return pointer to object identified by namecycle. ; namecycle has the format name;cycle; name = * is illegal, cycle = * is illegal; cycle = """" or cycle = 9999 ==> apply to a memory object. examples:; foo : get object named foo in memory if object is not in memory, try with highest cycle from file; foo;1 : get cycle 1 of foo on file. The retrieved object should in principle derive from TObject. If not, the function TDirectory::GetObject should be called. However, this function will still work for a non-TObject, providing that the calling application cast the return type to the correct type (which is the actual type of the object).; NOTE:; The method GetObject offer better protection and avoid the need for any cast: MyClass *obj;; directory->GetObject(""some object"",obj);; if (obj) { ... the object exist and inherits from MyClass ... }; VERY IMPORTANT NOTE:; In case the class of this object derives from TObject but not as a first inheritance, one must use dynamic_cast<>(). Example 1: Normal case:; class MyClass : public TObject, public AnotherClass; TObjectMother of all ROOT objects.Definition TObject.h:41; then on return, one can do: MyClass *obj = (MyClass*)directory->Get(""some object of MyClass"");; Example 2: Special case:; class MyClass : public AnotherClass, public TObject; then on return, one must do: MyClass *obj = dynamic_cast<MyClass*>(directory->Get(""some object of MyClass""));; Of course, dynamic_cast<> can also be used in the example 1. ; Reimplemented in TDirectoryFile, and TDirectoryFile.; Definition at line 866 of file TDirectory.cxx. ◆ Get() [2/2]. template<class T > . T * TDirectory::Get ; (; const char * ; namecycle). inline . See documentation of TDirectoryFile::Get(const char *namecycle) ; Definition at line 205 of file TDirectory.h. ◆ GetBufferSize(). virtual Int_t TDirectory::GetBufferSize ; (; ); const. inlinevirtual . Reimplemented in TDirectoryFile.; Definitio",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:38583,Modifiability,inherit,inheriting,38583,"tory::GetObjectChecked ; (; const char * ; namecycle, . const char * ; classname . ). virtual . See documentation of TDirectory::GetObjectCheck(const char *namecycle, const TClass *cl) ; Reimplemented in TDirectoryFile.; Definition at line 929 of file TDirectory.cxx. ◆ GetObjectChecked() [2/2]. void * TDirectory::GetObjectChecked ; (; const char * ; namecycle, . const TClass * ; expectedClass . ). virtual . Return pointer to object identified by namecycle if and only if the actual object is a type suitable to be stored as a pointer to a ""expectedClass"" If expectedClass is null, no check is performed. ; namecycle has the format name;cycle; name = * is illegal, cycle = * is illegal; cycle = """" or cycle = 9999 ==> apply to a memory object. VERY IMPORTANT NOTE:; The calling application must cast the returned pointer to the type described by the 2 arguments (i.e. cl): MyClass *obj = (MyClass*)directory->GetObjectChecked(""some object of MyClass"",""MyClass""));; Note: We recommend using the method TDirectory::GetObject: MyClass *obj = nullptr;; directory->GetObject(""some object inheriting from MyClass"",obj);; if (obj) { ... we found what we are looking for ... }; whatstatic const char * whatDefinition stlLoader.cc:5. Reimplemented in TDirectoryFile.; Definition at line 958 of file TDirectory.cxx. ◆ GetObjectUnchecked(). void * TDirectory::GetObjectUnchecked ; (; const char * ; namecycle). virtual . Return pointer to object identified by namecycle. ; The returned object may or may not derive from TObject. namecycle has the format name;cycle; name = * is illegal, cycle = * is illegal; cycle = """" or cycle = 9999 ==> apply to a memory object. VERY IMPORTANT NOTE:; The calling application must cast the returned object to the final type, e.g. MyClass *obj = (MyClass*)directory->GetObject(""some object of MyClass"");. Reimplemented in TDirectoryFile.; Definition at line 921 of file TDirectory.cxx. ◆ GetPath(). const char * TDirectory::GetPath ; (; ); const. virtual . Returns the full",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:692,Performance,cache,cached,692,". ROOT: TDirectory Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Friends |; List of all members ; TDirectory Class ReferenceCore ROOT classes » Base ROOT classes. ; Describe directory structure in memory. . PyROOT; It is possible to retrieve the content of a TDirectory object just like getting items from a Python dictionary. Moreover, once a subdirectory or object is accessed for the first time, it is cached for later use. For example, assuming d is a TDirectory instance: # Access a subdirectory; d[""subdir""]; ; # We can go further down in the hierarchy of directories; d[""subdir""][""subsubdir""]; ; # Access an object (e.g. a histogram) in the directory; d[""obj""]; ; # ... or in a subdirectory; d[""subdir""][""obj""]; ; # Wrong key: raises KeyError; d[""wrongAttr""]; Furthermore, TDirectory implements a WriteObject Python method which relies on TDirectory::WriteObjectAny. This method is a no-op for TDirectory objects, but it is useful for objects of TDirectory subclasses such as TDirectoryFile and TFile, which inherit it. Please refer to the documentation of those classes for more information. . Definition at line 45 of file TDirectory.h. Classes; class  TContext;  TDirectory::TContext keeps track and restore the current directory. More...;  . Public Member Functions;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; virtual void Add (TObject *obj, Bool_t replace=kFALSE);  ; virtual void Append (TObject *obj, Bool_t replace=kFALSE);  Append object to this directory. ;  ; virtual Int_t AppendKey (TKey *);  ; void Browse (T",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:4842,Performance,perform,performed,4842,"mecycle. ;  ; template<class T > ; T * Get (const char *namecycle);  See documentation of TDirectoryFile::Get(const char *namecycle) ;  ; virtual Int_t GetBufferSize () const;  ; virtual TDirectory * GetDirectory (const char *namecycle, Bool_t printError=false, const char *funcname=""GetDirectory"");  Find a directory using apath. ;  ; virtual TFile * GetFile () const;  ; virtual TKey * GetKey (const char *, Short_t=9999) const;  ; virtual TList * GetList () const;  ; virtual TList * GetListOfKeys () const;  ; TObject * GetMother () const;  ; TDirectory * GetMotherDir () const;  ; virtual Int_t GetNbytesKeys () const;  ; virtual Int_t GetNkeys () const;  ; template<class T > ; void GetObject (const char *namecycle, T *&ptr);  Get an object with proper type checking. ;  ; virtual void * GetObjectChecked (const char *namecycle, const char *classname);  See documentation of TDirectory::GetObjectCheck(const char *namecycle, const TClass *cl) ;  ; virtual void * GetObjectChecked (const char *namecycle, const TClass *cl);  Return pointer to object identified by namecycle if and only if the actual object is a type suitable to be stored as a pointer to a ""expectedClass"" If expectedClass is null, no check is performed. ;  ; virtual void * GetObjectUnchecked (const char *namecycle);  Return pointer to object identified by namecycle. ;  ; virtual const char * GetPath () const;  Returns the full path of the directory. ;  ; virtual const char * GetPathStatic () const;  Returns the full path of the directory. ;  ; virtual Long64_t GetSeekDir () const;  ; virtual Long64_t GetSeekKeys () const;  ; virtual Long64_t GetSeekParent () const;  ; TUUID GetUUID () const;  ; TClass * IsA () const override;  ; Bool_t IsBuilt () const;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; virtual Bool_t IsModified () const;  ; virtual Bool_t IsWritable () const;  ; void ls (Option_t *option="""") const over",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:27944,Performance,load,load,27944,"ss(). static TClass * TDirectory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDirectory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TDirectory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 308 of file TDirectory.h. ◆ CleanTargets(). void TDirectory::CleanTargets ; (; ). protected . Clean the pointers to this object (gDirectory, TContext, etc.). ; Definition at line 264 of file TDirectory.cxx. ◆ Clear(). void TDirectory::Clear ; (; Option_t * ; option = """"). overridevirtual . Delete all objects from a Directory list. ; Reimplemented from TObject.; Definition at line 634 of file TDirectory.cxx. ◆ CloneObject(). TObject * TDirectory::CloneObject ; (; const TObject * ; obj, . Bool_t ; autoadd = kTRUE . ). virtual . Clone an object. ; This function is called when the directory is not a TDirectoryFile. This version has to load the I/O package, hence via Cling.; If autoadd is true and if the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirector. This usually means that the object will be appended to the current ROOT directory. ; Reimplemented in TDirectoryFile.; Definition at line 364 of file TDirectory.cxx. ◆ Close(). void TDirectory::Close ; (; Option_t * ; option = """"). virtual . Delete all objects from memory and directory structure itself. ; if option is ""slow"", iterate through the containers in a way to can handle 'external' modification (induced by recursions) if option is ""nodelete"", write the TDirectory but do not delete the contained objects. ; Reimplemented in TSQLFile, TXMLFile, TDirectoryFile, TFile, TNetFile, TParallelMergingFile, and TWebFile.; Definition at line 645 of file TDirectory.cxx. ◆ Copy(). void TDirectory::Copy ; (; TObject & ; object); const. inlineoverridevirtual . Copy this to obj. ; Reimplemented from TObject.; Reimple",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:38094,Performance,perform,performed,38094,"GetNkeys ; (; ); const. inlinevirtual . Reimplemented in TDirectoryFile.; Definition at line 227 of file TDirectory.h. ◆ GetObject(). template<class T > . void TDirectory::GetObject ; (; const char * ; namecycle, . T *& ; ptr . ). inline . Get an object with proper type checking. ; If the object doesn't exist in the file or if the type doesn't match, a nullptr is returned. Also see TDirectory::Get(). ; Definition at line 212 of file TDirectory.h. ◆ GetObjectChecked() [1/2]. void * TDirectory::GetObjectChecked ; (; const char * ; namecycle, . const char * ; classname . ). virtual . See documentation of TDirectory::GetObjectCheck(const char *namecycle, const TClass *cl) ; Reimplemented in TDirectoryFile.; Definition at line 929 of file TDirectory.cxx. ◆ GetObjectChecked() [2/2]. void * TDirectory::GetObjectChecked ; (; const char * ; namecycle, . const TClass * ; expectedClass . ). virtual . Return pointer to object identified by namecycle if and only if the actual object is a type suitable to be stored as a pointer to a ""expectedClass"" If expectedClass is null, no check is performed. ; namecycle has the format name;cycle; name = * is illegal, cycle = * is illegal; cycle = """" or cycle = 9999 ==> apply to a memory object. VERY IMPORTANT NOTE:; The calling application must cast the returned pointer to the type described by the 2 arguments (i.e. cl): MyClass *obj = (MyClass*)directory->GetObjectChecked(""some object of MyClass"",""MyClass""));; Note: We recommend using the method TDirectory::GetObject: MyClass *obj = nullptr;; directory->GetObject(""some object inheriting from MyClass"",obj);; if (obj) { ... we found what we are looking for ... }; whatstatic const char * whatDefinition stlLoader.cc:5. Reimplemented in TDirectoryFile.; Definition at line 958 of file TDirectory.cxx. ◆ GetObjectUnchecked(). void * TDirectory::GetObjectUnchecked ; (; const char * ; namecycle). virtual . Return pointer to object identified by namecycle. ; The returned object may or may not derive fr",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:33952,Safety,avoid,avoid,33952,"dObjectAnyFile(). virtual TObject * TDirectory::FindObjectAnyFile ; (; const char * ; ); const. inlinevirtual . Reimplemented in TROOT, and TDirectoryFile.; Definition at line 202 of file TDirectory.h. ◆ Get() [1/2]. TObject * TDirectory::Get ; (; const char * ; namecycle). virtual . Return pointer to object identified by namecycle. ; namecycle has the format name;cycle; name = * is illegal, cycle = * is illegal; cycle = """" or cycle = 9999 ==> apply to a memory object. examples:; foo : get object named foo in memory if object is not in memory, try with highest cycle from file; foo;1 : get cycle 1 of foo on file. The retrieved object should in principle derive from TObject. If not, the function TDirectory::GetObject should be called. However, this function will still work for a non-TObject, providing that the calling application cast the return type to the correct type (which is the actual type of the object).; NOTE:; The method GetObject offer better protection and avoid the need for any cast: MyClass *obj;; directory->GetObject(""some object"",obj);; if (obj) { ... the object exist and inherits from MyClass ... }; VERY IMPORTANT NOTE:; In case the class of this object derives from TObject but not as a first inheritance, one must use dynamic_cast<>(). Example 1: Normal case:; class MyClass : public TObject, public AnotherClass; TObjectMother of all ROOT objects.Definition TObject.h:41; then on return, one can do: MyClass *obj = (MyClass*)directory->Get(""some object of MyClass"");; Example 2: Special case:; class MyClass : public AnotherClass, public TObject; then on return, one must do: MyClass *obj = dynamic_cast<MyClass*>(directory->Get(""some object of MyClass""));; Of course, dynamic_cast<> can also be used in the example 1. ; Reimplemented in TDirectoryFile, and TDirectoryFile.; Definition at line 866 of file TDirectory.cxx. ◆ Get() [2/2]. template<class T > . T * TDirectory::Get ; (; const char * ; namecycle). inline . See documentation of TDirectoryFile::Get(const",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:52251,Safety,safe,safer,52251,"t.; The TBuffer object is filled via the class::Streamer function.; If the file is compressed (default) a second buffer is created to hold the compressed buffer.; Reservation of the corresponding space in the file by looking in the TFree list of free blocks of the file.; The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object. By default, the buffersize will be taken from the average buffer size of all objects written to the current file so far.; If a name is specified, it will be the name of the key. If name is not given, the name of the key will be the name as returned by GetName().; The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete Using the kOverwrite option a previous key with the same name is overwritten. The previous key is deleted before writing the new object. Using the kWriteDelete option a previous key with the same name is deleted only after the new object has been written. This option is safer than kOverwrite but it is slower. NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile– the space is simply freed up to be overwritten; in the case of a TTree, it is more complicated. If one opens a TTree, appends some entries, then writes it out, the behaviour is effectively the same. If, however, one creates a new TTree and writes it out in this way, only the metadata is replaced, effectively making the old data invisible without deleting it. TTree::Delete() can be used to mark all disk space occupied by a TTree as free before overwriting its metadata this way. The kSingleKey option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key.; An object is read from the file into memory via TKey::Read() or via TObject::Read().; The function returns the total number of bytes written to the file. It returns 0 if the object cannot be written. ; Reimplemented from TObject.; Reimplemented in TSQLFile, TXML",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:657,Security,access,accessed,657,". ROOT: TDirectory Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Friends |; List of all members ; TDirectory Class ReferenceCore ROOT classes » Base ROOT classes. ; Describe directory structure in memory. . PyROOT; It is possible to retrieve the content of a TDirectory object just like getting items from a Python dictionary. Moreover, once a subdirectory or object is accessed for the first time, it is cached for later use. For example, assuming d is a TDirectory instance: # Access a subdirectory; d[""subdir""]; ; # We can go further down in the hierarchy of directories; d[""subdir""][""subsubdir""]; ; # Access an object (e.g. a histogram) in the directory; d[""obj""]; ; # ... or in a subdirectory; d[""subdir""][""obj""]; ; # Wrong key: raises KeyError; d[""wrongAttr""]; Furthermore, TDirectory implements a WriteObject Python method which relies on TDirectory::WriteObjectAny. This method is a no-op for TDirectory objects, but it is useful for objects of TDirectory subclasses such as TDirectoryFile and TFile, which inherit it. Please refer to the documentation of those classes for more information. . Definition at line 45 of file TDirectory.h. Classes; class  TContext;  TDirectory::TContext keeps track and restore the current directory. More...;  . Public Member Functions;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; virtual void Add (TObject *obj, Bool_t replace=kFALSE);  ; virtual void Append (TObject *obj, Bool_t replace=kFALSE);  Append object to this directory. ;  ; virtual Int_t AppendKey (TKey *);  ; void Browse (T",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:9727,Security,hash,hash,9727,"st TObject *obj, const char *name=nullptr, Option_t *="""", Int_t=0);  Write an object with proper type checking. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTDirectory.html:52375,Usability,simpl,simply,52375,"d buffer is created to hold the compressed buffer.; Reservation of the corresponding space in the file by looking in the TFree list of free blocks of the file.; The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object. By default, the buffersize will be taken from the average buffer size of all objects written to the current file so far.; If a name is specified, it will be the name of the key. If name is not given, the name of the key will be the name as returned by GetName().; The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete Using the kOverwrite option a previous key with the same name is overwritten. The previous key is deleted before writing the new object. Using the kWriteDelete option a previous key with the same name is deleted only after the new object has been written. This option is safer than kOverwrite but it is slower. NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile– the space is simply freed up to be overwritten; in the case of a TTree, it is more complicated. If one opens a TTree, appends some entries, then writes it out, the behaviour is effectively the same. If, however, one creates a new TTree and writes it out in this way, only the metadata is replaced, effectively making the old data invisible without deleting it. TTree::Delete() can be used to mark all disk space occupied by a TTree as free before overwriting its metadata this way. The kSingleKey option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key.; An object is read from the file into memory via TKey::Read() or via TObject::Read().; The function returns the total number of bytes written to the file. It returns 0 if the object cannot be written. ; Reimplemented from TObject.; Reimplemented in TSQLFile, TXMLFile, TFile, TParallelMergingFile, and TDirectoryFile.; Definition at line 265 of file TDirectory.h. ◆ Write() ",MatchSource.WIKI,doc/v632/classTDirectory.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTDirectory.html
https://root.cern/doc/v632/classTEnum.html:6719,Availability,error,error,6719,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:6808,Availability,error,error,6808,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:6963,Availability,error,error,6963,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:7260,Availability,error,error,7260,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:11344,Availability,error,error,11344,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TEnum * GetEnum (const char *enumName, ESearchAction sa=kALoadAndInterpLookup);  Static function to retrieve enumerator from the ROOT's types",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:14274,Deployability,update,updated,14274,"tic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Types; enum  EBits { kBitIsScopedEnum = (1ULL << ( 14 )); };  . Private Attributes; TClass * fClass = nullptr;  Interpreter information, owned by TEnum. ;  ; THashList fConstantList;  ; ClassInfo_t * fInfo = nullptr;  ; std::string fQualName;  Owning class. ;  ; EDataType fUnderlyingType = kInt_t;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TEnum.h>. Inheritance diagram for TEnum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EBits. enum TEnum::EBits. private . EnumeratorkBitIsScopedEnum The enum is an enum class. . Definition at line 42 of file TEnum.h. ◆ ESearchAction. enum TEnum::ESearchAction. EnumeratorkNone ; kAutoload ; kInterpLookup ; kALoadAndInterpLookup . Definition at line 48 of file TEnum.h. Constructor & Destructor Documentation. ◆ TEnum() [1/3]. TEnum::TEnum ; (; ). inline . Definition at line 54 of file TEnum.h. ◆ TEnum() [2/3]. TEnum::TEnum ; (; const char * ; name, . DeclI",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:6725,Integrability,message,message,6725,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:7266,Integrability,message,message,7266,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:8256,Integrability,message,message,8256,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:11350,Integrability,message,message,11350,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TEnum * GetEnum (const char *enumName, ESearchAction sa=kALoadAndInterpLookup);  Static function to retrieve enumerator from the ROOT's types",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:11723,Integrability,message,message,11723," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TEnum * GetEnum (const char *enumName, ESearchAction sa=kALoadAndInterpLookup);  Static function to retrieve enumerator from the ROOT's typesystem. ;  ; static TEnum * GetEnum (const std::type_info &ti, ESearchAction sa=kALoadAndInterpLookup);  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:514,Modifiability,inherit,inherited,514,". ROOT: TEnum Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; TEnum Class Reference. ; The TEnum class implements the enum type. ; Definition at line 33 of file TEnum.h. Public Types; enum  ESearchAction { kNone = 0; , kAutoload = 1; , kInterpLookup = 2; , kALoadAndInterpLookup = 3; };  ;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultimap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiset = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiset = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEnum ();  ;  TEnum (const char *name, DeclId_t declid, TClass *cls);  Constructor for TEnum class. ;  ",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:1248,Modifiability,inherit,inherited,1248,"s the enum type. ; Definition at line 33 of file TEnum.h. Public Types; enum  ESearchAction { kNone = 0; , kAutoload = 1; , kInterpLookup = 2; , kALoadAndInterpLookup = 3; };  ;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultimap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiset = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiset = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEnum ();  ;  TEnum (const char *name, DeclId_t declid, TClass *cls);  Constructor for TEnum class. ;  ;  TEnum (const TEnum &);  Copy constructor. ;  ; virtual ~TEnum ();  Destructor. ;  ; void AddConstant (TEnumConstant *constant);  Add a EnumConstant to the list of constants of the Enum Type. ;  ; TClass * GetClass () const;  ; const TEnumConstant * GetConstant (const char *name) const;  ; const TSeqCollection * GetCon",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:3142,Modifiability,inherit,inherited,3142,"t;  ; DeclId_t GetDeclId () const;  ; const char * GetQualifiedName () const;  ; EDataType GetUnderlyingType () const;  Get the underlying integer type of the enum: enum E { kOne }; // ==> int enum F: long; // ==> long Returns kNumDataTypes if the enum is unknown / invalid. ;  ; TClass * IsA () const override;  ; Bool_t IsValid ();  Return true if this enum object is pointing to a currently loaded enum. ;  ; TEnum & operator= (const TEnum &);  Assign operator. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void SetClass (TClass *cl);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (DeclId_t id);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of o",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:3522,Modifiability,inherit,inherited,3522,"t;  ; DeclId_t GetDeclId () const;  ; const char * GetQualifiedName () const;  ; EDataType GetUnderlyingType () const;  Get the underlying integer type of the enum: enum E { kOne }; // ==> int enum F: long; // ==> long Returns kNumDataTypes if the enum is unknown / invalid. ;  ; TClass * IsA () const override;  ; Bool_t IsValid ();  Return true if this enum object is pointing to a currently loaded enum. ;  ; TEnum & operator= (const TEnum &);  Assign operator. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void SetClass (TClass *cl);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (DeclId_t id);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of o",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:5262,Modifiability,inherit,inherited,5262,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:6355,Modifiability,inherit,inheritance,6355,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:8354,Modifiability,inherit,inherits,8354,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:8471,Modifiability,inherit,inherits,8471,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:12478,Modifiability,inherit,inherited,12478,"Canvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TEnum * GetEnum (const char *enumName, ESearchAction sa=kALoadAndInterpLookup);  Static function to retrieve enumerator from the ROOT's typesystem. ;  ; static TEnum * GetEnum (const std::type_info &ti, ESearchAction sa=kALoadAndInterpLookup);  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:13011,Modifiability,inherit,inherited,13011,"sion_t Class_Version ();  ; static const char * DeclFileName ();  ; static TEnum * GetEnum (const char *enumName, ESearchAction sa=kALoadAndInterpLookup);  Static function to retrieve enumerator from the ROOT's typesystem. ;  ; static TEnum * GetEnum (const std::type_info &ti, ESearchAction sa=kALoadAndInterpLookup);  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Types; enum  EBits { kBitIsScopedEnum = (1ULL << ( 14 )); };  . Private Attributes; TClass * fClass = nullptr;  Interpreter information, owned by TEnum. ;  ; THashList fConstantList;  ; ClassInfo_t * fInfo = nullptr;  ; std::string fQualName;  Owning class. ;  ; EDataType fUnderlyingType = kInt_t;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 ",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:13221,Modifiability,inherit,inherited,13221,"sion_t Class_Version ();  ; static const char * DeclFileName ();  ; static TEnum * GetEnum (const char *enumName, ESearchAction sa=kALoadAndInterpLookup);  Static function to retrieve enumerator from the ROOT's typesystem. ;  ; static TEnum * GetEnum (const std::type_info &ti, ESearchAction sa=kALoadAndInterpLookup);  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Types; enum  EBits { kBitIsScopedEnum = (1ULL << ( 14 )); };  . Private Attributes; TClass * fClass = nullptr;  Interpreter information, owned by TEnum. ;  ; THashList fConstantList;  ; ClassInfo_t * fInfo = nullptr;  ; std::string fQualName;  Owning class. ;  ; EDataType fUnderlyingType = kInt_t;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 ",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:14064,Modifiability,inherit,inherited,14064,"tic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Types; enum  EBits { kBitIsScopedEnum = (1ULL << ( 14 )); };  . Private Attributes; TClass * fClass = nullptr;  Interpreter information, owned by TEnum. ;  ; THashList fConstantList;  ; ClassInfo_t * fInfo = nullptr;  ; std::string fQualName;  Owning class. ;  ; EDataType fUnderlyingType = kInt_t;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TEnum.h>. Inheritance diagram for TEnum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EBits. enum TEnum::EBits. private . EnumeratorkBitIsScopedEnum The enum is an enum class. . Definition at line 42 of file TEnum.h. ◆ ESearchAction. enum TEnum::ESearchAction. EnumeratorkNone ; kAutoload ; kInterpLookup ; kALoadAndInterpLookup . Definition at line 48 of file TEnum.h. Constructor & Destructor Documentation. ◆ TEnum() [1/3]. TEnum::TEnum ; (; ). inline . Definition at line 54 of file TEnum.h. ◆ TEnum() [2/3]. TEnum::TEnum ; (; const char * ; name, . DeclI",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:14163,Modifiability,inherit,inherited,14163,"tic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Types; enum  EBits { kBitIsScopedEnum = (1ULL << ( 14 )); };  . Private Attributes; TClass * fClass = nullptr;  Interpreter information, owned by TEnum. ;  ; THashList fConstantList;  ; ClassInfo_t * fInfo = nullptr;  ; std::string fQualName;  Owning class. ;  ; EDataType fUnderlyingType = kInt_t;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TEnum.h>. Inheritance diagram for TEnum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EBits. enum TEnum::EBits. private . EnumeratorkBitIsScopedEnum The enum is an enum class. . Definition at line 42 of file TEnum.h. ◆ ESearchAction. enum TEnum::ESearchAction. EnumeratorkNone ; kAutoload ; kInterpLookup ; kALoadAndInterpLookup . Definition at line 48 of file TEnum.h. Constructor & Destructor Documentation. ◆ TEnum() [1/3]. TEnum::TEnum ; (; ). inline . Definition at line 54 of file TEnum.h. ◆ TEnum() [2/3]. TEnum::TEnum ; (; const char * ; name, . DeclI",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:14326,Modifiability,inherit,inherited,14326,"tic TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Types; enum  EBits { kBitIsScopedEnum = (1ULL << ( 14 )); };  . Private Attributes; TClass * fClass = nullptr;  Interpreter information, owned by TEnum. ;  ; THashList fConstantList;  ; ClassInfo_t * fInfo = nullptr;  ; std::string fQualName;  Owning class. ;  ; EDataType fUnderlyingType = kInt_t;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TEnum.h>. Inheritance diagram for TEnum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EBits. enum TEnum::EBits. private . EnumeratorkBitIsScopedEnum The enum is an enum class. . Definition at line 42 of file TEnum.h. ◆ ESearchAction. enum TEnum::ESearchAction. EnumeratorkNone ; kAutoload ; kInterpLookup ; kALoadAndInterpLookup . Definition at line 48 of file TEnum.h. Constructor & Destructor Documentation. ◆ TEnum() [1/3]. TEnum::TEnum ; (; ). inline . Definition at line 54 of file TEnum.h. ◆ TEnum() [2/3]. TEnum::TEnum ; (; const char * ; name, . DeclI",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:14531,Modifiability,inherit,inherited,14531," ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Types; enum  EBits { kBitIsScopedEnum = (1ULL << ( 14 )); };  . Private Attributes; TClass * fClass = nullptr;  Interpreter information, owned by TEnum. ;  ; THashList fConstantList;  ; ClassInfo_t * fInfo = nullptr;  ; std::string fQualName;  Owning class. ;  ; EDataType fUnderlyingType = kInt_t;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TEnum.h>. Inheritance diagram for TEnum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EBits. enum TEnum::EBits. private . EnumeratorkBitIsScopedEnum The enum is an enum class. . Definition at line 42 of file TEnum.h. ◆ ESearchAction. enum TEnum::ESearchAction. EnumeratorkNone ; kAutoload ; kInterpLookup ; kALoadAndInterpLookup . Definition at line 48 of file TEnum.h. Constructor & Destructor Documentation. ◆ TEnum() [1/3]. TEnum::TEnum ; (; ). inline . Definition at line 54 of file TEnum.h. ◆ TEnum() [2/3]. TEnum::TEnum ; (; const char * ; name, . DeclId_t ; declid, . TClass * ; cls . ). Constructor for TEnum class. ; It takes the name of the TEnum type, interpreter info and surrounding class the enum it is not globalat namespace scope. Constant List is owner if enum not on global scope (thus constants not in TROOT::GetListOfGlobals).",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:2731,Performance,load,loaded,2731,"LL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TEnum ();  ;  TEnum (const char *name, DeclId_t declid, TClass *cls);  Constructor for TEnum class. ;  ;  TEnum (const TEnum &);  Copy constructor. ;  ; virtual ~TEnum ();  Destructor. ;  ; void AddConstant (TEnumConstant *constant);  Add a EnumConstant to the list of constants of the Enum Type. ;  ; TClass * GetClass () const;  ; const TEnumConstant * GetConstant (const char *name) const;  ; const TSeqCollection * GetConstants () const;  ; DeclId_t GetDeclId () const;  ; const char * GetQualifiedName () const;  ; EDataType GetUnderlyingType () const;  Get the underlying integer type of the enum: enum E { kOne }; // ==> int enum F: long; // ==> long Returns kNumDataTypes if the enum is unknown / invalid. ;  ; TClass * IsA () const override;  ; Bool_t IsValid ();  Return true if this enum object is pointing to a currently loaded enum. ;  ; TEnum & operator= (const TEnum &);  Assign operator. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void SetClass (TClass *cl);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (DeclId_t id);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (con",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:17267,Performance,load,load,17267,":Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 81 of file TEnum.h. ◆ DeclFileName(). static const char * TEnum::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file TEnum.h. ◆ GetClass(). TClass * TEnum::GetClass ; (; ); const. inline . Definition at line 62 of file TEnum.h. ◆ GetConstant(). const TEnumConstant * TEnum::GetConstant ; (; const char * ; name); const. inline . Definition at line 64 of file TEnum.h. ◆ GetConstants(). const TSeqCollection * TEnum::GetConstants ; (; ); const. inline . Definition at line 63 of file TEnum.h. ◆ GetDeclId(). TDictionary::DeclId_t TEnum::GetDeclId ; (; ); const. Definition at line 146 of file TEnum.cxx. ◆ GetEnum() [1/2]. TEnum * TEnum::GetEnum ; (; const char * ; enumName, . ESearchAction ; sa = kALoadAndInterpLookup . ). static . Static function to retrieve enumerator from the ROOT's typesystem. ; It has no side effect, except when the load flag is true. In this case, the load of the library containing the scope of the enumerator is attempted. There are two top level code paths: the enumerator is scoped or isn't. If it is not, a lookup in the list of global enums is performed. If it is, two lookups are carried out for its scope: one in the list of classes and one in the list of protoclasses. If a scope with the desired name is found, the enum is searched. If the scope is not found, and the load flag is true, the aforementioned two steps are performed again after an autoload attempt with the name of the scope as key is tried out. If the interpreter lookup flag is false, the ListOfEnums objects are not treated as such, but rather as THashList objects. This prevents any flow of information from the interpreter into the ROOT's typesystem: a snapshot of the typesystem status is taken. ; Definition at line 209 of file TEnum.cxx. ◆ GetEnum() [2/2]. TEnum * TEnum::GetEnum ; (; const std::type_info & ; ti, . ESear",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:17304,Performance,load,load,17304," ; Definition at line 81 of file TEnum.h. ◆ DeclFileName(). static const char * TEnum::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file TEnum.h. ◆ GetClass(). TClass * TEnum::GetClass ; (; ); const. inline . Definition at line 62 of file TEnum.h. ◆ GetConstant(). const TEnumConstant * TEnum::GetConstant ; (; const char * ; name); const. inline . Definition at line 64 of file TEnum.h. ◆ GetConstants(). const TSeqCollection * TEnum::GetConstants ; (; ); const. inline . Definition at line 63 of file TEnum.h. ◆ GetDeclId(). TDictionary::DeclId_t TEnum::GetDeclId ; (; ); const. Definition at line 146 of file TEnum.cxx. ◆ GetEnum() [1/2]. TEnum * TEnum::GetEnum ; (; const char * ; enumName, . ESearchAction ; sa = kALoadAndInterpLookup . ). static . Static function to retrieve enumerator from the ROOT's typesystem. ; It has no side effect, except when the load flag is true. In this case, the load of the library containing the scope of the enumerator is attempted. There are two top level code paths: the enumerator is scoped or isn't. If it is not, a lookup in the list of global enums is performed. If it is, two lookups are carried out for its scope: one in the list of classes and one in the list of protoclasses. If a scope with the desired name is found, the enum is searched. If the scope is not found, and the load flag is true, the aforementioned two steps are performed again after an autoload attempt with the name of the scope as key is tried out. If the interpreter lookup flag is false, the ListOfEnums objects are not treated as such, but rather as THashList objects. This prevents any flow of information from the interpreter into the ROOT's typesystem: a snapshot of the typesystem status is taken. ; Definition at line 209 of file TEnum.cxx. ◆ GetEnum() [2/2]. TEnum * TEnum::GetEnum ; (; const std::type_info & ; ti, . ESearchAction ; sa = kALoadAndInterpLookup . ). static . Definition at line 175 o",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:17502,Performance,perform,performed,17502,"ntaining the class declaration ; Definition at line 81 of file TEnum.h. ◆ GetClass(). TClass * TEnum::GetClass ; (; ); const. inline . Definition at line 62 of file TEnum.h. ◆ GetConstant(). const TEnumConstant * TEnum::GetConstant ; (; const char * ; name); const. inline . Definition at line 64 of file TEnum.h. ◆ GetConstants(). const TSeqCollection * TEnum::GetConstants ; (; ); const. inline . Definition at line 63 of file TEnum.h. ◆ GetDeclId(). TDictionary::DeclId_t TEnum::GetDeclId ; (; ); const. Definition at line 146 of file TEnum.cxx. ◆ GetEnum() [1/2]. TEnum * TEnum::GetEnum ; (; const char * ; enumName, . ESearchAction ; sa = kALoadAndInterpLookup . ). static . Static function to retrieve enumerator from the ROOT's typesystem. ; It has no side effect, except when the load flag is true. In this case, the load of the library containing the scope of the enumerator is attempted. There are two top level code paths: the enumerator is scoped or isn't. If it is not, a lookup in the list of global enums is performed. If it is, two lookups are carried out for its scope: one in the list of classes and one in the list of protoclasses. If a scope with the desired name is found, the enum is searched. If the scope is not found, and the load flag is true, the aforementioned two steps are performed again after an autoload attempt with the name of the scope as key is tried out. If the interpreter lookup flag is false, the ListOfEnums objects are not treated as such, but rather as THashList objects. This prevents any flow of information from the interpreter into the ROOT's typesystem: a snapshot of the typesystem status is taken. ; Definition at line 209 of file TEnum.cxx. ◆ GetEnum() [2/2]. TEnum * TEnum::GetEnum ; (; const std::type_info & ; ti, . ESearchAction ; sa = kALoadAndInterpLookup . ). static . Definition at line 175 of file TEnum.cxx. ◆ GetQualifiedName(). const char * TEnum::GetQualifiedName ; (; ); const. inline . Definition at line 77 of file TEnum.h. ◆ GetUnde",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:17730,Performance,load,load,17730,"e TEnum.h. ◆ GetConstants(). const TSeqCollection * TEnum::GetConstants ; (; ); const. inline . Definition at line 63 of file TEnum.h. ◆ GetDeclId(). TDictionary::DeclId_t TEnum::GetDeclId ; (; ); const. Definition at line 146 of file TEnum.cxx. ◆ GetEnum() [1/2]. TEnum * TEnum::GetEnum ; (; const char * ; enumName, . ESearchAction ; sa = kALoadAndInterpLookup . ). static . Static function to retrieve enumerator from the ROOT's typesystem. ; It has no side effect, except when the load flag is true. In this case, the load of the library containing the scope of the enumerator is attempted. There are two top level code paths: the enumerator is scoped or isn't. If it is not, a lookup in the list of global enums is performed. If it is, two lookups are carried out for its scope: one in the list of classes and one in the list of protoclasses. If a scope with the desired name is found, the enum is searched. If the scope is not found, and the load flag is true, the aforementioned two steps are performed again after an autoload attempt with the name of the scope as key is tried out. If the interpreter lookup flag is false, the ListOfEnums objects are not treated as such, but rather as THashList objects. This prevents any flow of information from the interpreter into the ROOT's typesystem: a snapshot of the typesystem status is taken. ; Definition at line 209 of file TEnum.cxx. ◆ GetEnum() [2/2]. TEnum * TEnum::GetEnum ; (; const std::type_info & ; ti, . ESearchAction ; sa = kALoadAndInterpLookup . ). static . Definition at line 175 of file TEnum.cxx. ◆ GetQualifiedName(). const char * TEnum::GetQualifiedName ; (; ); const. inline . Definition at line 77 of file TEnum.h. ◆ GetUnderlyingType(). EDataType TEnum::GetUnderlyingType ; (; ); const. inline . Get the underlying integer type of the enum: enum E { kOne }; // ==> int enum F: long; // ==> long Returns kNumDataTypes if the enum is unknown / invalid. ; Definition at line 71 of file TEnum.h. ◆ IsA(). TClass * TEnum::IsA ; (; ",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:17782,Performance,perform,performed,17782,"e TEnum.h. ◆ GetConstants(). const TSeqCollection * TEnum::GetConstants ; (; ); const. inline . Definition at line 63 of file TEnum.h. ◆ GetDeclId(). TDictionary::DeclId_t TEnum::GetDeclId ; (; ); const. Definition at line 146 of file TEnum.cxx. ◆ GetEnum() [1/2]. TEnum * TEnum::GetEnum ; (; const char * ; enumName, . ESearchAction ; sa = kALoadAndInterpLookup . ). static . Static function to retrieve enumerator from the ROOT's typesystem. ; It has no side effect, except when the load flag is true. In this case, the load of the library containing the scope of the enumerator is attempted. There are two top level code paths: the enumerator is scoped or isn't. If it is not, a lookup in the list of global enums is performed. If it is, two lookups are carried out for its scope: one in the list of classes and one in the list of protoclasses. If a scope with the desired name is found, the enum is searched. If the scope is not found, and the load flag is true, the aforementioned two steps are performed again after an autoload attempt with the name of the scope as key is tried out. If the interpreter lookup flag is false, the ListOfEnums objects are not treated as such, but rather as THashList objects. This prevents any flow of information from the interpreter into the ROOT's typesystem: a snapshot of the typesystem status is taken. ; Definition at line 209 of file TEnum.cxx. ◆ GetEnum() [2/2]. TEnum * TEnum::GetEnum ; (; const std::type_info & ; ti, . ESearchAction ; sa = kALoadAndInterpLookup . ). static . Definition at line 175 of file TEnum.cxx. ◆ GetQualifiedName(). const char * TEnum::GetQualifiedName ; (; ); const. inline . Definition at line 77 of file TEnum.h. ◆ GetUnderlyingType(). EDataType TEnum::GetUnderlyingType ; (; ); const. inline . Get the underlying integer type of the enum: enum E { kOne }; // ==> int enum F: long; // ==> long Returns kNumDataTypes if the enum is unknown / invalid. ; Definition at line 71 of file TEnum.h. ◆ IsA(). TClass * TEnum::IsA ; (; ",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:19033,Performance,load,loaded,19033,"any flow of information from the interpreter into the ROOT's typesystem: a snapshot of the typesystem status is taken. ; Definition at line 209 of file TEnum.cxx. ◆ GetEnum() [2/2]. TEnum * TEnum::GetEnum ; (; const std::type_info & ; ti, . ESearchAction ; sa = kALoadAndInterpLookup . ). static . Definition at line 175 of file TEnum.cxx. ◆ GetQualifiedName(). const char * TEnum::GetQualifiedName ; (; ); const. inline . Definition at line 77 of file TEnum.h. ◆ GetUnderlyingType(). EDataType TEnum::GetUnderlyingType ; (; ); const. inline . Get the underlying integer type of the enum: enum E { kOne }; // ==> int enum F: long; // ==> long Returns kNumDataTypes if the enum is unknown / invalid. ; Definition at line 71 of file TEnum.h. ◆ IsA(). TClass * TEnum::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TDictionary.; Definition at line 81 of file TEnum.h. ◆ IsValid(). Bool_t TEnum::IsValid ; (; ). Return true if this enum object is pointing to a currently loaded enum. ; If a enum is unloaded after the TEnum is created, the TEnum will be set to be invalid. ; Definition at line 124 of file TEnum.cxx. ◆ operator=(). TEnum & TEnum::operator= ; (; const TEnum & ; src). Assign operator. ; Definition at line 81 of file TEnum.cxx. ◆ Property(). Long_t TEnum::Property ; (; ); const. overridevirtual . Get property description word. For meaning of bits see EProperty. ; Implements TDictionary.; Definition at line 139 of file TEnum.cxx. ◆ SetClass(). void TEnum::SetClass ; (; TClass * ; cl). inline . Definition at line 75 of file TEnum.h. ◆ Streamer(). void TEnum::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TDictionary. ◆ StreamerNVirtual(). void TEnum::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 81 of file TEnum.h. ◆ Update(). void TEnum::Update ; (; DeclId_t ; id). Definition at line 156 of file TEnum.cxx. Member D",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTEnum.html:4390,Security,hash,hash,4390,"ctionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/v632/classTEnum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTEnum.html
https://root.cern/doc/v632/classTFile.html:12424,Availability,recover,recover,12424,"(const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void ResetErrno () const;  Method resetting the errno. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:25904,Availability,error,error,25904," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer)",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:25993,Availability,error,error,25993,"ave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:26148,Availability,error,error,26148,"hether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:26445,Availability,error,error,26445,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ; ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:29938,Availability,error,error,29938," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:52387,Availability,recover,recovery,52387,"bie. One can detect this situation with a code like: TFile f(""file.root"");; if (f.IsZombie()) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; f#define f(i)Definition RSha256.hxx:104; If you open a file instead with TFile::Open(""file.root"") use rather the following code as a nullptr is returned. TFile* f = TFile::Open(""file.root"");; if (!f) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; When opening the file, the system checks the validity of this directory. If something wrong is detected, an automatic Recovery is performed. In this case, the file is scanned sequentially reading all logical blocks and attempting to rebuild a correct directory (see TFile::Recover). One can disable the automatic recovery procedure when reading one or more files by setting the environment variable ""TFile.Recover: 0"" in the system.rootrc file.; A bit TFile::kReproducible can be enabled specifying the ""reproducible"" url option when creating the file: TFile *f = TFile::Open(""name.root?reproducible"",""RECREATE"",""File title"");; Unlike regular TFiles, the content of such file has reproducible binary content when writing exactly same data. This achieved by writing pre-defined values for creation and modification date of TKey/TDirectory objects and null value for TUUID objects inside TFile. As drawback, TRef objects stored in such file cannot be read correctly.; In case the name of the file is not reproducible either (in case of creating temporary filenames) a value can be passed to the reproducible option to replace the name stored in the file. TFile *f = TFile::Open(""tmpname.root?reproducible=fixedname"",""RECREATE"",""File title"");. Definition at line 339 of file TFile.cxx. ◆ ~TFile(). TFile::~TFile ; (; ). override . File destructor.",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:61129,Availability,error,error,61129,"tatusbar"". Then, when moving the mouse in the canvas, the ""Event Status"" panels shows the object corresponding to the mouse position.; Example: auto f = new TFile(""myfile.root"");; f->DrawMap();; TFile::TFileTFile()File default Constructor.Definition TFile.cxx:201. Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1128 of file TFile.cxx. ◆ FillBuffer(). void TFile::FillBuffer ; (; char *& ; buffer). overridevirtual . Encode file output buffer. ; The file output buffer contains only the FREE data record. ; Reimplemented from TDirectoryFile.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1170 of file TFile.cxx. ◆ Flush(). void TFile::Flush ; (; ). virtual . Synchronize a file's in-memory and on-disk states. ; Reimplemented in TXNetFile, TSQLFile, TXMLFile, TNetFile, and TNetXNGFile.; Definition at line 1141 of file TFile.cxx. ◆ FlushWriteCache(). Bool_t TFile::FlushWriteCache ; (; ). protected . Flush the write cache if active. ; Return kTRUE in case of error ; Definition at line 1158 of file TFile.cxx. ◆ GetArchive(). TArchiveFile * TFile::GetArchive ; (; ); const. inline . Definition at line 220 of file TFile.h. ◆ GetArchiveOffset(). Long64_t TFile::GetArchiveOffset ; (; ); const. inline . Definition at line 221 of file TFile.h. ◆ GetAsyncOpenStatus() [1/3]. virtual EAsyncOpenStatus TFile::GetAsyncOpenStatus ; (; ). inlineprotectedvirtual . Reimplemented in TXNetFile.; Definition at line 137 of file TFile.h. ◆ GetAsyncOpenStatus() [2/3]. TFile::EAsyncOpenStatus TFile::GetAsyncOpenStatus ; (; const char * ; name). static . Get status of the async open request related to 'name'. ; Definition at line 4899 of file TFile.cxx. ◆ GetAsyncOpenStatus() [3/3]. TFile::EAsyncOpenStatus TFile::GetAsyncOpenStatus ; (; TFileOpenHandle * ; handle). static . Get status of the async open request related to 'handle'. ; Definition at line 4928 of file TFile.cxx. ◆ GetBestBuffer(). Int_t TFile::GetBestBuffer ; (; ); const. Return the best buffer size of objects o",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:64907,Availability,avail,available,64907,"e.h. ◆ GetCompressionFactor(). Float_t TFile::GetCompressionFactor ; (; ). Return the file compression factor. ; Add total number of compressed/uncompressed bytes for each key. Returns the ratio of the two. ; Definition at line 1202 of file TFile.cxx. ◆ GetCompressionLevel(). Int_t TFile::GetCompressionLevel ; (; ); const. inline . Definition at line 391 of file TFile.h. ◆ GetCompressionSettings(). Int_t TFile::GetCompressionSettings ; (; ); const. inline . Definition at line 397 of file TFile.h. ◆ GetEND(). virtual Long64_t TFile::GetEND ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 231 of file TFile.h. ◆ GetEndpointUrl() [1/2]. virtual const TUrl * TFile::GetEndpointUrl ; (; ); const. inlinevirtual . Reimplemented in TNetFile.; Definition at line 235 of file TFile.h. ◆ GetEndpointUrl() [2/2]. const TUrl * TFile::GetEndpointUrl ; (; const char * ; name). static . Get final URL for file being opened asynchronously. ; Returns 0 is the information is not yet available. ; Definition at line 4945 of file TFile.cxx. ◆ GetErrno(). Int_t TFile::GetErrno ; (; ); const. virtual . Method returning errno. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1246 of file TFile.cxx. ◆ GetFd(). Int_t TFile::GetFd ; (; ); const. inline . Definition at line 234 of file TFile.h. ◆ GetFileBytesRead(). Long64_t TFile::GetFileBytesRead ; (; ). static . Static function returning the total number of bytes read from all files. ; Definition at line 4574 of file TFile.cxx. ◆ GetFileBytesWritten(). Long64_t TFile::GetFileBytesWritten ; (; ). static . Static function returning the total number of bytes written to all files. ; Does not take into account what might still be in the write caches. ; Definition at line 4583 of file TFile.cxx. ◆ GetFileCounter(). Long64_t TFile::GetFileCounter ; (; ). static . Definition at line 4617 of file TFile.cxx. ◆ GetFileReadCalls(). Int_t TFile::GetFileReadCalls ; (; ). static . Static function returning",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:75436,Availability,avail,available,75436,"(default and currently the only supported value), the function generates an include file for each class in the StreamerInfo list for which a TClass object does not exist.; The code generated includes:; dirnameProjectHeaders.h, which contains one #include statement per generated header file; dirnameProjectSource.cxx,which contains all the constructors and destructors implementation. and one header per class that is not nested inside another class. The header file name is the fully qualified name of the class after all the special characters ""<>,:"" are replaced by underscored. For example for std::pair<edm::Vertex,int> the file name is pair_edm__Vertex_int_.h. In the generated classes, map, multimap when the first template parameter is a class are replaced by a vector of pair. set and multiset when the tempalte parameter is a class are replaced by a vector. This is required since we do not have the code needed to order and/or compare the object of the classes. This is a quick explanation of the options available: . Option Details . new (default) A new directory dirname is created. If dirname already exist, an error message is printed and the function returns. . recreate If dirname does not exist, it is created (like in ""new""). If dirname already exist, all existing files in dirname are deleted before creating the new files. . update New classes are added to the existing directory. Existing classes with the same name are replaced by the new definition. If the directory dirname doest not exist, same effect as ""new"". . genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirn",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:75545,Availability,error,error,75545,"ich a TClass object does not exist.; The code generated includes:; dirnameProjectHeaders.h, which contains one #include statement per generated header file; dirnameProjectSource.cxx,which contains all the constructors and destructors implementation. and one header per class that is not nested inside another class. The header file name is the fully qualified name of the class after all the special characters ""<>,:"" are replaced by underscored. For example for std::pair<edm::Vertex,int> the file name is pair_edm__Vertex_int_.h. In the generated classes, map, multimap when the first template parameter is a class are replaced by a vector of pair. set and multiset when the tempalte parameter is a class are replaced by a vector. This is required since we do not have the code needed to order and/or compare the object of the classes. This is a quick explanation of the options available: . Option Details . new (default) A new directory dirname is created. If dirname already exist, an error message is printed and the function returns. . recreate If dirname does not exist, it is created (like in ""new""). If dirname already exist, all existing files in dirname are deleted before creating the new files. . update New classes are added to the existing directory. Existing classes with the same name are replaced by the new definition. If the directory dirname doest not exist, same effect as ""new"". . genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirnameLinkDef.h file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the cur",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:78113,Availability,error,error,78113,"the CINT dictionary.; creates the build script MAKEP; creates a LinkDef.h file; runs rootcint generating demoProjectDict.cxx; compiles demoProjectDict.cxx into demoProjectDict.o; generates a shared lib demo.so; dynamically links the shared lib demo.so to the executable If only the option ""+"" had been specified, one can still link the shared lib to the current executable module with: gSystem->load(""demo/demo.so"");; The following feature is not yet enabled: One can restrict the list of classes to be generated by using expressions like: classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only.; . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2726 of file TFile.cxx. ◆ MakeProjectParMake(). Int_t TFile::MakeProjectParMake ; (; const char * ; pack, . const char * ; filemake . ). protected . Create makefile at 'filemake' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on success, -1 on error. ; Definition at line 3364 of file TFile.cxx. ◆ MakeProjectParProofInf(). Int_t TFile::MakeProjectParProofInf ; (; const char * ; pack, . const char * ; proofinf . ). protected . Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on success, -1 on error. ; Definition at line 3486 of file TFile.cxx. ◆ Map() [1/2]. virtual void TFile::Map ; (; ). inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 267 of file TFile.h. ◆ Map() [2/2]. void TFile::Map ; (; Option_t * ; opt). virtual . List the contents of a file sequentially. ; For each logical record found, it prints: Date/Time Record_Adress Logical_Record_Length ClassName CompressionFactor; Example of output 20010404/150437 At:64 N=150 TFile; 20010404/150440 At:214 N=28326 TBasket CX = 1.13; 20010404/150440 At:28540 N=29616 TBasket CX = 1.08; 20010404/150440 At:58156 N=29640 TBasket CX = 1.08; 20010404/150440 At:87796 N",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:78446,Availability,error,error,78446,"he shared lib to the current executable module with: gSystem->load(""demo/demo.so"");; The following feature is not yet enabled: One can restrict the list of classes to be generated by using expressions like: classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only.; . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2726 of file TFile.cxx. ◆ MakeProjectParMake(). Int_t TFile::MakeProjectParMake ; (; const char * ; pack, . const char * ; filemake . ). protected . Create makefile at 'filemake' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on success, -1 on error. ; Definition at line 3364 of file TFile.cxx. ◆ MakeProjectParProofInf(). Int_t TFile::MakeProjectParProofInf ; (; const char * ; pack, . const char * ; proofinf . ). protected . Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on success, -1 on error. ; Definition at line 3486 of file TFile.cxx. ◆ Map() [1/2]. virtual void TFile::Map ; (; ). inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 267 of file TFile.h. ◆ Map() [2/2]. void TFile::Map ; (; Option_t * ; opt). virtual . List the contents of a file sequentially. ; For each logical record found, it prints: Date/Time Record_Adress Logical_Record_Length ClassName CompressionFactor; Example of output 20010404/150437 At:64 N=150 TFile; 20010404/150440 At:214 N=28326 TBasket CX = 1.13; 20010404/150440 At:28540 N=29616 TBasket CX = 1.08; 20010404/150440 At:58156 N=29640 TBasket CX = 1.08; 20010404/150440 At:87796 N=29076 TBasket CX = 1.10; 20010404/150440 At:116872 N=10151 TBasket CX = 3.15; 20010404/150441 At:127023 N=28341 TBasket CX = 1.13; 20010404/150441 At:155364 N=29594 TBasket CX = 1.08; 20010404/150441 At:184958 N=29616 TBasket CX = 1.08; 20010404/150441 At:214574 N=29075 TBasket CX = 1.10; 20010404/150441 At:243649 N=9583 TBasket C",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:83411,Availability,error,error,83411,"r (for the plugin manager see the TPluginManager class). The returned type of TFile depends on the file name specified by 'url'. If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried sequentially in the specified order until a successful open. If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile, etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile::AsyncOpen(...), it is possible to request a timeout with the option TIMEOUT=<secs>: the timeout must be specified in seconds and it will be internally checked with granularity of one millisec. For remote files there is the option: CACHEREAD opens an existing file for reading through the file cache. The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir().; The caller is responsible for deleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:83830,Availability,down,downloaded,83830,"ile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile::AsyncOpen(...), it is possible to request a timeout with the option TIMEOUT=<secs>: the timeout must be specified in seconds and it will be internally checked with granularity of one millisec. For remote files there is the option: CACHEREAD opens an existing file for reading through the file cache. The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir().; The caller is responsible for deleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ;",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:83884,Availability,down,download,83884,"ular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile::AsyncOpen(...), it is possible to request a timeout with the option TIMEOUT=<secs>: the timeout must be specified in seconds and it will be internally checked with granularity of one millisec. For remote files there is the option: CACHEREAD opens an existing file for reading through the file cache. The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir().; The caller is responsible for deleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseComp",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:83945,Availability,down,downloaded,83945,"will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile::AsyncOpen(...), it is possible to request a timeout with the option TIMEOUT=<secs>: the timeout must be specified in seconds and it will be internally checked with granularity of one millisec. For remote files there is the option: CACHEREAD opens an existing file for reading through the file cache. The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir().; The caller is responsible for deleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). staticprivate . Open a fi",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:85024,Availability,down,downloaded,85024,"eleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). staticprivate . Open a file for reading through the file cache. ; The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir(). ; Definition at line 3874 of file TFile.cxx. ◆ operator=(). void TFile::operator= ; (; const TFile & ; ). privatedelete . ◆ Paint(). void TFile::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, TXNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:85078,Availability,down,download,85078,"f the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). staticprivate . Open a file for reading through the file cache. ; The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir(). ; Definition at line 3874 of file TFile.cxx. ◆ operator=(). void TFile::operator= ; (; const TFile & ; ). privatedelete . ◆ Paint(). void TFile::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, TXNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:85139,Availability,down,downloaded,85139," nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). staticprivate . Open a file for reading through the file cache. ; The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir(). ; Definition at line 3874 of file TFile.cxx. ◆ operator=(). void TFile::operator= ; (; const TFile & ; ). privatedelete . ◆ Paint(). void TFile::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, TXNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1770 of",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:86012,Availability,failure,failure,86012,". ; The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir(). ; Definition at line 3874 of file TFile.cxx. ◆ operator=(). void TFile::operator= ; (; const TFile & ; ). privatedelete . ◆ Paint(). void TFile::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, TXNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1770 of file TFile.cxx. ◆ ReadBuffer() [2/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile, and TXNetFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:86378,Availability,failure,failure,86378,"option = """"). overridevirtual . Paint all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, TXNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1770 of file TFile.cxx. ◆ ReadBuffer() [2/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile, and TXNetFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TXNetFile, TDCacheFile, TNetFile, TS3",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:87291,Availability,failure,failure,87291,"rtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile, and TXNetFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TXNetFile, TDCacheFile, TNetFile, TS3WebFile, TWebFile, and TNetXNGFile.; Definition at line 1821 of file TFile.cxx. ◆ ReadBufferViaCache(). Int_t TFile::ReadBufferViaCache ; (; char * ; buf, . Int_t ; len . ). protected . Read buffer via cache. ; Returns 0 if the requested block is not in the cache, 1 in case read via cache was successful, 2 in case read via cache failed. ; Definition at line 1889 of file TFile.cxx. ◆ ReadFree(). void TFile::ReadFree ; (; ). virtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Defini",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:88772,Availability,recover,recover,88772,"ee ; (; ). virtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is imp",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:88867,Availability,recover,recovered,88867,"e has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see T",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:88896,Availability,recover,recovered,88896,"en on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree heade",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89148,Availability,recover,recover,89148,". The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the sys",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89291,Availability,recover,recovered,89291,"ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reope",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89559,Availability,recover,recovered,89559," that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case th",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89661,Availability,recover,recovered,89661,"amerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or w",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89733,Availability,recover,recovered,89733,"f not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or wrong input arguments) and -1 in case of failure, in which case the file cannot be used anymore. The current directory (gFile) is chan",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89891,Availability,recover,recovered,89891,"the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or wrong input arguments) and -1 in case of failure, in which case the file cannot be used anymore. The current directory (gFile) is changed to this file. ; Reimplemented in TSQLFile, TXMLFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 2162 of",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:90089,Availability,recover,recovery,90089," open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or wrong input arguments) and -1 in case of failure, in which case the file cannot be used anymore. The current directory (gFile) is changed to this file. ; Reimplemented in TSQLFile, TXMLFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 2162 of file TFile.cxx. ◆ ResetErrno(). void TFile::ResetErrno ; (; ); const. virtual . Method resetting the errno. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, and TMemFile.; Definiti",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:90694,Availability,failure,failure,90694,"est if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or wrong input arguments) and -1 in case of failure, in which case the file cannot be used anymore. The current directory (gFile) is changed to this file. ; Reimplemented in TSQLFile, TXMLFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 2162 of file TFile.cxx. ◆ ResetErrno(). void TFile::ResetErrno ; (; ); const. virtual . Method resetting the errno. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, and TMemFile.; Definition at line 1254 of file TFile.cxx. ◆ Seek(). void TFile::Seek ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ; Reimplemented in TDavixFile, TNetFile, TWebFile, TNetXNGFile, TSQLFile, and TXMLFile.; Definition at line 2274 of file TFile.cxx. ◆ SetCacheFileDir(). Bool_t TFile::SetCacheFileDir ; (; std::string_view ; cachedir, . Bool_t ; operatedisconnected = kTRUE, . Bool_t ; forcecacheread = kFALSE . ). static . Sets the directory where to locally ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:101040,Availability,failure,failure,101040,"SQLFile, TXMLFile, and TParallelMergingFile.; Definition at line 2466 of file TFile.cxx. ◆ Write() [2/2]. Int_t TFile::Write ; (; const char * ; name = nullptr, . Int_t ; opt = 0, . Int_t ; bufsiz = 0 . ). overridevirtual . Write memory objects to this file. ; Loop on all objects in memory (including subdirectories). A new key is created in the KEYS linked list for each object. The list of keys is then saved on the file (via WriteKeys) as a single data record. For values of opt see TObject::Write(). The directory header info is rewritten on the directory header record. The linked list of FREE segments is written. The file header is written (bytes 1->fBEGIN). ; Reimplemented from TDirectoryFile.; Reimplemented in TSQLFile, TXMLFile, and TParallelMergingFile.; Definition at line 2436 of file TFile.cxx. ◆ WriteBuffer(). Bool_t TFile::WriteBuffer ; (; const char * ; buf, . Int_t ; len . ). virtual . Write a buffer to the file. ; This is the basic low level write operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, TNetFile, TDavixFile, TXNetFile, and TNetXNGFile.; Definition at line 2476 of file TFile.cxx. ◆ WriteBufferViaCache(). Int_t TFile::WriteBufferViaCache ; (; const char * ; buf, . Int_t ; len . ). protected . Write buffer via cache. ; Returns 0 if cache is not active, 1 in case write via cache was successful, 2 in case write via cache failed. ; Definition at line 2519 of file TFile.cxx. ◆ WriteFree(). void TFile::WriteFree ; (; ). virtual . Write FREE linked list on the file. ; The linked list of FREE segments (fFree) is written as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2543 of file TFile.cxx. ◆ WriteHeader(). void TFile::WriteHeader ; (; ). virtual . Write File Header. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2615 of file TFile.cxx. ◆ WriteProcessID(). UShort_t TFile::WriteProcessID ; (; TProcessID * ; pid). virtual . Check if the ProcessID pidd is a",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:75766,Deployability,update,update,75766,"ementation. and one header per class that is not nested inside another class. The header file name is the fully qualified name of the class after all the special characters ""<>,:"" are replaced by underscored. For example for std::pair<edm::Vertex,int> the file name is pair_edm__Vertex_int_.h. In the generated classes, map, multimap when the first template parameter is a class are replaced by a vector of pair. set and multiset when the tempalte parameter is a class are replaced by a vector. This is required since we do not have the code needed to order and/or compare the object of the classes. This is a quick explanation of the options available: . Option Details . new (default) A new directory dirname is created. If dirname already exist, an error message is printed and the function returns. . recreate If dirname does not exist, it is created (like in ""new""). If dirname already exist, all existing files in dirname are deleted before creating the new files. . update New classes are added to the existing directory. Existing classes with the same name are replaced by the new definition. If the directory dirname doest not exist, same effect as ""new"". . genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirnameLinkDef.h file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; a shared lib dirname.so will be created. If the option ""++"" is specified, the generated shared lib is dynamically linked with the current executable module. If the option ""+"" and ""nocompile"" are specified, t",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:88542,Deployability,update,updated,88542,"t_t ; len . ). protected . Read buffer via cache. ; Returns 0 if the requested block is not in the cache, 1 in case read via cache was successful, 2 in case read via cache failed. ; Definition at line 1889 of file TFile.cxx. ◆ ReadFree(). void TFile::ReadFree ; (; ). virtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is u",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89100,Deployability,update,update,89100,". The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the sys",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:25910,Integrability,message,message,25910," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer)",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:26451,Integrability,message,message,26451,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ; ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:27199,Integrability,message,message,27199,"ct with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be o",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:29944,Integrability,message,message,29944," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:30317,Integrability,message,message,30317," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;  ; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *handle);  Get status of the async open request related to 'handle'. ;  ; static const char * GetCacheFileDir ();  Get the directory where to loca",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:32302,Integrability,protocol,protocol,32302,"const char * GetCacheFileDir ();  Get the directory where to locally stage/cache remote files. ;  ; static const TUrl * GetEndpointUrl (const char *name);  Get final URL for file being opened asynchronously. ;  ; static Long64_t GetFileBytesRead ();  Static function returning the total number of bytes read from all files. ;  ; static Long64_t GetFileBytesWritten ();  Static function returning the total number of bytes written to all files. ;  ; static Long64_t GetFileCounter ();  ; static Int_t GetFileReadCalls ();  Static function returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:71187,Integrability,protocol,protocol,71187,"ile.root"");; auto list = f.GetStreamerInfoList();; auto info = dynamic_cast<TStreamerInfo*>(list->FindObject(""MyClass""));; if (info) auto classversionid = info->GetClassVersion();; delete list;; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStreamerInfo::GetClassVersionInt_t GetClassVersion() const overrideDefinition TStreamerInfo.h:202. Definition at line 1445 of file TFile.cxx. ◆ GetStreamerInfoListImpl(). TFile::InfoListRet TFile::GetStreamerInfoListImpl ; (; bool ; lookupSICache). protectedvirtual . See documentation of GetStreamerInfoList for more details. ; This is an internal method which returns the list of streamer infos and also information about the success of the operation. ; Reimplemented in TXMLFile, and TSQLFile.; Definition at line 1376 of file TFile.cxx. ◆ GetType(). TFile::EFileType TFile::GetType ; (; const char * ; name, . Option_t * ; option = """", . TString * ; prefix = nullptr . ). static . Resolve the file type as a function of the protocol field in 'name'. ; If defined, the string 'prefix' is added when testing the locality of a 'name' with network-like structure (i.e. root://host//path); if the file is local, on return 'prefix' will contain the actual local path of the file. ; Definition at line 4821 of file TFile.cxx. ◆ GetVersion(). Int_t TFile::GetVersion ; (; ); const. inline . Definition at line 245 of file TFile.h. ◆ IncrementFileCounter(). void TFile::IncrementFileCounter ; (; ). static . Definition at line 4620 of file TFile.cxx. ◆ IncrementProcessIDs(). virtual void TFile::IncrementProcessIDs ; (; ). inlinevirtual . Definition at line 257 of file TFile.h. ◆ Init(). void TFile::Init ; (; Bool_t ; create). protectedvirtual . Initialize a TFile object. ; Parameters. [in]createCreate a new file. TFile implementations providing asynchronous open functionality need to override this method to run the appropriate checks before calling this standard initialization part. See TXNetFile::Init for an examp",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:75551,Integrability,message,message,75551,"ich a TClass object does not exist.; The code generated includes:; dirnameProjectHeaders.h, which contains one #include statement per generated header file; dirnameProjectSource.cxx,which contains all the constructors and destructors implementation. and one header per class that is not nested inside another class. The header file name is the fully qualified name of the class after all the special characters ""<>,:"" are replaced by underscored. For example for std::pair<edm::Vertex,int> the file name is pair_edm__Vertex_int_.h. In the generated classes, map, multimap when the first template parameter is a class are replaced by a vector of pair. set and multiset when the tempalte parameter is a class are replaced by a vector. This is required since we do not have the code needed to order and/or compare the object of the classes. This is a quick explanation of the options available: . Option Details . new (default) A new directory dirname is created. If dirname already exist, an error message is printed and the function returns. . recreate If dirname does not exist, it is created (like in ""new""). If dirname already exist, all existing files in dirname are deleted before creating the new files. . update New classes are added to the existing directory. Existing classes with the same name are replaced by the new definition. If the directory dirname doest not exist, same effect as ""new"". . genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirnameLinkDef.h file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the cur",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:81657,Integrability,depend,dependent,81657,"y title: ntuple 220200820/155032 At:88646 N=29209 TBasket CX = 1.10 name: pz title: ntuple 220200820/155032 At:117855 N=10197 TBasket CX = 3.14 name: i title: ntuple ... 20200820/155032 At:405110 N=808 TNtuple CX = 3.53 name: ntuple title: Demo ntuple 20200820/155706 At:405918 N=307 KeysList name: hsimple.root title: Demo ROOT file with histograms 20200820/155032 At:406225 N=8556 StreamerInfo CX = 3.42 name: StreamerInfo title: Doubly linked list 20200820/155708 At:414781 N=86 FreeSegments name: hsimple.root title: Demo ROOT file with histograms 20200820/155708 At:414867 N=1 END; Note: The combined size of the classname, name and title is truncated to 476 characters (a little more for regular keys of small files) ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1567 of file TFile.cxx. ◆ Matches(). Bool_t TFile::Matches ; (; const char * ; url). virtual . Return kTRUE if 'url' matches the coordinates of this file. ; The check is implementation dependent and may need to be overload by each TFile implementation relying on this check. The default implementation checks the file name only. ; Reimplemented in TNetFile.; Definition at line 4766 of file TFile.cxx. ◆ MustFlush(). virtual Bool_t TFile::MustFlush ; (; ); const. inlinevirtual . Definition at line 269 of file TFile.h. ◆ Open() [1/2]. TFile * TFile::Open ; (; const char * ; url, . Option_t * ; options = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). static . Create / open a file. ; The type of the file can be either a TFile, TNetFile, TWebFile or any TFile derived class for which an plugin library handler has been registered with the plugin manager (for the plugin manager see the TPluginManager class). The returned type of TFile depends on the file name specified by 'url'. If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried sequentially in the specified order until a successful open. If the fi",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:82503,Integrability,depend,depends,82503,"ol_t TFile::Matches ; (; const char * ; url). virtual . Return kTRUE if 'url' matches the coordinates of this file. ; The check is implementation dependent and may need to be overload by each TFile implementation relying on this check. The default implementation checks the file name only. ; Reimplemented in TNetFile.; Definition at line 4766 of file TFile.cxx. ◆ MustFlush(). virtual Bool_t TFile::MustFlush ; (; ); const. inlinevirtual . Definition at line 269 of file TFile.h. ◆ Open() [1/2]. TFile * TFile::Open ; (; const char * ; url, . Option_t * ; options = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). static . Create / open a file. ; The type of the file can be either a TFile, TNetFile, TWebFile or any TFile derived class for which an plugin library handler has been registered with the plugin manager (for the plugin manager see the TPluginManager class). The returned type of TFile depends on the file name specified by 'url'. If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried sequentially in the specified order until a successful open. If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile, etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:86430,Integrability,rout,routine,86430," Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, TXNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1770 of file TFile.cxx. ◆ ReadBuffer() [2/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile, and TXNetFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TXNetFile, TDCacheFile, TNetFile, TS3WebFile, TWebFile, and TNetXNGFile.; Definition at line 1821 of file TFile.cxx. ◆ ReadBufferViaCa",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89234,Integrability,message,message,89234,"ered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:98977,Integrability,interface,interface,98977," TSQLFile, TXMLFile, TXNetFile, TDCacheFile, TMemFile, and TNetFile.; Definition at line 4481 of file TFile.cxx. ◆ SysRead(). Int_t TFile::SysRead ; (; Int_t ; fd, . void * ; buf, . Int_t ; len . ). protectedvirtual . Interface to system read. All arguments like in POSIX read(). ; Reimplemented in TDCacheFile, TMemFile, TSQLFile, and TXMLFile.; Definition at line 4506 of file TFile.cxx. ◆ SysSeek(). Long64_t TFile::SysSeek ; (; Int_t ; fd, . Long64_t ; offset, . Int_t ; whence . ). protectedvirtual . Interface to system lseek. ; All arguments like in POSIX lseek() except that the offset and return value are of a type which are able to handle 64 bit file systems. ; Reimplemented in TDCacheFile, TMemFile, TSQLFile, and TXMLFile.; Definition at line 4525 of file TFile.cxx. ◆ SysStat(). Int_t TFile::SysStat ; (; Int_t ; fd, . Long_t * ; id, . Long64_t * ; size, . Long_t * ; flags, . Long_t * ; modtime . ). protectedvirtual . Return file stat information. ; The interface and return value is identical to TSystem::GetPathInfo(). The function returns 0 in case of success and 1 if the file could not be stat'ed. ; Reimplemented in TXNetFile, TDCacheFile, TMemFile, TNetFile, TSQLFile, and TXMLFile.; Definition at line 4543 of file TFile.cxx. ◆ SysSync(). Int_t TFile::SysSync ; (; Int_t ; fd). protectedvirtual . Interface to system fsync. All arguments like in POSIX fsync(). ; Reimplemented in TDCacheFile, TMemFile, TSQLFile, and TXMLFile.; Definition at line 4552 of file TFile.cxx. ◆ SysWrite(). Int_t TFile::SysWrite ; (; Int_t ; fd, . const void * ; buf, . Int_t ; len . ). protectedvirtual . Interface to system write. All arguments like in POSIX write(). ; Reimplemented in TDCacheFile, TMemFile, TSQLFile, and TXMLFile.; Definition at line 4514 of file TFile.cxx. ◆ Write() [1/2]. Int_t TFile::Write ; (; const char * ; name = nullptr, . Int_t ; opt = 0, . Int_t ; bufsiz = 0 . ); const. overridevirtual . One can not save a const TDirectory object. ; Reimplemented from TDirectoryF",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:3537,Modifiability,inherit,inherited,3537,"essed object . 11->14 Datime Date and time when object was written to file . 15->16 KeyLen Length of the key structure (in bytes) . 17->18 Cycle Cycle of key . 19->22 [19->26] SeekKey Pointer to record itself (consistency check) . 23->26 [27->34] SeekPdir Pointer to directory header . 27->27 [35->35] lname Number of bytes in the class name . 28->.. [36->..] ClassName Object Class Name . ..->.. lname Number of bytes in the object name . ..->.. Name lName bytes with the name of the object . ..->.. lTitle Number of bytes in the object title . ..->.. Title Title of the object . --—> DATA Data bytes associated to the object . The structure of a directory is shown in TDirectoryFile::TDirectoryFile. PyROOT; In the same way as for TDirectory, it is possible to get the content of a TFile object with the familiar item-getting syntax. For more information, please refer to the TDirectory documentation.; In addition, TFile instances can be inspected via the Get method, a feature that is inherited from TDirectoryFile (please see the documentation of TDirectoryFile for examples on how to use it).; In order to write objects into a TFile, the WriteObject Python method can be used (more information in the documentation of TDirectoryFile).; PyROOT modifies the TFile constructor and the TFile::Open method to make them behave in a more pythonic way. In particular, they both throw an OSError if there was a problem accessing the file (e.g. non-existent or corrupted file).; This class can also be used as a context manager, with the goal of opening a file and doing some quick manipulations of the objects inside it. The TFile::Close method will be automatically called at the end of the context. For example: from ROOT import TFile; with TFile(""file1.root"", ""recreate"") as outfile:; hout = ROOT.TH1F(...); outfile.WriteObject(hout, ""myhisto""); TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; Since the file is close",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:6586,Modifiability,inherit,inherited,6586,"AOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Close (Option_t *option="""") override;  Close a file. ;  ; void Copy (TObject &) const override",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:6692,Modifiability,inherit,inherited,6692,"AOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Close (Option_t *option="""") override;  Close a file. ;  ; void Copy (TObject &) const override",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:14999,Modifiability,inherit,inherited,14999,"amerNVirtual_b);  ; void SumBuffer (Int_t bufsize);  Increment statistics for buffer sizes of objects in this file. ;  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) const override;  One can not save a const TDirectory object. ;  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) override;  Write memory objects to this file. ;  ; virtual Bool_t WriteBuffer (const char *buf, Int_t len);  Write a buffer to the file. ;  ; virtual void WriteFree ();  Write FREE linked list on the file. ;  ; virtual void WriteHeader ();  Write File Header. ;  ; virtual UShort_t WriteProcessID (TProcessID *pid);  Check if the ProcessID pidd is already in the file, if not, add it and return the index number in the local file list. ;  ; virtual void WriteStreamerInfo ();  Write the list of TStreamerInfo as a single object in this file The class Streamer description for all classes written to this file is saved. ;  ;  Public Member Functions inherited from TDirectoryFile;  TDirectoryFile ();  Default TDirectoryFile constructor. ;  ;  TDirectoryFile (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new TDirectoryFile. ;  ;  ~TDirectoryFile () override;  Destructor. ;  ; void Add (TObject *obj, Bool_t replace=kFALSE) override;  ; void Append (TObject *obj, Bool_t replace=kFALSE) override;  Append object to this directory. ;  ; Int_t AppendKey (TKey *key) override;  Insert key in the linked list of keys of this directory. ;  ; void Browse (TBrowser *b) override;  Browse the content of the directory. ;  ; void Build (TFile *motherFile=nullptr, TDirectory *motherDir=nullptr) override;  ; Bool_t cd () override;  Change current directory to ""this"" directory. ;  ; Bool_t cd (const char *path) override;  Change current directory the directory described by the path if given one. ;  ; TObject * CloneObject (const TObject *obj, Bool_t autoadd=kTRUE) override;  Make a clone of an object using the Streamer facilit",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:20768,Modifiability,inherit,inherited,20768,"d in the dictionary of the parent class and store the corresponding exec number into fBits. ;  ; void SetWritable (Bool_t writable=kTRUE) override;  Set the new value of fWritable recursively. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteDirHeader () override;  Overwrite the Directory header record. ;  ; void WriteKeys () override;  Write Keys linked list on the file. ;  ; Int_t WriteObjectAny (const void *obj, const char *classname, const char *name, Option_t *option="""", Int_t bufsize=0) override;  Write object from pointer of class classname in this directory. ;  ; Int_t WriteObjectAny (const void *obj, const TClass *cl, const char *name, Option_t *option="""", Int_t bufsize=0) override;  Write object of class with dictionary cl in this directory. ;  ; Int_t WriteTObject (const TObject *obj, const char *name=nullptr, Option_t *option="""", Int_t bufsize=0) override;  Write object obj to this directory. ;  ;  Public Member Functions inherited from TDirectory;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; void Clear (Option_t *option="""") override;  Delete all objects from a Directory list. ;  ; virtual void DeleteAll (Option_t *option="""");  Delete all objects from memory. ;  ; TObject * FindObject (const char *name) const override;  Find object by name in the list of memory objects. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object in the list of memory objects. ;  ; template<class T > ; T * Get (const char *namecycle);  See documentation of TDirectoryFile::Get(const char *namecycle) ;  ; virtual TList * GetList () const;  ; TObject * GetMother () const;  ; TDirectory * GetMotherDir () const;  ; template<class T > ; void GetObject (const char *namecycle, T *&ptr);  Get an object with proper type checking. ;  ; virtual const char * G",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:23202,Modifiability,inherit,inherited,23202,"ecursively remove object from a Directory. ;  ; virtual TObject * Remove (TObject *);  Remove an object from the in-memory list. ;  ; virtual void SetMother (TObject *mother);  ; void SetName (const char *newname) override;  Set the name for directory If the directory name is changed after the directory was written once, ROOT currently would NOT change the name of correspondent key in the mother directory. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; template<typename T > ; std::enable_if_t<!std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ; template<typename T > ; std::enable_if_t< std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:24702,Modifiability,inherit,inherited,24702," *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:25540,Modifiability,inherit,inheritance,25540,"amer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics sys",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:27297,Modifiability,inherit,inherits,27297,"Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op).",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:27414,Modifiability,inherit,inherits,27414,"nst char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:33574,Modifiability,inherit,inherited,33574,"l_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:33792,Modifiability,inherit,inherited,33792,"l_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:34625,Modifiability,inherit,inherited,34625,"AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:34835,Modifiability,inherit,inherited,34835,"AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:37166,Modifiability,inherit,inherited,37166,"virtual Int_t SysClose (Int_t fd);  Interface to system close. All arguments like in POSIX close(). ;  ; virtual Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode);  Interface to system open. All arguments like in POSIX open(). ;  ; virtual Int_t SysRead (Int_t fd, void *buf, Int_t len);  Interface to system read. All arguments like in POSIX read(). ;  ; virtual Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence);  Interface to system lseek. ;  ; virtual Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime);  Return file stat information. ;  ; virtual Int_t SysSync (Int_t fd);  Interface to system fsync. All arguments like in POSIX fsync(). ;  ; virtual Int_t SysWrite (Int_t fd, const void *buf, Int_t len);  Interface to system write. All arguments like in POSIX write(). ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr); ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:37556,Modifiability,inherit,inherited,37556," offset, Int_t whence);  Interface to system lseek. ;  ; virtual Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime);  Return file stat information. ;  ; virtual Int_t SysSync (Int_t fd);  Interface to system fsync. All arguments like in POSIX fsync(). ;  ; virtual Int_t SysWrite (Int_t fd, const void *buf, Int_t len);  Interface to system write. All arguments like in POSIX write(). ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:38445,Modifiability,inherit,inherited,38445,"ted data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any)",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:41666,Modifiability,inherit,inherited,41666,;  !Seek offset cache ;  ; TList * fOpenPhases {nullptr};  !Time info about open phases ;  ; TString fOption;  File options. ;  ; TObjArray * fProcessIDs {nullptr};  !Array of pointers to TProcessIDs ;  ; Int_t fReadCalls {0};  Number of read calls ( not counting the cache calls ) ;  ; TString fRealName;  Effective real file name (not original url) ;  ; Long64_t fSeekFree {0};  Location on disk of free segments structure. ;  ; Long64_t fSeekInfo {0};  Location on disk of StreamerInfo record. ;  ; Double_t fSum2Buffer {0};  Sum of squares of buffer sizes of objects written so far. ;  ; Double_t fSumBuffer {0};  Sum of buffer sizes of objects written so far. ;  ; Char_t fUnits {0};  Number of bytes for file pointers. ;  ; TUrl fUrl;  !URL of file ;  ; Int_t fVersion {0};  File format version. ;  ; std::mutex fWriteMutex;  !Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to create new TKeys. ;  ; TDatime fDatimeC;  Date and time when directory is created. ;  ; TDatime fDatimeM;  Date and time of last modification. ;  ; TFile * fFile {nullptr};  Pointer to current file in memory. ;  ; TList * fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vect,MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:42502,Modifiability,inherit,inherited,42502,"Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to create new TKeys. ;  ; TDatime fDatimeC;  Date and time when directory is created. ;  ; TDatime fDatimeM;  Date and time of last modification. ;  ; TFile * fFile {nullptr};  Pointer to current file in memory. ;  ; TList * fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileF",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:42958,Modifiability,inherit,inherited,42958," fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadahe",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:44354,Modifiability,inherit,inherited,44354,"bjects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . Private Member Functions;  TFile (const TFile &)=delete;  ; void operator= (const TFile &)=delete;  . Static Private Member Functions; static void CpProgress (Long64_t bytesread, Long64_t size, TStopwatch &watch);  Print file copy progress. ;  ; static TFile * OpenFromCache (const char *name, Option_t *="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Open a file for reading through the file cache. ;  . Friends; class TBasket;  ; class TDirectoryFile;  ; class TFilePrefetch;  . Additional Inherited Members;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:45067,Modifiability,inherit,inherited,45067,"dInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . Private Member Functions;  TFile (const TFile &)=delete;  ; void operator= (const TFile &)=delete;  . Static Private Member Functions; static void CpProgress (Long64_t bytesread, Long64_t size, TStopwatch &watch);  Print file copy progress. ;  ; static TFile * OpenFromCache (const char *name, Option_t *="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Open a file for reading through the file cache. ;  . Friends; class TBasket;  ; class TDirectoryFile;  ; class TFilePrefetch;  . Additional Inherited Members;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TDirectory; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  . #include <TFile.h>. Inheritance diagram for TFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkStartBigFile . Definition at line 200 of file TFile.h. ◆ EAsyncOpenStatus. enum TFile::EAsyncOpenStatus. Asynchronous open request status. . EnumeratorkAOSNotAsync ; kAOSFailure ; kAOSInProgress ; kAOSSuccess . Definitio",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:45258,Modifiability,inherit,inherited,45258,"tes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . Private Member Functions;  TFile (const TFile &)=delete;  ; void operator= (const TFile &)=delete;  . Static Private Member Functions; static void CpProgress (Long64_t bytesread, Long64_t size, TStopwatch &watch);  Print file copy progress. ;  ; static TFile * OpenFromCache (const char *name, Option_t *="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Open a file for reading through the file cache. ;  . Friends; class TBasket;  ; class TDirectoryFile;  ; class TFilePrefetch;  . Additional Inherited Members;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TDirectory; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  . #include <TFile.h>. Inheritance diagram for TFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkStartBigFile . Definition at line 200 of file TFile.h. ◆ EAsyncOpenStatus. enum TFile::EAsyncOpenStatus. Asynchronous open request status. . EnumeratorkAOSNotAsync ; kAOSFailure ; kAOSInProgress ; kAOSSuccess . Definition at line 64 of file TFile.h. ◆ ECacheAction. enum TFile::ECacheAction. TTreeCache flushing semantics. . EnumeratorkDisconnect ; kDoNotDisconnect . Definition at line 70 of file TFile.h. ◆ EFileType. enum TFile::EFileType. ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:45364,Modifiability,inherit,inherited,45364,"tes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . Private Member Functions;  TFile (const TFile &)=delete;  ; void operator= (const TFile &)=delete;  . Static Private Member Functions; static void CpProgress (Long64_t bytesread, Long64_t size, TStopwatch &watch);  Print file copy progress. ;  ; static TFile * OpenFromCache (const char *name, Option_t *="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Open a file for reading through the file cache. ;  . Friends; class TBasket;  ; class TDirectoryFile;  ; class TFilePrefetch;  . Additional Inherited Members;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TDirectory; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  . #include <TFile.h>. Inheritance diagram for TFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkStartBigFile . Definition at line 200 of file TFile.h. ◆ EAsyncOpenStatus. enum TFile::EAsyncOpenStatus. Asynchronous open request status. . EnumeratorkAOSNotAsync ; kAOSFailure ; kAOSInProgress ; kAOSSuccess . Definition at line 64 of file TFile.h. ◆ ECacheAction. enum TFile::ECacheAction. TTreeCache flushing semantics. . EnumeratorkDisconnect ; kDoNotDisconnect . Definition at line 70 of file TFile.h. ◆ EFileType. enum TFile::EFileType. ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:48061,Modifiability,plugin,plugin,48061,"h. Constructor & Destructor Documentation. ◆ TFile() [1/3]. TFile::TFile ; (; const TFile & ; ). privatedelete . ◆ TFile() [2/3]. TFile::TFile ; (; ). File default Constructor. ; Definition at line 201 of file TFile.cxx. ◆ TFile() [3/3]. TFile::TFile ; (; const char * ; fname1, . Option_t * ; option = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault . ). Opens or creates a local ROOT file. ; Parameters. [in]fname1The name of the file ; [in]optionSpecifies the mode in which the file is opened ; [in]ftitleThe title of the file ; [in]compressSpecifies the compression algorithm and level. It is recommended to specify fname1 as ""<file>.root"". The suffix "".root"" will be used by object browsers to automatically identify the file as a ROOT file. If the constructor fails in any way IsZombie() will return true. Use IsOpen() to check if the file is (still) open. To open non-local files use the static TFile::Open() method, that will take care of opening the files using the correct remote file access plugin. Option Description . NEW or CREATE Create a new file and open it for writing, if the file already exists the file is not opened. . RECREATE Create a new file, if the file already exists it will be overwritten. . UPDATE Open an existing file for writing. If no file exists, it is created. . READ Open an existing file for reading (default). . NET Used by derived remote file access classes, not a user callable option. . WEB Used by derived remote http access class, not a user callable option. . READ_WITHOUT_GLOBALREGISTRATION Used by TTreeProcessorMT, not a user callable option. . If option = """" (default), READ is assumed. The file can be specified as a URL of the form: file:///user/rdm/bla.root or file:/user/rdm/bla.root; The file can also be a member of an archive, in which case it is specified as: multi.zip#file.root or multi.zip#0; which will open file.root which is a member of the file multi.zip archive or membe",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:49106,Modifiability,plugin,plugins,49106,"ew file and open it for writing, if the file already exists the file is not opened. . RECREATE Create a new file, if the file already exists it will be overwritten. . UPDATE Open an existing file for writing. If no file exists, it is created. . READ Open an existing file for reading (default). . NET Used by derived remote file access classes, not a user callable option. . WEB Used by derived remote http access class, not a user callable option. . READ_WITHOUT_GLOBALREGISTRATION Used by TTreeProcessorMT, not a user callable option. . If option = """" (default), READ is assumed. The file can be specified as a URL of the form: file:///user/rdm/bla.root or file:/user/rdm/bla.root; The file can also be a member of an archive, in which case it is specified as: multi.zip#file.root or multi.zip#0; which will open file.root which is a member of the file multi.zip archive or member 1 from the archive. For more on archive file support see the TArchiveFile class. TFile and its remote access plugins can also be used to open any file, i.e. also non ROOT files, using: file.tar?filetype=raw; This is convenient because the many remote file access plugins allow easy access to/from the many different mass storage systems. The title of the file (ftitle) will be shown by the ROOT browsers. A ROOT file (like a Unix file system) may contain objects and directories. There are no restrictions for the number of levels of directories. A ROOT file is designed such that one can write in the file in pure sequential mode (case of BATCH jobs). In this case, the file may be read sequentially again without using the file index written at the end of the file. In case of a job crash, all the information on the file is therefore protected. A ROOT file can be used interactively. In this case, one has the possibility to delete existing objects and add new ones. When an object is deleted from the file, the freed space is added into the FREE linked list (fFree). The FREE list consists of a chain of consecuti",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:49260,Modifiability,plugin,plugins,49260,"ll be overwritten. . UPDATE Open an existing file for writing. If no file exists, it is created. . READ Open an existing file for reading (default). . NET Used by derived remote file access classes, not a user callable option. . WEB Used by derived remote http access class, not a user callable option. . READ_WITHOUT_GLOBALREGISTRATION Used by TTreeProcessorMT, not a user callable option. . If option = """" (default), READ is assumed. The file can be specified as a URL of the form: file:///user/rdm/bla.root or file:/user/rdm/bla.root; The file can also be a member of an archive, in which case it is specified as: multi.zip#file.root or multi.zip#0; which will open file.root which is a member of the file multi.zip archive or member 1 from the archive. For more on archive file support see the TArchiveFile class. TFile and its remote access plugins can also be used to open any file, i.e. also non ROOT files, using: file.tar?filetype=raw; This is convenient because the many remote file access plugins allow easy access to/from the many different mass storage systems. The title of the file (ftitle) will be shown by the ROOT browsers. A ROOT file (like a Unix file system) may contain objects and directories. There are no restrictions for the number of levels of directories. A ROOT file is designed such that one can write in the file in pure sequential mode (case of BATCH jobs). In this case, the file may be read sequentially again without using the file index written at the end of the file. In case of a job crash, all the information on the file is therefore protected. A ROOT file can be used interactively. In this case, one has the possibility to delete existing objects and add new ones. When an object is deleted from the file, the freed space is added into the FREE linked list (fFree). The FREE list consists of a chain of consecutive free segments on the file. At the same time, the first 4 bytes of the freed record on the file are overwritten by GAPSIZE where GAPSIZE = -(Numb",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:52464,Modifiability,variab,variable,52464,"bie. One can detect this situation with a code like: TFile f(""file.root"");; if (f.IsZombie()) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; f#define f(i)Definition RSha256.hxx:104; If you open a file instead with TFile::Open(""file.root"") use rather the following code as a nullptr is returned. TFile* f = TFile::Open(""file.root"");; if (!f) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; When opening the file, the system checks the validity of this directory. If something wrong is detected, an automatic Recovery is performed. In this case, the file is scanned sequentially reading all logical blocks and attempting to rebuild a correct directory (see TFile::Recover). One can disable the automatic recovery procedure when reading one or more files by setting the environment variable ""TFile.Recover: 0"" in the system.rootrc file.; A bit TFile::kReproducible can be enabled specifying the ""reproducible"" url option when creating the file: TFile *f = TFile::Open(""name.root?reproducible"",""RECREATE"",""File title"");; Unlike regular TFiles, the content of such file has reproducible binary content when writing exactly same data. This achieved by writing pre-defined values for creation and modification date of TKey/TDirectory objects and null value for TUUID objects inside TFile. As drawback, TRef objects stored in such file cannot be read correctly.; In case the name of the file is not reproducible either (in case of creating temporary filenames) a value can be passed to the reproducible option to replace the name stored in the file. TFile *f = TFile::Open(""tmpname.root?reproducible=fixedname"",""RECREATE"",""File title"");. Definition at line 339 of file TFile.cxx. ◆ ~TFile(). TFile::~TFile ; (; ). override . File destructor.",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:80330,Modifiability,extend,extended,80330,"9616 TBasket CX = 1.08; 20010404/150441 At:214574 N=29075 TBasket CX = 1.10; 20010404/150441 At:243649 N=9583 TBasket CX = 3.34; 20010404/150442 At:253232 N=28324 TBasket CX = 1.13; 20010404/150442 At:281556 N=29641 TBasket CX = 1.08; 20010404/150442 At:311197 N=29633 TBasket CX = 1.08; 20010404/150442 At:340830 N=29091 TBasket CX = 1.10; 20010404/150442 At:369921 N=10341 TBasket CX = 3.09; 20010404/150442 At:380262 N=509 TH1F CX = 1.93; 20010404/150442 At:380771 N=1769 TH2F CX = 4.32; 20010404/150442 At:382540 N=1849 TProfile CX = 1.65; 20010404/150442 At:384389 N=18434 TNtuple CX = 4.51; 20010404/150442 At:402823 N=307 KeysList; 20010404/150443 At:403130 N=4548 StreamerInfo CX = 3.65; 20010404/150443 At:407678 N=86 FreeSegments; 20010404/150443 At:407764 N=1 END; If the parameter opt contains ""forComp"", the Date/Time is omitted and the decompressed size is also printed.; Record_Adress Logical_Record_Length Key_Length Object_Record_Length ClassName CompressionFactor; If the parameter opt contains ""extended"", the name and title of the keys are added: 20200820/155031 At:100 N=180 TFile name: hsimple.root title: Demo ROOT file with histograms 220200820/155032 At:280 N=28880 TBasket CX = 1.11 name: random title: ntuple 220200820/155032 At:29160 N=29761 TBasket CX = 1.08 name: px title: ntuple 220200820/155032 At:58921 N=29725 TBasket CX = 1.08 name: py title: ntuple 220200820/155032 At:88646 N=29209 TBasket CX = 1.10 name: pz title: ntuple 220200820/155032 At:117855 N=10197 TBasket CX = 3.14 name: i title: ntuple ... 20200820/155032 At:405110 N=808 TNtuple CX = 3.53 name: ntuple title: Demo ntuple 20200820/155706 At:405918 N=307 KeysList name: hsimple.root title: Demo ROOT file with histograms 20200820/155032 At:406225 N=8556 StreamerInfo CX = 3.42 name: StreamerInfo title: Doubly linked list 20200820/155708 At:414781 N=86 FreeSegments name: hsimple.root title: Demo ROOT file with histograms 20200820/155708 At:414867 N=1 END; Note: The combined size of the classname, n",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:82354,Modifiability,plugin,plugin,82354,"(a little more for regular keys of small files) ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1567 of file TFile.cxx. ◆ Matches(). Bool_t TFile::Matches ; (; const char * ; url). virtual . Return kTRUE if 'url' matches the coordinates of this file. ; The check is implementation dependent and may need to be overload by each TFile implementation relying on this check. The default implementation checks the file name only. ; Reimplemented in TNetFile.; Definition at line 4766 of file TFile.cxx. ◆ MustFlush(). virtual Bool_t TFile::MustFlush ; (; ); const. inlinevirtual . Definition at line 269 of file TFile.h. ◆ Open() [1/2]. TFile * TFile::Open ; (; const char * ; url, . Option_t * ; options = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). static . Create / open a file. ; The type of the file can be either a TFile, TNetFile, TWebFile or any TFile derived class for which an plugin library handler has been registered with the plugin manager (for the plugin manager see the TPluginManager class). The returned type of TFile depends on the file name specified by 'url'. If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried sequentially in the specified order until a successful open. If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile, etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constru",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:82406,Modifiability,plugin,plugin,82406,"(a little more for regular keys of small files) ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1567 of file TFile.cxx. ◆ Matches(). Bool_t TFile::Matches ; (; const char * ; url). virtual . Return kTRUE if 'url' matches the coordinates of this file. ; The check is implementation dependent and may need to be overload by each TFile implementation relying on this check. The default implementation checks the file name only. ; Reimplemented in TNetFile.; Definition at line 4766 of file TFile.cxx. ◆ MustFlush(). virtual Bool_t TFile::MustFlush ; (; ); const. inlinevirtual . Definition at line 269 of file TFile.h. ◆ Open() [1/2]. TFile * TFile::Open ; (; const char * ; url, . Option_t * ; options = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). static . Create / open a file. ; The type of the file can be either a TFile, TNetFile, TWebFile or any TFile derived class for which an plugin library handler has been registered with the plugin manager (for the plugin manager see the TPluginManager class). The returned type of TFile depends on the file name specified by 'url'. If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried sequentially in the specified order until a successful open. If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile, etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constru",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:82430,Modifiability,plugin,plugin,82430,"(a little more for regular keys of small files) ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1567 of file TFile.cxx. ◆ Matches(). Bool_t TFile::Matches ; (; const char * ; url). virtual . Return kTRUE if 'url' matches the coordinates of this file. ; The check is implementation dependent and may need to be overload by each TFile implementation relying on this check. The default implementation checks the file name only. ; Reimplemented in TNetFile.; Definition at line 4766 of file TFile.cxx. ◆ MustFlush(). virtual Bool_t TFile::MustFlush ; (; ); const. inlinevirtual . Definition at line 269 of file TFile.h. ◆ Open() [1/2]. TFile * TFile::Open ; (; const char * ; url, . Option_t * ; options = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). static . Create / open a file. ; The type of the file can be either a TFile, TNetFile, TWebFile or any TFile derived class for which an plugin library handler has been registered with the plugin manager (for the plugin manager see the TPluginManager class). The returned type of TFile depends on the file name specified by 'url'. If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried sequentially in the specified order until a successful open. If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile, etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constru",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:82848,Modifiability,plugin,plugin,82848,"of file TFile.cxx. ◆ MustFlush(). virtual Bool_t TFile::MustFlush ; (; ); const. inlinevirtual . Definition at line 269 of file TFile.h. ◆ Open() [1/2]. TFile * TFile::Open ; (; const char * ; url, . Option_t * ; options = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). static . Create / open a file. ; The type of the file can be either a TFile, TNetFile, TWebFile or any TFile derived class for which an plugin library handler has been registered with the plugin manager (for the plugin manager see the TPluginManager class). The returned type of TFile depends on the file name specified by 'url'. If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried sequentially in the specified order until a successful open. If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile, etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile::AsyncOpen(...), it is possible to request a timeout with the option TIMEOUT=<secs>: the timeout must be specified in seconds and it will be internally checked with granularity of one millisec. For remote files there is the option: CACHEREAD opens an existing file for reading through the file cache. The file will be downloaded to the cache an",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:9188,Performance,cache,cache,9188,"Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; void Delete (const char *namecycle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; virtual void DrawMap (const char *keys=""*"", Option_t *option="""");  Draw map of objects in this file. ;  ; void FillBuffer (char *&buffer) override;  Encode file output buffer. ;  ; virtual void Flush ();  Synchronize a file's in-memory and on-disk states. ;  ; TArchiveFile * GetArchive () const;  ; Long64_t GetArchiveOffset () const;  ; Int_t GetBestBuffer () const;  Return the best buffer size of objects on this file. ;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; virtual Int_t GetBytesToPrefetch () const;  Max number of bytes to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbyt",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:9281,Performance,cache,cache,9281,"cle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; virtual void DrawMap (const char *keys=""*"", Option_t *option="""");  Draw map of objects in this file. ;  ; void FillBuffer (char *&buffer) override;  Encode file output buffer. ;  ; virtual void Flush ();  Synchronize a file's in-memory and on-disk states. ;  ; TArchiveFile * GetArchive () const;  ; Long64_t GetArchiveOffset () const;  ; Int_t GetBestBuffer () const;  Return the best buffer size of objects on this file. ;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; virtual Int_t GetBytesToPrefetch () const;  Max number of bytes to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Lo",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:10482,Performance,cache,cached,10482," const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; virtual Long64_t GetSize () const;  Returns the current file size. ;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; TClass * IsA () const override;  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first, Long64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, const char *classes=""*"", Option_t *option=""new"");  Generate source code necessary to access the objects stored in the file. ;  ; virtual void Map ();  ; virtual void Map (Option_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the co",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:12807,Performance,cache,cache,12807,", Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void ResetErrno () const;  Method resetting the errno. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ; ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:12898,Performance,cache,cache,12898,", Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void ResetErrno () const;  Method resetting the errno. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ; ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:12955,Performance,cache,cache,12955,"rAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void ResetErrno () const;  Method resetting the errno. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ;  ; Int_t Sizeof () const override;  Return the size in bytes of the file header. ;  ; void Streamer (TBuffer &) override",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:12991,Performance,cache,cache,12991,"rAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void ResetErrno () const;  Method resetting the errno. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ;  ; Int_t Sizeof () const override;  Return the size in bytes of the file header. ;  ; void Streamer (TBuffer &) override",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:17862,Performance,perform,performed,17862,"ject with name. ;  ; template<class T > ; T * Get (const char *namecycle);  See documentation of TDirectoryFile::Get(const char *namecycle) ;  ; TObject * Get (const char *namecycle) override;  Return pointer to object identified by namecycle. ;  ; Int_t GetBufferSize () const override;  Return the buffer size to create new TKeys. ;  ; const TDatime & GetCreationDate () const;  ; TDirectory * GetDirectory (const char *apath, Bool_t printError=false, const char *funcname=""GetDirectory"") override;  Find a directory named ""apath"". ;  ; TFile * GetFile () const override;  ; TKey * GetKey (const char *name, Short_t cycle=9999) const override;  Return pointer to key with name,cycle. ;  ; TList * GetListOfKeys () const override;  ; const TDatime & GetModificationDate () const;  ; Int_t GetNbytesKeys () const override;  ; Int_t GetNkeys () const override;  ; void * GetObjectChecked (const char *namecycle, const char *classname) override;  See documentation of TDirectoryFile::GetObjectCheck(const char *namecycle, const TClass *cl) ;  ; void * GetObjectChecked (const char *namecycle, const TClass *cl) override;  Return pointer to object identified by namecycle if and only if the actual object is a type suitable to be stored as a pointer to a ""expectedClass"" If expectedClass is null, no check is performed. ;  ; void * GetObjectUnchecked (const char *namecycle) override;  Return pointer to object identified by namecycle. ;  ; Long64_t GetSeekDir () const override;  ; Long64_t GetSeekKeys () const override;  ; Long64_t GetSeekParent () const override;  ; Bool_t IsModified () const override;  ; Bool_t IsWritable () const override;  ; TDirectory * mkdir (const char *name, const char *title="""", Bool_t returnExistingDirectory=kFALSE) override;  Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."". ;  ; TFile * OpenFile (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t neto",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:31319,Performance,cache,cache,31319,"sgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;  ; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *handle);  Get status of the async open request related to 'handle'. ;  ; static const char * GetCacheFileDir ();  Get the directory where to locally stage/cache remote files. ;  ; static const TUrl * GetEndpointUrl (const char *name);  Get final URL for file being opened asynchronously. ;  ; static Long64_t GetFileBytesRead ();  Static function returning the total number of bytes read from all files. ;  ; static Long64_t GetFileBytesWritten ();  Static function returning the total number of bytes written to all files. ;  ; static Long64_t GetFileCounter ();  ; static Int_t GetFileReadCalls ();  Static function returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:32734,Performance,cache,cacheDir,32734,"nction returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public M",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:32852,Performance,cache,cache,32852,"nction returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public M",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:33510,Performance,cache,cache,33510,"=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecy",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:35581,Performance,cache,cache,35581,"char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; virtual Int_t SysClose (Int_t fd);  Interface to system close. All arguments like in POSIX close(). ;  ; virtual Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode);  Interface to system open. All arguments like in POSIX open(). ;  ;",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:36203,Performance,cache,cache,36203,"rOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; virtual Int_t SysClose (Int_t fd);  Interface to system close. All arguments like in POSIX close(). ;  ; virtual Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode);  Interface to system open. All arguments like in POSIX open(). ;  ; virtual Int_t SysRead (Int_t fd, void *buf, Int_t len);  Interface to system read. All arguments like in POSIX read(). ;  ; virtual Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence);  Interface to system lseek. ;  ; virtual Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime);  Return file stat information. ;  ; virtual Int_t SysSync (Int_t fd);  Interface to system fsync. All arguments like in POSIX fsync(). ;  ; virtual Int_t SysWrite (Int_t fd, const void *buf, Int_t len);  Interface to system write. All arguments like in POSIX write(). ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inhe",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:37126,Performance,cache,cache,37126,"C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; virtual Int_t SysClose (Int_t fd);  Interface to system close. All arguments like in POSIX close(). ;  ; virtual Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode);  Interface to system open. All arguments like in POSIX open(). ;  ; virtual Int_t SysRead (Int_t fd, void *buf, Int_t len);  Interface to system read. All arguments like in POSIX read(). ;  ; virtual Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence);  Interface to system lseek. ;  ; virtual Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime);  Return file stat information. ;  ; virtual Int_t SysSync (Int_t fd);  Interface to system fsync. All arguments like in POSIX fsync(). ;  ; virtual Int_t SysWrite (Int_t fd, const void *buf, Int_t len);  Interface to system write. All arguments like in POSIX write(). ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TCo",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:39333,Performance,cache,cache,39333,"Object; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any) ;  ; TArrayC * fClassIndex {nullptr};  !Index of TStreamerInfo classes written to this file ;  ; Int_t fCompress {0};  Compression level and algorithm. ;  ; Int_t fD {-1};  File descriptor. ;  ; Long64_t fEND {0};  Last used byte in file. ;  ; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:39407,Performance,cache,cache,39407,"Object; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any) ;  ; TArrayC * fClassIndex {nullptr};  !Index of TStreamerInfo classes written to this file ;  ; Int_t fCompress {0};  Compression level and algorithm. ;  ; Int_t fD {-1};  File descriptor. ;  ; Long64_t fEND {0};  Last used byte in file. ;  ; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:39491,Performance,cache,cache,39491,"Object; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any) ;  ; TArrayC * fClassIndex {nullptr};  !Index of TStreamerInfo classes written to this file ;  ; Int_t fCompress {0};  Compression level and algorithm. ;  ; Int_t fD {-1};  File descriptor. ;  ; Long64_t fEND {0};  Last used byte in file. ;  ; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:40715,Performance,cache,cache,40715,"; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes for StreamerInfo record. ;  ; Bool_t fNoAnchorInName {kFALSE};  !True if we don't want to force the anchor to be appended to the file name ;  ; Int_t fNProcessIDs {0};  Number of TProcessID written to this file. ;  ; Long64_t fOffset {0};  !Seek offset cache ;  ; TList * fOpenPhases {nullptr};  !Time info about open phases ;  ; TString fOption;  File options. ;  ; TObjArray * fProcessIDs {nullptr};  !Array of pointers to TProcessIDs ;  ; Int_t fReadCalls {0};  Number of read calls ( not counting the cache calls ) ;  ; TString fRealName;  Effective real file name (not original url) ;  ; Long64_t fSeekFree {0};  Location on disk of free segments structure. ;  ; Long64_t fSeekInfo {0};  Location on disk of StreamerInfo record. ;  ; Double_t fSum2Buffer {0};  Sum of squares of buffer sizes of objects written so far. ;  ; Double_t fSumBuffer {0};  Sum of buffer sizes of objects written so far. ;  ; Char_t fUnits {0};  Number of bytes for file pointers. ;  ; TUrl fUrl;  !URL of file ;  ; Int_t fVersion {0};  File format version. ;  ; std::mutex fWriteMutex;  !Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to crea",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:40967,Performance,cache,cache,40967,"; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes for StreamerInfo record. ;  ; Bool_t fNoAnchorInName {kFALSE};  !True if we don't want to force the anchor to be appended to the file name ;  ; Int_t fNProcessIDs {0};  Number of TProcessID written to this file. ;  ; Long64_t fOffset {0};  !Seek offset cache ;  ; TList * fOpenPhases {nullptr};  !Time info about open phases ;  ; TString fOption;  File options. ;  ; TObjArray * fProcessIDs {nullptr};  !Array of pointers to TProcessIDs ;  ; Int_t fReadCalls {0};  Number of read calls ( not counting the cache calls ) ;  ; TString fRealName;  Effective real file name (not original url) ;  ; Long64_t fSeekFree {0};  Location on disk of free segments structure. ;  ; Long64_t fSeekInfo {0};  Location on disk of StreamerInfo record. ;  ; Double_t fSum2Buffer {0};  Sum of squares of buffer sizes of objects written so far. ;  ; Double_t fSumBuffer {0};  Sum of buffer sizes of objects written so far. ;  ; Char_t fUnits {0};  Number of bytes for file pointers. ;  ; TUrl fUrl;  !URL of file ;  ; Int_t fVersion {0};  File format version. ;  ; std::mutex fWriteMutex;  !Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to create new TKeys. ;  ; TDatime fDatimeC;  Date and time when directory is created. ;  ; TDatime fDatimeM;  Date and time of last modification. ;  ; TFile * fFile {nullptr};  Pointer to current file in memory. ;  ; TList * fKeys {n",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:43459,Performance,cache,cache,43459,"{kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:43489,Performance,cache,cached,43489,"{kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:44932,Performance,cache,cache,44932,"c UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . Private Member Functions;  TFile (const TFile &)=delete;  ; void operator= (const TFile &)=delete;  . Static Private Member Functions; static void CpProgress (Long64_t bytesread, Long64_t size, TStopwatch &watch);  Print file copy progress. ;  ; static TFile * OpenFromCache (const char *name, Option_t *="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Open a file for reading through the file cache. ;  . Friends; class TBasket;  ; class TDirectoryFile;  ; class TFilePrefetch;  . Additional Inherited Members;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TDirectory; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  . #include <TFile.h>. Inheritance diagram for TFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [lege",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:52204,Performance,perform,performed,52204,"he new compression settings will only apply to branches created or attached after the setting is changed and other objects written after the setting is changed. In case the file does not exist or is not a valid ROOT file, it is made a Zombie. One can detect this situation with a code like: TFile f(""file.root"");; if (f.IsZombie()) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; f#define f(i)Definition RSha256.hxx:104; If you open a file instead with TFile::Open(""file.root"") use rather the following code as a nullptr is returned. TFile* f = TFile::Open(""file.root"");; if (!f) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; When opening the file, the system checks the validity of this directory. If something wrong is detected, an automatic Recovery is performed. In this case, the file is scanned sequentially reading all logical blocks and attempting to rebuild a correct directory (see TFile::Recover). One can disable the automatic recovery procedure when reading one or more files by setting the environment variable ""TFile.Recover: 0"" in the system.rootrc file.; A bit TFile::kReproducible can be enabled specifying the ""reproducible"" url option when creating the file: TFile *f = TFile::Open(""name.root?reproducible"",""RECREATE"",""File title"");; Unlike regular TFiles, the content of such file has reproducible binary content when writing exactly same data. This achieved by writing pre-defined values for creation and modification date of TKey/TDirectory objects and null value for TUUID objects inside TFile. As drawback, TRef objects stored in such file cannot be read correctly.; In case the name of the file is not reproducible either (in case of creating temporary filenames) a value can be passed to the reproducible ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:61086,Performance,cache,cache,61086,"p is drawn, turn on the TCanvas option ""View->Event Statusbar"". Then, when moving the mouse in the canvas, the ""Event Status"" panels shows the object corresponding to the mouse position.; Example: auto f = new TFile(""myfile.root"");; f->DrawMap();; TFile::TFileTFile()File default Constructor.Definition TFile.cxx:201. Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1128 of file TFile.cxx. ◆ FillBuffer(). void TFile::FillBuffer ; (; char *& ; buffer). overridevirtual . Encode file output buffer. ; The file output buffer contains only the FREE data record. ; Reimplemented from TDirectoryFile.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1170 of file TFile.cxx. ◆ Flush(). void TFile::Flush ; (; ). virtual . Synchronize a file's in-memory and on-disk states. ; Reimplemented in TXNetFile, TSQLFile, TXMLFile, TNetFile, and TNetXNGFile.; Definition at line 1141 of file TFile.cxx. ◆ FlushWriteCache(). Bool_t TFile::FlushWriteCache ; (; ). protected . Flush the write cache if active. ; Return kTRUE in case of error ; Definition at line 1158 of file TFile.cxx. ◆ GetArchive(). TArchiveFile * TFile::GetArchive ; (; ); const. inline . Definition at line 220 of file TFile.h. ◆ GetArchiveOffset(). Long64_t TFile::GetArchiveOffset ; (; ); const. inline . Definition at line 221 of file TFile.h. ◆ GetAsyncOpenStatus() [1/3]. virtual EAsyncOpenStatus TFile::GetAsyncOpenStatus ; (; ). inlineprotectedvirtual . Reimplemented in TXNetFile.; Definition at line 137 of file TFile.h. ◆ GetAsyncOpenStatus() [2/3]. TFile::EAsyncOpenStatus TFile::GetAsyncOpenStatus ; (; const char * ; name). static . Get status of the async open request related to 'name'. ; Definition at line 4899 of file TFile.cxx. ◆ GetAsyncOpenStatus() [3/3]. TFile::EAsyncOpenStatus TFile::GetAsyncOpenStatus ; (; TFileOpenHandle * ; handle). static . Get status of the async open request related to 'handle'. ; Definition at line 4928 of file TFile.cxx. ◆ GetBestBuffer(). Int_t TFile::GetBestBuffer ; ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:62790,Performance,cache,cache,62790,ion at line 4899 of file TFile.cxx. ◆ GetAsyncOpenStatus() [3/3]. TFile::EAsyncOpenStatus TFile::GetAsyncOpenStatus ; (; TFileOpenHandle * ; handle). static . Get status of the async open request related to 'handle'. ; Definition at line 4928 of file TFile.cxx. ◆ GetBestBuffer(). Int_t TFile::GetBestBuffer ; (; ); const. Return the best buffer size of objects on this file. ; The best buffer size is estimated based on the current mean value and standard deviation of all objects written so far to this file. Returns mean value + one standard deviation. ; Definition at line 1183 of file TFile.cxx. ◆ GetBytesRead(). virtual Long64_t TFile::GetBytesRead ; (; ); const. inlinevirtual . Definition at line 241 of file TFile.h. ◆ GetBytesReadExtra(). virtual Long64_t TFile::GetBytesReadExtra ; (; ); const. inlinevirtual . Definition at line 242 of file TFile.h. ◆ GetBytesToPrefetch(). Int_t TFile::GetBytesToPrefetch ; (; ); const. virtual . Max number of bytes to prefetch. ; By default this is 75% of the read cache size. But specific TFile implementations may need to change it ; Reimplemented in TXNetFile.; Definition at line 5222 of file TFile.cxx. ◆ GetBytesWritten(). Long64_t TFile::GetBytesWritten ; (; ); const. virtual . Return the total number of bytes written so far to the file. ; Definition at line 4566 of file TFile.cxx. ◆ GetCacheFileDir(). const char * TFile::GetCacheFileDir ; (; ). static . Get the directory where to locally stage/cache remote files. ; Definition at line 4654 of file TFile.cxx. ◆ GetCacheRead(). TFileCacheRead * TFile::GetCacheRead ; (; const TObject * ; tree = nullptr); const. Return a pointer to the current read cache. ; Definition at line 1262 of file TFile.cxx. ◆ GetCacheWrite(). TFileCacheWrite * TFile::GetCacheWrite ; (; ); const. Return a pointer to the current write cache. ; Definition at line 1279 of file TFile.cxx. ◆ GetClassIndex(). TArrayC * TFile::GetClassIndex ; (; ); const. inline . Definition at line 226 of file TFile.h. ◆ GetCompres,MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:63232,Performance,cache,cache,63232,and standard deviation of all objects written so far to this file. Returns mean value + one standard deviation. ; Definition at line 1183 of file TFile.cxx. ◆ GetBytesRead(). virtual Long64_t TFile::GetBytesRead ; (; ); const. inlinevirtual . Definition at line 241 of file TFile.h. ◆ GetBytesReadExtra(). virtual Long64_t TFile::GetBytesReadExtra ; (; ); const. inlinevirtual . Definition at line 242 of file TFile.h. ◆ GetBytesToPrefetch(). Int_t TFile::GetBytesToPrefetch ; (; ); const. virtual . Max number of bytes to prefetch. ; By default this is 75% of the read cache size. But specific TFile implementations may need to change it ; Reimplemented in TXNetFile.; Definition at line 5222 of file TFile.cxx. ◆ GetBytesWritten(). Long64_t TFile::GetBytesWritten ; (; ); const. virtual . Return the total number of bytes written so far to the file. ; Definition at line 4566 of file TFile.cxx. ◆ GetCacheFileDir(). const char * TFile::GetCacheFileDir ; (; ). static . Get the directory where to locally stage/cache remote files. ; Definition at line 4654 of file TFile.cxx. ◆ GetCacheRead(). TFileCacheRead * TFile::GetCacheRead ; (; const TObject * ; tree = nullptr); const. Return a pointer to the current read cache. ; Definition at line 1262 of file TFile.cxx. ◆ GetCacheWrite(). TFileCacheWrite * TFile::GetCacheWrite ; (; ); const. Return a pointer to the current write cache. ; Definition at line 1279 of file TFile.cxx. ◆ GetClassIndex(). TArrayC * TFile::GetClassIndex ; (; ); const. inline . Definition at line 226 of file TFile.h. ◆ GetCompressionAlgorithm(). Int_t TFile::GetCompressionAlgorithm ; (; ); const. inline . Definition at line 385 of file TFile.h. ◆ GetCompressionFactor(). Float_t TFile::GetCompressionFactor ; (; ). Return the file compression factor. ; Add total number of compressed/uncompressed bytes for each key. Returns the ratio of the two. ; Definition at line 1202 of file TFile.cxx. ◆ GetCompressionLevel(). Int_t TFile::GetCompressionLevel ; (; ); const. inline,MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:63436,Performance,cache,cache,63436,etBytesRead ; (; ); const. inlinevirtual . Definition at line 241 of file TFile.h. ◆ GetBytesReadExtra(). virtual Long64_t TFile::GetBytesReadExtra ; (; ); const. inlinevirtual . Definition at line 242 of file TFile.h. ◆ GetBytesToPrefetch(). Int_t TFile::GetBytesToPrefetch ; (; ); const. virtual . Max number of bytes to prefetch. ; By default this is 75% of the read cache size. But specific TFile implementations may need to change it ; Reimplemented in TXNetFile.; Definition at line 5222 of file TFile.cxx. ◆ GetBytesWritten(). Long64_t TFile::GetBytesWritten ; (; ); const. virtual . Return the total number of bytes written so far to the file. ; Definition at line 4566 of file TFile.cxx. ◆ GetCacheFileDir(). const char * TFile::GetCacheFileDir ; (; ). static . Get the directory where to locally stage/cache remote files. ; Definition at line 4654 of file TFile.cxx. ◆ GetCacheRead(). TFileCacheRead * TFile::GetCacheRead ; (; const TObject * ; tree = nullptr); const. Return a pointer to the current read cache. ; Definition at line 1262 of file TFile.cxx. ◆ GetCacheWrite(). TFileCacheWrite * TFile::GetCacheWrite ; (; ); const. Return a pointer to the current write cache. ; Definition at line 1279 of file TFile.cxx. ◆ GetClassIndex(). TArrayC * TFile::GetClassIndex ; (; ); const. inline . Definition at line 226 of file TFile.h. ◆ GetCompressionAlgorithm(). Int_t TFile::GetCompressionAlgorithm ; (; ); const. inline . Definition at line 385 of file TFile.h. ◆ GetCompressionFactor(). Float_t TFile::GetCompressionFactor ; (; ). Return the file compression factor. ; Add total number of compressed/uncompressed bytes for each key. Returns the ratio of the two. ; Definition at line 1202 of file TFile.cxx. ◆ GetCompressionLevel(). Int_t TFile::GetCompressionLevel ; (; ); const. inline . Definition at line 391 of file TFile.h. ◆ GetCompressionSettings(). Int_t TFile::GetCompressionSettings ; (; ); const. inline . Definition at line 397 of file TFile.h. ◆ GetEND(). virtual Long64_t,MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:63599,Performance,cache,cache,63599," inlinevirtual . Definition at line 242 of file TFile.h. ◆ GetBytesToPrefetch(). Int_t TFile::GetBytesToPrefetch ; (; ); const. virtual . Max number of bytes to prefetch. ; By default this is 75% of the read cache size. But specific TFile implementations may need to change it ; Reimplemented in TXNetFile.; Definition at line 5222 of file TFile.cxx. ◆ GetBytesWritten(). Long64_t TFile::GetBytesWritten ; (; ); const. virtual . Return the total number of bytes written so far to the file. ; Definition at line 4566 of file TFile.cxx. ◆ GetCacheFileDir(). const char * TFile::GetCacheFileDir ; (; ). static . Get the directory where to locally stage/cache remote files. ; Definition at line 4654 of file TFile.cxx. ◆ GetCacheRead(). TFileCacheRead * TFile::GetCacheRead ; (; const TObject * ; tree = nullptr); const. Return a pointer to the current read cache. ; Definition at line 1262 of file TFile.cxx. ◆ GetCacheWrite(). TFileCacheWrite * TFile::GetCacheWrite ; (; ); const. Return a pointer to the current write cache. ; Definition at line 1279 of file TFile.cxx. ◆ GetClassIndex(). TArrayC * TFile::GetClassIndex ; (; ); const. inline . Definition at line 226 of file TFile.h. ◆ GetCompressionAlgorithm(). Int_t TFile::GetCompressionAlgorithm ; (; ); const. inline . Definition at line 385 of file TFile.h. ◆ GetCompressionFactor(). Float_t TFile::GetCompressionFactor ; (; ). Return the file compression factor. ; Add total number of compressed/uncompressed bytes for each key. Returns the ratio of the two. ; Definition at line 1202 of file TFile.cxx. ◆ GetCompressionLevel(). Int_t TFile::GetCompressionLevel ; (; ); const. inline . Definition at line 391 of file TFile.h. ◆ GetCompressionSettings(). Int_t TFile::GetCompressionSettings ; (; ); const. inline . Definition at line 397 of file TFile.h. ◆ GetEND(). virtual Long64_t TFile::GetEND ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 231 of file TFile.h. ◆ GetEndpointUrl() [1/2]. virtual c",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:65633,Performance,cache,caches,65633,"EndpointUrl ; (; ); const. inlinevirtual . Reimplemented in TNetFile.; Definition at line 235 of file TFile.h. ◆ GetEndpointUrl() [2/2]. const TUrl * TFile::GetEndpointUrl ; (; const char * ; name). static . Get final URL for file being opened asynchronously. ; Returns 0 is the information is not yet available. ; Definition at line 4945 of file TFile.cxx. ◆ GetErrno(). Int_t TFile::GetErrno ; (; ); const. virtual . Method returning errno. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1246 of file TFile.cxx. ◆ GetFd(). Int_t TFile::GetFd ; (; ); const. inline . Definition at line 234 of file TFile.h. ◆ GetFileBytesRead(). Long64_t TFile::GetFileBytesRead ; (; ). static . Static function returning the total number of bytes read from all files. ; Definition at line 4574 of file TFile.cxx. ◆ GetFileBytesWritten(). Long64_t TFile::GetFileBytesWritten ; (; ). static . Static function returning the total number of bytes written to all files. ; Does not take into account what might still be in the write caches. ; Definition at line 4583 of file TFile.cxx. ◆ GetFileCounter(). Long64_t TFile::GetFileCounter ; (; ). static . Definition at line 4617 of file TFile.cxx. ◆ GetFileReadCalls(). Int_t TFile::GetFileReadCalls ; (; ). static . Static function returning the total number of read calls from all files. ; Definition at line 4591 of file TFile.cxx. ◆ GetListOfFree(). TList * TFile::GetListOfFree ; (; ); const. inline . Definition at line 237 of file TFile.h. ◆ GetListOfProcessIDs(). TObjArray * TFile::GetListOfProcessIDs ; (; ); const. inline . Definition at line 236 of file TFile.h. ◆ GetNbytesFree(). virtual Int_t TFile::GetNbytesFree ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 249 of file TFile.h. ◆ GetNbytesInfo(). virtual Int_t TFile::GetNbytesInfo ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 248 of file TFile.h. ◆ GetNewUrl(). virtual TString TFile::GetNewUrl",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:69584,Performance,cache,cached,69584," before the end of file. The function returns nread. Note that the arguments objlen and keylen are returned only if maxbytes >=16 ; Definition at line 1301 of file TFile.cxx. ◆ GetRelOffset(). Long64_t TFile::GetRelOffset ; (; ); const. inline . Definition at line 251 of file TFile.h. ◆ GetSeekFree(). virtual Long64_t TFile::GetSeekFree ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 252 of file TFile.h. ◆ GetSeekInfo(). virtual Long64_t TFile::GetSeekInfo ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 253 of file TFile.h. ◆ GetSize(). Long64_t TFile::GetSize ; (; ); const. virtual . Returns the current file size. ; Returns -1 in case the file could not be stat'ed. ; Reimplemented in TDavixFile, TSQLFile, TXMLFile, TMemFile, TWebFile, and TNetXNGFile.; Definition at line 1347 of file TFile.cxx. ◆ GetStreamerInfoCache(). const TList * TFile::GetStreamerInfoCache ; (; ). Returns the cached list of StreamerInfos used in this file. ; Definition at line 1366 of file TFile.cxx. ◆ GetStreamerInfoList(). TList * TFile::GetStreamerInfoList ; (; ). finalvirtual . Read the list of TStreamerInfo objects written to this file. ; The function returns a TList. It is the user's responsibility to delete the list created by this function.; Note the list, in addition to TStreamerInfo object, contains sometimes a TList named 'listOfRules' and containing the schema evolution rules related to the file's content.; Using the list, one can access additional information, e.g.: TFile f(""myfile.root"");; auto list = f.GetStreamerInfoList();; auto info = dynamic_cast<TStreamerInfo*>(list->FindObject(""MyClass""));; if (info) auto classversionid = info->GetClassVersion();; delete list;; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStreamerInfo::GetClassVersionInt_t GetClassVersion() const overrideDefinition TStreamerInfo.h:202. Definition at line 1445 of file TFile.cxx. ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:77497,Performance,load,load,77497," file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; a shared lib dirname.so will be created. If the option ""++"" is specified, the generated shared lib is dynamically linked with the current executable module. If the option ""+"" and ""nocompile"" are specified, the utility files are generated as in the option ""+"" but they are not executed. Example: file.MakeProject(""demo"",""*"",""recreate++"");; creates a new directory demo unless it already exist; clear the previous directory content; generate the xxx.h files for all classes xxx found in this file and not yet known to the CINT dictionary.; creates the build script MAKEP; creates a LinkDef.h file; runs rootcint generating demoProjectDict.cxx; compiles demoProjectDict.cxx into demoProjectDict.o; generates a shared lib demo.so; dynamically links the shared lib demo.so to the executable If only the option ""+"" had been specified, one can still link the shared lib to the current executable module with: gSystem->load(""demo/demo.so"");; The following feature is not yet enabled: One can restrict the list of classes to be generated by using expressions like: classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only.; . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2726 of file TFile.cxx. ◆ MakeProjectParMake(). Int_t TFile::MakeProjectParMake ; (; const char * ; pack, . const char * ; filemake . ). protected . Create makefile at 'filemake' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on success, -1 on error. ; Definition at line 3364 of file TFile.cxx. ◆ MakeProjectParProofInf(). Int_t TFile::MakeProjectParProofInf ; (; const char * ; pack, . const char * ; proofinf . ). protected . Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on s",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:83806,Performance,cache,cache,83806,"eturned, with ""http:"" a TWebFile, with ""file:"" a local TFile, etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile::AsyncOpen(...), it is possible to request a timeout with the option TIMEOUT=<secs>: the timeout must be specified in seconds and it will be internally checked with granularity of one millisec. For remote files there is the option: CACHEREAD opens an existing file for reading through the file cache. The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir().; The caller is responsible for deleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ;",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:83848,Performance,cache,cache,83848,"ile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile::AsyncOpen(...), it is possible to request a timeout with the option TIMEOUT=<secs>: the timeout must be specified in seconds and it will be internally checked with granularity of one millisec. For remote files there is the option: CACHEREAD opens an existing file for reading through the file cache. The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir().; The caller is responsible for deleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ;",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:84998,Performance,cache,cache,84998,"ed by SetCacheFileDir().; The caller is responsible for deleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). staticprivate . Open a file for reading through the file cache. ; The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir(). ; Definition at line 3874 of file TFile.cxx. ◆ operator=(). void TFile::operator= ; (; const TFile & ; ). privatedelete . ◆ Paint(). void TFile::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, TXNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read oper",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:85042,Performance,cache,cache,85042,"eleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferring ownership of the handle to the TFile instance. ; Definition at line 4447 of file TFile.cxx. ◆ OpenFromCache(). TFile * TFile::OpenFromCache ; (; const char * ; name, . Option_t * ; = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Int_t ; netopt = 0 . ). staticprivate . Open a file for reading through the file cache. ; The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir(). ; Definition at line 3874 of file TFile.cxx. ◆ operator=(). void TFile::operator= ; (; const TFile & ; ). privatedelete . ◆ Paint(). void TFile::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, TXNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:86537,Performance,cache,cache,86537," Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, TXNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1770 of file TFile.cxx. ◆ ReadBuffer() [2/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile, and TXNetFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TXNetFile, TDCacheFile, TNetFile, TS3WebFile, TWebFile, and TNetXNGFile.; Definition at line 1821 of file TFile.cxx. ◆ ReadBufferViaCa",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:87570,Performance,cache,cache,87570,"SQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile, and TXNetFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TXNetFile, TDCacheFile, TNetFile, TS3WebFile, TWebFile, and TNetXNGFile.; Definition at line 1821 of file TFile.cxx. ◆ ReadBufferViaCache(). Int_t TFile::ReadBufferViaCache ; (; char * ; buf, . Int_t ; len . ). protected . Read buffer via cache. ; Returns 0 if the requested block is not in the cache, 1 in case read via cache was successful, 2 in case read via cache failed. ; Definition at line 1889 of file TFile.cxx. ◆ ReadFree(). void TFile::ReadFree ; (; ). virtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:87626,Performance,cache,cache,87626,"d TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile, and TXNetFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TXNetFile, TDCacheFile, TNetFile, TS3WebFile, TWebFile, and TNetXNGFile.; Definition at line 1821 of file TFile.cxx. ◆ ReadBufferViaCache(). Int_t TFile::ReadBufferViaCache ; (; char * ; buf, . Int_t ; len . ). protected . Read buffer via cache. ; Returns 0 if the requested block is not in the cache, 1 in case read via cache was successful, 2 in case read via cache failed. ; Definition at line 1889 of file TFile.cxx. ◆ ReadFree(). void TFile::ReadFree ; (; ). virtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:87652,Performance,cache,cache,87652,"d TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile, and TXNetFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TXNetFile, TDCacheFile, TNetFile, TS3WebFile, TWebFile, and TNetXNGFile.; Definition at line 1821 of file TFile.cxx. ◆ ReadBufferViaCache(). Int_t TFile::ReadBufferViaCache ; (; char * ; buf, . Int_t ; len . ). protected . Read buffer via cache. ; Returns 0 if the requested block is not in the cache, 1 in case read via cache was successful, 2 in case read via cache failed. ; Definition at line 1889 of file TFile.cxx. ◆ ReadFree(). void TFile::ReadFree ; (; ). virtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:87693,Performance,cache,cache,87693,"d TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile, and TXNetFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TXNetFile, TDCacheFile, TNetFile, TS3WebFile, TWebFile, and TNetXNGFile.; Definition at line 1821 of file TFile.cxx. ◆ ReadBufferViaCache(). Int_t TFile::ReadBufferViaCache ; (; char * ; buf, . Int_t ; len . ). protected . Read buffer via cache. ; Returns 0 if the requested block is not in the cache, 1 in case read via cache was successful, 2 in case read via cache failed. ; Definition at line 1889 of file TFile.cxx. ◆ ReadFree(). void TFile::ReadFree ; (; ). virtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:91502,Performance,cache,cachedir,91502,"e argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or wrong input arguments) and -1 in case of failure, in which case the file cannot be used anymore. The current directory (gFile) is changed to this file. ; Reimplemented in TSQLFile, TXMLFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 2162 of file TFile.cxx. ◆ ResetErrno(). void TFile::ResetErrno ; (; ); const. virtual . Method resetting the errno. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, and TMemFile.; Definition at line 1254 of file TFile.cxx. ◆ Seek(). void TFile::Seek ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ; Reimplemented in TDavixFile, TNetFile, TWebFile, TNetXNGFile, TSQLFile, and TXMLFile.; Definition at line 2274 of file TFile.cxx. ◆ SetCacheFileDir(). Bool_t TFile::SetCacheFileDir ; (; std::string_view ; cachedir, . Bool_t ; operatedisconnected = kTRUE, . Bool_t ; forcecacheread = kFALSE . ). static . Sets the directory where to locally stage/cache remote files. ; If the directory is not writable by us return kFALSE. ; Definition at line 4626 of file TFile.cxx. ◆ SetCacheRead(). void TFile::SetCacheRead ; (; TFileCacheRead * ; cache, . TObject * ; tree = nullptr, . ECacheAction ; action = kDisconnect . ). virtual . Set a pointer to the read cache. ; This relinquishes ownership of the previous cache, so if you do not already have a pointer to the previous cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is wh",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:91643,Performance,cache,cache,91643,"ready as requested or wrong input arguments) and -1 in case of failure, in which case the file cannot be used anymore. The current directory (gFile) is changed to this file. ; Reimplemented in TSQLFile, TXMLFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 2162 of file TFile.cxx. ◆ ResetErrno(). void TFile::ResetErrno ; (; ); const. virtual . Method resetting the errno. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, and TMemFile.; Definition at line 1254 of file TFile.cxx. ◆ Seek(). void TFile::Seek ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ; Reimplemented in TDavixFile, TNetFile, TWebFile, TNetXNGFile, TSQLFile, and TXMLFile.; Definition at line 2274 of file TFile.cxx. ◆ SetCacheFileDir(). Bool_t TFile::SetCacheFileDir ; (; std::string_view ; cachedir, . Bool_t ; operatedisconnected = kTRUE, . Bool_t ; forcecacheread = kFALSE . ). static . Sets the directory where to locally stage/cache remote files. ; If the directory is not writable by us return kFALSE. ; Definition at line 4626 of file TFile.cxx. ◆ SetCacheRead(). void TFile::SetCacheRead ; (; TFileCacheRead * ; cache, . TObject * ; tree = nullptr, . ECacheAction ; action = kDisconnect . ). virtual . Set a pointer to the read cache. ; This relinquishes ownership of the previous cache, so if you do not already have a pointer to the previous cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:91831,Performance,cache,cache,91831,"mplemented in TSQLFile, TXMLFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 2162 of file TFile.cxx. ◆ ResetErrno(). void TFile::ResetErrno ; (; ); const. virtual . Method resetting the errno. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, and TMemFile.; Definition at line 1254 of file TFile.cxx. ◆ Seek(). void TFile::Seek ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ; Reimplemented in TDavixFile, TNetFile, TWebFile, TNetXNGFile, TSQLFile, and TXMLFile.; Definition at line 2274 of file TFile.cxx. ◆ SetCacheFileDir(). Bool_t TFile::SetCacheFileDir ; (; std::string_view ; cachedir, . Bool_t ; operatedisconnected = kTRUE, . Bool_t ; forcecacheread = kFALSE . ). static . Sets the directory where to locally stage/cache remote files. ; If the directory is not writable by us return kFALSE. ; Definition at line 4626 of file TFile.cxx. ◆ SetCacheRead(). void TFile::SetCacheRead ; (; TFileCacheRead * ; cache, . TObject * ; tree = nullptr, . ECacheAction ; action = kDisconnect . ). virtual . Set a pointer to the read cache. ; This relinquishes ownership of the previous cache, so if you do not already have a pointer to the previous cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect. This will allow things like prefetching to continue in the background while it is no longer the default cache for the TTree. Except for a few expert use cases, kDisconnect is li",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:91947,Performance,cache,cache,91947,"o(). void TFile::ResetErrno ; (; ); const. virtual . Method resetting the errno. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, and TMemFile.; Definition at line 1254 of file TFile.cxx. ◆ Seek(). void TFile::Seek ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ; Reimplemented in TDavixFile, TNetFile, TWebFile, TNetXNGFile, TSQLFile, and TXMLFile.; Definition at line 2274 of file TFile.cxx. ◆ SetCacheFileDir(). Bool_t TFile::SetCacheFileDir ; (; std::string_view ; cachedir, . Bool_t ; operatedisconnected = kTRUE, . Bool_t ; forcecacheread = kFALSE . ). static . Sets the directory where to locally stage/cache remote files. ; If the directory is not writable by us return kFALSE. ; Definition at line 4626 of file TFile.cxx. ◆ SetCacheRead(). void TFile::SetCacheRead ; (; TFileCacheRead * ; cache, . TObject * ; tree = nullptr, . ECacheAction ; action = kDisconnect . ). virtual . Set a pointer to the read cache. ; This relinquishes ownership of the previous cache, so if you do not already have a pointer to the previous cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect. This will allow things like prefetching to continue in the background while it is no longer the default cache for the TTree. Except for a few expert use cases, kDisconnect is likely the correct setting.; WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile. ; Definition at line 23",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:92000,Performance,cache,cache,92000,"ile.cxx. ◆ Seek(). void TFile::Seek ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ; Reimplemented in TDavixFile, TNetFile, TWebFile, TNetXNGFile, TSQLFile, and TXMLFile.; Definition at line 2274 of file TFile.cxx. ◆ SetCacheFileDir(). Bool_t TFile::SetCacheFileDir ; (; std::string_view ; cachedir, . Bool_t ; operatedisconnected = kTRUE, . Bool_t ; forcecacheread = kFALSE . ). static . Sets the directory where to locally stage/cache remote files. ; If the directory is not writable by us return kFALSE. ; Definition at line 4626 of file TFile.cxx. ◆ SetCacheRead(). void TFile::SetCacheRead ; (; TFileCacheRead * ; cache, . TObject * ; tree = nullptr, . ECacheAction ; action = kDisconnect . ). virtual . Set a pointer to the read cache. ; This relinquishes ownership of the previous cache, so if you do not already have a pointer to the previous cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect. This will allow things like prefetching to continue in the background while it is no longer the default cache for the TTree. Except for a few expert use cases, kDisconnect is likely the correct setting.; WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile. ; Definition at line 2365 of file TFile.cxx. ◆ SetCacheWrite(). void TFile::SetCacheWrite ; (; TFileCacheWrite * ; cache). virtual . Set a pointer to the write cache. ; If file is null the existing write c",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:92063,Performance,cache,cache,92063,"ile.cxx. ◆ Seek(). void TFile::Seek ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ; Reimplemented in TDavixFile, TNetFile, TWebFile, TNetXNGFile, TSQLFile, and TXMLFile.; Definition at line 2274 of file TFile.cxx. ◆ SetCacheFileDir(). Bool_t TFile::SetCacheFileDir ; (; std::string_view ; cachedir, . Bool_t ; operatedisconnected = kTRUE, . Bool_t ; forcecacheread = kFALSE . ). static . Sets the directory where to locally stage/cache remote files. ; If the directory is not writable by us return kFALSE. ; Definition at line 4626 of file TFile.cxx. ◆ SetCacheRead(). void TFile::SetCacheRead ; (; TFileCacheRead * ; cache, . TObject * ; tree = nullptr, . ECacheAction ; action = kDisconnect . ). virtual . Set a pointer to the read cache. ; This relinquishes ownership of the previous cache, so if you do not already have a pointer to the previous cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect. This will allow things like prefetching to continue in the background while it is no longer the default cache for the TTree. Except for a few expert use cases, kDisconnect is likely the correct setting.; WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile. ; Definition at line 2365 of file TFile.cxx. ◆ SetCacheWrite(). void TFile::SetCacheWrite ; (; TFileCacheWrite * ; cache). virtual . Set a pointer to the write cache. ; If file is null the existing write c",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:92095,Performance,cache,cache,92095,"ile.cxx. ◆ Seek(). void TFile::Seek ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ; Reimplemented in TDavixFile, TNetFile, TWebFile, TNetXNGFile, TSQLFile, and TXMLFile.; Definition at line 2274 of file TFile.cxx. ◆ SetCacheFileDir(). Bool_t TFile::SetCacheFileDir ; (; std::string_view ; cachedir, . Bool_t ; operatedisconnected = kTRUE, . Bool_t ; forcecacheread = kFALSE . ). static . Sets the directory where to locally stage/cache remote files. ; If the directory is not writable by us return kFALSE. ; Definition at line 4626 of file TFile.cxx. ◆ SetCacheRead(). void TFile::SetCacheRead ; (; TFileCacheRead * ; cache, . TObject * ; tree = nullptr, . ECacheAction ; action = kDisconnect . ). virtual . Set a pointer to the read cache. ; This relinquishes ownership of the previous cache, so if you do not already have a pointer to the previous cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect. This will allow things like prefetching to continue in the background while it is no longer the default cache for the TTree. Except for a few expert use cases, kDisconnect is likely the correct setting.; WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile. ; Definition at line 2365 of file TFile.cxx. ◆ SetCacheWrite(). void TFile::SetCacheWrite ; (; TFileCacheWrite * ; cache). virtual . Set a pointer to the write cache. ; If file is null the existing write c",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:92259,Performance,cache,cache,92259,"ile.cxx. ◆ Seek(). void TFile::Seek ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ; Reimplemented in TDavixFile, TNetFile, TWebFile, TNetXNGFile, TSQLFile, and TXMLFile.; Definition at line 2274 of file TFile.cxx. ◆ SetCacheFileDir(). Bool_t TFile::SetCacheFileDir ; (; std::string_view ; cachedir, . Bool_t ; operatedisconnected = kTRUE, . Bool_t ; forcecacheread = kFALSE . ). static . Sets the directory where to locally stage/cache remote files. ; If the directory is not writable by us return kFALSE. ; Definition at line 4626 of file TFile.cxx. ◆ SetCacheRead(). void TFile::SetCacheRead ; (; TFileCacheRead * ; cache, . TObject * ; tree = nullptr, . ECacheAction ; action = kDisconnect . ). virtual . Set a pointer to the read cache. ; This relinquishes ownership of the previous cache, so if you do not already have a pointer to the previous cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect. This will allow things like prefetching to continue in the background while it is no longer the default cache for the TTree. Except for a few expert use cases, kDisconnect is likely the correct setting.; WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile. ; Definition at line 2365 of file TFile.cxx. ◆ SetCacheWrite(). void TFile::SetCacheWrite ; (; TFileCacheWrite * ; cache). virtual . Set a pointer to the write cache. ; If file is null the existing write c",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:92338,Performance,cache,cache,92338,"e, and TXMLFile.; Definition at line 2274 of file TFile.cxx. ◆ SetCacheFileDir(). Bool_t TFile::SetCacheFileDir ; (; std::string_view ; cachedir, . Bool_t ; operatedisconnected = kTRUE, . Bool_t ; forcecacheread = kFALSE . ). static . Sets the directory where to locally stage/cache remote files. ; If the directory is not writable by us return kFALSE. ; Definition at line 4626 of file TFile.cxx. ◆ SetCacheRead(). void TFile::SetCacheRead ; (; TFileCacheRead * ; cache, . TObject * ; tree = nullptr, . ECacheAction ; action = kDisconnect . ). virtual . Set a pointer to the read cache. ; This relinquishes ownership of the previous cache, so if you do not already have a pointer to the previous cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect. This will allow things like prefetching to continue in the background while it is no longer the default cache for the TTree. Except for a few expert use cases, kDisconnect is likely the correct setting.; WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile. ; Definition at line 2365 of file TFile.cxx. ◆ SetCacheWrite(). void TFile::SetCacheWrite ; (; TFileCacheWrite * ; cache). virtual . Set a pointer to the write cache. ; If file is null the existing write cache is deleted. ; Definition at line 2388 of file TFile.cxx. ◆ SetCompressionAlgorithm(). void TFile::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). virtual . See comments for function SetComp",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:92421,Performance,cache,cache,92421,"e, and TXMLFile.; Definition at line 2274 of file TFile.cxx. ◆ SetCacheFileDir(). Bool_t TFile::SetCacheFileDir ; (; std::string_view ; cachedir, . Bool_t ; operatedisconnected = kTRUE, . Bool_t ; forcecacheread = kFALSE . ). static . Sets the directory where to locally stage/cache remote files. ; If the directory is not writable by us return kFALSE. ; Definition at line 4626 of file TFile.cxx. ◆ SetCacheRead(). void TFile::SetCacheRead ; (; TFileCacheRead * ; cache, . TObject * ; tree = nullptr, . ECacheAction ; action = kDisconnect . ). virtual . Set a pointer to the read cache. ; This relinquishes ownership of the previous cache, so if you do not already have a pointer to the previous cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect. This will allow things like prefetching to continue in the background while it is no longer the default cache for the TTree. Except for a few expert use cases, kDisconnect is likely the correct setting.; WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile. ; Definition at line 2365 of file TFile.cxx. ◆ SetCacheWrite(). void TFile::SetCacheWrite ; (; TFileCacheWrite * ; cache). virtual . Set a pointer to the write cache. ; If file is null the existing write cache is deleted. ; Definition at line 2388 of file TFile.cxx. ◆ SetCompressionAlgorithm(). void TFile::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). virtual . See comments for function SetComp",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:92523,Performance,cache,cache,92523," forcecacheread = kFALSE . ). static . Sets the directory where to locally stage/cache remote files. ; If the directory is not writable by us return kFALSE. ; Definition at line 4626 of file TFile.cxx. ◆ SetCacheRead(). void TFile::SetCacheRead ; (; TFileCacheRead * ; cache, . TObject * ; tree = nullptr, . ECacheAction ; action = kDisconnect . ). virtual . Set a pointer to the read cache. ; This relinquishes ownership of the previous cache, so if you do not already have a pointer to the previous cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect. This will allow things like prefetching to continue in the background while it is no longer the default cache for the TTree. Except for a few expert use cases, kDisconnect is likely the correct setting.; WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile. ; Definition at line 2365 of file TFile.cxx. ◆ SetCacheWrite(). void TFile::SetCacheWrite ; (; TFileCacheWrite * ; cache). virtual . Set a pointer to the write cache. ; If file is null the existing write cache is deleted. ; Definition at line 2388 of file TFile.cxx. ◆ SetCompressionAlgorithm(). void TFile::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). virtual . See comments for function SetCompressionSettings. ; Definition at line 2305 of file TFile.cxx. ◆ SetCompressionLevel(). void TFile::SetCompressionLevel ; (; Int_t ; level = ROOT::RCompressionSetting::ELevel::kUseMin). virtual . S",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:92737,Performance,cache,cache,92737,"ble by us return kFALSE. ; Definition at line 4626 of file TFile.cxx. ◆ SetCacheRead(). void TFile::SetCacheRead ; (; TFileCacheRead * ; cache, . TObject * ; tree = nullptr, . ECacheAction ; action = kDisconnect . ). virtual . Set a pointer to the read cache. ; This relinquishes ownership of the previous cache, so if you do not already have a pointer to the previous cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect. This will allow things like prefetching to continue in the background while it is no longer the default cache for the TTree. Except for a few expert use cases, kDisconnect is likely the correct setting.; WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile. ; Definition at line 2365 of file TFile.cxx. ◆ SetCacheWrite(). void TFile::SetCacheWrite ; (; TFileCacheWrite * ; cache). virtual . Set a pointer to the write cache. ; If file is null the existing write cache is deleted. ; Definition at line 2388 of file TFile.cxx. ◆ SetCompressionAlgorithm(). void TFile::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). virtual . See comments for function SetCompressionSettings. ; Definition at line 2305 of file TFile.cxx. ◆ SetCompressionLevel(). void TFile::SetCompressionLevel ; (; Int_t ; level = ROOT::RCompressionSetting::ELevel::kUseMin). virtual . See comments for function SetCompressionSettings. ; Definition at line 2319 of file TFile.cxx. ◆ SetCompressionSettings(). void TFile:",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:92894,Performance,cache,cache,92894,"heAction ; action = kDisconnect . ). virtual . Set a pointer to the read cache. ; This relinquishes ownership of the previous cache, so if you do not already have a pointer to the previous cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect. This will allow things like prefetching to continue in the background while it is no longer the default cache for the TTree. Except for a few expert use cases, kDisconnect is likely the correct setting.; WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile. ; Definition at line 2365 of file TFile.cxx. ◆ SetCacheWrite(). void TFile::SetCacheWrite ; (; TFileCacheWrite * ; cache). virtual . Set a pointer to the write cache. ; If file is null the existing write cache is deleted. ; Definition at line 2388 of file TFile.cxx. ◆ SetCompressionAlgorithm(). void TFile::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). virtual . See comments for function SetCompressionSettings. ; Definition at line 2305 of file TFile.cxx. ◆ SetCompressionLevel(). void TFile::SetCompressionLevel ; (; Int_t ; level = ROOT::RCompressionSetting::ELevel::kUseMin). virtual . See comments for function SetCompressionSettings. ; Definition at line 2319 of file TFile.cxx. ◆ SetCompressionSettings(). void TFile::SetCompressionSettings ; (; Int_t ; settings = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault). virtual . Used to specify the compression level and algorithm. ; See th",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:93029,Performance,cache,cache,93029," so if you do not already have a pointer to the previous cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect. This will allow things like prefetching to continue in the background while it is no longer the default cache for the TTree. Except for a few expert use cases, kDisconnect is likely the correct setting.; WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile. ; Definition at line 2365 of file TFile.cxx. ◆ SetCacheWrite(). void TFile::SetCacheWrite ; (; TFileCacheWrite * ; cache). virtual . Set a pointer to the write cache. ; If file is null the existing write cache is deleted. ; Definition at line 2388 of file TFile.cxx. ◆ SetCompressionAlgorithm(). void TFile::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). virtual . See comments for function SetCompressionSettings. ; Definition at line 2305 of file TFile.cxx. ◆ SetCompressionLevel(). void TFile::SetCompressionLevel ; (; Int_t ; level = ROOT::RCompressionSetting::ELevel::kUseMin). virtual . See comments for function SetCompressionSettings. ; Definition at line 2319 of file TFile.cxx. ◆ SetCompressionSettings(). void TFile::SetCompressionSettings ; (; Int_t ; settings = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault). virtual . Used to specify the compression level and algorithm. ; See the TFile constructor for the details. ; Definition at line 2338 of file TFile.cxx. ◆ SetEND(). virtual void TFile::SetEND ; (; Long64_",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:93074,Performance,cache,cache,93074,"cache (and there was a previous cache), you ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect. This will allow things like prefetching to continue in the background while it is no longer the default cache for the TTree. Except for a few expert use cases, kDisconnect is likely the correct setting.; WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile. ; Definition at line 2365 of file TFile.cxx. ◆ SetCacheWrite(). void TFile::SetCacheWrite ; (; TFileCacheWrite * ; cache). virtual . Set a pointer to the write cache. ; If file is null the existing write cache is deleted. ; Definition at line 2388 of file TFile.cxx. ◆ SetCompressionAlgorithm(). void TFile::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). virtual . See comments for function SetCompressionSettings. ; Definition at line 2305 of file TFile.cxx. ◆ SetCompressionLevel(). void TFile::SetCompressionLevel ; (; Int_t ; level = ROOT::RCompressionSetting::ELevel::kUseMin). virtual . See comments for function SetCompressionSettings. ; Definition at line 2319 of file TFile.cxx. ◆ SetCompressionSettings(). void TFile::SetCompressionSettings ; (; Int_t ; settings = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault). virtual . Used to specify the compression level and algorithm. ; See the TFile constructor for the details. ; Definition at line 2338 of file TFile.cxx. ◆ SetEND(). virtual void TFile::SetEND ; (; Long64_t ; last). inlinevirtual . Reimplemented in TSQLFile, an",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:93118,Performance,cache,cache,93118,"ought to retrieve (and delete it if needed) using: TFileCacheRead *older = myfile->GetCacheRead();; The action specifies how to behave when detaching a cache from the the TFile. If set to (default) kDisconnect, the contents of the cache will be flushed when it is removed from the file, and it will disconnect the cache object from the file. In almost all cases, this is what you want. If you want to disconnect the cache temporarily from this tree and re-attach later to the same fil, you can set action to kDoNotDisconnect. This will allow things like prefetching to continue in the background while it is no longer the default cache for the TTree. Except for a few expert use cases, kDisconnect is likely the correct setting.; WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile. ; Definition at line 2365 of file TFile.cxx. ◆ SetCacheWrite(). void TFile::SetCacheWrite ; (; TFileCacheWrite * ; cache). virtual . Set a pointer to the write cache. ; If file is null the existing write cache is deleted. ; Definition at line 2388 of file TFile.cxx. ◆ SetCompressionAlgorithm(). void TFile::SetCompressionAlgorithm ; (; Int_t ; algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal). virtual . See comments for function SetCompressionSettings. ; Definition at line 2305 of file TFile.cxx. ◆ SetCompressionLevel(). void TFile::SetCompressionLevel ; (; Int_t ; level = ROOT::RCompressionSetting::ELevel::kUseMin). virtual . See comments for function SetCompressionSettings. ; Definition at line 2319 of file TFile.cxx. ◆ SetCompressionSettings(). void TFile::SetCompressionSettings ; (; Int_t ; settings = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault). virtual . Used to specify the compression level and algorithm. ; See the TFile constructor for the details. ; Definition at line 2338 of file TFile.cxx. ◆ SetEND(). virtual void TFile::SetEND ; (; Long64_t ; last). inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 287 of file T",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:95983,Performance,load,loaded,95983,", if not, the open fails. ; Definition at line 4744 of file TFile.cxx. ◆ SetOpenTimeout(). UInt_t TFile::SetOpenTimeout ; (; UInt_t ; timeout). static . Sets open timeout time (in ms). Returns previous timeout value. ; Definition at line 4724 of file TFile.cxx. ◆ SetOption(). virtual void TFile::SetOption ; (; Option_t * ; option = "">""). inlinevirtual . Definition at line 289 of file TFile.h. ◆ SetReadaheadSize(). void TFile::SetReadaheadSize ; (; Int_t ; bufsize = 256000). static . Definition at line 4605 of file TFile.cxx. ◆ SetReadCalls(). virtual void TFile::SetReadCalls ; (; Int_t ; readcalls = 0). inlinevirtual . Definition at line 290 of file TFile.h. ◆ SetReadStreamerInfo(). void TFile::SetReadStreamerInfo ; (; Bool_t ; readinfo = kTRUE). static . Specify if the streamerinfos must be read at file opening. ; If fgReadInfo is true (default) TFile::ReadStreamerInfo is called when opening the file. It may be interesting to set fgReadInfo to false to speedup the file opening time or in case libraries containing classes referenced by the file have not yet been loaded. if fgReadInfo is false, one can still read the StreamerInfo with myfile.ReadStreamerInfo(); ; Definition at line 3732 of file TFile.cxx. ◆ ShowStreamerInfo(). void TFile::ShowStreamerInfo ; (; ). virtual . Show the StreamerInfo of all classes written to this file. ; Definition at line 3750 of file TFile.cxx. ◆ ShrinkCacheFileDir(). Bool_t TFile::ShrinkCacheFileDir ; (; Long64_t ; shrinksize, . Long_t ; cleanupinterval = 0 . ). static . Try to shrink the cache to the desired size. ; With the clenupinterval you can specify the minimum amount of time after the previous cleanup before the cleanup operation is repeated in the cache directory ; Definition at line 4666 of file TFile.cxx. ◆ Sizeof(). Int_t TFile::Sizeof ; (; ); const. overridevirtual . Return the size in bytes of the file header. ; Reimplemented from TDirectoryFile.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2397 of file TF",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:96449,Performance,cache,cache,96449," virtual void TFile::SetReadCalls ; (; Int_t ; readcalls = 0). inlinevirtual . Definition at line 290 of file TFile.h. ◆ SetReadStreamerInfo(). void TFile::SetReadStreamerInfo ; (; Bool_t ; readinfo = kTRUE). static . Specify if the streamerinfos must be read at file opening. ; If fgReadInfo is true (default) TFile::ReadStreamerInfo is called when opening the file. It may be interesting to set fgReadInfo to false to speedup the file opening time or in case libraries containing classes referenced by the file have not yet been loaded. if fgReadInfo is false, one can still read the StreamerInfo with myfile.ReadStreamerInfo(); ; Definition at line 3732 of file TFile.cxx. ◆ ShowStreamerInfo(). void TFile::ShowStreamerInfo ; (; ). virtual . Show the StreamerInfo of all classes written to this file. ; Definition at line 3750 of file TFile.cxx. ◆ ShrinkCacheFileDir(). Bool_t TFile::ShrinkCacheFileDir ; (; Long64_t ; shrinksize, . Long_t ; cleanupinterval = 0 . ). static . Try to shrink the cache to the desired size. ; With the clenupinterval you can specify the minimum amount of time after the previous cleanup before the cleanup operation is repeated in the cache directory ; Definition at line 4666 of file TFile.cxx. ◆ Sizeof(). Int_t TFile::Sizeof ; (; ); const. overridevirtual . Return the size in bytes of the file header. ; Reimplemented from TDirectoryFile.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2397 of file TFile.cxx. ◆ Streamer(). void TFile::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a TFile object. ; Reimplemented from TDirectoryFile.; Reimplemented in TXNetFile, TMemFile, TSQLFile, TXMLFile, TNetFile, TParallelMergingFile, TS3WebFile, TWebFile, and TNetXNGFile.; Definition at line 2405 of file TFile.cxx. ◆ StreamerNVirtual(). void TFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 344 of file TFile.h. ◆ SumBuffer(). void TFile::SumBuffer ; (; Int_t ; bufsize). Increment statistics for",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:96620,Performance,cache,cache,96620,"tReadStreamerInfo(). void TFile::SetReadStreamerInfo ; (; Bool_t ; readinfo = kTRUE). static . Specify if the streamerinfos must be read at file opening. ; If fgReadInfo is true (default) TFile::ReadStreamerInfo is called when opening the file. It may be interesting to set fgReadInfo to false to speedup the file opening time or in case libraries containing classes referenced by the file have not yet been loaded. if fgReadInfo is false, one can still read the StreamerInfo with myfile.ReadStreamerInfo(); ; Definition at line 3732 of file TFile.cxx. ◆ ShowStreamerInfo(). void TFile::ShowStreamerInfo ; (; ). virtual . Show the StreamerInfo of all classes written to this file. ; Definition at line 3750 of file TFile.cxx. ◆ ShrinkCacheFileDir(). Bool_t TFile::ShrinkCacheFileDir ; (; Long64_t ; shrinksize, . Long_t ; cleanupinterval = 0 . ). static . Try to shrink the cache to the desired size. ; With the clenupinterval you can specify the minimum amount of time after the previous cleanup before the cleanup operation is repeated in the cache directory ; Definition at line 4666 of file TFile.cxx. ◆ Sizeof(). Int_t TFile::Sizeof ; (; ); const. overridevirtual . Return the size in bytes of the file header. ; Reimplemented from TDirectoryFile.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2397 of file TFile.cxx. ◆ Streamer(). void TFile::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a TFile object. ; Reimplemented from TDirectoryFile.; Reimplemented in TXNetFile, TMemFile, TSQLFile, TXMLFile, TNetFile, TParallelMergingFile, TS3WebFile, TWebFile, and TNetXNGFile.; Definition at line 2405 of file TFile.cxx. ◆ StreamerNVirtual(). void TFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 344 of file TFile.h. ◆ SumBuffer(). void TFile::SumBuffer ; (; Int_t ; bufsize). Increment statistics for buffer sizes of objects in this file. ; Definition at line 2417 of file TFile.cxx. ◆ SysClose(). Int_t TFile::SysClose ; (",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:101326,Performance,cache,cache,101326,"y (including subdirectories). A new key is created in the KEYS linked list for each object. The list of keys is then saved on the file (via WriteKeys) as a single data record. For values of opt see TObject::Write(). The directory header info is rewritten on the directory header record. The linked list of FREE segments is written. The file header is written (bytes 1->fBEGIN). ; Reimplemented from TDirectoryFile.; Reimplemented in TSQLFile, TXMLFile, and TParallelMergingFile.; Definition at line 2436 of file TFile.cxx. ◆ WriteBuffer(). Bool_t TFile::WriteBuffer ; (; const char * ; buf, . Int_t ; len . ). virtual . Write a buffer to the file. ; This is the basic low level write operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, TNetFile, TDavixFile, TXNetFile, and TNetXNGFile.; Definition at line 2476 of file TFile.cxx. ◆ WriteBufferViaCache(). Int_t TFile::WriteBufferViaCache ; (; const char * ; buf, . Int_t ; len . ). protected . Write buffer via cache. ; Returns 0 if cache is not active, 1 in case write via cache was successful, 2 in case write via cache failed. ; Definition at line 2519 of file TFile.cxx. ◆ WriteFree(). void TFile::WriteFree ; (; ). virtual . Write FREE linked list on the file. ; The linked list of FREE segments (fFree) is written as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2543 of file TFile.cxx. ◆ WriteHeader(). void TFile::WriteHeader ; (; ). virtual . Write File Header. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2615 of file TFile.cxx. ◆ WriteProcessID(). UShort_t TFile::WriteProcessID ; (; TProcessID * ; pid). virtual . Check if the ProcessID pidd is already in the file, if not, add it and return the index number in the local file list. ; Definition at line 3763 of file TFile.cxx. ◆ WriteStreamerInfo(). void TFile::WriteStreamerInfo ; (; ). virtual . Write the list of TStreamerInfo as a single object in this file The class Streamer des",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:101348,Performance,cache,cache,101348,"d list for each object. The list of keys is then saved on the file (via WriteKeys) as a single data record. For values of opt see TObject::Write(). The directory header info is rewritten on the directory header record. The linked list of FREE segments is written. The file header is written (bytes 1->fBEGIN). ; Reimplemented from TDirectoryFile.; Reimplemented in TSQLFile, TXMLFile, and TParallelMergingFile.; Definition at line 2436 of file TFile.cxx. ◆ WriteBuffer(). Bool_t TFile::WriteBuffer ; (; const char * ; buf, . Int_t ; len . ). virtual . Write a buffer to the file. ; This is the basic low level write operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, TNetFile, TDavixFile, TXNetFile, and TNetXNGFile.; Definition at line 2476 of file TFile.cxx. ◆ WriteBufferViaCache(). Int_t TFile::WriteBufferViaCache ; (; const char * ; buf, . Int_t ; len . ). protected . Write buffer via cache. ; Returns 0 if cache is not active, 1 in case write via cache was successful, 2 in case write via cache failed. ; Definition at line 2519 of file TFile.cxx. ◆ WriteFree(). void TFile::WriteFree ; (; ). virtual . Write FREE linked list on the file. ; The linked list of FREE segments (fFree) is written as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2543 of file TFile.cxx. ◆ WriteHeader(). void TFile::WriteHeader ; (; ). virtual . Write File Header. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2615 of file TFile.cxx. ◆ WriteProcessID(). UShort_t TFile::WriteProcessID ; (; TProcessID * ; pid). virtual . Check if the ProcessID pidd is already in the file, if not, add it and return the index number in the local file list. ; Definition at line 3763 of file TFile.cxx. ◆ WriteStreamerInfo(). void TFile::WriteStreamerInfo ; (; ). virtual . Write the list of TStreamerInfo as a single object in this file The class Streamer description for all classes written to this file is saved. ; See class ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:101389,Performance,cache,cache,101389,"d list for each object. The list of keys is then saved on the file (via WriteKeys) as a single data record. For values of opt see TObject::Write(). The directory header info is rewritten on the directory header record. The linked list of FREE segments is written. The file header is written (bytes 1->fBEGIN). ; Reimplemented from TDirectoryFile.; Reimplemented in TSQLFile, TXMLFile, and TParallelMergingFile.; Definition at line 2436 of file TFile.cxx. ◆ WriteBuffer(). Bool_t TFile::WriteBuffer ; (; const char * ; buf, . Int_t ; len . ). virtual . Write a buffer to the file. ; This is the basic low level write operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, TNetFile, TDavixFile, TXNetFile, and TNetXNGFile.; Definition at line 2476 of file TFile.cxx. ◆ WriteBufferViaCache(). Int_t TFile::WriteBufferViaCache ; (; const char * ; buf, . Int_t ; len . ). protected . Write buffer via cache. ; Returns 0 if cache is not active, 1 in case write via cache was successful, 2 in case write via cache failed. ; Definition at line 2519 of file TFile.cxx. ◆ WriteFree(). void TFile::WriteFree ; (; ). virtual . Write FREE linked list on the file. ; The linked list of FREE segments (fFree) is written as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2543 of file TFile.cxx. ◆ WriteHeader(). void TFile::WriteHeader ; (; ). virtual . Write File Header. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2615 of file TFile.cxx. ◆ WriteProcessID(). UShort_t TFile::WriteProcessID ; (; TProcessID * ; pid). virtual . Check if the ProcessID pidd is already in the file, if not, add it and return the index number in the local file list. ; Definition at line 3763 of file TFile.cxx. ◆ WriteStreamerInfo(). void TFile::WriteStreamerInfo ; (; ). virtual . Write the list of TStreamerInfo as a single object in this file The class Streamer description for all classes written to this file is saved. ; See class ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:101431,Performance,cache,cache,101431,"d list for each object. The list of keys is then saved on the file (via WriteKeys) as a single data record. For values of opt see TObject::Write(). The directory header info is rewritten on the directory header record. The linked list of FREE segments is written. The file header is written (bytes 1->fBEGIN). ; Reimplemented from TDirectoryFile.; Reimplemented in TSQLFile, TXMLFile, and TParallelMergingFile.; Definition at line 2436 of file TFile.cxx. ◆ WriteBuffer(). Bool_t TFile::WriteBuffer ; (; const char * ; buf, . Int_t ; len . ). virtual . Write a buffer to the file. ; This is the basic low level write operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, TNetFile, TDavixFile, TXNetFile, and TNetXNGFile.; Definition at line 2476 of file TFile.cxx. ◆ WriteBufferViaCache(). Int_t TFile::WriteBufferViaCache ; (; const char * ; buf, . Int_t ; len . ). protected . Write buffer via cache. ; Returns 0 if cache is not active, 1 in case write via cache was successful, 2 in case write via cache failed. ; Definition at line 2519 of file TFile.cxx. ◆ WriteFree(). void TFile::WriteFree ; (; ). virtual . Write FREE linked list on the file. ; The linked list of FREE segments (fFree) is written as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2543 of file TFile.cxx. ◆ WriteHeader(). void TFile::WriteHeader ; (; ). virtual . Write File Header. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2615 of file TFile.cxx. ◆ WriteProcessID(). UShort_t TFile::WriteProcessID ; (; TProcessID * ; pid). virtual . Check if the ProcessID pidd is already in the file, if not, add it and return the index number in the local file list. ; Definition at line 3763 of file TFile.cxx. ◆ WriteStreamerInfo(). void TFile::WriteStreamerInfo ; (; ). virtual . Write the list of TStreamerInfo as a single object in this file The class Streamer description for all classes written to this file is saved. ; See class ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:104121,Performance,cache,cache,104121,e TFile.h. ◆ fAsyncHandle. TFileOpenHandle* TFile::fAsyncHandle {nullptr}. protected . !For proper automatic cleanup ; Definition at line 108 of file TFile.h. ◆ fAsyncOpenStatus. EAsyncOpenStatus TFile::fAsyncOpenStatus {kAOSNotAsync}. protected . !Status of an asynchronous open request ; Definition at line 109 of file TFile.h. ◆ fBEGIN. Long64_t TFile::fBEGIN {0}. protected . First used byte in file. ; Definition at line 78 of file TFile.h. ◆ fBytesRead. Long64_t TFile::fBytesRead {0}. protected . Number of bytes read from this file. ; Definition at line 76 of file TFile.h. ◆ fBytesReadExtra. Long64_t TFile::fBytesReadExtra {0}. protected . Number of extra bytes (overhead) read by the readahead buffer. ; Definition at line 77 of file TFile.h. ◆ fBytesWrite. Long64_t TFile::fBytesWrite {0}. protected . Number of bytes written to this file. ; Definition at line 75 of file TFile.h. ◆ fCacheRead. TFileCacheRead* TFile::fCacheRead {nullptr}. protected . !Pointer to the read cache (if any) ; Definition at line 98 of file TFile.h. ◆ fCacheReadMap. TMap* TFile::fCacheReadMap {nullptr}. protected . !Pointer to the read cache (if any) ; Definition at line 99 of file TFile.h. ◆ fCacheWrite. TFileCacheWrite* TFile::fCacheWrite {nullptr}. protected . !Pointer to the write cache (if any) ; Definition at line 100 of file TFile.h. ◆ fClassIndex. TArrayC* TFile::fClassIndex {nullptr}. protected . !Index of TStreamerInfo classes written to this file ; Definition at line 94 of file TFile.h. ◆ fCompress. Int_t TFile::fCompress {0}. protected . Compression level and algorithm. ; Definition at line 84 of file TFile.h. ◆ fD. Int_t TFile::fD {-1}. protected . File descriptor. ; Definition at line 82 of file TFile.h. ◆ fEND. Long64_t TFile::fEND {0}. protected . Last used byte in file. ; Definition at line 79 of file TFile.h. ◆ fFree. TList* TFile::fFree {nullptr}. protected . Free segments linked list table. ; Definition at line 93 of file TFile.h. ◆ fgAsyncOpenRequests. TList * TFile::fgA,MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:104265,Performance,cache,cache,104265, file TFile.h. ◆ fAsyncOpenStatus. EAsyncOpenStatus TFile::fAsyncOpenStatus {kAOSNotAsync}. protected . !Status of an asynchronous open request ; Definition at line 109 of file TFile.h. ◆ fBEGIN. Long64_t TFile::fBEGIN {0}. protected . First used byte in file. ; Definition at line 78 of file TFile.h. ◆ fBytesRead. Long64_t TFile::fBytesRead {0}. protected . Number of bytes read from this file. ; Definition at line 76 of file TFile.h. ◆ fBytesReadExtra. Long64_t TFile::fBytesReadExtra {0}. protected . Number of extra bytes (overhead) read by the readahead buffer. ; Definition at line 77 of file TFile.h. ◆ fBytesWrite. Long64_t TFile::fBytesWrite {0}. protected . Number of bytes written to this file. ; Definition at line 75 of file TFile.h. ◆ fCacheRead. TFileCacheRead* TFile::fCacheRead {nullptr}. protected . !Pointer to the read cache (if any) ; Definition at line 98 of file TFile.h. ◆ fCacheReadMap. TMap* TFile::fCacheReadMap {nullptr}. protected . !Pointer to the read cache (if any) ; Definition at line 99 of file TFile.h. ◆ fCacheWrite. TFileCacheWrite* TFile::fCacheWrite {nullptr}. protected . !Pointer to the write cache (if any) ; Definition at line 100 of file TFile.h. ◆ fClassIndex. TArrayC* TFile::fClassIndex {nullptr}. protected . !Index of TStreamerInfo classes written to this file ; Definition at line 94 of file TFile.h. ◆ fCompress. Int_t TFile::fCompress {0}. protected . Compression level and algorithm. ; Definition at line 84 of file TFile.h. ◆ fD. Int_t TFile::fD {-1}. protected . File descriptor. ; Definition at line 82 of file TFile.h. ◆ fEND. Long64_t TFile::fEND {0}. protected . Last used byte in file. ; Definition at line 79 of file TFile.h. ◆ fFree. TList* TFile::fFree {nullptr}. protected . Free segments linked list table. ; Definition at line 93 of file TFile.h. ◆ fgAsyncOpenRequests. TList * TFile::fgAsyncOpenRequests = nullptr. staticprotected . Definition at line 122 of file TFile.h. ◆ fgBytesRead. std::atomic< Long64_t > TFile::fgBytesRead ,MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:104417,Performance,cache,cache,104417,tion at line 109 of file TFile.h. ◆ fBEGIN. Long64_t TFile::fBEGIN {0}. protected . First used byte in file. ; Definition at line 78 of file TFile.h. ◆ fBytesRead. Long64_t TFile::fBytesRead {0}. protected . Number of bytes read from this file. ; Definition at line 76 of file TFile.h. ◆ fBytesReadExtra. Long64_t TFile::fBytesReadExtra {0}. protected . Number of extra bytes (overhead) read by the readahead buffer. ; Definition at line 77 of file TFile.h. ◆ fBytesWrite. Long64_t TFile::fBytesWrite {0}. protected . Number of bytes written to this file. ; Definition at line 75 of file TFile.h. ◆ fCacheRead. TFileCacheRead* TFile::fCacheRead {nullptr}. protected . !Pointer to the read cache (if any) ; Definition at line 98 of file TFile.h. ◆ fCacheReadMap. TMap* TFile::fCacheReadMap {nullptr}. protected . !Pointer to the read cache (if any) ; Definition at line 99 of file TFile.h. ◆ fCacheWrite. TFileCacheWrite* TFile::fCacheWrite {nullptr}. protected . !Pointer to the write cache (if any) ; Definition at line 100 of file TFile.h. ◆ fClassIndex. TArrayC* TFile::fClassIndex {nullptr}. protected . !Index of TStreamerInfo classes written to this file ; Definition at line 94 of file TFile.h. ◆ fCompress. Int_t TFile::fCompress {0}. protected . Compression level and algorithm. ; Definition at line 84 of file TFile.h. ◆ fD. Int_t TFile::fD {-1}. protected . File descriptor. ; Definition at line 82 of file TFile.h. ◆ fEND. Long64_t TFile::fEND {0}. protected . Last used byte in file. ; Definition at line 79 of file TFile.h. ◆ fFree. TList* TFile::fFree {nullptr}. protected . Free segments linked list table. ; Definition at line 93 of file TFile.h. ◆ fgAsyncOpenRequests. TList * TFile::fgAsyncOpenRequests = nullptr. staticprotected . Definition at line 122 of file TFile.h. ◆ fgBytesRead. std::atomic< Long64_t > TFile::fgBytesRead {0}. staticprotected . Number of bytes read by all TFile objects. ; Definition at line 131 of file TFile.h. ◆ fgBytesWrite. std::atomic< Long64_t > TFil,MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:105841,Performance,cache,cache,105841," of file TFile.h. ◆ fEND. Long64_t TFile::fEND {0}. protected . Last used byte in file. ; Definition at line 79 of file TFile.h. ◆ fFree. TList* TFile::fFree {nullptr}. protected . Free segments linked list table. ; Definition at line 93 of file TFile.h. ◆ fgAsyncOpenRequests. TList * TFile::fgAsyncOpenRequests = nullptr. staticprotected . Definition at line 122 of file TFile.h. ◆ fgBytesRead. std::atomic< Long64_t > TFile::fgBytesRead {0}. staticprotected . Number of bytes read by all TFile objects. ; Definition at line 131 of file TFile.h. ◆ fgBytesWrite. std::atomic< Long64_t > TFile::fgBytesWrite {0}. staticprotected . Number of bytes written by all TFile objects. ; Definition at line 130 of file TFile.h. ◆ fgCacheFileDir. TString TFile::fgCacheFileDir. staticprotected . Directory where to locally stage files. ; Definition at line 124 of file TFile.h. ◆ fgCacheFileDisconnected. Bool_t TFile::fgCacheFileDisconnected = kTRUE. staticprotected . Indicates, we trust in the files in the cache dir without stat on the cached file. ; Definition at line 125 of file TFile.h. ◆ fgCacheFileForce. Bool_t TFile::fgCacheFileForce = kFALSE. staticprotected . Indicates, to force all READ to CACHEREAD. ; Definition at line 126 of file TFile.h. ◆ fgFileCounter. std::atomic< Long64_t > TFile::fgFileCounter {0}. staticprotected . Counter for all opened files. ; Definition at line 132 of file TFile.h. ◆ fGlobalRegistration. bool TFile::fGlobalRegistration = true. protected . ! if true, bypass use of global lists ; Definition at line 115 of file TFile.h. ◆ fgOnlyStaged. Bool_t TFile::fgOnlyStaged = kFALSE. staticprotected . Before the file is opened, it is checked, that the file is staged, if not, the open fails. ; Definition at line 128 of file TFile.h. ◆ fgOpenTimeout. UInt_t TFile::fgOpenTimeout = TFile::kEternalTimeout. staticprotected . Timeout for open operations in ms - 0 corresponds to blocking i/o. ; Definition at line 127 of file TFile.h. ◆ fgReadaheadSize. Int_t TFile::fgRead",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:105871,Performance,cache,cached,105871," of file TFile.h. ◆ fEND. Long64_t TFile::fEND {0}. protected . Last used byte in file. ; Definition at line 79 of file TFile.h. ◆ fFree. TList* TFile::fFree {nullptr}. protected . Free segments linked list table. ; Definition at line 93 of file TFile.h. ◆ fgAsyncOpenRequests. TList * TFile::fgAsyncOpenRequests = nullptr. staticprotected . Definition at line 122 of file TFile.h. ◆ fgBytesRead. std::atomic< Long64_t > TFile::fgBytesRead {0}. staticprotected . Number of bytes read by all TFile objects. ; Definition at line 131 of file TFile.h. ◆ fgBytesWrite. std::atomic< Long64_t > TFile::fgBytesWrite {0}. staticprotected . Number of bytes written by all TFile objects. ; Definition at line 130 of file TFile.h. ◆ fgCacheFileDir. TString TFile::fgCacheFileDir. staticprotected . Directory where to locally stage files. ; Definition at line 124 of file TFile.h. ◆ fgCacheFileDisconnected. Bool_t TFile::fgCacheFileDisconnected = kTRUE. staticprotected . Indicates, we trust in the files in the cache dir without stat on the cached file. ; Definition at line 125 of file TFile.h. ◆ fgCacheFileForce. Bool_t TFile::fgCacheFileForce = kFALSE. staticprotected . Indicates, to force all READ to CACHEREAD. ; Definition at line 126 of file TFile.h. ◆ fgFileCounter. std::atomic< Long64_t > TFile::fgFileCounter {0}. staticprotected . Counter for all opened files. ; Definition at line 132 of file TFile.h. ◆ fGlobalRegistration. bool TFile::fGlobalRegistration = true. protected . ! if true, bypass use of global lists ; Definition at line 115 of file TFile.h. ◆ fgOnlyStaged. Bool_t TFile::fgOnlyStaged = kFALSE. staticprotected . Before the file is opened, it is checked, that the file is staged, if not, the open fails. ; Definition at line 128 of file TFile.h. ◆ fgOpenTimeout. UInt_t TFile::fgOpenTimeout = TFile::kEternalTimeout. staticprotected . Timeout for open operations in ms - 0 corresponds to blocking i/o. ; Definition at line 127 of file TFile.h. ◆ fgReadaheadSize. Int_t TFile::fgRead",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:109013,Performance,cache,cache,109013," TFile.h. ◆ fIsRootFile. Bool_t TFile::fIsRootFile {kTRUE}. protected . !True is this is a ROOT file, raw file otherwise ; Definition at line 104 of file TFile.h. ◆ fMustFlush. Bool_t TFile::fMustFlush {kTRUE}. protected . !True if the file buffers must be flushed ; Definition at line 106 of file TFile.h. ◆ fNbytesFree. Int_t TFile::fNbytesFree {0}. protected . Number of bytes for free segments structure. ; Definition at line 85 of file TFile.h. ◆ fNbytesInfo. Int_t TFile::fNbytesInfo {0}. protected . Number of bytes for StreamerInfo record. ; Definition at line 86 of file TFile.h. ◆ fNoAnchorInName. Bool_t TFile::fNoAnchorInName {kFALSE}. protected . !True if we don't want to force the anchor to be appended to the file name ; Definition at line 103 of file TFile.h. ◆ fNProcessIDs. Int_t TFile::fNProcessIDs {0}. protected . Number of TProcessID written to this file. ; Definition at line 88 of file TFile.h. ◆ fOffset. Long64_t TFile::fOffset {0}. protected . !Seek offset cache ; Definition at line 96 of file TFile.h. ◆ fOpenPhases. TList* TFile::fOpenPhases {nullptr}. protected . !Time info about open phases ; Definition at line 113 of file TFile.h. ◆ fOption. TString TFile::fOption. protected . File options. ; Definition at line 91 of file TFile.h. ◆ fProcessIDs. TObjArray* TFile::fProcessIDs {nullptr}. protected . !Array of pointers to TProcessIDs ; Definition at line 95 of file TFile.h. ◆ fReadCalls. Int_t TFile::fReadCalls {0}. protected . Number of read calls ( not counting the cache calls ) ; Definition at line 89 of file TFile.h. ◆ fRealName. TString TFile::fRealName. protected . Effective real file name (not original url) ; Definition at line 90 of file TFile.h. ◆ fSeekFree. Long64_t TFile::fSeekFree {0}. protected . Location on disk of free segments structure. ; Definition at line 80 of file TFile.h. ◆ fSeekInfo. Long64_t TFile::fSeekInfo {0}. protected . Location on disk of StreamerInfo record. ; Definition at line 81 of file TFile.h. ◆ fSum2Buffer. Double_",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:109535,Performance,cache,cache,109535,r of bytes for StreamerInfo record. ; Definition at line 86 of file TFile.h. ◆ fNoAnchorInName. Bool_t TFile::fNoAnchorInName {kFALSE}. protected . !True if we don't want to force the anchor to be appended to the file name ; Definition at line 103 of file TFile.h. ◆ fNProcessIDs. Int_t TFile::fNProcessIDs {0}. protected . Number of TProcessID written to this file. ; Definition at line 88 of file TFile.h. ◆ fOffset. Long64_t TFile::fOffset {0}. protected . !Seek offset cache ; Definition at line 96 of file TFile.h. ◆ fOpenPhases. TList* TFile::fOpenPhases {nullptr}. protected . !Time info about open phases ; Definition at line 113 of file TFile.h. ◆ fOption. TString TFile::fOption. protected . File options. ; Definition at line 91 of file TFile.h. ◆ fProcessIDs. TObjArray* TFile::fProcessIDs {nullptr}. protected . !Array of pointers to TProcessIDs ; Definition at line 95 of file TFile.h. ◆ fReadCalls. Int_t TFile::fReadCalls {0}. protected . Number of read calls ( not counting the cache calls ) ; Definition at line 89 of file TFile.h. ◆ fRealName. TString TFile::fRealName. protected . Effective real file name (not original url) ; Definition at line 90 of file TFile.h. ◆ fSeekFree. Long64_t TFile::fSeekFree {0}. protected . Location on disk of free segments structure. ; Definition at line 80 of file TFile.h. ◆ fSeekInfo. Long64_t TFile::fSeekInfo {0}. protected . Location on disk of StreamerInfo record. ; Definition at line 81 of file TFile.h. ◆ fSum2Buffer. Double_t TFile::fSum2Buffer {0}. protected . Sum of squares of buffer sizes of objects written so far. ; Definition at line 74 of file TFile.h. ◆ fSumBuffer. Double_t TFile::fSumBuffer {0}. protected . Sum of buffer sizes of objects written so far. ; Definition at line 73 of file TFile.h. ◆ fUnits. Char_t TFile::fUnits {0}. protected . Number of bytes for file pointers. ; Definition at line 92 of file TFile.h. ◆ fUrl. TUrl TFile::fUrl. protected . !URL of file ; Definition at line 110 of file TFile.h. ◆ fVersion. I,MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:6103,Safety,timeout,timeout,6103,"lptr); ; # Use the histogram afterwards; print(hin.GetName()); NoteThe TFile::Close method automatically sets the current directory in the program to the gROOT object. If you want to restore the status of the current directory to some other file that was opened prior to the with statement, you can use the context manager functionality offered by TContext. Definition at line 53 of file TFile.h. Classes; struct  InfoListRet;  Simple struct of the return value of GetStreamerInfoListImpl. More...;  . Public Types; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ; ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:12424,Safety,recover,recover,12424,"(const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void ResetErrno () const;  Method resetting the errno. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:31955,Safety,timeout,timeout,31955,"; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *handle);  Get status of the async open request related to 'handle'. ;  ; static const char * GetCacheFileDir ();  Get the directory where to locally stage/cache remote files. ;  ; static const TUrl * GetEndpointUrl (const char *name);  Get final URL for file being opened asynchronously. ;  ; static Long64_t GetFileBytesRead ();  Static function returning the total number of bytes read from all files. ;  ; static Long64_t GetFileBytesWritten ();  Static function returning the total number of bytes written to all files. ;  ; static Long64_t GetFileCounter ();  ; static Int_t GetFileReadCalls ();  Static function returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static v",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:33152,Safety,timeout,timeout,33152,"e opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; s",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:33173,Safety,timeout,timeout,33173,"e opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; s",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:33212,Safety,timeout,timeout,33212," Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:46511,Safety,timeout,timeout,46511,"entDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  . #include <TFile.h>. Inheritance diagram for TFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkStartBigFile . Definition at line 200 of file TFile.h. ◆ EAsyncOpenStatus. enum TFile::EAsyncOpenStatus. Asynchronous open request status. . EnumeratorkAOSNotAsync ; kAOSFailure ; kAOSInProgress ; kAOSSuccess . Definition at line 64 of file TFile.h. ◆ ECacheAction. enum TFile::ECacheAction. TTreeCache flushing semantics. . EnumeratorkDisconnect ; kDoNotDisconnect . Definition at line 70 of file TFile.h. ◆ EFileType. enum TFile::EFileType. File type. . EnumeratorkDefault ; kLocal ; kNet ; kWeb ; kFile ; kMerge . Definition at line 202 of file TFile.h. ◆ EOpenTimeOut. enum TFile::EOpenTimeOut. Open timeout constants. . EnumeratorkInstantTimeout ; kEternalTimeout . Definition at line 67 of file TFile.h. ◆ ERelativeTo. enum TFile::ERelativeTo. EnumeratorkBeg ; kCur ; kEnd . Definition at line 199 of file TFile.h. ◆ EStatusBits. enum TFile::EStatusBits. TFile status bits. BIT(13) is taken up by TObject. . Enumeratork630forwardCompatibility ; kRecovered ; kHasReferences ; kDevNull ; kWriteError ; kBinaryFile ; kRedirected ; kReproducible . Definition at line 183 of file TFile.h. Constructor & Destructor Documentation. ◆ TFile() [1/3]. TFile::TFile ; (; const TFile & ; ). privatedelete . ◆ TFile() [2/3]. TFile::TFile ; (; ). File default Constructor. ; Definition at line 201 of file TFile.cxx. ◆ TFile() [3/3]. TFile::TFile ; (; const char * ; fname1, . Option_t * ; option = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault . ). Opens or creates a local ROOT file. ; Parameters. [in]fname1The name of the file ; [in]optionSpecifies",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:51431,Safety,detect,detect,51431," file will not be compressed. . 1 minimal compression level but fast. . ... .... . 9 maximal compression level but slower and might use more memory. . (For the currently supported algorithms, the maximum level is 9) If compress is negative it indicates the compression level is not set yet. The enumeration ROOT::RCompressionSetting::EAlgorithm associates each algorithm with a number. There is a utility function to help to set the value of compress. For example, ROOT::CompressionSettings(ROOT::kLZMA, 1) will build an integer which will set the compression to use the LZMA algorithm and compression level 1. These are defined in the header file Compression.h. Note that the compression settings may be changed at any time. The new compression settings will only apply to branches created or attached after the setting is changed and other objects written after the setting is changed. In case the file does not exist or is not a valid ROOT file, it is made a Zombie. One can detect this situation with a code like: TFile f(""file.root"");; if (f.IsZombie()) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; f#define f(i)Definition RSha256.hxx:104; If you open a file instead with TFile::Open(""file.root"") use rather the following code as a nullptr is returned. TFile* f = TFile::Open(""file.root"");; if (!f) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; When opening the file, the system checks the validity of this directory. If something wrong is detected, an automatic Recovery is performed. In this case, the file is scanned sequentially reading all logical blocks and attempting to rebuild a correct directory (see TFile::Recover). One can disable the automatic recovery procedure when reading one or more files by setting the en",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:52169,Safety,detect,detected,52169,"he new compression settings will only apply to branches created or attached after the setting is changed and other objects written after the setting is changed. In case the file does not exist or is not a valid ROOT file, it is made a Zombie. One can detect this situation with a code like: TFile f(""file.root"");; if (f.IsZombie()) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; f#define f(i)Definition RSha256.hxx:104; If you open a file instead with TFile::Open(""file.root"") use rather the following code as a nullptr is returned. TFile* f = TFile::Open(""file.root"");; if (!f) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; When opening the file, the system checks the validity of this directory. If something wrong is detected, an automatic Recovery is performed. In this case, the file is scanned sequentially reading all logical blocks and attempting to rebuild a correct directory (see TFile::Recover). One can disable the automatic recovery procedure when reading one or more files by setting the environment variable ""TFile.Recover: 0"" in the system.rootrc file.; A bit TFile::kReproducible can be enabled specifying the ""reproducible"" url option when creating the file: TFile *f = TFile::Open(""name.root?reproducible"",""RECREATE"",""File title"");; Unlike regular TFiles, the content of such file has reproducible binary content when writing exactly same data. This achieved by writing pre-defined values for creation and modification date of TKey/TDirectory objects and null value for TUUID objects inside TFile. As drawback, TRef objects stored in such file cannot be read correctly.; In case the name of the file is not reproducible either (in case of creating temporary filenames) a value can be passed to the reproducible ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:52387,Safety,recover,recovery,52387,"bie. One can detect this situation with a code like: TFile f(""file.root"");; if (f.IsZombie()) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; f#define f(i)Definition RSha256.hxx:104; If you open a file instead with TFile::Open(""file.root"") use rather the following code as a nullptr is returned. TFile* f = TFile::Open(""file.root"");; if (!f) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; When opening the file, the system checks the validity of this directory. If something wrong is detected, an automatic Recovery is performed. In this case, the file is scanned sequentially reading all logical blocks and attempting to rebuild a correct directory (see TFile::Recover). One can disable the automatic recovery procedure when reading one or more files by setting the environment variable ""TFile.Recover: 0"" in the system.rootrc file.; A bit TFile::kReproducible can be enabled specifying the ""reproducible"" url option when creating the file: TFile *f = TFile::Open(""name.root?reproducible"",""RECREATE"",""File title"");; Unlike regular TFiles, the content of such file has reproducible binary content when writing exactly same data. This achieved by writing pre-defined values for creation and modification date of TKey/TDirectory objects and null value for TUUID objects inside TFile. As drawback, TRef objects stored in such file cannot be read correctly.; In case the name of the file is not reproducible either (in case of creating temporary filenames) a value can be passed to the reproducible option to replace the name stored in the file. TFile *f = TFile::Open(""tmpname.root?reproducible=fixedname"",""RECREATE"",""File title"");. Definition at line 339 of file TFile.cxx. ◆ ~TFile(). TFile::~TFile ; (; ). override . File destructor.",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:67215,Safety,timeout,timeout,67215,"File.h. ◆ GetNbytesFree(). virtual Int_t TFile::GetNbytesFree ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 249 of file TFile.h. ◆ GetNbytesInfo(). virtual Int_t TFile::GetNbytesInfo ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 248 of file TFile.h. ◆ GetNewUrl(). virtual TString TFile::GetNewUrl ; (; ). inlinevirtual . Reimplemented in TDavixFile, and TNetXNGFile.; Definition at line 250 of file TFile.h. ◆ GetNfree(). virtual Int_t TFile::GetNfree ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 238 of file TFile.h. ◆ GetNProcessIDs(). virtual Int_t TFile::GetNProcessIDs ; (; ); const. inlinevirtual . Definition at line 239 of file TFile.h. ◆ GetOnlyStaged(). Bool_t TFile::GetOnlyStaged ; (; ). static . Returns staged only flag. ; Definition at line 4754 of file TFile.cxx. ◆ GetOpenTimeout(). UInt_t TFile::GetOpenTimeout ; (; ). static . Returns open timeout (in ms). ; Definition at line 4734 of file TFile.cxx. ◆ GetOption(). Option_t * TFile::GetOption ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 240 of file TFile.h. ◆ GetReadaheadSize(). Int_t TFile::GetReadaheadSize ; (; ). static . Static function returning the readahead buffer size. ; Definition at line 4599 of file TFile.cxx. ◆ GetReadCalls(). virtual Int_t TFile::GetReadCalls ; (; ); const. inlinevirtual . Definition at line 244 of file TFile.h. ◆ GetReadStreamerInfo(). Bool_t TFile::GetReadStreamerInfo ; (; ). static . If the streamerinfos are to be read at file opening. ; See TFile::SetReadStreamerInfo for more documentation. ; Definition at line 3742 of file TFile.cxx. ◆ GetRecordHeader(). Int_t TFile::GetRecordHeader ; (; char * ; buf, . Long64_t ; first, . Int_t ; maxbytes, . Int_t & ; nbytes, . Int_t & ; objlen, . Int_t & ; keylen . ). Read the logical record header starting at a certain postion. ; Parameters. [in]bufpointer to ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:83557,Safety,timeout,timeout,83557," sequentially in the specified order until a successful open. If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile, etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile::AsyncOpen(...), it is possible to request a timeout with the option TIMEOUT=<secs>: the timeout must be specified in seconds and it will be internally checked with granularity of one millisec. For remote files there is the option: CACHEREAD opens an existing file for reading through the file cache. The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir().; The caller is responsible for deleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferrin",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:83601,Safety,timeout,timeout,83601," sequentially in the specified order until a successful open. If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile, etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile::AsyncOpen(...), it is possible to request a timeout with the option TIMEOUT=<secs>: the timeout must be specified in seconds and it will be internally checked with granularity of one millisec. For remote files there is the option: CACHEREAD opens an existing file for reading through the file cache. The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir().; The caller is responsible for deleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile.cxx. ◆ Open() [2/2]. TFile * TFile::Open ; (; TFileOpenHandle * ; fh). static . Waits for the completion of an asynchronous open request. ; Returns the pointer to the associated TFile, transferrin",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:88772,Safety,recover,recover,88772,"ee ; (; ). virtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is imp",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:88867,Safety,recover,recovered,88867,"e has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see T",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:88896,Safety,recover,recovered,88896,"en on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree heade",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89148,Safety,recover,recover,89148,". The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at line 1951 of file TFile.cxx. ◆ ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the sys",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89291,Safety,recover,recovered,89291,"ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reope",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89333,Safety,safe,safely,89333,"ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reope",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89559,Safety,recover,recovered,89559," that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case th",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89661,Safety,recover,recovered,89661,"amerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or w",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89733,Safety,recover,recovered,89733,"f not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or wrong input arguments) and -1 in case of failure, in which case the file cannot be used anymore. The current directory (gFile) is chan",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89891,Safety,recover,recovered,89891,"the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or wrong input arguments) and -1 in case of failure, in which case the file cannot be used anymore. The current directory (gFile) is changed to this file. ; Reimplemented in TSQLFile, TXMLFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 2162 of",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:90089,Safety,recover,recovery,90089," open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or wrong input arguments) and -1 in case of failure, in which case the file cannot be used anymore. The current directory (gFile) is changed to this file. ; Reimplemented in TSQLFile, TXMLFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 2162 of file TFile.cxx. ◆ ResetErrno(). void TFile::ResetErrno ; (; ); const. virtual . Method resetting the errno. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, and TMemFile.; Definiti",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:95038,Safety,timeout,timeout,95038,"linevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 287 of file TFile.h. ◆ SetFileBytesRead(). void TFile::SetFileBytesRead ; (; Long64_t ; bytes = 0). static . Definition at line 4608 of file TFile.cxx. ◆ SetFileBytesWritten(). void TFile::SetFileBytesWritten ; (; Long64_t ; bytes = 0). static . Definition at line 4611 of file TFile.cxx. ◆ SetFileReadCalls(). void TFile::SetFileReadCalls ; (; Int_t ; readcalls = 0). static . Definition at line 4614 of file TFile.cxx. ◆ SetOffset(). void TFile::SetOffset ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Set position from where to start reading. ; Definition at line 2253 of file TFile.cxx. ◆ SetOnlyStaged(). Bool_t TFile::SetOnlyStaged ; (; Bool_t ; onlystaged). static . Sets only staged flag. ; Returns previous value of flag. When true we check before opening the file if it is staged, if not, the open fails. ; Definition at line 4744 of file TFile.cxx. ◆ SetOpenTimeout(). UInt_t TFile::SetOpenTimeout ; (; UInt_t ; timeout). static . Sets open timeout time (in ms). Returns previous timeout value. ; Definition at line 4724 of file TFile.cxx. ◆ SetOption(). virtual void TFile::SetOption ; (; Option_t * ; option = "">""). inlinevirtual . Definition at line 289 of file TFile.h. ◆ SetReadaheadSize(). void TFile::SetReadaheadSize ; (; Int_t ; bufsize = 256000). static . Definition at line 4605 of file TFile.cxx. ◆ SetReadCalls(). virtual void TFile::SetReadCalls ; (; Int_t ; readcalls = 0). inlinevirtual . Definition at line 290 of file TFile.h. ◆ SetReadStreamerInfo(). void TFile::SetReadStreamerInfo ; (; Bool_t ; readinfo = kTRUE). static . Specify if the streamerinfos must be read at file opening. ; If fgReadInfo is true (default) TFile::ReadStreamerInfo is called when opening the file. It may be interesting to set fgReadInfo to false to speedup the file opening time or in case libraries containing classes referenced by the file have not yet been loaded. if fgReadInfo is false, one ca",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:95067,Safety,timeout,timeout,95067,"e.; Definition at line 287 of file TFile.h. ◆ SetFileBytesRead(). void TFile::SetFileBytesRead ; (; Long64_t ; bytes = 0). static . Definition at line 4608 of file TFile.cxx. ◆ SetFileBytesWritten(). void TFile::SetFileBytesWritten ; (; Long64_t ; bytes = 0). static . Definition at line 4611 of file TFile.cxx. ◆ SetFileReadCalls(). void TFile::SetFileReadCalls ; (; Int_t ; readcalls = 0). static . Definition at line 4614 of file TFile.cxx. ◆ SetOffset(). void TFile::SetOffset ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Set position from where to start reading. ; Definition at line 2253 of file TFile.cxx. ◆ SetOnlyStaged(). Bool_t TFile::SetOnlyStaged ; (; Bool_t ; onlystaged). static . Sets only staged flag. ; Returns previous value of flag. When true we check before opening the file if it is staged, if not, the open fails. ; Definition at line 4744 of file TFile.cxx. ◆ SetOpenTimeout(). UInt_t TFile::SetOpenTimeout ; (; UInt_t ; timeout). static . Sets open timeout time (in ms). Returns previous timeout value. ; Definition at line 4724 of file TFile.cxx. ◆ SetOption(). virtual void TFile::SetOption ; (; Option_t * ; option = "">""). inlinevirtual . Definition at line 289 of file TFile.h. ◆ SetReadaheadSize(). void TFile::SetReadaheadSize ; (; Int_t ; bufsize = 256000). static . Definition at line 4605 of file TFile.cxx. ◆ SetReadCalls(). virtual void TFile::SetReadCalls ; (; Int_t ; readcalls = 0). inlinevirtual . Definition at line 290 of file TFile.h. ◆ SetReadStreamerInfo(). void TFile::SetReadStreamerInfo ; (; Bool_t ; readinfo = kTRUE). static . Specify if the streamerinfos must be read at file opening. ; If fgReadInfo is true (default) TFile::ReadStreamerInfo is called when opening the file. It may be interesting to set fgReadInfo to false to speedup the file opening time or in case libraries containing classes referenced by the file have not yet been loaded. if fgReadInfo is false, one can still read the StreamerInfo with myfile.ReadStrea",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:95106,Safety,timeout,timeout,95106,"le TFile.h. ◆ SetFileBytesRead(). void TFile::SetFileBytesRead ; (; Long64_t ; bytes = 0). static . Definition at line 4608 of file TFile.cxx. ◆ SetFileBytesWritten(). void TFile::SetFileBytesWritten ; (; Long64_t ; bytes = 0). static . Definition at line 4611 of file TFile.cxx. ◆ SetFileReadCalls(). void TFile::SetFileReadCalls ; (; Int_t ; readcalls = 0). static . Definition at line 4614 of file TFile.cxx. ◆ SetOffset(). void TFile::SetOffset ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Set position from where to start reading. ; Definition at line 2253 of file TFile.cxx. ◆ SetOnlyStaged(). Bool_t TFile::SetOnlyStaged ; (; Bool_t ; onlystaged). static . Sets only staged flag. ; Returns previous value of flag. When true we check before opening the file if it is staged, if not, the open fails. ; Definition at line 4744 of file TFile.cxx. ◆ SetOpenTimeout(). UInt_t TFile::SetOpenTimeout ; (; UInt_t ; timeout). static . Sets open timeout time (in ms). Returns previous timeout value. ; Definition at line 4724 of file TFile.cxx. ◆ SetOption(). virtual void TFile::SetOption ; (; Option_t * ; option = "">""). inlinevirtual . Definition at line 289 of file TFile.h. ◆ SetReadaheadSize(). void TFile::SetReadaheadSize ; (; Int_t ; bufsize = 256000). static . Definition at line 4605 of file TFile.cxx. ◆ SetReadCalls(). virtual void TFile::SetReadCalls ; (; Int_t ; readcalls = 0). inlinevirtual . Definition at line 290 of file TFile.h. ◆ SetReadStreamerInfo(). void TFile::SetReadStreamerInfo ; (; Bool_t ; readinfo = kTRUE). static . Specify if the streamerinfos must be read at file opening. ; If fgReadInfo is true (default) TFile::ReadStreamerInfo is called when opening the file. It may be interesting to set fgReadInfo to false to speedup the file opening time or in case libraries containing classes referenced by the file have not yet been loaded. if fgReadInfo is false, one can still read the StreamerInfo with myfile.ReadStreamerInfo(); ; Definition at line ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:3964,Security,access,accessing,3964,".. lname Number of bytes in the object name . ..->.. Name lName bytes with the name of the object . ..->.. lTitle Number of bytes in the object title . ..->.. Title Title of the object . --—> DATA Data bytes associated to the object . The structure of a directory is shown in TDirectoryFile::TDirectoryFile. PyROOT; In the same way as for TDirectory, it is possible to get the content of a TFile object with the familiar item-getting syntax. For more information, please refer to the TDirectory documentation.; In addition, TFile instances can be inspected via the Get method, a feature that is inherited from TDirectoryFile (please see the documentation of TDirectoryFile for examples on how to use it).; In order to write objects into a TFile, the WriteObject Python method can be used (more information in the documentation of TDirectoryFile).; PyROOT modifies the TFile constructor and the TFile::Open method to make them behave in a more pythonic way. In particular, they both throw an OSError if there was a problem accessing the file (e.g. non-existent or corrupted file).; This class can also be used as a context manager, with the goal of opening a file and doing some quick manipulations of the objects inside it. The TFile::Close method will be automatically called at the end of the context. For example: from ROOT import TFile; with TFile(""file1.root"", ""recreate"") as outfile:; hout = ROOT.TH1F(...); outfile.WriteObject(hout, ""myhisto""); TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; Since the file is closed at the end of the context, all objects created or read from the file inside the context are not accessible anymore in the application (but they will be stored in the file if they were written to it). ROOT objects like histograms can be detached from a file with the SetDirectory method. This will leave the object untouched so that it can be accessed after the end of the context: import ROO",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:4647,Security,access,accessible,4647,"to use it).; In order to write objects into a TFile, the WriteObject Python method can be used (more information in the documentation of TDirectoryFile).; PyROOT modifies the TFile constructor and the TFile::Open method to make them behave in a more pythonic way. In particular, they both throw an OSError if there was a problem accessing the file (e.g. non-existent or corrupted file).; This class can also be used as a context manager, with the goal of opening a file and doing some quick manipulations of the objects inside it. The TFile::Close method will be automatically called at the end of the context. For example: from ROOT import TFile; with TFile(""file1.root"", ""recreate"") as outfile:; hout = ROOT.TH1F(...); outfile.WriteObject(hout, ""myhisto""); TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; Since the file is closed at the end of the context, all objects created or read from the file inside the context are not accessible anymore in the application (but they will be stored in the file if they were written to it). ROOT objects like histograms can be detached from a file with the SetDirectory method. This will leave the object untouched so that it can be accessed after the end of the context: import ROOT; from ROOT import TFile; with TFile(""file1.root"", ""read"") as infile:; hin = infile.Get(""myhisto""); hin.SetDirectory(ROOT.nullptr); ; # Use the histogram afterwards; print(hin.GetName()); NoteThe TFile::Close method automatically sets the current directory in the program to the gROOT object. If you want to restore the status of the current directory to some other file that was opened prior to the with statement, you can use the context manager functionality offered by TContext. Definition at line 53 of file TFile.h. Classes; struct  InfoListRet;  Simple struct of the return value of GetStreamerInfoListImpl. More...;  . Public Types; enum  { kStartBigFile = 2000000000; };  ; enum  EAs",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:4893,Security,access,accessed,4893,", they both throw an OSError if there was a problem accessing the file (e.g. non-existent or corrupted file).; This class can also be used as a context manager, with the goal of opening a file and doing some quick manipulations of the objects inside it. The TFile::Close method will be automatically called at the end of the context. For example: from ROOT import TFile; with TFile(""file1.root"", ""recreate"") as outfile:; hout = ROOT.TH1F(...); outfile.WriteObject(hout, ""myhisto""); TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; Since the file is closed at the end of the context, all objects created or read from the file inside the context are not accessible anymore in the application (but they will be stored in the file if they were written to it). ROOT objects like histograms can be detached from a file with the SetDirectory method. This will leave the object untouched so that it can be accessed after the end of the context: import ROOT; from ROOT import TFile; with TFile(""file1.root"", ""read"") as infile:; hin = infile.Get(""myhisto""); hin.SetDirectory(ROOT.nullptr); ; # Use the histogram afterwards; print(hin.GetName()); NoteThe TFile::Close method automatically sets the current directory in the program to the gROOT object. If you want to restore the status of the current directory to some other file that was opened prior to the with statement, you can use the context manager functionality offered by TContext. Definition at line 53 of file TFile.h. Classes; struct  InfoListRet;  Simple struct of the return value of GetStreamerInfoListImpl. More...;  . Public Types; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   k",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:11247,Security,access,access,11247,"eader starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; virtual Long64_t GetSize () const;  Returns the current file size. ;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; TClass * IsA () const override;  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first, Long64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, const char *classes=""*"", Option_t *option=""new"");  Generate source code necessary to access the objects stored in the file. ;  ; virtual void Map ();  ; virtual void Map (Option_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TPr",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:12538,Security,access,access,12538," virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void ResetErrno () const;  Method resetting the errno. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Lo",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:23989,Security,hash,hash,23989," std::enable_if_t< std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:44282,Security,hash,hashes,44282,"bjects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . Private Member Functions;  TFile (const TFile &)=delete;  ; void operator= (const TFile &)=delete;  . Static Private Member Functions; static void CpProgress (Long64_t bytesread, Long64_t size, TStopwatch &watch);  Print file copy progress. ;  ; static TFile * OpenFromCache (const char *name, Option_t *="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Open a file for reading through the file cache. ;  . Friends; class TBasket;  ; class TDirectoryFile;  ; class TFilePrefetch;  . Additional Inherited Members;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:48054,Security,access,access,48054,"h. Constructor & Destructor Documentation. ◆ TFile() [1/3]. TFile::TFile ; (; const TFile & ; ). privatedelete . ◆ TFile() [2/3]. TFile::TFile ; (; ). File default Constructor. ; Definition at line 201 of file TFile.cxx. ◆ TFile() [3/3]. TFile::TFile ; (; const char * ; fname1, . Option_t * ; option = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault . ). Opens or creates a local ROOT file. ; Parameters. [in]fname1The name of the file ; [in]optionSpecifies the mode in which the file is opened ; [in]ftitleThe title of the file ; [in]compressSpecifies the compression algorithm and level. It is recommended to specify fname1 as ""<file>.root"". The suffix "".root"" will be used by object browsers to automatically identify the file as a ROOT file. If the constructor fails in any way IsZombie() will return true. Use IsOpen() to check if the file is (still) open. To open non-local files use the static TFile::Open() method, that will take care of opening the files using the correct remote file access plugin. Option Description . NEW or CREATE Create a new file and open it for writing, if the file already exists the file is not opened. . RECREATE Create a new file, if the file already exists it will be overwritten. . UPDATE Open an existing file for writing. If no file exists, it is created. . READ Open an existing file for reading (default). . NET Used by derived remote file access classes, not a user callable option. . WEB Used by derived remote http access class, not a user callable option. . READ_WITHOUT_GLOBALREGISTRATION Used by TTreeProcessorMT, not a user callable option. . If option = """" (default), READ is assumed. The file can be specified as a URL of the form: file:///user/rdm/bla.root or file:/user/rdm/bla.root; The file can also be a member of an archive, in which case it is specified as: multi.zip#file.root or multi.zip#0; which will open file.root which is a member of the file multi.zip archive or membe",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:48443,Security,access,access,48443,"e. ; Parameters. [in]fname1The name of the file ; [in]optionSpecifies the mode in which the file is opened ; [in]ftitleThe title of the file ; [in]compressSpecifies the compression algorithm and level. It is recommended to specify fname1 as ""<file>.root"". The suffix "".root"" will be used by object browsers to automatically identify the file as a ROOT file. If the constructor fails in any way IsZombie() will return true. Use IsOpen() to check if the file is (still) open. To open non-local files use the static TFile::Open() method, that will take care of opening the files using the correct remote file access plugin. Option Description . NEW or CREATE Create a new file and open it for writing, if the file already exists the file is not opened. . RECREATE Create a new file, if the file already exists it will be overwritten. . UPDATE Open an existing file for writing. If no file exists, it is created. . READ Open an existing file for reading (default). . NET Used by derived remote file access classes, not a user callable option. . WEB Used by derived remote http access class, not a user callable option. . READ_WITHOUT_GLOBALREGISTRATION Used by TTreeProcessorMT, not a user callable option. . If option = """" (default), READ is assumed. The file can be specified as a URL of the form: file:///user/rdm/bla.root or file:/user/rdm/bla.root; The file can also be a member of an archive, in which case it is specified as: multi.zip#file.root or multi.zip#0; which will open file.root which is a member of the file multi.zip archive or member 1 from the archive. For more on archive file support see the TArchiveFile class. TFile and its remote access plugins can also be used to open any file, i.e. also non ROOT files, using: file.tar?filetype=raw; This is convenient because the many remote file access plugins allow easy access to/from the many different mass storage systems. The title of the file (ftitle) will be shown by the ROOT browsers. A ROOT file (like a Unix file system) may cont",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:48521,Security,access,access,48521,"e in which the file is opened ; [in]ftitleThe title of the file ; [in]compressSpecifies the compression algorithm and level. It is recommended to specify fname1 as ""<file>.root"". The suffix "".root"" will be used by object browsers to automatically identify the file as a ROOT file. If the constructor fails in any way IsZombie() will return true. Use IsOpen() to check if the file is (still) open. To open non-local files use the static TFile::Open() method, that will take care of opening the files using the correct remote file access plugin. Option Description . NEW or CREATE Create a new file and open it for writing, if the file already exists the file is not opened. . RECREATE Create a new file, if the file already exists it will be overwritten. . UPDATE Open an existing file for writing. If no file exists, it is created. . READ Open an existing file for reading (default). . NET Used by derived remote file access classes, not a user callable option. . WEB Used by derived remote http access class, not a user callable option. . READ_WITHOUT_GLOBALREGISTRATION Used by TTreeProcessorMT, not a user callable option. . If option = """" (default), READ is assumed. The file can be specified as a URL of the form: file:///user/rdm/bla.root or file:/user/rdm/bla.root; The file can also be a member of an archive, in which case it is specified as: multi.zip#file.root or multi.zip#0; which will open file.root which is a member of the file multi.zip archive or member 1 from the archive. For more on archive file support see the TArchiveFile class. TFile and its remote access plugins can also be used to open any file, i.e. also non ROOT files, using: file.tar?filetype=raw; This is convenient because the many remote file access plugins allow easy access to/from the many different mass storage systems. The title of the file (ftitle) will be shown by the ROOT browsers. A ROOT file (like a Unix file system) may contain objects and directories. There are no restrictions for the number of leve",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:49099,Security,access,access,49099,"ew file and open it for writing, if the file already exists the file is not opened. . RECREATE Create a new file, if the file already exists it will be overwritten. . UPDATE Open an existing file for writing. If no file exists, it is created. . READ Open an existing file for reading (default). . NET Used by derived remote file access classes, not a user callable option. . WEB Used by derived remote http access class, not a user callable option. . READ_WITHOUT_GLOBALREGISTRATION Used by TTreeProcessorMT, not a user callable option. . If option = """" (default), READ is assumed. The file can be specified as a URL of the form: file:///user/rdm/bla.root or file:/user/rdm/bla.root; The file can also be a member of an archive, in which case it is specified as: multi.zip#file.root or multi.zip#0; which will open file.root which is a member of the file multi.zip archive or member 1 from the archive. For more on archive file support see the TArchiveFile class. TFile and its remote access plugins can also be used to open any file, i.e. also non ROOT files, using: file.tar?filetype=raw; This is convenient because the many remote file access plugins allow easy access to/from the many different mass storage systems. The title of the file (ftitle) will be shown by the ROOT browsers. A ROOT file (like a Unix file system) may contain objects and directories. There are no restrictions for the number of levels of directories. A ROOT file is designed such that one can write in the file in pure sequential mode (case of BATCH jobs). In this case, the file may be read sequentially again without using the file index written at the end of the file. In case of a job crash, all the information on the file is therefore protected. A ROOT file can be used interactively. In this case, one has the possibility to delete existing objects and add new ones. When an object is deleted from the file, the freed space is added into the FREE linked list (fFree). The FREE list consists of a chain of consecuti",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:49253,Security,access,access,49253,"ll be overwritten. . UPDATE Open an existing file for writing. If no file exists, it is created. . READ Open an existing file for reading (default). . NET Used by derived remote file access classes, not a user callable option. . WEB Used by derived remote http access class, not a user callable option. . READ_WITHOUT_GLOBALREGISTRATION Used by TTreeProcessorMT, not a user callable option. . If option = """" (default), READ is assumed. The file can be specified as a URL of the form: file:///user/rdm/bla.root or file:/user/rdm/bla.root; The file can also be a member of an archive, in which case it is specified as: multi.zip#file.root or multi.zip#0; which will open file.root which is a member of the file multi.zip archive or member 1 from the archive. For more on archive file support see the TArchiveFile class. TFile and its remote access plugins can also be used to open any file, i.e. also non ROOT files, using: file.tar?filetype=raw; This is convenient because the many remote file access plugins allow easy access to/from the many different mass storage systems. The title of the file (ftitle) will be shown by the ROOT browsers. A ROOT file (like a Unix file system) may contain objects and directories. There are no restrictions for the number of levels of directories. A ROOT file is designed such that one can write in the file in pure sequential mode (case of BATCH jobs). In this case, the file may be read sequentially again without using the file index written at the end of the file. In case of a job crash, all the information on the file is therefore protected. A ROOT file can be used interactively. In this case, one has the possibility to delete existing objects and add new ones. When an object is deleted from the file, the freed space is added into the FREE linked list (fFree). The FREE list consists of a chain of consecutive free segments on the file. At the same time, the first 4 bytes of the freed record on the file are overwritten by GAPSIZE where GAPSIZE = -(Numb",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:49279,Security,access,access,49279,"ll be overwritten. . UPDATE Open an existing file for writing. If no file exists, it is created. . READ Open an existing file for reading (default). . NET Used by derived remote file access classes, not a user callable option. . WEB Used by derived remote http access class, not a user callable option. . READ_WITHOUT_GLOBALREGISTRATION Used by TTreeProcessorMT, not a user callable option. . If option = """" (default), READ is assumed. The file can be specified as a URL of the form: file:///user/rdm/bla.root or file:/user/rdm/bla.root; The file can also be a member of an archive, in which case it is specified as: multi.zip#file.root or multi.zip#0; which will open file.root which is a member of the file multi.zip archive or member 1 from the archive. For more on archive file support see the TArchiveFile class. TFile and its remote access plugins can also be used to open any file, i.e. also non ROOT files, using: file.tar?filetype=raw; This is convenient because the many remote file access plugins allow easy access to/from the many different mass storage systems. The title of the file (ftitle) will be shown by the ROOT browsers. A ROOT file (like a Unix file system) may contain objects and directories. There are no restrictions for the number of levels of directories. A ROOT file is designed such that one can write in the file in pure sequential mode (case of BATCH jobs). In this case, the file may be read sequentially again without using the file index written at the end of the file. In case of a job crash, all the information on the file is therefore protected. A ROOT file can be used interactively. In this case, one has the possibility to delete existing objects and add new ones. When an object is deleted from the file, the freed space is added into the FREE linked list (fFree). The FREE list consists of a chain of consecutive free segments on the file. At the same time, the first 4 bytes of the freed record on the file are overwritten by GAPSIZE where GAPSIZE = -(Numb",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:70128,Security,access,access,70128,"ual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 253 of file TFile.h. ◆ GetSize(). Long64_t TFile::GetSize ; (; ); const. virtual . Returns the current file size. ; Returns -1 in case the file could not be stat'ed. ; Reimplemented in TDavixFile, TSQLFile, TXMLFile, TMemFile, TWebFile, and TNetXNGFile.; Definition at line 1347 of file TFile.cxx. ◆ GetStreamerInfoCache(). const TList * TFile::GetStreamerInfoCache ; (; ). Returns the cached list of StreamerInfos used in this file. ; Definition at line 1366 of file TFile.cxx. ◆ GetStreamerInfoList(). TList * TFile::GetStreamerInfoList ; (; ). finalvirtual . Read the list of TStreamerInfo objects written to this file. ; The function returns a TList. It is the user's responsibility to delete the list created by this function.; Note the list, in addition to TStreamerInfo object, contains sometimes a TList named 'listOfRules' and containing the schema evolution rules related to the file's content.; Using the list, one can access additional information, e.g.: TFile f(""myfile.root"");; auto list = f.GetStreamerInfoList();; auto info = dynamic_cast<TStreamerInfo*>(list->FindObject(""MyClass""));; if (info) auto classversionid = info->GetClassVersion();; delete list;; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStreamerInfo::GetClassVersionInt_t GetClassVersion() const overrideDefinition TStreamerInfo.h:202. Definition at line 1445 of file TFile.cxx. ◆ GetStreamerInfoListImpl(). TFile::InfoListRet TFile::GetStreamerInfoListImpl ; (; bool ; lookupSICache). protectedvirtual . See documentation of GetStreamerInfoList for more details. ; This is an internal method which returns the list of streamer infos and also information about the success of the operation. ; Reimplemented in TXMLFile, and TSQLFile.; Definition at line 1376 of file TFile.cxx. ◆ GetType(). TFile::EFileType TFile::GetType ; (; const char * ; name, . Option_t * ; option = """", . TString * ; prefix = nullptr . ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:74281,Security,access,access,74281,"ntents. ; Indentation is used to identify the file tree. Subdirectories are listed first, then objects in memory, then objects on the file. ; Reimplemented from TDirectoryFile.; Definition at line 1457 of file TFile.cxx. ◆ MakeFree(). void TFile::MakeFree ; (; Long64_t ; first, . Long64_t ; last . ). virtual . Mark unused bytes on the file. ; The list of free segments is in the fFree linked list. When an object is deleted from the file, the freed space is added into the FREE linked list (fFree). The FREE list consists of a chain of consecutive free segments on the file. At the same time, the first 4 bytes of the freed record on the file are overwritten by GAPSIZE where GAPSIZE = -(Number of bytes occupied by the record). ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1484 of file TFile.cxx. ◆ MakeProject(). void TFile::MakeProject ; (; const char * ; dirname, . const char * ; classes = ""*"", . Option_t * ; option = ""new"" . ). virtual . Generate source code necessary to access the objects stored in the file. ; Generate code in directory dirname for all classes specified in argument classes If classes = ""*"" (default and currently the only supported value), the function generates an include file for each class in the StreamerInfo list for which a TClass object does not exist.; The code generated includes:; dirnameProjectHeaders.h, which contains one #include statement per generated header file; dirnameProjectSource.cxx,which contains all the constructors and destructors implementation. and one header per class that is not nested inside another class. The header file name is the fully qualified name of the class after all the special characters ""<>,:"" are replaced by underscored. For example for std::pair<edm::Vertex,int> the file name is pair_edm__Vertex_int_.h. In the generated classes, map, multimap when the first template parameter is a class are replaced by a vector of pair. set and multiset when the tempalte parameter is a class are replaced by a vec",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:90348,Security,access,access,90348,"y read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or wrong input arguments) and -1 in case of failure, in which case the file cannot be used anymore. The current directory (gFile) is changed to this file. ; Reimplemented in TSQLFile, TXMLFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 2162 of file TFile.cxx. ◆ ResetErrno(). void TFile::ResetErrno ; (; ); const. virtual . Method resetting the errno. ; Reimplemented in TSQLFile, TXMLFile, TDCacheFile, and TMemFile.; Definition at line 1254 of file TFile.cxx. ◆ Seek(). void TFile::Seek ; (; Long64_t ; offset, . ERelativeTo ; pos = kBeg . ). virtual . Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ; Reimplemented in TDavixFile, TNetFile, TW",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:107385,Security,hash,hashes,107385," Bool_t TFile::fgOnlyStaged = kFALSE. staticprotected . Before the file is opened, it is checked, that the file is staged, if not, the open fails. ; Definition at line 128 of file TFile.h. ◆ fgOpenTimeout. UInt_t TFile::fgOpenTimeout = TFile::kEternalTimeout. staticprotected . Timeout for open operations in ms - 0 corresponds to blocking i/o. ; Definition at line 127 of file TFile.h. ◆ fgReadaheadSize. Int_t TFile::fgReadaheadSize = 256000. staticprotected . Readahead buffer size. ; Definition at line 134 of file TFile.h. ◆ fgReadCalls. std::atomic< Int_t > TFile::fgReadCalls {0}. staticprotected . Number of bytes read from all TFile objects. ; Definition at line 133 of file TFile.h. ◆ fgReadInfo. Bool_t TFile::fgReadInfo = kTRUE. staticprotected . if true (default) ReadStreamerInfo is called when opening a file ; Definition at line 135 of file TFile.h. ◆ fgTsSIHashes. ROOT::Internal::RConcurrentHashColl TFile::fgTsSIHashes. staticprotected . !TS Set of hashes built from read streamer infos ; Definition at line 120 of file TFile.h. ◆ fInfoCache. TList* TFile::fInfoCache {nullptr}. protected . !Cached list of the streamer infos in this file ; Definition at line 112 of file TFile.h. ◆ fInitDone. Bool_t TFile::fInitDone {kFALSE}. protected . !True if the file has been initialized ; Definition at line 105 of file TFile.h. ◆ fIsArchive. Bool_t TFile::fIsArchive {kFALSE}. protected . !True if this is a pure archive file ; Definition at line 102 of file TFile.h. ◆ fIsPcmFile. Bool_t TFile::fIsPcmFile {kFALSE}. protected . !True if the file is a ROOT pcm file. ; Definition at line 107 of file TFile.h. ◆ fIsRootFile. Bool_t TFile::fIsRootFile {kTRUE}. protected . !True is this is a ROOT file, raw file otherwise ; Definition at line 104 of file TFile.h. ◆ fMustFlush. Bool_t TFile::fMustFlush {kTRUE}. protected . !True if the file buffers must be flushed ; Definition at line 106 of file TFile.h. ◆ fNbytesFree. Int_t TFile::fNbytesFree {0}. protected . Number of bytes for free s",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:552,Testability,log,logical,552,". ROOT: TFile Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; TFile Class ReferenceInput/Output Library. ; A ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-like logical structure, possibly including subdirectory hierarchies. ; See alsoInput/Output Library . ROOT files layout (or io/doc/TFile folder in your codebase). ROOT file data format specification. A ROOT file is composed of a header, followed by consecutive data records (TKey instances) with a well defined format.; The first data record starts at byte fBEGIN (currently set to kBEGIN). Bytes 1->kBEGIN contain the file description, when fVersion >= 1000000 it is a large file (> 2 GB) and the offsets will be 8 bytes long and fUnits will be set to 8:. Byte Range Record Name Description . 1->4 ""root"" Root file identifier . 5->8 fVersion File format version . 9->12 fBEGIN Pointer to first data record . 13->16 [13->20] fEND Pointer to first free word at the EOF . 17->20 [21->28] fSeekFree Pointer to FREE data record . 21->24 [29->32] fNbytesFree Number of bytes in FREE data record . 25->28 [33->36] nfree Number of free data records . 29->32 [37->40] fNbytesName Number of bytes in TNamed at creation time . 33->33 [41->41] fUnits Number of bytes for file pointers . 34->37 [42->45] fCompress Compression level and algorithm . 38->41 [46->53] fSeekInfo Pointer to TStreamerInfo record . 42->45 [54->57] fNbytesInfo Number of bytes in TStreamerInfo record . 46->63 [58->75] fUUID Universal Unique ID . For the purpose of magic bytes in the context of ROOT files' MIME definition, the following additional requirements are introduced:; The value o",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:10181,Testability,log,logical,10181,"es to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; virtual Long64_t GetSize () const;  Returns the current file size. ;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; TClass * IsA () const override;  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; vo",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:52274,Testability,log,logical,52274,"and other objects written after the setting is changed. In case the file does not exist or is not a valid ROOT file, it is made a Zombie. One can detect this situation with a code like: TFile f(""file.root"");; if (f.IsZombie()) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; f#define f(i)Definition RSha256.hxx:104; If you open a file instead with TFile::Open(""file.root"") use rather the following code as a nullptr is returned. TFile* f = TFile::Open(""file.root"");; if (!f) {; std::cout << ""Error opening file"" << std::endl;; exit(-1);; }; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; When opening the file, the system checks the validity of this directory. If something wrong is detected, an automatic Recovery is performed. In this case, the file is scanned sequentially reading all logical blocks and attempting to rebuild a correct directory (see TFile::Recover). One can disable the automatic recovery procedure when reading one or more files by setting the environment variable ""TFile.Recover: 0"" in the system.rootrc file.; A bit TFile::kReproducible can be enabled specifying the ""reproducible"" url option when creating the file: TFile *f = TFile::Open(""name.root?reproducible"",""RECREATE"",""File title"");; Unlike regular TFiles, the content of such file has reproducible binary content when writing exactly same data. This achieved by writing pre-defined values for creation and modification date of TKey/TDirectory objects and null value for TUUID objects inside TFile. As drawback, TRef objects stored in such file cannot be read correctly.; In case the name of the file is not reproducible either (in case of creating temporary filenames) a value can be passed to the reproducible option to replace the name stored in the file. TFile *f = TFile::Open(""tmpname.root?reproducible=fixednam",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:68131,Testability,log,logical,68131,"(). UInt_t TFile::GetOpenTimeout ; (; ). static . Returns open timeout (in ms). ; Definition at line 4734 of file TFile.cxx. ◆ GetOption(). Option_t * TFile::GetOption ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 240 of file TFile.h. ◆ GetReadaheadSize(). Int_t TFile::GetReadaheadSize ; (; ). static . Static function returning the readahead buffer size. ; Definition at line 4599 of file TFile.cxx. ◆ GetReadCalls(). virtual Int_t TFile::GetReadCalls ; (; ); const. inlinevirtual . Definition at line 244 of file TFile.h. ◆ GetReadStreamerInfo(). Bool_t TFile::GetReadStreamerInfo ; (; ). static . If the streamerinfos are to be read at file opening. ; See TFile::SetReadStreamerInfo for more documentation. ; Definition at line 3742 of file TFile.cxx. ◆ GetRecordHeader(). Int_t TFile::GetRecordHeader ; (; char * ; buf, . Long64_t ; first, . Int_t ; maxbytes, . Int_t & ; nbytes, . Int_t & ; objlen, . Int_t & ; keylen . ). Read the logical record header starting at a certain postion. ; Parameters. [in]bufpointer to buffer ; [in]firstread offset ; [in]maxbytesBytes which are read into buf. ; [out]nbytesNumber of bytes in record if negative, this is a deleted record if 0, cannot read record, wrong value of argument first ; [out]objlenUncompressed object size ; [out]keylenLength of logical record header. The function reads nread bytes where nread is the minimum of maxbytes and the number of bytes before the end of file. The function returns nread. Note that the arguments objlen and keylen are returned only if maxbytes >=16 ; Definition at line 1301 of file TFile.cxx. ◆ GetRelOffset(). Long64_t TFile::GetRelOffset ; (; ); const. inline . Definition at line 251 of file TFile.h. ◆ GetSeekFree(). virtual Long64_t TFile::GetSeekFree ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 252 of file TFile.h. ◆ GetSeekInfo(). virtual Long64_t TFile::GetSeekInfo ; (; ); const. inlinevirtual . Reimplemented i",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:68485,Testability,log,logical,68485," at line 240 of file TFile.h. ◆ GetReadaheadSize(). Int_t TFile::GetReadaheadSize ; (; ). static . Static function returning the readahead buffer size. ; Definition at line 4599 of file TFile.cxx. ◆ GetReadCalls(). virtual Int_t TFile::GetReadCalls ; (; ); const. inlinevirtual . Definition at line 244 of file TFile.h. ◆ GetReadStreamerInfo(). Bool_t TFile::GetReadStreamerInfo ; (; ). static . If the streamerinfos are to be read at file opening. ; See TFile::SetReadStreamerInfo for more documentation. ; Definition at line 3742 of file TFile.cxx. ◆ GetRecordHeader(). Int_t TFile::GetRecordHeader ; (; char * ; buf, . Long64_t ; first, . Int_t ; maxbytes, . Int_t & ; nbytes, . Int_t & ; objlen, . Int_t & ; keylen . ). Read the logical record header starting at a certain postion. ; Parameters. [in]bufpointer to buffer ; [in]firstread offset ; [in]maxbytesBytes which are read into buf. ; [out]nbytesNumber of bytes in record if negative, this is a deleted record if 0, cannot read record, wrong value of argument first ; [out]objlenUncompressed object size ; [out]keylenLength of logical record header. The function reads nread bytes where nread is the minimum of maxbytes and the number of bytes before the end of file. The function returns nread. Note that the arguments objlen and keylen are returned only if maxbytes >=16 ; Definition at line 1301 of file TFile.cxx. ◆ GetRelOffset(). Long64_t TFile::GetRelOffset ; (; ); const. inline . Definition at line 251 of file TFile.h. ◆ GetSeekFree(). virtual Long64_t TFile::GetSeekFree ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 252 of file TFile.h. ◆ GetSeekInfo(). virtual Long64_t TFile::GetSeekInfo ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 253 of file TFile.h. ◆ GetSize(). Long64_t TFile::GetSize ; (; ); const. virtual . Returns the current file size. ; Returns -1 in case the file could not be stat'ed. ; Reimplemented in TDavixFile, TSQL",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:71261,Testability,test,testing,71261,"(list->FindObject(""MyClass""));; if (info) auto classversionid = info->GetClassVersion();; delete list;; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStreamerInfo::GetClassVersionInt_t GetClassVersion() const overrideDefinition TStreamerInfo.h:202. Definition at line 1445 of file TFile.cxx. ◆ GetStreamerInfoListImpl(). TFile::InfoListRet TFile::GetStreamerInfoListImpl ; (; bool ; lookupSICache). protectedvirtual . See documentation of GetStreamerInfoList for more details. ; This is an internal method which returns the list of streamer infos and also information about the success of the operation. ; Reimplemented in TXMLFile, and TSQLFile.; Definition at line 1376 of file TFile.cxx. ◆ GetType(). TFile::EFileType TFile::GetType ; (; const char * ; name, . Option_t * ; option = """", . TString * ; prefix = nullptr . ). static . Resolve the file type as a function of the protocol field in 'name'. ; If defined, the string 'prefix' is added when testing the locality of a 'name' with network-like structure (i.e. root://host//path); if the file is local, on return 'prefix' will contain the actual local path of the file. ; Definition at line 4821 of file TFile.cxx. ◆ GetVersion(). Int_t TFile::GetVersion ; (; ); const. inline . Definition at line 245 of file TFile.h. ◆ IncrementFileCounter(). void TFile::IncrementFileCounter ; (; ). static . Definition at line 4620 of file TFile.cxx. ◆ IncrementProcessIDs(). virtual void TFile::IncrementProcessIDs ; (; ). inlinevirtual . Definition at line 257 of file TFile.h. ◆ Init(). void TFile::Init ; (; Bool_t ; create). protectedvirtual . Initialize a TFile object. ; Parameters. [in]createCreate a new file. TFile implementations providing asynchronous open functionality need to override this method to run the appropriate checks before calling this standard initialization part. See TXNetFile::Init for an example. ; Reimplemented in TXNetFile, TNetFile, TNetXNGFile, TDavixFile, and TWebFile.; Definit",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:78761,Testability,log,logical,78761,"akeProjectParMake(). Int_t TFile::MakeProjectParMake ; (; const char * ; pack, . const char * ; filemake . ). protected . Create makefile at 'filemake' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on success, -1 on error. ; Definition at line 3364 of file TFile.cxx. ◆ MakeProjectParProofInf(). Int_t TFile::MakeProjectParProofInf ; (; const char * ; pack, . const char * ; proofinf . ). protected . Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ; Called by MakeProject when option 'par' is given. Return 0 on success, -1 on error. ; Definition at line 3486 of file TFile.cxx. ◆ Map() [1/2]. virtual void TFile::Map ; (; ). inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 267 of file TFile.h. ◆ Map() [2/2]. void TFile::Map ; (; Option_t * ; opt). virtual . List the contents of a file sequentially. ; For each logical record found, it prints: Date/Time Record_Adress Logical_Record_Length ClassName CompressionFactor; Example of output 20010404/150437 At:64 N=150 TFile; 20010404/150440 At:214 N=28326 TBasket CX = 1.13; 20010404/150440 At:28540 N=29616 TBasket CX = 1.08; 20010404/150440 At:58156 N=29640 TBasket CX = 1.08; 20010404/150440 At:87796 N=29076 TBasket CX = 1.10; 20010404/150440 At:116872 N=10151 TBasket CX = 3.15; 20010404/150441 At:127023 N=28341 TBasket CX = 1.13; 20010404/150441 At:155364 N=29594 TBasket CX = 1.08; 20010404/150441 At:184958 N=29616 TBasket CX = 1.08; 20010404/150441 At:214574 N=29075 TBasket CX = 1.10; 20010404/150441 At:243649 N=9583 TBasket CX = 3.34; 20010404/150442 At:253232 N=28324 TBasket CX = 1.13; 20010404/150442 At:281556 N=29641 TBasket CX = 1.08; 20010404/150442 At:311197 N=29633 TBasket CX = 1.08; 20010404/150442 At:340830 N=29091 TBasket CX = 1.10; 20010404/150442 At:369921 N=10341 TBasket CX = 3.09; 20010404/150442 At:380262 N=509 TH1F CX = 1.93; 20010404/150442 At:380771 N=1769 TH2F CX = 4.32; 20010404/150442 At:382540 N=1849 TProfile CX = 1.65;",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89418,Testability,test,test,89418,"om this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89635,Testability,test,test,89635,"amerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or w",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:76979,Usability,clear,clear,76979,"genreflex Use genreflex rather than rootcint to generate the dictionary. . par Create a PAR file with the minimal set of code needed to read the content of the ROOT file. The name of the PAR file is basename(dirname), with extension '.par' enforced; the PAR file will be created at dirname(dirname). . If, in addition to one of the 3 above options, the option ""+"" is specified, the function will generate:; a script called MAKEP to build the shared lib; a dirnameLinkDef.h file; rootcint will be run to generate a dirnameProjectDict.cxx file; dirnameProjectDict.cxx will be compiled with the current options in compiledata.h; a shared lib dirname.so will be created. If the option ""++"" is specified, the generated shared lib is dynamically linked with the current executable module. If the option ""+"" and ""nocompile"" are specified, the utility files are generated as in the option ""+"" but they are not executed. Example: file.MakeProject(""demo"",""*"",""recreate++"");; creates a new directory demo unless it already exist; clear the previous directory content; generate the xxx.h files for all classes xxx found in this file and not yet known to the CINT dictionary.; creates the build script MAKEP; creates a LinkDef.h file; runs rootcint generating demoProjectDict.cxx; compiles demoProjectDict.cxx into demoProjectDict.o; generates a shared lib demo.so; dynamically links the shared lib demo.so to the executable If only the option ""+"" had been specified, one can still link the shared lib to the current executable module with: gSystem->load(""demo/demo.so"");; The following feature is not yet enabled: One can restrict the list of classes to be generated by using expressions like: classes = ""Ali*"" generate code only for classes starting with Ali; classes = ""myClass"" generate code for class MyClass only.; . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2726 of file TFile.cxx. ◆ MakeProjectParMake(). Int_t TFile::MakeProjectParMake ; (; const char * ; pack, . const char * ; filema",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89314,Usability,usab,usable,89314,"ReadStreamerInfo(). void TFile::ReadStreamerInfo ; (; ). virtual . Read the list of StreamerInfo from this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reope",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTFile.html:89391,Usability,usab,usable,89391,"om this file. ; The key with name holding the list of TStreamerInfo objects is read. The corresponding TClass objects are updated. Note that this function is not called if the static member fgReadInfo is false. (see TFile::SetReadStreamerInfo) ; Definition at line 3605 of file TFile.cxx. ◆ Recover(). Int_t TFile::Recover ; (; ). virtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE ",MatchSource.WIKI,doc/v632/classTFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTFile.html
https://root.cern/doc/v632/classTHtml.html:22627,Availability,avail,available,22627,"nst TString & GetModuleDocPath () const;  ; void GetModuleMacroPath (const TString &module, TString &out_path) const;  ; virtual void GetModuleNameForClass (TString &module, TClass *cl) const;  Return the module name for a given class. ;  ; const TString & GetOutputDir (Bool_t createDir=kTRUE) const;  Return the output directory as set by SetOutputDir(). ;  ; const TPathDefinition & GetPathDefinition () const;  Return the TModuleDefinition (or derived) object as set by SetModuleDefinition(); create and return a TModuleDefinition object if none was set. ;  ; const PathInfo_t & GetPathInfo () const;  ; const TString & GetProductName () const;  ; const TString & GetSearchEngine () const;  ; const TString & GetSearchStemURL () const;  ; const char * GetURL (const char *lib=0) const;  Get the documentation URL for library lib. ;  ; const TString & GetViewCVS () const;  ; const TString & GetWikiURL () const;  ; const TString & GetXwho () const;  ; Bool_t HaveDot ();  Check whether dot is available in $PATH or in the directory set by SetDotPath() ;  ; void HelperDeleted (THelperBase *who);  Inform the THtml object that one of its helper objects was deleted. ;  ; TClass * IsA () const override;  ; Bool_t IsBatch () const;  ; void MakeAll (Bool_t force=kFALSE, const char *filter=""*"", int numthreads=1);  Produce documentation for all the classes specified in the filter (by default ""*"") To process all classes having a name starting with XX, do: html.MakeAll(kFALSE,""XX*""); If force=kFALSE (default), only the classes that have been modified since the previous call to this function will be generated. ;  ; void MakeClass (const char *className, Bool_t force=kFALSE);  Make HTML files for a single class. ;  ; void MakeIndex (const char *filter=""*"");  Create the index files for the product, modules, all types, etc. ;  ; void MakeTree (const char *className, Bool_t force=kFALSE);  Make an inheritance tree. ;  ; void ReplaceSpecialChars (std::ostream &, const char *);  ; void SetAuthorT",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:24432,Availability,avail,available,24432,"char *filter=""*"");  Create the index files for the product, modules, all types, etc. ;  ; void MakeTree (const char *className, Bool_t force=kFALSE);  Make an inheritance tree. ;  ; void ReplaceSpecialChars (std::ostream &, const char *);  ; void SetAuthorTag (const char *tag);  ; void SetBatch (Bool_t batch=kTRUE);  ; void SetCharset (const char *charset);  ; void SetClassDocTag (const char *tag);  ; void SetCopyrightTag (const char *tag);  ; void SetCounterFormat (const char *format);  ; void SetDeclFileName (TClass *cl, const char *filename);  Explicitly set a decl file name for TClass cl. ;  ; void SetDocPath (const char *path);  ; void SetDocStyle (const char *style);  ; void SetDotDir (const char *dir);  ; void SetEscape (char='\\');  ; void SetEtcDir (const char *dir);  ; void SetFileDefinition (const TFileDefinition &fd);  Set the file defining object to be used; can also be a user derived object (a la traits). ;  ; void SetFooter (const char *file);  ; void SetFoundDot (Bool_t found=kTRUE);  Set whether ""dot"" (a GraphViz utility) is available. ;  ; void SetHeader (const char *file);  ; void SetHomepage (const char *url);  ; void SetImplFileName (TClass *cl, const char *filename);  Explicitly set a impl file name for TClass cl. ;  ; void SetIncludePath (const char *dir);  ; void SetInputDir (const char *dir);  Set the directory containing the source files. ;  ; void SetLastUpdateTag (const char *tag);  ; void SetLibURL (const char *lib, const char *url);  ; void SetMacroPath (const char *path);  ; void SetModuleDefinition (const TModuleDefinition &md);  Set the module defining object to be used; can also be a user derived object (a la traits). ;  ; void SetOutputDir (const char *dir);  Set the directory where the HTML pages should be written to. ;  ; void SetPathDefinition (const TPathDefinition &pd);  Set the path defining object to be used; can also be a user derived object (a la traits). ;  ; void SetProductName (const char *product);  ; void SetRootURL (",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:27705,Availability,error,error,27705,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:27794,Availability,error,error,27794,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:27949,Availability,error,error,27949,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:28246,Availability,error,error,28246,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:32810,Availability,error,error,32810," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const char * GetDirDelimiter ();  ; static Bool_t IsNamespace (const TClass *cl);  Check whether cl is a namespace. ;  ; static void LoadAllL",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:35293,Availability,avail,available,35293,";  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void CreateJavascript () const;  Write the default ROOT style sheet. ;  ; void CreateListOfClasses (const char *filter);  Create the list of all known classes. ;  ; void CreateListOfTypes ();  Create index of all data types and a page for each typedef-to-class. ;  ; virtual void CreateStyleSheet () const;  Write the default ROOT style sheet. ;  ; virtual bool GetDeclImplFileName (TClass *cl, bool filesys, bool decl, TString &out_name) const;  Combined implementation for GetDeclFileName(), GetImplFileName(): Return declaration / implementation file name (depending on decl); return the full path if filesys is true. ;  ; TClassDocInfo * GetNextClass ();  Return the next class to be generated for MakeClassThreaded. ;  ; void MakeClass (void *cdi, Bool_t force=kFALSE);  Make HTML files for a single class. ;  ; void SetLocalFiles () const;  Fill the files available in the file system below fPathInfo.fInputPath. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void * MakeClassThreaded (void *info);  Entry point of worker threads for multi-threaded MakeAll(). ;  . Protected Attributes; Bool_t fBatch;  ; TString fCounter;  ; TString fCounterFormat;  ; DocEntityInfo_t fDocEntityInfo;  ; DocSyntax_t fDocSyntax;  ; TFileDefinition * fFileDef;  ; TGClient * fGClient;  ; LinkInfo_t fLinkInfo;  ; TFileSysDB * fLocalFiles;  ; TVirtualMutex * fMakeClassMutex;  ; TModuleDefinition * fModuleDef;  ; OutputStyle_t fOutputStyle;  ; TPathDefinition * fPathDef;  ; PathInfo_t fPathInfo;  ; TString fProductName;  ; Int_t fThreadedClassCount;  ; TIter * fThreadedClassIter;  . Additional Inherited Members;  Protected Types inherited from TObject; enu",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:36843,Availability,error,error,36843,"ntax;  ; TFileDefinition * fFileDef;  ; TGClient * fGClient;  ; LinkInfo_t fLinkInfo;  ; TFileSysDB * fLocalFiles;  ; TVirtualMutex * fMakeClassMutex;  ; TModuleDefinition * fModuleDef;  ; OutputStyle_t fOutputStyle;  ; TPathDefinition * fPathDef;  ; PathInfo_t fPathInfo;  ; TString fProductName;  ; Int_t fThreadedClassCount;  ; TIter * fThreadedClassIter;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <THtml.h>. Inheritance diagram for THtml:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EConvertOutput. enum THtml::EConvertOutput. EnumeratorkNoOutput ; kInterpretedOutput ; kCompiledOutput ; kForceOutput ; kSeparateProcessOutput . Definition at line 233 of file THtml.h. Constructor & Destructor Documentation. ◆ THtml(). THtml::THtml ; (; ). Create a THtml object. ; In case output directory does not exist an error will be printed and gHtml stays 0 also zombie bit will be set. ; Definition at line 1221 of file THtml.cxx. ◆ ~THtml(). THtml::~THtml ; (; ). override . Default destructor. ; Definition at line 1263 of file THtml.cxx. Member Function Documentation. ◆ AddMacroPath(). void THtml::AddMacroPath ; (; const char * ; path). Add path to the directories to be searched for macro files that are to be executed via the TDocMacroDirective (""Begin_Macro""/""End_Macro""); relative to the source file that the directive is run on. ; Definition at line 1283 of file THtml.cxx. ◆ Class(). static TClass * THtml::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * THtml::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t THtml::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 426 of file THtml.h. ◆ Convert(). void THtml::Convert ; (; const char * ; filename, . const char * ; ",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:47833,Availability,avail,available,47833,"94 of file THtml.h. ◆ GetSearchEngine(). const TString & THtml::GetSearchEngine ; (; ); const. inline . Definition at line 312 of file THtml.h. ◆ GetSearchStemURL(). const TString & THtml::GetSearchStemURL ; (; ); const. inline . Definition at line 311 of file THtml.h. ◆ GetURL(). const char * THtml::GetURL ; (; const char * ; lib = 0); const. Get the documentation URL for library lib. ; If lib == 0 or no documentation URL has been set for lib, return the ROOT documentation URL. The return value is always != 0. ; Definition at line 1395 of file THtml.cxx. ◆ GetViewCVS(). const TString & THtml::GetViewCVS ; (; ); const. inline . Definition at line 313 of file THtml.h. ◆ GetWikiURL(). const TString & THtml::GetWikiURL ; (; ); const. inline . Definition at line 314 of file THtml.h. ◆ GetXwho(). const TString & THtml::GetXwho ; (; ); const. inline . Definition at line 301 of file THtml.h. ◆ HaveDot(). Bool_t THtml::HaveDot ; (; ). Check whether dot is available in $PATH or in the directory set by SetDotPath() ; Definition at line 1411 of file THtml.cxx. ◆ HelperDeleted(). void THtml::HelperDeleted ; (; THtml::THelperBase * ; who). Inform the THtml object that one of its helper objects was deleted. ; Called by THtml::HelperBase::~HelperBase(). ; Definition at line 1438 of file THtml.cxx. ◆ IsA(). TClass * THtml::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 426 of file THtml.h. ◆ IsBatch(). Bool_t THtml::IsBatch ; (; ); const. inline . Definition at line 353 of file THtml.h. ◆ IsNamespace(). Bool_t THtml::IsNamespace ; (; const TClass * ; cl). static . Check whether cl is a namespace. ; Definition at line 2202 of file THtml.cxx. ◆ LoadAllLibs(). void THtml::LoadAllLibs ; (; ). static . Load all libraries known to ROOT via the rootmap system. ; Definition at line 2210 of file THtml.cxx. ◆ MakeAll(). void THtml::MakeAll ; (; Bool_t ; force = kFALSE, . const char * ; filter = ""*"", . int ; ",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:50230,Availability,avail,available,50230,"RUE, all classes passing the filter will be processed. If numthreads is != -1, use numthreads threads, else decide automatically based on the number of CPUs. ; Definition at line 2226 of file THtml.cxx. ◆ MakeClass() [1/2]. void THtml::MakeClass ; (; const char * ; className, . Bool_t ; force = kFALSE . ). Make HTML files for a single class. ; Input: className - name of the class to process ; Definition at line 2292 of file THtml.cxx. ◆ MakeClass() [2/2]. void THtml::MakeClass ; (; void * ; cdi_void, . Bool_t ; force = kFALSE . ). protected . Make HTML files for a single class. ; Input: cdi - doc info for class to process ; Definition at line 2313 of file THtml.cxx. ◆ MakeClassThreaded(). void * THtml::MakeClassThreaded ; (; void * ; info). staticprotected . Entry point of worker threads for multi-threaded MakeAll(). ; info points to an (internal) THtmlThreadInfo object containing the current THtml object, and whether ""force"" was passed to MakeAll(). The thread will poll GetNextClass() until no further class is available. ; Definition at line 2353 of file THtml.cxx. ◆ MakeIndex(). void THtml::MakeIndex ; (; const char * ; filter = ""*""). Create the index files for the product, modules, all types, etc. ; By default all classes are indexed (if filter=""*""); to generate an index for all classes starting with ""XX"", do html.MakeIndex(""XX*""); ; Definition at line 2369 of file THtml.cxx. ◆ MakeTree(). void THtml::MakeTree ; (; const char * ; className, . Bool_t ; force = kFALSE . ). Make an inheritance tree. ; Input: className - name of the class to process ; Definition at line 2393 of file THtml.cxx. ◆ ReplaceSpecialChars(). void THtml::ReplaceSpecialChars ; (; std::ostream & ; , . const char * ;  . ). inline . Definition at line 355 of file THtml.h. ◆ SetAuthorTag(). void THtml::SetAuthorTag ; (; const char * ; tag). inline . Definition at line 277 of file THtml.h. ◆ SetBatch(). void THtml::SetBatch ; (; Bool_t ; batch = kTRUE). inline . Definition at line 352 of file THtml",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:52907,Availability,avail,available,52907,"x. ◆ SetDocPath(). void THtml::SetDocPath ; (; const char * ; path). inline . Definition at line 268 of file THtml.h. ◆ SetDocStyle(). void THtml::SetDocStyle ; (; const char * ; style). inline . Definition at line 288 of file THtml.h. ◆ SetDotDir(). void THtml::SetDotDir ; (; const char * ; dir). inline . Definition at line 269 of file THtml.h. ◆ SetEscape(). void THtml::SetEscape ; (; char ; = '\\'). inline . Definition at line 358 of file THtml.h. ◆ SetEtcDir(). void THtml::SetEtcDir ; (; const char * ; dir). inline . Definition at line 267 of file THtml.h. ◆ SetFileDefinition(). void THtml::SetFileDefinition ; (; const TFileDefinition & ; fd). Set the file defining object to be used; can also be a user derived object (a la traits). ; Definition at line 2440 of file THtml.cxx. ◆ SetFooter(). void THtml::SetFooter ; (; const char * ; file). inline . Definition at line 281 of file THtml.h. ◆ SetFoundDot(). void THtml::SetFoundDot ; (; Bool_t ; found = kTRUE). Set whether ""dot"" (a GraphViz utility) is available. ; Definition at line 2410 of file THtml.cxx. ◆ SetHeader(). void THtml::SetHeader ; (; const char * ; file). inline . Definition at line 280 of file THtml.h. ◆ SetHomepage(). void THtml::SetHomepage ; (; const char * ; url). inline . Definition at line 282 of file THtml.h. ◆ SetImplFileName(). void THtml::SetImplFileName ; (; TClass * ; cl, . const char * ; filename . ). Explicitly set a impl file name for TClass cl. ; Definition at line 2507 of file THtml.cxx. ◆ SetIncludePath(). void THtml::SetIncludePath ; (; const char * ; dir). inline . Definition at line 266 of file THtml.h. ◆ SetInputDir(). void THtml::SetInputDir ; (; const char * ; dir). Set the directory containing the source files. ; The source file for a class MyClass will be searched by prepending dir to the value of MyClass::Class()->GetImplFileName() - which can contain directory information! Also resets the class structure, in case new files can be found after this call. ; Definition at line 2",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:54264,Availability,avail,available,54264,"filename . ). Explicitly set a impl file name for TClass cl. ; Definition at line 2507 of file THtml.cxx. ◆ SetIncludePath(). void THtml::SetIncludePath ; (; const char * ; dir). inline . Definition at line 266 of file THtml.h. ◆ SetInputDir(). void THtml::SetInputDir ; (; const char * ; dir). Set the directory containing the source files. ; The source file for a class MyClass will be searched by prepending dir to the value of MyClass::Class()->GetImplFileName() - which can contain directory information! Also resets the class structure, in case new files can be found after this call. ; Definition at line 2469 of file THtml.cxx. ◆ SetLastUpdateTag(). void THtml::SetLastUpdateTag ; (; const char * ; tag). inline . Definition at line 278 of file THtml.h. ◆ SetLibURL(). void THtml::SetLibURL ; (; const char * ; lib, . const char * ; url . ). inline . Definition at line 271 of file THtml.h. ◆ SetLocalFiles(). void THtml::SetLocalFiles ; (; ); const. protected . Fill the files available in the file system below fPathInfo.fInputPath. ; Definition at line 2418 of file THtml.cxx. ◆ SetMacroPath(). void THtml::SetMacroPath ; (; const char * ; path). inline . Definition at line 273 of file THtml.h. ◆ SetModuleDefinition(). void THtml::SetModuleDefinition ; (; const TModuleDefinition & ; md). Set the module defining object to be used; can also be a user derived object (a la traits). ; Definition at line 2428 of file THtml.cxx. ◆ SetOutputDir(). void THtml::SetOutputDir ; (; const char * ; dir). Set the directory where the HTML pages should be written to. ; If the directory does not exist it will be created when needed. ; Definition at line 2483 of file THtml.cxx. ◆ SetPathDefinition(). void THtml::SetPathDefinition ; (; const TPathDefinition & ; pd). Set the path defining object to be used; can also be a user derived object (a la traits). ; Definition at line 2452 of file THtml.cxx. ◆ SetProductName(). void THtml::SetProductName ; (; const char * ; product). inline . Definition ",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:2454,Deployability,configurat,configuration,2454,"EGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes; or to run on just a few classes: ; root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only; To ""beautify"" (i.e. create links to documentation for class names etc) some text file or macro, use: ; root[] html.Convert( ""hsimple.C"", ""Histogram example"" ); II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable, which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing .cxx and .h files (see: TEnv) of the classes you want to document, or call THtml::SetInputDir(); Example:. Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/htmlII.2 Output directory; The output directory can be specified using the Root.Html.OutputDir configuration variable (default value: ""htmldoc""). If that directory doesn't exist THtml will create it.; Example:. Root.Html.OutputDir: htmldocII.3 Linking other documentation; When trying to document a class, THtml searches for a source file in the directories set via SetInputDir(). If it cannot find it, it assumes that this class must have been documented before. Based on the library this class is defined in, it checks the configuration variable Root.Html.LibName, and creates a link using its value. Alternatively, you can set these URLs via THt",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:2942,Deployability,configurat,configuration,2942," html.MakeAll(); // generate documentation for all changed classes; or to run on just a few classes: ; root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only; To ""beautify"" (i.e. create links to documentation for class names etc) some text file or macro, use: ; root[] html.Convert( ""hsimple.C"", ""Histogram example"" ); II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable, which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing .cxx and .h files (see: TEnv) of the classes you want to document, or call THtml::SetInputDir(); Example:. Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/htmlII.2 Output directory; The output directory can be specified using the Root.Html.OutputDir configuration variable (default value: ""htmldoc""). If that directory doesn't exist THtml will create it.; Example:. Root.Html.OutputDir: htmldocII.3 Linking other documentation; When trying to document a class, THtml searches for a source file in the directories set via SetInputDir(). If it cannot find it, it assumes that this class must have been documented before. Based on the library this class is defined in, it checks the configuration variable Root.Html.LibName, and creates a link using its value. Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc contains. Root.Html.MyLib: ../mylib/ THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility. For the library in the example above, which contains a dictionary generated from the linkdef MyLinkdef.h, the command to generate the rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:3372,Deployability,configurat,configuration,3372," or macro, use: ; root[] html.Convert( ""hsimple.C"", ""Histogram example"" ); II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable, which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing .cxx and .h files (see: TEnv) of the classes you want to document, or call THtml::SetInputDir(); Example:. Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/htmlII.2 Output directory; The output directory can be specified using the Root.Html.OutputDir configuration variable (default value: ""htmldoc""). If that directory doesn't exist THtml will create it.; Example:. Root.Html.OutputDir: htmldocII.3 Linking other documentation; When trying to document a class, THtml searches for a source file in the directories set via SetInputDir(). If it cannot find it, it assumes that this class must have been documented before. Based on the library this class is defined in, it checks the configuration variable Root.Html.LibName, and creates a link using its value. Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc contains. Root.Html.MyLib: ../mylib/ THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility. For the library in the example above, which contains a dictionary generated from the linkdef MyLinkdef.h, the command to generate the rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h Here, -r specifies that the entries for libMyLib should be updated, -l specifies the library we're dealing with, -d its dependencies, and -c its linkdef. The rootmap file must be within one of the LD_LIBRARY_PATH (or PATH for Windows) directories when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentation has to app",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:4040,Deployability,update,updated,4040,". Root.Html.OutputDir: htmldocII.3 Linking other documentation; When trying to document a class, THtml searches for a source file in the directories set via SetInputDir(). If it cannot find it, it assumes that this class must have been documented before. Based on the library this class is defined in, it checks the configuration variable Root.Html.LibName, and creates a link using its value. Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc contains. Root.Html.MyLib: ../mylib/ THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility. For the library in the example above, which contains a dictionary generated from the linkdef MyLinkdef.h, the command to generate the rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h Here, -r specifies that the entries for libMyLib should be updated, -l specifies the library we're dealing with, -d its dependencies, and -c its linkdef. The rootmap file must be within one of the LD_LIBRARY_PATH (or PATH for Windows) directories when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentation has to appear in the header file containing the class, right in front of its declaration. It is introduced by a string defined by Root.Html.Description or SetClassDocTag(). See the section on documentation syntax for further details.; Example:. Root.Html.Description: //____________________The class documentation will show which include statement is to be used and which library needs to be linked to access it. The include file name is determined via TClass::GetDeclFileName(); leading parts are removed if they match any of the ':' separated entries in THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion, THtml will look for some strings (""tags"") in the source file, which have to a",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:5737,Deployability,configurat,configuration,5737,"e include file name is determined via TClass::GetDeclFileName(); leading parts are removed if they match any of the ':' separated entries in THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion, THtml will look for some strings (""tags"") in the source file, which have to appear right in front of e.g. the author's name, copyright notice, etc. These tags can be defined with the following environment variables: Root.Html.Author, Root.Html.LastUpdate and Root.Html.Copyright, or with SetAuthorTag(), SetLastUpdateTag(), SetCopyrightTag().; If the LastUpdate tag is not found, the current date and time are used. This is useful when using THtml::MakeAll()'s default option force=kFALSE, in which case THtml generates documentation only for changed classes.; Authors can be a comma separated list of author entries. Each entry has one of the following two formats . Name (non-alpha). ; THtml will generate an HTML link for Name, taking the Root.Html.XWho configuration variable (defaults to ""http://consult.cern.ch/xwho/people?"") and adding all parts of the name with spaces replaces by '+'. Non-alphanumerical characters are printed out behind Name. Example:; // Author: Enrico Fermi appears in the source file. THtml will generate the link http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for people at CERN. Name <link> Info. ; THtml will generate an HTML link for Name as specified by link and print Info behind Name. Example:; // Author: Enrico Fermi <http://www.enricos-home.it&gt; or; // Author: Enrico Fermi <enric.nosp@m.o@fn.nosp@m.al.go.nosp@m.v> in the source file. That's world compatible. . Example (with defaults given):. Root.Html.Author: // Author:; Root.Html.LastUpdate: // @(#); Root.Html.Copyright: * Copyright; Root.Html.XWho: http://consult.cern.ch/xwho/people?II.6 Header and footer; THtml generates a default header and footer for all pages. You can specify your own versions with the configuration variables Root.Html.Header and Root.Html",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:6707,Deployability,configurat,configuration,6707,"k for Name, taking the Root.Html.XWho configuration variable (defaults to ""http://consult.cern.ch/xwho/people?"") and adding all parts of the name with spaces replaces by '+'. Non-alphanumerical characters are printed out behind Name. Example:; // Author: Enrico Fermi appears in the source file. THtml will generate the link http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for people at CERN. Name <link> Info. ; THtml will generate an HTML link for Name as specified by link and print Info behind Name. Example:; // Author: Enrico Fermi <http://www.enricos-home.it&gt; or; // Author: Enrico Fermi <enric.nosp@m.o@fn.nosp@m.al.go.nosp@m.v> in the source file. That's world compatible. . Example (with defaults given):. Root.Html.Author: // Author:; Root.Html.LastUpdate: // @(#); Root.Html.Copyright: * Copyright; Root.Html.XWho: http://consult.cern.ch/xwho/people?II.6 Header and footer; THtml generates a default header and footer for all pages. You can specify your own versions with the configuration variables Root.Html.Header and Root.Html.Footer, or by calling SetHeader(), SetFooter(). Both variables default to """", using the standard Root versions. If it has a ""+"" appended, THtml will write both versions (user and root) to a file, for the header in the order 1st root, 2nd user, and for the footer 1st user, 2nd root (the root versions containing ""&lt;html&gt;"" and </html> tags, resp).; If you want to replace root's header you have to write a file containing all HTML elements necessary starting with the <doctype> tag and ending with (and including) the <body> tag. If you add your header it will be added directly after Root's <body> tag. Any occurrence of the string TITLE% in the user's header file will be replaced by a sensible, automatically generated title. If the header is generated for a class, occurrences of CLASS% will be replaced by the current class's name, SRCFILE% and INCFILE% by the name of the source and header file, resp. (as given by TClass::GetIm",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:7898,Deployability,update,update,7898,"er and root) to a file, for the header in the order 1st root, 2nd user, and for the footer 1st user, 2nd root (the root versions containing ""&lt;html&gt;"" and </html> tags, resp).; If you want to replace root's header you have to write a file containing all HTML elements necessary starting with the <doctype> tag and ending with (and including) the <body> tag. If you add your header it will be added directly after Root's <body> tag. Any occurrence of the string TITLE% in the user's header file will be replaced by a sensible, automatically generated title. If the header is generated for a class, occurrences of CLASS% will be replaced by the current class's name, SRCFILE% and INCFILE% by the name of the source and header file, resp. (as given by TClass::GetImplFileName(), TClass::GetDeclFileName()). If the header is not generated for a class, they will be replaced by """".; Root's footer starts with the tag <!–SIGNATURE–>. It includes the author(s), last update, copyright, the links to the Root home page, to the user home page, to the index file (ClassIndex.html), to the top of the page and this page is automatically generated information. It ends with the tags </body></html>. If you want to replace it, THtml will search for some tags in your footer: Occurrences of the strings AUTHOR%, UPDATE%, and COPYRIGHT% are replaced by their corresponding values before writing the html file. The AUTHOR% tag will be replaced by the exact string that follows Root.Html.Author, no link generation will occur.; II.7 Links to searches, home page, ViewVC; Additional parameters can be set by Root.Html.Homepage (address of the user's home page), Root.Html.SearchEngine (search engine for the class documentation), Root.Html.Search (search URL, where u is replaced by the referer and s by the escaped search expression), and a ViewVC base URL Root.Html.ViewCVS. For the latter, the file name is appended or, if the URL contains f, f is replaced by the file name. All values default to """".; Examples:",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:15904,Deployability,install,install,15904,"e module's classes.; A filename starting with ""index."" will be included in the index page; all other files will be linked. Only files ending on .html or .txt will be taken into account; the text files will first be run through THtml::Convert(). You can see an example here; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They are generated automatically when running MakeAll(); they can be generated on demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which are displayed as a tabbed set of imaged on-top of the class description. It can show the inheritance, inherited and hidden members, directly and indirectly included files, and library dependencies.; These graphs are generated using the Graphviz package. You can install it from http://www.graphviz.org. You can either put it into your $PATH, or tell THtml where to find it by calling SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml. You can set them in your .rootrc file, see TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Sear",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:16093,Deployability,configurat,configuration,16093,"ount; the text files will first be run through THtml::Convert(). You can see an example here; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They are generated automatically when running MakeAll(); they can be generated on demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which are displayed as a tabbed set of imaged on-top of the class description. It can show the inheritance, inherited and hidden members, directly and indirectly included files, and library dependencies.; These graphs are generated using the Graphviz package. You can install it from http://www.graphviz.org. You can either put it into your $PATH, or tell THtml where to find it by calling SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml. You can set them in your .rootrc file, see TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (default: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/people?",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:16404,Deployability,update,update,16404,"mon set of javascript and CSS files. They are generated automatically when running MakeAll(); they can be generated on demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which are displayed as a tabbed set of imaged on-top of the class description. It can show the inheritance, inherited and hidden members, directly and indirectly included files, and library dependencies.; These graphs are generated using the Graphviz package. You can install it from http://www.graphviz.org. You can either put it into your $PATH, or tell THtml where to find it by calling SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml. You can set them in your .rootrc file, see TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (default: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/people?) - URL of CERN's xWho; Root.Html.Charset (default: ISO-8859-1) - HTML character set; IX. Behind the scene; Internally, THtml is just an API class that sets up the list of known classes, and forwards API invocations to the ""work horses"". TDocOutput generates the output by letting a TDocParse",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:4101,Integrability,depend,dependencies,4101,". Root.Html.OutputDir: htmldocII.3 Linking other documentation; When trying to document a class, THtml searches for a source file in the directories set via SetInputDir(). If it cannot find it, it assumes that this class must have been documented before. Based on the library this class is defined in, it checks the configuration variable Root.Html.LibName, and creates a link using its value. Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc contains. Root.Html.MyLib: ../mylib/ THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility. For the library in the example above, which contains a dictionary generated from the linkdef MyLinkdef.h, the command to generate the rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h Here, -r specifies that the entries for libMyLib should be updated, -l specifies the library we're dealing with, -d its dependencies, and -c its linkdef. The rootmap file must be within one of the LD_LIBRARY_PATH (or PATH for Windows) directories when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentation has to appear in the header file containing the class, right in front of its declaration. It is introduced by a string defined by Root.Html.Description or SetClassDocTag(). See the section on documentation syntax for further details.; Example:. Root.Html.Description: //____________________The class documentation will show which include statement is to be used and which library needs to be linked to access it. The include file name is determined via TClass::GetDeclFileName(); leading parts are removed if they match any of the ':' separated entries in THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion, THtml will look for some strings (""tags"") in the source file, which have to a",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:15826,Integrability,depend,dependencies,15826,"e and product index, either by linking it or by including it. The files for modules are searched based on the source file directory of the module's classes.; A filename starting with ""index."" will be included in the index page; all other files will be linked. Only files ending on .html or .txt will be taken into account; the text files will first be run through THtml::Convert(). You can see an example here; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They are generated automatically when running MakeAll(); they can be generated on demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which are displayed as a tabbed set of imaged on-top of the class description. It can show the inheritance, inherited and hidden members, directly and indirectly included files, and library dependencies.; These graphs are generated using the Graphviz package. You can install it from http://www.graphviz.org. You can either put it into your $PATH, or tell THtml where to find it by calling SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml. You can set them in your .rootrc file, see TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.H",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:27711,Integrability,message,message,27711,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:28252,Integrability,message,message,28252,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:29454,Integrability,message,message,29454,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:32816,Integrability,message,message,32816," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const char * GetDirDelimiter ();  ; static Bool_t IsNamespace (const TClass *cl);  Check whether cl is a namespace. ;  ; static void LoadAllL",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:33189,Integrability,message,message,33189," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const char * GetDirDelimiter ();  ; static Bool_t IsNamespace (const TClass *cl);  Check whether cl is a namespace. ;  ; static void LoadAllLibs ();  Load all libraries known to ROOT via the rootmap system. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectSt",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:34991,Integrability,depend,depending,34991,"erited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void CreateJavascript () const;  Write the default ROOT style sheet. ;  ; void CreateListOfClasses (const char *filter);  Create the list of all known classes. ;  ; void CreateListOfTypes ();  Create index of all data types and a page for each typedef-to-class. ;  ; virtual void CreateStyleSheet () const;  Write the default ROOT style sheet. ;  ; virtual bool GetDeclImplFileName (TClass *cl, bool filesys, bool decl, TString &out_name) const;  Combined implementation for GetDeclFileName(), GetImplFileName(): Return declaration / implementation file name (depending on decl); return the full path if filesys is true. ;  ; TClassDocInfo * GetNextClass ();  Return the next class to be generated for MakeClassThreaded. ;  ; void MakeClass (void *cdi, Bool_t force=kFALSE);  Make HTML files for a single class. ;  ; void SetLocalFiles () const;  Fill the files available in the file system below fPathInfo.fInputPath. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void * MakeClassThreaded (void *info);  Entry point of worker threads for multi-threaded MakeAll(). ;  . Protected Attributes; Bool_t fBatch;  ; TString fCounter;  ; TString fCounterFormat;  ; DocEntityInfo_t fDocEntityInfo;  ; DocSyntax_t fDocSyntax;  ; TFileDefinition * fFileDef;  ; TGClient * fGClient",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:41775,Integrability,depend,depending,41775," of file THtml.cxx. ◆ GetClassDocTag(). const TString & THtml::GetClassDocTag ; (; ); const. inline . Definition at line 304 of file THtml.h. ◆ GetCopyrightTag(). const TString & THtml::GetCopyrightTag ; (; ); const. inline . Definition at line 307 of file THtml.h. ◆ GetCounter(). const char * THtml::GetCounter ; (; ); const. inline . Definition at line 323 of file THtml.h. ◆ GetCounterFormat(). const char * THtml::GetCounterFormat ; (; ); const. inline . Definition at line 303 of file THtml.h. ◆ GetDeclFileName(). bool THtml::GetDeclFileName ; (; TClass * ; cl, . Bool_t ; filesys, . TString & ; out_name . ); const. virtual . Return declaration file name; return the full path if filesys is true. ; Definition at line 2105 of file THtml.cxx. ◆ GetDeclImplFileName(). bool THtml::GetDeclImplFileName ; (; TClass * ; cl, . bool ; filesys, . bool ; decl, . TString & ; out_name . ); const. protectedvirtual . Combined implementation for GetDeclFileName(), GetImplFileName(): Return declaration / implementation file name (depending on decl); return the full path if filesys is true. ; Definition at line 2123 of file THtml.cxx. ◆ GetDerivedClasses(). void THtml::GetDerivedClasses ; (; TClass * ; cl, . std::map< TClass *, Int_t > & ; derived . ); const. fill derived with all classes inheriting from cl and their inheritance distance to cl ; Definition at line 1964 of file THtml.cxx. ◆ GetDirDelimiter(). static const char * THtml::GetDirDelimiter ; (; ). inlinestatic . Definition at line 327 of file THtml.h. ◆ GetDocStyle(). const TString & THtml::GetDocStyle ; (; ); const. inline . Definition at line 316 of file THtml.h. ◆ GetDotDir(). const TString & THtml::GetDotDir ; (; ); const. inline . Definition at line 299 of file THtml.h. ◆ GetEtcDir(). const char * THtml::GetEtcDir ; (; ); const. virtual . Get the directory containing THtml's auxiliary files ($ROOTSYS/etc/html) ; Definition at line 1352 of file THtml.cxx. ◆ GetFileDefinition(). const THtml::TFileDefinition & THtml::GetFi",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:1759,Modifiability,variab,variables,1759,"ges conforming to the XHTML 1.0 transitional specifications; an example of these pages is ROOT's own reference guide. This page was verified to be valid XHTML 1.0 transitional, which proves that all pages generated by THtml can be valid, as long as the user provided XHTML (documentation, header, etc) is valid. You can check the current THtml by clicking this icon: ; Overview: . Usage . Configuration . Input files . Output directory . Linking other documentation . Recognizing class documentation . Author, copyright, etc. . Header and footer . Links to searches, home page, ViewVC . HTML Charset . Documentation syntax . Class description . Class index . Method documentation . Data member documentation . Documentation directives . BEGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes; or to run on just a few classes: ; root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only; To ""beautify"" (i.e. create links to documentation for class names etc) some text file or macro, use: ; root[] html.Convert( ""hsimple.C"", ""Histogram example"" ); II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable, which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing .cxx and .h files (see: TEnv) of the classes you want to document, or call THtml::SetInputDir(",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:2454,Modifiability,config,configuration,2454,"EGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes; or to run on just a few classes: ; root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only; To ""beautify"" (i.e. create links to documentation for class names etc) some text file or macro, use: ; root[] html.Convert( ""hsimple.C"", ""Histogram example"" ); II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable, which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing .cxx and .h files (see: TEnv) of the classes you want to document, or call THtml::SetInputDir(); Example:. Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/htmlII.2 Output directory; The output directory can be specified using the Root.Html.OutputDir configuration variable (default value: ""htmldoc""). If that directory doesn't exist THtml will create it.; Example:. Root.Html.OutputDir: htmldocII.3 Linking other documentation; When trying to document a class, THtml searches for a source file in the directories set via SetInputDir(). If it cannot find it, it assumes that this class must have been documented before. Based on the library this class is defined in, it checks the configuration variable Root.Html.LibName, and creates a link using its value. Alternatively, you can set these URLs via THt",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:2520,Modifiability,variab,variable,2520,"EGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentation for all changed classes; or to run on just a few classes: ; root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only; To ""beautify"" (i.e. create links to documentation for class names etc) some text file or macro, use: ; root[] html.Convert( ""hsimple.C"", ""Histogram example"" ); II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable, which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing .cxx and .h files (see: TEnv) of the classes you want to document, or call THtml::SetInputDir(); Example:. Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/htmlII.2 Output directory; The output directory can be specified using the Root.Html.OutputDir configuration variable (default value: ""htmldoc""). If that directory doesn't exist THtml will create it.; Example:. Root.Html.OutputDir: htmldocII.3 Linking other documentation; When trying to document a class, THtml searches for a source file in the directories set via SetInputDir(). If it cannot find it, it assumes that this class must have been documented before. Based on the library this class is defined in, it checks the configuration variable Root.Html.LibName, and creates a link using its value. Alternatively, you can set these URLs via THt",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:2942,Modifiability,config,configuration,2942," html.MakeAll(); // generate documentation for all changed classes; or to run on just a few classes: ; root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only; To ""beautify"" (i.e. create links to documentation for class names etc) some text file or macro, use: ; root[] html.Convert( ""hsimple.C"", ""Histogram example"" ); II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable, which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing .cxx and .h files (see: TEnv) of the classes you want to document, or call THtml::SetInputDir(); Example:. Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/htmlII.2 Output directory; The output directory can be specified using the Root.Html.OutputDir configuration variable (default value: ""htmldoc""). If that directory doesn't exist THtml will create it.; Example:. Root.Html.OutputDir: htmldocII.3 Linking other documentation; When trying to document a class, THtml searches for a source file in the directories set via SetInputDir(). If it cannot find it, it assumes that this class must have been documented before. Based on the library this class is defined in, it checks the configuration variable Root.Html.LibName, and creates a link using its value. Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc contains. Root.Html.MyLib: ../mylib/ THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility. For the library in the example above, which contains a dictionary generated from the linkdef MyLinkdef.h, the command to generate the rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:2956,Modifiability,variab,variable,2956," html.MakeAll(); // generate documentation for all changed classes; or to run on just a few classes: ; root[] THtml html; // create a THtml object; root[] html.MakeIndex(); // create auxiliary files (style sheet etc) and indices; root[] html.MakeClass(""TMyClass""); // create documentation for TMyClass only; To ""beautify"" (i.e. create links to documentation for class names etc) some text file or macro, use: ; root[] html.Convert( ""hsimple.C"", ""Histogram example"" ); II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable, which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing .cxx and .h files (see: TEnv) of the classes you want to document, or call THtml::SetInputDir(); Example:. Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/htmlII.2 Output directory; The output directory can be specified using the Root.Html.OutputDir configuration variable (default value: ""htmldoc""). If that directory doesn't exist THtml will create it.; Example:. Root.Html.OutputDir: htmldocII.3 Linking other documentation; When trying to document a class, THtml searches for a source file in the directories set via SetInputDir(). If it cannot find it, it assumes that this class must have been documented before. Based on the library this class is defined in, it checks the configuration variable Root.Html.LibName, and creates a link using its value. Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc contains. Root.Html.MyLib: ../mylib/ THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility. For the library in the example above, which contains a dictionary generated from the linkdef MyLinkdef.h, the command to generate the rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:3372,Modifiability,config,configuration,3372," or macro, use: ; root[] html.Convert( ""hsimple.C"", ""Histogram example"" ); II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable, which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing .cxx and .h files (see: TEnv) of the classes you want to document, or call THtml::SetInputDir(); Example:. Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/htmlII.2 Output directory; The output directory can be specified using the Root.Html.OutputDir configuration variable (default value: ""htmldoc""). If that directory doesn't exist THtml will create it.; Example:. Root.Html.OutputDir: htmldocII.3 Linking other documentation; When trying to document a class, THtml searches for a source file in the directories set via SetInputDir(). If it cannot find it, it assumes that this class must have been documented before. Based on the library this class is defined in, it checks the configuration variable Root.Html.LibName, and creates a link using its value. Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc contains. Root.Html.MyLib: ../mylib/ THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility. For the library in the example above, which contains a dictionary generated from the linkdef MyLinkdef.h, the command to generate the rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h Here, -r specifies that the entries for libMyLib should be updated, -l specifies the library we're dealing with, -d its dependencies, and -c its linkdef. The rootmap file must be within one of the LD_LIBRARY_PATH (or PATH for Windows) directories when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentation has to app",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:3386,Modifiability,variab,variable,3386," or macro, use: ; root[] html.Convert( ""hsimple.C"", ""Histogram example"" ); II. Configuration; Most configuration options can be set as a call to THtml, or as a TEnv variable, which you can set in your .rootrc.; II.1 Input files; In your .rootrc, define Root.Html.SourceDir to point to directories containing .cxx and .h files (see: TEnv) of the classes you want to document, or call THtml::SetInputDir(); Example:. Root.Html.SourceDir: .:src:include; Root.Html.Root: http://root.cern.ch/root/htmlII.2 Output directory; The output directory can be specified using the Root.Html.OutputDir configuration variable (default value: ""htmldoc""). If that directory doesn't exist THtml will create it.; Example:. Root.Html.OutputDir: htmldocII.3 Linking other documentation; When trying to document a class, THtml searches for a source file in the directories set via SetInputDir(). If it cannot find it, it assumes that this class must have been documented before. Based on the library this class is defined in, it checks the configuration variable Root.Html.LibName, and creates a link using its value. Alternatively, you can set these URLs via THtml::SetLibURL().; Example:; If a class MyClass is defined in class mylibs/libMyLib.so, and .rootrc contains. Root.Html.MyLib: ../mylib/ THtml will create a link to ""../mylib/MyClass.html"".; The library name association can be set up using the rootmap facility. For the library in the example above, which contains a dictionary generated from the linkdef MyLinkdef.h, the command to generate the rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h Here, -r specifies that the entries for libMyLib should be updated, -l specifies the library we're dealing with, -d its dependencies, and -c its linkdef. The rootmap file must be within one of the LD_LIBRARY_PATH (or PATH for Windows) directories when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentation has to app",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:5185,Modifiability,variab,variables,5185,"in one of the LD_LIBRARY_PATH (or PATH for Windows) directories when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentation has to appear in the header file containing the class, right in front of its declaration. It is introduced by a string defined by Root.Html.Description or SetClassDocTag(). See the section on documentation syntax for further details.; Example:. Root.Html.Description: //____________________The class documentation will show which include statement is to be used and which library needs to be linked to access it. The include file name is determined via TClass::GetDeclFileName(); leading parts are removed if they match any of the ':' separated entries in THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion, THtml will look for some strings (""tags"") in the source file, which have to appear right in front of e.g. the author's name, copyright notice, etc. These tags can be defined with the following environment variables: Root.Html.Author, Root.Html.LastUpdate and Root.Html.Copyright, or with SetAuthorTag(), SetLastUpdateTag(), SetCopyrightTag().; If the LastUpdate tag is not found, the current date and time are used. This is useful when using THtml::MakeAll()'s default option force=kFALSE, in which case THtml generates documentation only for changed classes.; Authors can be a comma separated list of author entries. Each entry has one of the following two formats . Name (non-alpha). ; THtml will generate an HTML link for Name, taking the Root.Html.XWho configuration variable (defaults to ""http://consult.cern.ch/xwho/people?"") and adding all parts of the name with spaces replaces by '+'. Non-alphanumerical characters are printed out behind Name. Example:; // Author: Enrico Fermi appears in the source file. THtml will generate the link http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for people at CERN. Name <link> Info. ; THtml will generate an HTML link fo",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:5737,Modifiability,config,configuration,5737,"e include file name is determined via TClass::GetDeclFileName(); leading parts are removed if they match any of the ':' separated entries in THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion, THtml will look for some strings (""tags"") in the source file, which have to appear right in front of e.g. the author's name, copyright notice, etc. These tags can be defined with the following environment variables: Root.Html.Author, Root.Html.LastUpdate and Root.Html.Copyright, or with SetAuthorTag(), SetLastUpdateTag(), SetCopyrightTag().; If the LastUpdate tag is not found, the current date and time are used. This is useful when using THtml::MakeAll()'s default option force=kFALSE, in which case THtml generates documentation only for changed classes.; Authors can be a comma separated list of author entries. Each entry has one of the following two formats . Name (non-alpha). ; THtml will generate an HTML link for Name, taking the Root.Html.XWho configuration variable (defaults to ""http://consult.cern.ch/xwho/people?"") and adding all parts of the name with spaces replaces by '+'. Non-alphanumerical characters are printed out behind Name. Example:; // Author: Enrico Fermi appears in the source file. THtml will generate the link http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for people at CERN. Name <link> Info. ; THtml will generate an HTML link for Name as specified by link and print Info behind Name. Example:; // Author: Enrico Fermi <http://www.enricos-home.it&gt; or; // Author: Enrico Fermi <enric.nosp@m.o@fn.nosp@m.al.go.nosp@m.v> in the source file. That's world compatible. . Example (with defaults given):. Root.Html.Author: // Author:; Root.Html.LastUpdate: // @(#); Root.Html.Copyright: * Copyright; Root.Html.XWho: http://consult.cern.ch/xwho/people?II.6 Header and footer; THtml generates a default header and footer for all pages. You can specify your own versions with the configuration variables Root.Html.Header and Root.Html",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:5751,Modifiability,variab,variable,5751,"e include file name is determined via TClass::GetDeclFileName(); leading parts are removed if they match any of the ':' separated entries in THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion, THtml will look for some strings (""tags"") in the source file, which have to appear right in front of e.g. the author's name, copyright notice, etc. These tags can be defined with the following environment variables: Root.Html.Author, Root.Html.LastUpdate and Root.Html.Copyright, or with SetAuthorTag(), SetLastUpdateTag(), SetCopyrightTag().; If the LastUpdate tag is not found, the current date and time are used. This is useful when using THtml::MakeAll()'s default option force=kFALSE, in which case THtml generates documentation only for changed classes.; Authors can be a comma separated list of author entries. Each entry has one of the following two formats . Name (non-alpha). ; THtml will generate an HTML link for Name, taking the Root.Html.XWho configuration variable (defaults to ""http://consult.cern.ch/xwho/people?"") and adding all parts of the name with spaces replaces by '+'. Non-alphanumerical characters are printed out behind Name. Example:; // Author: Enrico Fermi appears in the source file. THtml will generate the link http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for people at CERN. Name <link> Info. ; THtml will generate an HTML link for Name as specified by link and print Info behind Name. Example:; // Author: Enrico Fermi <http://www.enricos-home.it&gt; or; // Author: Enrico Fermi <enric.nosp@m.o@fn.nosp@m.al.go.nosp@m.v> in the source file. That's world compatible. . Example (with defaults given):. Root.Html.Author: // Author:; Root.Html.LastUpdate: // @(#); Root.Html.Copyright: * Copyright; Root.Html.XWho: http://consult.cern.ch/xwho/people?II.6 Header and footer; THtml generates a default header and footer for all pages. You can specify your own versions with the configuration variables Root.Html.Header and Root.Html",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:6707,Modifiability,config,configuration,6707,"k for Name, taking the Root.Html.XWho configuration variable (defaults to ""http://consult.cern.ch/xwho/people?"") and adding all parts of the name with spaces replaces by '+'. Non-alphanumerical characters are printed out behind Name. Example:; // Author: Enrico Fermi appears in the source file. THtml will generate the link http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for people at CERN. Name <link> Info. ; THtml will generate an HTML link for Name as specified by link and print Info behind Name. Example:; // Author: Enrico Fermi <http://www.enricos-home.it&gt; or; // Author: Enrico Fermi <enric.nosp@m.o@fn.nosp@m.al.go.nosp@m.v> in the source file. That's world compatible. . Example (with defaults given):. Root.Html.Author: // Author:; Root.Html.LastUpdate: // @(#); Root.Html.Copyright: * Copyright; Root.Html.XWho: http://consult.cern.ch/xwho/people?II.6 Header and footer; THtml generates a default header and footer for all pages. You can specify your own versions with the configuration variables Root.Html.Header and Root.Html.Footer, or by calling SetHeader(), SetFooter(). Both variables default to """", using the standard Root versions. If it has a ""+"" appended, THtml will write both versions (user and root) to a file, for the header in the order 1st root, 2nd user, and for the footer 1st user, 2nd root (the root versions containing ""&lt;html&gt;"" and </html> tags, resp).; If you want to replace root's header you have to write a file containing all HTML elements necessary starting with the <doctype> tag and ending with (and including) the <body> tag. If you add your header it will be added directly after Root's <body> tag. Any occurrence of the string TITLE% in the user's header file will be replaced by a sensible, automatically generated title. If the header is generated for a class, occurrences of CLASS% will be replaced by the current class's name, SRCFILE% and INCFILE% by the name of the source and header file, resp. (as given by TClass::GetIm",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:6721,Modifiability,variab,variables,6721,"k for Name, taking the Root.Html.XWho configuration variable (defaults to ""http://consult.cern.ch/xwho/people?"") and adding all parts of the name with spaces replaces by '+'. Non-alphanumerical characters are printed out behind Name. Example:; // Author: Enrico Fermi appears in the source file. THtml will generate the link http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for people at CERN. Name <link> Info. ; THtml will generate an HTML link for Name as specified by link and print Info behind Name. Example:; // Author: Enrico Fermi <http://www.enricos-home.it&gt; or; // Author: Enrico Fermi <enric.nosp@m.o@fn.nosp@m.al.go.nosp@m.v> in the source file. That's world compatible. . Example (with defaults given):. Root.Html.Author: // Author:; Root.Html.LastUpdate: // @(#); Root.Html.Copyright: * Copyright; Root.Html.XWho: http://consult.cern.ch/xwho/people?II.6 Header and footer; THtml generates a default header and footer for all pages. You can specify your own versions with the configuration variables Root.Html.Header and Root.Html.Footer, or by calling SetHeader(), SetFooter(). Both variables default to """", using the standard Root versions. If it has a ""+"" appended, THtml will write both versions (user and root) to a file, for the header in the order 1st root, 2nd user, and for the footer 1st user, 2nd root (the root versions containing ""&lt;html&gt;"" and </html> tags, resp).; If you want to replace root's header you have to write a file containing all HTML elements necessary starting with the <doctype> tag and ending with (and including) the <body> tag. If you add your header it will be added directly after Root's <body> tag. Any occurrence of the string TITLE% in the user's header file will be replaced by a sensible, automatically generated title. If the header is generated for a class, occurrences of CLASS% will be replaced by the current class's name, SRCFILE% and INCFILE% by the name of the source and header file, resp. (as given by TClass::GetIm",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:6815,Modifiability,variab,variables,6815,"ame with spaces replaces by '+'. Non-alphanumerical characters are printed out behind Name. Example:; // Author: Enrico Fermi appears in the source file. THtml will generate the link http://consult.cern.ch/xwho/people?Enrico+Fermi. This works well for people at CERN. Name <link> Info. ; THtml will generate an HTML link for Name as specified by link and print Info behind Name. Example:; // Author: Enrico Fermi <http://www.enricos-home.it&gt; or; // Author: Enrico Fermi <enric.nosp@m.o@fn.nosp@m.al.go.nosp@m.v> in the source file. That's world compatible. . Example (with defaults given):. Root.Html.Author: // Author:; Root.Html.LastUpdate: // @(#); Root.Html.Copyright: * Copyright; Root.Html.XWho: http://consult.cern.ch/xwho/people?II.6 Header and footer; THtml generates a default header and footer for all pages. You can specify your own versions with the configuration variables Root.Html.Header and Root.Html.Footer, or by calling SetHeader(), SetFooter(). Both variables default to """", using the standard Root versions. If it has a ""+"" appended, THtml will write both versions (user and root) to a file, for the header in the order 1st root, 2nd user, and for the footer 1st user, 2nd root (the root versions containing ""&lt;html&gt;"" and </html> tags, resp).; If you want to replace root's header you have to write a file containing all HTML elements necessary starting with the <doctype> tag and ending with (and including) the <body> tag. If you add your header it will be added directly after Root's <body> tag. Any occurrence of the string TITLE% in the user's header file will be replaced by a sensible, automatically generated title. If the header is generated for a class, occurrences of CLASS% will be replaced by the current class's name, SRCFILE% and INCFILE% by the name of the source and header file, resp. (as given by TClass::GetImplFileName(), TClass::GetDeclFileName()). If the header is not generated for a class, they will be replaced by """".; Root's footer starts with",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:9813,Modifiability,variab,variable,9813," URL Root.Html.ViewCVS. For the latter, the file name is appended or, if the URL contains f, f is replaced by the file name. All values default to """".; Examples:. Root.Html.Homepage: http://www.enricos-home.it; Root.Html.SearchEngine: http://root.cern.ch/root/Search.phtml; Root.Html.Search: http://www.google.com/search?q=%s+site%3A%uII.8 HTML Charset; XHTML 1.0 transitional recommends the specification of the charset in the content type meta tag, see e.g. http://www.w3.org/TR/2002/REC-xhtml1-20020801/ THtml generates it for the HTML output files. It defaults to ISO-8859-1, and can be changed using Root.Html.Charset.; Example:. Root.Html.Charset: EUC-JPIII. Documentation syntax; III.1 Class description; A class description block, which must be placed before the first member function, has a following form:. ////////////////////////////////////////////////////////////////; // //; // TMyClass //; // //; // This is the description block. //; // //; ////////////////////////////////////////////////////////////////; The environment variable Root.Html.Description (see: TEnv) contains the delimiter string (default value: //_________________). It means that you can also write your class description block like this:. //_____________________________________________________________; // A description of the class starts with the line above, and; // will take place here !; //; Note that everything until the first non-commented line is considered as a valid class description block.; III.2 Class index; All classes to be documented will have an entry in the ClassIndex.html, showing their name with a link to their documentation page and a miniature description. This description for e.g. the class MyClass has to be given in MyClass's header as a comment right after ClassDef(MyClass, n).; III.3 Method documentation; A member function description block starts immediately after '{' and looks like this:. void TWorld::HelloWorldFunc(string *text); {; // This is an example of description for ",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:10991,Modifiability,variab,variable,10991," this:. //_____________________________________________________________; // A description of the class starts with the line above, and; // will take place here !; //; Note that everything until the first non-commented line is considered as a valid class description block.; III.2 Class index; All classes to be documented will have an entry in the ClassIndex.html, showing their name with a link to their documentation page and a miniature description. This description for e.g. the class MyClass has to be given in MyClass's header as a comment right after ClassDef(MyClass, n).; III.3 Method documentation; A member function description block starts immediately after '{' and looks like this:. void TWorld::HelloWorldFunc(string *text); {; // This is an example of description for the; // TWorld member function. helloWorld.Print( text );; }; Like in a class description block, everything until the first non-commented line is considered as a valid member function description block.; If the rootrc variable Root.Html.DescriptionStyle is set to Doc++ THtml will also look for method documentation in front of the function implementation. This feature is not recommended; source code making use of this does not comply to the ROOT documentation standards, which means future versions of THtml might not support it anymore.; III.4 Data member documentation; Data members are documented by putting a C++ comment behind their declaration in the header file, e.g. int fIAmADataMember; // this is a data member; IV. Documentation directives; NOTE that THtml does not yet support nested directives (i.e. latex inside html etc)!; IV.1 BEGIN_HTML END_HTML: include 'raw' HTML; You can insert pure html code into your documentation comments. During the generation of the documentation, this code will be inserted as is into the html file.; Pure html code must be surrounded by the keywords BEGIN_HTML and END_HTML, where the case is ignored. An example of pure html code is this class description you are rea",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:15731,Modifiability,inherit,inheritance,15731,"e and product index, either by linking it or by including it. The files for modules are searched based on the source file directory of the module's classes.; A filename starting with ""index."" will be included in the index page; all other files will be linked. Only files ending on .html or .txt will be taken into account; the text files will first be run through THtml::Convert(). You can see an example here; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They are generated automatically when running MakeAll(); they can be generated on demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which are displayed as a tabbed set of imaged on-top of the class description. It can show the inheritance, inherited and hidden members, directly and indirectly included files, and library dependencies.; These graphs are generated using the Graphviz package. You can install it from http://www.graphviz.org. You can either put it into your $PATH, or tell THtml where to find it by calling SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml. You can set them in your .rootrc file, see TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.H",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:15744,Modifiability,inherit,inherited,15744,"e and product index, either by linking it or by including it. The files for modules are searched based on the source file directory of the module's classes.; A filename starting with ""index."" will be included in the index page; all other files will be linked. Only files ending on .html or .txt will be taken into account; the text files will first be run through THtml::Convert(). You can see an example here; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They are generated automatically when running MakeAll(); they can be generated on demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which are displayed as a tabbed set of imaged on-top of the class description. It can show the inheritance, inherited and hidden members, directly and indirectly included files, and library dependencies.; These graphs are generated using the Graphviz package. You can install it from http://www.graphviz.org. You can either put it into your $PATH, or tell THtml where to find it by calling SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml. You can set them in your .rootrc file, see TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.H",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:16060,Modifiability,variab,variables,16060,"ount; the text files will first be run through THtml::Convert(). You can see an example here; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They are generated automatically when running MakeAll(); they can be generated on demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which are displayed as a tabbed set of imaged on-top of the class description. It can show the inheritance, inherited and hidden members, directly and indirectly included files, and library dependencies.; These graphs are generated using the Graphviz package. You can install it from http://www.graphviz.org. You can either put it into your $PATH, or tell THtml where to find it by calling SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml. You can set them in your .rootrc file, see TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (default: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/people?",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:16093,Modifiability,config,configuration,16093,"ount; the text files will first be run through THtml::Convert(). You can see an example here; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They are generated automatically when running MakeAll(); they can be generated on demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which are displayed as a tabbed set of imaged on-top of the class description. It can show the inheritance, inherited and hidden members, directly and indirectly included files, and library dependencies.; These graphs are generated using the Graphviz package. You can install it from http://www.graphviz.org. You can either put it into your $PATH, or tell THtml where to find it by calling SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml. You can set them in your .rootrc file, see TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (default: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/people?",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:16107,Modifiability,variab,variables,16107,"ount; the text files will first be run through THtml::Convert(). You can see an example here; the part between ""Index of HIST classes"" and ""Jump to"" is created by parsing the module's doc directory.; VI. Auxiliary files: style sheet, JavaScript, help page; The documentation pages share a common set of javascript and CSS files. They are generated automatically when running MakeAll(); they can be generated on demand by calling CreateAuxiliaryFiles().; VII. Class Charts; THtml can generate a number of graphical representations for a class, which are displayed as a tabbed set of imaged on-top of the class description. It can show the inheritance, inherited and hidden members, directly and indirectly included files, and library dependencies.; These graphs are generated using the Graphviz package. You can install it from http://www.graphviz.org. You can either put it into your $PATH, or tell THtml where to find it by calling SetDotDir().; VIII. Configuration variables; Here is a list of all configuration variables that are known to THtml. You can set them in your .rootrc file, see TEnv. Root.Html.OutputDir (default: htmldoc); Root.Html.SourceDir (default: .:src/:include/); Root.Html.Author (default: // Author:) - start tag for authors; Root.Html.LastUpdate (default: // @(#)) - start tag for last update; Root.Html.Copyright (default: * Copyright) - start tag for copyright notice; Root.Html.Description (default: //____________________ ) - start tag for class descr; Root.Html.HomePage (default: ) - URL to the user defined home page; Root.Html.Header (default: ) - location of user defined header; Root.Html.Footer (default: ) - location of user defined footer; Root.Html.Root (default: ) - URL of Root's class documentation; Root.Html.SearchEngine (default: ) - link to the search engine; Root.Html.Search (default: ) - link to search by replacing ""%s"" with user input; Root.Html.ViewCVS (default: ) - URL of ViewCVS base; Root.Html.XWho (default: http://consult.cern.ch/xwho/people?",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:18040,Modifiability,inherit,inherited,18040,"o; Root.Html.Charset (default: ISO-8859-1) - HTML character set; IX. Behind the scene; Internally, THtml is just an API class that sets up the list of known classes, and forwards API invocations to the ""work horses"". TDocOutput generates the output by letting a TDocParser object parse the sources, which in turn invokes objects deriving from TDocDirective to process directives.; Definition at line 40 of file THtml.h. Classes; struct  DocEntityInfo_t;  ; struct  DocSyntax_t;  ; struct  LinkInfo_t;  ; struct  OutputStyle_t;  ; struct  PathInfo_t;  ; class  TFileDefinition;  ; class  TFileSysDB;  ; class  TFileSysDir;  ; class  TFileSysEntry;  ; class  TFileSysRoot;  ; class  THelperBase;  ; class  TModuleDefinition;  ; class  TPathDefinition;  . Public Types; enum  EConvertOutput { ;   kNoOutput; , kInterpretedOutput; , kCompiledOutput; , kForceOutput = 0x10; , ;   kSeparateProcessOutput = 0x20. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  THtml ();  Create a THtml object. ;  ;  ~THtml () override;  Default destructor. ;  ; void AddMacroPath (const char *path);  Add path to the directories to be searched for macro files that are to be executed via the TDocMacroDirective (""Begin_Macro""/""End_Macro""); relative to the source file that the directive is run on. ;  ; void Convert (const char *filename, const char *title, const char *dirname="""", const char *relpath",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:19478,Modifiability,inherit,inheritance,19478," (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  THtml ();  Create a THtml object. ;  ;  ~THtml () override;  Default destructor. ;  ; void AddMacroPath (const char *path);  Add path to the directories to be searched for macro files that are to be executed via the TDocMacroDirective (""Begin_Macro""/""End_Macro""); relative to the source file that the directive is run on. ;  ; void Convert (const char *filename, const char *title, const char *dirname="""", const char *relpath=""../"", Int_t includeOutput=kNoOutput, const char *context="""");  It converts a single text file to HTML. ;  ; Bool_t CopyFileFromEtcDir (const char *filename) const;  Copy a file from $ROOTSYS/etc/html into GetOutputDir() ;  ; virtual void CreateAuxiliaryFiles () const;  copy CSS, javascript file, etc to the output dir ;  ; void CreateHierarchy ();  Create the inheritance hierarchy diagram for all classes. ;  ; const TString & GetAuthorTag () const;  ; const TString & GetCharset () const;  ; virtual TClass * GetClass (const char *name) const;  Return pointer to class with name. ;  ; const TString & GetClassDocTag () const;  ; const TString & GetCopyrightTag () const;  ; const char * GetCounter () const;  ; const char * GetCounterFormat () const;  ; virtual bool GetDeclFileName (TClass *cl, Bool_t filesys, TString &out_name) const;  Return declaration file name; return the full path if filesys is true. ;  ; void GetDerivedClasses (TClass *cl, std::map< TClass *, Int_t > &derived) const;  fill derived with all classes inheriting from cl and their inheritance distance to cl ;  ; const TString & GetDocStyle () const;  ; const TString & GetDotDir () const;  ; virtual const char * GetEtcDir () const;  Get the directory containing THtml's auxil",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:20147,Modifiability,inherit,inheriting,20147,"tml into GetOutputDir() ;  ; virtual void CreateAuxiliaryFiles () const;  copy CSS, javascript file, etc to the output dir ;  ; void CreateHierarchy ();  Create the inheritance hierarchy diagram for all classes. ;  ; const TString & GetAuthorTag () const;  ; const TString & GetCharset () const;  ; virtual TClass * GetClass (const char *name) const;  Return pointer to class with name. ;  ; const TString & GetClassDocTag () const;  ; const TString & GetCopyrightTag () const;  ; const char * GetCounter () const;  ; const char * GetCounterFormat () const;  ; virtual bool GetDeclFileName (TClass *cl, Bool_t filesys, TString &out_name) const;  Return declaration file name; return the full path if filesys is true. ;  ; void GetDerivedClasses (TClass *cl, std::map< TClass *, Int_t > &derived) const;  fill derived with all classes inheriting from cl and their inheritance distance to cl ;  ; const TString & GetDocStyle () const;  ; const TString & GetDotDir () const;  ; virtual const char * GetEtcDir () const;  Get the directory containing THtml's auxiliary files ($ROOTSYS/etc/html) ;  ; const TFileDefinition & GetFileDefinition () const;  Return the TFileDefinition (or derived) object as set by SetFileDefinition(); create and return a TFileDefinition object if none was set. ;  ; const TString & GetFooter () const;  ; const TString & GetHeader () const;  ; const TString & GetHomepage () const;  ; virtual const char * GetHtmlFileName (const char *classname) const;  Get the html file name for a class named classname. ;  ; virtual void GetHtmlFileName (TClass *classPtr, TString &filename) const;  Return real HTML filename. ;  ; virtual bool GetImplFileName (TClass *cl, Bool_t filesys, TString &out_name) const;  Return implementation file name. ;  ; const TString & GetInputPath () const;  ; const TString & GetLastUpdateTag () const;  ; TList * GetLibraryDependencies ();  ; const TList * GetListOfClasses () const;  ; const TList * GetListOfModules () const;  ; TFileSysDB * GetLocal",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:20176,Modifiability,inherit,inheritance,20176,"tml into GetOutputDir() ;  ; virtual void CreateAuxiliaryFiles () const;  copy CSS, javascript file, etc to the output dir ;  ; void CreateHierarchy ();  Create the inheritance hierarchy diagram for all classes. ;  ; const TString & GetAuthorTag () const;  ; const TString & GetCharset () const;  ; virtual TClass * GetClass (const char *name) const;  Return pointer to class with name. ;  ; const TString & GetClassDocTag () const;  ; const TString & GetCopyrightTag () const;  ; const char * GetCounter () const;  ; const char * GetCounterFormat () const;  ; virtual bool GetDeclFileName (TClass *cl, Bool_t filesys, TString &out_name) const;  Return declaration file name; return the full path if filesys is true. ;  ; void GetDerivedClasses (TClass *cl, std::map< TClass *, Int_t > &derived) const;  fill derived with all classes inheriting from cl and their inheritance distance to cl ;  ; const TString & GetDocStyle () const;  ; const TString & GetDotDir () const;  ; virtual const char * GetEtcDir () const;  Get the directory containing THtml's auxiliary files ($ROOTSYS/etc/html) ;  ; const TFileDefinition & GetFileDefinition () const;  Return the TFileDefinition (or derived) object as set by SetFileDefinition(); create and return a TFileDefinition object if none was set. ;  ; const TString & GetFooter () const;  ; const TString & GetHeader () const;  ; const TString & GetHomepage () const;  ; virtual const char * GetHtmlFileName (const char *classname) const;  Get the html file name for a class named classname. ;  ; virtual void GetHtmlFileName (TClass *classPtr, TString &filename) const;  Return real HTML filename. ;  ; virtual bool GetImplFileName (TClass *cl, Bool_t filesys, TString &out_name) const;  Return implementation file name. ;  ; const TString & GetInputPath () const;  ; const TString & GetLastUpdateTag () const;  ; TList * GetLibraryDependencies ();  ; const TList * GetListOfClasses () const;  ; const TList * GetListOfModules () const;  ; TFileSysDB * GetLocal",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:23533,Modifiability,inherit,inheritance,23533,";  ; const TString & GetWikiURL () const;  ; const TString & GetXwho () const;  ; Bool_t HaveDot ();  Check whether dot is available in $PATH or in the directory set by SetDotPath() ;  ; void HelperDeleted (THelperBase *who);  Inform the THtml object that one of its helper objects was deleted. ;  ; TClass * IsA () const override;  ; Bool_t IsBatch () const;  ; void MakeAll (Bool_t force=kFALSE, const char *filter=""*"", int numthreads=1);  Produce documentation for all the classes specified in the filter (by default ""*"") To process all classes having a name starting with XX, do: html.MakeAll(kFALSE,""XX*""); If force=kFALSE (default), only the classes that have been modified since the previous call to this function will be generated. ;  ; void MakeClass (const char *className, Bool_t force=kFALSE);  Make HTML files for a single class. ;  ; void MakeIndex (const char *filter=""*"");  Create the index files for the product, modules, all types, etc. ;  ; void MakeTree (const char *className, Bool_t force=kFALSE);  Make an inheritance tree. ;  ; void ReplaceSpecialChars (std::ostream &, const char *);  ; void SetAuthorTag (const char *tag);  ; void SetBatch (Bool_t batch=kTRUE);  ; void SetCharset (const char *charset);  ; void SetClassDocTag (const char *tag);  ; void SetCopyrightTag (const char *tag);  ; void SetCounterFormat (const char *format);  ; void SetDeclFileName (TClass *cl, const char *filename);  Explicitly set a decl file name for TClass cl. ;  ; void SetDocPath (const char *path);  ; void SetDocStyle (const char *style);  ; void SetDotDir (const char *dir);  ; void SetEscape (char='\\');  ; void SetEtcDir (const char *dir);  ; void SetFileDefinition (const TFileDefinition &fd);  Set the file defining object to be used; can also be a user derived object (a la traits). ;  ; void SetFooter (const char *file);  ; void SetFoundDot (Bool_t found=kTRUE);  Set whether ""dot"" (a GraphViz utility) is available. ;  ; void SetHeader (const char *file);  ; void SetHomepage (",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:25944,Modifiability,inherit,inherited,25944,"tion (const TModuleDefinition &md);  Set the module defining object to be used; can also be a user derived object (a la traits). ;  ; void SetOutputDir (const char *dir);  Set the directory where the HTML pages should be written to. ;  ; void SetPathDefinition (const TPathDefinition &pd);  Set the path defining object to be used; can also be a user derived object (a la traits). ;  ; void SetProductName (const char *product);  ; void SetRootURL (const char *url);  ; void SetSearchEngine (const char *url);  ; void SetSearchStemURL (const char *url);  ; void SetSourceDir (const char *dir);  ; void SetViewCVS (const char *url);  ; void SetWikiURL (const char *url);  ; void SetXwho (const char *xwho);  ; const char * ShortType (const char *name) const;  Get short type name, i.e. with default templates removed. ;  ; void SortListOfModules ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:27341,Modifiability,inherit,inheritance,27341,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:29552,Modifiability,inherit,inherits,29552,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:29669,Modifiability,inherit,inherits,29669,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:33909,Modifiability,inherit,inherited,33909,"s called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const char * GetDirDelimiter ();  ; static Bool_t IsNamespace (const TClass *cl);  Check whether cl is a namespace. ;  ; static void LoadAllLibs ();  Load all libraries known to ROOT via the rootmap system. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual void CreateJavascript () const;  Write the default ROOT style sheet. ;  ; void CreateListOfClasses (const char *filter);  Create the list of all known classes. ;  ; void CreateListOfTypes ();  Create index of all data types and a page for each typedef-to-class. ;  ; virtual void CreateStyleSheet () const;  Write the default ROOT style sheet. ;  ; virtual bool GetDeclImplFileName (TClass *cl, bool filesys, bool decl, TString &out_name) const;  Combined implementation for GetDeclFileName(), GetImplFileName(): Return declaration / implementation file name (depending on decl); ",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:35383,Modifiability,inherit,inherited,35383,"avascript () const;  Write the default ROOT style sheet. ;  ; void CreateListOfClasses (const char *filter);  Create the list of all known classes. ;  ; void CreateListOfTypes ();  Create index of all data types and a page for each typedef-to-class. ;  ; virtual void CreateStyleSheet () const;  Write the default ROOT style sheet. ;  ; virtual bool GetDeclImplFileName (TClass *cl, bool filesys, bool decl, TString &out_name) const;  Combined implementation for GetDeclFileName(), GetImplFileName(): Return declaration / implementation file name (depending on decl); return the full path if filesys is true. ;  ; TClassDocInfo * GetNextClass ();  Return the next class to be generated for MakeClassThreaded. ;  ; void MakeClass (void *cdi, Bool_t force=kFALSE);  Make HTML files for a single class. ;  ; void SetLocalFiles () const;  Fill the files available in the file system below fPathInfo.fInputPath. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void * MakeClassThreaded (void *info);  Entry point of worker threads for multi-threaded MakeAll(). ;  . Protected Attributes; Bool_t fBatch;  ; TString fCounter;  ; TString fCounterFormat;  ; DocEntityInfo_t fDocEntityInfo;  ; DocSyntax_t fDocSyntax;  ; TFileDefinition * fFileDef;  ; TGClient * fGClient;  ; LinkInfo_t fLinkInfo;  ; TFileSysDB * fLocalFiles;  ; TVirtualMutex * fMakeClassMutex;  ; TModuleDefinition * fModuleDef;  ; OutputStyle_t fOutputStyle;  ; TPathDefinition * fPathDef;  ; PathInfo_t fPathInfo;  ; TString fProductName;  ; Int_t fThreadedClassCount;  ; TIter * fThreadedClassIter;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <THtml.h>. Inheritance diagram for THtml:. This browser is not able to show SVG: try Firefox, Chrome",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:36263,Modifiability,inherit,inherited,36263,"t;  Fill the files available in the file system below fPathInfo.fInputPath. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void * MakeClassThreaded (void *info);  Entry point of worker threads for multi-threaded MakeAll(). ;  . Protected Attributes; Bool_t fBatch;  ; TString fCounter;  ; TString fCounterFormat;  ; DocEntityInfo_t fDocEntityInfo;  ; DocSyntax_t fDocSyntax;  ; TFileDefinition * fFileDef;  ; TGClient * fGClient;  ; LinkInfo_t fLinkInfo;  ; TFileSysDB * fLocalFiles;  ; TVirtualMutex * fMakeClassMutex;  ; TModuleDefinition * fModuleDef;  ; OutputStyle_t fOutputStyle;  ; TPathDefinition * fPathDef;  ; PathInfo_t fPathInfo;  ; TString fProductName;  ; Int_t fThreadedClassCount;  ; TIter * fThreadedClassIter;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <THtml.h>. Inheritance diagram for THtml:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EConvertOutput. enum THtml::EConvertOutput. EnumeratorkNoOutput ; kInterpretedOutput ; kCompiledOutput ; kForceOutput ; kSeparateProcessOutput . Definition at line 233 of file THtml.h. Constructor & Destructor Documentation. ◆ THtml(). THtml::THtml ; (; ). Create a THtml object. ; In case output directory does not exist an error will be printed and gHtml stays 0 also zombie bit will be set. ; Definition at line 1221 of file THtml.cxx. ◆ ~THtml(). THtml::~THtml ; (; ). override . Default destructor. ; Definition at line 1263 of file THtml.cxx. Member Function Documentation. ◆ AddMacroPath(). void THtml::AddMacroPath ; (; const char * ; path). Add path to the directories to be searched for macro files that are to be executed via the TDocMacroDirect",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:39401,Modifiability,inherit,inheritance,39401,"d as filename and store all created canvases in PNG files that are shown next to the converted source. Bitwise-ORing with kForceOutput re-runs the script even if output PNGs exist that are newer than the script. If kCompiledOutput is passed, the script is run through ACLiC (.x filename+) context - line shown verbatim at the top of the page; e.g. for links. If context is non-empty it is expected to also print the title.; NOTE: Output file name is the same as filename, but with extension .html ; Definition at line 1470 of file THtml.cxx. ◆ CopyFileFromEtcDir(). Bool_t THtml::CopyFileFromEtcDir ; (; const char * ; filename); const. Copy a file from $ROOTSYS/etc/html into GetOutputDir() ; Definition at line 1915 of file THtml.cxx. ◆ CreateAuxiliaryFiles(). void THtml::CreateAuxiliaryFiles ; (; ); const. virtual . copy CSS, javascript file, etc to the output dir ; Definition at line 1299 of file THtml.cxx. ◆ CreateHierarchy(). void THtml::CreateHierarchy ; (; ). Create the inheritance hierarchy diagram for all classes. ; Definition at line 1936 of file THtml.cxx. ◆ CreateJavascript(). void THtml::CreateJavascript ; (; ); const. protectedvirtual . Write the default ROOT style sheet. ; Definition at line 1945 of file THtml.cxx. ◆ CreateListOfClasses(). void THtml::CreateListOfClasses ; (; const char * ; filter). protected . Create the list of all known classes. ; Definition at line 1555 of file THtml.cxx. ◆ CreateListOfTypes(). void THtml::CreateListOfTypes ; (; ). protected . Create index of all data types and a page for each typedef-to-class. ; Definition at line 1905 of file THtml.cxx. ◆ CreateStyleSheet(). void THtml::CreateStyleSheet ; (; ); const. protectedvirtual . Write the default ROOT style sheet. ; Definition at line 1952 of file THtml.cxx. ◆ DeclFileName(). static const char * THtml::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 426 of file THtml.h. ◆ GetAuthorTag(). const TString & THtml::GetA",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:42038,Modifiability,inherit,inheriting,42038,"onst. inline . Definition at line 323 of file THtml.h. ◆ GetCounterFormat(). const char * THtml::GetCounterFormat ; (; ); const. inline . Definition at line 303 of file THtml.h. ◆ GetDeclFileName(). bool THtml::GetDeclFileName ; (; TClass * ; cl, . Bool_t ; filesys, . TString & ; out_name . ); const. virtual . Return declaration file name; return the full path if filesys is true. ; Definition at line 2105 of file THtml.cxx. ◆ GetDeclImplFileName(). bool THtml::GetDeclImplFileName ; (; TClass * ; cl, . bool ; filesys, . bool ; decl, . TString & ; out_name . ); const. protectedvirtual . Combined implementation for GetDeclFileName(), GetImplFileName(): Return declaration / implementation file name (depending on decl); return the full path if filesys is true. ; Definition at line 2123 of file THtml.cxx. ◆ GetDerivedClasses(). void THtml::GetDerivedClasses ; (; TClass * ; cl, . std::map< TClass *, Int_t > & ; derived . ); const. fill derived with all classes inheriting from cl and their inheritance distance to cl ; Definition at line 1964 of file THtml.cxx. ◆ GetDirDelimiter(). static const char * THtml::GetDirDelimiter ; (; ). inlinestatic . Definition at line 327 of file THtml.h. ◆ GetDocStyle(). const TString & THtml::GetDocStyle ; (; ); const. inline . Definition at line 316 of file THtml.h. ◆ GetDotDir(). const TString & THtml::GetDotDir ; (; ); const. inline . Definition at line 299 of file THtml.h. ◆ GetEtcDir(). const char * THtml::GetEtcDir ; (; ); const. virtual . Get the directory containing THtml's auxiliary files ($ROOTSYS/etc/html) ; Definition at line 1352 of file THtml.cxx. ◆ GetFileDefinition(). const THtml::TFileDefinition & THtml::GetFileDefinition ; (; ); const. Return the TFileDefinition (or derived) object as set by SetFileDefinition(); create and return a TFileDefinition object if none was set. ; Definition at line 1325 of file THtml.cxx. ◆ GetFooter(). const TString & THtml::GetFooter ; (; ); const. inline . Definition at line 309 of file THtml.h. ",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:42067,Modifiability,inherit,inheritance,42067,"onst. inline . Definition at line 323 of file THtml.h. ◆ GetCounterFormat(). const char * THtml::GetCounterFormat ; (; ); const. inline . Definition at line 303 of file THtml.h. ◆ GetDeclFileName(). bool THtml::GetDeclFileName ; (; TClass * ; cl, . Bool_t ; filesys, . TString & ; out_name . ); const. virtual . Return declaration file name; return the full path if filesys is true. ; Definition at line 2105 of file THtml.cxx. ◆ GetDeclImplFileName(). bool THtml::GetDeclImplFileName ; (; TClass * ; cl, . bool ; filesys, . bool ; decl, . TString & ; out_name . ); const. protectedvirtual . Combined implementation for GetDeclFileName(), GetImplFileName(): Return declaration / implementation file name (depending on decl); return the full path if filesys is true. ; Definition at line 2123 of file THtml.cxx. ◆ GetDerivedClasses(). void THtml::GetDerivedClasses ; (; TClass * ; cl, . std::map< TClass *, Int_t > & ; derived . ); const. fill derived with all classes inheriting from cl and their inheritance distance to cl ; Definition at line 1964 of file THtml.cxx. ◆ GetDirDelimiter(). static const char * THtml::GetDirDelimiter ; (; ). inlinestatic . Definition at line 327 of file THtml.h. ◆ GetDocStyle(). const TString & THtml::GetDocStyle ; (; ); const. inline . Definition at line 316 of file THtml.h. ◆ GetDotDir(). const TString & THtml::GetDotDir ; (; ); const. inline . Definition at line 299 of file THtml.h. ◆ GetEtcDir(). const char * THtml::GetEtcDir ; (; ); const. virtual . Get the directory containing THtml's auxiliary files ($ROOTSYS/etc/html) ; Definition at line 1352 of file THtml.cxx. ◆ GetFileDefinition(). const THtml::TFileDefinition & THtml::GetFileDefinition ; (; ); const. Return the TFileDefinition (or derived) object as set by SetFileDefinition(); create and return a TFileDefinition object if none was set. ; Definition at line 1325 of file THtml.cxx. ◆ GetFooter(). const TString & THtml::GetFooter ; (; ); const. inline . Definition at line 309 of file THtml.h. ",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:50710,Modifiability,inherit,inheritance,50710,"l_t ; force = kFALSE . ). protected . Make HTML files for a single class. ; Input: cdi - doc info for class to process ; Definition at line 2313 of file THtml.cxx. ◆ MakeClassThreaded(). void * THtml::MakeClassThreaded ; (; void * ; info). staticprotected . Entry point of worker threads for multi-threaded MakeAll(). ; info points to an (internal) THtmlThreadInfo object containing the current THtml object, and whether ""force"" was passed to MakeAll(). The thread will poll GetNextClass() until no further class is available. ; Definition at line 2353 of file THtml.cxx. ◆ MakeIndex(). void THtml::MakeIndex ; (; const char * ; filter = ""*""). Create the index files for the product, modules, all types, etc. ; By default all classes are indexed (if filter=""*""); to generate an index for all classes starting with ""XX"", do html.MakeIndex(""XX*""); ; Definition at line 2369 of file THtml.cxx. ◆ MakeTree(). void THtml::MakeTree ; (; const char * ; className, . Bool_t ; force = kFALSE . ). Make an inheritance tree. ; Input: className - name of the class to process ; Definition at line 2393 of file THtml.cxx. ◆ ReplaceSpecialChars(). void THtml::ReplaceSpecialChars ; (; std::ostream & ; , . const char * ;  . ). inline . Definition at line 355 of file THtml.h. ◆ SetAuthorTag(). void THtml::SetAuthorTag ; (; const char * ; tag). inline . Definition at line 277 of file THtml.h. ◆ SetBatch(). void THtml::SetBatch ; (; Bool_t ; batch = kTRUE). inline . Definition at line 352 of file THtml.h. ◆ SetCharset(). void THtml::SetCharset ; (; const char * ; charset). inline . Definition at line 287 of file THtml.h. ◆ SetClassDocTag(). void THtml::SetClassDocTag ; (; const char * ; tag). inline . Definition at line 276 of file THtml.h. ◆ SetCopyrightTag(). void THtml::SetCopyrightTag ; (; const char * ; tag). inline . Definition at line 279 of file THtml.h. ◆ SetCounterFormat(). void THtml::SetCounterFormat ; (; const char * ; format). inline . Definition at line 275 of file THtml.h. ◆ SetDeclFile",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:35682,Performance,multi-thread,multi-threaded,35682," of all data types and a page for each typedef-to-class. ;  ; virtual void CreateStyleSheet () const;  Write the default ROOT style sheet. ;  ; virtual bool GetDeclImplFileName (TClass *cl, bool filesys, bool decl, TString &out_name) const;  Combined implementation for GetDeclFileName(), GetImplFileName(): Return declaration / implementation file name (depending on decl); return the full path if filesys is true. ;  ; TClassDocInfo * GetNextClass ();  Return the next class to be generated for MakeClassThreaded. ;  ; void MakeClass (void *cdi, Bool_t force=kFALSE);  Make HTML files for a single class. ;  ; void SetLocalFiles () const;  Fill the files available in the file system below fPathInfo.fInputPath. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void * MakeClassThreaded (void *info);  Entry point of worker threads for multi-threaded MakeAll(). ;  . Protected Attributes; Bool_t fBatch;  ; TString fCounter;  ; TString fCounterFormat;  ; DocEntityInfo_t fDocEntityInfo;  ; DocSyntax_t fDocSyntax;  ; TFileDefinition * fFileDef;  ; TGClient * fGClient;  ; LinkInfo_t fLinkInfo;  ; TFileSysDB * fLocalFiles;  ; TVirtualMutex * fMakeClassMutex;  ; TModuleDefinition * fModuleDef;  ; OutputStyle_t fOutputStyle;  ; TPathDefinition * fPathDef;  ; PathInfo_t fPathInfo;  ; TString fProductName;  ; Int_t fThreadedClassCount;  ; TIter * fThreadedClassIter;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <THtml.h>. Inheritance diagram for THtml:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EConvertOutput. enum THtml::EConvertOutput. EnumeratorkNoOutput ; kInterpretedOutput ; kCompiledOutput ; kForceOutput ",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:45840,Performance,cache,cached,45840,"st TString & THtml::GetMacroPath ; (; ); const. inline . Definition at line 302 of file THtml.h. ◆ GetMakeClassMutex(). TVirtualMutex * THtml::GetMakeClassMutex ; (; ); const. inline . Definition at line 343 of file THtml.h. ◆ GetModuleDefinition(). const THtml::TModuleDefinition & THtml::GetModuleDefinition ; (; ); const. Return the TModuleDefinition (or derived) object as set by SetModuleDefinition(); create and return a TModuleDefinition object if none was set. ; Definition at line 1311 of file THtml.cxx. ◆ GetModuleDocPath(). const TString & THtml::GetModuleDocPath ; (; ); const. inline . Definition at line 298 of file THtml.h. ◆ GetModuleMacroPath(). void THtml::GetModuleMacroPath ; (; const TString & ; module, . TString & ; out_path . ); const. inline . Definition at line 324 of file THtml.h. ◆ GetModuleNameForClass(). void THtml::GetModuleNameForClass ; (; TString & ; module, . TClass * ; cl . ); const. virtual . Return the module name for a given class. ; Use the cached information from fDocEntityInfo.fClasses. ; Definition at line 1540 of file THtml.cxx. ◆ GetNextClass(). TClassDocInfo * THtml::GetNextClass ; (; ). protected . Return the next class to be generated for MakeClassThreaded. ; Definition at line 1369 of file THtml.cxx. ◆ GetOutputDir(). const TString & THtml::GetOutputDir ; (; Bool_t ; createDir = kTRUE); const. Return the output directory as set by SetOutputDir(). ; Create it if it doesn't exist and if createDir is kTRUE. ; Definition at line 2177 of file THtml.cxx. ◆ GetPathDefinition(). const THtml::TPathDefinition & THtml::GetPathDefinition ; (; ); const. Return the TModuleDefinition (or derived) object as set by SetModuleDefinition(); create and return a TModuleDefinition object if none was set. ; Definition at line 1339 of file THtml.cxx. ◆ GetPathInfo(). const PathInfo_t & THtml::GetPathInfo ; (; ); const. inline . Definition at line 345 of file THtml.h. ◆ GetProductName(). const TString & THtml::GetProductName ; (; ); const. inline . Def",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:50006,Performance,multi-thread,multi-threaded,50006,"ing a name starting with XX, do: html.MakeAll(kFALSE,""XX*""); If force=kFALSE (default), only the classes that have been modified since the previous call to this function will be generated. ; If force=kTRUE, all classes passing the filter will be processed. If numthreads is != -1, use numthreads threads, else decide automatically based on the number of CPUs. ; Definition at line 2226 of file THtml.cxx. ◆ MakeClass() [1/2]. void THtml::MakeClass ; (; const char * ; className, . Bool_t ; force = kFALSE . ). Make HTML files for a single class. ; Input: className - name of the class to process ; Definition at line 2292 of file THtml.cxx. ◆ MakeClass() [2/2]. void THtml::MakeClass ; (; void * ; cdi_void, . Bool_t ; force = kFALSE . ). protected . Make HTML files for a single class. ; Input: cdi - doc info for class to process ; Definition at line 2313 of file THtml.cxx. ◆ MakeClassThreaded(). void * THtml::MakeClassThreaded ; (; void * ; info). staticprotected . Entry point of worker threads for multi-threaded MakeAll(). ; info points to an (internal) THtmlThreadInfo object containing the current THtml object, and whether ""force"" was passed to MakeAll(). The thread will poll GetNextClass() until no further class is available. ; Definition at line 2353 of file THtml.cxx. ◆ MakeIndex(). void THtml::MakeIndex ; (; const char * ; filter = ""*""). Create the index files for the product, modules, all types, etc. ; By default all classes are indexed (if filter=""*""); to generate an index for all classes starting with ""XX"", do html.MakeIndex(""XX*""); ; Definition at line 2369 of file THtml.cxx. ◆ MakeTree(). void THtml::MakeTree ; (; const char * ; className, . Bool_t ; force = kFALSE . ). Make an inheritance tree. ; Input: className - name of the class to process ; Definition at line 2393 of file THtml.cxx. ◆ ReplaceSpecialChars(). void THtml::ReplaceSpecialChars ; (; std::ostream & ; , . const char * ;  . ). inline . Definition at line 355 of file THtml.h. ◆ SetAuthorTag(). void TH",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:4747,Security,access,access,4747,"tml"".; The library name association can be set up using the rootmap facility. For the library in the example above, which contains a dictionary generated from the linkdef MyLinkdef.h, the command to generate the rootmap file is; $ rlibmap -f -r rootmap -l mylib/libMyLib.so -d libCore.so -c MyLinkdef.h Here, -r specifies that the entries for libMyLib should be updated, -l specifies the library we're dealing with, -d its dependencies, and -c its linkdef. The rootmap file must be within one of the LD_LIBRARY_PATH (or PATH for Windows) directories when ROOT is started, otherwise ROOT will not use it.; II.4 Recognizing class documentation; The class documentation has to appear in the header file containing the class, right in front of its declaration. It is introduced by a string defined by Root.Html.Description or SetClassDocTag(). See the section on documentation syntax for further details.; Example:. Root.Html.Description: //____________________The class documentation will show which include statement is to be used and which library needs to be linked to access it. The include file name is determined via TClass::GetDeclFileName(); leading parts are removed if they match any of the ':' separated entries in THtml::GetIncludePath().; II.5 Author, copyright, etc.; During the conversion, THtml will look for some strings (""tags"") in the source file, which have to appear right in front of e.g. the author's name, copyright notice, etc. These tags can be defined with the following environment variables: Root.Html.Author, Root.Html.LastUpdate and Root.Html.Copyright, or with SetAuthorTag(), SetLastUpdateTag(), SetCopyrightTag().; If the LastUpdate tag is not found, the current date and time are used. This is useful when using THtml::MakeAll()'s default option force=kFALSE, in which case THtml generates documentation only for changed classes.; Authors can be a comma separated list of author entries. Each entry has one of the following two formats . Name (non-alpha). ; THtml will ",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:29183,Security,hash,hash,29183," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:730,Testability,log,logs,730,". ROOT: THtml Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; THtml Class Reference. ; Legacy ROOT documentation system. ; Deprecated:We keep THtml for those who still need it for legacy use cases. ROOT has since several years moved to doxygen as documentation generator. THtml is not developed nor supported anymore; please migrate to doxygen instead.; The THtml class is designed to easily document classes, code, and code related text files (like change logs). It generates HTML pages conforming to the XHTML 1.0 transitional specifications; an example of these pages is ROOT's own reference guide. This page was verified to be valid XHTML 1.0 transitional, which proves that all pages generated by THtml can be valid, as long as the user provided XHTML (documentation, header, etc) is valid. You can check the current THtml by clicking this icon: ; Overview: . Usage . Configuration . Input files . Output directory . Linking other documentation . Recognizing class documentation . Author, copyright, etc. . Header and footer . Links to searches, home page, ViewVC . HTML Charset . Documentation syntax . Class description . Class index . Method documentation . Data member documentation . Documentation directives . BEGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentat",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTHtml.html:868,Usability,guid,guide,868,". ROOT: THtml Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; THtml Class Reference. ; Legacy ROOT documentation system. ; Deprecated:We keep THtml for those who still need it for legacy use cases. ROOT has since several years moved to doxygen as documentation generator. THtml is not developed nor supported anymore; please migrate to doxygen instead.; The THtml class is designed to easily document classes, code, and code related text files (like change logs). It generates HTML pages conforming to the XHTML 1.0 transitional specifications; an example of these pages is ROOT's own reference guide. This page was verified to be valid XHTML 1.0 transitional, which proves that all pages generated by THtml can be valid, as long as the user provided XHTML (documentation, header, etc) is valid. You can check the current THtml by clicking this icon: ; Overview: . Usage . Configuration . Input files . Output directory . Linking other documentation . Recognizing class documentation . Author, copyright, etc. . Header and footer . Links to searches, home page, ViewVC . HTML Charset . Documentation syntax . Class description . Class index . Method documentation . Data member documentation . Documentation directives . BEGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentat",MatchSource.WIKI,doc/v632/classTHtml.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTHtml.html
https://root.cern/doc/v632/classTMemberInspector.html:402,Security,access,accessing,402,". ROOT: TMemberInspector Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMemberInspector Class ReferenceCore ROOT classes » Base ROOT classes. ; Abstract base class for accessing the data-members of a class. ; Classes derived from this class can be given as argument to the ShowMembers() methods of ROOT classes. This feature facilitates the writing of class browsers and inspectors. ; Definition at line 31 of file TMemberInspector.h. Classes; class  TParentBuf;  . Public Types; enum  EObjectPointerState { kUnset; , kNoObjectGiven; , kValidObjectGiven; };  . Public Member Functions;  TMemberInspector ();  ; virtual ~TMemberInspector ();  ; void AddToParent (const char *name);  ; void GenericShowMembers (const char *topClassName, const void *obj, Bool_t transientMember);  ; EObjectPointerState GetObjectValidity () const;  ; const char * GetParent () const;  ; Ssiz_t GetParentLen () const;  ; virtual void Inspect (TClass *cl, const char *parent, const char *name, const void *addr);  ; virtual void Inspect (TClass *cl, const char *parent, const char *name, const void *addr, Bool_t);  ; void InspectMember (const char *topclassname, const void *pobj, const char *name, Bool_t transient);  ; template<class T > ; void InspectMember (const T &obj, const char *name, Bool_t isTransient);  ; void InspectMember (const TObject &obj, const char *name, Bool_t isTransient);  ; void InspectMember (TClass *cl, const void *pobj, const char *name, Bool_t isTransient);  ; virtual TClass * IsA () const;  ; virtual Bool_t IsTreatingNonAccessibleTypes ();  ; void RemoveFromParent (Ssiz_t startingAt);  ; void SetObjectValidity (EObjectPointerState val);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Pu",MatchSource.WIKI,doc/v632/classTMemberInspector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemberInspector.html
https://root.cern/doc/v632/classTMemFile.html:4267,Availability,alive,alive,4267,"eCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. ;  ;  TMemFile (const char *name, std::unique_ptr< TBufferFile > buffer);  Constructor to create a read-only TMemFile using an std::unique_ptr<TBufferFile> ;  ;  TMemFile (const TMemFile &orig);  Copying the content of the TMemFile into another TMemFile. ;  ;  ~TMemFile () override;  Close and clean-up file. ;  ; virtual void CopyTo (TBuffer &tobuf) const;  Copy the binary representation of the TMemFile into the TBuffer tobuf. ;  ; virtual Long64_t CopyTo (void *to, Long64_t maxsize) const;  Copy the binary representation of the TMemFile into the memory area starting at 'to' and of length at most 'maxsize' returns the number of bytes actually copied. ;  ; Long64_t GetSize () const override;  Return the current size of the memory file. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; void ResetErrno () const override;  Simply calls TSystem::ResetErrno(). ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Close (Option_t *option="""") override;  Close a file. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; virtual TKey * CreateKey (TDirectory *mother, const TObject *obj, const char *name, Int_t bufsize);  Creates key for object and conver",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:9423,Availability,recover,recover,9423,"ption_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtua",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:22636,Availability,error,error,22636," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer)",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:22725,Availability,error,error,22725,"ave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:22880,Availability,error,error,22880,"hether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:23177,Availability,error,error,23177,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ; ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:26670,Availability,error,error,26670," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t C",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:33110,Availability,alive,alive,33110,"bjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFile (EMode mode) const;  ; bool NeedsToWrite (EMode mode) const;  ; TMemFile & operator= (const TMemFile &)=delete;  ; EMode ParseOption (Option_t *option);  Parse option strings and set fOption. ;  ; void ResetObjects (TDirectoryFile *, TFileMergeInfo *) const;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; Int_t SysClose (Int_t fd) override;  Close the mem file. ;  ; Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence) override;  Seek to a specified position in the file. ;  ; Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime) override;  Perform a stat on the file; see TFile::SysStat(). ;  ; Int_t SysSync (Int_t fd) override;  Sync remaining data to disk. ;  ; Int_t SysWrite (Int_t fd, const void *buf, Int_t len) override;  Write a buffer into the file. ;  ; Int_t SysWriteImpl (Int_t fd, const void *buf, Long64_",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:48649,Availability,alive,alive,48649,"le.h. ◆ MemRead(). Long64_t TMemFile::MemRead ; (; Int_t ; fd, . void * ; buf, . Long64_t ; len . ); const. protected . ◆ NeedsExistingFile(). bool TMemFile::NeedsExistingFile ; (; EMode ; mode); const. inlineprotected . Definition at line 83 of file TMemFile.h. ◆ NeedsToWrite(). bool TMemFile::NeedsToWrite ; (; EMode ; mode); const. inlineprotected . Definition at line 82 of file TMemFile.h. ◆ operator=(). TMemFile & TMemFile::operator= ; (; const TMemFile & ; ). protecteddelete . ◆ ParseOption(). TMemFile::EMode TMemFile::ParseOption ; (; Option_t * ; option). protected . Parse option strings and set fOption. ; Definition at line 88 of file TMemFile.cxx. ◆ Print(). void TMemFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TFile.; Definition at line 298 of file TMemFile.cxx. ◆ ResetAfterMerge(). void TMemFile::ResetAfterMerge ; (; TFileMergeInfo * ; info). overridevirtual . Wipe all the data from the permanent buffer but keep, the in-memory object alive. ; Reimplemented from TDirectoryFile.; Definition at line 320 of file TMemFile.cxx. ◆ ResetErrno(). void TMemFile::ResetErrno ; (; ); const. overridevirtual . Simply calls TSystem::ResetErrno(). ; Reimplemented from TFile.; Definition at line 688 of file TMemFile.cxx. ◆ ResetObjects(). void TMemFile::ResetObjects ; (; TDirectoryFile * ; directory, . TFileMergeInfo * ; info . ); const. protected . Wipe all the data from the permanent buffer but keep, the in-memory object alive. ; Definition at line 387 of file TMemFile.cxx. ◆ Streamer(). void TMemFile::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a TFile object. ; Reimplemented from TFile.; Reimplemented in TParallelMergingFile. ◆ StreamerNVirtual(). void TMemFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 109 of file TMemFile.h. ◆ SysClose(). Int_t TMemFile::SysClose ; (; Int_t ; fd). overrideprotectedvirtual . Close the mem file. ; Rei",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:49130,Availability,alive,alive,49130,"ete . ◆ ParseOption(). TMemFile::EMode TMemFile::ParseOption ; (; Option_t * ; option). protected . Parse option strings and set fOption. ; Definition at line 88 of file TMemFile.cxx. ◆ Print(). void TMemFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TFile.; Definition at line 298 of file TMemFile.cxx. ◆ ResetAfterMerge(). void TMemFile::ResetAfterMerge ; (; TFileMergeInfo * ; info). overridevirtual . Wipe all the data from the permanent buffer but keep, the in-memory object alive. ; Reimplemented from TDirectoryFile.; Definition at line 320 of file TMemFile.cxx. ◆ ResetErrno(). void TMemFile::ResetErrno ; (; ); const. overridevirtual . Simply calls TSystem::ResetErrno(). ; Reimplemented from TFile.; Definition at line 688 of file TMemFile.cxx. ◆ ResetObjects(). void TMemFile::ResetObjects ; (; TDirectoryFile * ; directory, . TFileMergeInfo * ; info . ); const. protected . Wipe all the data from the permanent buffer but keep, the in-memory object alive. ; Definition at line 387 of file TMemFile.cxx. ◆ Streamer(). void TMemFile::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a TFile object. ; Reimplemented from TFile.; Reimplemented in TParallelMergingFile. ◆ StreamerNVirtual(). void TMemFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 109 of file TMemFile.h. ◆ SysClose(). Int_t TMemFile::SysClose ; (; Int_t ; fd). overrideprotectedvirtual . Close the mem file. ; Reimplemented from TFile.; Definition at line 590 of file TMemFile.cxx. ◆ SysOpen(). Int_t TMemFile::SysOpen ; (; const char * ; pathname, . Int_t ; flags, . UInt_t ; mode . ). overrideprotectedvirtual . Open a file in 'MemFile'. ; Reimplemented from TFile.; Definition at line 573 of file TMemFile.cxx. ◆ SysRead(). Int_t TMemFile::SysRead ; (; Int_t ; fd, . void * ; buf, . Int_t ; len . ). overrideprotectedvirtual . Read specified number of bytes from current offset into the buff",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:44374,Energy Efficiency,allocate,allocated,44374,"ddress of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  . #include <TMemFile.h>. Inheritance diagram for TMemFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ExternalDataPtr_t. using TMemFile::ExternalDataPtr_t = std::shared_ptr<const std::vector<char> >. Definition at line 21 of file TMemFile.h. Member Enumeration Documentation. ◆ EMode. enum class TMemFile::EMode. strongprotected . EnumeratorkCreate ; kRecreate ; kUpdate ; kRead . Definition at line 75 of file TMemFile.h. Constructor & Destructor Documentation. ◆ TMemFile() [1/6]. TMemFile::TMemFile ; (; const char * ; path, . Option_t * ; option = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Long64_t ; defBlockSize = 0LL . ). Usual Constructor. ; The defBlockSize parameter defines the size of the blocks of memory allocated when expanding the underlying TMemFileBuffer. If the value 0 is passed, the default block size, fgDefaultBlockSize, is adopted. See the TFile constructor for details. ; Definition at line 162 of file TMemFile.cxx. ◆ TMemFile() [2/6]. TMemFile::TMemFile ; (; const char * ; name, . char * ; buffer, . Long64_t ; size, . Option_t * ; option = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, . Long64_t ; defBlockSize = 0LL . ). Usual Constructor. See the TFile constructor for details. Copy data from buffer. ; Definition at line 170 of file TMemFile.cxx. ◆ TMemFile() [3/6]. TMemFile::TMemFile ; (; const char * ; name, . ExternalDataPtr_t ; data . ). Constructor to create a TMemFile re-using external storage. ; Definition at line 133 of file TMemFile.cxx. ◆ TMemFile() [4/6]. TMemFile::TMemFile ; (; const char * ; name, . const ZeroCopyView_t & ; datarange . ). Constructor to create a TMemFile re-using external ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:22642,Integrability,message,message,22642," *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer)",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:23183,Integrability,message,message,23183,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ; ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:23931,Integrability,message,message,23931,"ct with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be o",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:26676,Integrability,message,message,26676," operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t C",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:27049,Integrability,message,message,27049," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;  ; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ; ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:29243,Integrability,protocol,protocol,29243,"const char * GetCacheFileDir ();  Get the directory where to locally stage/cache remote files. ;  ; static const TUrl * GetEndpointUrl (const char *name);  Get final URL for file being opened asynchronously. ;  ; static Long64_t GetFileBytesRead ();  Static function returning the total number of bytes read from all files. ;  ; static Long64_t GetFileBytesWritten ();  Static function returning the total number of bytes written to all files. ;  ; static Long64_t GetFileCounter ();  ; static Int_t GetFileReadCalls ();  Static function returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:748,Modifiability,inherit,inherited,748,". ROOT: TMemFile Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TMemFile Class ReferenceInput/Output Library. ; A TMemFile is like a normal TFile except that it reads and writes only from memory. ; Definition at line 19 of file TMemFile.h. Classes; struct  TMemBlock;  ; struct  ZeroCopyView_t;  A read-only memory range which we do not control. More...;  . Public Types; using ExternalDataPtr_t = std::shared_ptr< const std::vector< char > >;  ;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsis",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:1772,Modifiability,inherit,inherited,1772,"AOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMemFile (const char *name, char *buffer, Long64_t size, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. See the TFile constructor for details. Copy data from buffer. ;  ;  TMemFile (const char *name, const ZeroCopyView_t &datarange);  Constructor to crea",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:1878,Modifiability,inherit,inherited,1878,"AOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMemFile (const char *name, char *buffer, Long64_t size, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. See the TFile constructor for details. Copy data from buffer. ;  ;  TMemFile (const char *name, const ZeroCopyView_t &datarange);  Constructor to crea",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:4511,Modifiability,inherit,inherited,4511," TMemFile into another TMemFile. ;  ;  ~TMemFile () override;  Close and clean-up file. ;  ; virtual void CopyTo (TBuffer &tobuf) const;  Copy the binary representation of the TMemFile into the TBuffer tobuf. ;  ; virtual Long64_t CopyTo (void *to, Long64_t maxsize) const;  Copy the binary representation of the TMemFile into the memory area starting at 'to' and of length at most 'maxsize' returns the number of bytes actually copied. ;  ; Long64_t GetSize () const override;  Return the current size of the memory file. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; void ResetAfterMerge (TFileMergeInfo *) override;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; void ResetErrno () const override;  Simply calls TSystem::ResetErrno(). ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () override;  File destructor. ;  ; void Close (Option_t *option="""") override;  Close a file. ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual Bool_t Cp (const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy this file to the dst URL. ;  ; virtual TKey * CreateKey (TDirectory *mother, const TObject *obj, const char *name, Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; virtual TKey * CreateKey (TDirectory *mother, const void *obj, const TClass *cl, const char *name, Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; void Delete (const char *namecycle="""") override;  Delete object namecycle. ;  ; void Draw (O",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:11865,Modifiability,inherit,inherited,11865,"amerNVirtual_b);  ; void SumBuffer (Int_t bufsize);  Increment statistics for buffer sizes of objects in this file. ;  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) const override;  One can not save a const TDirectory object. ;  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) override;  Write memory objects to this file. ;  ; virtual Bool_t WriteBuffer (const char *buf, Int_t len);  Write a buffer to the file. ;  ; virtual void WriteFree ();  Write FREE linked list on the file. ;  ; virtual void WriteHeader ();  Write File Header. ;  ; virtual UShort_t WriteProcessID (TProcessID *pid);  Check if the ProcessID pidd is already in the file, if not, add it and return the index number in the local file list. ;  ; virtual void WriteStreamerInfo ();  Write the list of TStreamerInfo as a single object in this file The class Streamer description for all classes written to this file is saved. ;  ;  Public Member Functions inherited from TDirectoryFile;  TDirectoryFile ();  Default TDirectoryFile constructor. ;  ;  TDirectoryFile (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new TDirectoryFile. ;  ;  ~TDirectoryFile () override;  Destructor. ;  ; void Add (TObject *obj, Bool_t replace=kFALSE) override;  ; void Append (TObject *obj, Bool_t replace=kFALSE) override;  Append object to this directory. ;  ; Int_t AppendKey (TKey *key) override;  Insert key in the linked list of keys of this directory. ;  ; void Browse (TBrowser *b) override;  Browse the content of the directory. ;  ; void Build (TFile *motherFile=nullptr, TDirectory *motherDir=nullptr) override;  ; Bool_t cd () override;  Change current directory to ""this"" directory. ;  ; Bool_t cd (const char *path) override;  Change current directory the directory described by the path if given one. ;  ; TObject * CloneObject (const TObject *obj, Bool_t autoadd=kTRUE) override;  Make a clone of an object using the Streamer facilit",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:17500,Modifiability,inherit,inherited,17500,"d in the dictionary of the parent class and store the corresponding exec number into fBits. ;  ; void SetWritable (Bool_t writable=kTRUE) override;  Set the new value of fWritable recursively. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteDirHeader () override;  Overwrite the Directory header record. ;  ; void WriteKeys () override;  Write Keys linked list on the file. ;  ; Int_t WriteObjectAny (const void *obj, const char *classname, const char *name, Option_t *option="""", Int_t bufsize=0) override;  Write object from pointer of class classname in this directory. ;  ; Int_t WriteObjectAny (const void *obj, const TClass *cl, const char *name, Option_t *option="""", Int_t bufsize=0) override;  Write object of class with dictionary cl in this directory. ;  ; Int_t WriteTObject (const TObject *obj, const char *name=nullptr, Option_t *option="""", Int_t bufsize=0) override;  Write object obj to this directory. ;  ;  Public Member Functions inherited from TDirectory;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; void Clear (Option_t *option="""") override;  Delete all objects from a Directory list. ;  ; virtual void DeleteAll (Option_t *option="""");  Delete all objects from memory. ;  ; TObject * FindObject (const char *name) const override;  Find object by name in the list of memory objects. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object in the list of memory objects. ;  ; template<class T > ; T * Get (const char *namecycle);  See documentation of TDirectoryFile::Get(const char *namecycle) ;  ; virtual TList * GetList () const;  ; TObject * GetMother () const;  ; TDirectory * GetMotherDir () const;  ; template<class T > ; void GetObject (const char *namecycle, T *&ptr);  Get an object with proper type checking. ;  ; virtual const char * G",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:19934,Modifiability,inherit,inherited,19934,"ecursively remove object from a Directory. ;  ; virtual TObject * Remove (TObject *);  Remove an object from the in-memory list. ;  ; virtual void SetMother (TObject *mother);  ; void SetName (const char *newname) override;  Set the name for directory If the directory name is changed after the directory was written once, ROOT currently would NOT change the name of correspondent key in the mother directory. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; template<typename T > ; std::enable_if_t<!std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ; template<typename T > ; std::enable_if_t< std::is_base_of< TObject, T >::value, Int_t > WriteObject (const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0);  Write an object with proper type checking. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:21434,Modifiability,inherit,inherited,21434," *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:22272,Modifiability,inherit,inheritance,22272,"amer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics sys",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:24029,Modifiability,inherit,inherits,24029,"Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op).",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:24146,Modifiability,inherit,inherits,24146,"nst char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:27282,Modifiability,inherit,inherited,27282,"t);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;  ; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *handle);  Get status of the async open request related to 'handle'. ;  ; static const char * GetCacheFileDir ();  Get the directory where to locally stage/cache remote files. ;  ; static cons",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:30515,Modifiability,inherit,inherited,30515,"l_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:30733,Modifiability,inherit,inherited,30733,"l_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:31566,Modifiability,inherit,inherited,31566,"AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFil",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:31776,Modifiability,inherit,inherited,31776,"AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFil",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:32364,Modifiability,inherit,inherited,32364,"st char *namecycle, char *name, Short_t &cycle, const size_t namesize=0);  Decode a namecycle ""aap;2"" into name ""aap"" and cycle ""2"". ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFile (EMode mode) const;  ; bool NeedsToWrite (EMode mode) const;  ; TMemFile & operator= (const TMemFile &)=delete;  ; EMode ParseOption (Option_t *option);  Parse option strings and set fOption. ;  ; void ResetObjects (TDirectoryFile *, TFileMergeInfo *) const;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; Int_t SysClose (Int_t fd) override;  Close the mem file. ;  ; Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:32555,Modifiability,inherit,inherited,32555,"om TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum class  EMode { kCreate; , kRecreate; , kUpdate; , kRead; };  ;  Protected Types inherited from TDirectory; using SharedGDirectory_t = std::shared_ptr< std::atomic< TDirectory * > >;  Pointer to a list of TContext object pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; Bool_t IsExternalData () const;  ; Long64_t MemRead (Int_t fd, void *buf, Long64_t len) const;  ; bool NeedsExistingFile (EMode mode) const;  ; bool NeedsToWrite (EMode mode) const;  ; TMemFile & operator= (const TMemFile &)=delete;  ; EMode ParseOption (Option_t *option);  Parse option strings and set fOption. ;  ; void ResetObjects (TDirectoryFile *, TFileMergeInfo *) const;  Wipe all the data from the permanent buffer but keep, the in-memory object alive. ;  ; Int_t SysClose (Int_t fd) override;  Close the mem file. ;  ; Int_t SysOpen (const char *pathname, Int_t flags, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Lo",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:34113,Modifiability,inherit,inherited,34113,"s, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence) override;  Seek to a specified position in the file. ;  ; Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime) override;  Perform a stat on the file; see TFile::SysStat(). ;  ; Int_t SysSync (Int_t fd) override;  Sync remaining data to disk. ;  ; Int_t SysWrite (Int_t fd, const void *buf, Int_t len) override;  Write a buffer into the file. ;  ; Int_t SysWriteImpl (Int_t fd, const void *buf, Long64_t len);  Write a buffer into the file. ;  ;  Protected Member Functions inherited from TFile; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise direc",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:35115,Modifiability,inherit,inherited,35115,"ry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr); ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:35505,Modifiability,inherit,inherited,35505,"l void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:36394,Modifiability,inherit,inherited,36394,"ted data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TContext *ctxt);  Register a TContext pointing to this TDirectory object. ;  ; void RegisterGDirectory (SharedGDirectory_t &ptr);  Register a std::atomic<TDirectory*> that will soon be pointing to this TDirectory object. ;  ; void UnregisterContext (TContext *ctxt);  UnRegister a TContext pointing to this TDirectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TMemBlock fBlockList;  Collection of memory blocks of size fgDefaultBlockSize. ;  ; Long64_t fBlockOffset {0};  Seek offset within the block. ;  ; TMemBlock * fBlockSeek {nullptr};  Pointer to the block we seeked to. ;  ; Long64_t fDefaultBlockSize = fgDefaultBlockSize;  ; ExternalDataPtr_t fExternalData;  shared file data / content ;  ; Bool_t fIsOwnedByROOT {kFALSE};  if this is a C-style memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:37160,Modifiability,inherit,inherited,37160,"ectory object. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TMemBlock fBlockList;  Collection of memory blocks of size fgDefaultBlockSize. ;  ; Long64_t fBlockOffset {0};  Seek offset within the block. ;  ; TMemBlock * fBlockSeek {nullptr};  Pointer to the block we seeked to. ;  ; Long64_t fDefaultBlockSize = fgDefaultBlockSize;  ; ExternalDataPtr_t fExternalData;  shared file data / content ;  ; Bool_t fIsOwnedByROOT {kFALSE};  if this is a C-style memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any) ;  ; TArrayC * fClassIndex {nullptr};  !Index of TStreamerInfo classes written to this file ;  ; Int_t fCompress {0};  Compression level and algorithm. ;  ; Int_t fD {-1};  File descriptor. ;  ; Long64_t fEND {0};  Last used byte in file. ;  ; TList * fFree {nullptr};  Free segments linked list table. ;  ; b",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:40198,Modifiability,inherit,inherited,40198,;  !Seek offset cache ;  ; TList * fOpenPhases {nullptr};  !Time info about open phases ;  ; TString fOption;  File options. ;  ; TObjArray * fProcessIDs {nullptr};  !Array of pointers to TProcessIDs ;  ; Int_t fReadCalls {0};  Number of read calls ( not counting the cache calls ) ;  ; TString fRealName;  Effective real file name (not original url) ;  ; Long64_t fSeekFree {0};  Location on disk of free segments structure. ;  ; Long64_t fSeekInfo {0};  Location on disk of StreamerInfo record. ;  ; Double_t fSum2Buffer {0};  Sum of squares of buffer sizes of objects written so far. ;  ; Double_t fSumBuffer {0};  Sum of buffer sizes of objects written so far. ;  ; Char_t fUnits {0};  Number of bytes for file pointers. ;  ; TUrl fUrl;  !URL of file ;  ; Int_t fVersion {0};  File format version. ;  ; std::mutex fWriteMutex;  !Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to create new TKeys. ;  ; TDatime fDatimeC;  Date and time when directory is created. ;  ; TDatime fDatimeM;  Date and time of last modification. ;  ; TFile * fFile {nullptr};  Pointer to current file in memory. ;  ; TList * fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vect,MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:41034,Modifiability,inherit,inherited,41034,Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to create new TKeys. ;  ; TDatime fDatimeC;  Date and time when directory is created. ;  ; TDatime fDatimeM;  Date and time of last modification. ;  ; TFile * fFile {nullptr};  Pointer to current file in memory. ;  ; TList * fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRU,MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:41490,Modifiability,inherit,inherited,41490," fKeys {nullptr};  Pointer to keys list in memory. ;  ; Bool_t fModified {kFALSE};  True if directory has been modified. ;  ; Int_t fNbytesKeys {0};  Number of bytes for the keys. ;  ; Int_t fNbytesName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = T",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:41675,Modifiability,inherit,inherited,41675,"esName {0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgR",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:43004,Modifiability,inherit,inherited,43004,"bjects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . Additional Inherited Members;  Static Protected Member Functions inherited from TDirectory; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  . #include <TMemFile.h>. Inheritance diagram for TMemFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ExternalDataPtr_t. using TMemFile::ExternalDataPtr_t = std::shared_ptr<const std::vector<char> >. Definition at line 21 of file TMemFile.h. Member Enumeration Documentation. ◆ EMode. enum class TMemFile::EMode. strongprotected . EnumeratorkCreate ;",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:43182,Modifiability,inherit,inherited,43182,"Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . Additional Inherited Members;  Static Protected Member Functions inherited from TDirectory; static Bool_t Cd1 (const char *path);  Change current directory to ""path"". ;  ; static SharedGDirectory_t & GetSharedLocalCurrentDirectory ();  Return the (address of) a shared pointer to the struct holding the actual thread local gDirectory pointer and the atomic_flag for its lock. ;  . #include <TMemFile.h>. Inheritance diagram for TMemFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ExternalDataPtr_t. using TMemFile::ExternalDataPtr_t = std::shared_ptr<const std::vector<char> >. Definition at line 21 of file TMemFile.h. Member Enumeration Documentation. ◆ EMode. enum class TMemFile::EMode. strongprotected . EnumeratorkCreate ; kRecreate ; kUpdate ; kRead . Definition at line 75 of file TMemFile.h. Constructor & Destructor Documentation. ◆ TMemFile() [1/6]. TMemFile::TMemFile ; (; const char * ; path, . Option_t * ; option = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RComp",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:6380,Performance,cache,cache,6380,"Int_t bufsize);  Creates key for object and converts data to buffer. ;  ; void Delete (const char *namecycle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; virtual void DrawMap (const char *keys=""*"", Option_t *option="""");  Draw map of objects in this file. ;  ; void FillBuffer (char *&buffer) override;  Encode file output buffer. ;  ; virtual void Flush ();  Synchronize a file's in-memory and on-disk states. ;  ; TArchiveFile * GetArchive () const;  ; Long64_t GetArchiveOffset () const;  ; Int_t GetBestBuffer () const;  Return the best buffer size of objects on this file. ;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; virtual Int_t GetBytesToPrefetch () const;  Max number of bytes to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbyt",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:6473,Performance,cache,cache,6473,"cle="""") override;  Delete object namecycle. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; virtual void DrawMap (const char *keys=""*"", Option_t *option="""");  Draw map of objects in this file. ;  ; void FillBuffer (char *&buffer) override;  Encode file output buffer. ;  ; virtual void Flush ();  Synchronize a file's in-memory and on-disk states. ;  ; TArchiveFile * GetArchive () const;  ; Long64_t GetArchiveOffset () const;  ; Int_t GetBestBuffer () const;  Return the best buffer size of objects on this file. ;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; virtual Int_t GetBytesToPrefetch () const;  Max number of bytes to prefetch. ;  ; virtual Long64_t GetBytesWritten () const;  Return the total number of bytes written so far to the file. ;  ; TFileCacheRead * GetCacheRead (const TObject *tree=nullptr) const;  Return a pointer to the current read cache. ;  ; TFileCacheWrite * GetCacheWrite () const;  Return a pointer to the current write cache. ;  ; TArrayC * GetClassIndex () const;  ; Int_t GetCompressionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Lo",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:7602,Performance,cache,cached,7602,"ssionAlgorithm () const;  ; Float_t GetCompressionFactor ();  Return the file compression factor. ;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Long64_t GetEND () const;  ; virtual const TUrl * GetEndpointUrl () const;  ; virtual Int_t GetErrno () const;  Method returning errno. ;  ; Int_t GetFd () const;  ; TList * GetListOfFree () const;  ; TObjArray * GetListOfProcessIDs () const;  ; virtual Int_t GetNbytesFree () const;  ; virtual Int_t GetNbytesInfo () const;  ; virtual TString GetNewUrl ();  ; virtual Int_t GetNfree () const;  ; virtual Int_t GetNProcessIDs () const;  ; Option_t * GetOption () const override;  ; virtual Int_t GetReadCalls () const;  ; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first, Long64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, const char *classes=""*"", Option_t *option=""new"");  Generate source code necessary to access the objects stored in the file. ;  ; virtual void Map ();  ; virtual void Map (Option_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRU",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:9738,Performance,cache,cache,9738,"ad a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ; ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:9829,Performance,cache,cache,9829,"ad a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ; ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:9886,Performance,cache,cache,9886," file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ;  ; Int_t Sizeof () const override;  Return the size in bytes of the file header. ;  ; void StreamerNVirtual (TBuffer &Cl",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:9922,Performance,cache,cache,9922," file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeTo pos=kBeg);  Set position from where to start reading. ;  ; virtual void SetOption (Option_t *option="">"");  ; virtual void SetReadCalls (Int_t readcalls=0);  ; virtual void ShowStreamerInfo ();  Show the StreamerInfo of all classes written to this file. ;  ; Int_t Sizeof () const override;  Return the size in bytes of the file header. ;  ; void StreamerNVirtual (TBuffer &Cl",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:14728,Performance,perform,performed,14728,"ject with name. ;  ; template<class T > ; T * Get (const char *namecycle);  See documentation of TDirectoryFile::Get(const char *namecycle) ;  ; TObject * Get (const char *namecycle) override;  Return pointer to object identified by namecycle. ;  ; Int_t GetBufferSize () const override;  Return the buffer size to create new TKeys. ;  ; const TDatime & GetCreationDate () const;  ; TDirectory * GetDirectory (const char *apath, Bool_t printError=false, const char *funcname=""GetDirectory"") override;  Find a directory named ""apath"". ;  ; TFile * GetFile () const override;  ; TKey * GetKey (const char *name, Short_t cycle=9999) const override;  Return pointer to key with name,cycle. ;  ; TList * GetListOfKeys () const override;  ; const TDatime & GetModificationDate () const;  ; Int_t GetNbytesKeys () const override;  ; Int_t GetNkeys () const override;  ; void * GetObjectChecked (const char *namecycle, const char *classname) override;  See documentation of TDirectoryFile::GetObjectCheck(const char *namecycle, const TClass *cl) ;  ; void * GetObjectChecked (const char *namecycle, const TClass *cl) override;  Return pointer to object identified by namecycle if and only if the actual object is a type suitable to be stored as a pointer to a ""expectedClass"" If expectedClass is null, no check is performed. ;  ; void * GetObjectUnchecked (const char *namecycle) override;  Return pointer to object identified by namecycle. ;  ; Long64_t GetSeekDir () const override;  ; Long64_t GetSeekKeys () const override;  ; Long64_t GetSeekParent () const override;  ; Bool_t IsModified () const override;  ; Bool_t IsWritable () const override;  ; TDirectory * mkdir (const char *name, const char *title="""", Bool_t returnExistingDirectory=kFALSE) override;  Create a sub-directory ""a"" or a hierarchy of sub-directories ""a/b/c/..."". ;  ; TFile * OpenFile (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t neto",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:28260,Performance,cache,cache,28260,"ar * DeclFileName ();  ;  Static Public Member Functions inherited from TFile; static TFileOpenHandle * AsyncOpen (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Submit an asynchronous open request. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Cp (const char *src, const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000);  Allows to copy file from src to dst URL. ;  ; static TFile *& CurrentFile ();  Return the current ROOT file if any. ;  ; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *handle);  Get status of the async open request related to 'handle'. ;  ; static const char * GetCacheFileDir ();  Get the directory where to locally stage/cache remote files. ;  ; static const TUrl * GetEndpointUrl (const char *name);  Get final URL for file being opened asynchronously. ;  ; static Long64_t GetFileBytesRead ();  Static function returning the total number of bytes read from all files. ;  ; static Long64_t GetFileBytesWritten ();  Static function returning the total number of bytes written to all files. ;  ; static Long64_t GetFileCounter ();  ; static Int_t GetFileReadCalls ();  Static function returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:29675,Performance,cache,cacheDir,29675,"nction returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public M",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:29793,Performance,cache,cache,29793,"nction returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public M",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:30451,Performance,cache,cache,30451,"=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static std::atomic< TDirectory * > & CurrentDirectory ();  Return the current directory for the current thread. ;  ; static const char * DeclFileName ();  ; static void DecodeNameCycle (const char *namecy",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:34367,Performance,cache,cache,34367,"s, UInt_t mode) override;  Open a file in 'MemFile'. ;  ; Int_t SysRead (Int_t fd, void *buf, Int_t len) override;  Read specified number of bytes from current offset into the buffer. ;  ; Int_t SysReadImpl (Int_t fd, void *buf, Long64_t len);  Read specified number of bytes from current offset into the buffer. ;  ; Long64_t SysSeek (Int_t fd, Long64_t offset, Int_t whence) override;  Seek to a specified position in the file. ;  ; Int_t SysStat (Int_t fd, Long_t *id, Long64_t *size, Long_t *flags, Long_t *modtime) override;  Perform a stat on the file; see TFile::SysStat(). ;  ; Int_t SysSync (Int_t fd) override;  Sync remaining data to disk. ;  ; Int_t SysWrite (Int_t fd, const void *buf, Int_t len) override;  Write a buffer into the file. ;  ; Int_t SysWriteImpl (Int_t fd, const void *buf, Long64_t len);  Write a buffer into the file. ;  ;  Protected Member Functions inherited from TFile; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise direc",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:34989,Performance,cache,cache,34989,"e a buffer into the file. ;  ; Int_t SysWriteImpl (Int_t fd, const void *buf, Long64_t len);  Write a buffer into the file. ;  ;  Protected Member Functions inherited from TFile; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for direct",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:35075,Performance,cache,cache,35075,"64_t len);  Write a buffer into the file. ;  ;  Protected Member Functions inherited from TFile; virtual Long64_t DirCreateEntry (TDirectory *);  ; virtual Int_t DirReadKeys (TDirectory *);  ; virtual void DirWriteHeader (TDirectory *);  ; virtual void DirWriteKeys (TDirectory *);  ; Bool_t FlushWriteCache ();  Flush the write cache if active. ;  ; virtual EAsyncOpenStatus GetAsyncOpenStatus ();  ; virtual InfoListRet GetStreamerInfoListImpl (bool lookupSICache);  See documentation of GetStreamerInfoList for more details. ;  ; virtual void Init (Bool_t create);  Initialize a TFile object. ;  ; Int_t MakeProjectParMake (const char *packname, const char *filename);  Create makefile at 'filemake' for PAR package 'pack'. ;  ; Int_t MakeProjectParProofInf (const char *packname, const char *proofinfdir);  Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'. ;  ; Int_t ReadBufferViaCache (char *buf, Int_t len);  Read buffer via cache. ;  ; Int_t WriteBufferViaCache (const char *buf, Int_t len);  Write buffer via cache. ;  ;  Protected Member Functions inherited from TDirectoryFile; void BuildDirectoryFile (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.) ;  ; void InitDirectoryFile (TClass *cl=nullptr);  Initialize the key associated with this directory (and the related data members. ;  ;  Protected Member Functions inherited from TDirectory;  TDirectory (const TDirectory &directory)=delete;  ; void BuildDirectory (TFile *motherFile, TDirectory *motherDir);  Initialise directory to defaults. ;  ; Bool_t cd1 (const char *path);  flag to add histograms, graphs,etc to the directory ;  ; void CleanTargets ();  Clean the pointers to this object (gDirectory, TContext, etc.). ;  ; void FillFullPath (TString &buf) const;  Recursive method to fill full path for directory. ;  ; void operator= (const TDirectory &)=delete;  ; void RegisterContext (TCo",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:37865,Performance,cache,cache,37865,"memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any) ;  ; TArrayC * fClassIndex {nullptr};  !Index of TStreamerInfo classes written to this file ;  ; Int_t fCompress {0};  Compression level and algorithm. ;  ; Int_t fD {-1};  File descriptor. ;  ; Long64_t fEND {0};  Last used byte in file. ;  ; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:37939,Performance,cache,cache,37939,"memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any) ;  ; TArrayC * fClassIndex {nullptr};  !Index of TStreamerInfo classes written to this file ;  ; Int_t fCompress {0};  Compression level and algorithm. ;  ; Int_t fD {-1};  File descriptor. ;  ; Long64_t fEND {0};  Last used byte in file. ;  ; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:38023,Performance,cache,cache,38023,"memory region ;  ; Long64_t fSize {0};  Total file size (sum of the size of the chunks) ;  ; Long64_t fSysOffset {0};  Seek offset in file. ;  ;  Protected Attributes inherited from TFile; TArchiveFile * fArchive {nullptr};  !Archive file from which we read this file ;  ; Long64_t fArchiveOffset {0};  !Offset at which file starts in archive ;  ; TFileOpenHandle * fAsyncHandle {nullptr};  !For proper automatic cleanup ;  ; EAsyncOpenStatus fAsyncOpenStatus {kAOSNotAsync};  !Status of an asynchronous open request ;  ; Long64_t fBEGIN {0};  First used byte in file. ;  ; Long64_t fBytesRead {0};  Number of bytes read from this file. ;  ; Long64_t fBytesReadExtra {0};  Number of extra bytes (overhead) read by the readahead buffer. ;  ; Long64_t fBytesWrite {0};  Number of bytes written to this file. ;  ; TFileCacheRead * fCacheRead {nullptr};  !Pointer to the read cache (if any) ;  ; TMap * fCacheReadMap {nullptr};  !Pointer to the read cache (if any) ;  ; TFileCacheWrite * fCacheWrite {nullptr};  !Pointer to the write cache (if any) ;  ; TArrayC * fClassIndex {nullptr};  !Index of TStreamerInfo classes written to this file ;  ; Int_t fCompress {0};  Compression level and algorithm. ;  ; Int_t fD {-1};  File descriptor. ;  ; Long64_t fEND {0};  Last used byte in file. ;  ; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:39247,Performance,cache,cache,39247,"; TList * fFree {nullptr};  Free segments linked list table. ;  ; bool fGlobalRegistration = true;  ! if true, bypass use of global lists ;  ; TList * fInfoCache {nullptr};  !Cached list of the streamer infos in this file ;  ; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes for StreamerInfo record. ;  ; Bool_t fNoAnchorInName {kFALSE};  !True if we don't want to force the anchor to be appended to the file name ;  ; Int_t fNProcessIDs {0};  Number of TProcessID written to this file. ;  ; Long64_t fOffset {0};  !Seek offset cache ;  ; TList * fOpenPhases {nullptr};  !Time info about open phases ;  ; TString fOption;  File options. ;  ; TObjArray * fProcessIDs {nullptr};  !Array of pointers to TProcessIDs ;  ; Int_t fReadCalls {0};  Number of read calls ( not counting the cache calls ) ;  ; TString fRealName;  Effective real file name (not original url) ;  ; Long64_t fSeekFree {0};  Location on disk of free segments structure. ;  ; Long64_t fSeekInfo {0};  Location on disk of StreamerInfo record. ;  ; Double_t fSum2Buffer {0};  Sum of squares of buffer sizes of objects written so far. ;  ; Double_t fSumBuffer {0};  Sum of buffer sizes of objects written so far. ;  ; Char_t fUnits {0};  Number of bytes for file pointers. ;  ; TUrl fUrl;  !URL of file ;  ; Int_t fVersion {0};  File format version. ;  ; std::mutex fWriteMutex;  !Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to crea",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:39499,Performance,cache,cache,39499,"; Bool_t fInitDone {kFALSE};  !True if the file has been initialized ;  ; Bool_t fIsArchive {kFALSE};  !True if this is a pure archive file ;  ; Bool_t fIsPcmFile {kFALSE};  !True if the file is a ROOT pcm file. ;  ; Bool_t fIsRootFile {kTRUE};  !True is this is a ROOT file, raw file otherwise ;  ; Bool_t fMustFlush {kTRUE};  !True if the file buffers must be flushed ;  ; Int_t fNbytesFree {0};  Number of bytes for free segments structure. ;  ; Int_t fNbytesInfo {0};  Number of bytes for StreamerInfo record. ;  ; Bool_t fNoAnchorInName {kFALSE};  !True if we don't want to force the anchor to be appended to the file name ;  ; Int_t fNProcessIDs {0};  Number of TProcessID written to this file. ;  ; Long64_t fOffset {0};  !Seek offset cache ;  ; TList * fOpenPhases {nullptr};  !Time info about open phases ;  ; TString fOption;  File options. ;  ; TObjArray * fProcessIDs {nullptr};  !Array of pointers to TProcessIDs ;  ; Int_t fReadCalls {0};  Number of read calls ( not counting the cache calls ) ;  ; TString fRealName;  Effective real file name (not original url) ;  ; Long64_t fSeekFree {0};  Location on disk of free segments structure. ;  ; Long64_t fSeekInfo {0};  Location on disk of StreamerInfo record. ;  ; Double_t fSum2Buffer {0};  Sum of squares of buffer sizes of objects written so far. ;  ; Double_t fSumBuffer {0};  Sum of buffer sizes of objects written so far. ;  ; Char_t fUnits {0};  Number of bytes for file pointers. ;  ; TUrl fUrl;  !URL of file ;  ; Int_t fVersion {0};  File format version. ;  ; std::mutex fWriteMutex;  !Lock for writing baskets / keys into the file. ;  ; Int_t fWritten {0};  Number of objects written so far. ;  ;  Protected Attributes inherited from TDirectoryFile; Int_t fBufferSize {0};  Default buffer size to create new TKeys. ;  ; TDatime fDatimeC;  Date and time when directory is created. ;  ; TDatime fDatimeM;  Date and time of last modification. ;  ; TFile * fFile {nullptr};  Pointer to current file in memory. ;  ; TList * fKeys {n",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:42109,Performance,cache,cache,42109,"ullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:42139,Performance,cache,cached,42139,"ullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static constexpr Long64_t fgDefaultBlockSize = 2 * 1024 * 1024;  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:1289,Safety,timeout,timeout,1289,"Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TMemFile Class ReferenceInput/Output Library. ; A TMemFile is like a normal TFile except that it reads and writes only from memory. ; Definition at line 19 of file TMemFile.h. Classes; struct  TMemBlock;  ; struct  ZeroCopyView_t;  A read-only memory range which we do not control. More...;  . Public Types; using ExternalDataPtr_t = std::shared_ptr< const std::vector< char > >;  ;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ; ",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:9423,Safety,recover,recover,9423,"ption_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtua",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:28896,Safety,timeout,timeout,28896,"; static const char * DeclFileName ();  ; static EAsyncOpenStatus GetAsyncOpenStatus (const char *name);  Get status of the async open request related to 'name'. ;  ; static EAsyncOpenStatus GetAsyncOpenStatus (TFileOpenHandle *handle);  Get status of the async open request related to 'handle'. ;  ; static const char * GetCacheFileDir ();  Get the directory where to locally stage/cache remote files. ;  ; static const TUrl * GetEndpointUrl (const char *name);  Get final URL for file being opened asynchronously. ;  ; static Long64_t GetFileBytesRead ();  Static function returning the total number of bytes read from all files. ;  ; static Long64_t GetFileBytesWritten ();  Static function returning the total number of bytes written to all files. ;  ; static Long64_t GetFileCounter ();  ; static Int_t GetFileReadCalls ();  Static function returning the total number of read calls from all files. ;  ; static Bool_t GetOnlyStaged ();  Returns staged only flag. ;  ; static UInt_t GetOpenTimeout ();  Returns open timeout (in ms). ;  ; static Int_t GetReadaheadSize ();  Static function returning the readahead buffer size. ;  ; static Bool_t GetReadStreamerInfo ();  If the streamerinfos are to be read at file opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static v",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:30093,Safety,timeout,timeout,30093,"e opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; s",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:30114,Safety,timeout,timeout,30114,"e opening. ;  ; static EFileType GetType (const char *name, Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; s",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:30153,Safety,timeout,timeout,30153," Option_t *option="""", TString *prefix=nullptr);  Resolve the file type as a function of the protocol field in 'name'. ;  ; static void IncrementFileCounter ();  ; static TFile * Open (const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0);  Create / open a file. ;  ; static TFile * Open (TFileOpenHandle *handle);  Waits for the completion of an asynchronous open request. ;  ; static Bool_t SetCacheFileDir (std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE);  Sets the directory where to locally stage/cache remote files. ;  ; static void SetFileBytesRead (Long64_t bytes=0);  ; static void SetFileBytesWritten (Long64_t bytes=0);  ; static void SetFileReadCalls (Int_t readcalls=0);  ; static Bool_t SetOnlyStaged (Bool_t onlystaged);  Sets only staged flag. ;  ; static UInt_t SetOpenTimeout (UInt_t timeout);  Sets open timeout time (in ms). Returns previous timeout value. ;  ; static void SetReadaheadSize (Int_t bufsize=256000);  ; static void SetReadStreamerInfo (Bool_t readinfo=kTRUE);  Specify if the streamerinfos must be read at file opening. ;  ; static Bool_t ShrinkCacheFileDir (Long64_t shrinkSize, Long_t cleanupInteval=0);  Try to shrink the cache to the desired size. ;  ;  Static Public Member Functions inherited from TDirectoryFile; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDirectory; static void AddDirectory (Bool_t add=kTRUE);  Sets the flag controlling the automatic add objects like histograms, TGraph2D, etc in memory. ;  ; static Bool_t AddDirectoryStatus ();  Static function: see TDirectory::AddDirectory for more comments. ;  ; static Bool_t Cd (const char *path);  Change current directory to ""path"". ;  ; static TClass * Class ();  ; static const char * Class_Name",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:8332,Security,access,access,8332,"f, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first, Long64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, const char *classes=""*"", Option_t *option=""new"");  Generate source code necessary to access the objects stored in the file. ;  ; virtual void Map ();  ; virtual void Map (Option_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
https://root.cern/doc/v632/classTMemFile.html:9537,Security,access,access,9537," (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtual void SetEND (Long64_t last);  ; virtual void SetOffset (Long64_t offset, ERelativeT",MatchSource.WIKI,doc/v632/classTMemFile.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classTMemFile.html
